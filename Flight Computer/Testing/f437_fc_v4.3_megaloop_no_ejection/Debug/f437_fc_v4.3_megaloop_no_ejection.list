
f437_fc_v4.3_megaloop_no_ejection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014194  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000920  08014348  08014348  00024348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c68  08014c68  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08014c68  08014c68  00024c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c70  08014c70  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c70  08014c70  00024c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c74  08014c74  00024c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08014c78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          00001894  20000200  20000200  00030200  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001a94  20001a94  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003b5aa  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c78  00000000  00000000  0006b7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024b0  00000000  00000000  00071458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002250  00000000  00000000  00073908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c722  00000000  00000000  00075b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029287  00000000  00000000  000a227a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4c70  00000000  00000000  000cb501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c0171  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b348  00000000  00000000  001c01c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801432c 	.word	0x0801432c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	0801432c 	.word	0x0801432c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <Max31855_Read_Temp>:
uint32_t sign=0;									  	// Sign bit
uint8_t DATARX[4];                                    	// Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};         	// Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); 	// Low State for SPI Communication
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001038:	482c      	ldr	r0, [pc, #176]	; (80010ec <Max31855_Read_Temp+0xc0>)
 800103a:	f004 fff5 	bl	8006028 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);         	// DATA Transfer
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	2204      	movs	r2, #4
 8001044:	492a      	ldr	r1, [pc, #168]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001046:	482b      	ldr	r0, [pc, #172]	; (80010f4 <Max31855_Read_Temp+0xc8>)
 8001048:	f007 fa32 	bl	80084b0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET);   	// High State for SPI Communication
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001052:	4826      	ldr	r0, [pc, #152]	; (80010ec <Max31855_Read_Temp+0xc0>)
 8001054:	f004 ffe8 	bl	8006028 <HAL_GPIO_WritePin>

	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 800105a:	78db      	ldrb	r3, [r3, #3]
 800105c:	461a      	mov	r2, r3
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001060:	789b      	ldrb	r3, [r3, #2]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	431a      	orrs	r2, r3
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001068:	785b      	ldrb	r3, [r3, #1]
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	431a      	orrs	r2, r3
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	061b      	lsls	r3, r3, #24
 8001074:	4313      	orrs	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]

	Error = v & 0x07;								  	// Error Detection
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <Max31855_Read_Temp+0xcc>)
 8001084:	701a      	strb	r2, [r3, #0]

	if (v & 0x7) {
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <Max31855_Read_Temp+0x68>
		// uh oh, a serious problem!
		return -99999;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <Max31855_Read_Temp+0xd0>)
 8001092:	e024      	b.n	80010de <Max31855_Read_Temp+0xb2>
	}

	if (v & 0x80000000) {
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	da07      	bge.n	80010aa <Max31855_Read_Temp+0x7e>
		// Negative value, drop the lower 18 bits and explicitly extend sign bits.
		v = 0xFFFFC000 | ((v >> 18) & 0x00003FFF);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	0c9b      	lsrs	r3, r3, #18
 800109e:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80010a2:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e002      	b.n	80010b0 <Max31855_Read_Temp+0x84>
	} else {
		// Positive value, just drop the lower 18 bits.
		v >>= 18;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	0c9b      	lsrs	r3, r3, #18
 80010ae:	60fb      	str	r3, [r7, #12]
	}

	double centigrade = v;
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f7ff fa47 	bl	8000544 <__aeabi_ui2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	e9c7 2300 	strd	r2, r3, [r7]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <Max31855_Read_Temp+0xd4>)
 80010c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010c8:	f7ff fab6 	bl	8000638 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	e9c7 2300 	strd	r2, r3, [r7]
	return centigrade;
 80010d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010d8:	f7ff fda6 	bl	8000c28 <__aeabi_d2f>
 80010dc:	4603      	mov	r3, r0
 80010de:	ee07 3a90 	vmov	s15, r3
}
 80010e2:	eeb0 0a67 	vmov.f32	s0, s15
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40021000 	.word	0x40021000
 80010f0:	200004f0 	.word	0x200004f0
 80010f4:	200004f4 	.word	0x200004f4
 80010f8:	2000021c 	.word	0x2000021c
 80010fc:	c7c34f80 	.word	0xc7c34f80
 8001100:	3fd00000 	.word	0x3fd00000

08001104 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001118:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <MX_ADC1_Init+0xa0>)
 800111a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800111c:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001130:	2200      	movs	r2, #0
 8001132:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800113e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001146:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001154:	2201      	movs	r2, #1
 8001156:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001162:	2201      	movs	r2, #1
 8001164:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001166:	480e      	ldr	r0, [pc, #56]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001168:	f003 fe84 	bl	8004e74 <HAL_ADC_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001172:	f002 fab3 	bl	80036dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001176:	2306      	movs	r3, #6
 8001178:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800117a:	2301      	movs	r3, #1
 800117c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800117e:	2305      	movs	r3, #5
 8001180:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001188:	f003 feb8 	bl	8004efc <HAL_ADC_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001192:	f002 faa3 	bl	80036dc <Error_Handler>
  }

}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000054c 	.word	0x2000054c
 80011a4:	40012000 	.word	0x40012000

080011a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <HAL_ADC_MspInit+0xd8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d156      	bne.n	8001278 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_ADC_MspInit+0xdc>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a2c      	ldr	r2, [pc, #176]	; (8001284 <HAL_ADC_MspInit+0xdc>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <HAL_ADC_MspInit+0xdc>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_ADC_MspInit+0xdc>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a25      	ldr	r2, [pc, #148]	; (8001284 <HAL_ADC_MspInit+0xdc>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <HAL_ADC_MspInit+0xdc>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8001202:	2340      	movs	r3, #64	; 0x40
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	481c      	ldr	r0, [pc, #112]	; (8001288 <HAL_ADC_MspInit+0xe0>)
 8001216:	f004 fd43 	bl	8005ca0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <HAL_ADC_MspInit+0xe4>)
 800121c:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <HAL_ADC_MspInit+0xe8>)
 800121e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_ADC_MspInit+0xe4>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001238:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_ADC_MspInit+0xe4>)
 800123c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001240:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001244:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001248:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_ADC_MspInit+0xe4>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <HAL_ADC_MspInit+0xe4>)
 800125e:	f004 f98d 	bl	800557c <HAL_DMA_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001268:	f002 fa38 	bl	80036dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
 8001272:	4a06      	ldr	r2, [pc, #24]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40012000 	.word	0x40012000
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000
 800128c:	20000594 	.word	0x20000594
 8001290:	40026410 	.word	0x40026410

08001294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <MX_DMA_Init+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <MX_DMA_Init+0x88>)
 80012a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_DMA_Init+0x88>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_DMA_Init+0x88>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a17      	ldr	r2, [pc, #92]	; (800131c <MX_DMA_Init+0x88>)
 80012c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_DMA_Init+0x88>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 15, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	210f      	movs	r1, #15
 80012d6:	200c      	movs	r0, #12
 80012d8:	f004 f919 	bl	800550e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012dc:	200c      	movs	r0, #12
 80012de:	f004 f932 	bl	8005546 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	200e      	movs	r0, #14
 80012e8:	f004 f911 	bl	800550e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80012ec:	200e      	movs	r0, #14
 80012ee:	f004 f92a 	bl	8005546 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2038      	movs	r0, #56	; 0x38
 80012f8:	f004 f909 	bl	800550e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012fc:	2038      	movs	r0, #56	; 0x38
 80012fe:	f004 f922 	bl	8005546 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2039      	movs	r0, #57	; 0x39
 8001308:	f004 f901 	bl	800550e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800130c:	2039      	movs	r0, #57	; 0x39
 800130e:	f004 f91a 	bl	8005546 <HAL_NVIC_EnableIRQ>

}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
 800133a:	4bb4      	ldr	r3, [pc, #720]	; (800160c <MX_GPIO_Init+0x2ec>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4ab3      	ldr	r2, [pc, #716]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4bb1      	ldr	r3, [pc, #708]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	623b      	str	r3, [r7, #32]
 8001350:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	4bad      	ldr	r3, [pc, #692]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4aac      	ldr	r2, [pc, #688]	; (800160c <MX_GPIO_Init+0x2ec>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4baa      	ldr	r3, [pc, #680]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	4ba6      	ldr	r3, [pc, #664]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4aa5      	ldr	r2, [pc, #660]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001378:	f043 0320 	orr.w	r3, r3, #32
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4ba3      	ldr	r3, [pc, #652]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	4b9f      	ldr	r3, [pc, #636]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a9e      	ldr	r2, [pc, #632]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b9c      	ldr	r3, [pc, #624]	; (800160c <MX_GPIO_Init+0x2ec>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b98      	ldr	r3, [pc, #608]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a97      	ldr	r2, [pc, #604]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b95      	ldr	r3, [pc, #596]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b91      	ldr	r3, [pc, #580]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a90      	ldr	r2, [pc, #576]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b8e      	ldr	r3, [pc, #568]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	4b8a      	ldr	r3, [pc, #552]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a89      	ldr	r2, [pc, #548]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b87      	ldr	r3, [pc, #540]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b83      	ldr	r3, [pc, #524]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a82      	ldr	r2, [pc, #520]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b80      	ldr	r3, [pc, #512]	; (800160c <MX_GPIO_Init+0x2ec>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f248 4184 	movw	r1, #33924	; 0x8484
 800141c:	487c      	ldr	r0, [pc, #496]	; (8001610 <MX_GPIO_Init+0x2f0>)
 800141e:	f004 fe03 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001428:	487a      	ldr	r0, [pc, #488]	; (8001614 <MX_GPIO_Init+0x2f4>)
 800142a:	f004 fdfd 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001434:	4878      	ldr	r0, [pc, #480]	; (8001618 <MX_GPIO_Init+0x2f8>)
 8001436:	f004 fdf7 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2108      	movs	r1, #8
 800143e:	4877      	ldr	r0, [pc, #476]	; (800161c <MX_GPIO_Init+0x2fc>)
 8001440:	f004 fdf2 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800144a:	4872      	ldr	r0, [pc, #456]	; (8001614 <MX_GPIO_Init+0x2f4>)
 800144c:	f004 fdec 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 8001450:	2200      	movs	r2, #0
 8001452:	f645 2126 	movw	r1, #23078	; 0x5a26
 8001456:	4872      	ldr	r0, [pc, #456]	; (8001620 <MX_GPIO_Init+0x300>)
 8001458:	f004 fde6 	bl	8006028 <HAL_GPIO_WritePin>
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_NSS_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001462:	4870      	ldr	r0, [pc, #448]	; (8001624 <MX_GPIO_Init+0x304>)
 8001464:	f004 fde0 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 41f9 	mov.w	r1, #31872	; 0x7c80
 800146e:	486e      	ldr	r0, [pc, #440]	; (8001628 <MX_GPIO_Init+0x308>)
 8001470:	f004 fdda 	bl	8006028 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|VR_CTRL_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	2170      	movs	r1, #112	; 0x70
 8001478:	486b      	ldr	r0, [pc, #428]	; (8001628 <MX_GPIO_Init+0x308>)
 800147a:	f004 fdd5 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin;
 800147e:	f248 4384 	movw	r3, #33924	; 0x8484
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	485e      	ldr	r0, [pc, #376]	; (8001610 <MX_GPIO_Init+0x2f0>)
 8001498:	f004 fc02 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI_SW4_Pin;
 800149c:	2310      	movs	r3, #16
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a0:	4b62      	ldr	r3, [pc, #392]	; (800162c <MX_GPIO_Init+0x30c>)
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_EXTI_SW4_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ac:	4619      	mov	r1, r3
 80014ae:	4858      	ldr	r0, [pc, #352]	; (8001610 <MX_GPIO_Init+0x2f0>)
 80014b0:	f004 fbf6 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80014b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014be:	2301      	movs	r3, #1
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	4619      	mov	r1, r3
 80014cc:	4851      	ldr	r0, [pc, #324]	; (8001614 <MX_GPIO_Init+0x2f4>)
 80014ce:	f004 fbe7 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 80014d2:	2301      	movs	r3, #1
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d6:	4b55      	ldr	r3, [pc, #340]	; (800162c <MX_GPIO_Init+0x30c>)
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	4619      	mov	r1, r3
 80014e4:	484c      	ldr	r0, [pc, #304]	; (8001618 <MX_GPIO_Init+0x2f8>)
 80014e6:	f004 fbdb 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin;
 80014ea:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	4619      	mov	r1, r3
 8001502:	4845      	ldr	r0, [pc, #276]	; (8001618 <MX_GPIO_Init+0x2f8>)
 8001504:	f004 fbcc 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDF_Pin;
 8001508:	2308      	movs	r3, #8
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LEDF_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	483f      	ldr	r0, [pc, #252]	; (800161c <MX_GPIO_Init+0x2fc>)
 8001520:	f004 fbbe 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001524:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	4837      	ldr	r0, [pc, #220]	; (8001618 <MX_GPIO_Init+0x2f8>)
 800153a:	f004 fbb1 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800153e:	2302      	movs	r3, #2
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	4834      	ldr	r0, [pc, #208]	; (8001624 <MX_GPIO_Init+0x304>)
 8001552:	f004 fba5 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 8001556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	482a      	ldr	r0, [pc, #168]	; (8001614 <MX_GPIO_Init+0x2f4>)
 800156c:	f004 fb98 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 8001570:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	4822      	ldr	r0, [pc, #136]	; (8001614 <MX_GPIO_Init+0x2f4>)
 800158a:	f004 fb89 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|Rcov_Cont_Main_Pin
 800158e:	f242 4319 	movw	r3, #9241	; 0x2419
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Cont_Drogue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	481f      	ldr	r0, [pc, #124]	; (8001620 <MX_GPIO_Init+0x300>)
 80015a4:	f004 fb7c 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 80015a8:	f645 2326 	movw	r3, #23078	; 0x5a26
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4817      	ldr	r0, [pc, #92]	; (8001620 <MX_GPIO_Init+0x300>)
 80015c2:	f004 fb6d 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Payload_EN_Pin|IN_XTend_Continuity_Pin;
 80015c6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	480d      	ldr	r0, [pc, #52]	; (8001610 <MX_GPIO_Init+0x2f0>)
 80015dc:	f004 fb60 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_NSS_Pin;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SX_NSS_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <MX_GPIO_Init+0x304>)
 80015fa:	f004 fb51 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80015fe:	f44f 43f9 	mov.w	r3, #31872	; 0x7c80
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|VR_CTRL_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	e011      	b.n	8001630 <MX_GPIO_Init+0x310>
 800160c:	40023800 	.word	0x40023800
 8001610:	40021000 	.word	0x40021000
 8001614:	40021400 	.word	0x40021400
 8001618:	40020800 	.word	0x40020800
 800161c:	40020000 	.word	0x40020000
 8001620:	40021800 	.word	0x40021800
 8001624:	40020400 	.word	0x40020400
 8001628:	40020c00 	.word	0x40020c00
 800162c:	10110000 	.word	0x10110000
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	4826      	ldr	r0, [pc, #152]	; (80016d8 <MX_GPIO_Init+0x3b8>)
 800163e:	f004 fb2f 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	4820      	ldr	r0, [pc, #128]	; (80016d8 <MX_GPIO_Init+0x3b8>)
 8001658:	f004 fb22 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 800165c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <MX_GPIO_Init+0x3bc>)
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4619      	mov	r1, r3
 8001670:	481b      	ldr	r0, [pc, #108]	; (80016e0 <MX_GPIO_Init+0x3c0>)
 8001672:	f004 fb15 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin;
 8001676:	2370      	movs	r3, #112	; 0x70
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167e:	2301      	movs	r3, #1
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001682:	2302      	movs	r3, #2
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	4812      	ldr	r0, [pc, #72]	; (80016d8 <MX_GPIO_Init+0x3b8>)
 800168e:	f004 fb07 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001692:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	480e      	ldr	r0, [pc, #56]	; (80016e4 <MX_GPIO_Init+0x3c4>)
 80016ac:	f004 faf8 	bl	8005ca0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2006      	movs	r0, #6
 80016b6:	f003 ff2a 	bl	800550e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016ba:	2006      	movs	r0, #6
 80016bc:	f003 ff43 	bl	8005546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	200a      	movs	r0, #10
 80016c6:	f003 ff22 	bl	800550e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80016ca:	200a      	movs	r0, #10
 80016cc:	f003 ff3b 	bl	8005546 <HAL_NVIC_EnableIRQ>

}
 80016d0:	bf00      	nop
 80016d2:	3738      	adds	r7, #56	; 0x38
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	10110000 	.word	0x10110000
 80016e0:	40021800 	.word	0x40021800
 80016e4:	40020400 	.word	0x40020400

080016e8 <GPS_ParseBuffer>:
 * 		2. use memcpy to extract string between '$' and '\n' found
 * 		3. parse
 * 				a. if valid gps coordinates are found, stop
 * 				b. else repeat with rest of buffer
 */
void GPS_ParseBuffer(double *latitude, double *longitude, float *time) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0ba      	sub	sp, #232	; 0xe8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
	// debugging: print full buffer first
	HAL_UART_Transmit(&huart8, rx_buf, strlen(rx_buf), HAL_MAX_DELAY);
	#endif

	// limits on the DMA buffer
	uint16_t buf_end = GPS_RX_DMA_BUF_LEN + 1; // +1 for null terminator
 80016f4:	23b0      	movs	r3, #176	; 0xb0
 80016f6:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	uint8_t valid_string_found = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1

	// for extracting substrings to be parsed
	char current_substring[200]; // max size of valid NMEA string is 75 for the validate function
	memset(current_substring, 0, 200);
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	22c8      	movs	r2, #200	; 0xc8
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f00c fdb9 	bl	800e280 <memset>

	// need to know where we are in the buffer to be able to loop automatically
	char *head_of_parse_buffer = gps_rx_buf;
 800170e:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <GPS_ParseBuffer+0xfc>)
 8001710:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	char *dollar;
	char *newline;

	while (head_of_parse_buffer != NULL) {
 8001714:	e057      	b.n	80017c6 <GPS_ParseBuffer+0xde>

		// get index of '$' and '\n'. note: gps_rx_buf MUST be null terminated!
		dollar = strchr(head_of_parse_buffer, '$');
 8001716:	2124      	movs	r1, #36	; 0x24
 8001718:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800171c:	f00d fd83 	bl	800f226 <strchr>
 8001720:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		newline = strchr(dollar, '\n'); // start after $ sign
 8001724:	210a      	movs	r1, #10
 8001726:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800172a:	f00d fd7c 	bl	800f226 <strchr>
 800172e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8

		if (dollar != NULL && newline != NULL) {
 8001732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001736:	2b00      	cmp	r3, #0
 8001738:	d049      	beq.n	80017ce <GPS_ParseBuffer+0xe6>
 800173a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d045      	beq.n	80017ce <GPS_ParseBuffer+0xe6>
			// copy substring into string
			memcpy(current_substring, dollar, (newline - dollar));
 8001742:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	461a      	mov	r2, r3
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001756:	4618      	mov	r0, r3
 8001758:	f00c fd84 	bl	800e264 <memcpy>
		else {
			break;
		}

		// parse
		if (GPS_validate((char*) current_substring)) {
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4618      	mov	r0, r3
 8001762:	f000 f843 	bl	80017ec <GPS_validate>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01b      	beq.n	80017a4 <GPS_ParseBuffer+0xbc>
			if (GPS_parse((char*) current_substring)) {
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f89d 	bl	80018b0 <GPS_parse>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <GPS_ParseBuffer+0xbc>
				*latitude = GPS.dec_latitude;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <GPS_ParseBuffer+0x100>)
 800177e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001782:	68f9      	ldr	r1, [r7, #12]
 8001784:	e9c1 2300 	strd	r2, r3, [r1]
				*longitude = GPS.dec_longitude;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <GPS_ParseBuffer+0x100>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	e9c1 2300 	strd	r2, r3, [r1]
				*time = GPS.utc_time;
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <GPS_ParseBuffer+0x100>)
 8001796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	601a      	str	r2, [r3, #0]
				valid_string_found = 1;
 800179c:	2301      	movs	r3, #1
 800179e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1

				break; // got valid coordinates, stop parsing
 80017a2:	e014      	b.n	80017ce <GPS_ParseBuffer+0xe6>
			}
		}

		memset(current_substring, 0, (newline - dollar) + 10);
 80017a4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80017a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	330a      	adds	r3, #10
 80017b0:	461a      	mov	r2, r3
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f00c fd61 	bl	800e280 <memset>
		head_of_parse_buffer = newline; // move head of buffer to newline character found
 80017be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	while (head_of_parse_buffer != NULL) {
 80017c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1a3      	bne.n	8001716 <GPS_ParseBuffer+0x2e>
	}


	memset(gps_rx_buf, 0, buf_end);
 80017ce:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 80017d2:	461a      	mov	r2, r3
 80017d4:	2100      	movs	r1, #0
 80017d6:	4803      	ldr	r0, [pc, #12]	; (80017e4 <GPS_ParseBuffer+0xfc>)
 80017d8:	f00c fd52 	bl	800e280 <memset>

}
 80017dc:	bf00      	nop
 80017de:	37e8      	adds	r7, #232	; 0xe8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000a4c 	.word	0x20000a4c
 80017e8:	200005f8 	.word	0x200005f8

080017ec <GPS_validate>:

int GPS_validate(char *nmeastr){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$'){
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b24      	cmp	r3, #36	; 0x24
 8001806:	d103      	bne.n	8001810 <GPS_validate+0x24>
        i++;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
    } else {
        return 0;
    }

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800180e:	e00c      	b.n	800182a <GPS_validate+0x3e>
        return 0;
 8001810:	2300      	movs	r3, #0
 8001812:	e047      	b.n	80018a4 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4053      	eors	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        i++;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	4413      	add	r3, r2
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d008      	beq.n	8001848 <GPS_validate+0x5c>
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b2a      	cmp	r3, #42	; 0x2a
 8001840:	d002      	beq.n	8001848 <GPS_validate+0x5c>
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b4a      	cmp	r3, #74	; 0x4a
 8001846:	dde5      	ble.n	8001814 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b4a      	cmp	r3, #74	; 0x4a
 800184c:	dd01      	ble.n	8001852 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800184e:	2300      	movs	r3, #0
 8001850:	e028      	b.n	80018a4 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b2a      	cmp	r3, #42	; 0x2a
 800185c:	d119      	bne.n	8001892 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3302      	adds	r3, #2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	490a      	ldr	r1, [pc, #40]	; (80018ac <GPS_validate+0xc0>)
 8001882:	4618      	mov	r0, r3
 8001884:	f00d fc3e 	bl	800f104 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001888:	7a3a      	ldrb	r2, [r7, #8]
 800188a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800188c:	429a      	cmp	r2, r3
 800188e:	d108      	bne.n	80018a2 <GPS_validate+0xb6>
 8001890:	e001      	b.n	8001896 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001892:	2300      	movs	r3, #0
 8001894:	e006      	b.n	80018a4 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001896:	7a7a      	ldrb	r2, [r7, #9]
 8001898:	7b7b      	ldrb	r3, [r7, #13]
 800189a:	429a      	cmp	r2, r3
 800189c:	d101      	bne.n	80018a2 <GPS_validate+0xb6>
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <GPS_validate+0xb8>
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	08014348 	.word	0x08014348

080018b0 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af08      	add	r7, sp, #32
 80018b6:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80018b8:	2206      	movs	r2, #6
 80018ba:	497d      	ldr	r1, [pc, #500]	; (8001ab0 <GPS_parse+0x200>)
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f00d fcc7 	bl	800f250 <strncmp>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d143      	bne.n	8001950 <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%lf,%c,%lf,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80018c8:	4b7a      	ldr	r3, [pc, #488]	; (8001ab4 <GPS_parse+0x204>)
 80018ca:	9307      	str	r3, [sp, #28]
 80018cc:	4b7a      	ldr	r3, [pc, #488]	; (8001ab8 <GPS_parse+0x208>)
 80018ce:	9306      	str	r3, [sp, #24]
 80018d0:	4b7a      	ldr	r3, [pc, #488]	; (8001abc <GPS_parse+0x20c>)
 80018d2:	9305      	str	r3, [sp, #20]
 80018d4:	4b7a      	ldr	r3, [pc, #488]	; (8001ac0 <GPS_parse+0x210>)
 80018d6:	9304      	str	r3, [sp, #16]
 80018d8:	4b7a      	ldr	r3, [pc, #488]	; (8001ac4 <GPS_parse+0x214>)
 80018da:	9303      	str	r3, [sp, #12]
 80018dc:	4b7a      	ldr	r3, [pc, #488]	; (8001ac8 <GPS_parse+0x218>)
 80018de:	9302      	str	r3, [sp, #8]
 80018e0:	4b7a      	ldr	r3, [pc, #488]	; (8001acc <GPS_parse+0x21c>)
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	4b7a      	ldr	r3, [pc, #488]	; (8001ad0 <GPS_parse+0x220>)
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4b7a      	ldr	r3, [pc, #488]	; (8001ad4 <GPS_parse+0x224>)
 80018ea:	4a7b      	ldr	r2, [pc, #492]	; (8001ad8 <GPS_parse+0x228>)
 80018ec:	497b      	ldr	r1, [pc, #492]	; (8001adc <GPS_parse+0x22c>)
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f00d fc28 	bl	800f144 <siscanf>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f340 80d4 	ble.w	8001aa4 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80018fc:	4b78      	ldr	r3, [pc, #480]	; (8001ae0 <GPS_parse+0x230>)
 80018fe:	ed93 7b08 	vldr	d7, [r3, #32]
 8001902:	4b77      	ldr	r3, [pc, #476]	; (8001ae0 <GPS_parse+0x230>)
 8001904:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001908:	4618      	mov	r0, r3
 800190a:	eeb0 0a47 	vmov.f32	s0, s14
 800190e:	eef0 0a67 	vmov.f32	s1, s15
 8001912:	f000 f909 	bl	8001b28 <GPS_nmea_to_dec>
 8001916:	eeb0 7a40 	vmov.f32	s14, s0
 800191a:	eef0 7a60 	vmov.f32	s15, s1
 800191e:	4b70      	ldr	r3, [pc, #448]	; (8001ae0 <GPS_parse+0x230>)
 8001920:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001924:	4b6e      	ldr	r3, [pc, #440]	; (8001ae0 <GPS_parse+0x230>)
 8001926:	ed93 7b06 	vldr	d7, [r3, #24]
 800192a:	4b6d      	ldr	r3, [pc, #436]	; (8001ae0 <GPS_parse+0x230>)
 800192c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001930:	4618      	mov	r0, r3
 8001932:	eeb0 0a47 	vmov.f32	s0, s14
 8001936:	eef0 0a67 	vmov.f32	s1, s15
 800193a:	f000 f8f5 	bl	8001b28 <GPS_nmea_to_dec>
 800193e:	eeb0 7a40 	vmov.f32	s14, s0
 8001942:	eef0 7a60 	vmov.f32	s15, s1
 8001946:	4b66      	ldr	r3, [pc, #408]	; (8001ae0 <GPS_parse+0x230>)
 8001948:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 800194c:	2301      	movs	r3, #1
 800194e:	e0aa      	b.n	8001aa6 <GPS_parse+0x1f6>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8001950:	2206      	movs	r2, #6
 8001952:	4964      	ldr	r1, [pc, #400]	; (8001ae4 <GPS_parse+0x234>)
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f00d fc7b 	bl	800f250 <strncmp>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d13f      	bne.n	80019e0 <GPS_parse+0x130>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%lf,%c,%lf,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8001960:	4b61      	ldr	r3, [pc, #388]	; (8001ae8 <GPS_parse+0x238>)
 8001962:	9305      	str	r3, [sp, #20]
 8001964:	4b61      	ldr	r3, [pc, #388]	; (8001aec <GPS_parse+0x23c>)
 8001966:	9304      	str	r3, [sp, #16]
 8001968:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <GPS_parse+0x240>)
 800196a:	9303      	str	r3, [sp, #12]
 800196c:	4b56      	ldr	r3, [pc, #344]	; (8001ac8 <GPS_parse+0x218>)
 800196e:	9302      	str	r3, [sp, #8]
 8001970:	4b56      	ldr	r3, [pc, #344]	; (8001acc <GPS_parse+0x21c>)
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	4b56      	ldr	r3, [pc, #344]	; (8001ad0 <GPS_parse+0x220>)
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4b56      	ldr	r3, [pc, #344]	; (8001ad4 <GPS_parse+0x224>)
 800197a:	4a57      	ldr	r2, [pc, #348]	; (8001ad8 <GPS_parse+0x228>)
 800197c:	495d      	ldr	r1, [pc, #372]	; (8001af4 <GPS_parse+0x244>)
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f00d fbe0 	bl	800f144 <siscanf>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	f340 808c 	ble.w	8001aa4 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800198c:	4b54      	ldr	r3, [pc, #336]	; (8001ae0 <GPS_parse+0x230>)
 800198e:	ed93 7b08 	vldr	d7, [r3, #32]
 8001992:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <GPS_parse+0x230>)
 8001994:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001998:	4618      	mov	r0, r3
 800199a:	eeb0 0a47 	vmov.f32	s0, s14
 800199e:	eef0 0a67 	vmov.f32	s1, s15
 80019a2:	f000 f8c1 	bl	8001b28 <GPS_nmea_to_dec>
 80019a6:	eeb0 7a40 	vmov.f32	s14, s0
 80019aa:	eef0 7a60 	vmov.f32	s15, s1
 80019ae:	4b4c      	ldr	r3, [pc, #304]	; (8001ae0 <GPS_parse+0x230>)
 80019b0:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80019b4:	4b4a      	ldr	r3, [pc, #296]	; (8001ae0 <GPS_parse+0x230>)
 80019b6:	ed93 7b06 	vldr	d7, [r3, #24]
 80019ba:	4b49      	ldr	r3, [pc, #292]	; (8001ae0 <GPS_parse+0x230>)
 80019bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80019c0:	4618      	mov	r0, r3
 80019c2:	eeb0 0a47 	vmov.f32	s0, s14
 80019c6:	eef0 0a67 	vmov.f32	s1, s15
 80019ca:	f000 f8ad 	bl	8001b28 <GPS_nmea_to_dec>
 80019ce:	eeb0 7a40 	vmov.f32	s14, s0
 80019d2:	eef0 7a60 	vmov.f32	s15, s1
 80019d6:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <GPS_parse+0x230>)
 80019d8:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 80019dc:	2301      	movs	r3, #1
 80019de:	e062      	b.n	8001aa6 <GPS_parse+0x1f6>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80019e0:	2206      	movs	r2, #6
 80019e2:	4945      	ldr	r1, [pc, #276]	; (8001af8 <GPS_parse+0x248>)
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f00d fc33 	bl	800f250 <strncmp>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d13a      	bne.n	8001a66 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNGLL,%lf,%c,%lf,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80019f0:	4b42      	ldr	r3, [pc, #264]	; (8001afc <GPS_parse+0x24c>)
 80019f2:	9303      	str	r3, [sp, #12]
 80019f4:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <GPS_parse+0x228>)
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <GPS_parse+0x218>)
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	4b33      	ldr	r3, [pc, #204]	; (8001acc <GPS_parse+0x21c>)
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <GPS_parse+0x220>)
 8001a02:	4a34      	ldr	r2, [pc, #208]	; (8001ad4 <GPS_parse+0x224>)
 8001a04:	493e      	ldr	r1, [pc, #248]	; (8001b00 <GPS_parse+0x250>)
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f00d fb9c 	bl	800f144 <siscanf>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	dd48      	ble.n	8001aa4 <GPS_parse+0x1f4>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001a12:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <GPS_parse+0x230>)
 8001a14:	ed93 7b08 	vldr	d7, [r3, #32]
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <GPS_parse+0x230>)
 8001a1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a1e:	4618      	mov	r0, r3
 8001a20:	eeb0 0a47 	vmov.f32	s0, s14
 8001a24:	eef0 0a67 	vmov.f32	s1, s15
 8001a28:	f000 f87e 	bl	8001b28 <GPS_nmea_to_dec>
 8001a2c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a30:	eef0 7a60 	vmov.f32	s15, s1
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <GPS_parse+0x230>)
 8001a36:	ed83 7b02 	vstr	d7, [r3, #8]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001a3a:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <GPS_parse+0x230>)
 8001a3c:	ed93 7b06 	vldr	d7, [r3, #24]
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <GPS_parse+0x230>)
 8001a42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a46:	4618      	mov	r0, r3
 8001a48:	eeb0 0a47 	vmov.f32	s0, s14
 8001a4c:	eef0 0a67 	vmov.f32	s1, s15
 8001a50:	f000 f86a 	bl	8001b28 <GPS_nmea_to_dec>
 8001a54:	eeb0 7a40 	vmov.f32	s14, s0
 8001a58:	eef0 7a60 	vmov.f32	s15, s1
 8001a5c:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <GPS_parse+0x230>)
 8001a5e:	ed83 7b00 	vstr	d7, [r3]
        	return 1;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e01f      	b.n	8001aa6 <GPS_parse+0x1f6>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8001a66:	2206      	movs	r2, #6
 8001a68:	4926      	ldr	r1, [pc, #152]	; (8001b04 <GPS_parse+0x254>)
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f00d fbf0 	bl	800f250 <strncmp>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d116      	bne.n	8001aa4 <GPS_parse+0x1f4>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <GPS_parse+0x258>)
 8001a78:	9305      	str	r3, [sp, #20]
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <GPS_parse+0x25c>)
 8001a7c:	9304      	str	r3, [sp, #16]
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <GPS_parse+0x260>)
 8001a80:	9303      	str	r3, [sp, #12]
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <GPS_parse+0x240>)
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <GPS_parse+0x264>)
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <GPS_parse+0x268>)
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <GPS_parse+0x26c>)
 8001a90:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <GPS_parse+0x270>)
 8001a92:	4924      	ldr	r1, [pc, #144]	; (8001b24 <GPS_parse+0x274>)
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f00d fb55 	bl	800f144 <siscanf>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	dd01      	ble.n	8001aa4 <GPS_parse+0x1f4>
            return 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	e000      	b.n	8001aa6 <GPS_parse+0x1f6>
    }
    return 0;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	08014350 	.word	0x08014350
 8001ab4:	20000638 	.word	0x20000638
 8001ab8:	20000634 	.word	0x20000634
 8001abc:	20000630 	.word	0x20000630
 8001ac0:	2000062c 	.word	0x2000062c
 8001ac4:	20000628 	.word	0x20000628
 8001ac8:	20000625 	.word	0x20000625
 8001acc:	20000610 	.word	0x20000610
 8001ad0:	20000624 	.word	0x20000624
 8001ad4:	20000618 	.word	0x20000618
 8001ad8:	20000620 	.word	0x20000620
 8001adc:	08014358 	.word	0x08014358
 8001ae0:	200005f8 	.word	0x200005f8
 8001ae4:	08014380 	.word	0x08014380
 8001ae8:	20000644 	.word	0x20000644
 8001aec:	20000640 	.word	0x20000640
 8001af0:	2000063c 	.word	0x2000063c
 8001af4:	08014388 	.word	0x08014388
 8001af8:	080143ac 	.word	0x080143ac
 8001afc:	20000648 	.word	0x20000648
 8001b00:	080143b4 	.word	0x080143b4
 8001b04:	080143d0 	.word	0x080143d0
 8001b08:	20000660 	.word	0x20000660
 8001b0c:	2000065c 	.word	0x2000065c
 8001b10:	20000659 	.word	0x20000659
 8001b14:	20000658 	.word	0x20000658
 8001b18:	20000654 	.word	0x20000654
 8001b1c:	20000650 	.word	0x20000650
 8001b20:	2000064c 	.word	0x2000064c
 8001b24:	080143d8 	.word	0x080143d8

08001b28 <GPS_nmea_to_dec>:

double GPS_nmea_to_dec(double deg_coord, char nsew) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	; 0x30
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
    int degree = (int)(deg_coord/100);
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <GPS_nmea_to_dec+0xac>)
 8001b3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b40:	f7fe fea4 	bl	800088c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff f824 	bl	8000b98 <__aeabi_d2iz>
 8001b50:	4603      	mov	r3, r0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    double minutes = deg_coord - degree*100;
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	2264      	movs	r2, #100	; 0x64
 8001b58:	fb02 f303 	mul.w	r3, r2, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fd01 	bl	8000564 <__aeabi_i2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b6a:	f7fe fbad 	bl	80002c8 <__aeabi_dsub>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double dec_deg = minutes / 60;
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <GPS_nmea_to_dec+0xb0>)
 8001b7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b80:	f7fe fe84 	bl	800088c <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double decimal = degree + dec_deg;
 8001b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b8e:	f7fe fce9 	bl	8000564 <__aeabi_i2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b9a:	f7fe fb97 	bl	80002cc <__adddf3>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2b53      	cmp	r3, #83	; 0x53
 8001baa:	d002      	beq.n	8001bb2 <GPS_nmea_to_dec+0x8a>
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b57      	cmp	r3, #87	; 0x57
 8001bb0:	d105      	bne.n	8001bbe <GPS_nmea_to_dec+0x96>
        decimal *= -1;
 8001bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    return decimal;
 8001bbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bca:	eef0 0a67 	vmov.f32	s1, s15
 8001bce:	3730      	adds	r7, #48	; 0x30
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40590000 	.word	0x40590000
 8001bd8:	404e0000 	.word	0x404e0000

08001bdc <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <MX_I2C2_Init+0x74>)
 8001be2:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <MX_I2C2_Init+0x78>)
 8001be4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <MX_I2C2_Init+0x74>)
 8001be8:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <MX_I2C2_Init+0x7c>)
 8001bea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <MX_I2C2_Init+0x74>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <MX_I2C2_Init+0x74>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_I2C2_Init+0x74>)
 8001bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bfe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_I2C2_Init+0x74>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_I2C2_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <MX_I2C2_Init+0x74>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_I2C2_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c18:	480d      	ldr	r0, [pc, #52]	; (8001c50 <MX_I2C2_Init+0x74>)
 8001c1a:	f004 fa51 	bl	80060c0 <HAL_I2C_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c24:	f001 fd5a 	bl	80036dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4809      	ldr	r0, [pc, #36]	; (8001c50 <MX_I2C2_Init+0x74>)
 8001c2c:	f005 fa07 	bl	800703e <HAL_I2CEx_ConfigAnalogFilter>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001c36:	f001 fd51 	bl	80036dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MX_I2C2_Init+0x74>)
 8001c3e:	f005 fa3a 	bl	80070b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001c48:	f001 fd48 	bl	80036dc <Error_Handler>
  }

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200006bc 	.word	0x200006bc
 8001c54:	40005800 	.word	0x40005800
 8001c58:	000186a0 	.word	0x000186a0

08001c5c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <MX_I2C3_Init+0x74>)
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <MX_I2C3_Init+0x78>)
 8001c64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <MX_I2C3_Init+0x74>)
 8001c68:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <MX_I2C3_Init+0x7c>)
 8001c6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <MX_I2C3_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <MX_I2C3_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <MX_I2C3_Init+0x74>)
 8001c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c7e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <MX_I2C3_Init+0x74>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <MX_I2C3_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <MX_I2C3_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_I2C3_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c98:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <MX_I2C3_Init+0x74>)
 8001c9a:	f004 fa11 	bl	80060c0 <HAL_I2C_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ca4:	f001 fd1a 	bl	80036dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <MX_I2C3_Init+0x74>)
 8001cac:	f005 f9c7 	bl	800703e <HAL_I2CEx_ConfigAnalogFilter>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001cb6:	f001 fd11 	bl	80036dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <MX_I2C3_Init+0x74>)
 8001cbe:	f005 f9fa 	bl	80070b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001cc8:	f001 fd08 	bl	80036dc <Error_Handler>
  }

}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000668 	.word	0x20000668
 8001cd4:	40005c00 	.word	0x40005c00
 8001cd8:	000186a0 	.word	0x000186a0

08001cdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	; 0x30
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a42      	ldr	r2, [pc, #264]	; (8001e04 <HAL_I2C_MspInit+0x128>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d12d      	bne.n	8001d5a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	4b41      	ldr	r3, [pc, #260]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a40      	ldr	r2, [pc, #256]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d20:	2312      	movs	r3, #18
 8001d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	4619      	mov	r1, r3
 8001d36:	4835      	ldr	r0, [pc, #212]	; (8001e0c <HAL_I2C_MspInit+0x130>)
 8001d38:	f003 ffb2 	bl	8005ca0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	4a30      	ldr	r2, [pc, #192]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001d46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4c:	4b2e      	ldr	r3, [pc, #184]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001d58:	e050      	b.n	8001dfc <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2c      	ldr	r2, [pc, #176]	; (8001e10 <HAL_I2C_MspInit+0x134>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d14b      	bne.n	8001dfc <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	4a26      	ldr	r2, [pc, #152]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	6313      	str	r3, [r2, #48]	; 0x30
 8001d74:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da2:	2312      	movs	r3, #18
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dae:	2304      	movs	r3, #4
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4816      	ldr	r0, [pc, #88]	; (8001e14 <HAL_I2C_MspInit+0x138>)
 8001dba:	f003 ff71 	bl	8005ca0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc4:	2312      	movs	r3, #18
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480f      	ldr	r0, [pc, #60]	; (8001e18 <HAL_I2C_MspInit+0x13c>)
 8001ddc:	f003 ff60 	bl	8005ca0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001dea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dee:	6413      	str	r3, [r2, #64]	; 0x40
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
}
 8001dfc:	bf00      	nop
 8001dfe:	3730      	adds	r7, #48	; 0x30
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40005800 	.word	0x40005800
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40005c00 	.word	0x40005c00
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020000 	.word	0x40020000

08001e1c <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <lsm6dsl_init+0xcc>)
 8001e26:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 8001e28:	4b30      	ldr	r3, [pc, #192]	; (8001eec <lsm6dsl_init+0xd0>)
 8001e2a:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 8001e2c:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <lsm6dsl_init+0xd4>)
 8001e2e:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001e30:	200a      	movs	r0, #10
 8001e32:	f000 f9e7 	bl	8002204 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	492e      	ldr	r1, [pc, #184]	; (8001ef4 <lsm6dsl_init+0xd8>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fd09 	bl	8002854 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <lsm6dsl_init+0xd8>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b6a      	cmp	r3, #106	; 0x6a
 8001e48:	d007      	beq.n	8001e5a <lsm6dsl_init+0x3e>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	482a      	ldr	r0, [pc, #168]	; (8001ef8 <lsm6dsl_init+0xdc>)
 8001e50:	f004 f8ea 	bl	8006028 <HAL_GPIO_WritePin>
		__BKPT();
 8001e54:	be00      	bkpt	0x0000
		Error_Handler();
 8001e56:	f001 fc41 	bl	80036dc <Error_Handler>
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fd08 	bl	8002876 <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	4924      	ldr	r1, [pc, #144]	; (8001efc <lsm6dsl_init+0xe0>)
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fd28 	bl	80028c2 <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 8001e72:	4b22      	ldr	r3, [pc, #136]	; (8001efc <lsm6dsl_init+0xe0>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f5      	bne.n	8001e66 <lsm6dsl_init+0x4a>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	2101      	movs	r1, #1
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fbf9 	bl	8002678 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fb81 	bl	8002594 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	2104      	movs	r1, #4
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fbc7 	bl	800262c <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 8001e9e:	f107 030c 	add.w	r3, r7, #12
 8001ea2:	2103      	movs	r1, #3
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 fb4f 	bl	8002548 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2106      	movs	r1, #6
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 fb95 	bl	80025e0 <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	2111      	movs	r1, #17
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fd19 	bl	80028f4 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	21a8      	movs	r1, #168	; 0xa8
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fd4a 	bl	8002962 <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	461c      	mov	r4, r3
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd90      	pop	{r4, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	0800211d 	.word	0x0800211d
 8001eec:	08002157 	.word	0x08002157
 8001ef0:	20000668 	.word	0x20000668
 8001ef4:	2000022e 	.word	0x2000022e
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	2000022f 	.word	0x2000022f

08001f00 <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	1d3c      	adds	r4, r7, #4
 8001f08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f0c:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001f0e:	f107 0217 	add.w	r2, r7, #23
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fbd4 	bl	80026c4 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d02d      	beq.n	8001f7e <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001f22:	2206      	movs	r2, #6
 8001f24:	2100      	movs	r1, #0
 8001f26:	4818      	ldr	r0, [pc, #96]	; (8001f88 <get_acceleration+0x88>)
 8001f28:	f00c f9aa 	bl	800e280 <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4916      	ldr	r1, [pc, #88]	; (8001f88 <get_acceleration+0x88>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fc44 	bl	80027be <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <get_acceleration+0x88>)
 8001f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fad3 	bl	80024e8 <lsm6dsl_from_fs8g_to_mg>
 8001f42:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <get_acceleration+0x88>)
 8001f4e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001f56:	4610      	mov	r0, r2
 8001f58:	f000 fac6 	bl	80024e8 <lsm6dsl_from_fs8g_to_mg>
 8001f5c:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 8001f60:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <get_acceleration+0x88>)
 8001f66:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001f70:	4610      	mov	r0, r2
 8001f72:	f000 fab9 	bl	80024e8 <lsm6dsl_from_fs8g_to_mg>
 8001f76:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 8001f7a:	edc4 7a00 	vstr	s15, [r4]
	}

}
 8001f7e:	bf00      	nop
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000220 	.word	0x20000220

08001f8c <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	1d3c      	adds	r4, r7, #4
 8001f94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f98:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001f9a:	f107 0217 	add.w	r2, r7, #23
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fba7 	bl	80026f6 <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d02d      	beq.n	800200a <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001fae:	2206      	movs	r2, #6
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4818      	ldr	r0, [pc, #96]	; (8002014 <get_angvelocity+0x88>)
 8001fb4:	f00c f964 	bl	800e280 <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	4916      	ldr	r1, [pc, #88]	; (8002014 <get_angvelocity+0x88>)
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fbb3 	bl	8002728 <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <get_angvelocity+0x88>)
 8001fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 faa5 	bl	8002518 <lsm6dsl_from_fs2000dps_to_mdps>
 8001fce:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <get_angvelocity+0x88>)
 8001fda:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	f000 fa98 	bl	8002518 <lsm6dsl_from_fs2000dps_to_mdps>
 8001fe8:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 8001fec:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <get_angvelocity+0x88>)
 8001ff2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f000 fa8b 	bl	8002518 <lsm6dsl_from_fs2000dps_to_mdps>
 8002002:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 8002006:	edc4 7a00 	vstr	s15, [r4]
	}
}
 800200a:	bf00      	nop
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	bd90      	pop	{r4, r7, pc}
 8002012:	bf00      	nop
 8002014:	20000228 	.word	0x20000228

08002018 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <lps22hh_init+0x94>)
 8002022:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 8002024:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <lps22hh_init+0x98>)
 8002026:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 8002028:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <lps22hh_init+0x9c>)
 800202a:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 800202c:	200a      	movs	r0, #10
 800202e:	f000 f8e9 	bl	8002204 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <lps22hh_init+0xa0>)
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	491e      	ldr	r1, [pc, #120]	; (80020b8 <lps22hh_init+0xa0>)
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f9d1 	bl	80023e6 <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 8002044:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <lps22hh_init+0xa0>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2bb3      	cmp	r3, #179	; 0xb3
 800204a:	d007      	beq.n	800205c <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	2104      	movs	r1, #4
 8002050:	481a      	ldr	r0, [pc, #104]	; (80020bc <lps22hh_init+0xa4>)
 8002052:	f003 ffe9 	bl	8006028 <HAL_GPIO_WritePin>
		__BKPT();
 8002056:	be00      	bkpt	0x0000
		Error_Handler();
 8002058:	f001 fb40 	bl	80036dc <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	2101      	movs	r1, #1
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f9d0 	bl	8002408 <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	4914      	ldr	r1, [pc, #80]	; (80020c0 <lps22hh_init+0xa8>)
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f9f0 	bl	8002454 <lps22hh_reset_get>
	} while (rst_lps22hh);
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <lps22hh_init+0xa8>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f5      	bne.n	8002068 <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2101      	movs	r1, #1
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f912 	bl	80022ac <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_200_Hz);
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	2107      	movs	r1, #7
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f932 	bl	80022f8 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	461c      	mov	r4, r3
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	08002191 	.word	0x08002191
 80020b0:	080021cb 	.word	0x080021cb
 80020b4:	20000668 	.word	0x20000668
 80020b8:	20000234 	.word	0x20000234
 80020bc:	40020800 	.word	0x40020800
 80020c0:	20000235 	.word	0x20000235

080020c4 <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	1d3c      	adds	r4, r7, #4
 80020cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020d0:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80020d2:	f107 0214 	add.w	r2, r7, #20
 80020d6:	1d38      	adds	r0, r7, #4
 80020d8:	2301      	movs	r3, #1
 80020da:	2127      	movs	r1, #39	; 0x27
 80020dc:	f000 f89d 	bl	800221a <lps22hh_read_reg>

	if (reg.status.p_da) {
 80020e0:	7d3b      	ldrb	r3, [r7, #20]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d011      	beq.n	8002110 <get_pressure+0x4c>
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <get_pressure+0x54>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	4908      	ldr	r1, [pc, #32]	; (8002118 <get_pressure+0x54>)
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 f94c 	bl	8002394 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <get_pressure+0x54>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f8bb 	bl	800227c <lps22hh_from_lsb_to_hpa>
 8002106:	eef0 7a40 	vmov.f32	s15, s0
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002110:	bf00      	nop
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	bd90      	pop	{r4, r7, pc}
 8002118:	20000230 	.word	0x20000230

0800211c <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af04      	add	r7, sp, #16
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	461a      	mov	r2, r3
 8002128:	460b      	mov	r3, r1
 800212a:	72fb      	strb	r3, [r7, #11]
 800212c:	4613      	mov	r3, r2
 800212e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	b29a      	uxth	r2, r3
 8002134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002138:	9302      	str	r3, [sp, #8]
 800213a:	893b      	ldrh	r3, [r7, #8]
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2301      	movs	r3, #1
 8002144:	21d5      	movs	r1, #213	; 0xd5
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f004 f8fe 	bl	8006348 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b088      	sub	sp, #32
 800215a:	af04      	add	r7, sp, #16
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	461a      	mov	r2, r3
 8002162:	460b      	mov	r3, r1
 8002164:	72fb      	strb	r3, [r7, #11]
 8002166:	4613      	mov	r3, r2
 8002168:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 800216a:	7afb      	ldrb	r3, [r7, #11]
 800216c:	b29a      	uxth	r2, r3
 800216e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002172:	9302      	str	r3, [sp, #8]
 8002174:	893b      	ldrh	r3, [r7, #8]
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2301      	movs	r3, #1
 800217e:	21d5      	movs	r1, #213	; 0xd5
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f004 f9db 	bl	800653c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af04      	add	r7, sp, #16
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	461a      	mov	r2, r3
 800219c:	460b      	mov	r3, r1
 800219e:	72fb      	strb	r3, [r7, #11]
 80021a0:	4613      	mov	r3, r2
 80021a2:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 80021a4:	7afb      	ldrb	r3, [r7, #11]
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ac:	9302      	str	r3, [sp, #8]
 80021ae:	893b      	ldrh	r3, [r7, #8]
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2301      	movs	r3, #1
 80021b8:	21b9      	movs	r1, #185	; 0xb9
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f004 f8c4 	bl	8006348 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b088      	sub	sp, #32
 80021ce:	af04      	add	r7, sp, #16
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	461a      	mov	r2, r3
 80021d6:	460b      	mov	r3, r1
 80021d8:	72fb      	strb	r3, [r7, #11]
 80021da:	4613      	mov	r3, r2
 80021dc:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 80021de:	7afb      	ldrb	r3, [r7, #11]
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e6:	9302      	str	r3, [sp, #8]
 80021e8:	893b      	ldrh	r3, [r7, #8]
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2301      	movs	r3, #1
 80021f2:	21b9      	movs	r1, #185	; 0xb9
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f004 f9a1 	bl	800653c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f002 fe0d 	bl	8004e2c <HAL_Delay>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800221a:	b590      	push	{r4, r7, lr}
 800221c:	b087      	sub	sp, #28
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	461a      	mov	r2, r3
 8002226:	460b      	mov	r3, r1
 8002228:	72fb      	strb	r3, [r7, #11]
 800222a:	4613      	mov	r3, r2
 800222c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	685c      	ldr	r4, [r3, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6898      	ldr	r0, [r3, #8]
 8002236:	893b      	ldrh	r3, [r7, #8]
 8002238:	7af9      	ldrb	r1, [r7, #11]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	47a0      	blx	r4
 800223e:	6178      	str	r0, [r7, #20]

  return ret;
 8002240:	697b      	ldr	r3, [r7, #20]
}
 8002242:	4618      	mov	r0, r3
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd90      	pop	{r4, r7, pc}

0800224a <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800224a:	b590      	push	{r4, r7, lr}
 800224c:	b087      	sub	sp, #28
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	461a      	mov	r2, r3
 8002256:	460b      	mov	r3, r1
 8002258:	72fb      	strb	r3, [r7, #11]
 800225a:	4613      	mov	r3, r2
 800225c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681c      	ldr	r4, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6898      	ldr	r0, [r3, #8]
 8002266:	893b      	ldrh	r3, [r7, #8]
 8002268:	7af9      	ldrb	r1, [r7, #11]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	47a0      	blx	r4
 800226e:	6178      	str	r0, [r7, #20]

  return ret;
 8002270:	697b      	ldr	r3, [r7, #20]
}
 8002272:	4618      	mov	r0, r3
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	bd90      	pop	{r4, r7, pc}
	...

0800227c <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	ee07 3a90 	vmov	s15, r3
 800228a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800228e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80022a8 <lps22hh_from_lsb_to_hpa+0x2c>
 8002292:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002296:	eef0 7a66 	vmov.f32	s15, s13
}
 800229a:	eeb0 0a67 	vmov.f32	s0, s15
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	49800000 	.word	0x49800000

080022ac <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80022b8:	f107 0208 	add.w	r2, r7, #8
 80022bc:	2301      	movs	r3, #1
 80022be:	2110      	movs	r1, #16
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffaa 	bl	800221a <lps22hh_read_reg>
 80022c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10f      	bne.n	80022ee <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	7a3b      	ldrb	r3, [r7, #8]
 80022d8:	f362 0341 	bfi	r3, r2, #1, #1
 80022dc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80022de:	f107 0208 	add.w	r2, r7, #8
 80022e2:	2301      	movs	r3, #1
 80022e4:	2110      	movs	r1, #16
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffaf 	bl	800224a <lps22hh_write_reg>
 80022ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022ee:	68fb      	ldr	r3, [r7, #12]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002304:	f107 0210 	add.w	r2, r7, #16
 8002308:	2301      	movs	r3, #1
 800230a:	2110      	movs	r1, #16
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff84 	bl	800221a <lps22hh_read_reg>
 8002312:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800231a:	f107 020c 	add.w	r2, r7, #12
 800231e:	2301      	movs	r3, #1
 8002320:	2111      	movs	r1, #17
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ff79 	bl	800221a <lps22hh_read_reg>
 8002328:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10f      	bne.n	8002350 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	b2da      	uxtb	r2, r3
 8002338:	7c3b      	ldrb	r3, [r7, #16]
 800233a:	f362 1306 	bfi	r3, r2, #4, #3
 800233e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002340:	f107 0210 	add.w	r2, r7, #16
 8002344:	2301      	movs	r3, #1
 8002346:	2110      	movs	r1, #16
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff7e 	bl	800224a <lps22hh_write_reg>
 800234e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d119      	bne.n	800238a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	b2da      	uxtb	r2, r3
 8002360:	7b3b      	ldrb	r3, [r7, #12]
 8002362:	f362 0341 	bfi	r3, r2, #1, #1
 8002366:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	08db      	lsrs	r3, r3, #3
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	b2da      	uxtb	r2, r3
 8002372:	7b3b      	ldrb	r3, [r7, #12]
 8002374:	f362 0300 	bfi	r3, r2, #0, #1
 8002378:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800237a:	f107 020c 	add.w	r2, r7, #12
 800237e:	2301      	movs	r3, #1
 8002380:	2111      	movs	r1, #17
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ff61 	bl	800224a <lps22hh_write_reg>
 8002388:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800238a:	697b      	ldr	r3, [r7, #20]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800239e:	f107 0208 	add.w	r2, r7, #8
 80023a2:	2303      	movs	r3, #3
 80023a4:	2128      	movs	r1, #40	; 0x28
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff37 	bl	800221a <lps22hh_read_reg>
 80023ac:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80023ae:	7abb      	ldrb	r3, [r7, #10]
 80023b0:	461a      	mov	r2, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	7a7a      	ldrb	r2, [r7, #9]
 80023be:	441a      	add	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	7a3a      	ldrb	r2, [r7, #8]
 80023cc:	441a      	add	r2, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	021a      	lsls	r2, r3, #8
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	601a      	str	r2, [r3, #0]

  return ret;
 80023dc:	68fb      	ldr	r3, [r7, #12]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80023f0:	2301      	movs	r3, #1
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	210f      	movs	r1, #15
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ff0f 	bl	800221a <lps22hh_read_reg>
 80023fc:	60f8      	str	r0, [r7, #12]

  return ret;
 80023fe:	68fb      	ldr	r3, [r7, #12]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8002414:	f107 0208 	add.w	r2, r7, #8
 8002418:	2301      	movs	r3, #1
 800241a:	2111      	movs	r1, #17
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fefc 	bl	800221a <lps22hh_read_reg>
 8002422:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	b2da      	uxtb	r2, r3
 8002432:	7a3b      	ldrb	r3, [r7, #8]
 8002434:	f362 0382 	bfi	r3, r2, #2, #1
 8002438:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800243a:	f107 0208 	add.w	r2, r7, #8
 800243e:	2301      	movs	r3, #1
 8002440:	2111      	movs	r1, #17
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ff01 	bl	800224a <lps22hh_write_reg>
 8002448:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800244a:	68fb      	ldr	r3, [r7, #12]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800245e:	f107 0208 	add.w	r2, r7, #8
 8002462:	2301      	movs	r3, #1
 8002464:	2111      	movs	r1, #17
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fed7 	bl	800221a <lps22hh_read_reg>
 800246c:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 800246e:	7a3b      	ldrb	r3, [r7, #8]
 8002470:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	701a      	strb	r2, [r3, #0]

  return ret;
 800247c:	68fb      	ldr	r3, [r7, #12]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002486:	b590      	push	{r4, r7, lr}
 8002488:	b087      	sub	sp, #28
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	461a      	mov	r2, r3
 8002492:	460b      	mov	r3, r1
 8002494:	72fb      	strb	r3, [r7, #11]
 8002496:	4613      	mov	r3, r2
 8002498:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	685c      	ldr	r4, [r3, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6898      	ldr	r0, [r3, #8]
 80024a2:	893b      	ldrh	r3, [r7, #8]
 80024a4:	7af9      	ldrb	r1, [r7, #11]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	47a0      	blx	r4
 80024aa:	6178      	str	r0, [r7, #20]

  return ret;
 80024ac:	697b      	ldr	r3, [r7, #20]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd90      	pop	{r4, r7, pc}

080024b6 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80024b6:	b590      	push	{r4, r7, lr}
 80024b8:	b087      	sub	sp, #28
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	461a      	mov	r2, r3
 80024c2:	460b      	mov	r3, r1
 80024c4:	72fb      	strb	r3, [r7, #11]
 80024c6:	4613      	mov	r3, r2
 80024c8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681c      	ldr	r4, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6898      	ldr	r0, [r3, #8]
 80024d2:	893b      	ldrh	r3, [r7, #8]
 80024d4:	7af9      	ldrb	r1, [r7, #11]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	47a0      	blx	r4
 80024da:	6178      	str	r0, [r7, #20]

  return ret;
 80024dc:	697b      	ldr	r3, [r7, #20]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd90      	pop	{r4, r7, pc}
	...

080024e8 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 80024f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024fe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002514 <lsm6dsl_from_fs8g_to_mg+0x2c>
 8002502:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002506:	eeb0 0a67 	vmov.f32	s0, s15
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	3e79db23 	.word	0x3e79db23

08002518 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8002522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002544 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 8002532:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002536:	eeb0 0a67 	vmov.f32	s0, s15
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	428c0000 	.word	0x428c0000

08002548 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002554:	f107 0208 	add.w	r2, r7, #8
 8002558:	2301      	movs	r3, #1
 800255a:	2110      	movs	r1, #16
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff92 	bl	8002486 <lsm6dsl_read_reg>
 8002562:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10f      	bne.n	800258a <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	b2da      	uxtb	r2, r3
 8002572:	7a3b      	ldrb	r3, [r7, #8]
 8002574:	f362 0383 	bfi	r3, r2, #2, #2
 8002578:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800257a:	f107 0208 	add.w	r2, r7, #8
 800257e:	2301      	movs	r3, #1
 8002580:	2110      	movs	r1, #16
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff97 	bl	80024b6 <lsm6dsl_write_reg>
 8002588:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800258a:	68fb      	ldr	r3, [r7, #12]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80025a0:	f107 0208 	add.w	r2, r7, #8
 80025a4:	2301      	movs	r3, #1
 80025a6:	2110      	movs	r1, #16
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff6c 	bl	8002486 <lsm6dsl_read_reg>
 80025ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	7a3b      	ldrb	r3, [r7, #8]
 80025c0:	f362 1307 	bfi	r3, r2, #4, #4
 80025c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80025c6:	f107 0208 	add.w	r2, r7, #8
 80025ca:	2301      	movs	r3, #1
 80025cc:	2110      	movs	r1, #16
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff71 	bl	80024b6 <lsm6dsl_write_reg>
 80025d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80025ec:	f107 0208 	add.w	r2, r7, #8
 80025f0:	2301      	movs	r3, #1
 80025f2:	2111      	movs	r1, #17
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff46 	bl	8002486 <lsm6dsl_read_reg>
 80025fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	b2da      	uxtb	r2, r3
 800260a:	7a3b      	ldrb	r3, [r7, #8]
 800260c:	f362 0343 	bfi	r3, r2, #1, #3
 8002610:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002612:	f107 0208 	add.w	r2, r7, #8
 8002616:	2301      	movs	r3, #1
 8002618:	2111      	movs	r1, #17
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ff4b 	bl	80024b6 <lsm6dsl_write_reg>
 8002620:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002638:	f107 0208 	add.w	r2, r7, #8
 800263c:	2301      	movs	r3, #1
 800263e:	2111      	movs	r1, #17
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff20 	bl	8002486 <lsm6dsl_read_reg>
 8002646:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	b2da      	uxtb	r2, r3
 8002656:	7a3b      	ldrb	r3, [r7, #8]
 8002658:	f362 1307 	bfi	r3, r2, #4, #4
 800265c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800265e:	f107 0208 	add.w	r2, r7, #8
 8002662:	2301      	movs	r3, #1
 8002664:	2111      	movs	r1, #17
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ff25 	bl	80024b6 <lsm6dsl_write_reg>
 800266c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800266e:	68fb      	ldr	r3, [r7, #12]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002684:	f107 0208 	add.w	r2, r7, #8
 8002688:	2301      	movs	r3, #1
 800268a:	2112      	movs	r1, #18
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff fefa 	bl	8002486 <lsm6dsl_read_reg>
 8002692:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	7a3b      	ldrb	r3, [r7, #8]
 80026a4:	f362 1386 	bfi	r3, r2, #6, #1
 80026a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80026aa:	f107 0208 	add.w	r2, r7, #8
 80026ae:	2301      	movs	r3, #1
 80026b0:	2112      	movs	r1, #18
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff feff 	bl	80024b6 <lsm6dsl_write_reg>
 80026b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 80026ce:	f107 0208 	add.w	r2, r7, #8
 80026d2:	2301      	movs	r3, #1
 80026d4:	211e      	movs	r1, #30
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fed5 	bl	8002486 <lsm6dsl_read_reg>
 80026dc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80026de:	7a3b      	ldrb	r3, [r7, #8]
 80026e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	701a      	strb	r2, [r3, #0]

  return ret;
 80026ec:	68fb      	ldr	r3, [r7, #12]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8002700:	f107 0208 	add.w	r2, r7, #8
 8002704:	2301      	movs	r3, #1
 8002706:	211e      	movs	r1, #30
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff febc 	bl	8002486 <lsm6dsl_read_reg>
 800270e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8002710:	7a3b      	ldrb	r3, [r7, #8]
 8002712:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	701a      	strb	r2, [r3, #0]

  return ret;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8002732:	f107 020c 	add.w	r2, r7, #12
 8002736:	2306      	movs	r3, #6
 8002738:	2122      	movs	r1, #34	; 0x22
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fea3 	bl	8002486 <lsm6dsl_read_reg>
 8002740:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002742:	7b7b      	ldrb	r3, [r7, #13]
 8002744:	b21a      	sxth	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002750:	b29b      	uxth	r3, r3
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	b29a      	uxth	r2, r3
 8002756:	7b3b      	ldrb	r3, [r7, #12]
 8002758:	b29b      	uxth	r3, r3
 800275a:	4413      	add	r3, r2
 800275c:	b29b      	uxth	r3, r3
 800275e:	b21a      	sxth	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	3302      	adds	r3, #2
 800276a:	b212      	sxth	r2, r2
 800276c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	3302      	adds	r3, #2
 8002772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002776:	b29b      	uxth	r3, r3
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	b29a      	uxth	r2, r3
 800277c:	7bbb      	ldrb	r3, [r7, #14]
 800277e:	b29b      	uxth	r3, r3
 8002780:	4413      	add	r3, r2
 8002782:	b29a      	uxth	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	3302      	adds	r3, #2
 8002788:	b212      	sxth	r2, r2
 800278a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800278c:	7c7a      	ldrb	r2, [r7, #17]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	3304      	adds	r3, #4
 8002792:	b212      	sxth	r2, r2
 8002794:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	3304      	adds	r3, #4
 800279a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	7c3b      	ldrb	r3, [r7, #16]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	3304      	adds	r3, #4
 80027b0:	b212      	sxth	r2, r2
 80027b2:	801a      	strh	r2, [r3, #0]

  return ret;
 80027b4:	697b      	ldr	r3, [r7, #20]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80027c8:	f107 020c 	add.w	r2, r7, #12
 80027cc:	2306      	movs	r3, #6
 80027ce:	2128      	movs	r1, #40	; 0x28
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fe58 	bl	8002486 <lsm6dsl_read_reg>
 80027d6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80027d8:	7b7b      	ldrb	r3, [r7, #13]
 80027da:	b21a      	sxth	r2, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	7b3b      	ldrb	r3, [r7, #12]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	3302      	adds	r3, #2
 8002800:	b212      	sxth	r2, r2
 8002802:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	3302      	adds	r3, #2
 8002808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800280c:	b29b      	uxth	r3, r3
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	b29a      	uxth	r2, r3
 8002812:	7bbb      	ldrb	r3, [r7, #14]
 8002814:	b29b      	uxth	r3, r3
 8002816:	4413      	add	r3, r2
 8002818:	b29a      	uxth	r2, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	3302      	adds	r3, #2
 800281e:	b212      	sxth	r2, r2
 8002820:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002822:	7c7a      	ldrb	r2, [r7, #17]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	3304      	adds	r3, #4
 8002828:	b212      	sxth	r2, r2
 800282a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	3304      	adds	r3, #4
 8002830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002834:	b29b      	uxth	r3, r3
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b29a      	uxth	r2, r3
 800283a:	7c3b      	ldrb	r3, [r7, #16]
 800283c:	b29b      	uxth	r3, r3
 800283e:	4413      	add	r3, r2
 8002840:	b29a      	uxth	r2, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	3304      	adds	r3, #4
 8002846:	b212      	sxth	r2, r2
 8002848:	801a      	strh	r2, [r3, #0]

  return ret;
 800284a:	697b      	ldr	r3, [r7, #20]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800285e:	2301      	movs	r3, #1
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	210f      	movs	r1, #15
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff fe0e 	bl	8002486 <lsm6dsl_read_reg>
 800286a:	60f8      	str	r0, [r7, #12]

  return ret;
 800286c:	68fb      	ldr	r3, [r7, #12]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002882:	f107 0208 	add.w	r2, r7, #8
 8002886:	2301      	movs	r3, #1
 8002888:	2112      	movs	r1, #18
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff fdfb 	bl	8002486 <lsm6dsl_read_reg>
 8002890:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10f      	bne.n	80028b8 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	7a3b      	ldrb	r3, [r7, #8]
 80028a2:	f362 0300 	bfi	r3, r2, #0, #1
 80028a6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80028a8:	f107 0208 	add.w	r2, r7, #8
 80028ac:	2301      	movs	r3, #1
 80028ae:	2112      	movs	r1, #18
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff fe00 	bl	80024b6 <lsm6dsl_write_reg>
 80028b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028b8:	68fb      	ldr	r3, [r7, #12]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80028cc:	f107 0208 	add.w	r2, r7, #8
 80028d0:	2301      	movs	r3, #1
 80028d2:	2112      	movs	r1, #18
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff fdd6 	bl	8002486 <lsm6dsl_read_reg>
 80028da:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80028dc:	7a3b      	ldrb	r3, [r7, #8]
 80028de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	701a      	strb	r2, [r3, #0]

  return ret;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8002900:	f107 0208 	add.w	r2, r7, #8
 8002904:	2301      	movs	r3, #1
 8002906:	2117      	movs	r1, #23
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fdbc 	bl	8002486 <lsm6dsl_read_reg>
 800290e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d120      	bne.n	8002958 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	b2da      	uxtb	r2, r3
 8002920:	7a3b      	ldrb	r3, [r7, #8]
 8002922:	f362 03c3 	bfi	r3, r2, #3, #1
 8002926:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	b2da      	uxtb	r2, r3
 8002930:	7a3b      	ldrb	r3, [r7, #8]
 8002932:	f362 1346 	bfi	r3, r2, #5, #2
 8002936:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8002938:	7a3b      	ldrb	r3, [r7, #8]
 800293a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293e:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8002940:	7a3b      	ldrb	r3, [r7, #8]
 8002942:	f36f 0382 	bfc	r3, #2, #1
 8002946:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8002948:	f107 0208 	add.w	r2, r7, #8
 800294c:	2301      	movs	r3, #1
 800294e:	2117      	movs	r1, #23
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff fdb0 	bl	80024b6 <lsm6dsl_write_reg>
 8002956:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002958:	68fb      	ldr	r3, [r7, #12]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800296e:	f107 0208 	add.w	r2, r7, #8
 8002972:	2301      	movs	r3, #1
 8002974:	2116      	movs	r1, #22
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff fd85 	bl	8002486 <lsm6dsl_read_reg>
 800297c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d157      	bne.n	8002a34 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	b2da      	uxtb	r2, r3
 800298e:	7a3b      	ldrb	r3, [r7, #8]
 8002990:	f362 1305 	bfi	r3, r2, #4, #2
 8002994:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	09db      	lsrs	r3, r3, #7
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	7a3b      	ldrb	r3, [r7, #8]
 80029a4:	f362 1386 	bfi	r3, r2, #6, #1
 80029a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80029aa:	f107 0208 	add.w	r2, r7, #8
 80029ae:	2301      	movs	r3, #1
 80029b0:	2116      	movs	r1, #22
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fd7f 	bl	80024b6 <lsm6dsl_write_reg>
 80029b8:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d139      	bne.n	8002a34 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80029c0:	f107 020c 	add.w	r2, r7, #12
 80029c4:	2301      	movs	r3, #1
 80029c6:	2115      	movs	r1, #21
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff fd5c 	bl	8002486 <lsm6dsl_read_reg>
 80029ce:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d12e      	bne.n	8002a34 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	7b3b      	ldrb	r3, [r7, #12]
 80029e0:	f362 0301 	bfi	r3, r2, #0, #2
 80029e4:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80029e6:	f107 020c 	add.w	r2, r7, #12
 80029ea:	2301      	movs	r3, #1
 80029ec:	2115      	movs	r1, #21
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff fd61 	bl	80024b6 <lsm6dsl_write_reg>
 80029f4:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d11b      	bne.n	8002a34 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 80029fc:	f107 0210 	add.w	r2, r7, #16
 8002a00:	2301      	movs	r3, #1
 8002a02:	2113      	movs	r1, #19
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff fd3e 	bl	8002486 <lsm6dsl_read_reg>
 8002a0a:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d110      	bne.n	8002a34 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	08db      	lsrs	r3, r3, #3
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	7c3b      	ldrb	r3, [r7, #16]
 8002a1e:	f362 0341 	bfi	r3, r2, #1, #1
 8002a22:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8002a24:	f107 0210 	add.w	r2, r7, #16
 8002a28:	2301      	movs	r3, #1
 8002a2a:	2113      	movs	r1, #19
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff fd42 	bl	80024b6 <lsm6dsl_write_reg>
 8002a32:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002a34:	697b      	ldr	r3, [r7, #20]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <radio_tx>:
/* USER CODE BEGIN 0 */

// radio transmission wrapper
#ifdef USING_XTEND
// reception using UART DMA
void radio_tx(uint8_t *msg_buffer, uint16_t size) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
//	HAL_UART_Transmit(&huart3, msg_buffer, size, HAL_MAX_DELAY);
	HAL_UART_Transmit_DMA(&huart3, msg_buffer, size);
 8002a4c:	887b      	ldrh	r3, [r7, #2]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4803      	ldr	r0, [pc, #12]	; (8002a60 <radio_tx+0x20>)
 8002a54:	f007 f942 	bl	8009cdc <HAL_UART_Transmit_DMA>

	#ifdef DEBUG_DMA
	debug_tx_uart(msg_buffer);
	#endif
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200014f0 	.word	0x200014f0

08002a64 <tone>:
	#endif
}
#endif

// helper functions for buzzing
void tone(uint32_t duration, uint32_t repeats) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < repeats; i++) {
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	e013      	b.n	8002a9c <tone+0x38>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002a74:	2108      	movs	r1, #8
 8002a76:	480e      	ldr	r0, [pc, #56]	; (8002ab0 <tone+0x4c>)
 8002a78:	f006 f95a 	bl	8008d30 <HAL_TIM_PWM_Start>
		HAL_Delay(duration);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f002 f9d5 	bl	8004e2c <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002a82:	2108      	movs	r1, #8
 8002a84:	480a      	ldr	r0, [pc, #40]	; (8002ab0 <tone+0x4c>)
 8002a86:	f006 f991 	bl	8008dac <HAL_TIM_PWM_Stop>
		if (repeats > 1)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d902      	bls.n	8002a96 <tone+0x32>
			HAL_Delay(duration);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f002 f9cb 	bl	8004e2c <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d3e7      	bcc.n	8002a74 <tone+0x10>
	}
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200013f0 	.word	0x200013f0

08002ab4 <buzz_failure>:
void buzz_success() { tone(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS); };
void buzz_failure() { tone(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS); };
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	2101      	movs	r1, #1
 8002aba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002abe:	f7ff ffd1 	bl	8002a64 <tone>
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002acc:	b0a9      	sub	sp, #164	; 0xa4
 8002ace:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ad0:	f002 f93a 	bl	8004d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ad4:	f000 fb4e 	bl	8003174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ad8:	f7fe fc22 	bl	8001320 <MX_GPIO_Init>
  MX_DMA_Init();
 8002adc:	f7fe fbda 	bl	8001294 <MX_DMA_Init>
  MX_ADC1_Init();
 8002ae0:	f7fe fb10 	bl	8001104 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002ae4:	f7ff f87a 	bl	8001bdc <MX_I2C2_Init>
  MX_I2C3_Init();
 8002ae8:	f7ff f8b8 	bl	8001c5c <MX_I2C3_Init>
  MX_SPI2_Init();
 8002aec:	f001 f9dc 	bl	8003ea8 <MX_SPI2_Init>
  MX_SPI4_Init();
 8002af0:	f001 fa10 	bl	8003f14 <MX_SPI4_Init>
  MX_SPI5_Init();
 8002af4:	f001 fa44 	bl	8003f80 <MX_SPI5_Init>
  MX_TIM2_Init();
 8002af8:	f001 fcbe 	bl	8004478 <MX_TIM2_Init>
  MX_UART8_Init();
 8002afc:	f001 fec8 	bl	8004890 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8002b00:	f001 fef0 	bl	80048e4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002b04:	f001 ff18 	bl	8004938 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8002b08:	f008 f8d2 	bl	800acb0 <MX_FATFS_Init>
  MX_RTC_Init();
 8002b0c:	f000 ff1e 	bl	800394c <MX_RTC_Init>
  MX_TIM4_Init();
 8002b10:	f001 fd76 	bl	8004600 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002b14:	f001 fd26 	bl	8004564 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002b18:	f001 fdc0 	bl	800469c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // *** IMPORTANT: DMA Init function must be called before peripheral init! *** //

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, SET);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	2140      	movs	r1, #64	; 0x40
 8002b20:	4850      	ldr	r0, [pc, #320]	; (8002c64 <main+0x19c>)
 8002b22:	f003 fa81 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, SET);
 8002b26:	2201      	movs	r2, #1
 8002b28:	2120      	movs	r1, #32
 8002b2a:	484e      	ldr	r0, [pc, #312]	; (8002c64 <main+0x19c>)
 8002b2c:	f003 fa7c 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_IO3_GPIO_Port, FLASH_IO3_Pin, SET);
 8002b30:	2201      	movs	r2, #1
 8002b32:	2110      	movs	r1, #16
 8002b34:	484b      	ldr	r0, [pc, #300]	; (8002c64 <main+0x19c>)
 8002b36:	f003 fa77 	bl	8006028 <HAL_GPIO_WritePin>

  // set other SPI CS pins high
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, SET);
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b40:	4849      	ldr	r0, [pc, #292]	; (8002c68 <main+0x1a0>)
 8002b42:	f003 fa71 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TH_CS_GPIO_Port, TH_CS_Pin, SET);
 8002b46:	2201      	movs	r2, #1
 8002b48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b4c:	4847      	ldr	r0, [pc, #284]	; (8002c6c <main+0x1a4>)
 8002b4e:	f003 fa6b 	bl	8006028 <HAL_GPIO_WritePin>

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2102      	movs	r1, #2
 8002b56:	4846      	ldr	r0, [pc, #280]	; (8002c70 <main+0x1a8>)
 8002b58:	f003 fa66 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2104      	movs	r1, #4
 8002b60:	4843      	ldr	r0, [pc, #268]	; (8002c70 <main+0x1a8>)
 8002b62:	f003 fa61 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2108      	movs	r1, #8
 8002b6a:	4841      	ldr	r0, [pc, #260]	; (8002c70 <main+0x1a8>)
 8002b6c:	f003 fa5c 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, RESET);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2108      	movs	r1, #8
 8002b74:	483f      	ldr	r0, [pc, #252]	; (8002c74 <main+0x1ac>)
 8002b76:	f003 fa57 	bl	8006028 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b80:	483d      	ldr	r0, [pc, #244]	; (8002c78 <main+0x1b0>)
 8002b82:	f003 fa51 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8002b86:	2200      	movs	r2, #0
 8002b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b8c:	483a      	ldr	r0, [pc, #232]	; (8002c78 <main+0x1b0>)
 8002b8e:	f003 fa4b 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8002b92:	2200      	movs	r2, #0
 8002b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b98:	4837      	ldr	r0, [pc, #220]	; (8002c78 <main+0x1b0>)
 8002b9a:	f003 fa45 	bl	8006028 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	4835      	ldr	r0, [pc, #212]	; (8002c78 <main+0x1b0>)
 8002ba4:	f003 fa40 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bae:	482e      	ldr	r0, [pc, #184]	; (8002c68 <main+0x1a0>)
 8002bb0:	f003 fa3a 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bba:	482b      	ldr	r0, [pc, #172]	; (8002c68 <main+0x1a0>)
 8002bbc:	f003 fa34 	bl	8006028 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2104      	movs	r1, #4
 8002bc4:	4829      	ldr	r0, [pc, #164]	; (8002c6c <main+0x1a4>)
 8002bc6:	f003 fa2f 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	4827      	ldr	r0, [pc, #156]	; (8002c6c <main+0x1a4>)
 8002bd0:	f003 fa2a 	bl	8006028 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bda:	4824      	ldr	r0, [pc, #144]	; (8002c6c <main+0x1a4>)
 8002bdc:	f003 fa24 	bl	8006028 <HAL_GPIO_WritePin>

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8002be0:	2200      	movs	r2, #0
 8002be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002be6:	4824      	ldr	r0, [pc, #144]	; (8002c78 <main+0x1b0>)
 8002be8:	f003 fa1e 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8002bec:	2200      	movs	r2, #0
 8002bee:	2180      	movs	r1, #128	; 0x80
 8002bf0:	481c      	ldr	r0, [pc, #112]	; (8002c64 <main+0x19c>)
 8002bf2:	f003 fa19 	bl	8006028 <HAL_GPIO_WritePin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
  Tx_setup();
#endif

  // init i2c sensors and data storage
  dev_ctx_lsm = lsm6dsl_init();
 8002bf6:	4c21      	ldr	r4, [pc, #132]	; (8002c7c <main+0x1b4>)
 8002bf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff f90d 	bl	8001e1c <lsm6dsl_init>
 8002c02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dev_ctx_lps = lps22hh_init();
 8002c0e:	4c1c      	ldr	r4, [pc, #112]	; (8002c80 <main+0x1b8>)
 8002c10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff f9ff 	bl	8002018 <lps22hh_init>
 8002c1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  // init FLASH
//  if (!W25qxx_Init()) Error_Handler();
//  buzz_success();

  // check if SD card is inserted
  if (HAL_GPIO_ReadPin(IN_SD_CARD_DETECT_GPIO_Port, IN_SD_CARD_DETECT_Pin) == GPIO_PIN_RESET) {
 8002c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c2a:	4811      	ldr	r0, [pc, #68]	; (8002c70 <main+0x1a8>)
 8002c2c:	f003 f9e4 	bl	8005ff8 <HAL_GPIO_ReadPin>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10f      	bne.n	8002c56 <main+0x18e>
	  // init sd card with dynamic filename
	  fres = sd_init_dynamic_filename("FC", sd_file_header, filename);
 8002c36:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <main+0x1bc>)
 8002c38:	4913      	ldr	r1, [pc, #76]	; (8002c88 <main+0x1c0>)
 8002c3a:	4814      	ldr	r0, [pc, #80]	; (8002c8c <main+0x1c4>)
 8002c3c:	f000 ff0e 	bl	8003a5c <sd_init_dynamic_filename>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <main+0x1c8>)
 8002c46:	701a      	strb	r2, [r3, #0]
	  if (fres != FR_OK) {
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <main+0x1c8>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d004      	beq.n	8002c5a <main+0x192>
			buzz_failure();
 8002c50:	f7ff ff30 	bl	8002ab4 <buzz_failure>
 8002c54:	e001      	b.n	8002c5a <main+0x192>
	  }
  }
  else {
	  buzz_failure();
 8002c56:	f7ff ff2d 	bl	8002ab4 <buzz_failure>
  // send message with Iridium
//  MRT_Static_Iridium_sendMessage("message");
//  MRT_Static_Iridium_Shutdown();

  // get ground altitude
  for (uint8_t i = 0; i < 100; i++) {
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002c60:	e029      	b.n	8002cb6 <main+0x1ee>
 8002c62:	bf00      	nop
 8002c64:	40020c00 	.word	0x40020c00
 8002c68:	40021400 	.word	0x40021400
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40020800 	.word	0x40020800
 8002c74:	40020000 	.word	0x40020000
 8002c78:	40021800 	.word	0x40021800
 8002c7c:	20000c18 	.word	0x20000c18
 8002c80:	20000c24 	.word	0x20000c24
 8002c84:	20000378 	.word	0x20000378
 8002c88:	08014668 	.word	0x08014668
 8002c8c:	080143f8 	.word	0x080143f8
 8002c90:	20000c30 	.word	0x20000c30
	  alt_ground += getAltitude();
 8002c94:	f000 fb9c 	bl	80033d0 <getAltitude>
 8002c98:	eeb0 7a40 	vmov.f32	s14, s0
 8002c9c:	4b9f      	ldr	r3, [pc, #636]	; (8002f1c <main+0x454>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca6:	4b9d      	ldr	r3, [pc, #628]	; (8002f1c <main+0x454>)
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 100; i++) {
 8002cac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002cb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002cba:	2b63      	cmp	r3, #99	; 0x63
 8002cbc:	d9ea      	bls.n	8002c94 <main+0x1cc>
  }
  alt_ground /= 100.0;
 8002cbe:	4b97      	ldr	r3, [pc, #604]	; (8002f1c <main+0x454>)
 8002cc0:	ed93 7a00 	vldr	s14, [r3]
 8002cc4:	eddf 6a96 	vldr	s13, [pc, #600]	; 8002f20 <main+0x458>
 8002cc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ccc:	4b93      	ldr	r3, [pc, #588]	; (8002f1c <main+0x454>)
 8002cce:	edc3 7a00 	vstr	s15, [r3]
  alt_current = alt_ground;
 8002cd2:	4b92      	ldr	r3, [pc, #584]	; (8002f1c <main+0x454>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a93      	ldr	r2, [pc, #588]	; (8002f24 <main+0x45c>)
 8002cd8:	6013      	str	r3, [r2, #0]

  // initial DMA request for GPS
  HAL_UART_Receive_DMA(&huart6, gps_rx_buf, GPS_RX_DMA_BUF_LEN);
 8002cda:	22af      	movs	r2, #175	; 0xaf
 8002cdc:	4992      	ldr	r1, [pc, #584]	; (8002f28 <main+0x460>)
 8002cde:	4893      	ldr	r0, [pc, #588]	; (8002f2c <main+0x464>)
 8002ce0:	f007 f868 	bl	8009db4 <HAL_UART_Receive_DMA>

  // initial DMA request for XTend
  memset(xtend_rx_buf, 0, 10);
 8002ce4:	220a      	movs	r2, #10
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4891      	ldr	r0, [pc, #580]	; (8002f30 <main+0x468>)
 8002cea:	f00b fac9 	bl	800e280 <memset>
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)xtend_rx_buf, XTEND_RX_DMA_CMD_LEN);
 8002cee:	2204      	movs	r2, #4
 8002cf0:	498f      	ldr	r1, [pc, #572]	; (8002f30 <main+0x468>)
 8002cf2:	4890      	ldr	r0, [pc, #576]	; (8002f34 <main+0x46c>)
 8002cf4:	f007 f85e 	bl	8009db4 <HAL_UART_Receive_DMA>


  // initialize avionics and propulsion xtend buffers with *something* so DMA can happen without zero length error
  sprintf((char*) msg_buffer_av,
    				"S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
    				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002cf8:	4b8f      	ldr	r3, [pc, #572]	; (8002f38 <main+0x470>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
  sprintf((char*) msg_buffer_av,
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fc43 	bl	8000588 <__aeabi_f2d>
 8002d02:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002d06:	4b8c      	ldr	r3, [pc, #560]	; (8002f38 <main+0x470>)
 8002d08:	685b      	ldr	r3, [r3, #4]
  sprintf((char*) msg_buffer_av,
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd fc3c 	bl	8000588 <__aeabi_f2d>
 8002d10:	e9c7 0108 	strd	r0, r1, [r7, #32]
    				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002d14:	4b88      	ldr	r3, [pc, #544]	; (8002f38 <main+0x470>)
 8002d16:	689b      	ldr	r3, [r3, #8]
  sprintf((char*) msg_buffer_av,
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fc35 	bl	8000588 <__aeabi_f2d>
 8002d1e:	e9c7 0106 	strd	r0, r1, [r7, #24]
    				angular_rate_mdps[0], angular_rate_mdps[1],
 8002d22:	4b86      	ldr	r3, [pc, #536]	; (8002f3c <main+0x474>)
 8002d24:	681b      	ldr	r3, [r3, #0]
  sprintf((char*) msg_buffer_av,
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fc2e 	bl	8000588 <__aeabi_f2d>
 8002d2c:	e9c7 0104 	strd	r0, r1, [r7, #16]
    				angular_rate_mdps[0], angular_rate_mdps[1],
 8002d30:	4b82      	ldr	r3, [pc, #520]	; (8002f3c <main+0x474>)
 8002d32:	685b      	ldr	r3, [r3, #4]
  sprintf((char*) msg_buffer_av,
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fc27 	bl	8000588 <__aeabi_f2d>
 8002d3a:	e9c7 0102 	strd	r0, r1, [r7, #8]
    				angular_rate_mdps[2], pressure_hPa, latitude, longitude,
 8002d3e:	4b7f      	ldr	r3, [pc, #508]	; (8002f3c <main+0x474>)
 8002d40:	689b      	ldr	r3, [r3, #8]
  sprintf((char*) msg_buffer_av,
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fc20 	bl	8000588 <__aeabi_f2d>
 8002d48:	4605      	mov	r5, r0
 8002d4a:	460e      	mov	r6, r1
 8002d4c:	4b7c      	ldr	r3, [pc, #496]	; (8002f40 <main+0x478>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fc19 	bl	8000588 <__aeabi_f2d>
 8002d56:	4682      	mov	sl, r0
 8002d58:	468b      	mov	fp, r1
 8002d5a:	4b7a      	ldr	r3, [pc, #488]	; (8002f44 <main+0x47c>)
 8002d5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002d60:	4b79      	ldr	r3, [pc, #484]	; (8002f48 <main+0x480>)
 8002d62:	e9d3 0100 	ldrd	r0, r1, [r3]
    				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8002d66:	4b79      	ldr	r3, [pc, #484]	; (8002f4c <main+0x484>)
 8002d68:	785b      	ldrb	r3, [r3, #1]
  sprintf((char*) msg_buffer_av,
 8002d6a:	607b      	str	r3, [r7, #4]
    				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8002d6c:	4b77      	ldr	r3, [pc, #476]	; (8002f4c <main+0x484>)
 8002d6e:	789b      	ldrb	r3, [r3, #2]
  sprintf((char*) msg_buffer_av,
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	4b76      	ldr	r3, [pc, #472]	; (8002f4c <main+0x484>)
 8002d74:	685c      	ldr	r4, [r3, #4]
 8002d76:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <main+0x488>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b75      	ldr	r3, [pc, #468]	; (8002f54 <main+0x48c>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	9314      	str	r3, [sp, #80]	; 0x50
 8002d86:	9213      	str	r2, [sp, #76]	; 0x4c
 8002d88:	9412      	str	r4, [sp, #72]	; 0x48
 8002d8a:	683c      	ldr	r4, [r7, #0]
 8002d8c:	9411      	str	r4, [sp, #68]	; 0x44
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	9310      	str	r3, [sp, #64]	; 0x40
 8002d92:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002d96:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8002d9a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002d9e:	e9cd 5608 	strd	r5, r6, [sp, #32]
 8002da2:	ed97 7b02 	vldr	d7, [r7, #8]
 8002da6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002daa:	ed97 7b04 	vldr	d7, [r7, #16]
 8002dae:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002db2:	ed97 7b06 	vldr	d7, [r7, #24]
 8002db6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002dba:	ed97 7b08 	vldr	d7, [r7, #32]
 8002dbe:	ed8d 7b00 	vstr	d7, [sp]
 8002dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dc6:	4964      	ldr	r1, [pc, #400]	; (8002f58 <main+0x490>)
 8002dc8:	4864      	ldr	r0, [pc, #400]	; (8002f5c <main+0x494>)
 8002dca:	f00c f99b 	bl	800f104 <siprintf>
    				continuity, state);
  sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002dce:	4b64      	ldr	r3, [pc, #400]	; (8002f60 <main+0x498>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fbd8 	bl	8000588 <__aeabi_f2d>
 8002dd8:	4604      	mov	r4, r0
 8002dda:	460d      	mov	r5, r1
 8002ddc:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <main+0x49c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd fbd1 	bl	8000588 <__aeabi_f2d>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	495f      	ldr	r1, [pc, #380]	; (8002f68 <main+0x4a0>)
 8002dec:	7809      	ldrb	r1, [r1, #0]
 8002dee:	4608      	mov	r0, r1
  					tank_pressure, tank_temperature, valve_state, stimeget.Minutes,
 8002df0:	4956      	ldr	r1, [pc, #344]	; (8002f4c <main+0x484>)
 8002df2:	7849      	ldrb	r1, [r1, #1]
  sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002df4:	460e      	mov	r6, r1
  					stimeget.Seconds, stimeget.SubSeconds);
 8002df6:	4955      	ldr	r1, [pc, #340]	; (8002f4c <main+0x484>)
 8002df8:	7889      	ldrb	r1, [r1, #2]
  sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002dfa:	62b9      	str	r1, [r7, #40]	; 0x28
 8002dfc:	4953      	ldr	r1, [pc, #332]	; (8002f4c <main+0x484>)
 8002dfe:	6849      	ldr	r1, [r1, #4]
 8002e00:	9105      	str	r1, [sp, #20]
 8002e02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e04:	9104      	str	r1, [sp, #16]
 8002e06:	9603      	str	r6, [sp, #12]
 8002e08:	9002      	str	r0, [sp, #8]
 8002e0a:	e9cd 2300 	strd	r2, r3, [sp]
 8002e0e:	4622      	mov	r2, r4
 8002e10:	462b      	mov	r3, r5
 8002e12:	4956      	ldr	r1, [pc, #344]	; (8002f6c <main+0x4a4>)
 8002e14:	4856      	ldr	r0, [pc, #344]	; (8002f70 <main+0x4a8>)
 8002e16:	f00c f975 	bl	800f104 <siprintf>

  // start timer 3 for radio transmissions
  HAL_TIM_Base_Start_IT(&htim3);
 8002e1a:	4856      	ldr	r0, [pc, #344]	; (8002f74 <main+0x4ac>)
 8002e1c:	f005 ff2f 	bl	8008c7e <HAL_TIM_Base_Start_IT>
  for (uint32_t i = 2; i < 2+10; i++)
#endif
  {
//	    buzz_success();
//	    HAL_Delay(10);
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8002e20:	2201      	movs	r2, #1
 8002e22:	2102      	movs	r1, #2
 8002e24:	4854      	ldr	r0, [pc, #336]	; (8002f78 <main+0x4b0>)
 8002e26:	f003 f8ff 	bl	8006028 <HAL_GPIO_WritePin>

		// check for launch command -- do not do this in the callback because...reasons?
		if (xtend_rx_dma_ready) {
 8002e2a:	4b54      	ldr	r3, [pc, #336]	; (8002f7c <main+0x4b4>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d016      	beq.n	8002e62 <main+0x39a>
			// go check what the command is
			radio_command cmd = xtend_parse_dma_command();
 8002e34:	f000 fc60 	bl	80036f8 <xtend_parse_dma_command>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

			// prep for next command to be sent
			memset(xtend_rx_buf, 0, 10);
 8002e3e:	220a      	movs	r2, #10
 8002e40:	2100      	movs	r1, #0
 8002e42:	483b      	ldr	r0, [pc, #236]	; (8002f30 <main+0x468>)
 8002e44:	f00b fa1c 	bl	800e280 <memset>
			HAL_UART_Receive_DMA(&huart3, xtend_rx_buf, XTEND_RX_DMA_CMD_LEN);
 8002e48:	2204      	movs	r2, #4
 8002e4a:	4939      	ldr	r1, [pc, #228]	; (8002f30 <main+0x468>)
 8002e4c:	4839      	ldr	r0, [pc, #228]	; (8002f34 <main+0x46c>)
 8002e4e:	f006 ffb1 	bl	8009db4 <HAL_UART_Receive_DMA>
			xtend_rx_dma_ready = 0;
 8002e52:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <main+0x4b4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]

			execute_parsed_command(cmd);
 8002e58:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fcb5 	bl	80037cc <execute_parsed_command>
		}

		// -----  GATHER AVIONICS TELEMETRY ----- //
		// lsm6dsl data
		get_acceleration(dev_ctx_lsm, acceleration_mg);
 8002e62:	4a47      	ldr	r2, [pc, #284]	; (8002f80 <main+0x4b8>)
 8002e64:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <main+0x470>)
 8002e66:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e68:	f7ff f84a 	bl	8001f00 <get_acceleration>
		get_angvelocity(dev_ctx_lsm, angular_rate_mdps);
 8002e6c:	4a44      	ldr	r2, [pc, #272]	; (8002f80 <main+0x4b8>)
 8002e6e:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <main+0x474>)
 8002e70:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e72:	f7ff f88b 	bl	8001f8c <get_angvelocity>

		// lps22hh data
		alt_current = getAltitude(); // calls get_pressure();
 8002e76:	f000 faab 	bl	80033d0 <getAltitude>
 8002e7a:	eef0 7a40 	vmov.f32	s15, s0
 8002e7e:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <main+0x45c>)
 8002e80:	edc3 7a00 	vstr	s15, [r3]

		// rtc data
		HAL_RTC_GetTime(&hrtc, &stimeget, RTC_FORMAT_BIN);
 8002e84:	2200      	movs	r2, #0
 8002e86:	4931      	ldr	r1, [pc, #196]	; (8002f4c <main+0x484>)
 8002e88:	483e      	ldr	r0, [pc, #248]	; (8002f84 <main+0x4bc>)
 8002e8a:	f005 f8c9 	bl	8008020 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sdateget, RTC_FORMAT_BIN); // have to call GetDate for the time to be correct
 8002e8e:	2200      	movs	r2, #0
 8002e90:	493d      	ldr	r1, [pc, #244]	; (8002f88 <main+0x4c0>)
 8002e92:	483c      	ldr	r0, [pc, #240]	; (8002f84 <main+0x4bc>)
 8002e94:	f005 f9c9 	bl	800822a <HAL_RTC_GetDate>

		// continuity on pyro channels
		continuity = get_continuity();
 8002e98:	f000 faea 	bl	8003470 <get_continuity>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <main+0x488>)
 8002ea2:	701a      	strb	r2, [r3, #0]

		// gps
		if (gps_dma_ready) {
 8002ea4:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <main+0x4c4>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00c      	beq.n	8002ec8 <main+0x400>
			gps_dma_ready = 0;
 8002eae:	4b37      	ldr	r3, [pc, #220]	; (8002f8c <main+0x4c4>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
			GPS_ParseBuffer(&latitude, &longitude, &time);
 8002eb4:	4a36      	ldr	r2, [pc, #216]	; (8002f90 <main+0x4c8>)
 8002eb6:	4924      	ldr	r1, [pc, #144]	; (8002f48 <main+0x480>)
 8002eb8:	4822      	ldr	r0, [pc, #136]	; (8002f44 <main+0x47c>)
 8002eba:	f7fe fc15 	bl	80016e8 <GPS_ParseBuffer>

			// start new DMA request
			HAL_UART_Receive_DMA(&huart6, gps_rx_buf, GPS_RX_DMA_BUF_LEN);
 8002ebe:	22af      	movs	r2, #175	; 0xaf
 8002ec0:	4919      	ldr	r1, [pc, #100]	; (8002f28 <main+0x460>)
 8002ec2:	481a      	ldr	r0, [pc, #104]	; (8002f2c <main+0x464>)
 8002ec4:	f006 ff76 	bl	8009db4 <HAL_UART_Receive_DMA>
		}

		// debugging state of GPS coordinates during testing, remove later
		if (latitude != 0) {
 8002ec8:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <main+0x47c>)
 8002eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	f7fd fe17 	bl	8000b08 <__aeabi_dcmpeq>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <main+0x424>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	2104      	movs	r1, #4
 8002ee4:	4824      	ldr	r0, [pc, #144]	; (8002f78 <main+0x4b0>)
 8002ee6:	f003 f89f 	bl	8006028 <HAL_GPIO_WritePin>
 8002eea:	e004      	b.n	8002ef6 <main+0x42e>
		} else {
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8002eec:	2200      	movs	r2, #0
 8002eee:	2104      	movs	r1, #4
 8002ef0:	4821      	ldr	r0, [pc, #132]	; (8002f78 <main+0x4b0>)
 8002ef2:	f003 f899 	bl	8006028 <HAL_GPIO_WritePin>
		}

		if (longitude != 0) {
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <main+0x480>)
 8002ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	f7fd fe00 	bl	8000b08 <__aeabi_dcmpeq>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d142      	bne.n	8002f94 <main+0x4cc>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2108      	movs	r1, #8
 8002f12:	4819      	ldr	r0, [pc, #100]	; (8002f78 <main+0x4b0>)
 8002f14:	f003 f888 	bl	8006028 <HAL_GPIO_WritePin>
 8002f18:	e041      	b.n	8002f9e <main+0x4d6>
 8002f1a:	bf00      	nop
 8002f1c:	20000388 	.word	0x20000388
 8002f20:	42c80000 	.word	0x42c80000
 8002f24:	2000038c 	.word	0x2000038c
 8002f28:	20000a4c 	.word	0x20000a4c
 8002f2c:	200015d0 	.word	0x200015d0
 8002f30:	20000710 	.word	0x20000710
 8002f34:	200014f0 	.word	0x200014f0
 8002f38:	20000238 	.word	0x20000238
 8002f3c:	20000244 	.word	0x20000244
 8002f40:	20000250 	.word	0x20000250
 8002f44:	20000c10 	.word	0x20000c10
 8002f48:	20000b00 	.word	0x20000b00
 8002f4c:	20000264 	.word	0x20000264
 8002f50:	20000237 	.word	0x20000237
 8002f54:	20000385 	.word	0x20000385
 8002f58:	080143fc 	.word	0x080143fc
 8002f5c:	2000027c 	.word	0x2000027c
 8002f60:	20000260 	.word	0x20000260
 8002f64:	20000258 	.word	0x20000258
 8002f68:	2000025c 	.word	0x2000025c
 8002f6c:	08014458 	.word	0x08014458
 8002f70:	20000344 	.word	0x20000344
 8002f74:	200013b0 	.word	0x200013b0
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	20000390 	.word	0x20000390
 8002f80:	20000c18 	.word	0x20000c18
 8002f84:	20000e78 	.word	0x20000e78
 8002f88:	20000278 	.word	0x20000278
 8002f8c:	20000254 	.word	0x20000254
 8002f90:	20000b08 	.word	0x20000b08
		} else {
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002f94:	2200      	movs	r2, #0
 8002f96:	2108      	movs	r1, #8
 8002f98:	4862      	ldr	r0, [pc, #392]	; (8003124 <main+0x65c>)
 8002f9a:	f003 f845 	bl	8006028 <HAL_GPIO_WritePin>
		}

		// propulsion data (not needed after apogee)
		if (state < FLIGHT_STATE_PRE_MAIN) {
 8002f9e:	4b62      	ldr	r3, [pc, #392]	; (8003128 <main+0x660>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d834      	bhi.n	8003012 <main+0x54a>
			tank_temperature = Max31855_Read_Temp();
 8002fa8:	f7fe f840 	bl	800102c <Max31855_Read_Temp>
 8002fac:	eef0 7a40 	vmov.f32	s15, s0
 8002fb0:	4b5e      	ldr	r3, [pc, #376]	; (800312c <main+0x664>)
 8002fb2:	edc3 7a00 	vstr	s15, [r3]
//				sprintf(msg_buffer_av, "tank pressure = %f\r\n", tank_pressure);
//				debug_tx_uart(msg_buffer_av);
//				HAL_Delay(10);
//			}

			valve_state = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port, IN_Prop_ActuatedVent_Feedback_Pin);
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	485d      	ldr	r0, [pc, #372]	; (8003130 <main+0x668>)
 8002fba:	f003 f81d 	bl	8005ff8 <HAL_GPIO_ReadPin>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b5c      	ldr	r3, [pc, #368]	; (8003134 <main+0x66c>)
 8002fc4:	701a      	strb	r2, [r3, #0]

			#ifdef TIMING_ITM
				ITM_Port32(31) = 300; // start of pr sprintf
			#endif

			sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002fc6:	4b5c      	ldr	r3, [pc, #368]	; (8003138 <main+0x670>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fadc 	bl	8000588 <__aeabi_f2d>
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	460d      	mov	r5, r1
 8002fd4:	4b55      	ldr	r3, [pc, #340]	; (800312c <main+0x664>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fad5 	bl	8000588 <__aeabi_f2d>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4954      	ldr	r1, [pc, #336]	; (8003134 <main+0x66c>)
 8002fe4:	7809      	ldrb	r1, [r1, #0]
 8002fe6:	4608      	mov	r0, r1
					tank_pressure, tank_temperature, valve_state, stimeget.Minutes,
 8002fe8:	4954      	ldr	r1, [pc, #336]	; (800313c <main+0x674>)
 8002fea:	7849      	ldrb	r1, [r1, #1]
			sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002fec:	460e      	mov	r6, r1
					stimeget.Seconds, stimeget.SubSeconds);
 8002fee:	4953      	ldr	r1, [pc, #332]	; (800313c <main+0x674>)
 8002ff0:	7889      	ldrb	r1, [r1, #2]
			sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002ff2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ff4:	4951      	ldr	r1, [pc, #324]	; (800313c <main+0x674>)
 8002ff6:	6849      	ldr	r1, [r1, #4]
 8002ff8:	9105      	str	r1, [sp, #20]
 8002ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ffc:	9104      	str	r1, [sp, #16]
 8002ffe:	9603      	str	r6, [sp, #12]
 8003000:	9002      	str	r0, [sp, #8]
 8003002:	e9cd 2300 	strd	r2, r3, [sp]
 8003006:	4622      	mov	r2, r4
 8003008:	462b      	mov	r3, r5
 800300a:	494d      	ldr	r1, [pc, #308]	; (8003140 <main+0x678>)
 800300c:	484d      	ldr	r0, [pc, #308]	; (8003144 <main+0x67c>)
 800300e:	f00c f879 	bl	800f104 <siprintf>
			ITM_Port32(31) = 400; // start of av sprintf
		#endif

		sprintf((char*) msg_buffer_av,
				"S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8003012:	4b4d      	ldr	r3, [pc, #308]	; (8003148 <main+0x680>)
 8003014:	681b      	ldr	r3, [r3, #0]
		sprintf((char*) msg_buffer_av,
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fab6 	bl	8000588 <__aeabi_f2d>
 800301c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8003020:	4b49      	ldr	r3, [pc, #292]	; (8003148 <main+0x680>)
 8003022:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) msg_buffer_av,
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd faaf 	bl	8000588 <__aeabi_f2d>
 800302a:	e9c7 0108 	strd	r0, r1, [r7, #32]
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 800302e:	4b46      	ldr	r3, [pc, #280]	; (8003148 <main+0x680>)
 8003030:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) msg_buffer_av,
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd faa8 	bl	8000588 <__aeabi_f2d>
 8003038:	e9c7 0106 	strd	r0, r1, [r7, #24]
				angular_rate_mdps[0], angular_rate_mdps[1],
 800303c:	4b43      	ldr	r3, [pc, #268]	; (800314c <main+0x684>)
 800303e:	681b      	ldr	r3, [r3, #0]
		sprintf((char*) msg_buffer_av,
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd faa1 	bl	8000588 <__aeabi_f2d>
 8003046:	e9c7 0104 	strd	r0, r1, [r7, #16]
				angular_rate_mdps[0], angular_rate_mdps[1],
 800304a:	4b40      	ldr	r3, [pc, #256]	; (800314c <main+0x684>)
 800304c:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) msg_buffer_av,
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd fa9a 	bl	8000588 <__aeabi_f2d>
 8003054:	e9c7 0102 	strd	r0, r1, [r7, #8]
				angular_rate_mdps[2], pressure_hPa, latitude, longitude,
 8003058:	4b3c      	ldr	r3, [pc, #240]	; (800314c <main+0x684>)
 800305a:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) msg_buffer_av,
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fa93 	bl	8000588 <__aeabi_f2d>
 8003062:	4605      	mov	r5, r0
 8003064:	460e      	mov	r6, r1
 8003066:	4b3a      	ldr	r3, [pc, #232]	; (8003150 <main+0x688>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fa8c 	bl	8000588 <__aeabi_f2d>
 8003070:	4682      	mov	sl, r0
 8003072:	468b      	mov	fp, r1
 8003074:	4b37      	ldr	r3, [pc, #220]	; (8003154 <main+0x68c>)
 8003076:	e9d3 8900 	ldrd	r8, r9, [r3]
 800307a:	4b37      	ldr	r3, [pc, #220]	; (8003158 <main+0x690>)
 800307c:	e9d3 0100 	ldrd	r0, r1, [r3]
				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8003080:	4b2e      	ldr	r3, [pc, #184]	; (800313c <main+0x674>)
 8003082:	785b      	ldrb	r3, [r3, #1]
		sprintf((char*) msg_buffer_av,
 8003084:	607b      	str	r3, [r7, #4]
				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <main+0x674>)
 8003088:	789b      	ldrb	r3, [r3, #2]
		sprintf((char*) msg_buffer_av,
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	4b2b      	ldr	r3, [pc, #172]	; (800313c <main+0x674>)
 800308e:	685c      	ldr	r4, [r3, #4]
 8003090:	4b32      	ldr	r3, [pc, #200]	; (800315c <main+0x694>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	4b23      	ldr	r3, [pc, #140]	; (8003128 <main+0x660>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	9314      	str	r3, [sp, #80]	; 0x50
 80030a0:	9213      	str	r2, [sp, #76]	; 0x4c
 80030a2:	9412      	str	r4, [sp, #72]	; 0x48
 80030a4:	683c      	ldr	r4, [r7, #0]
 80030a6:	9411      	str	r4, [sp, #68]	; 0x44
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	9310      	str	r3, [sp, #64]	; 0x40
 80030ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80030b0:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80030b4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80030b8:	e9cd 5608 	strd	r5, r6, [sp, #32]
 80030bc:	ed97 7b02 	vldr	d7, [r7, #8]
 80030c0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80030c4:	ed97 7b04 	vldr	d7, [r7, #16]
 80030c8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80030cc:	ed97 7b06 	vldr	d7, [r7, #24]
 80030d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80030d4:	ed97 7b08 	vldr	d7, [r7, #32]
 80030d8:	ed8d 7b00 	vstr	d7, [sp]
 80030dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030e0:	491f      	ldr	r1, [pc, #124]	; (8003160 <main+0x698>)
 80030e2:	4820      	ldr	r0, [pc, #128]	; (8003164 <main+0x69c>)
 80030e4:	f00c f80e 	bl	800f104 <siprintf>
		#ifdef TIMING_ITM
			ITM_Port32(31) = 401; // end of av sprintf
		#endif

		// save to sd and flash
		fres = sd_open_file(filename);
 80030e8:	481f      	ldr	r0, [pc, #124]	; (8003168 <main+0x6a0>)
 80030ea:	f000 fd35 	bl	8003b58 <sd_open_file>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b1e      	ldr	r3, [pc, #120]	; (800316c <main+0x6a4>)
 80030f4:	701a      	strb	r2, [r3, #0]
		sd_write(&fil, msg_buffer_av);
 80030f6:	491b      	ldr	r1, [pc, #108]	; (8003164 <main+0x69c>)
 80030f8:	481d      	ldr	r0, [pc, #116]	; (8003170 <main+0x6a8>)
 80030fa:	f000 fd45 	bl	8003b88 <sd_write>
		if (state < FLIGHT_STATE_PRE_MAIN) {
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <main+0x660>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d803      	bhi.n	8003110 <main+0x648>
			sd_write(&fil, msg_buffer_pr);
 8003108:	490e      	ldr	r1, [pc, #56]	; (8003144 <main+0x67c>)
 800310a:	4819      	ldr	r0, [pc, #100]	; (8003170 <main+0x6a8>)
 800310c:	f000 fd3c 	bl	8003b88 <sd_write>
		}
		f_close(&fil);
 8003110:	4817      	ldr	r0, [pc, #92]	; (8003170 <main+0x6a8>)
 8003112:	f00a fd10 	bl	800db36 <f_close>
//		check_flight_state(&state);

//		radio_tx(msg_buffer_pr, strlen(msg_buffer_pr));
//		HAL_Delay(200);
//		radio_tx(msg_buffer_av, strlen(msg_buffer_av));
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8003116:	2200      	movs	r2, #0
 8003118:	2102      	movs	r1, #2
 800311a:	4802      	ldr	r0, [pc, #8]	; (8003124 <main+0x65c>)
 800311c:	f002 ff84 	bl	8006028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8003120:	e67e      	b.n	8002e20 <main+0x358>
 8003122:	bf00      	nop
 8003124:	40020800 	.word	0x40020800
 8003128:	20000385 	.word	0x20000385
 800312c:	20000258 	.word	0x20000258
 8003130:	40020400 	.word	0x40020400
 8003134:	2000025c 	.word	0x2000025c
 8003138:	20000260 	.word	0x20000260
 800313c:	20000264 	.word	0x20000264
 8003140:	08014458 	.word	0x08014458
 8003144:	20000344 	.word	0x20000344
 8003148:	20000238 	.word	0x20000238
 800314c:	20000244 	.word	0x20000244
 8003150:	20000250 	.word	0x20000250
 8003154:	20000c10 	.word	0x20000c10
 8003158:	20000b00 	.word	0x20000b00
 800315c:	20000237 	.word	0x20000237
 8003160:	080143fc 	.word	0x080143fc
 8003164:	2000027c 	.word	0x2000027c
 8003168:	20000378 	.word	0x20000378
 800316c:	20000c30 	.word	0x20000c30
 8003170:	20000c48 	.word	0x20000c48

08003174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b0a0      	sub	sp, #128	; 0x80
 8003178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800317a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800317e:	2230      	movs	r2, #48	; 0x30
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f00b f87c 	bl	800e280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003188:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003198:	f107 030c 	add.w	r3, r7, #12
 800319c:	2230      	movs	r2, #48	; 0x30
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f00b f86d 	bl	800e280 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	4b31      	ldr	r3, [pc, #196]	; (8003270 <SystemClock_Config+0xfc>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a30      	ldr	r2, [pc, #192]	; (8003270 <SystemClock_Config+0xfc>)
 80031b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
 80031b6:	4b2e      	ldr	r3, [pc, #184]	; (8003270 <SystemClock_Config+0xfc>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <SystemClock_Config+0x100>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80031ce:	4a29      	ldr	r2, [pc, #164]	; (8003274 <SystemClock_Config+0x100>)
 80031d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <SystemClock_Config+0x100>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80031e2:	2309      	movs	r3, #9
 80031e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80031ec:	2301      	movs	r3, #1
 80031ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031f0:	2302      	movs	r3, #2
 80031f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80031fa:	2308      	movs	r3, #8
 80031fc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80031fe:	2348      	movs	r3, #72	; 0x48
 8003200:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003202:	2302      	movs	r3, #2
 8003204:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003206:	2304      	movs	r3, #4
 8003208:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800320a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800320e:	4618      	mov	r0, r3
 8003210:	f003 ff90 	bl	8007134 <HAL_RCC_OscConfig>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800321a:	f000 fa5f 	bl	80036dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800321e:	230f      	movs	r3, #15
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003222:	2302      	movs	r3, #2
 8003224:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003226:	2300      	movs	r3, #0
 8003228:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800322a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003230:	2300      	movs	r3, #0
 8003232:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003234:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003238:	2102      	movs	r1, #2
 800323a:	4618      	mov	r0, r3
 800323c:	f004 f9ea 	bl	8007614 <HAL_RCC_ClockConfig>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003246:	f000 fa49 	bl	80036dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800324a:	2320      	movs	r3, #32
 800324c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800324e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003252:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003254:	f107 030c 	add.w	r3, r7, #12
 8003258:	4618      	mov	r0, r3
 800325a:	f004 fbd5 	bl	8007a08 <HAL_RCCEx_PeriphCLKConfig>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8003264:	f000 fa3a 	bl	80036dc <Error_Handler>
  }
}
 8003268:	bf00      	nop
 800326a:	3780      	adds	r7, #128	; 0x80
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40023800 	.word	0x40023800
 8003274:	40007000 	.word	0x40007000

08003278 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IN_Button_Pin) {
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d110      	bne.n	80032aa <HAL_GPIO_EXTI_Callback+0x32>
		button_pressed = 1;
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_GPIO_EXTI_Callback+0x48>)
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
		state++;
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	3301      	adds	r3, #1
 8003296:	b2da      	uxtb	r2, r3
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <HAL_GPIO_EXTI_Callback+0x4c>)
 800329a:	701a      	strb	r2, [r3, #0]

		__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_GPIO_EXTI_Callback+0x50>)
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_GPIO_EXTI_Callback+0x50>)
 80032a2:	f043 0310 	orr.w	r3, r3, #16
 80032a6:	6113      	str	r3, [r2, #16]
	}
	else if (GPIO_Pin == EXTI_SWIER_SWIER4) { // software interrupt to change timer settings
		update_radio_timer_params(&state);
	}
}
 80032a8:	e005      	b.n	80032b6 <HAL_GPIO_EXTI_Callback+0x3e>
	else if (GPIO_Pin == EXTI_SWIER_SWIER4) { // software interrupt to change timer settings
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d102      	bne.n	80032b6 <HAL_GPIO_EXTI_Callback+0x3e>
		update_radio_timer_params(&state);
 80032b0:	4804      	ldr	r0, [pc, #16]	; (80032c4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80032b2:	f000 f9b1 	bl	8003618 <update_radio_timer_params>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000236 	.word	0x20000236
 80032c4:	20000385 	.word	0x20000385
 80032c8:	40013c00 	.word	0x40013c00

080032cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) { // gps
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a15      	ldr	r2, [pc, #84]	; (800332c <HAL_UART_RxCpltCallback+0x60>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d107      	bne.n	80032ec <HAL_UART_RxCpltCallback+0x20>

		// received data from GPS into buffer.
		// insert null termination and parse buffer (total buffer length is GPS_RX_DMA_BUF_LEN + 1)
		gps_rx_buf[GPS_RX_DMA_BUF_LEN] = '\0';
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_UART_RxCpltCallback+0x64>)
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		gps_dma_ready = 1;
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <HAL_UART_RxCpltCallback+0x68>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
			arming_recovery();
		}

		// main loop will clear the buffer and start new DMA request
	}
}
 80032ea:	e01b      	b.n	8003324 <HAL_UART_RxCpltCallback+0x58>
	else if (huart == &huart3) { // xtend radio
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a12      	ldr	r2, [pc, #72]	; (8003338 <HAL_UART_RxCpltCallback+0x6c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d117      	bne.n	8003324 <HAL_UART_RxCpltCallback+0x58>
		xtend_rx_dma_ready = 1;
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_UART_RxCpltCallback+0x70>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	701a      	strb	r2, [r3, #0]
		radio_command cmd = xtend_parse_dma_command();
 80032fa:	f000 f9fd 	bl	80036f8 <xtend_parse_dma_command>
 80032fe:	4603      	mov	r3, r0
 8003300:	73fb      	strb	r3, [r7, #15]
		if (cmd == LAUNCH) {
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d102      	bne.n	800330e <HAL_UART_RxCpltCallback+0x42>
			rocket_launch();
 8003308:	f000 fabc 	bl	8003884 <rocket_launch>
}
 800330c:	e00a      	b.n	8003324 <HAL_UART_RxCpltCallback+0x58>
		else if (cmd == ARM_PROP) {
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d102      	bne.n	800331a <HAL_UART_RxCpltCallback+0x4e>
			arming_propulsion();
 8003314:	f000 fad0 	bl	80038b8 <arming_propulsion>
}
 8003318:	e004      	b.n	8003324 <HAL_UART_RxCpltCallback+0x58>
		else if (cmd == ARM_RCOV) {
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d101      	bne.n	8003324 <HAL_UART_RxCpltCallback+0x58>
			arming_recovery();
 8003320:	f000 fad6 	bl	80038d0 <arming_recovery>
}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	200015d0 	.word	0x200015d0
 8003330:	20000a4c 	.word	0x20000a4c
 8003334:	20000254 	.word	0x20000254
 8003338:	200014f0 	.word	0x200014f0
 800333c:	20000390 	.word	0x20000390

08003340 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a0f      	ldr	r2, [pc, #60]	; (8003388 <HAL_UART_TxCpltCallback+0x48>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d114      	bne.n	800337a <HAL_UART_TxCpltCallback+0x3a>
//		#ifdef TIMING_ITM
//			ITM_Port32(31) = 200;
//		#endif
		// don't care who started it, transmit is complete
		xtend_tx_start_av = 0;
 8003350:	4b0e      	ldr	r3, [pc, #56]	; (800338c <HAL_UART_TxCpltCallback+0x4c>)
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
		xtend_tx_start_pr = 0;
 8003356:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <HAL_UART_TxCpltCallback+0x50>)
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]

		num_radio_transmissions++;
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <HAL_UART_TxCpltCallback+0x54>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	3301      	adds	r3, #1
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_UART_TxCpltCallback+0x54>)
 8003368:	701a      	strb	r2, [r3, #0]
		if (num_radio_transmissions == 10) {
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_UART_TxCpltCallback+0x54>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b0a      	cmp	r3, #10
 8003372:	d102      	bne.n	800337a <HAL_UART_TxCpltCallback+0x3a>
			num_radio_transmissions = 0;
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <HAL_UART_TxCpltCallback+0x54>)
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	200014f0 	.word	0x200014f0
 800338c:	20000391 	.word	0x20000391
 8003390:	20000392 	.word	0x20000392
 8003394:	20000386 	.word	0x20000386

08003398 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d106      	bne.n	80033b6 <HAL_TIM_PeriodElapsedCallback+0x1e>
//		#ifdef TIMING_ITM
//			ITM_Port32(31) = 100;
//		#endif

		HAL_GPIO_TogglePin(LEDF_GPIO_Port, LEDF_Pin);
 80033a8:	2108      	movs	r1, #8
 80033aa:	4806      	ldr	r0, [pc, #24]	; (80033c4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80033ac:	f002 fe55 	bl	800605a <HAL_GPIO_TogglePin>
		xtend_transmit_telemetry(&state);
 80033b0:	4805      	ldr	r0, [pc, #20]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80033b2:	f000 f895 	bl	80034e0 <xtend_transmit_telemetry>
	}
//	else if (htim == &htim8) {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
////		HAL_ADC_Start_DMA(&hadc1, tank_pressure_buf, PROP_TANK_PRESSURE_ADC_BUF_LEN);
//	}
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200013b0 	.word	0x200013b0
 80033c4:	40020000 	.word	0x40020000
 80033c8:	20000385 	.word	0x20000385
 80033cc:	00000000 	.word	0x00000000

080033d0 <getAltitude>:
//
//	HAL_ADC_Start_DMA(&hadc1, tank_pressure_buf, PROP_TANK_PRESSURE_ADC_BUF_LEN);
//}


float getAltitude(void) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
	get_pressure(dev_ctx_lps, &pressure_hPa);
 80033d6:	4a22      	ldr	r2, [pc, #136]	; (8003460 <getAltitude+0x90>)
 80033d8:	4b22      	ldr	r3, [pc, #136]	; (8003464 <getAltitude+0x94>)
 80033da:	ca07      	ldmia	r2, {r0, r1, r2}
 80033dc:	f7fe fe72 	bl	80020c4 <get_pressure>
	uint32_t altitude = 145442.1609 * (1.0 - pow(pressure_hPa/local_pressure, 0.190266436));
 80033e0:	4b20      	ldr	r3, [pc, #128]	; (8003464 <getAltitude+0x94>)
 80033e2:	ed93 7a00 	vldr	s14, [r3]
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <getAltitude+0x98>)
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80033f0:	ee16 0a90 	vmov	r0, s13
 80033f4:	f7fd f8c8 	bl	8000588 <__aeabi_f2d>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8003450 <getAltitude+0x80>
 8003400:	ec43 2b10 	vmov	d0, r2, r3
 8003404:	f00f ffea 	bl	80133dc <pow>
 8003408:	ec53 2b10 	vmov	r2, r3, d0
 800340c:	f04f 0000 	mov.w	r0, #0
 8003410:	4916      	ldr	r1, [pc, #88]	; (800346c <getAltitude+0x9c>)
 8003412:	f7fc ff59 	bl	80002c8 <__aeabi_dsub>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	a30e      	add	r3, pc, #56	; (adr r3, 8003458 <getAltitude+0x88>)
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f7fd f908 	bl	8000638 <__aeabi_dmul>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4610      	mov	r0, r2
 800342e:	4619      	mov	r1, r3
 8003430:	f7fd fbda 	bl	8000be8 <__aeabi_d2uiz>
 8003434:	4603      	mov	r3, r0
 8003436:	607b      	str	r3, [r7, #4]
	return altitude;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8003442:	eeb0 0a67 	vmov.f32	s0, s15
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	f3af 8000 	nop.w
 8003450:	8c12bfc3 	.word	0x8c12bfc3
 8003454:	3fc85aa6 	.word	0x3fc85aa6
 8003458:	4985f06f 	.word	0x4985f06f
 800345c:	4101c111 	.word	0x4101c111
 8003460:	20000c24 	.word	0x20000c24
 8003464:	20000250 	.word	0x20000250
 8003468:	20000000 	.word	0x20000000
 800346c:	3ff00000 	.word	0x3ff00000

08003470 <get_continuity>:

	W25qxx_WriteBlock(msg_buffer, block_address, block_offset, strlen((const char *)msg_buffer));
	flash_write_address += strlen((const char *)msg_buffer);
}

uint8_t get_continuity(void) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
	// read pins
	GPIO_PinState drogue = HAL_GPIO_ReadPin(Rcov_Cont_Drogue_GPIO_Port, Rcov_Cont_Drogue_Pin);
 8003476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800347a:	4817      	ldr	r0, [pc, #92]	; (80034d8 <get_continuity+0x68>)
 800347c:	f002 fdbc 	bl	8005ff8 <HAL_GPIO_ReadPin>
 8003480:	4603      	mov	r3, r0
 8003482:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState main = HAL_GPIO_ReadPin(Rcov_Cont_Main_GPIO_Port, Rcov_Cont_Main_Pin);
 8003484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003488:	4813      	ldr	r0, [pc, #76]	; (80034d8 <get_continuity+0x68>)
 800348a:	f002 fdb5 	bl	8005ff8 <HAL_GPIO_ReadPin>
 800348e:	4603      	mov	r3, r0
 8003490:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState prop_1 = HAL_GPIO_ReadPin(Prop_Cont_1_GPIO_Port, Prop_Cont_1_Pin);
 8003492:	2101      	movs	r1, #1
 8003494:	4810      	ldr	r0, [pc, #64]	; (80034d8 <get_continuity+0x68>)
 8003496:	f002 fdaf 	bl	8005ff8 <HAL_GPIO_ReadPin>
 800349a:	4603      	mov	r3, r0
 800349c:	717b      	strb	r3, [r7, #5]
	GPIO_PinState prop_2 = HAL_GPIO_ReadPin(Prop_Cont_2_GPIO_Port, Prop_Cont_2_Pin);
 800349e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034a2:	480e      	ldr	r0, [pc, #56]	; (80034dc <get_continuity+0x6c>)
 80034a4:	f002 fda8 	bl	8005ff8 <HAL_GPIO_ReadPin>
 80034a8:	4603      	mov	r3, r0
 80034aa:	713b      	strb	r3, [r7, #4]

	// assign one-hot encoded result (apparently you can multiply enums?)
	uint8_t continuity = (drogue) + (main * 2) + (prop_1 * 4) + (prop_2 * 8);
 80034ac:	793b      	ldrb	r3, [r7, #4]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	797b      	ldrb	r3, [r7, #5]
 80034b4:	4413      	add	r3, r2
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	79bb      	ldrb	r3, [r7, #6]
 80034be:	4413      	add	r3, r2
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	4413      	add	r3, r2
 80034ca:	70fb      	strb	r3, [r7, #3]
	return continuity;
 80034cc:	78fb      	ldrb	r3, [r7, #3]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40021800 	.word	0x40021800
 80034dc:	40021400 	.word	0x40021400

080034e0 <xtend_transmit_telemetry>:

		break;
	}
}

void xtend_transmit_telemetry(volatile uint8_t *state) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	switch (*state) {
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <xtend_transmit_telemetry+0x18>
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d036      	beq.n	8003564 <xtend_transmit_telemetry+0x84>
 80034f6:	e06d      	b.n	80035d4 <xtend_transmit_telemetry+0xf4>
	case FLIGHT_STATE_PAD:

		// send av
		if (num_radio_transmissions % 2 == 0 && xtend_tx_start_pr == 0 && xtend_tx_start_av == 0) {
 80034f8:	4b42      	ldr	r3, [pc, #264]	; (8003604 <xtend_transmit_telemetry+0x124>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d116      	bne.n	8003536 <xtend_transmit_telemetry+0x56>
 8003508:	4b3f      	ldr	r3, [pc, #252]	; (8003608 <xtend_transmit_telemetry+0x128>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d111      	bne.n	8003536 <xtend_transmit_telemetry+0x56>
 8003512:	4b3e      	ldr	r3, [pc, #248]	; (800360c <xtend_transmit_telemetry+0x12c>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10c      	bne.n	8003536 <xtend_transmit_telemetry+0x56>
			radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 800351c:	483c      	ldr	r0, [pc, #240]	; (8003610 <xtend_transmit_telemetry+0x130>)
 800351e:	f7fc fe71 	bl	8000204 <strlen>
 8003522:	4603      	mov	r3, r0
 8003524:	b29b      	uxth	r3, r3
 8003526:	4619      	mov	r1, r3
 8003528:	4839      	ldr	r0, [pc, #228]	; (8003610 <xtend_transmit_telemetry+0x130>)
 800352a:	f7ff fa89 	bl	8002a40 <radio_tx>
			xtend_tx_start_av = 1;
 800352e:	4b37      	ldr	r3, [pc, #220]	; (800360c <xtend_transmit_telemetry+0x12c>)
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
		// send prop
		else if (xtend_tx_start_av == 0 && xtend_tx_start_pr == 0) {
			radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
			xtend_tx_start_pr = 1;
		}
		break;
 8003534:	e05d      	b.n	80035f2 <xtend_transmit_telemetry+0x112>
		else if (xtend_tx_start_av == 0 && xtend_tx_start_pr == 0) {
 8003536:	4b35      	ldr	r3, [pc, #212]	; (800360c <xtend_transmit_telemetry+0x12c>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d158      	bne.n	80035f2 <xtend_transmit_telemetry+0x112>
 8003540:	4b31      	ldr	r3, [pc, #196]	; (8003608 <xtend_transmit_telemetry+0x128>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d153      	bne.n	80035f2 <xtend_transmit_telemetry+0x112>
			radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
 800354a:	4832      	ldr	r0, [pc, #200]	; (8003614 <xtend_transmit_telemetry+0x134>)
 800354c:	f7fc fe5a 	bl	8000204 <strlen>
 8003550:	4603      	mov	r3, r0
 8003552:	b29b      	uxth	r3, r3
 8003554:	4619      	mov	r1, r3
 8003556:	482f      	ldr	r0, [pc, #188]	; (8003614 <xtend_transmit_telemetry+0x134>)
 8003558:	f7ff fa72 	bl	8002a40 <radio_tx>
			xtend_tx_start_pr = 1;
 800355c:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <xtend_transmit_telemetry+0x128>)
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]
		break;
 8003562:	e046      	b.n	80035f2 <xtend_transmit_telemetry+0x112>

	case FLIGHT_STATE_PRE_APOGEE:
		// transmit avionics and prop at equal priority
		if (xtend_tx_start_pr == 0 && xtend_tx_start_av == 0 && num_radio_transmissions % 2 == 0) {
 8003564:	4b28      	ldr	r3, [pc, #160]	; (8003608 <xtend_transmit_telemetry+0x128>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d116      	bne.n	800359c <xtend_transmit_telemetry+0xbc>
 800356e:	4b27      	ldr	r3, [pc, #156]	; (800360c <xtend_transmit_telemetry+0x12c>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d111      	bne.n	800359c <xtend_transmit_telemetry+0xbc>
 8003578:	4b22      	ldr	r3, [pc, #136]	; (8003604 <xtend_transmit_telemetry+0x124>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d109      	bne.n	800359c <xtend_transmit_telemetry+0xbc>
			radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 8003588:	4821      	ldr	r0, [pc, #132]	; (8003610 <xtend_transmit_telemetry+0x130>)
 800358a:	f7fc fe3b 	bl	8000204 <strlen>
 800358e:	4603      	mov	r3, r0
 8003590:	b29b      	uxth	r3, r3
 8003592:	4619      	mov	r1, r3
 8003594:	481e      	ldr	r0, [pc, #120]	; (8003610 <xtend_transmit_telemetry+0x130>)
 8003596:	f7ff fa53 	bl	8002a40 <radio_tx>
		}
		else if (xtend_tx_start_pr == 0 && xtend_tx_start_av == 0 && num_radio_transmissions % 2 == 1) {
			radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
		}
		break;
 800359a:	e02c      	b.n	80035f6 <xtend_transmit_telemetry+0x116>
		else if (xtend_tx_start_pr == 0 && xtend_tx_start_av == 0 && num_radio_transmissions % 2 == 1) {
 800359c:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <xtend_transmit_telemetry+0x128>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d127      	bne.n	80035f6 <xtend_transmit_telemetry+0x116>
 80035a6:	4b19      	ldr	r3, [pc, #100]	; (800360c <xtend_transmit_telemetry+0x12c>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d122      	bne.n	80035f6 <xtend_transmit_telemetry+0x116>
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <xtend_transmit_telemetry+0x124>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d11a      	bne.n	80035f6 <xtend_transmit_telemetry+0x116>
			radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
 80035c0:	4814      	ldr	r0, [pc, #80]	; (8003614 <xtend_transmit_telemetry+0x134>)
 80035c2:	f7fc fe1f 	bl	8000204 <strlen>
 80035c6:	4603      	mov	r3, r0
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	4619      	mov	r1, r3
 80035cc:	4811      	ldr	r0, [pc, #68]	; (8003614 <xtend_transmit_telemetry+0x134>)
 80035ce:	f7ff fa37 	bl	8002a40 <radio_tx>
		break;
 80035d2:	e010      	b.n	80035f6 <xtend_transmit_telemetry+0x116>

	default:
		if (xtend_tx_start_av == 0) {
 80035d4:	4b0d      	ldr	r3, [pc, #52]	; (800360c <xtend_transmit_telemetry+0x12c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10d      	bne.n	80035fa <xtend_transmit_telemetry+0x11a>
			radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 80035de:	480c      	ldr	r0, [pc, #48]	; (8003610 <xtend_transmit_telemetry+0x130>)
 80035e0:	f7fc fe10 	bl	8000204 <strlen>
 80035e4:	4603      	mov	r3, r0
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	4619      	mov	r1, r3
 80035ea:	4809      	ldr	r0, [pc, #36]	; (8003610 <xtend_transmit_telemetry+0x130>)
 80035ec:	f7ff fa28 	bl	8002a40 <radio_tx>
		}
		break;
 80035f0:	e003      	b.n	80035fa <xtend_transmit_telemetry+0x11a>
		break;
 80035f2:	bf00      	nop
 80035f4:	e002      	b.n	80035fc <xtend_transmit_telemetry+0x11c>
		break;
 80035f6:	bf00      	nop
 80035f8:	e000      	b.n	80035fc <xtend_transmit_telemetry+0x11c>
		break;
 80035fa:	bf00      	nop
	}
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20000386 	.word	0x20000386
 8003608:	20000392 	.word	0x20000392
 800360c:	20000391 	.word	0x20000391
 8003610:	2000027c 	.word	0x2000027c
 8003614:	20000344 	.word	0x20000344

08003618 <update_radio_timer_params>:

void update_radio_timer_params(volatile uint8_t *state) {
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	switch (*state) {
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b04      	cmp	r3, #4
 8003628:	d843      	bhi.n	80036b2 <update_radio_timer_params+0x9a>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <update_radio_timer_params+0x18>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003645 	.word	0x08003645
 8003634:	0800365b 	.word	0x0800365b
 8003638:	08003671 	.word	0x08003671
 800363c:	08003687 	.word	0x08003687
 8003640:	0800369d 	.word	0x0800369d
	// 		 5 Hz -> ARR = 2000
	// 		 2 Hz -> ARR = 5000
	// 		 1 Hz -> ARR = 10000

	case FLIGHT_STATE_PAD:
		TIM3->ARR = 1000-1;
 8003644:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <update_radio_timer_params+0xc0>)
 8003646:	f240 32e7 	movw	r2, #999	; 0x3e7
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->EGR |= TIM_EGR_UG;
 800364c:	4b22      	ldr	r3, [pc, #136]	; (80036d8 <update_radio_timer_params+0xc0>)
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	4a21      	ldr	r2, [pc, #132]	; (80036d8 <update_radio_timer_params+0xc0>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6153      	str	r3, [r2, #20]
//		debug_tx_uart("10hz\r\n");
		break;
 8003658:	e038      	b.n	80036cc <update_radio_timer_params+0xb4>

	case FLIGHT_STATE_PRE_APOGEE:
		TIM3->ARR = 5000-1;
 800365a:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <update_radio_timer_params+0xc0>)
 800365c:	f241 3287 	movw	r2, #4999	; 0x1387
 8003660:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->EGR |= TIM_EGR_UG;
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <update_radio_timer_params+0xc0>)
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <update_radio_timer_params+0xc0>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6153      	str	r3, [r2, #20]
//		debug_tx_uart("02hz\r\n");
		break;
 800366e:	e02d      	b.n	80036cc <update_radio_timer_params+0xb4>

	case FLIGHT_STATE_PRE_MAIN:
		TIM3->ARR = 2000-1;
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <update_radio_timer_params+0xc0>)
 8003672:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003676:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->EGR |= TIM_EGR_UG;
 8003678:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <update_radio_timer_params+0xc0>)
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <update_radio_timer_params+0xc0>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6153      	str	r3, [r2, #20]
//		debug_tx_uart("05hz\r\n");
		break;
 8003684:	e022      	b.n	80036cc <update_radio_timer_params+0xb4>

	case FLIGHT_STATE_PRE_LANDED:
		TIM3->ARR = 1000-1;
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <update_radio_timer_params+0xc0>)
 8003688:	f240 32e7 	movw	r2, #999	; 0x3e7
 800368c:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->EGR |= TIM_EGR_UG;
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <update_radio_timer_params+0xc0>)
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <update_radio_timer_params+0xc0>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6153      	str	r3, [r2, #20]
//		debug_tx_uart("10hz\r\n");
		break;
 800369a:	e017      	b.n	80036cc <update_radio_timer_params+0xb4>

	case FLIGHT_STATE_LANDED:
		TIM3->ARR = 20000-1;
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <update_radio_timer_params+0xc0>)
 800369e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80036a2:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->EGR |= TIM_EGR_UG;
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <update_radio_timer_params+0xc0>)
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	4a0b      	ldr	r2, [pc, #44]	; (80036d8 <update_radio_timer_params+0xc0>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6153      	str	r3, [r2, #20]
//		debug_tx_uart("01hz\r\n");
		break;
 80036b0:	e00c      	b.n	80036cc <update_radio_timer_params+0xb4>

	default:
		TIM3->ARR = 1000-1;
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <update_radio_timer_params+0xc0>)
 80036b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036b8:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->EGR |= TIM_EGR_UG;
 80036ba:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <update_radio_timer_params+0xc0>)
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	4a06      	ldr	r2, [pc, #24]	; (80036d8 <update_radio_timer_params+0xc0>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6153      	str	r3, [r2, #20]
//		debug_tx_uart("10hz\r\n");
		state = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	607b      	str	r3, [r7, #4]
		break;
 80036ca:	bf00      	nop
	}
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40000400 	.word	0x40000400

080036dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_SET);
 80036e0:	2201      	movs	r2, #1
 80036e2:	2108      	movs	r1, #8
 80036e4:	4803      	ldr	r0, [pc, #12]	; (80036f4 <Error_Handler+0x18>)
 80036e6:	f002 fc9f 	bl	8006028 <HAL_GPIO_WritePin>
	buzz_failure();
 80036ea:	f7ff f9e3 	bl	8002ab4 <buzz_failure>
	__BKPT();
 80036ee:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 80036f0:	bf00      	nop
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40020000 	.word	0x40020000

080036f8 <xtend_parse_dma_command>:

extern UART_HandleTypeDef huart8;

extern volatile char xtend_rx_buf[10]; // dma buffer

radio_command xtend_parse_dma_command(void) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0

	if (strcmp(xtend_rx_buf, "lnch") == 0) { // launch command
 80036fc:	4929      	ldr	r1, [pc, #164]	; (80037a4 <xtend_parse_dma_command+0xac>)
 80036fe:	482a      	ldr	r0, [pc, #168]	; (80037a8 <xtend_parse_dma_command+0xb0>)
 8003700:	f7fc fd76 	bl	80001f0 <strcmp>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <xtend_parse_dma_command+0x16>
		return LAUNCH;
 800370a:	2301      	movs	r3, #1
 800370c:	e047      	b.n	800379e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "arpr") == 0) { // arm propulsion
 800370e:	4927      	ldr	r1, [pc, #156]	; (80037ac <xtend_parse_dma_command+0xb4>)
 8003710:	4825      	ldr	r0, [pc, #148]	; (80037a8 <xtend_parse_dma_command+0xb0>)
 8003712:	f7fc fd6d 	bl	80001f0 <strcmp>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <xtend_parse_dma_command+0x28>
		return ARM_PROP;
 800371c:	2302      	movs	r3, #2
 800371e:	e03e      	b.n	800379e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "arrc") == 0) { // arm recovery
 8003720:	4923      	ldr	r1, [pc, #140]	; (80037b0 <xtend_parse_dma_command+0xb8>)
 8003722:	4821      	ldr	r0, [pc, #132]	; (80037a8 <xtend_parse_dma_command+0xb0>)
 8003724:	f7fc fd64 	bl	80001f0 <strcmp>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <xtend_parse_dma_command+0x3a>
		return ARM_RCOV;
 800372e:	2303      	movs	r3, #3
 8003730:	e035      	b.n	800379e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "dapr") == 0) { // disarm propulsion
 8003732:	4920      	ldr	r1, [pc, #128]	; (80037b4 <xtend_parse_dma_command+0xbc>)
 8003734:	481c      	ldr	r0, [pc, #112]	; (80037a8 <xtend_parse_dma_command+0xb0>)
 8003736:	f7fc fd5b 	bl	80001f0 <strcmp>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <xtend_parse_dma_command+0x4c>
		return DISARM_PROP;
 8003740:	2304      	movs	r3, #4
 8003742:	e02c      	b.n	800379e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "darc") == 0) {
 8003744:	491c      	ldr	r1, [pc, #112]	; (80037b8 <xtend_parse_dma_command+0xc0>)
 8003746:	4818      	ldr	r0, [pc, #96]	; (80037a8 <xtend_parse_dma_command+0xb0>)
 8003748:	f7fc fd52 	bl	80001f0 <strcmp>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <xtend_parse_dma_command+0x5e>
		return DISARM_RCOV;
 8003752:	2305      	movs	r3, #5
 8003754:	e023      	b.n	800379e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "vron") == 0) { // vr power on
 8003756:	4919      	ldr	r1, [pc, #100]	; (80037bc <xtend_parse_dma_command+0xc4>)
 8003758:	4813      	ldr	r0, [pc, #76]	; (80037a8 <xtend_parse_dma_command+0xb0>)
 800375a:	f7fc fd49 	bl	80001f0 <strcmp>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <xtend_parse_dma_command+0x70>
		return VR_POWER_ON;
 8003764:	2306      	movs	r3, #6
 8003766:	e01a      	b.n	800379e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "vrs1") == 0) { // s1 = start
 8003768:	4915      	ldr	r1, [pc, #84]	; (80037c0 <xtend_parse_dma_command+0xc8>)
 800376a:	480f      	ldr	r0, [pc, #60]	; (80037a8 <xtend_parse_dma_command+0xb0>)
 800376c:	f7fc fd40 	bl	80001f0 <strcmp>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <xtend_parse_dma_command+0x82>
		return VR_REC_START;
 8003776:	2307      	movs	r3, #7
 8003778:	e011      	b.n	800379e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "vrs2") == 0) { // s2 = stop
 800377a:	4912      	ldr	r1, [pc, #72]	; (80037c4 <xtend_parse_dma_command+0xcc>)
 800377c:	480a      	ldr	r0, [pc, #40]	; (80037a8 <xtend_parse_dma_command+0xb0>)
 800377e:	f7fc fd37 	bl	80001f0 <strcmp>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <xtend_parse_dma_command+0x94>
		return VR_REC_STOP;
 8003788:	2308      	movs	r3, #8
 800378a:	e008      	b.n	800379e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "vrof") == 0) { // vr power off
 800378c:	490e      	ldr	r1, [pc, #56]	; (80037c8 <xtend_parse_dma_command+0xd0>)
 800378e:	4806      	ldr	r0, [pc, #24]	; (80037a8 <xtend_parse_dma_command+0xb0>)
 8003790:	f7fc fd2e 	bl	80001f0 <strcmp>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <xtend_parse_dma_command+0xa6>
		return VR_POWER_OFF;
 800379a:	2309      	movs	r3, #9
 800379c:	e7ff      	b.n	800379e <xtend_parse_dma_command+0xa6>
	}

	// all other commands are invalid, ignore.
}
 800379e:	4618      	mov	r0, r3
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	080144b4 	.word	0x080144b4
 80037a8:	20000710 	.word	0x20000710
 80037ac:	080144bc 	.word	0x080144bc
 80037b0:	080144c4 	.word	0x080144c4
 80037b4:	080144cc 	.word	0x080144cc
 80037b8:	080144d4 	.word	0x080144d4
 80037bc:	080144dc 	.word	0x080144dc
 80037c0:	080144e4 	.word	0x080144e4
 80037c4:	080144ec 	.word	0x080144ec
 80037c8:	080144f4 	.word	0x080144f4

080037cc <execute_parsed_command>:

void execute_parsed_command(radio_command cmd) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	71fb      	strb	r3, [r7, #7]
	// TODO: decide whether we want to send an ack back to ground station, maybe as special event message
	switch (cmd) {
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	3b01      	subs	r3, #1
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d844      	bhi.n	8003868 <execute_parsed_command+0x9c>
 80037de:	a201      	add	r2, pc, #4	; (adr r2, 80037e4 <execute_parsed_command+0x18>)
 80037e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e4:	08003809 	.word	0x08003809
 80037e8:	0800381d 	.word	0x0800381d
 80037ec:	08003831 	.word	0x08003831
 80037f0:	08003845 	.word	0x08003845
 80037f4:	0800384b 	.word	0x0800384b
 80037f8:	08003851 	.word	0x08003851
 80037fc:	08003857 	.word	0x08003857
 8003800:	0800385d 	.word	0x0800385d
 8003804:	08003863 	.word	0x08003863
	case LAUNCH:
		rocket_launch();
 8003808:	f000 f83c 	bl	8003884 <rocket_launch>
		HAL_UART_Transmit(&huart8, "launch\r\n", 8, HAL_MAX_DELAY);
 800380c:	f04f 33ff 	mov.w	r3, #4294967295
 8003810:	2208      	movs	r2, #8
 8003812:	4918      	ldr	r1, [pc, #96]	; (8003874 <execute_parsed_command+0xa8>)
 8003814:	4818      	ldr	r0, [pc, #96]	; (8003878 <execute_parsed_command+0xac>)
 8003816:	f006 f9c8 	bl	8009baa <HAL_UART_Transmit>
		break;
 800381a:	e026      	b.n	800386a <execute_parsed_command+0x9e>

	case ARM_PROP:
		arming_propulsion();
 800381c:	f000 f84c 	bl	80038b8 <arming_propulsion>
		HAL_UART_Transmit(&huart8, "arm pr\r\n", 8, HAL_MAX_DELAY);
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	2208      	movs	r2, #8
 8003826:	4915      	ldr	r1, [pc, #84]	; (800387c <execute_parsed_command+0xb0>)
 8003828:	4813      	ldr	r0, [pc, #76]	; (8003878 <execute_parsed_command+0xac>)
 800382a:	f006 f9be 	bl	8009baa <HAL_UART_Transmit>
		break;
 800382e:	e01c      	b.n	800386a <execute_parsed_command+0x9e>

	case ARM_RCOV:
		arming_recovery();
 8003830:	f000 f84e 	bl	80038d0 <arming_recovery>
		HAL_UART_Transmit(&huart8, "arm rc\r\n", 8, HAL_MAX_DELAY);
 8003834:	f04f 33ff 	mov.w	r3, #4294967295
 8003838:	2208      	movs	r2, #8
 800383a:	4911      	ldr	r1, [pc, #68]	; (8003880 <execute_parsed_command+0xb4>)
 800383c:	480e      	ldr	r0, [pc, #56]	; (8003878 <execute_parsed_command+0xac>)
 800383e:	f006 f9b4 	bl	8009baa <HAL_UART_Transmit>
		break;
 8003842:	e012      	b.n	800386a <execute_parsed_command+0x9e>

	case DISARM_PROP:
		disarm_propulsion();
 8003844:	f000 f850 	bl	80038e8 <disarm_propulsion>
		break;
 8003848:	e00f      	b.n	800386a <execute_parsed_command+0x9e>

	case DISARM_RCOV:
		disarm_recovery();
 800384a:	f000 f867 	bl	800391c <disarm_recovery>
		break;
 800384e:	e00c      	b.n	800386a <execute_parsed_command+0x9e>

	case VR_POWER_ON:	// TODO: figure out how to make non-blocking
		VR_Power_On();
 8003850:	f001 f9fa 	bl	8004c48 <VR_Power_On>
		break;
 8003854:	e009      	b.n	800386a <execute_parsed_command+0x9e>

	case VR_REC_START:	// TODO: figure out how to make non-blocking
		VR_Start_Rec();
 8003856:	f001 fa13 	bl	8004c80 <VR_Start_Rec>
		break;
 800385a:	e006      	b.n	800386a <execute_parsed_command+0x9e>

	case VR_REC_STOP:	// TODO: figure out how to make non-blocking
		VR_Stop_Rec();
 800385c:	f001 fa36 	bl	8004ccc <VR_Stop_Rec>
		break;
 8003860:	e003      	b.n	800386a <execute_parsed_command+0x9e>

	case VR_POWER_OFF:
		VR_Power_Off();
 8003862:	f001 fa01 	bl	8004c68 <VR_Power_Off>
		break;
 8003866:	e000      	b.n	800386a <execute_parsed_command+0x9e>

	default:
		break;
 8003868:	bf00      	nop
	}
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	080144fc 	.word	0x080144fc
 8003878:	20001590 	.word	0x20001590
 800387c:	08014508 	.word	0x08014508
 8003880:	08014514 	.word	0x08014514

08003884 <rocket_launch>:

void rocket_launch(void) {
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
	// just to be safe, set arming pin high to ensure pyro channels are armed
	HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, SET);
 8003888:	2201      	movs	r2, #1
 800388a:	2102      	movs	r1, #2
 800388c:	4808      	ldr	r0, [pc, #32]	; (80038b0 <rocket_launch+0x2c>)
 800388e:	f002 fbcb 	bl	8006028 <HAL_GPIO_WritePin>

	// open valve by firing the prop pyro ejection channels
	HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, SET);
 8003892:	2201      	movs	r2, #1
 8003894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003898:	4806      	ldr	r0, [pc, #24]	; (80038b4 <rocket_launch+0x30>)
 800389a:	f002 fbc5 	bl	8006028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, SET);
 800389e:	2201      	movs	r2, #1
 80038a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038a4:	4803      	ldr	r0, [pc, #12]	; (80038b4 <rocket_launch+0x30>)
 80038a6:	f002 fbbf 	bl	8006028 <HAL_GPIO_WritePin>
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40021800 	.word	0x40021800
 80038b4:	40021400 	.word	0x40021400

080038b8 <arming_propulsion>:

void arming_propulsion(void) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, SET);
 80038bc:	2201      	movs	r2, #1
 80038be:	2102      	movs	r1, #2
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <arming_propulsion+0x14>)
 80038c2:	f002 fbb1 	bl	8006028 <HAL_GPIO_WritePin>
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40021800 	.word	0x40021800

080038d0 <arming_recovery>:

void arming_recovery(void) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, SET);
 80038d4:	2201      	movs	r2, #1
 80038d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038da:	4802      	ldr	r0, [pc, #8]	; (80038e4 <arming_recovery+0x14>)
 80038dc:	f002 fba4 	bl	8006028 <HAL_GPIO_WritePin>
}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021800 	.word	0x40021800

080038e8 <disarm_propulsion>:

void disarm_propulsion(void) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2102      	movs	r1, #2
 80038f0:	4808      	ldr	r0, [pc, #32]	; (8003914 <disarm_propulsion+0x2c>)
 80038f2:	f002 fb99 	bl	8006028 <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 80038f6:	2200      	movs	r2, #0
 80038f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038fc:	4806      	ldr	r0, [pc, #24]	; (8003918 <disarm_propulsion+0x30>)
 80038fe:	f002 fb93 	bl	8006028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8003902:	2200      	movs	r2, #0
 8003904:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003908:	4803      	ldr	r0, [pc, #12]	; (8003918 <disarm_propulsion+0x30>)
 800390a:	f002 fb8d 	bl	8006028 <HAL_GPIO_WritePin>
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40021800 	.word	0x40021800
 8003918:	40021400 	.word	0x40021400

0800391c <disarm_recovery>:

void disarm_recovery(void) {
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8003920:	2200      	movs	r2, #0
 8003922:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003926:	4808      	ldr	r0, [pc, #32]	; (8003948 <disarm_recovery+0x2c>)
 8003928:	f002 fb7e 	bl	8006028 <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 800392c:	2200      	movs	r2, #0
 800392e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003932:	4805      	ldr	r0, [pc, #20]	; (8003948 <disarm_recovery+0x2c>)
 8003934:	f002 fb78 	bl	8006028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8003938:	2200      	movs	r2, #0
 800393a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800393e:	4802      	ldr	r0, [pc, #8]	; (8003948 <disarm_recovery+0x2c>)
 8003940:	f002 fb72 	bl	8006028 <HAL_GPIO_WritePin>
}
 8003944:	bf00      	nop
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021800 	.word	0x40021800

0800394c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003960:	2300      	movs	r3, #0
 8003962:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003964:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <MX_RTC_Init+0xac>)
 8003966:	4a25      	ldr	r2, [pc, #148]	; (80039fc <MX_RTC_Init+0xb0>)
 8003968:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800396a:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <MX_RTC_Init+0xac>)
 800396c:	2200      	movs	r2, #0
 800396e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003970:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <MX_RTC_Init+0xac>)
 8003972:	227f      	movs	r2, #127	; 0x7f
 8003974:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <MX_RTC_Init+0xac>)
 8003978:	22ff      	movs	r2, #255	; 0xff
 800397a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800397c:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <MX_RTC_Init+0xac>)
 800397e:	2200      	movs	r2, #0
 8003980:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <MX_RTC_Init+0xac>)
 8003984:	2200      	movs	r2, #0
 8003986:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <MX_RTC_Init+0xac>)
 800398a:	2200      	movs	r2, #0
 800398c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800398e:	481a      	ldr	r0, [pc, #104]	; (80039f8 <MX_RTC_Init+0xac>)
 8003990:	f004 f9f8 	bl	8007d84 <HAL_RTC_Init>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800399a:	f7ff fe9f 	bl	80036dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 800399e:	2310      	movs	r3, #16
 80039a0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 80039a2:	2320      	movs	r3, #32
 80039a4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 80039a6:	2330      	movs	r3, #48	; 0x30
 80039a8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80039b2:	1d3b      	adds	r3, r7, #4
 80039b4:	2201      	movs	r2, #1
 80039b6:	4619      	mov	r1, r3
 80039b8:	480f      	ldr	r0, [pc, #60]	; (80039f8 <MX_RTC_Init+0xac>)
 80039ba:	f004 fa74 	bl	8007ea6 <HAL_RTC_SetTime>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80039c4:	f7ff fe8a 	bl	80036dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80039c8:	2301      	movs	r3, #1
 80039ca:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 80039cc:	2302      	movs	r3, #2
 80039ce:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 80039d0:	2312      	movs	r3, #18
 80039d2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 80039d4:	2321      	movs	r3, #33	; 0x21
 80039d6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80039d8:	463b      	mov	r3, r7
 80039da:	2201      	movs	r2, #1
 80039dc:	4619      	mov	r1, r3
 80039de:	4806      	ldr	r0, [pc, #24]	; (80039f8 <MX_RTC_Init+0xac>)
 80039e0:	f004 fb7c 	bl	80080dc <HAL_RTC_SetDate>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80039ea:	f7ff fe77 	bl	80036dc <Error_Handler>
  }

}
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000e78 	.word	0x20000e78
 80039fc:	40002800 	.word	0x40002800

08003a00 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a05      	ldr	r2, [pc, #20]	; (8003a24 <HAL_RTC_MspInit+0x24>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d102      	bne.n	8003a18 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_RTC_MspInit+0x28>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40002800 	.word	0x40002800
 8003a28:	42470e3c 	.word	0x42470e3c

08003a2c <myprintf>:
extern FRESULT fres;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8003a2c:	b40f      	push	{r0, r1, r2, r3}
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8003a34:	f107 0314 	add.w	r3, r7, #20
 8003a38:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a42:	4805      	ldr	r0, [pc, #20]	; (8003a58 <myprintf+0x2c>)
 8003a44:	f00c fb00 	bl	8010048 <vsniprintf>
  va_end(args);

//  int len = strlen(buffer);
//  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, len, -1);

}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a52:	b004      	add	sp, #16
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000394 	.word	0x20000394

08003a5c <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	; 0x28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4932      	ldr	r1, [pc, #200]	; (8003b34 <sd_init_dynamic_filename+0xd8>)
 8003a6c:	4832      	ldr	r0, [pc, #200]	; (8003b38 <sd_init_dynamic_filename+0xdc>)
 8003a6e:	f009 fc6b 	bl	800d348 <f_mount>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8003a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8003a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a84:	4619      	mov	r1, r3
 8003a86:	482d      	ldr	r0, [pc, #180]	; (8003b3c <sd_init_dynamic_filename+0xe0>)
 8003a88:	f7ff ffd0 	bl	8003a2c <myprintf>
		return fres;
 8003a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a90:	e04b      	b.n	8003b2a <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8003a96:	f107 0320 	add.w	r3, r7, #32
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68f9      	ldr	r1, [r7, #12]
 8003a9e:	4825      	ldr	r0, [pc, #148]	; (8003b34 <sd_init_dynamic_filename+0xd8>)
 8003aa0:	f000 f89c 	bl	8003bdc <scan_files>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	f107 0310 	add.w	r3, r7, #16
 8003ab2:	4923      	ldr	r1, [pc, #140]	; (8003b40 <sd_init_dynamic_filename+0xe4>)
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f00b fb25 	bl	800f104 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8003aba:	f107 0310 	add.w	r3, r7, #16
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f00b fbbd 	bl	800f240 <strcpy>
 8003ac6:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	221a      	movs	r2, #26
 8003ace:	4619      	mov	r1, r3
 8003ad0:	481c      	ldr	r0, [pc, #112]	; (8003b44 <sd_init_dynamic_filename+0xe8>)
 8003ad2:	f009 fc7f 	bl	800d3d4 <f_open>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8003adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d11a      	bne.n	8003b1a <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8003ae4:	4818      	ldr	r0, [pc, #96]	; (8003b48 <sd_init_dynamic_filename+0xec>)
 8003ae6:	f7ff ffa1 	bl	8003a2c <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8003aea:	4b16      	ldr	r3, [pc, #88]	; (8003b44 <sd_init_dynamic_filename+0xe8>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	4619      	mov	r1, r3
 8003af0:	4814      	ldr	r0, [pc, #80]	; (8003b44 <sd_init_dynamic_filename+0xe8>)
 8003af2:	f00a f84a 	bl	800db8a <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8003af6:	4915      	ldr	r1, [pc, #84]	; (8003b4c <sd_init_dynamic_filename+0xf0>)
 8003af8:	4815      	ldr	r0, [pc, #84]	; (8003b50 <sd_init_dynamic_filename+0xf4>)
 8003afa:	f00b fb03 	bl	800f104 <siprintf>
	sd_write(&fil, msg_buffer);
 8003afe:	4914      	ldr	r1, [pc, #80]	; (8003b50 <sd_init_dynamic_filename+0xf4>)
 8003b00:	4810      	ldr	r0, [pc, #64]	; (8003b44 <sd_init_dynamic_filename+0xe8>)
 8003b02:	f000 f841 	bl	8003b88 <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	480e      	ldr	r0, [pc, #56]	; (8003b44 <sd_init_dynamic_filename+0xe8>)
 8003b0a:	f000 f83d 	bl	8003b88 <sd_write>
	f_close(&fil);
 8003b0e:	480d      	ldr	r0, [pc, #52]	; (8003b44 <sd_init_dynamic_filename+0xe8>)
 8003b10:	f00a f811 	bl	800db36 <f_close>

	return fres;
 8003b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b18:	e007      	b.n	8003b2a <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8003b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b1e:	4619      	mov	r1, r3
 8003b20:	480c      	ldr	r0, [pc, #48]	; (8003b54 <sd_init_dynamic_filename+0xf8>)
 8003b22:	f7ff ff83 	bl	8003a2c <myprintf>
		return fres;
 8003b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3728      	adds	r7, #40	; 0x28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	08014520 	.word	0x08014520
 8003b38:	2000071c 	.word	0x2000071c
 8003b3c:	08014524 	.word	0x08014524
 8003b40:	080145a0 	.word	0x080145a0
 8003b44:	20000c48 	.word	0x20000c48
 8003b48:	0801453c 	.word	0x0801453c
 8003b4c:	08014580 	.word	0x08014580
 8003b50:	20000e98 	.word	0x20000e98
 8003b54:	0801456c 	.word	0x0801456c

08003b58 <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8003b60:	2212      	movs	r2, #18
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4807      	ldr	r0, [pc, #28]	; (8003b84 <sd_open_file+0x2c>)
 8003b66:	f009 fc35 	bl	800d3d4 <f_open>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <sd_open_file+0x2c>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	4619      	mov	r1, r3
 8003b74:	4803      	ldr	r0, [pc, #12]	; (8003b84 <sd_open_file+0x2c>)
 8003b76:	f00a f808 	bl	800db8a <f_lseek>

	return fres;
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000c48 	.word	0x20000c48

08003b88 <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8003b92:	6838      	ldr	r0, [r7, #0]
 8003b94:	f7fc fb36 	bl	8000204 <strlen>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f107 0308 	add.w	r3, r7, #8
 8003b9e:	6839      	ldr	r1, [r7, #0]
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f009 fdd5 	bl	800d750 <f_write>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d107      	bne.n	8003bc0 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4807      	ldr	r0, [pc, #28]	; (8003bd4 <sd_write+0x4c>)
 8003bb6:	f7ff ff39 	bl	8003a2c <myprintf>
		return bytesWrote;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	b25b      	sxtb	r3, r3
 8003bbe:	e004      	b.n	8003bca <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8003bc0:	4805      	ldr	r0, [pc, #20]	; (8003bd8 <sd_write+0x50>)
 8003bc2:	f7ff ff33 	bl	8003a2c <myprintf>
		return -1;
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	080145ac 	.word	0x080145ac
 8003bd8:	080145d0 	.word	0x080145d0

08003bdc <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8003bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bde:	b099      	sub	sp, #100	; 0x64
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	466b      	mov	r3, sp
 8003bea:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8003bec:	68b8      	ldr	r0, [r7, #8]
 8003bee:	f7fc fb09 	bl	8000204 <strlen>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8003bf8:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8003bfc:	4623      	mov	r3, r4
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c02:	b2e0      	uxtb	r0, r4
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	00cb      	lsls	r3, r1, #3
 8003c12:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003c16:	00c2      	lsls	r2, r0, #3
 8003c18:	b2e0      	uxtb	r0, r4
 8003c1a:	f04f 0100 	mov.w	r1, #0
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	00cb      	lsls	r3, r1, #3
 8003c28:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003c2c:	00c2      	lsls	r2, r0, #3
 8003c2e:	4623      	mov	r3, r4
 8003c30:	3307      	adds	r3, #7
 8003c32:	08db      	lsrs	r3, r3, #3
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	ebad 0d03 	sub.w	sp, sp, r3
 8003c3a:	466b      	mov	r3, sp
 8003c3c:	3300      	adds	r3, #0
 8003c3e:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8003c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c42:	4619      	mov	r1, r3
 8003c44:	68b8      	ldr	r0, [r7, #8]
 8003c46:	f000 f8ff 	bl	8003e48 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8003c54:	f107 0318 	add.w	r3, r7, #24
 8003c58:	68f9      	ldr	r1, [r7, #12]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f00a f99e 	bl	800df9c <f_opendir>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8003c66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d16c      	bne.n	8003d48 <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003c6e:	f107 0318 	add.w	r3, r7, #24
 8003c72:	4939      	ldr	r1, [pc, #228]	; (8003d58 <scan_files+0x17c>)
 8003c74:	4618      	mov	r0, r3
 8003c76:	f00a fa2a 	bl	800e0ce <f_readdir>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8003c80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d15a      	bne.n	8003d3e <scan_files+0x162>
 8003c88:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <scan_files+0x17c>)
 8003c8a:	7a5b      	ldrb	r3, [r3, #9]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d056      	beq.n	8003d3e <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8003c90:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <scan_files+0x17c>)
 8003c92:	7a1b      	ldrb	r3, [r3, #8]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d14e      	bne.n	8003d3a <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8003c9c:	466b      	mov	r3, sp
 8003c9e:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8003ca0:	482e      	ldr	r0, [pc, #184]	; (8003d5c <scan_files+0x180>)
 8003ca2:	f7fc faaf 	bl	8000204 <strlen>
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	4623      	mov	r3, r4
 8003caa:	3b01      	subs	r3, #1
 8003cac:	653b      	str	r3, [r7, #80]	; 0x50
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f04f 0100 	mov.w	r1, #0
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	00cb      	lsls	r3, r1, #3
 8003cbe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003cc2:	00c2      	lsls	r2, r0, #3
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	00cb      	lsls	r3, r1, #3
 8003cd4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003cd8:	00c2      	lsls	r2, r0, #3
 8003cda:	1de3      	adds	r3, r4, #7
 8003cdc:	08db      	lsrs	r3, r3, #3
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	ebad 0d03 	sub.w	sp, sp, r3
 8003ce4:	466b      	mov	r3, sp
 8003ce6:	3300      	adds	r3, #0
 8003ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8003cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cec:	4619      	mov	r1, r3
 8003cee:	481b      	ldr	r0, [pc, #108]	; (8003d5c <scan_files+0x180>)
 8003cf0:	f000 f8aa 	bl	8003e48 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8003cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4817      	ldr	r0, [pc, #92]	; (8003d5c <scan_files+0x180>)
 8003cfe:	f00b faa7 	bl	800f250 <strncmp>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8003d08:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d112      	bne.n	8003d36 <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8003d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d12:	f107 0214 	add.w	r2, r7, #20
 8003d16:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f820 	bl	8003d60 <extract_filename_suffix>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d202      	bcs.n	8003d36 <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	46b5      	mov	sp, r6
 8003d38:	e799      	b.n	8003c6e <scan_files+0x92>
            	continue; // don't enter directory
 8003d3a:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003d3c:	e797      	b.n	8003c6e <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8003d3e:	f107 0318 	add.w	r3, r7, #24
 8003d42:	4618      	mov	r0, r3
 8003d44:	f00a f99d 	bl	800e082 <f_closedir>
    }

    return res;
 8003d48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d4c:	46ad      	mov	sp, r5
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3764      	adds	r7, #100	; 0x64
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000494 	.word	0x20000494
 8003d5c:	2000049d 	.word	0x2000049d

08003d60 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8003d60:	b5b0      	push	{r4, r5, r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	72fb      	strb	r3, [r7, #11]
 8003d6e:	466b      	mov	r3, sp
 8003d70:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7fc fa46 	bl	8000204 <strlen>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8003d80:	7f7c      	ldrb	r4, [r7, #29]
 8003d82:	4623      	mov	r3, r4
 8003d84:	3b01      	subs	r3, #1
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	b2e0      	uxtb	r0, r4
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	00cb      	lsls	r3, r1, #3
 8003d98:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003d9c:	00c2      	lsls	r2, r0, #3
 8003d9e:	b2e0      	uxtb	r0, r4
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	00cb      	lsls	r3, r1, #3
 8003dae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003db2:	00c2      	lsls	r2, r0, #3
 8003db4:	4623      	mov	r3, r4
 8003db6:	3307      	adds	r3, #7
 8003db8:	08db      	lsrs	r3, r3, #3
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	ebad 0d03 	sub.w	sp, sp, r3
 8003dc0:	466b      	mov	r3, sp
 8003dc2:	3300      	adds	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	77fb      	strb	r3, [r7, #31]
 8003dca:	e014      	b.n	8003df6 <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8003dcc:	7afb      	ldrb	r3, [r7, #11]
 8003dce:	1e5a      	subs	r2, r3, #1
 8003dd0:	7ffb      	ldrb	r3, [r7, #31]
 8003dd2:	441a      	add	r2, r3
 8003dd4:	7fbb      	ldrb	r3, [r7, #30]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	da11      	bge.n	8003e00 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8003ddc:	7afa      	ldrb	r2, [r7, #11]
 8003dde:	7ffb      	ldrb	r3, [r7, #31]
 8003de0:	4413      	add	r3, r2
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	441a      	add	r2, r3
 8003de8:	7ffb      	ldrb	r3, [r7, #31]
 8003dea:	7811      	ldrb	r1, [r2, #0]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8003df0:	7ffb      	ldrb	r3, [r7, #31]
 8003df2:	3301      	adds	r3, #1
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	7ffa      	ldrb	r2, [r7, #31]
 8003df8:	7f7b      	ldrb	r3, [r7, #29]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d3e6      	bcc.n	8003dcc <extract_filename_suffix+0x6c>
 8003dfe:	e000      	b.n	8003e02 <extract_filename_suffix+0xa2>
		}
		else break;
 8003e00:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f107 0110 	add.w	r1, r7, #16
 8003e08:	220a      	movs	r2, #10
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f00c f8e6 	bl	800ffdc <strtol>
 8003e10:	4603      	mov	r3, r0
 8003e12:	461a      	mov	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d00a      	beq.n	8003e36 <extract_filename_suffix+0xd6>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e28:	d005      	beq.n	8003e36 <extract_filename_suffix+0xd6>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <extract_filename_suffix+0xda>
	{
		return 1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <extract_filename_suffix+0xdc>
	}

	return 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	46ad      	mov	sp, r5
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003e48 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8003e48:	b590      	push	{r4, r7, lr}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]
 8003e56:	e019      	b.n	8003e8c <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	73bb      	strb	r3, [r7, #14]
 8003e62:	7bbb      	ldrb	r3, [r7, #14]
 8003e64:	3301      	adds	r3, #1
 8003e66:	4a0f      	ldr	r2, [pc, #60]	; (8003ea4 <str2upper+0x5c>)
 8003e68:	4413      	add	r3, r2
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d102      	bne.n	8003e7a <str2upper+0x32>
 8003e74:	7bbb      	ldrb	r3, [r7, #14]
 8003e76:	3b20      	subs	r3, #32
 8003e78:	e000      	b.n	8003e7c <str2upper+0x34>
 8003e7a:	7bbb      	ldrb	r3, [r7, #14]
 8003e7c:	7bfa      	ldrb	r2, [r7, #15]
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	440a      	add	r2, r1
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	7bfc      	ldrb	r4, [r7, #15]
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fc f9b8 	bl	8000204 <strlen>
 8003e94:	4603      	mov	r3, r0
 8003e96:	429c      	cmp	r4, r3
 8003e98:	d3de      	bcc.n	8003e58 <str2upper+0x10>
	}
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd90      	pop	{r4, r7, pc}
 8003ea4:	08014758 	.word	0x08014758

08003ea8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003eac:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <MX_SPI2_Init+0x64>)
 8003eae:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <MX_SPI2_Init+0x68>)
 8003eb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003eb2:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <MX_SPI2_Init+0x64>)
 8003eb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003eb8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <MX_SPI2_Init+0x64>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ec0:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <MX_SPI2_Init+0x64>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ec6:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <MX_SPI2_Init+0x64>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <MX_SPI2_Init+0x64>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <MX_SPI2_Init+0x64>)
 8003ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ed8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eda:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <MX_SPI2_Init+0x64>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <MX_SPI2_Init+0x64>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ee6:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <MX_SPI2_Init+0x64>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eec:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <MX_SPI2_Init+0x64>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <MX_SPI2_Init+0x64>)
 8003ef4:	220a      	movs	r2, #10
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003ef8:	4804      	ldr	r0, [pc, #16]	; (8003f0c <MX_SPI2_Init+0x64>)
 8003efa:	f004 fa75 	bl	80083e8 <HAL_SPI_Init>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003f04:	f7ff fbea 	bl	80036dc <Error_Handler>
  }

}
 8003f08:	bf00      	nop
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20001280 	.word	0x20001280
 8003f10:	40003800 	.word	0x40003800

08003f14 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8003f18:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <MX_SPI4_Init+0x64>)
 8003f1a:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <MX_SPI4_Init+0x68>)
 8003f1c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003f1e:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <MX_SPI4_Init+0x64>)
 8003f20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f24:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003f26:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <MX_SPI4_Init+0x64>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f2c:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <MX_SPI4_Init+0x64>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f32:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <MX_SPI4_Init+0x64>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <MX_SPI4_Init+0x64>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <MX_SPI4_Init+0x64>)
 8003f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f44:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <MX_SPI4_Init+0x64>)
 8003f48:	2228      	movs	r2, #40	; 0x28
 8003f4a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <MX_SPI4_Init+0x64>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <MX_SPI4_Init+0x64>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <MX_SPI4_Init+0x64>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003f5e:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <MX_SPI4_Init+0x64>)
 8003f60:	220a      	movs	r2, #10
 8003f62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003f64:	4804      	ldr	r0, [pc, #16]	; (8003f78 <MX_SPI4_Init+0x64>)
 8003f66:	f004 fa3f 	bl	80083e8 <HAL_SPI_Init>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003f70:	f7ff fbb4 	bl	80036dc <Error_Handler>
  }

}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	200004f4 	.word	0x200004f4
 8003f7c:	40013400 	.word	0x40013400

08003f80 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8003f84:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <MX_SPI5_Init+0x64>)
 8003f86:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <MX_SPI5_Init+0x68>)
 8003f88:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003f8a:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <MX_SPI5_Init+0x64>)
 8003f8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f90:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003f92:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <MX_SPI5_Init+0x64>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <MX_SPI5_Init+0x64>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f9e:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <MX_SPI5_Init+0x64>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <MX_SPI5_Init+0x64>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <MX_SPI5_Init+0x64>)
 8003fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <MX_SPI5_Init+0x64>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <MX_SPI5_Init+0x64>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <MX_SPI5_Init+0x64>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc4:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <MX_SPI5_Init+0x64>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <MX_SPI5_Init+0x64>)
 8003fcc:	220a      	movs	r2, #10
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003fd0:	4804      	ldr	r0, [pc, #16]	; (8003fe4 <MX_SPI5_Init+0x64>)
 8003fd2:	f004 fa09 	bl	80083e8 <HAL_SPI_Init>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003fdc:	f7ff fb7e 	bl	80036dc <Error_Handler>
  }

}
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	200012d8 	.word	0x200012d8
 8003fe8:	40015000 	.word	0x40015000

08003fec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08e      	sub	sp, #56	; 0x38
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a4c      	ldr	r2, [pc, #304]	; (800413c <HAL_SPI_MspInit+0x150>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d12d      	bne.n	800406a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	623b      	str	r3, [r7, #32]
 8004012:	4b4b      	ldr	r3, [pc, #300]	; (8004140 <HAL_SPI_MspInit+0x154>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	4a4a      	ldr	r2, [pc, #296]	; (8004140 <HAL_SPI_MspInit+0x154>)
 8004018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800401c:	6413      	str	r3, [r2, #64]	; 0x40
 800401e:	4b48      	ldr	r3, [pc, #288]	; (8004140 <HAL_SPI_MspInit+0x154>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	4b44      	ldr	r3, [pc, #272]	; (8004140 <HAL_SPI_MspInit+0x154>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	4a43      	ldr	r2, [pc, #268]	; (8004140 <HAL_SPI_MspInit+0x154>)
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	6313      	str	r3, [r2, #48]	; 0x30
 800403a:	4b41      	ldr	r3, [pc, #260]	; (8004140 <HAL_SPI_MspInit+0x154>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	61fb      	str	r3, [r7, #28]
 8004044:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004046:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404c:	2302      	movs	r3, #2
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004050:	2301      	movs	r3, #1
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004054:	2303      	movs	r3, #3
 8004056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004058:	2305      	movs	r3, #5
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800405c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004060:	4619      	mov	r1, r3
 8004062:	4838      	ldr	r0, [pc, #224]	; (8004144 <HAL_SPI_MspInit+0x158>)
 8004064:	f001 fe1c 	bl	8005ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004068:	e064      	b.n	8004134 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a36      	ldr	r2, [pc, #216]	; (8004148 <HAL_SPI_MspInit+0x15c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d12d      	bne.n	80040d0 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004074:	2300      	movs	r3, #0
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	4b31      	ldr	r3, [pc, #196]	; (8004140 <HAL_SPI_MspInit+0x154>)
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	4a30      	ldr	r2, [pc, #192]	; (8004140 <HAL_SPI_MspInit+0x154>)
 800407e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004082:	6453      	str	r3, [r2, #68]	; 0x44
 8004084:	4b2e      	ldr	r3, [pc, #184]	; (8004140 <HAL_SPI_MspInit+0x154>)
 8004086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	4b2a      	ldr	r3, [pc, #168]	; (8004140 <HAL_SPI_MspInit+0x154>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	4a29      	ldr	r2, [pc, #164]	; (8004140 <HAL_SPI_MspInit+0x154>)
 800409a:	f043 0310 	orr.w	r3, r3, #16
 800409e:	6313      	str	r3, [r2, #48]	; 0x30
 80040a0:	4b27      	ldr	r3, [pc, #156]	; (8004140 <HAL_SPI_MspInit+0x154>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80040ac:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b2:	2302      	movs	r3, #2
 80040b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ba:	2303      	movs	r3, #3
 80040bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80040be:	2305      	movs	r3, #5
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c6:	4619      	mov	r1, r3
 80040c8:	4820      	ldr	r0, [pc, #128]	; (800414c <HAL_SPI_MspInit+0x160>)
 80040ca:	f001 fde9 	bl	8005ca0 <HAL_GPIO_Init>
}
 80040ce:	e031      	b.n	8004134 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <HAL_SPI_MspInit+0x164>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d12c      	bne.n	8004134 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	4b18      	ldr	r3, [pc, #96]	; (8004140 <HAL_SPI_MspInit+0x154>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	4a17      	ldr	r2, [pc, #92]	; (8004140 <HAL_SPI_MspInit+0x154>)
 80040e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ea:	4b15      	ldr	r3, [pc, #84]	; (8004140 <HAL_SPI_MspInit+0x154>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	4b11      	ldr	r3, [pc, #68]	; (8004140 <HAL_SPI_MspInit+0x154>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	4a10      	ldr	r2, [pc, #64]	; (8004140 <HAL_SPI_MspInit+0x154>)
 8004100:	f043 0320 	orr.w	r3, r3, #32
 8004104:	6313      	str	r3, [r2, #48]	; 0x30
 8004106:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <HAL_SPI_MspInit+0x154>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004112:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004118:	2302      	movs	r3, #2
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800411c:	2301      	movs	r3, #1
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004120:	2303      	movs	r3, #3
 8004122:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004124:	2305      	movs	r3, #5
 8004126:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800412c:	4619      	mov	r1, r3
 800412e:	4809      	ldr	r0, [pc, #36]	; (8004154 <HAL_SPI_MspInit+0x168>)
 8004130:	f001 fdb6 	bl	8005ca0 <HAL_GPIO_Init>
}
 8004134:	bf00      	nop
 8004136:	3738      	adds	r7, #56	; 0x38
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40003800 	.word	0x40003800
 8004140:	40023800 	.word	0x40023800
 8004144:	40020400 	.word	0x40020400
 8004148:	40013400 	.word	0x40013400
 800414c:	40021000 	.word	0x40021000
 8004150:	40015000 	.word	0x40015000
 8004154:	40021400 	.word	0x40021400

08004158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <HAL_MspInit+0x4c>)
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	4a0f      	ldr	r2, [pc, #60]	; (80041a4 <HAL_MspInit+0x4c>)
 8004168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800416c:	6453      	str	r3, [r2, #68]	; 0x44
 800416e:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <HAL_MspInit+0x4c>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <HAL_MspInit+0x4c>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <HAL_MspInit+0x4c>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <HAL_MspInit+0x4c>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800

080041a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ba:	e7fe      	b.n	80041ba <HardFault_Handler+0x4>

080041bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041c0:	e7fe      	b.n	80041c0 <MemManage_Handler+0x4>

080041c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041c6:	e7fe      	b.n	80041c6 <BusFault_Handler+0x4>

080041c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041cc:	e7fe      	b.n	80041cc <UsageFault_Handler+0x4>

080041ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041ea:	b480      	push	{r7}
 80041ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041ee:	bf00      	nop
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041fc:	f000 fdf6 	bl	8004dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}

08004204 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004208:	2001      	movs	r0, #1
 800420a:	f001 ff41 	bl	8006090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}

08004212 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004216:	2010      	movs	r0, #16
 8004218:	f001 ff3a 	bl	8006090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800421c:	bf00      	nop
 800421e:	bd80      	pop	{r7, pc}

08004220 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004224:	4802      	ldr	r0, [pc, #8]	; (8004230 <DMA1_Stream1_IRQHandler+0x10>)
 8004226:	f001 fad1 	bl	80057cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20001490 	.word	0x20001490

08004234 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004238:	4802      	ldr	r0, [pc, #8]	; (8004244 <DMA1_Stream3_IRQHandler+0x10>)
 800423a:	f001 fac7 	bl	80057cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20001530 	.word	0x20001530

08004248 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800424c:	4802      	ldr	r0, [pc, #8]	; (8004258 <TIM3_IRQHandler+0x10>)
 800424e:	f004 fe05 	bl	8008e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	200013b0 	.word	0x200013b0

0800425c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004260:	4802      	ldr	r0, [pc, #8]	; (800426c <USART3_IRQHandler+0x10>)
 8004262:	f005 fe27 	bl	8009eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	200014f0 	.word	0x200014f0

08004270 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004274:	4802      	ldr	r0, [pc, #8]	; (8004280 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004276:	f004 fdf1 	bl	8008e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20001330 	.word	0x20001330

08004284 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004288:	4802      	ldr	r0, [pc, #8]	; (8004294 <DMA2_Stream0_IRQHandler+0x10>)
 800428a:	f001 fa9f 	bl	80057cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000594 	.word	0x20000594

08004298 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800429c:	4802      	ldr	r0, [pc, #8]	; (80042a8 <DMA2_Stream1_IRQHandler+0x10>)
 800429e:	f001 fa95 	bl	80057cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20001430 	.word	0x20001430

080042ac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80042b0:	4802      	ldr	r0, [pc, #8]	; (80042bc <USART6_IRQHandler+0x10>)
 80042b2:	f005 fdff 	bl	8009eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200015d0 	.word	0x200015d0

080042c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
	return 1;
 80042c4:	2301      	movs	r3, #1
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <_kill>:

int _kill(int pid, int sig)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80042da:	f009 ff91 	bl	800e200 <__errno>
 80042de:	4603      	mov	r3, r0
 80042e0:	2216      	movs	r2, #22
 80042e2:	601a      	str	r2, [r3, #0]
	return -1;
 80042e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <_exit>:

void _exit (int status)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042f8:	f04f 31ff 	mov.w	r1, #4294967295
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff ffe7 	bl	80042d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004302:	e7fe      	b.n	8004302 <_exit+0x12>

08004304 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	e00a      	b.n	800432c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004316:	f3af 8000 	nop.w
 800431a:	4601      	mov	r1, r0
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	60ba      	str	r2, [r7, #8]
 8004322:	b2ca      	uxtb	r2, r1
 8004324:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	3301      	adds	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	429a      	cmp	r2, r3
 8004332:	dbf0      	blt.n	8004316 <_read+0x12>
	}

return len;
 8004334:	687b      	ldr	r3, [r7, #4]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b086      	sub	sp, #24
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	e009      	b.n	8004364 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	60ba      	str	r2, [r7, #8]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	3301      	adds	r3, #1
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	429a      	cmp	r2, r3
 800436a:	dbf1      	blt.n	8004350 <_write+0x12>
	}
	return len;
 800436c:	687b      	ldr	r3, [r7, #4]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <_close>:

int _close(int file)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
	return -1;
 800437e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004382:	4618      	mov	r0, r3
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800439e:	605a      	str	r2, [r3, #4]
	return 0;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <_isatty>:

int _isatty(int file)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
	return 1;
 80043b6:	2301      	movs	r3, #1
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
	return 0;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043e8:	4a14      	ldr	r2, [pc, #80]	; (800443c <_sbrk+0x5c>)
 80043ea:	4b15      	ldr	r3, [pc, #84]	; (8004440 <_sbrk+0x60>)
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043f4:	4b13      	ldr	r3, [pc, #76]	; (8004444 <_sbrk+0x64>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <_sbrk+0x64>)
 80043fe:	4a12      	ldr	r2, [pc, #72]	; (8004448 <_sbrk+0x68>)
 8004400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004402:	4b10      	ldr	r3, [pc, #64]	; (8004444 <_sbrk+0x64>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4413      	add	r3, r2
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	429a      	cmp	r2, r3
 800440e:	d207      	bcs.n	8004420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004410:	f009 fef6 	bl	800e200 <__errno>
 8004414:	4603      	mov	r3, r0
 8004416:	220c      	movs	r2, #12
 8004418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800441a:	f04f 33ff 	mov.w	r3, #4294967295
 800441e:	e009      	b.n	8004434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004420:	4b08      	ldr	r3, [pc, #32]	; (8004444 <_sbrk+0x64>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004426:	4b07      	ldr	r3, [pc, #28]	; (8004444 <_sbrk+0x64>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	4a05      	ldr	r2, [pc, #20]	; (8004444 <_sbrk+0x64>)
 8004430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004432:	68fb      	ldr	r3, [r7, #12]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20030000 	.word	0x20030000
 8004440:	00000400 	.word	0x00000400
 8004444:	200004ac 	.word	0x200004ac
 8004448:	20001a98 	.word	0x20001a98

0800444c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004450:	4b08      	ldr	r3, [pc, #32]	; (8004474 <SystemInit+0x28>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	4a07      	ldr	r2, [pc, #28]	; (8004474 <SystemInit+0x28>)
 8004458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800445c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004460:	4b04      	ldr	r3, [pc, #16]	; (8004474 <SystemInit+0x28>)
 8004462:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004466:	609a      	str	r2, [r3, #8]
#endif
}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	e000ed00 	.word	0xe000ed00

08004478 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08e      	sub	sp, #56	; 0x38
 800447c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800447e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	609a      	str	r2, [r3, #8]
 800448a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800448c:	f107 0320 	add.w	r3, r7, #32
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004496:	1d3b      	adds	r3, r7, #4
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	60da      	str	r2, [r3, #12]
 80044a2:	611a      	str	r2, [r3, #16]
 80044a4:	615a      	str	r2, [r3, #20]
 80044a6:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80044a8:	4b2d      	ldr	r3, [pc, #180]	; (8004560 <MX_TIM2_Init+0xe8>)
 80044aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80044b0:	4b2b      	ldr	r3, [pc, #172]	; (8004560 <MX_TIM2_Init+0xe8>)
 80044b2:	2259      	movs	r2, #89	; 0x59
 80044b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044b6:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <MX_TIM2_Init+0xe8>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800-1;
 80044bc:	4b28      	ldr	r3, [pc, #160]	; (8004560 <MX_TIM2_Init+0xe8>)
 80044be:	f240 321f 	movw	r2, #799	; 0x31f
 80044c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044c4:	4b26      	ldr	r3, [pc, #152]	; (8004560 <MX_TIM2_Init+0xe8>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044ca:	4b25      	ldr	r3, [pc, #148]	; (8004560 <MX_TIM2_Init+0xe8>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044d0:	4823      	ldr	r0, [pc, #140]	; (8004560 <MX_TIM2_Init+0xe8>)
 80044d2:	f004 fba9 	bl	8008c28 <HAL_TIM_Base_Init>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80044dc:	f7ff f8fe 	bl	80036dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ea:	4619      	mov	r1, r3
 80044ec:	481c      	ldr	r0, [pc, #112]	; (8004560 <MX_TIM2_Init+0xe8>)
 80044ee:	f004 fe83 	bl	80091f8 <HAL_TIM_ConfigClockSource>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80044f8:	f7ff f8f0 	bl	80036dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80044fc:	4818      	ldr	r0, [pc, #96]	; (8004560 <MX_TIM2_Init+0xe8>)
 80044fe:	f004 fbe2 	bl	8008cc6 <HAL_TIM_PWM_Init>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004508:	f7ff f8e8 	bl	80036dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800450c:	2320      	movs	r3, #32
 800450e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004510:	2300      	movs	r3, #0
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004514:	f107 0320 	add.w	r3, r7, #32
 8004518:	4619      	mov	r1, r3
 800451a:	4811      	ldr	r0, [pc, #68]	; (8004560 <MX_TIM2_Init+0xe8>)
 800451c:	f005 fa68 	bl	80099f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004526:	f7ff f8d9 	bl	80036dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800452a:	2360      	movs	r3, #96	; 0x60
 800452c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 150;
 800452e:	2396      	movs	r3, #150	; 0x96
 8004530:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800453a:	1d3b      	adds	r3, r7, #4
 800453c:	2208      	movs	r2, #8
 800453e:	4619      	mov	r1, r3
 8004540:	4807      	ldr	r0, [pc, #28]	; (8004560 <MX_TIM2_Init+0xe8>)
 8004542:	f004 fd93 	bl	800906c <HAL_TIM_PWM_ConfigChannel>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800454c:	f7ff f8c6 	bl	80036dc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8004550:	4803      	ldr	r0, [pc, #12]	; (8004560 <MX_TIM2_Init+0xe8>)
 8004552:	f000 f965 	bl	8004820 <HAL_TIM_MspPostInit>

}
 8004556:	bf00      	nop
 8004558:	3738      	adds	r7, #56	; 0x38
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	200013f0 	.word	0x200013f0

08004564 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800456a:	f107 0308 	add.w	r3, r7, #8
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	605a      	str	r2, [r3, #4]
 8004574:	609a      	str	r2, [r3, #8]
 8004576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004578:	463b      	mov	r3, r7
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8004580:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <MX_TIM3_Init+0x94>)
 8004582:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <MX_TIM3_Init+0x98>)
 8004584:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8004586:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <MX_TIM3_Init+0x94>)
 8004588:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800458c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800458e:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <MX_TIM3_Init+0x94>)
 8004590:	2200      	movs	r2, #0
 8004592:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8004594:	4b18      	ldr	r3, [pc, #96]	; (80045f8 <MX_TIM3_Init+0x94>)
 8004596:	f240 32e7 	movw	r2, #999	; 0x3e7
 800459a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800459c:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <MX_TIM3_Init+0x94>)
 800459e:	2200      	movs	r2, #0
 80045a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045a2:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <MX_TIM3_Init+0x94>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80045a8:	4813      	ldr	r0, [pc, #76]	; (80045f8 <MX_TIM3_Init+0x94>)
 80045aa:	f004 fb3d 	bl	8008c28 <HAL_TIM_Base_Init>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80045b4:	f7ff f892 	bl	80036dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80045be:	f107 0308 	add.w	r3, r7, #8
 80045c2:	4619      	mov	r1, r3
 80045c4:	480c      	ldr	r0, [pc, #48]	; (80045f8 <MX_TIM3_Init+0x94>)
 80045c6:	f004 fe17 	bl	80091f8 <HAL_TIM_ConfigClockSource>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80045d0:	f7ff f884 	bl	80036dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045d4:	2300      	movs	r3, #0
 80045d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045d8:	2300      	movs	r3, #0
 80045da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80045dc:	463b      	mov	r3, r7
 80045de:	4619      	mov	r1, r3
 80045e0:	4805      	ldr	r0, [pc, #20]	; (80045f8 <MX_TIM3_Init+0x94>)
 80045e2:	f005 fa05 	bl	80099f0 <HAL_TIMEx_MasterConfigSynchronization>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80045ec:	f7ff f876 	bl	80036dc <Error_Handler>
  }

}
 80045f0:	bf00      	nop
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	200013b0 	.word	0x200013b0
 80045fc:	40000400 	.word	0x40000400

08004600 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004606:	f107 0308 	add.w	r3, r7, #8
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004614:	463b      	mov	r3, r7
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 800461c:	4b1d      	ldr	r3, [pc, #116]	; (8004694 <MX_TIM4_Init+0x94>)
 800461e:	4a1e      	ldr	r2, [pc, #120]	; (8004698 <MX_TIM4_Init+0x98>)
 8004620:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8004622:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <MX_TIM4_Init+0x94>)
 8004624:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8004628:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800462a:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <MX_TIM4_Init+0x94>)
 800462c:	2200      	movs	r2, #0
 800462e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8004630:	4b18      	ldr	r3, [pc, #96]	; (8004694 <MX_TIM4_Init+0x94>)
 8004632:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004636:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004638:	4b16      	ldr	r3, [pc, #88]	; (8004694 <MX_TIM4_Init+0x94>)
 800463a:	2200      	movs	r2, #0
 800463c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800463e:	4b15      	ldr	r3, [pc, #84]	; (8004694 <MX_TIM4_Init+0x94>)
 8004640:	2200      	movs	r2, #0
 8004642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004644:	4813      	ldr	r0, [pc, #76]	; (8004694 <MX_TIM4_Init+0x94>)
 8004646:	f004 faef 	bl	8008c28 <HAL_TIM_Base_Init>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004650:	f7ff f844 	bl	80036dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004658:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800465a:	f107 0308 	add.w	r3, r7, #8
 800465e:	4619      	mov	r1, r3
 8004660:	480c      	ldr	r0, [pc, #48]	; (8004694 <MX_TIM4_Init+0x94>)
 8004662:	f004 fdc9 	bl	80091f8 <HAL_TIM_ConfigClockSource>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800466c:	f7ff f836 	bl	80036dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004670:	2320      	movs	r3, #32
 8004672:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004674:	2300      	movs	r3, #0
 8004676:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004678:	463b      	mov	r3, r7
 800467a:	4619      	mov	r1, r3
 800467c:	4805      	ldr	r0, [pc, #20]	; (8004694 <MX_TIM4_Init+0x94>)
 800467e:	f005 f9b7 	bl	80099f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004688:	f7ff f828 	bl	80036dc <Error_Handler>
  }

}
 800468c:	bf00      	nop
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20001370 	.word	0x20001370
 8004698:	40000800 	.word	0x40000800

0800469c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046a2:	f107 0308 	add.w	r3, r7, #8
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	609a      	str	r2, [r3, #8]
 80046ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046b0:	463b      	mov	r3, r7
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 80046b8:	4b1f      	ldr	r3, [pc, #124]	; (8004738 <MX_TIM8_Init+0x9c>)
 80046ba:	4a20      	ldr	r2, [pc, #128]	; (800473c <MX_TIM8_Init+0xa0>)
 80046bc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7200-1;
 80046be:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <MX_TIM8_Init+0x9c>)
 80046c0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80046c4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046c6:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <MX_TIM8_Init+0x9c>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 500-1;
 80046cc:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <MX_TIM8_Init+0x9c>)
 80046ce:	f240 12f3 	movw	r2, #499	; 0x1f3
 80046d2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046d4:	4b18      	ldr	r3, [pc, #96]	; (8004738 <MX_TIM8_Init+0x9c>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80046da:	4b17      	ldr	r3, [pc, #92]	; (8004738 <MX_TIM8_Init+0x9c>)
 80046dc:	2200      	movs	r2, #0
 80046de:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046e0:	4b15      	ldr	r3, [pc, #84]	; (8004738 <MX_TIM8_Init+0x9c>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80046e6:	4814      	ldr	r0, [pc, #80]	; (8004738 <MX_TIM8_Init+0x9c>)
 80046e8:	f004 fa9e 	bl	8008c28 <HAL_TIM_Base_Init>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80046f2:	f7fe fff3 	bl	80036dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80046fc:	f107 0308 	add.w	r3, r7, #8
 8004700:	4619      	mov	r1, r3
 8004702:	480d      	ldr	r0, [pc, #52]	; (8004738 <MX_TIM8_Init+0x9c>)
 8004704:	f004 fd78 	bl	80091f8 <HAL_TIM_ConfigClockSource>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800470e:	f7fe ffe5 	bl	80036dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004712:	2320      	movs	r3, #32
 8004714:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004716:	2300      	movs	r3, #0
 8004718:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800471a:	463b      	mov	r3, r7
 800471c:	4619      	mov	r1, r3
 800471e:	4806      	ldr	r0, [pc, #24]	; (8004738 <MX_TIM8_Init+0x9c>)
 8004720:	f005 f966 	bl	80099f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800472a:	f7fe ffd7 	bl	80036dc <Error_Handler>
  }

}
 800472e:	bf00      	nop
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20001330 	.word	0x20001330
 800473c:	40010400 	.word	0x40010400

08004740 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004750:	d10e      	bne.n	8004770 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	4b2e      	ldr	r3, [pc, #184]	; (8004810 <HAL_TIM_Base_MspInit+0xd0>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	4a2d      	ldr	r2, [pc, #180]	; (8004810 <HAL_TIM_Base_MspInit+0xd0>)
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	6413      	str	r3, [r2, #64]	; 0x40
 8004762:	4b2b      	ldr	r3, [pc, #172]	; (8004810 <HAL_TIM_Base_MspInit+0xd0>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800476e:	e04a      	b.n	8004806 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a27      	ldr	r2, [pc, #156]	; (8004814 <HAL_TIM_Base_MspInit+0xd4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d116      	bne.n	80047a8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	4b24      	ldr	r3, [pc, #144]	; (8004810 <HAL_TIM_Base_MspInit+0xd0>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a23      	ldr	r2, [pc, #140]	; (8004810 <HAL_TIM_Base_MspInit+0xd0>)
 8004784:	f043 0302 	orr.w	r3, r3, #2
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
 800478a:	4b21      	ldr	r3, [pc, #132]	; (8004810 <HAL_TIM_Base_MspInit+0xd0>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004796:	2200      	movs	r2, #0
 8004798:	2100      	movs	r1, #0
 800479a:	201d      	movs	r0, #29
 800479c:	f000 feb7 	bl	800550e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80047a0:	201d      	movs	r0, #29
 80047a2:	f000 fed0 	bl	8005546 <HAL_NVIC_EnableIRQ>
}
 80047a6:	e02e      	b.n	8004806 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <HAL_TIM_Base_MspInit+0xd8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10e      	bne.n	80047d0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	4b16      	ldr	r3, [pc, #88]	; (8004810 <HAL_TIM_Base_MspInit+0xd0>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	4a15      	ldr	r2, [pc, #84]	; (8004810 <HAL_TIM_Base_MspInit+0xd0>)
 80047bc:	f043 0304 	orr.w	r3, r3, #4
 80047c0:	6413      	str	r3, [r2, #64]	; 0x40
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <HAL_TIM_Base_MspInit+0xd0>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
}
 80047ce:	e01a      	b.n	8004806 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM8)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a11      	ldr	r2, [pc, #68]	; (800481c <HAL_TIM_Base_MspInit+0xdc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d115      	bne.n	8004806 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <HAL_TIM_Base_MspInit+0xd0>)
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	4a0b      	ldr	r2, [pc, #44]	; (8004810 <HAL_TIM_Base_MspInit+0xd0>)
 80047e4:	f043 0302 	orr.w	r3, r3, #2
 80047e8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ea:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_TIM_Base_MspInit+0xd0>)
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80047f6:	2200      	movs	r2, #0
 80047f8:	2100      	movs	r1, #0
 80047fa:	202c      	movs	r0, #44	; 0x2c
 80047fc:	f000 fe87 	bl	800550e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004800:	202c      	movs	r0, #44	; 0x2c
 8004802:	f000 fea0 	bl	8005546 <HAL_NVIC_EnableIRQ>
}
 8004806:	bf00      	nop
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40023800 	.word	0x40023800
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800
 800481c:	40010400 	.word	0x40010400

08004820 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004840:	d11d      	bne.n	800487e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	60bb      	str	r3, [r7, #8]
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_TIM_MspPostInit+0x68>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	4a0f      	ldr	r2, [pc, #60]	; (8004888 <HAL_TIM_MspPostInit+0x68>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	6313      	str	r3, [r2, #48]	; 0x30
 8004852:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <HAL_TIM_MspPostInit+0x68>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800485e:	2304      	movs	r3, #4
 8004860:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004862:	2302      	movs	r3, #2
 8004864:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800486e:	2301      	movs	r3, #1
 8004870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8004872:	f107 030c 	add.w	r3, r7, #12
 8004876:	4619      	mov	r1, r3
 8004878:	4804      	ldr	r0, [pc, #16]	; (800488c <HAL_TIM_MspPostInit+0x6c>)
 800487a:	f001 fa11 	bl	8005ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800487e:	bf00      	nop
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800
 800488c:	40020000 	.word	0x40020000

08004890 <MX_UART8_Init>:
DMA_HandleTypeDef hdma_usart3_tx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <MX_UART8_Init+0x4c>)
 8004896:	4a12      	ldr	r2, [pc, #72]	; (80048e0 <MX_UART8_Init+0x50>)
 8004898:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 800489a:	4b10      	ldr	r3, [pc, #64]	; (80048dc <MX_UART8_Init+0x4c>)
 800489c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80048a0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80048a2:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <MX_UART8_Init+0x4c>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <MX_UART8_Init+0x4c>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80048ae:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <MX_UART8_Init+0x4c>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <MX_UART8_Init+0x4c>)
 80048b6:	220c      	movs	r2, #12
 80048b8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ba:	4b08      	ldr	r3, [pc, #32]	; (80048dc <MX_UART8_Init+0x4c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80048c0:	4b06      	ldr	r3, [pc, #24]	; (80048dc <MX_UART8_Init+0x4c>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80048c6:	4805      	ldr	r0, [pc, #20]	; (80048dc <MX_UART8_Init+0x4c>)
 80048c8:	f005 f922 	bl	8009b10 <HAL_UART_Init>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80048d2:	f7fe ff03 	bl	80036dc <Error_Handler>
  }

}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20001590 	.word	0x20001590
 80048e0:	40007c00 	.word	0x40007c00

080048e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <MX_USART3_UART_Init+0x4c>)
 80048ea:	4a12      	ldr	r2, [pc, #72]	; (8004934 <MX_USART3_UART_Init+0x50>)
 80048ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80048ee:	4b10      	ldr	r3, [pc, #64]	; (8004930 <MX_USART3_UART_Init+0x4c>)
 80048f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80048f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80048f6:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <MX_USART3_UART_Init+0x4c>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <MX_USART3_UART_Init+0x4c>)
 80048fe:	2200      	movs	r2, #0
 8004900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004902:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <MX_USART3_UART_Init+0x4c>)
 8004904:	2200      	movs	r2, #0
 8004906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <MX_USART3_UART_Init+0x4c>)
 800490a:	220c      	movs	r2, #12
 800490c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800490e:	4b08      	ldr	r3, [pc, #32]	; (8004930 <MX_USART3_UART_Init+0x4c>)
 8004910:	2200      	movs	r2, #0
 8004912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <MX_USART3_UART_Init+0x4c>)
 8004916:	2200      	movs	r2, #0
 8004918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800491a:	4805      	ldr	r0, [pc, #20]	; (8004930 <MX_USART3_UART_Init+0x4c>)
 800491c:	f005 f8f8 	bl	8009b10 <HAL_UART_Init>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004926:	f7fe fed9 	bl	80036dc <Error_Handler>
  }

}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	200014f0 	.word	0x200014f0
 8004934:	40004800 	.word	0x40004800

08004938 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <MX_USART6_UART_Init+0x4c>)
 800493e:	4a12      	ldr	r2, [pc, #72]	; (8004988 <MX_USART6_UART_Init+0x50>)
 8004940:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <MX_USART6_UART_Init+0x4c>)
 8004944:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004948:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <MX_USART6_UART_Init+0x4c>)
 800494c:	2200      	movs	r2, #0
 800494e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <MX_USART6_UART_Init+0x4c>)
 8004952:	2200      	movs	r2, #0
 8004954:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <MX_USART6_UART_Init+0x4c>)
 8004958:	2200      	movs	r2, #0
 800495a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <MX_USART6_UART_Init+0x4c>)
 800495e:	220c      	movs	r2, #12
 8004960:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <MX_USART6_UART_Init+0x4c>)
 8004964:	2200      	movs	r2, #0
 8004966:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <MX_USART6_UART_Init+0x4c>)
 800496a:	2200      	movs	r2, #0
 800496c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800496e:	4805      	ldr	r0, [pc, #20]	; (8004984 <MX_USART6_UART_Init+0x4c>)
 8004970:	f005 f8ce 	bl	8009b10 <HAL_UART_Init>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800497a:	f7fe feaf 	bl	80036dc <Error_Handler>
  }

}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	200015d0 	.word	0x200015d0
 8004988:	40011400 	.word	0x40011400

0800498c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08e      	sub	sp, #56	; 0x38
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a9a      	ldr	r2, [pc, #616]	; (8004c14 <HAL_UART_MspInit+0x288>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d12c      	bne.n	8004a08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80049ae:	2300      	movs	r3, #0
 80049b0:	623b      	str	r3, [r7, #32]
 80049b2:	4b99      	ldr	r3, [pc, #612]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	4a98      	ldr	r2, [pc, #608]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 80049b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049bc:	6413      	str	r3, [r2, #64]	; 0x40
 80049be:	4b96      	ldr	r3, [pc, #600]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c6:	623b      	str	r3, [r7, #32]
 80049c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	4b92      	ldr	r3, [pc, #584]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	4a91      	ldr	r2, [pc, #580]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 80049d4:	f043 0310 	orr.w	r3, r3, #16
 80049d8:	6313      	str	r3, [r2, #48]	; 0x30
 80049da:	4b8f      	ldr	r3, [pc, #572]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 80049e6:	2303      	movs	r3, #3
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ea:	2302      	movs	r3, #2
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049ee:	2301      	movs	r3, #1
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f2:	2303      	movs	r3, #3
 80049f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80049f6:	2308      	movs	r3, #8
 80049f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049fe:	4619      	mov	r1, r3
 8004a00:	4886      	ldr	r0, [pc, #536]	; (8004c1c <HAL_UART_MspInit+0x290>)
 8004a02:	f001 f94d 	bl	8005ca0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004a06:	e100      	b.n	8004c0a <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART3)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a84      	ldr	r2, [pc, #528]	; (8004c20 <HAL_UART_MspInit+0x294>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	f040 8093 	bne.w	8004b3a <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a14:	2300      	movs	r3, #0
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	4b7f      	ldr	r3, [pc, #508]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	4a7e      	ldr	r2, [pc, #504]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 8004a1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a22:	6413      	str	r3, [r2, #64]	; 0x40
 8004a24:	4b7c      	ldr	r3, [pc, #496]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	4b78      	ldr	r3, [pc, #480]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	4a77      	ldr	r2, [pc, #476]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 8004a3a:	f043 0308 	orr.w	r3, r3, #8
 8004a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8004a40:	4b75      	ldr	r3, [pc, #468]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8004a4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a52:	2302      	movs	r3, #2
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a5e:	2307      	movs	r3, #7
 8004a60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a66:	4619      	mov	r1, r3
 8004a68:	486e      	ldr	r0, [pc, #440]	; (8004c24 <HAL_UART_MspInit+0x298>)
 8004a6a:	f001 f919 	bl	8005ca0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004a6e:	4b6e      	ldr	r3, [pc, #440]	; (8004c28 <HAL_UART_MspInit+0x29c>)
 8004a70:	4a6e      	ldr	r2, [pc, #440]	; (8004c2c <HAL_UART_MspInit+0x2a0>)
 8004a72:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004a74:	4b6c      	ldr	r3, [pc, #432]	; (8004c28 <HAL_UART_MspInit+0x29c>)
 8004a76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a7a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a7c:	4b6a      	ldr	r3, [pc, #424]	; (8004c28 <HAL_UART_MspInit+0x29c>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a82:	4b69      	ldr	r3, [pc, #420]	; (8004c28 <HAL_UART_MspInit+0x29c>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a88:	4b67      	ldr	r3, [pc, #412]	; (8004c28 <HAL_UART_MspInit+0x29c>)
 8004a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a8e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a90:	4b65      	ldr	r3, [pc, #404]	; (8004c28 <HAL_UART_MspInit+0x29c>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a96:	4b64      	ldr	r3, [pc, #400]	; (8004c28 <HAL_UART_MspInit+0x29c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004a9c:	4b62      	ldr	r3, [pc, #392]	; (8004c28 <HAL_UART_MspInit+0x29c>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004aa2:	4b61      	ldr	r3, [pc, #388]	; (8004c28 <HAL_UART_MspInit+0x29c>)
 8004aa4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004aa8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004aaa:	4b5f      	ldr	r3, [pc, #380]	; (8004c28 <HAL_UART_MspInit+0x29c>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004ab0:	485d      	ldr	r0, [pc, #372]	; (8004c28 <HAL_UART_MspInit+0x29c>)
 8004ab2:	f000 fd63 	bl	800557c <HAL_DMA_Init>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8004abc:	f7fe fe0e 	bl	80036dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a59      	ldr	r2, [pc, #356]	; (8004c28 <HAL_UART_MspInit+0x29c>)
 8004ac4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ac6:	4a58      	ldr	r2, [pc, #352]	; (8004c28 <HAL_UART_MspInit+0x29c>)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004acc:	4b58      	ldr	r3, [pc, #352]	; (8004c30 <HAL_UART_MspInit+0x2a4>)
 8004ace:	4a59      	ldr	r2, [pc, #356]	; (8004c34 <HAL_UART_MspInit+0x2a8>)
 8004ad0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004ad2:	4b57      	ldr	r3, [pc, #348]	; (8004c30 <HAL_UART_MspInit+0x2a4>)
 8004ad4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ad8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ada:	4b55      	ldr	r3, [pc, #340]	; (8004c30 <HAL_UART_MspInit+0x2a4>)
 8004adc:	2240      	movs	r2, #64	; 0x40
 8004ade:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ae0:	4b53      	ldr	r3, [pc, #332]	; (8004c30 <HAL_UART_MspInit+0x2a4>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ae6:	4b52      	ldr	r3, [pc, #328]	; (8004c30 <HAL_UART_MspInit+0x2a4>)
 8004ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004aec:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004aee:	4b50      	ldr	r3, [pc, #320]	; (8004c30 <HAL_UART_MspInit+0x2a4>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004af4:	4b4e      	ldr	r3, [pc, #312]	; (8004c30 <HAL_UART_MspInit+0x2a4>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004afa:	4b4d      	ldr	r3, [pc, #308]	; (8004c30 <HAL_UART_MspInit+0x2a4>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b00:	4b4b      	ldr	r3, [pc, #300]	; (8004c30 <HAL_UART_MspInit+0x2a4>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b06:	4b4a      	ldr	r3, [pc, #296]	; (8004c30 <HAL_UART_MspInit+0x2a4>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004b0c:	4848      	ldr	r0, [pc, #288]	; (8004c30 <HAL_UART_MspInit+0x2a4>)
 8004b0e:	f000 fd35 	bl	800557c <HAL_DMA_Init>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_UART_MspInit+0x190>
      Error_Handler();
 8004b18:	f7fe fde0 	bl	80036dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a44      	ldr	r2, [pc, #272]	; (8004c30 <HAL_UART_MspInit+0x2a4>)
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
 8004b22:	4a43      	ldr	r2, [pc, #268]	; (8004c30 <HAL_UART_MspInit+0x2a4>)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	2027      	movs	r0, #39	; 0x27
 8004b2e:	f000 fcee 	bl	800550e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004b32:	2027      	movs	r0, #39	; 0x27
 8004b34:	f000 fd07 	bl	8005546 <HAL_NVIC_EnableIRQ>
}
 8004b38:	e067      	b.n	8004c0a <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART6)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a3e      	ldr	r2, [pc, #248]	; (8004c38 <HAL_UART_MspInit+0x2ac>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d162      	bne.n	8004c0a <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004b44:	2300      	movs	r3, #0
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	4b33      	ldr	r3, [pc, #204]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4c:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 8004b4e:	f043 0320 	orr.w	r3, r3, #32
 8004b52:	6453      	str	r3, [r2, #68]	; 0x44
 8004b54:	4b30      	ldr	r3, [pc, #192]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	4b2c      	ldr	r3, [pc, #176]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	4a2b      	ldr	r2, [pc, #172]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 8004b6a:	f043 0304 	orr.w	r3, r3, #4
 8004b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b70:	4b29      	ldr	r3, [pc, #164]	; (8004c18 <HAL_UART_MspInit+0x28c>)
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8004b7c:	23c0      	movs	r3, #192	; 0xc0
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b80:	2302      	movs	r3, #2
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004b8c:	2308      	movs	r3, #8
 8004b8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b94:	4619      	mov	r1, r3
 8004b96:	4829      	ldr	r0, [pc, #164]	; (8004c3c <HAL_UART_MspInit+0x2b0>)
 8004b98:	f001 f882 	bl	8005ca0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004b9c:	4b28      	ldr	r3, [pc, #160]	; (8004c40 <HAL_UART_MspInit+0x2b4>)
 8004b9e:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <HAL_UART_MspInit+0x2b8>)
 8004ba0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004ba2:	4b27      	ldr	r3, [pc, #156]	; (8004c40 <HAL_UART_MspInit+0x2b4>)
 8004ba4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004ba8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004baa:	4b25      	ldr	r3, [pc, #148]	; (8004c40 <HAL_UART_MspInit+0x2b4>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bb0:	4b23      	ldr	r3, [pc, #140]	; (8004c40 <HAL_UART_MspInit+0x2b4>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bb6:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <HAL_UART_MspInit+0x2b4>)
 8004bb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bbc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bbe:	4b20      	ldr	r3, [pc, #128]	; (8004c40 <HAL_UART_MspInit+0x2b4>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <HAL_UART_MspInit+0x2b4>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004bca:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <HAL_UART_MspInit+0x2b4>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <HAL_UART_MspInit+0x2b4>)
 8004bd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bd6:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bd8:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <HAL_UART_MspInit+0x2b4>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004bde:	4818      	ldr	r0, [pc, #96]	; (8004c40 <HAL_UART_MspInit+0x2b4>)
 8004be0:	f000 fccc 	bl	800557c <HAL_DMA_Init>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_UART_MspInit+0x262>
      Error_Handler();
 8004bea:	f7fe fd77 	bl	80036dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <HAL_UART_MspInit+0x2b4>)
 8004bf2:	635a      	str	r2, [r3, #52]	; 0x34
 8004bf4:	4a12      	ldr	r2, [pc, #72]	; (8004c40 <HAL_UART_MspInit+0x2b4>)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	2047      	movs	r0, #71	; 0x47
 8004c00:	f000 fc85 	bl	800550e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004c04:	2047      	movs	r0, #71	; 0x47
 8004c06:	f000 fc9e 	bl	8005546 <HAL_NVIC_EnableIRQ>
}
 8004c0a:	bf00      	nop
 8004c0c:	3738      	adds	r7, #56	; 0x38
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40007c00 	.word	0x40007c00
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	40004800 	.word	0x40004800
 8004c24:	40020c00 	.word	0x40020c00
 8004c28:	20001490 	.word	0x20001490
 8004c2c:	40026028 	.word	0x40026028
 8004c30:	20001530 	.word	0x20001530
 8004c34:	40026058 	.word	0x40026058
 8004c38:	40011400 	.word	0x40011400
 8004c3c:	40020800 	.word	0x40020800
 8004c40:	20001430 	.word	0x20001430
 8004c44:	40026428 	.word	0x40026428

08004c48 <VR_Power_On>:


#include "main.h"


void VR_Power_On(void) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, SET);
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c52:	4804      	ldr	r0, [pc, #16]	; (8004c64 <VR_Power_On+0x1c>)
 8004c54:	f001 f9e8 	bl	8006028 <HAL_GPIO_WritePin>
	// note that runcam needs around 3-5 seconds to fully power on
	HAL_Delay(5000);
 8004c58:	f241 3088 	movw	r0, #5000	; 0x1388
 8004c5c:	f000 f8e6 	bl	8004e2c <HAL_Delay>
}
 8004c60:	bf00      	nop
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40021800 	.word	0x40021800

08004c68 <VR_Power_Off>:

void VR_Power_Off(void) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c72:	4802      	ldr	r0, [pc, #8]	; (8004c7c <VR_Power_Off+0x14>)
 8004c74:	f001 f9d8 	bl	8006028 <HAL_GPIO_WritePin>
}
 8004c78:	bf00      	nop
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40021800 	.word	0x40021800

08004c80 <VR_Start_Rec>:

void VR_Start_Rec(void) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0

	// specific sequence of SET/RESET to start recording
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
 8004c84:	2201      	movs	r2, #1
 8004c86:	2180      	movs	r1, #128	; 0x80
 8004c88:	480f      	ldr	r0, [pc, #60]	; (8004cc8 <VR_Start_Rec+0x48>)
 8004c8a:	f001 f9cd 	bl	8006028 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8004c8e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004c92:	f000 f8cb 	bl	8004e2c <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8004c96:	2200      	movs	r2, #0
 8004c98:	2180      	movs	r1, #128	; 0x80
 8004c9a:	480b      	ldr	r0, [pc, #44]	; (8004cc8 <VR_Start_Rec+0x48>)
 8004c9c:	f001 f9c4 	bl	8006028 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8004ca0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004ca4:	f000 f8c2 	bl	8004e2c <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
 8004ca8:	2201      	movs	r2, #1
 8004caa:	2180      	movs	r1, #128	; 0x80
 8004cac:	4806      	ldr	r0, [pc, #24]	; (8004cc8 <VR_Start_Rec+0x48>)
 8004cae:	f001 f9bb 	bl	8006028 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8004cb2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004cb6:	f000 f8b9 	bl	8004e2c <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2180      	movs	r1, #128	; 0x80
 8004cbe:	4802      	ldr	r0, [pc, #8]	; (8004cc8 <VR_Start_Rec+0x48>)
 8004cc0:	f001 f9b2 	bl	8006028 <HAL_GPIO_WritePin>

}
 8004cc4:	bf00      	nop
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40020c00 	.word	0x40020c00

08004ccc <VR_Stop_Rec>:

void VR_Stop_Rec(void) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	2180      	movs	r1, #128	; 0x80
 8004cd4:	4806      	ldr	r0, [pc, #24]	; (8004cf0 <VR_Stop_Rec+0x24>)
 8004cd6:	f001 f9a7 	bl	8006028 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8004cda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cde:	f000 f8a5 	bl	8004e2c <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2180      	movs	r1, #128	; 0x80
 8004ce6:	4802      	ldr	r0, [pc, #8]	; (8004cf0 <VR_Stop_Rec+0x24>)
 8004ce8:	f001 f99e 	bl	8006028 <HAL_GPIO_WritePin>
}
 8004cec:	bf00      	nop
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40020c00 	.word	0x40020c00

08004cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004cf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004cfa:	e003      	b.n	8004d04 <LoopCopyDataInit>

08004cfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004cfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004d00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004d02:	3104      	adds	r1, #4

08004d04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004d04:	480b      	ldr	r0, [pc, #44]	; (8004d34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004d06:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004d08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004d0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004d0c:	d3f6      	bcc.n	8004cfc <CopyDataInit>
  ldr  r2, =_sbss
 8004d0e:	4a0b      	ldr	r2, [pc, #44]	; (8004d3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004d10:	e002      	b.n	8004d18 <LoopFillZerobss>

08004d12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004d12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004d14:	f842 3b04 	str.w	r3, [r2], #4

08004d18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004d1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004d1c:	d3f9      	bcc.n	8004d12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004d1e:	f7ff fb95 	bl	800444c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d22:	f009 fa73 	bl	800e20c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d26:	f7fd fecf 	bl	8002ac8 <main>
  bx  lr    
 8004d2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004d2c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004d30:	08014c78 	.word	0x08014c78
  ldr  r0, =_sdata
 8004d34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004d38:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8004d3c:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8004d40:	20001a94 	.word	0x20001a94

08004d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d44:	e7fe      	b.n	8004d44 <ADC_IRQHandler>
	...

08004d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <HAL_Init+0x40>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a0d      	ldr	r2, [pc, #52]	; (8004d88 <HAL_Init+0x40>)
 8004d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_Init+0x40>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <HAL_Init+0x40>)
 8004d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d64:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <HAL_Init+0x40>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a07      	ldr	r2, [pc, #28]	; (8004d88 <HAL_Init+0x40>)
 8004d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d70:	2003      	movs	r0, #3
 8004d72:	f000 fbc1 	bl	80054f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d76:	2000      	movs	r0, #0
 8004d78:	f000 f808 	bl	8004d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d7c:	f7ff f9ec 	bl	8004158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023c00 	.word	0x40023c00

08004d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d94:	4b12      	ldr	r3, [pc, #72]	; (8004de0 <HAL_InitTick+0x54>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <HAL_InitTick+0x58>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fbd9 	bl	8005562 <HAL_SYSTICK_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e00e      	b.n	8004dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b0f      	cmp	r3, #15
 8004dbe:	d80a      	bhi.n	8004dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc8:	f000 fba1 	bl	800550e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004dcc:	4a06      	ldr	r2, [pc, #24]	; (8004de8 <HAL_InitTick+0x5c>)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e000      	b.n	8004dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20000004 	.word	0x20000004
 8004de4:	2000000c 	.word	0x2000000c
 8004de8:	20000008 	.word	0x20000008

08004dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_IncTick+0x20>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_IncTick+0x24>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	4a04      	ldr	r2, [pc, #16]	; (8004e10 <HAL_IncTick+0x24>)
 8004dfe:	6013      	str	r3, [r2, #0]
}
 8004e00:	bf00      	nop
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	2000000c 	.word	0x2000000c
 8004e10:	20001610 	.word	0x20001610

08004e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  return uwTick;
 8004e18:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <HAL_GetTick+0x14>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20001610 	.word	0x20001610

08004e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e34:	f7ff ffee 	bl	8004e14 <HAL_GetTick>
 8004e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d005      	beq.n	8004e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <HAL_Delay+0x44>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e52:	bf00      	nop
 8004e54:	f7ff ffde 	bl	8004e14 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d8f7      	bhi.n	8004e54 <HAL_Delay+0x28>
  {
  }
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	2000000c 	.word	0x2000000c

08004e74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e033      	b.n	8004ef2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc f988 	bl	80011a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d118      	bne.n	8004ee4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004eba:	f023 0302 	bic.w	r3, r3, #2
 8004ebe:	f043 0202 	orr.w	r2, r3, #2
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f94a 	bl	8005160 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f023 0303 	bic.w	r3, r3, #3
 8004eda:	f043 0201 	orr.w	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ee2:	e001      	b.n	8004ee8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_ADC_ConfigChannel+0x1c>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e113      	b.n	8005140 <HAL_ADC_ConfigChannel+0x244>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b09      	cmp	r3, #9
 8004f26:	d925      	bls.n	8004f74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68d9      	ldr	r1, [r3, #12]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	4613      	mov	r3, r2
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3b1e      	subs	r3, #30
 8004f3e:	2207      	movs	r2, #7
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	43da      	mvns	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	400a      	ands	r2, r1
 8004f4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68d9      	ldr	r1, [r3, #12]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	4618      	mov	r0, r3
 8004f60:	4603      	mov	r3, r0
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	4403      	add	r3, r0
 8004f66:	3b1e      	subs	r3, #30
 8004f68:	409a      	lsls	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	60da      	str	r2, [r3, #12]
 8004f72:	e022      	b.n	8004fba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6919      	ldr	r1, [r3, #16]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	4613      	mov	r3, r2
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	4413      	add	r3, r2
 8004f88:	2207      	movs	r2, #7
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	43da      	mvns	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	400a      	ands	r2, r1
 8004f96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6919      	ldr	r1, [r3, #16]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	4618      	mov	r0, r3
 8004faa:	4603      	mov	r3, r0
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4403      	add	r3, r0
 8004fb0:	409a      	lsls	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b06      	cmp	r3, #6
 8004fc0:	d824      	bhi.n	800500c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3b05      	subs	r3, #5
 8004fd4:	221f      	movs	r2, #31
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	43da      	mvns	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	400a      	ands	r2, r1
 8004fe2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3b05      	subs	r3, #5
 8004ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	635a      	str	r2, [r3, #52]	; 0x34
 800500a:	e04c      	b.n	80050a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b0c      	cmp	r3, #12
 8005012:	d824      	bhi.n	800505e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	3b23      	subs	r3, #35	; 0x23
 8005026:	221f      	movs	r2, #31
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43da      	mvns	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	400a      	ands	r2, r1
 8005034:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	4618      	mov	r0, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	3b23      	subs	r3, #35	; 0x23
 8005050:	fa00 f203 	lsl.w	r2, r0, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	631a      	str	r2, [r3, #48]	; 0x30
 800505c:	e023      	b.n	80050a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	3b41      	subs	r3, #65	; 0x41
 8005070:	221f      	movs	r2, #31
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43da      	mvns	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	400a      	ands	r2, r1
 800507e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	4618      	mov	r0, r3
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	3b41      	subs	r3, #65	; 0x41
 800509a:	fa00 f203 	lsl.w	r2, r0, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050a6:	4b29      	ldr	r3, [pc, #164]	; (800514c <HAL_ADC_ConfigChannel+0x250>)
 80050a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a28      	ldr	r2, [pc, #160]	; (8005150 <HAL_ADC_ConfigChannel+0x254>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d10f      	bne.n	80050d4 <HAL_ADC_ConfigChannel+0x1d8>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b12      	cmp	r3, #18
 80050ba:	d10b      	bne.n	80050d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <HAL_ADC_ConfigChannel+0x254>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d12b      	bne.n	8005136 <HAL_ADC_ConfigChannel+0x23a>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_ADC_ConfigChannel+0x258>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d003      	beq.n	80050f0 <HAL_ADC_ConfigChannel+0x1f4>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b11      	cmp	r3, #17
 80050ee:	d122      	bne.n	8005136 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a11      	ldr	r2, [pc, #68]	; (8005154 <HAL_ADC_ConfigChannel+0x258>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d111      	bne.n	8005136 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005112:	4b11      	ldr	r3, [pc, #68]	; (8005158 <HAL_ADC_ConfigChannel+0x25c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a11      	ldr	r2, [pc, #68]	; (800515c <HAL_ADC_ConfigChannel+0x260>)
 8005118:	fba2 2303 	umull	r2, r3, r2, r3
 800511c:	0c9a      	lsrs	r2, r3, #18
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005128:	e002      	b.n	8005130 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	3b01      	subs	r3, #1
 800512e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f9      	bne.n	800512a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40012300 	.word	0x40012300
 8005150:	40012000 	.word	0x40012000
 8005154:	10000012 	.word	0x10000012
 8005158:	20000004 	.word	0x20000004
 800515c:	431bde83 	.word	0x431bde83

08005160 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005168:	4b79      	ldr	r3, [pc, #484]	; (8005350 <ADC_Init+0x1f0>)
 800516a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	431a      	orrs	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005194:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6859      	ldr	r1, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	021a      	lsls	r2, r3, #8
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80051b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6859      	ldr	r1, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6899      	ldr	r1, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	4a58      	ldr	r2, [pc, #352]	; (8005354 <ADC_Init+0x1f4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d022      	beq.n	800523e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005206:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6899      	ldr	r1, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005228:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6899      	ldr	r1, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	609a      	str	r2, [r3, #8]
 800523c:	e00f      	b.n	800525e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800524c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800525c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0202 	bic.w	r2, r2, #2
 800526c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6899      	ldr	r1, [r3, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	7e1b      	ldrb	r3, [r3, #24]
 8005278:	005a      	lsls	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01b      	beq.n	80052c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800529a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80052aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6859      	ldr	r1, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	3b01      	subs	r3, #1
 80052b8:	035a      	lsls	r2, r3, #13
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	e007      	b.n	80052d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	051a      	lsls	r2, r3, #20
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005308:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6899      	ldr	r1, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005316:	025a      	lsls	r2, r3, #9
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6899      	ldr	r1, [r3, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	029a      	lsls	r2, r3, #10
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	40012300 	.word	0x40012300
 8005354:	0f000001 	.word	0x0f000001

08005358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005368:	4b0c      	ldr	r3, [pc, #48]	; (800539c <__NVIC_SetPriorityGrouping+0x44>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005374:	4013      	ands	r3, r2
 8005376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800538a:	4a04      	ldr	r2, [pc, #16]	; (800539c <__NVIC_SetPriorityGrouping+0x44>)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	60d3      	str	r3, [r2, #12]
}
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	e000ed00 	.word	0xe000ed00

080053a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <__NVIC_GetPriorityGrouping+0x18>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	f003 0307 	and.w	r3, r3, #7
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	e000ed00 	.word	0xe000ed00

080053bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	db0b      	blt.n	80053e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	f003 021f 	and.w	r2, r3, #31
 80053d4:	4907      	ldr	r1, [pc, #28]	; (80053f4 <__NVIC_EnableIRQ+0x38>)
 80053d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	2001      	movs	r0, #1
 80053de:	fa00 f202 	lsl.w	r2, r0, r2
 80053e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	e000e100 	.word	0xe000e100

080053f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	6039      	str	r1, [r7, #0]
 8005402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005408:	2b00      	cmp	r3, #0
 800540a:	db0a      	blt.n	8005422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	b2da      	uxtb	r2, r3
 8005410:	490c      	ldr	r1, [pc, #48]	; (8005444 <__NVIC_SetPriority+0x4c>)
 8005412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005416:	0112      	lsls	r2, r2, #4
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	440b      	add	r3, r1
 800541c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005420:	e00a      	b.n	8005438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	4908      	ldr	r1, [pc, #32]	; (8005448 <__NVIC_SetPriority+0x50>)
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	3b04      	subs	r3, #4
 8005430:	0112      	lsls	r2, r2, #4
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	440b      	add	r3, r1
 8005436:	761a      	strb	r2, [r3, #24]
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	e000e100 	.word	0xe000e100
 8005448:	e000ed00 	.word	0xe000ed00

0800544c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800544c:	b480      	push	{r7}
 800544e:	b089      	sub	sp, #36	; 0x24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f1c3 0307 	rsb	r3, r3, #7
 8005466:	2b04      	cmp	r3, #4
 8005468:	bf28      	it	cs
 800546a:	2304      	movcs	r3, #4
 800546c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	3304      	adds	r3, #4
 8005472:	2b06      	cmp	r3, #6
 8005474:	d902      	bls.n	800547c <NVIC_EncodePriority+0x30>
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	3b03      	subs	r3, #3
 800547a:	e000      	b.n	800547e <NVIC_EncodePriority+0x32>
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005480:	f04f 32ff 	mov.w	r2, #4294967295
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	43da      	mvns	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	401a      	ands	r2, r3
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005494:	f04f 31ff 	mov.w	r1, #4294967295
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	fa01 f303 	lsl.w	r3, r1, r3
 800549e:	43d9      	mvns	r1, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a4:	4313      	orrs	r3, r2
         );
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3724      	adds	r7, #36	; 0x24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3b01      	subs	r3, #1
 80054c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054c4:	d301      	bcc.n	80054ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054c6:	2301      	movs	r3, #1
 80054c8:	e00f      	b.n	80054ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054ca:	4a0a      	ldr	r2, [pc, #40]	; (80054f4 <SysTick_Config+0x40>)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054d2:	210f      	movs	r1, #15
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	f7ff ff8e 	bl	80053f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054dc:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <SysTick_Config+0x40>)
 80054de:	2200      	movs	r2, #0
 80054e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054e2:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <SysTick_Config+0x40>)
 80054e4:	2207      	movs	r2, #7
 80054e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	e000e010 	.word	0xe000e010

080054f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff ff29 	bl	8005358 <__NVIC_SetPriorityGrouping>
}
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800550e:	b580      	push	{r7, lr}
 8005510:	b086      	sub	sp, #24
 8005512:	af00      	add	r7, sp, #0
 8005514:	4603      	mov	r3, r0
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005520:	f7ff ff3e 	bl	80053a0 <__NVIC_GetPriorityGrouping>
 8005524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	6978      	ldr	r0, [r7, #20]
 800552c:	f7ff ff8e 	bl	800544c <NVIC_EncodePriority>
 8005530:	4602      	mov	r2, r0
 8005532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005536:	4611      	mov	r1, r2
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff ff5d 	bl	80053f8 <__NVIC_SetPriority>
}
 800553e:	bf00      	nop
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	4603      	mov	r3, r0
 800554e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff ff31 	bl	80053bc <__NVIC_EnableIRQ>
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff ffa2 	bl	80054b4 <SysTick_Config>
 8005570:	4603      	mov	r3, r0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005588:	f7ff fc44 	bl	8004e14 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e099      	b.n	80056cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0201 	bic.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055b8:	e00f      	b.n	80055da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055ba:	f7ff fc2b 	bl	8004e14 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b05      	cmp	r3, #5
 80055c6:	d908      	bls.n	80055da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2203      	movs	r2, #3
 80055d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e078      	b.n	80056cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e8      	bne.n	80055ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4b38      	ldr	r3, [pc, #224]	; (80056d4 <HAL_DMA_Init+0x158>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005606:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800561e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	2b04      	cmp	r3, #4
 8005632:	d107      	bne.n	8005644 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563c:	4313      	orrs	r3, r2
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f023 0307 	bic.w	r3, r3, #7
 800565a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	2b04      	cmp	r3, #4
 800566c:	d117      	bne.n	800569e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00e      	beq.n	800569e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fa91 	bl	8005ba8 <DMA_CheckFifoParam>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2240      	movs	r2, #64	; 0x40
 8005690:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800569a:	2301      	movs	r3, #1
 800569c:	e016      	b.n	80056cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fa48 	bl	8005b3c <DMA_CalcBaseAndBitshift>
 80056ac:	4603      	mov	r3, r0
 80056ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b4:	223f      	movs	r2, #63	; 0x3f
 80056b6:	409a      	lsls	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	f010803f 	.word	0xf010803f

080056d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_DMA_Start_IT+0x26>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e040      	b.n	8005780 <HAL_DMA_Start_IT+0xa8>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b01      	cmp	r3, #1
 8005710:	d12f      	bne.n	8005772 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2202      	movs	r2, #2
 8005716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f9da 	bl	8005ae0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005730:	223f      	movs	r2, #63	; 0x3f
 8005732:	409a      	lsls	r2, r3
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0216 	orr.w	r2, r2, #22
 8005746:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	2b00      	cmp	r3, #0
 800574e:	d007      	beq.n	8005760 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0208 	orr.w	r2, r2, #8
 800575e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	e005      	b.n	800577e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800577a:	2302      	movs	r3, #2
 800577c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800577e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d004      	beq.n	80057a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2280      	movs	r2, #128	; 0x80
 80057a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e00c      	b.n	80057c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2205      	movs	r2, #5
 80057aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057d8:	4b92      	ldr	r3, [pc, #584]	; (8005a24 <HAL_DMA_IRQHandler+0x258>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a92      	ldr	r2, [pc, #584]	; (8005a28 <HAL_DMA_IRQHandler+0x25c>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	0a9b      	lsrs	r3, r3, #10
 80057e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f6:	2208      	movs	r2, #8
 80057f8:	409a      	lsls	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01a      	beq.n	8005838 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d013      	beq.n	8005838 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0204 	bic.w	r2, r2, #4
 800581e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005824:	2208      	movs	r2, #8
 8005826:	409a      	lsls	r2, r3
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005830:	f043 0201 	orr.w	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583c:	2201      	movs	r2, #1
 800583e:	409a      	lsls	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4013      	ands	r3, r2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d012      	beq.n	800586e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00b      	beq.n	800586e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585a:	2201      	movs	r2, #1
 800585c:	409a      	lsls	r2, r3
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005866:	f043 0202 	orr.w	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005872:	2204      	movs	r2, #4
 8005874:	409a      	lsls	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d012      	beq.n	80058a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005890:	2204      	movs	r2, #4
 8005892:	409a      	lsls	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f043 0204 	orr.w	r2, r3, #4
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a8:	2210      	movs	r2, #16
 80058aa:	409a      	lsls	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d043      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d03c      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c6:	2210      	movs	r2, #16
 80058c8:	409a      	lsls	r2, r3
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d018      	beq.n	800590e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d108      	bne.n	80058fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d024      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
 80058fa:	e01f      	b.n	800593c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01b      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	4798      	blx	r3
 800590c:	e016      	b.n	800593c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005918:	2b00      	cmp	r3, #0
 800591a:	d107      	bne.n	800592c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0208 	bic.w	r2, r2, #8
 800592a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005940:	2220      	movs	r2, #32
 8005942:	409a      	lsls	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4013      	ands	r3, r2
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 808e 	beq.w	8005a6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8086 	beq.w	8005a6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005962:	2220      	movs	r2, #32
 8005964:	409a      	lsls	r2, r3
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b05      	cmp	r3, #5
 8005974:	d136      	bne.n	80059e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0216 	bic.w	r2, r2, #22
 8005984:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695a      	ldr	r2, [r3, #20]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005994:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d103      	bne.n	80059a6 <HAL_DMA_IRQHandler+0x1da>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0208 	bic.w	r2, r2, #8
 80059b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ba:	223f      	movs	r2, #63	; 0x3f
 80059bc:	409a      	lsls	r2, r3
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d07d      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	4798      	blx	r3
        }
        return;
 80059e2:	e078      	b.n	8005ad6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d01c      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d108      	bne.n	8005a12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d030      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	4798      	blx	r3
 8005a10:	e02b      	b.n	8005a6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d027      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	4798      	blx	r3
 8005a22:	e022      	b.n	8005a6a <HAL_DMA_IRQHandler+0x29e>
 8005a24:	20000004 	.word	0x20000004
 8005a28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10f      	bne.n	8005a5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0210 	bic.w	r2, r2, #16
 8005a48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d032      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d022      	beq.n	8005ac4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2205      	movs	r2, #5
 8005a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0201 	bic.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	60bb      	str	r3, [r7, #8]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d307      	bcc.n	8005ab2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f2      	bne.n	8005a96 <HAL_DMA_IRQHandler+0x2ca>
 8005ab0:	e000      	b.n	8005ab4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005ab2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	4798      	blx	r3
 8005ad4:	e000      	b.n	8005ad8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005ad6:	bf00      	nop
    }
  }
}
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop

08005ae0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005afc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b40      	cmp	r3, #64	; 0x40
 8005b0c:	d108      	bne.n	8005b20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b1e:	e007      	b.n	8005b30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	60da      	str	r2, [r3, #12]
}
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	3b10      	subs	r3, #16
 8005b4c:	4a14      	ldr	r2, [pc, #80]	; (8005ba0 <DMA_CalcBaseAndBitshift+0x64>)
 8005b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b52:	091b      	lsrs	r3, r3, #4
 8005b54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b56:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <DMA_CalcBaseAndBitshift+0x68>)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d909      	bls.n	8005b7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	1d1a      	adds	r2, r3, #4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	659a      	str	r2, [r3, #88]	; 0x58
 8005b7c:	e007      	b.n	8005b8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	aaaaaaab 	.word	0xaaaaaaab
 8005ba4:	080146d0 	.word	0x080146d0

08005ba8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d11f      	bne.n	8005c02 <DMA_CheckFifoParam+0x5a>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d856      	bhi.n	8005c76 <DMA_CheckFifoParam+0xce>
 8005bc8:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <DMA_CheckFifoParam+0x28>)
 8005bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bce:	bf00      	nop
 8005bd0:	08005be1 	.word	0x08005be1
 8005bd4:	08005bf3 	.word	0x08005bf3
 8005bd8:	08005be1 	.word	0x08005be1
 8005bdc:	08005c77 	.word	0x08005c77
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d046      	beq.n	8005c7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bf0:	e043      	b.n	8005c7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bfa:	d140      	bne.n	8005c7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c00:	e03d      	b.n	8005c7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c0a:	d121      	bne.n	8005c50 <DMA_CheckFifoParam+0xa8>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d837      	bhi.n	8005c82 <DMA_CheckFifoParam+0xda>
 8005c12:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <DMA_CheckFifoParam+0x70>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c2f 	.word	0x08005c2f
 8005c20:	08005c29 	.word	0x08005c29
 8005c24:	08005c41 	.word	0x08005c41
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2c:	e030      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d025      	beq.n	8005c86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c3e:	e022      	b.n	8005c86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c48:	d11f      	bne.n	8005c8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c4e:	e01c      	b.n	8005c8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d903      	bls.n	8005c5e <DMA_CheckFifoParam+0xb6>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d003      	beq.n	8005c64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c5c:	e018      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
      break;
 8005c62:	e015      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00e      	beq.n	8005c8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	73fb      	strb	r3, [r7, #15]
      break;
 8005c74:	e00b      	b.n	8005c8e <DMA_CheckFifoParam+0xe6>
      break;
 8005c76:	bf00      	nop
 8005c78:	e00a      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      break;
 8005c7a:	bf00      	nop
 8005c7c:	e008      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      break;
 8005c7e:	bf00      	nop
 8005c80:	e006      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      break;
 8005c82:	bf00      	nop
 8005c84:	e004      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      break;
 8005c86:	bf00      	nop
 8005c88:	e002      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c8a:	bf00      	nop
 8005c8c:	e000      	b.n	8005c90 <DMA_CheckFifoParam+0xe8>
      break;
 8005c8e:	bf00      	nop
    }
  } 
  
  return status; 
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop

08005ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b089      	sub	sp, #36	; 0x24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	e177      	b.n	8005fac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	f040 8166 	bne.w	8005fa6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d00b      	beq.n	8005cfa <HAL_GPIO_Init+0x5a>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d007      	beq.n	8005cfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cee:	2b11      	cmp	r3, #17
 8005cf0:	d003      	beq.n	8005cfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2b12      	cmp	r3, #18
 8005cf8:	d130      	bne.n	8005d5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	2203      	movs	r2, #3
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d30:	2201      	movs	r2, #1
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 0201 	and.w	r2, r3, #1
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	2203      	movs	r2, #3
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	4013      	ands	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d003      	beq.n	8005d9c <HAL_GPIO_Init+0xfc>
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b12      	cmp	r3, #18
 8005d9a:	d123      	bne.n	8005de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	08da      	lsrs	r2, r3, #3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3208      	adds	r2, #8
 8005da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	220f      	movs	r2, #15
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	08da      	lsrs	r2, r3, #3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3208      	adds	r2, #8
 8005dde:	69b9      	ldr	r1, [r7, #24]
 8005de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	2203      	movs	r2, #3
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	43db      	mvns	r3, r3
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f003 0203 	and.w	r2, r3, #3
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80c0 	beq.w	8005fa6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	4b66      	ldr	r3, [pc, #408]	; (8005fc4 <HAL_GPIO_Init+0x324>)
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	4a65      	ldr	r2, [pc, #404]	; (8005fc4 <HAL_GPIO_Init+0x324>)
 8005e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e34:	6453      	str	r3, [r2, #68]	; 0x44
 8005e36:	4b63      	ldr	r3, [pc, #396]	; (8005fc4 <HAL_GPIO_Init+0x324>)
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e42:	4a61      	ldr	r2, [pc, #388]	; (8005fc8 <HAL_GPIO_Init+0x328>)
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	089b      	lsrs	r3, r3, #2
 8005e48:	3302      	adds	r3, #2
 8005e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	220f      	movs	r2, #15
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a58      	ldr	r2, [pc, #352]	; (8005fcc <HAL_GPIO_Init+0x32c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d037      	beq.n	8005ede <HAL_GPIO_Init+0x23e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a57      	ldr	r2, [pc, #348]	; (8005fd0 <HAL_GPIO_Init+0x330>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d031      	beq.n	8005eda <HAL_GPIO_Init+0x23a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a56      	ldr	r2, [pc, #344]	; (8005fd4 <HAL_GPIO_Init+0x334>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d02b      	beq.n	8005ed6 <HAL_GPIO_Init+0x236>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a55      	ldr	r2, [pc, #340]	; (8005fd8 <HAL_GPIO_Init+0x338>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d025      	beq.n	8005ed2 <HAL_GPIO_Init+0x232>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a54      	ldr	r2, [pc, #336]	; (8005fdc <HAL_GPIO_Init+0x33c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d01f      	beq.n	8005ece <HAL_GPIO_Init+0x22e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a53      	ldr	r2, [pc, #332]	; (8005fe0 <HAL_GPIO_Init+0x340>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d019      	beq.n	8005eca <HAL_GPIO_Init+0x22a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a52      	ldr	r2, [pc, #328]	; (8005fe4 <HAL_GPIO_Init+0x344>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d013      	beq.n	8005ec6 <HAL_GPIO_Init+0x226>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a51      	ldr	r2, [pc, #324]	; (8005fe8 <HAL_GPIO_Init+0x348>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00d      	beq.n	8005ec2 <HAL_GPIO_Init+0x222>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a50      	ldr	r2, [pc, #320]	; (8005fec <HAL_GPIO_Init+0x34c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d007      	beq.n	8005ebe <HAL_GPIO_Init+0x21e>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a4f      	ldr	r2, [pc, #316]	; (8005ff0 <HAL_GPIO_Init+0x350>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d101      	bne.n	8005eba <HAL_GPIO_Init+0x21a>
 8005eb6:	2309      	movs	r3, #9
 8005eb8:	e012      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005eba:	230a      	movs	r3, #10
 8005ebc:	e010      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	e00e      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ec2:	2307      	movs	r3, #7
 8005ec4:	e00c      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ec6:	2306      	movs	r3, #6
 8005ec8:	e00a      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005eca:	2305      	movs	r3, #5
 8005ecc:	e008      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ece:	2304      	movs	r3, #4
 8005ed0:	e006      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e004      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e002      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	f002 0203 	and.w	r2, r2, #3
 8005ee6:	0092      	lsls	r2, r2, #2
 8005ee8:	4093      	lsls	r3, r2
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ef0:	4935      	ldr	r1, [pc, #212]	; (8005fc8 <HAL_GPIO_Init+0x328>)
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	089b      	lsrs	r3, r3, #2
 8005ef6:	3302      	adds	r3, #2
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005efe:	4b3d      	ldr	r3, [pc, #244]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	43db      	mvns	r3, r3
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f22:	4a34      	ldr	r2, [pc, #208]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f28:	4b32      	ldr	r3, [pc, #200]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	43db      	mvns	r3, r3
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4013      	ands	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f4c:	4a29      	ldr	r2, [pc, #164]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f52:	4b28      	ldr	r3, [pc, #160]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f76:	4a1f      	ldr	r2, [pc, #124]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	43db      	mvns	r3, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fa0:	4a14      	ldr	r2, [pc, #80]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b0f      	cmp	r3, #15
 8005fb0:	f67f ae84 	bls.w	8005cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop
 8005fb8:	3724      	adds	r7, #36	; 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	40013800 	.word	0x40013800
 8005fcc:	40020000 	.word	0x40020000
 8005fd0:	40020400 	.word	0x40020400
 8005fd4:	40020800 	.word	0x40020800
 8005fd8:	40020c00 	.word	0x40020c00
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	40021400 	.word	0x40021400
 8005fe4:	40021800 	.word	0x40021800
 8005fe8:	40021c00 	.word	0x40021c00
 8005fec:	40022000 	.word	0x40022000
 8005ff0:	40022400 	.word	0x40022400
 8005ff4:	40013c00 	.word	0x40013c00

08005ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	887b      	ldrh	r3, [r7, #2]
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006010:	2301      	movs	r3, #1
 8006012:	73fb      	strb	r3, [r7, #15]
 8006014:	e001      	b.n	800601a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006016:	2300      	movs	r3, #0
 8006018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800601a:	7bfb      	ldrb	r3, [r7, #15]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	807b      	strh	r3, [r7, #2]
 8006034:	4613      	mov	r3, r2
 8006036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006038:	787b      	ldrb	r3, [r7, #1]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800603e:	887a      	ldrh	r2, [r7, #2]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006044:	e003      	b.n	800604e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006046:	887b      	ldrh	r3, [r7, #2]
 8006048:	041a      	lsls	r2, r3, #16
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	619a      	str	r2, [r3, #24]
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	460b      	mov	r3, r1
 8006064:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695a      	ldr	r2, [r3, #20]
 800606a:	887b      	ldrh	r3, [r7, #2]
 800606c:	401a      	ands	r2, r3
 800606e:	887b      	ldrh	r3, [r7, #2]
 8006070:	429a      	cmp	r2, r3
 8006072:	d104      	bne.n	800607e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006074:	887b      	ldrh	r3, [r7, #2]
 8006076:	041a      	lsls	r2, r3, #16
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800607c:	e002      	b.n	8006084 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800607e:	887a      	ldrh	r2, [r7, #2]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	619a      	str	r2, [r3, #24]
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800609a:	4b08      	ldr	r3, [pc, #32]	; (80060bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800609c:	695a      	ldr	r2, [r3, #20]
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d006      	beq.n	80060b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060a6:	4a05      	ldr	r2, [pc, #20]	; (80060bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060a8:	88fb      	ldrh	r3, [r7, #6]
 80060aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fd f8e2 	bl	8003278 <HAL_GPIO_EXTI_Callback>
  }
}
 80060b4:	bf00      	nop
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40013c00 	.word	0x40013c00

080060c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e12b      	b.n	800632a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fb fdf8 	bl	8001cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2224      	movs	r2, #36	; 0x24
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0201 	bic.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006112:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006122:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006124:	f001 fc48 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 8006128:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4a81      	ldr	r2, [pc, #516]	; (8006334 <HAL_I2C_Init+0x274>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d807      	bhi.n	8006144 <HAL_I2C_Init+0x84>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4a80      	ldr	r2, [pc, #512]	; (8006338 <HAL_I2C_Init+0x278>)
 8006138:	4293      	cmp	r3, r2
 800613a:	bf94      	ite	ls
 800613c:	2301      	movls	r3, #1
 800613e:	2300      	movhi	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	e006      	b.n	8006152 <HAL_I2C_Init+0x92>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4a7d      	ldr	r2, [pc, #500]	; (800633c <HAL_I2C_Init+0x27c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	bf94      	ite	ls
 800614c:	2301      	movls	r3, #1
 800614e:	2300      	movhi	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e0e7      	b.n	800632a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4a78      	ldr	r2, [pc, #480]	; (8006340 <HAL_I2C_Init+0x280>)
 800615e:	fba2 2303 	umull	r2, r3, r2, r3
 8006162:	0c9b      	lsrs	r3, r3, #18
 8006164:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4a6a      	ldr	r2, [pc, #424]	; (8006334 <HAL_I2C_Init+0x274>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d802      	bhi.n	8006194 <HAL_I2C_Init+0xd4>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	3301      	adds	r3, #1
 8006192:	e009      	b.n	80061a8 <HAL_I2C_Init+0xe8>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	4a69      	ldr	r2, [pc, #420]	; (8006344 <HAL_I2C_Init+0x284>)
 80061a0:	fba2 2303 	umull	r2, r3, r2, r3
 80061a4:	099b      	lsrs	r3, r3, #6
 80061a6:	3301      	adds	r3, #1
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6812      	ldr	r2, [r2, #0]
 80061ac:	430b      	orrs	r3, r1
 80061ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80061ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	495c      	ldr	r1, [pc, #368]	; (8006334 <HAL_I2C_Init+0x274>)
 80061c4:	428b      	cmp	r3, r1
 80061c6:	d819      	bhi.n	80061fc <HAL_I2C_Init+0x13c>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	1e59      	subs	r1, r3, #1
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80061d6:	1c59      	adds	r1, r3, #1
 80061d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80061dc:	400b      	ands	r3, r1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <HAL_I2C_Init+0x138>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1e59      	subs	r1, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80061f0:	3301      	adds	r3, #1
 80061f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f6:	e051      	b.n	800629c <HAL_I2C_Init+0x1dc>
 80061f8:	2304      	movs	r3, #4
 80061fa:	e04f      	b.n	800629c <HAL_I2C_Init+0x1dc>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d111      	bne.n	8006228 <HAL_I2C_Init+0x168>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	1e58      	subs	r0, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6859      	ldr	r1, [r3, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	440b      	add	r3, r1
 8006212:	fbb0 f3f3 	udiv	r3, r0, r3
 8006216:	3301      	adds	r3, #1
 8006218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800621c:	2b00      	cmp	r3, #0
 800621e:	bf0c      	ite	eq
 8006220:	2301      	moveq	r3, #1
 8006222:	2300      	movne	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	e012      	b.n	800624e <HAL_I2C_Init+0x18e>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	1e58      	subs	r0, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6859      	ldr	r1, [r3, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	0099      	lsls	r1, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	fbb0 f3f3 	udiv	r3, r0, r3
 800623e:	3301      	adds	r3, #1
 8006240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006244:	2b00      	cmp	r3, #0
 8006246:	bf0c      	ite	eq
 8006248:	2301      	moveq	r3, #1
 800624a:	2300      	movne	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <HAL_I2C_Init+0x196>
 8006252:	2301      	movs	r3, #1
 8006254:	e022      	b.n	800629c <HAL_I2C_Init+0x1dc>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10e      	bne.n	800627c <HAL_I2C_Init+0x1bc>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1e58      	subs	r0, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6859      	ldr	r1, [r3, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	440b      	add	r3, r1
 800626c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006270:	3301      	adds	r3, #1
 8006272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627a:	e00f      	b.n	800629c <HAL_I2C_Init+0x1dc>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	1e58      	subs	r0, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6859      	ldr	r1, [r3, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	440b      	add	r3, r1
 800628a:	0099      	lsls	r1, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006292:	3301      	adds	r3, #1
 8006294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	6809      	ldr	r1, [r1, #0]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69da      	ldr	r2, [r3, #28]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80062ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6911      	ldr	r1, [r2, #16]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68d2      	ldr	r2, [r2, #12]
 80062d6:	4311      	orrs	r1, r2
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6812      	ldr	r2, [r2, #0]
 80062dc:	430b      	orrs	r3, r1
 80062de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695a      	ldr	r2, [r3, #20]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	000186a0 	.word	0x000186a0
 8006338:	001e847f 	.word	0x001e847f
 800633c:	003d08ff 	.word	0x003d08ff
 8006340:	431bde83 	.word	0x431bde83
 8006344:	10624dd3 	.word	0x10624dd3

08006348 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	4608      	mov	r0, r1
 8006352:	4611      	mov	r1, r2
 8006354:	461a      	mov	r2, r3
 8006356:	4603      	mov	r3, r0
 8006358:	817b      	strh	r3, [r7, #10]
 800635a:	460b      	mov	r3, r1
 800635c:	813b      	strh	r3, [r7, #8]
 800635e:	4613      	mov	r3, r2
 8006360:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006362:	f7fe fd57 	bl	8004e14 <HAL_GetTick>
 8006366:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b20      	cmp	r3, #32
 8006372:	f040 80d9 	bne.w	8006528 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	2319      	movs	r3, #25
 800637c:	2201      	movs	r2, #1
 800637e:	496d      	ldr	r1, [pc, #436]	; (8006534 <HAL_I2C_Mem_Write+0x1ec>)
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 fc7f 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800638c:	2302      	movs	r3, #2
 800638e:	e0cc      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_I2C_Mem_Write+0x56>
 800639a:	2302      	movs	r3, #2
 800639c:	e0c5      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d007      	beq.n	80063c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2221      	movs	r2, #33	; 0x21
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2240      	movs	r2, #64	; 0x40
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a3a      	ldr	r2, [r7, #32]
 80063ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a4d      	ldr	r2, [pc, #308]	; (8006538 <HAL_I2C_Mem_Write+0x1f0>)
 8006404:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006406:	88f8      	ldrh	r0, [r7, #6]
 8006408:	893a      	ldrh	r2, [r7, #8]
 800640a:	8979      	ldrh	r1, [r7, #10]
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	4603      	mov	r3, r0
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fab6 	bl	8006988 <I2C_RequestMemoryWrite>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d052      	beq.n	80064c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e081      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fd00 	bl	8006e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00d      	beq.n	8006452 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	2b04      	cmp	r3, #4
 800643c:	d107      	bne.n	800644e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800644c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e06b      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	781a      	ldrb	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b04      	cmp	r3, #4
 800648e:	d11b      	bne.n	80064c8 <HAL_I2C_Mem_Write+0x180>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006494:	2b00      	cmp	r3, #0
 8006496:	d017      	beq.n	80064c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	781a      	ldrb	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1aa      	bne.n	8006426 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fcec 	bl	8006eb2 <I2C_WaitOnBTFFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00d      	beq.n	80064fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d107      	bne.n	80064f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e016      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	e000      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006528:	2302      	movs	r3, #2
  }
}
 800652a:	4618      	mov	r0, r3
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	00100002 	.word	0x00100002
 8006538:	ffff0000 	.word	0xffff0000

0800653c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08c      	sub	sp, #48	; 0x30
 8006540:	af02      	add	r7, sp, #8
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	4608      	mov	r0, r1
 8006546:	4611      	mov	r1, r2
 8006548:	461a      	mov	r2, r3
 800654a:	4603      	mov	r3, r0
 800654c:	817b      	strh	r3, [r7, #10]
 800654e:	460b      	mov	r3, r1
 8006550:	813b      	strh	r3, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006556:	f7fe fc5d 	bl	8004e14 <HAL_GetTick>
 800655a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b20      	cmp	r3, #32
 8006566:	f040 8208 	bne.w	800697a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	2319      	movs	r3, #25
 8006570:	2201      	movs	r2, #1
 8006572:	497b      	ldr	r1, [pc, #492]	; (8006760 <HAL_I2C_Mem_Read+0x224>)
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fb85 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006580:	2302      	movs	r3, #2
 8006582:	e1fb      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_I2C_Mem_Read+0x56>
 800658e:	2302      	movs	r3, #2
 8006590:	e1f4      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d007      	beq.n	80065b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2222      	movs	r2, #34	; 0x22
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2240      	movs	r2, #64	; 0x40
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80065e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4a5b      	ldr	r2, [pc, #364]	; (8006764 <HAL_I2C_Mem_Read+0x228>)
 80065f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065fa:	88f8      	ldrh	r0, [r7, #6]
 80065fc:	893a      	ldrh	r2, [r7, #8]
 80065fe:	8979      	ldrh	r1, [r7, #10]
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	4603      	mov	r3, r0
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fa52 	bl	8006ab4 <I2C_RequestMemoryRead>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e1b0      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661e:	2b00      	cmp	r3, #0
 8006620:	d113      	bne.n	800664a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006622:	2300      	movs	r3, #0
 8006624:	623b      	str	r3, [r7, #32]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	623b      	str	r3, [r7, #32]
 8006636:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e184      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664e:	2b01      	cmp	r3, #1
 8006650:	d11b      	bne.n	800668a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006660:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	61fb      	str	r3, [r7, #28]
 8006676:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	e164      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668e:	2b02      	cmp	r3, #2
 8006690:	d11b      	bne.n	80066ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066b2:	2300      	movs	r3, #0
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	e144      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80066e0:	e138      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	f200 80f1 	bhi.w	80068ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d123      	bne.n	800673c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 fc1b 	bl	8006f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e139      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	855a      	strh	r2, [r3, #42]	; 0x2a
 800673a:	e10b      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006740:	2b02      	cmp	r3, #2
 8006742:	d14e      	bne.n	80067e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	2200      	movs	r2, #0
 800674c:	4906      	ldr	r1, [pc, #24]	; (8006768 <HAL_I2C_Mem_Read+0x22c>)
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 fa98 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e10e      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
 800675e:	bf00      	nop
 8006760:	00100002 	.word	0x00100002
 8006764:	ffff0000 	.word	0xffff0000
 8006768:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e0:	e0b8      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e8:	2200      	movs	r2, #0
 80067ea:	4966      	ldr	r1, [pc, #408]	; (8006984 <HAL_I2C_Mem_Read+0x448>)
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 fa49 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e0bf      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800680a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	2200      	movs	r2, #0
 8006846:	494f      	ldr	r1, [pc, #316]	; (8006984 <HAL_I2C_Mem_Read+0x448>)
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fa1b 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e091      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068cc:	e042      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 fb2e 	bl	8006f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e04c      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	2b04      	cmp	r3, #4
 8006920:	d118      	bne.n	8006954 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006958:	2b00      	cmp	r3, #0
 800695a:	f47f aec2 	bne.w	80066e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e000      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800697a:	2302      	movs	r3, #2
  }
}
 800697c:	4618      	mov	r0, r3
 800697e:	3728      	adds	r7, #40	; 0x28
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	00010004 	.word	0x00010004

08006988 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	4608      	mov	r0, r1
 8006992:	4611      	mov	r1, r2
 8006994:	461a      	mov	r2, r3
 8006996:	4603      	mov	r3, r0
 8006998:	817b      	strh	r3, [r7, #10]
 800699a:	460b      	mov	r3, r1
 800699c:	813b      	strh	r3, [r7, #8]
 800699e:	4613      	mov	r3, r2
 80069a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 f960 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00d      	beq.n	80069e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d8:	d103      	bne.n	80069e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e05f      	b.n	8006aa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069e6:	897b      	ldrh	r3, [r7, #10]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	6a3a      	ldr	r2, [r7, #32]
 80069fa:	492d      	ldr	r1, [pc, #180]	; (8006ab0 <I2C_RequestMemoryWrite+0x128>)
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 f998 	bl	8006d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e04c      	b.n	8006aa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a24:	6a39      	ldr	r1, [r7, #32]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fa02 	bl	8006e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00d      	beq.n	8006a4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d107      	bne.n	8006a4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e02b      	b.n	8006aa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a4e:	88fb      	ldrh	r3, [r7, #6]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d105      	bne.n	8006a60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a54:	893b      	ldrh	r3, [r7, #8]
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	611a      	str	r2, [r3, #16]
 8006a5e:	e021      	b.n	8006aa4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a60:	893b      	ldrh	r3, [r7, #8]
 8006a62:	0a1b      	lsrs	r3, r3, #8
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a70:	6a39      	ldr	r1, [r7, #32]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f9dc 	bl	8006e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00d      	beq.n	8006a9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d107      	bne.n	8006a96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e005      	b.n	8006aa6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a9a:	893b      	ldrh	r3, [r7, #8]
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	00010002 	.word	0x00010002

08006ab4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	4608      	mov	r0, r1
 8006abe:	4611      	mov	r1, r2
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	817b      	strh	r3, [r7, #10]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	813b      	strh	r3, [r7, #8]
 8006aca:	4613      	mov	r3, r2
 8006acc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006adc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 f8c2 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00d      	beq.n	8006b22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b14:	d103      	bne.n	8006b1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e0aa      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b22:	897b      	ldrh	r3, [r7, #10]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	6a3a      	ldr	r2, [r7, #32]
 8006b36:	4952      	ldr	r1, [pc, #328]	; (8006c80 <I2C_RequestMemoryRead+0x1cc>)
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f8fa 	bl	8006d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e097      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b48:	2300      	movs	r3, #0
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b60:	6a39      	ldr	r1, [r7, #32]
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 f964 	bl	8006e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00d      	beq.n	8006b8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d107      	bne.n	8006b86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e076      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d105      	bne.n	8006b9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b90:	893b      	ldrh	r3, [r7, #8]
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	611a      	str	r2, [r3, #16]
 8006b9a:	e021      	b.n	8006be0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b9c:	893b      	ldrh	r3, [r7, #8]
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bac:	6a39      	ldr	r1, [r7, #32]
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 f93e 	bl	8006e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00d      	beq.n	8006bd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d107      	bne.n	8006bd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e050      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bd6:	893b      	ldrh	r3, [r7, #8]
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be2:	6a39      	ldr	r1, [r7, #32]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f923 	bl	8006e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00d      	beq.n	8006c0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d107      	bne.n	8006c08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e035      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f82b 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00d      	beq.n	8006c50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c42:	d103      	bne.n	8006c4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e013      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c50:	897b      	ldrh	r3, [r7, #10]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	f043 0301 	orr.w	r3, r3, #1
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	6a3a      	ldr	r2, [r7, #32]
 8006c64:	4906      	ldr	r1, [pc, #24]	; (8006c80 <I2C_RequestMemoryRead+0x1cc>)
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f863 	bl	8006d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e000      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	00010002 	.word	0x00010002

08006c84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	4613      	mov	r3, r2
 8006c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c94:	e025      	b.n	8006ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d021      	beq.n	8006ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9e:	f7fe f8b9 	bl	8004e14 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d302      	bcc.n	8006cb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d116      	bne.n	8006ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	f043 0220 	orr.w	r2, r3, #32
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e023      	b.n	8006d2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	0c1b      	lsrs	r3, r3, #16
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d10d      	bne.n	8006d08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	43da      	mvns	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bf0c      	ite	eq
 8006cfe:	2301      	moveq	r3, #1
 8006d00:	2300      	movne	r3, #0
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	e00c      	b.n	8006d22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	43da      	mvns	r2, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4013      	ands	r3, r2
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	bf0c      	ite	eq
 8006d1a:	2301      	moveq	r3, #1
 8006d1c:	2300      	movne	r3, #0
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d0b6      	beq.n	8006c96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	60f8      	str	r0, [r7, #12]
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	607a      	str	r2, [r7, #4]
 8006d3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d40:	e051      	b.n	8006de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d50:	d123      	bne.n	8006d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	f043 0204 	orr.w	r2, r3, #4
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e046      	b.n	8006e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da0:	d021      	beq.n	8006de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da2:	f7fe f837 	bl	8004e14 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d302      	bcc.n	8006db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d116      	bne.n	8006de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f043 0220 	orr.w	r2, r3, #32
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e020      	b.n	8006e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	0c1b      	lsrs	r3, r3, #16
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d10c      	bne.n	8006e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	43da      	mvns	r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf14      	ite	ne
 8006e02:	2301      	movne	r3, #1
 8006e04:	2300      	moveq	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	e00b      	b.n	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	43da      	mvns	r2, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	4013      	ands	r3, r2
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	bf14      	ite	ne
 8006e1c:	2301      	movne	r3, #1
 8006e1e:	2300      	moveq	r3, #0
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d18d      	bne.n	8006d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e3c:	e02d      	b.n	8006e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 f8ce 	bl	8006fe0 <I2C_IsAcknowledgeFailed>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e02d      	b.n	8006eaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e54:	d021      	beq.n	8006e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e56:	f7fd ffdd 	bl	8004e14 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d302      	bcc.n	8006e6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d116      	bne.n	8006e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	f043 0220 	orr.w	r2, r3, #32
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e007      	b.n	8006eaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea4:	2b80      	cmp	r3, #128	; 0x80
 8006ea6:	d1ca      	bne.n	8006e3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ebe:	e02d      	b.n	8006f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f88d 	bl	8006fe0 <I2C_IsAcknowledgeFailed>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e02d      	b.n	8006f2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d021      	beq.n	8006f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed8:	f7fd ff9c 	bl	8004e14 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d302      	bcc.n	8006eee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d116      	bne.n	8006f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	f043 0220 	orr.w	r2, r3, #32
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e007      	b.n	8006f2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d1ca      	bne.n	8006ec0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f40:	e042      	b.n	8006fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	2b10      	cmp	r3, #16
 8006f4e:	d119      	bne.n	8006f84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f06f 0210 	mvn.w	r2, #16
 8006f58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e029      	b.n	8006fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f84:	f7fd ff46 	bl	8004e14 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d302      	bcc.n	8006f9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d116      	bne.n	8006fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb4:	f043 0220 	orr.w	r2, r3, #32
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e007      	b.n	8006fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd2:	2b40      	cmp	r3, #64	; 0x40
 8006fd4:	d1b5      	bne.n	8006f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff6:	d11b      	bne.n	8007030 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007000:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	f043 0204 	orr.w	r2, r3, #4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e000      	b.n	8007032 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b20      	cmp	r3, #32
 8007052:	d129      	bne.n	80070a8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2224      	movs	r2, #36	; 0x24
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0210 	bic.w	r2, r2, #16
 800707a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e000      	b.n	80070aa <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80070a8:	2302      	movs	r3, #2
  }
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b085      	sub	sp, #20
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d12a      	bne.n	8007126 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2224      	movs	r2, #36	; 0x24
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0201 	bic.w	r2, r2, #1
 80070e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80070f0:	89fb      	ldrh	r3, [r7, #14]
 80070f2:	f023 030f 	bic.w	r3, r3, #15
 80070f6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	89fb      	ldrh	r3, [r7, #14]
 80070fe:	4313      	orrs	r3, r2
 8007100:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	89fa      	ldrh	r2, [r7, #14]
 8007108:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0201 	orr.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	e000      	b.n	8007128 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007126:	2302      	movs	r3, #2
  }
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e25b      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d075      	beq.n	800723e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007152:	4ba3      	ldr	r3, [pc, #652]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 030c 	and.w	r3, r3, #12
 800715a:	2b04      	cmp	r3, #4
 800715c:	d00c      	beq.n	8007178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800715e:	4ba0      	ldr	r3, [pc, #640]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007166:	2b08      	cmp	r3, #8
 8007168:	d112      	bne.n	8007190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800716a:	4b9d      	ldr	r3, [pc, #628]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007176:	d10b      	bne.n	8007190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007178:	4b99      	ldr	r3, [pc, #612]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d05b      	beq.n	800723c <HAL_RCC_OscConfig+0x108>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d157      	bne.n	800723c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e236      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007198:	d106      	bne.n	80071a8 <HAL_RCC_OscConfig+0x74>
 800719a:	4b91      	ldr	r3, [pc, #580]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a90      	ldr	r2, [pc, #576]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80071a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	e01d      	b.n	80071e4 <HAL_RCC_OscConfig+0xb0>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071b0:	d10c      	bne.n	80071cc <HAL_RCC_OscConfig+0x98>
 80071b2:	4b8b      	ldr	r3, [pc, #556]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a8a      	ldr	r2, [pc, #552]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80071b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	4b88      	ldr	r3, [pc, #544]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a87      	ldr	r2, [pc, #540]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80071c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	e00b      	b.n	80071e4 <HAL_RCC_OscConfig+0xb0>
 80071cc:	4b84      	ldr	r3, [pc, #528]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a83      	ldr	r2, [pc, #524]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80071d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	4b81      	ldr	r3, [pc, #516]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a80      	ldr	r2, [pc, #512]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80071de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d013      	beq.n	8007214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ec:	f7fd fe12 	bl	8004e14 <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071f4:	f7fd fe0e 	bl	8004e14 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b64      	cmp	r3, #100	; 0x64
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e1fb      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007206:	4b76      	ldr	r3, [pc, #472]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0f0      	beq.n	80071f4 <HAL_RCC_OscConfig+0xc0>
 8007212:	e014      	b.n	800723e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007214:	f7fd fdfe 	bl	8004e14 <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800721c:	f7fd fdfa 	bl	8004e14 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b64      	cmp	r3, #100	; 0x64
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e1e7      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800722e:	4b6c      	ldr	r3, [pc, #432]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f0      	bne.n	800721c <HAL_RCC_OscConfig+0xe8>
 800723a:	e000      	b.n	800723e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800723c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d063      	beq.n	8007312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800724a:	4b65      	ldr	r3, [pc, #404]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 030c 	and.w	r3, r3, #12
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00b      	beq.n	800726e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007256:	4b62      	ldr	r3, [pc, #392]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800725e:	2b08      	cmp	r3, #8
 8007260:	d11c      	bne.n	800729c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007262:	4b5f      	ldr	r3, [pc, #380]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d116      	bne.n	800729c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800726e:	4b5c      	ldr	r3, [pc, #368]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d005      	beq.n	8007286 <HAL_RCC_OscConfig+0x152>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d001      	beq.n	8007286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e1bb      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007286:	4b56      	ldr	r3, [pc, #344]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	4952      	ldr	r1, [pc, #328]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 8007296:	4313      	orrs	r3, r2
 8007298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800729a:	e03a      	b.n	8007312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d020      	beq.n	80072e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072a4:	4b4f      	ldr	r3, [pc, #316]	; (80073e4 <HAL_RCC_OscConfig+0x2b0>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072aa:	f7fd fdb3 	bl	8004e14 <HAL_GetTick>
 80072ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072b2:	f7fd fdaf 	bl	8004e14 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e19c      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072c4:	4b46      	ldr	r3, [pc, #280]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0f0      	beq.n	80072b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072d0:	4b43      	ldr	r3, [pc, #268]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	00db      	lsls	r3, r3, #3
 80072de:	4940      	ldr	r1, [pc, #256]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	600b      	str	r3, [r1, #0]
 80072e4:	e015      	b.n	8007312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072e6:	4b3f      	ldr	r3, [pc, #252]	; (80073e4 <HAL_RCC_OscConfig+0x2b0>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ec:	f7fd fd92 	bl	8004e14 <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072f4:	f7fd fd8e 	bl	8004e14 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e17b      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007306:	4b36      	ldr	r3, [pc, #216]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f0      	bne.n	80072f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d030      	beq.n	8007380 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d016      	beq.n	8007354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007326:	4b30      	ldr	r3, [pc, #192]	; (80073e8 <HAL_RCC_OscConfig+0x2b4>)
 8007328:	2201      	movs	r2, #1
 800732a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732c:	f7fd fd72 	bl	8004e14 <HAL_GetTick>
 8007330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007332:	e008      	b.n	8007346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007334:	f7fd fd6e 	bl	8004e14 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	2b02      	cmp	r3, #2
 8007340:	d901      	bls.n	8007346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e15b      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007346:	4b26      	ldr	r3, [pc, #152]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 8007348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0f0      	beq.n	8007334 <HAL_RCC_OscConfig+0x200>
 8007352:	e015      	b.n	8007380 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007354:	4b24      	ldr	r3, [pc, #144]	; (80073e8 <HAL_RCC_OscConfig+0x2b4>)
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800735a:	f7fd fd5b 	bl	8004e14 <HAL_GetTick>
 800735e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007360:	e008      	b.n	8007374 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007362:	f7fd fd57 	bl	8004e14 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d901      	bls.n	8007374 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e144      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007374:	4b1a      	ldr	r3, [pc, #104]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 8007376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1f0      	bne.n	8007362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 80a0 	beq.w	80074ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007392:	4b13      	ldr	r3, [pc, #76]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10f      	bne.n	80073be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800739e:	2300      	movs	r3, #0
 80073a0:	60bb      	str	r3, [r7, #8]
 80073a2:	4b0f      	ldr	r3, [pc, #60]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	4a0e      	ldr	r2, [pc, #56]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80073a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ac:	6413      	str	r3, [r2, #64]	; 0x40
 80073ae:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <HAL_RCC_OscConfig+0x2ac>)
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073b6:	60bb      	str	r3, [r7, #8]
 80073b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ba:	2301      	movs	r3, #1
 80073bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073be:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <HAL_RCC_OscConfig+0x2b8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d121      	bne.n	800740e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073ca:	4b08      	ldr	r3, [pc, #32]	; (80073ec <HAL_RCC_OscConfig+0x2b8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a07      	ldr	r2, [pc, #28]	; (80073ec <HAL_RCC_OscConfig+0x2b8>)
 80073d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073d6:	f7fd fd1d 	bl	8004e14 <HAL_GetTick>
 80073da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073dc:	e011      	b.n	8007402 <HAL_RCC_OscConfig+0x2ce>
 80073de:	bf00      	nop
 80073e0:	40023800 	.word	0x40023800
 80073e4:	42470000 	.word	0x42470000
 80073e8:	42470e80 	.word	0x42470e80
 80073ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073f0:	f7fd fd10 	bl	8004e14 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e0fd      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007402:	4b81      	ldr	r3, [pc, #516]	; (8007608 <HAL_RCC_OscConfig+0x4d4>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0f0      	beq.n	80073f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d106      	bne.n	8007424 <HAL_RCC_OscConfig+0x2f0>
 8007416:	4b7d      	ldr	r3, [pc, #500]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 8007418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741a:	4a7c      	ldr	r2, [pc, #496]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 800741c:	f043 0301 	orr.w	r3, r3, #1
 8007420:	6713      	str	r3, [r2, #112]	; 0x70
 8007422:	e01c      	b.n	800745e <HAL_RCC_OscConfig+0x32a>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	2b05      	cmp	r3, #5
 800742a:	d10c      	bne.n	8007446 <HAL_RCC_OscConfig+0x312>
 800742c:	4b77      	ldr	r3, [pc, #476]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 800742e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007430:	4a76      	ldr	r2, [pc, #472]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 8007432:	f043 0304 	orr.w	r3, r3, #4
 8007436:	6713      	str	r3, [r2, #112]	; 0x70
 8007438:	4b74      	ldr	r3, [pc, #464]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 800743a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743c:	4a73      	ldr	r2, [pc, #460]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 800743e:	f043 0301 	orr.w	r3, r3, #1
 8007442:	6713      	str	r3, [r2, #112]	; 0x70
 8007444:	e00b      	b.n	800745e <HAL_RCC_OscConfig+0x32a>
 8007446:	4b71      	ldr	r3, [pc, #452]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 8007448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744a:	4a70      	ldr	r2, [pc, #448]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 800744c:	f023 0301 	bic.w	r3, r3, #1
 8007450:	6713      	str	r3, [r2, #112]	; 0x70
 8007452:	4b6e      	ldr	r3, [pc, #440]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 8007454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007456:	4a6d      	ldr	r2, [pc, #436]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 8007458:	f023 0304 	bic.w	r3, r3, #4
 800745c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d015      	beq.n	8007492 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007466:	f7fd fcd5 	bl	8004e14 <HAL_GetTick>
 800746a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800746c:	e00a      	b.n	8007484 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800746e:	f7fd fcd1 	bl	8004e14 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	f241 3288 	movw	r2, #5000	; 0x1388
 800747c:	4293      	cmp	r3, r2
 800747e:	d901      	bls.n	8007484 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e0bc      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007484:	4b61      	ldr	r3, [pc, #388]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 8007486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0ee      	beq.n	800746e <HAL_RCC_OscConfig+0x33a>
 8007490:	e014      	b.n	80074bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007492:	f7fd fcbf 	bl	8004e14 <HAL_GetTick>
 8007496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007498:	e00a      	b.n	80074b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800749a:	f7fd fcbb 	bl	8004e14 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d901      	bls.n	80074b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e0a6      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074b0:	4b56      	ldr	r3, [pc, #344]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 80074b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b4:	f003 0302 	and.w	r3, r3, #2
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1ee      	bne.n	800749a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d105      	bne.n	80074ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074c2:	4b52      	ldr	r3, [pc, #328]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	4a51      	ldr	r2, [pc, #324]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 80074c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 8092 	beq.w	80075fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074d8:	4b4c      	ldr	r3, [pc, #304]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 030c 	and.w	r3, r3, #12
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d05c      	beq.n	800759e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d141      	bne.n	8007570 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ec:	4b48      	ldr	r3, [pc, #288]	; (8007610 <HAL_RCC_OscConfig+0x4dc>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074f2:	f7fd fc8f 	bl	8004e14 <HAL_GetTick>
 80074f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074f8:	e008      	b.n	800750c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074fa:	f7fd fc8b 	bl	8004e14 <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	2b02      	cmp	r3, #2
 8007506:	d901      	bls.n	800750c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e078      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800750c:	4b3f      	ldr	r3, [pc, #252]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1f0      	bne.n	80074fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	69da      	ldr	r2, [r3, #28]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	019b      	lsls	r3, r3, #6
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	3b01      	subs	r3, #1
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753a:	061b      	lsls	r3, r3, #24
 800753c:	4933      	ldr	r1, [pc, #204]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 800753e:	4313      	orrs	r3, r2
 8007540:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007542:	4b33      	ldr	r3, [pc, #204]	; (8007610 <HAL_RCC_OscConfig+0x4dc>)
 8007544:	2201      	movs	r2, #1
 8007546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007548:	f7fd fc64 	bl	8004e14 <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007550:	f7fd fc60 	bl	8004e14 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e04d      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007562:	4b2a      	ldr	r3, [pc, #168]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0f0      	beq.n	8007550 <HAL_RCC_OscConfig+0x41c>
 800756e:	e045      	b.n	80075fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007570:	4b27      	ldr	r3, [pc, #156]	; (8007610 <HAL_RCC_OscConfig+0x4dc>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007576:	f7fd fc4d 	bl	8004e14 <HAL_GetTick>
 800757a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800757c:	e008      	b.n	8007590 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800757e:	f7fd fc49 	bl	8004e14 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	2b02      	cmp	r3, #2
 800758a:	d901      	bls.n	8007590 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e036      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007590:	4b1e      	ldr	r3, [pc, #120]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1f0      	bne.n	800757e <HAL_RCC_OscConfig+0x44a>
 800759c:	e02e      	b.n	80075fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d101      	bne.n	80075aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e029      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075aa:	4b18      	ldr	r3, [pc, #96]	; (800760c <HAL_RCC_OscConfig+0x4d8>)
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d11c      	bne.n	80075f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d115      	bne.n	80075f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075d2:	4013      	ands	r3, r2
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075d8:	4293      	cmp	r3, r2
 80075da:	d10d      	bne.n	80075f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d106      	bne.n	80075f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d001      	beq.n	80075fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	40007000 	.word	0x40007000
 800760c:	40023800 	.word	0x40023800
 8007610:	42470060 	.word	0x42470060

08007614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e0cc      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007628:	4b68      	ldr	r3, [pc, #416]	; (80077cc <HAL_RCC_ClockConfig+0x1b8>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 030f 	and.w	r3, r3, #15
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d90c      	bls.n	8007650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007636:	4b65      	ldr	r3, [pc, #404]	; (80077cc <HAL_RCC_ClockConfig+0x1b8>)
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800763e:	4b63      	ldr	r3, [pc, #396]	; (80077cc <HAL_RCC_ClockConfig+0x1b8>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d001      	beq.n	8007650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e0b8      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d020      	beq.n	800769e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007668:	4b59      	ldr	r3, [pc, #356]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	4a58      	ldr	r2, [pc, #352]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 800766e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007672:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b00      	cmp	r3, #0
 800767e:	d005      	beq.n	800768c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007680:	4b53      	ldr	r3, [pc, #332]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	4a52      	ldr	r2, [pc, #328]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800768a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800768c:	4b50      	ldr	r3, [pc, #320]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	494d      	ldr	r1, [pc, #308]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 800769a:	4313      	orrs	r3, r2
 800769c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d044      	beq.n	8007734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d107      	bne.n	80076c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076b2:	4b47      	ldr	r3, [pc, #284]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d119      	bne.n	80076f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e07f      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d003      	beq.n	80076d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d107      	bne.n	80076e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076d2:	4b3f      	ldr	r3, [pc, #252]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d109      	bne.n	80076f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e06f      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076e2:	4b3b      	ldr	r3, [pc, #236]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e067      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076f2:	4b37      	ldr	r3, [pc, #220]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f023 0203 	bic.w	r2, r3, #3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	4934      	ldr	r1, [pc, #208]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007700:	4313      	orrs	r3, r2
 8007702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007704:	f7fd fb86 	bl	8004e14 <HAL_GetTick>
 8007708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800770a:	e00a      	b.n	8007722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800770c:	f7fd fb82 	bl	8004e14 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	f241 3288 	movw	r2, #5000	; 0x1388
 800771a:	4293      	cmp	r3, r2
 800771c:	d901      	bls.n	8007722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e04f      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007722:	4b2b      	ldr	r3, [pc, #172]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 020c 	and.w	r2, r3, #12
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	429a      	cmp	r2, r3
 8007732:	d1eb      	bne.n	800770c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007734:	4b25      	ldr	r3, [pc, #148]	; (80077cc <HAL_RCC_ClockConfig+0x1b8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 030f 	and.w	r3, r3, #15
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	429a      	cmp	r2, r3
 8007740:	d20c      	bcs.n	800775c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007742:	4b22      	ldr	r3, [pc, #136]	; (80077cc <HAL_RCC_ClockConfig+0x1b8>)
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800774a:	4b20      	ldr	r3, [pc, #128]	; (80077cc <HAL_RCC_ClockConfig+0x1b8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d001      	beq.n	800775c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e032      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b00      	cmp	r3, #0
 8007766:	d008      	beq.n	800777a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007768:	4b19      	ldr	r3, [pc, #100]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	4916      	ldr	r1, [pc, #88]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007776:	4313      	orrs	r3, r2
 8007778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007786:	4b12      	ldr	r3, [pc, #72]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	490e      	ldr	r1, [pc, #56]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007796:	4313      	orrs	r3, r2
 8007798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800779a:	f000 f821 	bl	80077e0 <HAL_RCC_GetSysClockFreq>
 800779e:	4602      	mov	r2, r0
 80077a0:	4b0b      	ldr	r3, [pc, #44]	; (80077d0 <HAL_RCC_ClockConfig+0x1bc>)
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	091b      	lsrs	r3, r3, #4
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	490a      	ldr	r1, [pc, #40]	; (80077d4 <HAL_RCC_ClockConfig+0x1c0>)
 80077ac:	5ccb      	ldrb	r3, [r1, r3]
 80077ae:	fa22 f303 	lsr.w	r3, r2, r3
 80077b2:	4a09      	ldr	r2, [pc, #36]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 80077b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80077b6:	4b09      	ldr	r3, [pc, #36]	; (80077dc <HAL_RCC_ClockConfig+0x1c8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fd fae6 	bl	8004d8c <HAL_InitTick>

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	40023c00 	.word	0x40023c00
 80077d0:	40023800 	.word	0x40023800
 80077d4:	080146b8 	.word	0x080146b8
 80077d8:	20000004 	.word	0x20000004
 80077dc:	20000008 	.word	0x20000008

080077e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	607b      	str	r3, [r7, #4]
 80077ec:	2300      	movs	r3, #0
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	2300      	movs	r3, #0
 80077f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077f8:	4b67      	ldr	r3, [pc, #412]	; (8007998 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f003 030c 	and.w	r3, r3, #12
 8007800:	2b08      	cmp	r3, #8
 8007802:	d00d      	beq.n	8007820 <HAL_RCC_GetSysClockFreq+0x40>
 8007804:	2b08      	cmp	r3, #8
 8007806:	f200 80bd 	bhi.w	8007984 <HAL_RCC_GetSysClockFreq+0x1a4>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_RCC_GetSysClockFreq+0x34>
 800780e:	2b04      	cmp	r3, #4
 8007810:	d003      	beq.n	800781a <HAL_RCC_GetSysClockFreq+0x3a>
 8007812:	e0b7      	b.n	8007984 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007814:	4b61      	ldr	r3, [pc, #388]	; (800799c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007816:	60bb      	str	r3, [r7, #8]
       break;
 8007818:	e0b7      	b.n	800798a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800781a:	4b60      	ldr	r3, [pc, #384]	; (800799c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800781c:	60bb      	str	r3, [r7, #8]
      break;
 800781e:	e0b4      	b.n	800798a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007820:	4b5d      	ldr	r3, [pc, #372]	; (8007998 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007828:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800782a:	4b5b      	ldr	r3, [pc, #364]	; (8007998 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d04d      	beq.n	80078d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007836:	4b58      	ldr	r3, [pc, #352]	; (8007998 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	099b      	lsrs	r3, r3, #6
 800783c:	461a      	mov	r2, r3
 800783e:	f04f 0300 	mov.w	r3, #0
 8007842:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007846:	f04f 0100 	mov.w	r1, #0
 800784a:	ea02 0800 	and.w	r8, r2, r0
 800784e:	ea03 0901 	and.w	r9, r3, r1
 8007852:	4640      	mov	r0, r8
 8007854:	4649      	mov	r1, r9
 8007856:	f04f 0200 	mov.w	r2, #0
 800785a:	f04f 0300 	mov.w	r3, #0
 800785e:	014b      	lsls	r3, r1, #5
 8007860:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007864:	0142      	lsls	r2, r0, #5
 8007866:	4610      	mov	r0, r2
 8007868:	4619      	mov	r1, r3
 800786a:	ebb0 0008 	subs.w	r0, r0, r8
 800786e:	eb61 0109 	sbc.w	r1, r1, r9
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	f04f 0300 	mov.w	r3, #0
 800787a:	018b      	lsls	r3, r1, #6
 800787c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007880:	0182      	lsls	r2, r0, #6
 8007882:	1a12      	subs	r2, r2, r0
 8007884:	eb63 0301 	sbc.w	r3, r3, r1
 8007888:	f04f 0000 	mov.w	r0, #0
 800788c:	f04f 0100 	mov.w	r1, #0
 8007890:	00d9      	lsls	r1, r3, #3
 8007892:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007896:	00d0      	lsls	r0, r2, #3
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	eb12 0208 	adds.w	r2, r2, r8
 80078a0:	eb43 0309 	adc.w	r3, r3, r9
 80078a4:	f04f 0000 	mov.w	r0, #0
 80078a8:	f04f 0100 	mov.w	r1, #0
 80078ac:	0299      	lsls	r1, r3, #10
 80078ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80078b2:	0290      	lsls	r0, r2, #10
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4610      	mov	r0, r2
 80078ba:	4619      	mov	r1, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	461a      	mov	r2, r3
 80078c0:	f04f 0300 	mov.w	r3, #0
 80078c4:	f7f9 fa00 	bl	8000cc8 <__aeabi_uldivmod>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4613      	mov	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	e04a      	b.n	8007968 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078d2:	4b31      	ldr	r3, [pc, #196]	; (8007998 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	099b      	lsrs	r3, r3, #6
 80078d8:	461a      	mov	r2, r3
 80078da:	f04f 0300 	mov.w	r3, #0
 80078de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80078e2:	f04f 0100 	mov.w	r1, #0
 80078e6:	ea02 0400 	and.w	r4, r2, r0
 80078ea:	ea03 0501 	and.w	r5, r3, r1
 80078ee:	4620      	mov	r0, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	f04f 0200 	mov.w	r2, #0
 80078f6:	f04f 0300 	mov.w	r3, #0
 80078fa:	014b      	lsls	r3, r1, #5
 80078fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007900:	0142      	lsls	r2, r0, #5
 8007902:	4610      	mov	r0, r2
 8007904:	4619      	mov	r1, r3
 8007906:	1b00      	subs	r0, r0, r4
 8007908:	eb61 0105 	sbc.w	r1, r1, r5
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	f04f 0300 	mov.w	r3, #0
 8007914:	018b      	lsls	r3, r1, #6
 8007916:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800791a:	0182      	lsls	r2, r0, #6
 800791c:	1a12      	subs	r2, r2, r0
 800791e:	eb63 0301 	sbc.w	r3, r3, r1
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f04f 0100 	mov.w	r1, #0
 800792a:	00d9      	lsls	r1, r3, #3
 800792c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007930:	00d0      	lsls	r0, r2, #3
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	1912      	adds	r2, r2, r4
 8007938:	eb45 0303 	adc.w	r3, r5, r3
 800793c:	f04f 0000 	mov.w	r0, #0
 8007940:	f04f 0100 	mov.w	r1, #0
 8007944:	0299      	lsls	r1, r3, #10
 8007946:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800794a:	0290      	lsls	r0, r2, #10
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4610      	mov	r0, r2
 8007952:	4619      	mov	r1, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	461a      	mov	r2, r3
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	f7f9 f9b4 	bl	8000cc8 <__aeabi_uldivmod>
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	4613      	mov	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007968:	4b0b      	ldr	r3, [pc, #44]	; (8007998 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	0c1b      	lsrs	r3, r3, #16
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	3301      	adds	r3, #1
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007980:	60bb      	str	r3, [r7, #8]
      break;
 8007982:	e002      	b.n	800798a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007984:	4b05      	ldr	r3, [pc, #20]	; (800799c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007986:	60bb      	str	r3, [r7, #8]
      break;
 8007988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800798a:	68bb      	ldr	r3, [r7, #8]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007996:	bf00      	nop
 8007998:	40023800 	.word	0x40023800
 800799c:	00f42400 	.word	0x00f42400

080079a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079a4:	4b03      	ldr	r3, [pc, #12]	; (80079b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80079a6:	681b      	ldr	r3, [r3, #0]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	20000004 	.word	0x20000004

080079b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80079bc:	f7ff fff0 	bl	80079a0 <HAL_RCC_GetHCLKFreq>
 80079c0:	4602      	mov	r2, r0
 80079c2:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	0a9b      	lsrs	r3, r3, #10
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	4903      	ldr	r1, [pc, #12]	; (80079dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80079ce:	5ccb      	ldrb	r3, [r1, r3]
 80079d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	40023800 	.word	0x40023800
 80079dc:	080146c8 	.word	0x080146c8

080079e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80079e4:	f7ff ffdc 	bl	80079a0 <HAL_RCC_GetHCLKFreq>
 80079e8:	4602      	mov	r2, r0
 80079ea:	4b05      	ldr	r3, [pc, #20]	; (8007a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	0b5b      	lsrs	r3, r3, #13
 80079f0:	f003 0307 	and.w	r3, r3, #7
 80079f4:	4903      	ldr	r1, [pc, #12]	; (8007a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079f6:	5ccb      	ldrb	r3, [r1, r3]
 80079f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	40023800 	.word	0x40023800
 8007a04:	080146c8 	.word	0x080146c8

08007a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10b      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d105      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d075      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a3c:	4bad      	ldr	r3, [pc, #692]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a42:	f7fd f9e7 	bl	8004e14 <HAL_GetTick>
 8007a46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a48:	e008      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a4a:	f7fd f9e3 	bl	8004e14 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d901      	bls.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e18b      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a5c:	4ba6      	ldr	r3, [pc, #664]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1f0      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d009      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	019a      	lsls	r2, r3, #6
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	071b      	lsls	r3, r3, #28
 8007a80:	499d      	ldr	r1, [pc, #628]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01f      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a94:	4b98      	ldr	r3, [pc, #608]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a9a:	0f1b      	lsrs	r3, r3, #28
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	019a      	lsls	r2, r3, #6
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	061b      	lsls	r3, r3, #24
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	071b      	lsls	r3, r3, #28
 8007ab4:	4990      	ldr	r1, [pc, #576]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007abc:	4b8e      	ldr	r3, [pc, #568]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ac2:	f023 021f 	bic.w	r2, r3, #31
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	498a      	ldr	r1, [pc, #552]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00d      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	019a      	lsls	r2, r3, #6
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	061b      	lsls	r3, r3, #24
 8007aec:	431a      	orrs	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	071b      	lsls	r3, r3, #28
 8007af4:	4980      	ldr	r1, [pc, #512]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007afc:	4b7d      	ldr	r3, [pc, #500]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007afe:	2201      	movs	r2, #1
 8007b00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b02:	f7fd f987 	bl	8004e14 <HAL_GetTick>
 8007b06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b08:	e008      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b0a:	f7fd f983 	bl	8004e14 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d901      	bls.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e12b      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b1c:	4b76      	ldr	r3, [pc, #472]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0f0      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d105      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d079      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b40:	4b6e      	ldr	r3, [pc, #440]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b46:	f7fd f965 	bl	8004e14 <HAL_GetTick>
 8007b4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b4c:	e008      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007b4e:	f7fd f961 	bl	8004e14 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e109      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b60:	4b65      	ldr	r3, [pc, #404]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b6c:	d0ef      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0304 	and.w	r3, r3, #4
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d020      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b7a:	4b5f      	ldr	r3, [pc, #380]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b80:	0f1b      	lsrs	r3, r3, #28
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	019a      	lsls	r2, r3, #6
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	061b      	lsls	r3, r3, #24
 8007b94:	431a      	orrs	r2, r3
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	071b      	lsls	r3, r3, #28
 8007b9a:	4957      	ldr	r1, [pc, #348]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007ba2:	4b55      	ldr	r3, [pc, #340]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ba8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	021b      	lsls	r3, r3, #8
 8007bb4:	4950      	ldr	r1, [pc, #320]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01e      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007bc8:	4b4b      	ldr	r3, [pc, #300]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bce:	0e1b      	lsrs	r3, r3, #24
 8007bd0:	f003 030f 	and.w	r3, r3, #15
 8007bd4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	019a      	lsls	r2, r3, #6
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	061b      	lsls	r3, r3, #24
 8007be0:	431a      	orrs	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	071b      	lsls	r3, r3, #28
 8007be8:	4943      	ldr	r1, [pc, #268]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007bf0:	4b41      	ldr	r3, [pc, #260]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	493e      	ldr	r1, [pc, #248]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007c06:	4b3d      	ldr	r3, [pc, #244]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c0c:	f7fd f902 	bl	8004e14 <HAL_GetTick>
 8007c10:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c12:	e008      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007c14:	f7fd f8fe 	bl	8004e14 <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e0a6      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c26:	4b34      	ldr	r3, [pc, #208]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c32:	d1ef      	bne.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0320 	and.w	r3, r3, #32
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 808d 	beq.w	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c42:	2300      	movs	r3, #0
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	4b2c      	ldr	r3, [pc, #176]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	4a2b      	ldr	r2, [pc, #172]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c50:	6413      	str	r3, [r2, #64]	; 0x40
 8007c52:	4b29      	ldr	r3, [pc, #164]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007c5e:	4b28      	ldr	r3, [pc, #160]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a27      	ldr	r2, [pc, #156]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c6a:	f7fd f8d3 	bl	8004e14 <HAL_GetTick>
 8007c6e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c70:	e008      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c72:	f7fd f8cf 	bl	8004e14 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d901      	bls.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e077      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c84:	4b1e      	ldr	r3, [pc, #120]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0f0      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c90:	4b19      	ldr	r3, [pc, #100]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c98:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d039      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d032      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cae:	4b12      	ldr	r3, [pc, #72]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007cb8:	4b12      	ldr	r3, [pc, #72]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007cba:	2201      	movs	r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007cbe:	4b11      	ldr	r3, [pc, #68]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007cc4:	4a0c      	ldr	r2, [pc, #48]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007cca:	4b0b      	ldr	r3, [pc, #44]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d11e      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007cd6:	f7fd f89d 	bl	8004e14 <HAL_GetTick>
 8007cda:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cdc:	e014      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cde:	f7fd f899 	bl	8004e14 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d90b      	bls.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e03f      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007cf4:	42470068 	.word	0x42470068
 8007cf8:	40023800 	.word	0x40023800
 8007cfc:	42470070 	.word	0x42470070
 8007d00:	40007000 	.word	0x40007000
 8007d04:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d08:	4b1c      	ldr	r3, [pc, #112]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0c:	f003 0302 	and.w	r3, r3, #2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d0e4      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d20:	d10d      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007d22:	4b16      	ldr	r3, [pc, #88]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d36:	4911      	ldr	r1, [pc, #68]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	608b      	str	r3, [r1, #8]
 8007d3c:	e005      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007d3e:	4b0f      	ldr	r3, [pc, #60]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	4a0e      	ldr	r2, [pc, #56]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d44:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007d48:	6093      	str	r3, [r2, #8]
 8007d4a:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d56:	4909      	ldr	r1, [pc, #36]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0310 	and.w	r3, r3, #16
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d004      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007d6e:	4b04      	ldr	r3, [pc, #16]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007d70:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	40023800 	.word	0x40023800
 8007d80:	424711e0 	.word	0x424711e0

08007d84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e083      	b.n	8007e9e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	7f5b      	ldrb	r3, [r3, #29]
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d105      	bne.n	8007dac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fb fe2a 	bl	8003a00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	22ca      	movs	r2, #202	; 0xca
 8007db8:	625a      	str	r2, [r3, #36]	; 0x24
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2253      	movs	r2, #83	; 0x53
 8007dc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 faa8 	bl	8008318 <RTC_EnterInitMode>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d008      	beq.n	8007de0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	22ff      	movs	r2, #255	; 0xff
 8007dd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2204      	movs	r2, #4
 8007dda:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e05e      	b.n	8007e9e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	6812      	ldr	r2, [r2, #0]
 8007dea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007df2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6899      	ldr	r1, [r3, #8]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	431a      	orrs	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	68d2      	ldr	r2, [r2, #12]
 8007e1a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6919      	ldr	r1, [r3, #16]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	041a      	lsls	r2, r3, #16
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f003 0320 	and.w	r3, r3, #32
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10e      	bne.n	8007e6c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fa3a 	bl	80082c8 <HAL_RTC_WaitForSynchro>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d008      	beq.n	8007e6c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	22ff      	movs	r2, #255	; 0xff
 8007e60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2204      	movs	r2, #4
 8007e66:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e018      	b.n	8007e9e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e7a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	22ff      	movs	r2, #255	; 0xff
 8007e94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
  }
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ea6:	b590      	push	{r4, r7, lr}
 8007ea8:	b087      	sub	sp, #28
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	7f1b      	ldrb	r3, [r3, #28]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d101      	bne.n	8007ec2 <HAL_RTC_SetTime+0x1c>
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	e0aa      	b.n	8008018 <HAL_RTC_SetTime+0x172>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d126      	bne.n	8007f22 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fa3f 	bl	8008370 <RTC_ByteToBcd2>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fa38 	bl	8008370 <RTC_ByteToBcd2>
 8007f00:	4603      	mov	r3, r0
 8007f02:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007f04:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	789b      	ldrb	r3, [r3, #2]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 fa30 	bl	8008370 <RTC_ByteToBcd2>
 8007f10:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007f12:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	78db      	ldrb	r3, [r3, #3]
 8007f1a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	e018      	b.n	8007f54 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d102      	bne.n	8007f36 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2200      	movs	r2, #0
 8007f34:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	785b      	ldrb	r3, [r3, #1]
 8007f40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007f42:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007f48:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	78db      	ldrb	r3, [r3, #3]
 8007f4e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007f50:	4313      	orrs	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	22ca      	movs	r2, #202	; 0xca
 8007f5a:	625a      	str	r2, [r3, #36]	; 0x24
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2253      	movs	r2, #83	; 0x53
 8007f62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 f9d7 	bl	8008318 <RTC_EnterInitMode>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00b      	beq.n	8007f88 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	22ff      	movs	r2, #255	; 0xff
 8007f76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2204      	movs	r2, #4
 8007f7c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e047      	b.n	8008018 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007f92:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007f96:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689a      	ldr	r2, [r3, #8]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007fa6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6899      	ldr	r1, [r3, #8]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d111      	bne.n	8008002 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 f972 	bl	80082c8 <HAL_RTC_WaitForSynchro>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00b      	beq.n	8008002 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	22ff      	movs	r2, #255	; 0xff
 8007ff0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e00a      	b.n	8008018 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	22ff      	movs	r2, #255	; 0xff
 8008008:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2201      	movs	r2, #1
 800800e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008016:	2300      	movs	r3, #0
  }
}
 8008018:	4618      	mov	r0, r3
 800801a:	371c      	adds	r7, #28
 800801c:	46bd      	mov	sp, r7
 800801e:	bd90      	pop	{r4, r7, pc}

08008020 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008052:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008056:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	0c1b      	lsrs	r3, r3, #16
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008062:	b2da      	uxtb	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	0a1b      	lsrs	r3, r3, #8
 800806c:	b2db      	uxtb	r3, r3
 800806e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008072:	b2da      	uxtb	r2, r3
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008080:	b2da      	uxtb	r2, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	0c1b      	lsrs	r3, r3, #16
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008090:	b2da      	uxtb	r2, r3
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d11a      	bne.n	80080d2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 f983 	bl	80083ac <RTC_Bcd2ToByte>
 80080a6:	4603      	mov	r3, r0
 80080a8:	461a      	mov	r2, r3
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 f97a 	bl	80083ac <RTC_Bcd2ToByte>
 80080b8:	4603      	mov	r3, r0
 80080ba:	461a      	mov	r2, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	789b      	ldrb	r3, [r3, #2]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f971 	bl	80083ac <RTC_Bcd2ToByte>
 80080ca:	4603      	mov	r3, r0
 80080cc:	461a      	mov	r2, r3
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80080dc:	b590      	push	{r4, r7, lr}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	7f1b      	ldrb	r3, [r3, #28]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d101      	bne.n	80080f8 <HAL_RTC_SetDate+0x1c>
 80080f4:	2302      	movs	r3, #2
 80080f6:	e094      	b.n	8008222 <HAL_RTC_SetDate+0x146>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2201      	movs	r2, #1
 80080fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2202      	movs	r2, #2
 8008102:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10e      	bne.n	8008128 <HAL_RTC_SetDate+0x4c>
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	785b      	ldrb	r3, [r3, #1]
 800810e:	f003 0310 	and.w	r3, r3, #16
 8008112:	2b00      	cmp	r3, #0
 8008114:	d008      	beq.n	8008128 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	f023 0310 	bic.w	r3, r3, #16
 800811e:	b2db      	uxtb	r3, r3
 8008120:	330a      	adds	r3, #10
 8008122:	b2da      	uxtb	r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d11c      	bne.n	8008168 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	78db      	ldrb	r3, [r3, #3]
 8008132:	4618      	mov	r0, r3
 8008134:	f000 f91c 	bl	8008370 <RTC_ByteToBcd2>
 8008138:	4603      	mov	r3, r0
 800813a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	785b      	ldrb	r3, [r3, #1]
 8008140:	4618      	mov	r0, r3
 8008142:	f000 f915 	bl	8008370 <RTC_ByteToBcd2>
 8008146:	4603      	mov	r3, r0
 8008148:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800814a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	789b      	ldrb	r3, [r3, #2]
 8008150:	4618      	mov	r0, r3
 8008152:	f000 f90d 	bl	8008370 <RTC_ByteToBcd2>
 8008156:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008158:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008162:	4313      	orrs	r3, r2
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	e00e      	b.n	8008186 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	78db      	ldrb	r3, [r3, #3]
 800816c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	785b      	ldrb	r3, [r3, #1]
 8008172:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008174:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800817a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	22ca      	movs	r2, #202	; 0xca
 800818c:	625a      	str	r2, [r3, #36]	; 0x24
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2253      	movs	r2, #83	; 0x53
 8008194:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f8be 	bl	8008318 <RTC_EnterInitMode>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00b      	beq.n	80081ba <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	22ff      	movs	r2, #255	; 0xff
 80081a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2204      	movs	r2, #4
 80081ae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e033      	b.n	8008222 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80081c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80081c8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68da      	ldr	r2, [r3, #12]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081d8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f003 0320 	and.w	r3, r3, #32
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d111      	bne.n	800820c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f86d 	bl	80082c8 <HAL_RTC_WaitForSynchro>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00b      	beq.n	800820c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	22ff      	movs	r2, #255	; 0xff
 80081fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2204      	movs	r2, #4
 8008200:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e00a      	b.n	8008222 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	22ff      	movs	r2, #255	; 0xff
 8008212:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2201      	movs	r2, #1
 8008218:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008220:	2300      	movs	r3, #0
  }
}
 8008222:	4618      	mov	r0, r3
 8008224:	371c      	adds	r7, #28
 8008226:	46bd      	mov	sp, r7
 8008228:	bd90      	pop	{r4, r7, pc}

0800822a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b086      	sub	sp, #24
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008244:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008248:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	0c1b      	lsrs	r3, r3, #16
 800824e:	b2da      	uxtb	r2, r3
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	0a1b      	lsrs	r3, r3, #8
 8008258:	b2db      	uxtb	r3, r3
 800825a:	f003 031f 	and.w	r3, r3, #31
 800825e:	b2da      	uxtb	r2, r3
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800826c:	b2da      	uxtb	r2, r3
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	0b5b      	lsrs	r3, r3, #13
 8008276:	b2db      	uxtb	r3, r3
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	b2da      	uxtb	r2, r3
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d11a      	bne.n	80082be <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	78db      	ldrb	r3, [r3, #3]
 800828c:	4618      	mov	r0, r3
 800828e:	f000 f88d 	bl	80083ac <RTC_Bcd2ToByte>
 8008292:	4603      	mov	r3, r0
 8008294:	461a      	mov	r2, r3
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	785b      	ldrb	r3, [r3, #1]
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 f884 	bl	80083ac <RTC_Bcd2ToByte>
 80082a4:	4603      	mov	r3, r0
 80082a6:	461a      	mov	r2, r3
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	789b      	ldrb	r3, [r3, #2]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 f87b 	bl	80083ac <RTC_Bcd2ToByte>
 80082b6:	4603      	mov	r3, r0
 80082b8:	461a      	mov	r2, r3
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80082e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80082e4:	f7fc fd96 	bl	8004e14 <HAL_GetTick>
 80082e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80082ea:	e009      	b.n	8008300 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80082ec:	f7fc fd92 	bl	8004e14 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082fa:	d901      	bls.n	8008300 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e007      	b.n	8008310 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f003 0320 	and.w	r3, r3, #32
 800830a:	2b00      	cmp	r3, #0
 800830c:	d0ee      	beq.n	80082ec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d119      	bne.n	8008366 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f04f 32ff 	mov.w	r2, #4294967295
 800833a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800833c:	f7fc fd6a 	bl	8004e14 <HAL_GetTick>
 8008340:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008342:	e009      	b.n	8008358 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008344:	f7fc fd66 	bl	8004e14 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008352:	d901      	bls.n	8008358 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e007      	b.n	8008368 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0ee      	beq.n	8008344 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800837e:	e005      	b.n	800838c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3301      	adds	r3, #1
 8008384:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008386:	79fb      	ldrb	r3, [r7, #7]
 8008388:	3b0a      	subs	r3, #10
 800838a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	2b09      	cmp	r3, #9
 8008390:	d8f6      	bhi.n	8008380 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	b2db      	uxtb	r3, r3
 8008396:	011b      	lsls	r3, r3, #4
 8008398:	b2da      	uxtb	r2, r3
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	4313      	orrs	r3, r2
 800839e:	b2db      	uxtb	r3, r3
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	091b      	lsrs	r3, r3, #4
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	4613      	mov	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	f003 030f 	and.w	r3, r3, #15
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	4413      	add	r3, r2
 80083da:	b2db      	uxtb	r3, r3
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e056      	b.n	80084a8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d106      	bne.n	800841a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7fb fde9 	bl	8003fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2202      	movs	r2, #2
 800841e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008430:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	431a      	orrs	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	431a      	orrs	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008456:	431a      	orrs	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	69db      	ldr	r3, [r3, #28]
 800845c:	431a      	orrs	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	ea42 0103 	orr.w	r1, r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	0c1b      	lsrs	r3, r3, #16
 8008478:	f003 0104 	and.w	r1, r3, #4
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	69da      	ldr	r2, [r3, #28]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008496:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af02      	add	r7, sp, #8
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	603b      	str	r3, [r7, #0]
 80084bc:	4613      	mov	r3, r2
 80084be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084cc:	d112      	bne.n	80084f4 <HAL_SPI_Receive+0x44>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10e      	bne.n	80084f4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2204      	movs	r2, #4
 80084da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80084de:	88fa      	ldrh	r2, [r7, #6]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	4613      	mov	r3, r2
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	68b9      	ldr	r1, [r7, #8]
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 f8e9 	bl	80086c2 <HAL_SPI_TransmitReceive>
 80084f0:	4603      	mov	r3, r0
 80084f2:	e0e2      	b.n	80086ba <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d101      	bne.n	8008502 <HAL_SPI_Receive+0x52>
 80084fe:	2302      	movs	r3, #2
 8008500:	e0db      	b.n	80086ba <HAL_SPI_Receive+0x20a>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800850a:	f7fc fc83 	bl	8004e14 <HAL_GetTick>
 800850e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b01      	cmp	r3, #1
 800851a:	d002      	beq.n	8008522 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800851c:	2302      	movs	r3, #2
 800851e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008520:	e0c2      	b.n	80086a8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <HAL_SPI_Receive+0x7e>
 8008528:	88fb      	ldrh	r3, [r7, #6]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d102      	bne.n	8008534 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008532:	e0b9      	b.n	80086a8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2204      	movs	r2, #4
 8008538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	88fa      	ldrh	r2, [r7, #6]
 800854c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	88fa      	ldrh	r2, [r7, #6]
 8008552:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800857a:	d107      	bne.n	800858c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800858a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008596:	2b40      	cmp	r3, #64	; 0x40
 8008598:	d007      	beq.n	80085aa <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d162      	bne.n	8008678 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80085b2:	e02e      	b.n	8008612 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d115      	bne.n	80085ee <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f103 020c 	add.w	r2, r3, #12
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ce:	7812      	ldrb	r2, [r2, #0]
 80085d0:	b2d2      	uxtb	r2, r2
 80085d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d8:	1c5a      	adds	r2, r3, #1
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085ec:	e011      	b.n	8008612 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085ee:	f7fc fc11 	bl	8004e14 <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d803      	bhi.n	8008606 <HAL_SPI_Receive+0x156>
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008604:	d102      	bne.n	800860c <HAL_SPI_Receive+0x15c>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008610:	e04a      	b.n	80086a8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008616:	b29b      	uxth	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1cb      	bne.n	80085b4 <HAL_SPI_Receive+0x104>
 800861c:	e031      	b.n	8008682 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f003 0301 	and.w	r3, r3, #1
 8008628:	2b01      	cmp	r3, #1
 800862a:	d113      	bne.n	8008654 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008636:	b292      	uxth	r2, r2
 8008638:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863e:	1c9a      	adds	r2, r3, #2
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008648:	b29b      	uxth	r3, r3
 800864a:	3b01      	subs	r3, #1
 800864c:	b29a      	uxth	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008652:	e011      	b.n	8008678 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008654:	f7fc fbde 	bl	8004e14 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d803      	bhi.n	800866c <HAL_SPI_Receive+0x1bc>
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866a:	d102      	bne.n	8008672 <HAL_SPI_Receive+0x1c2>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d102      	bne.n	8008678 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008676:	e017      	b.n	80086a8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800867c:	b29b      	uxth	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1cd      	bne.n	800861e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 fa27 	bl	8008ada <SPI_EndRxTransaction>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2220      	movs	r2, #32
 8008696:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	75fb      	strb	r3, [r7, #23]
 80086a4:	e000      	b.n	80086a8 <HAL_SPI_Receive+0x1f8>
  }

error :
 80086a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b08c      	sub	sp, #48	; 0x30
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	60f8      	str	r0, [r7, #12]
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	607a      	str	r2, [r7, #4]
 80086ce:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80086d0:	2301      	movs	r3, #1
 80086d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d101      	bne.n	80086e8 <HAL_SPI_TransmitReceive+0x26>
 80086e4:	2302      	movs	r3, #2
 80086e6:	e18a      	b.n	80089fe <HAL_SPI_TransmitReceive+0x33c>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086f0:	f7fc fb90 	bl	8004e14 <HAL_GetTick>
 80086f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008706:	887b      	ldrh	r3, [r7, #2]
 8008708:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800870a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800870e:	2b01      	cmp	r3, #1
 8008710:	d00f      	beq.n	8008732 <HAL_SPI_TransmitReceive+0x70>
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008718:	d107      	bne.n	800872a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d103      	bne.n	800872a <HAL_SPI_TransmitReceive+0x68>
 8008722:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008726:	2b04      	cmp	r3, #4
 8008728:	d003      	beq.n	8008732 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800872a:	2302      	movs	r3, #2
 800872c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008730:	e15b      	b.n	80089ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d005      	beq.n	8008744 <HAL_SPI_TransmitReceive+0x82>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d002      	beq.n	8008744 <HAL_SPI_TransmitReceive+0x82>
 800873e:	887b      	ldrh	r3, [r7, #2]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d103      	bne.n	800874c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800874a:	e14e      	b.n	80089ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b04      	cmp	r3, #4
 8008756:	d003      	beq.n	8008760 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2205      	movs	r2, #5
 800875c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	887a      	ldrh	r2, [r7, #2]
 8008770:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	887a      	ldrh	r2, [r7, #2]
 8008776:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	887a      	ldrh	r2, [r7, #2]
 8008782:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	887a      	ldrh	r2, [r7, #2]
 8008788:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a0:	2b40      	cmp	r3, #64	; 0x40
 80087a2:	d007      	beq.n	80087b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087bc:	d178      	bne.n	80088b0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d002      	beq.n	80087cc <HAL_SPI_TransmitReceive+0x10a>
 80087c6:	8b7b      	ldrh	r3, [r7, #26]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d166      	bne.n	800889a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d0:	881a      	ldrh	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087dc:	1c9a      	adds	r2, r3, #2
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087f0:	e053      	b.n	800889a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d11b      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x176>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d016      	beq.n	8008838 <HAL_SPI_TransmitReceive+0x176>
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880c:	2b01      	cmp	r3, #1
 800880e:	d113      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008814:	881a      	ldrh	r2, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008820:	1c9a      	adds	r2, r3, #2
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800882a:	b29b      	uxth	r3, r3
 800882c:	3b01      	subs	r3, #1
 800882e:	b29a      	uxth	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008834:	2300      	movs	r3, #0
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b01      	cmp	r3, #1
 8008844:	d119      	bne.n	800887a <HAL_SPI_TransmitReceive+0x1b8>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800884a:	b29b      	uxth	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d014      	beq.n	800887a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885a:	b292      	uxth	r2, r2
 800885c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008862:	1c9a      	adds	r2, r3, #2
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800886c:	b29b      	uxth	r3, r3
 800886e:	3b01      	subs	r3, #1
 8008870:	b29a      	uxth	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008876:	2301      	movs	r3, #1
 8008878:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800887a:	f7fc facb 	bl	8004e14 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008886:	429a      	cmp	r2, r3
 8008888:	d807      	bhi.n	800889a <HAL_SPI_TransmitReceive+0x1d8>
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008890:	d003      	beq.n	800889a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008898:	e0a7      	b.n	80089ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800889e:	b29b      	uxth	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1a6      	bne.n	80087f2 <HAL_SPI_TransmitReceive+0x130>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1a1      	bne.n	80087f2 <HAL_SPI_TransmitReceive+0x130>
 80088ae:	e07c      	b.n	80089aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <HAL_SPI_TransmitReceive+0x1fc>
 80088b8:	8b7b      	ldrh	r3, [r7, #26]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d16b      	bne.n	8008996 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	330c      	adds	r3, #12
 80088c8:	7812      	ldrb	r2, [r2, #0]
 80088ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088da:	b29b      	uxth	r3, r3
 80088dc:	3b01      	subs	r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088e4:	e057      	b.n	8008996 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d11c      	bne.n	800892e <HAL_SPI_TransmitReceive+0x26c>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d017      	beq.n	800892e <HAL_SPI_TransmitReceive+0x26c>
 80088fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008900:	2b01      	cmp	r3, #1
 8008902:	d114      	bne.n	800892e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	330c      	adds	r3, #12
 800890e:	7812      	ldrb	r2, [r2, #0]
 8008910:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	1c5a      	adds	r2, r3, #1
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008920:	b29b      	uxth	r3, r3
 8008922:	3b01      	subs	r3, #1
 8008924:	b29a      	uxth	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800892a:	2300      	movs	r3, #0
 800892c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	2b01      	cmp	r3, #1
 800893a:	d119      	bne.n	8008970 <HAL_SPI_TransmitReceive+0x2ae>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008940:	b29b      	uxth	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d014      	beq.n	8008970 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68da      	ldr	r2, [r3, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008950:	b2d2      	uxtb	r2, r2
 8008952:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008962:	b29b      	uxth	r3, r3
 8008964:	3b01      	subs	r3, #1
 8008966:	b29a      	uxth	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800896c:	2301      	movs	r3, #1
 800896e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008970:	f7fc fa50 	bl	8004e14 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800897c:	429a      	cmp	r2, r3
 800897e:	d803      	bhi.n	8008988 <HAL_SPI_TransmitReceive+0x2c6>
 8008980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008986:	d102      	bne.n	800898e <HAL_SPI_TransmitReceive+0x2cc>
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	2b00      	cmp	r3, #0
 800898c:	d103      	bne.n	8008996 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008994:	e029      	b.n	80089ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800899a:	b29b      	uxth	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1a2      	bne.n	80088e6 <HAL_SPI_TransmitReceive+0x224>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d19d      	bne.n	80088e6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f000 f8f8 	bl	8008ba4 <SPI_EndRxTxTransaction>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d006      	beq.n	80089c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2220      	movs	r2, #32
 80089c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80089c6:	e010      	b.n	80089ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10b      	bne.n	80089e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089d0:	2300      	movs	r3, #0
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	617b      	str	r3, [r7, #20]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	617b      	str	r3, [r7, #20]
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	e000      	b.n	80089ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80089e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3730      	adds	r7, #48	; 0x30
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b084      	sub	sp, #16
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	603b      	str	r3, [r7, #0]
 8008a12:	4613      	mov	r3, r2
 8008a14:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a16:	e04c      	b.n	8008ab2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1e:	d048      	beq.n	8008ab2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008a20:	f7fc f9f8 	bl	8004e14 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d902      	bls.n	8008a36 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d13d      	bne.n	8008ab2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a4e:	d111      	bne.n	8008a74 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a58:	d004      	beq.n	8008a64 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a62:	d107      	bne.n	8008a74 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a7c:	d10f      	bne.n	8008a9e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e00f      	b.n	8008ad2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4013      	ands	r3, r2
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	bf0c      	ite	eq
 8008ac2:	2301      	moveq	r3, #1
 8008ac4:	2300      	movne	r3, #0
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	461a      	mov	r2, r3
 8008aca:	79fb      	ldrb	r3, [r7, #7]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d1a3      	bne.n	8008a18 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b086      	sub	sp, #24
 8008ade:	af02      	add	r7, sp, #8
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aee:	d111      	bne.n	8008b14 <SPI_EndRxTransaction+0x3a>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008af8:	d004      	beq.n	8008b04 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b02:	d107      	bne.n	8008b14 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b12:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b1c:	d12a      	bne.n	8008b74 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b26:	d012      	beq.n	8008b4e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2180      	movs	r1, #128	; 0x80
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f7ff ff67 	bl	8008a06 <SPI_WaitFlagStateUntilTimeout>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d02d      	beq.n	8008b9a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b42:	f043 0220 	orr.w	r2, r3, #32
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e026      	b.n	8008b9c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2200      	movs	r2, #0
 8008b56:	2101      	movs	r1, #1
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f7ff ff54 	bl	8008a06 <SPI_WaitFlagStateUntilTimeout>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d01a      	beq.n	8008b9a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b68:	f043 0220 	orr.w	r2, r3, #32
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e013      	b.n	8008b9c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f7ff ff41 	bl	8008a06 <SPI_WaitFlagStateUntilTimeout>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d007      	beq.n	8008b9a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8e:	f043 0220 	orr.w	r2, r3, #32
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e000      	b.n	8008b9c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b088      	sub	sp, #32
 8008ba8:	af02      	add	r7, sp, #8
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008bb0:	4b1b      	ldr	r3, [pc, #108]	; (8008c20 <SPI_EndRxTxTransaction+0x7c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a1b      	ldr	r2, [pc, #108]	; (8008c24 <SPI_EndRxTxTransaction+0x80>)
 8008bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bba:	0d5b      	lsrs	r3, r3, #21
 8008bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bc0:	fb02 f303 	mul.w	r3, r2, r3
 8008bc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bce:	d112      	bne.n	8008bf6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2180      	movs	r1, #128	; 0x80
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f7ff ff13 	bl	8008a06 <SPI_WaitFlagStateUntilTimeout>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d016      	beq.n	8008c14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bea:	f043 0220 	orr.w	r2, r3, #32
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e00f      	b.n	8008c16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00a      	beq.n	8008c12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c0c:	2b80      	cmp	r3, #128	; 0x80
 8008c0e:	d0f2      	beq.n	8008bf6 <SPI_EndRxTxTransaction+0x52>
 8008c10:	e000      	b.n	8008c14 <SPI_EndRxTxTransaction+0x70>
        break;
 8008c12:	bf00      	nop
  }

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20000004 	.word	0x20000004
 8008c24:	165e9f81 	.word	0x165e9f81

08008c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d101      	bne.n	8008c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e01d      	b.n	8008c76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d106      	bne.n	8008c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7fb fd76 	bl	8004740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3304      	adds	r3, #4
 8008c64:	4619      	mov	r1, r3
 8008c66:	4610      	mov	r0, r2
 8008c68:	f000 fbb2 	bl	80093d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b085      	sub	sp, #20
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f042 0201 	orr.w	r2, r2, #1
 8008c94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f003 0307 	and.w	r3, r3, #7
 8008ca0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2b06      	cmp	r3, #6
 8008ca6:	d007      	beq.n	8008cb8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0201 	orr.w	r2, r2, #1
 8008cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e01d      	b.n	8008d14 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d106      	bne.n	8008cf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f815 	bl	8008d1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f000 fb63 	bl	80093d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 fe2e 	bl	80099a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a15      	ldr	r2, [pc, #84]	; (8008da4 <HAL_TIM_PWM_Start+0x74>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d004      	beq.n	8008d5c <HAL_TIM_PWM_Start+0x2c>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a14      	ldr	r2, [pc, #80]	; (8008da8 <HAL_TIM_PWM_Start+0x78>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d101      	bne.n	8008d60 <HAL_TIM_PWM_Start+0x30>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e000      	b.n	8008d62 <HAL_TIM_PWM_Start+0x32>
 8008d60:	2300      	movs	r3, #0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f003 0307 	and.w	r3, r3, #7
 8008d80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b06      	cmp	r3, #6
 8008d86:	d007      	beq.n	8008d98 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0201 	orr.w	r2, r2, #1
 8008d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	40010000 	.word	0x40010000
 8008da8:	40010400 	.word	0x40010400

08008dac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 fdf0 	bl	80099a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a22      	ldr	r2, [pc, #136]	; (8008e54 <HAL_TIM_PWM_Stop+0xa8>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d004      	beq.n	8008dd8 <HAL_TIM_PWM_Stop+0x2c>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a21      	ldr	r2, [pc, #132]	; (8008e58 <HAL_TIM_PWM_Stop+0xac>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d101      	bne.n	8008ddc <HAL_TIM_PWM_Stop+0x30>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e000      	b.n	8008dde <HAL_TIM_PWM_Stop+0x32>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d017      	beq.n	8008e12 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6a1a      	ldr	r2, [r3, #32]
 8008de8:	f241 1311 	movw	r3, #4369	; 0x1111
 8008dec:	4013      	ands	r3, r2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10f      	bne.n	8008e12 <HAL_TIM_PWM_Stop+0x66>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6a1a      	ldr	r2, [r3, #32]
 8008df8:	f240 4344 	movw	r3, #1092	; 0x444
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d107      	bne.n	8008e12 <HAL_TIM_PWM_Stop+0x66>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6a1a      	ldr	r2, [r3, #32]
 8008e18:	f241 1311 	movw	r3, #4369	; 0x1111
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10f      	bne.n	8008e42 <HAL_TIM_PWM_Stop+0x96>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6a1a      	ldr	r2, [r3, #32]
 8008e28:	f240 4344 	movw	r3, #1092	; 0x444
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d107      	bne.n	8008e42 <HAL_TIM_PWM_Stop+0x96>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f022 0201 	bic.w	r2, r2, #1
 8008e40:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	40010000 	.word	0x40010000
 8008e58:	40010400 	.word	0x40010400

08008e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f003 0302 	and.w	r3, r3, #2
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d122      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f003 0302 	and.w	r3, r3, #2
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d11b      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f06f 0202 	mvn.w	r2, #2
 8008e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa78 	bl	8009394 <HAL_TIM_IC_CaptureCallback>
 8008ea4:	e005      	b.n	8008eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa6a 	bl	8009380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fa7b 	bl	80093a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	f003 0304 	and.w	r3, r3, #4
 8008ec2:	2b04      	cmp	r3, #4
 8008ec4:	d122      	bne.n	8008f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f003 0304 	and.w	r3, r3, #4
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d11b      	bne.n	8008f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f06f 0204 	mvn.w	r2, #4
 8008edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fa4e 	bl	8009394 <HAL_TIM_IC_CaptureCallback>
 8008ef8:	e005      	b.n	8008f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fa40 	bl	8009380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fa51 	bl	80093a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	f003 0308 	and.w	r3, r3, #8
 8008f16:	2b08      	cmp	r3, #8
 8008f18:	d122      	bne.n	8008f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	f003 0308 	and.w	r3, r3, #8
 8008f24:	2b08      	cmp	r3, #8
 8008f26:	d11b      	bne.n	8008f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f06f 0208 	mvn.w	r2, #8
 8008f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2204      	movs	r2, #4
 8008f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	f003 0303 	and.w	r3, r3, #3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa24 	bl	8009394 <HAL_TIM_IC_CaptureCallback>
 8008f4c:	e005      	b.n	8008f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fa16 	bl	8009380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fa27 	bl	80093a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	f003 0310 	and.w	r3, r3, #16
 8008f6a:	2b10      	cmp	r3, #16
 8008f6c:	d122      	bne.n	8008fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f003 0310 	and.w	r3, r3, #16
 8008f78:	2b10      	cmp	r3, #16
 8008f7a:	d11b      	bne.n	8008fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f06f 0210 	mvn.w	r2, #16
 8008f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2208      	movs	r2, #8
 8008f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f9fa 	bl	8009394 <HAL_TIM_IC_CaptureCallback>
 8008fa0:	e005      	b.n	8008fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f9ec 	bl	8009380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f9fd 	bl	80093a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d10e      	bne.n	8008fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d107      	bne.n	8008fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f06f 0201 	mvn.w	r2, #1
 8008fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7fa f9dc 	bl	8003398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fea:	2b80      	cmp	r3, #128	; 0x80
 8008fec:	d10e      	bne.n	800900c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff8:	2b80      	cmp	r3, #128	; 0x80
 8008ffa:	d107      	bne.n	800900c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fd78 	bl	8009afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009016:	2b40      	cmp	r3, #64	; 0x40
 8009018:	d10e      	bne.n	8009038 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009024:	2b40      	cmp	r3, #64	; 0x40
 8009026:	d107      	bne.n	8009038 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f9c2 	bl	80093bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	f003 0320 	and.w	r3, r3, #32
 8009042:	2b20      	cmp	r3, #32
 8009044:	d10e      	bne.n	8009064 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f003 0320 	and.w	r3, r3, #32
 8009050:	2b20      	cmp	r3, #32
 8009052:	d107      	bne.n	8009064 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f06f 0220 	mvn.w	r2, #32
 800905c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fd42 	bl	8009ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009064:	bf00      	nop
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800907e:	2b01      	cmp	r3, #1
 8009080:	d101      	bne.n	8009086 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009082:	2302      	movs	r3, #2
 8009084:	e0b4      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2202      	movs	r2, #2
 8009092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2b0c      	cmp	r3, #12
 800909a:	f200 809f 	bhi.w	80091dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800909e:	a201      	add	r2, pc, #4	; (adr r2, 80090a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	080090d9 	.word	0x080090d9
 80090a8:	080091dd 	.word	0x080091dd
 80090ac:	080091dd 	.word	0x080091dd
 80090b0:	080091dd 	.word	0x080091dd
 80090b4:	08009119 	.word	0x08009119
 80090b8:	080091dd 	.word	0x080091dd
 80090bc:	080091dd 	.word	0x080091dd
 80090c0:	080091dd 	.word	0x080091dd
 80090c4:	0800915b 	.word	0x0800915b
 80090c8:	080091dd 	.word	0x080091dd
 80090cc:	080091dd 	.word	0x080091dd
 80090d0:	080091dd 	.word	0x080091dd
 80090d4:	0800919b 	.word	0x0800919b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68b9      	ldr	r1, [r7, #8]
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fa16 	bl	8009510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	699a      	ldr	r2, [r3, #24]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 0208 	orr.w	r2, r2, #8
 80090f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 0204 	bic.w	r2, r2, #4
 8009102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6999      	ldr	r1, [r3, #24]
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	691a      	ldr	r2, [r3, #16]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	430a      	orrs	r2, r1
 8009114:	619a      	str	r2, [r3, #24]
      break;
 8009116:	e062      	b.n	80091de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68b9      	ldr	r1, [r7, #8]
 800911e:	4618      	mov	r0, r3
 8009120:	f000 fa66 	bl	80095f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	699a      	ldr	r2, [r3, #24]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	699a      	ldr	r2, [r3, #24]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6999      	ldr	r1, [r3, #24]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	021a      	lsls	r2, r3, #8
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	430a      	orrs	r2, r1
 8009156:	619a      	str	r2, [r3, #24]
      break;
 8009158:	e041      	b.n	80091de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68b9      	ldr	r1, [r7, #8]
 8009160:	4618      	mov	r0, r3
 8009162:	f000 fabb 	bl	80096dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	69da      	ldr	r2, [r3, #28]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f042 0208 	orr.w	r2, r2, #8
 8009174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69da      	ldr	r2, [r3, #28]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0204 	bic.w	r2, r2, #4
 8009184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	69d9      	ldr	r1, [r3, #28]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	691a      	ldr	r2, [r3, #16]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	61da      	str	r2, [r3, #28]
      break;
 8009198:	e021      	b.n	80091de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68b9      	ldr	r1, [r7, #8]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 fb0f 	bl	80097c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	69da      	ldr	r2, [r3, #28]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	69da      	ldr	r2, [r3, #28]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	69d9      	ldr	r1, [r3, #28]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	021a      	lsls	r2, r3, #8
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	430a      	orrs	r2, r1
 80091d8:	61da      	str	r2, [r3, #28]
      break;
 80091da:	e000      	b.n	80091de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80091dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <HAL_TIM_ConfigClockSource+0x18>
 800920c:	2302      	movs	r3, #2
 800920e:	e0b3      	b.n	8009378 <HAL_TIM_ConfigClockSource+0x180>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800922e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009236:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009248:	d03e      	beq.n	80092c8 <HAL_TIM_ConfigClockSource+0xd0>
 800924a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800924e:	f200 8087 	bhi.w	8009360 <HAL_TIM_ConfigClockSource+0x168>
 8009252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009256:	f000 8085 	beq.w	8009364 <HAL_TIM_ConfigClockSource+0x16c>
 800925a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800925e:	d87f      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x168>
 8009260:	2b70      	cmp	r3, #112	; 0x70
 8009262:	d01a      	beq.n	800929a <HAL_TIM_ConfigClockSource+0xa2>
 8009264:	2b70      	cmp	r3, #112	; 0x70
 8009266:	d87b      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x168>
 8009268:	2b60      	cmp	r3, #96	; 0x60
 800926a:	d050      	beq.n	800930e <HAL_TIM_ConfigClockSource+0x116>
 800926c:	2b60      	cmp	r3, #96	; 0x60
 800926e:	d877      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x168>
 8009270:	2b50      	cmp	r3, #80	; 0x50
 8009272:	d03c      	beq.n	80092ee <HAL_TIM_ConfigClockSource+0xf6>
 8009274:	2b50      	cmp	r3, #80	; 0x50
 8009276:	d873      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x168>
 8009278:	2b40      	cmp	r3, #64	; 0x40
 800927a:	d058      	beq.n	800932e <HAL_TIM_ConfigClockSource+0x136>
 800927c:	2b40      	cmp	r3, #64	; 0x40
 800927e:	d86f      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x168>
 8009280:	2b30      	cmp	r3, #48	; 0x30
 8009282:	d064      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x156>
 8009284:	2b30      	cmp	r3, #48	; 0x30
 8009286:	d86b      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x168>
 8009288:	2b20      	cmp	r3, #32
 800928a:	d060      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x156>
 800928c:	2b20      	cmp	r3, #32
 800928e:	d867      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x168>
 8009290:	2b00      	cmp	r3, #0
 8009292:	d05c      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x156>
 8009294:	2b10      	cmp	r3, #16
 8009296:	d05a      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009298:	e062      	b.n	8009360 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6818      	ldr	r0, [r3, #0]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	6899      	ldr	r1, [r3, #8]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f000 fb5b 	bl	8009964 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	609a      	str	r2, [r3, #8]
      break;
 80092c6:	e04e      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6818      	ldr	r0, [r3, #0]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	6899      	ldr	r1, [r3, #8]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	f000 fb44 	bl	8009964 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689a      	ldr	r2, [r3, #8]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092ea:	609a      	str	r2, [r3, #8]
      break;
 80092ec:	e03b      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6818      	ldr	r0, [r3, #0]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	6859      	ldr	r1, [r3, #4]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	461a      	mov	r2, r3
 80092fc:	f000 fab8 	bl	8009870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2150      	movs	r1, #80	; 0x50
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fb11 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 800930c:	e02b      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6818      	ldr	r0, [r3, #0]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	6859      	ldr	r1, [r3, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	461a      	mov	r2, r3
 800931c:	f000 fad7 	bl	80098ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2160      	movs	r1, #96	; 0x60
 8009326:	4618      	mov	r0, r3
 8009328:	f000 fb01 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 800932c:	e01b      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	6859      	ldr	r1, [r3, #4]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	461a      	mov	r2, r3
 800933c:	f000 fa98 	bl	8009870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2140      	movs	r1, #64	; 0x40
 8009346:	4618      	mov	r0, r3
 8009348:	f000 faf1 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 800934c:	e00b      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4619      	mov	r1, r3
 8009358:	4610      	mov	r0, r2
 800935a:	f000 fae8 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 800935e:	e002      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009360:	bf00      	nop
 8009362:	e000      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009364:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a40      	ldr	r2, [pc, #256]	; (80094e4 <TIM_Base_SetConfig+0x114>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d013      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ee:	d00f      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a3d      	ldr	r2, [pc, #244]	; (80094e8 <TIM_Base_SetConfig+0x118>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d00b      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a3c      	ldr	r2, [pc, #240]	; (80094ec <TIM_Base_SetConfig+0x11c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d007      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a3b      	ldr	r2, [pc, #236]	; (80094f0 <TIM_Base_SetConfig+0x120>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d003      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a3a      	ldr	r2, [pc, #232]	; (80094f4 <TIM_Base_SetConfig+0x124>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d108      	bne.n	8009422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4313      	orrs	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a2f      	ldr	r2, [pc, #188]	; (80094e4 <TIM_Base_SetConfig+0x114>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d02b      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009430:	d027      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a2c      	ldr	r2, [pc, #176]	; (80094e8 <TIM_Base_SetConfig+0x118>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d023      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a2b      	ldr	r2, [pc, #172]	; (80094ec <TIM_Base_SetConfig+0x11c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d01f      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a2a      	ldr	r2, [pc, #168]	; (80094f0 <TIM_Base_SetConfig+0x120>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d01b      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a29      	ldr	r2, [pc, #164]	; (80094f4 <TIM_Base_SetConfig+0x124>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d017      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a28      	ldr	r2, [pc, #160]	; (80094f8 <TIM_Base_SetConfig+0x128>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d013      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a27      	ldr	r2, [pc, #156]	; (80094fc <TIM_Base_SetConfig+0x12c>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d00f      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a26      	ldr	r2, [pc, #152]	; (8009500 <TIM_Base_SetConfig+0x130>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d00b      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a25      	ldr	r2, [pc, #148]	; (8009504 <TIM_Base_SetConfig+0x134>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d007      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a24      	ldr	r2, [pc, #144]	; (8009508 <TIM_Base_SetConfig+0x138>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d003      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a23      	ldr	r2, [pc, #140]	; (800950c <TIM_Base_SetConfig+0x13c>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d108      	bne.n	8009494 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	4313      	orrs	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	4313      	orrs	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a0a      	ldr	r2, [pc, #40]	; (80094e4 <TIM_Base_SetConfig+0x114>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d003      	beq.n	80094c8 <TIM_Base_SetConfig+0xf8>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a0c      	ldr	r2, [pc, #48]	; (80094f4 <TIM_Base_SetConfig+0x124>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d103      	bne.n	80094d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	691a      	ldr	r2, [r3, #16]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	615a      	str	r2, [r3, #20]
}
 80094d6:	bf00      	nop
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	40010000 	.word	0x40010000
 80094e8:	40000400 	.word	0x40000400
 80094ec:	40000800 	.word	0x40000800
 80094f0:	40000c00 	.word	0x40000c00
 80094f4:	40010400 	.word	0x40010400
 80094f8:	40014000 	.word	0x40014000
 80094fc:	40014400 	.word	0x40014400
 8009500:	40014800 	.word	0x40014800
 8009504:	40001800 	.word	0x40001800
 8009508:	40001c00 	.word	0x40001c00
 800950c:	40002000 	.word	0x40002000

08009510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	f023 0201 	bic.w	r2, r3, #1
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800953e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 0303 	bic.w	r3, r3, #3
 8009546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f023 0302 	bic.w	r3, r3, #2
 8009558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	4313      	orrs	r3, r2
 8009562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a20      	ldr	r2, [pc, #128]	; (80095e8 <TIM_OC1_SetConfig+0xd8>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d003      	beq.n	8009574 <TIM_OC1_SetConfig+0x64>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a1f      	ldr	r2, [pc, #124]	; (80095ec <TIM_OC1_SetConfig+0xdc>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d10c      	bne.n	800958e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f023 0308 	bic.w	r3, r3, #8
 800957a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	4313      	orrs	r3, r2
 8009584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f023 0304 	bic.w	r3, r3, #4
 800958c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a15      	ldr	r2, [pc, #84]	; (80095e8 <TIM_OC1_SetConfig+0xd8>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d003      	beq.n	800959e <TIM_OC1_SetConfig+0x8e>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a14      	ldr	r2, [pc, #80]	; (80095ec <TIM_OC1_SetConfig+0xdc>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d111      	bne.n	80095c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	4313      	orrs	r3, r2
 80095c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	621a      	str	r2, [r3, #32]
}
 80095dc:	bf00      	nop
 80095de:	371c      	adds	r7, #28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	40010000 	.word	0x40010000
 80095ec:	40010400 	.word	0x40010400

080095f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	f023 0210 	bic.w	r2, r3, #16
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800961e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	021b      	lsls	r3, r3, #8
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	4313      	orrs	r3, r2
 8009632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f023 0320 	bic.w	r3, r3, #32
 800963a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	4313      	orrs	r3, r2
 8009646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a22      	ldr	r2, [pc, #136]	; (80096d4 <TIM_OC2_SetConfig+0xe4>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d003      	beq.n	8009658 <TIM_OC2_SetConfig+0x68>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a21      	ldr	r2, [pc, #132]	; (80096d8 <TIM_OC2_SetConfig+0xe8>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d10d      	bne.n	8009674 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800965e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	011b      	lsls	r3, r3, #4
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	4313      	orrs	r3, r2
 800966a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a17      	ldr	r2, [pc, #92]	; (80096d4 <TIM_OC2_SetConfig+0xe4>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d003      	beq.n	8009684 <TIM_OC2_SetConfig+0x94>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a16      	ldr	r2, [pc, #88]	; (80096d8 <TIM_OC2_SetConfig+0xe8>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d113      	bne.n	80096ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800968a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	693a      	ldr	r2, [r7, #16]
 800969c:	4313      	orrs	r3, r2
 800969e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	621a      	str	r2, [r3, #32]
}
 80096c6:	bf00      	nop
 80096c8:	371c      	adds	r7, #28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	40010000 	.word	0x40010000
 80096d8:	40010400 	.word	0x40010400

080096dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800970a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 0303 	bic.w	r3, r3, #3
 8009712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	4313      	orrs	r3, r2
 800971c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	021b      	lsls	r3, r3, #8
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	4313      	orrs	r3, r2
 8009730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a21      	ldr	r2, [pc, #132]	; (80097bc <TIM_OC3_SetConfig+0xe0>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d003      	beq.n	8009742 <TIM_OC3_SetConfig+0x66>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a20      	ldr	r2, [pc, #128]	; (80097c0 <TIM_OC3_SetConfig+0xe4>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d10d      	bne.n	800975e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	021b      	lsls	r3, r3, #8
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	4313      	orrs	r3, r2
 8009754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800975c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a16      	ldr	r2, [pc, #88]	; (80097bc <TIM_OC3_SetConfig+0xe0>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d003      	beq.n	800976e <TIM_OC3_SetConfig+0x92>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a15      	ldr	r2, [pc, #84]	; (80097c0 <TIM_OC3_SetConfig+0xe4>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d113      	bne.n	8009796 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800977c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	011b      	lsls	r3, r3, #4
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	4313      	orrs	r3, r2
 8009788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	011b      	lsls	r3, r3, #4
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	4313      	orrs	r3, r2
 8009794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	693a      	ldr	r2, [r7, #16]
 800979a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	621a      	str	r2, [r3, #32]
}
 80097b0:	bf00      	nop
 80097b2:	371c      	adds	r7, #28
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	40010000 	.word	0x40010000
 80097c0:	40010400 	.word	0x40010400

080097c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	69db      	ldr	r3, [r3, #28]
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	021b      	lsls	r3, r3, #8
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	4313      	orrs	r3, r2
 8009806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800980e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	031b      	lsls	r3, r3, #12
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	4313      	orrs	r3, r2
 800981a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a12      	ldr	r2, [pc, #72]	; (8009868 <TIM_OC4_SetConfig+0xa4>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d003      	beq.n	800982c <TIM_OC4_SetConfig+0x68>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a11      	ldr	r2, [pc, #68]	; (800986c <TIM_OC4_SetConfig+0xa8>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d109      	bne.n	8009840 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	019b      	lsls	r3, r3, #6
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	4313      	orrs	r3, r2
 800983e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	621a      	str	r2, [r3, #32]
}
 800985a:	bf00      	nop
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40010000 	.word	0x40010000
 800986c:	40010400 	.word	0x40010400

08009870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009870:	b480      	push	{r7}
 8009872:	b087      	sub	sp, #28
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	f023 0201 	bic.w	r2, r3, #1
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800989a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	011b      	lsls	r3, r3, #4
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f023 030a 	bic.w	r3, r3, #10
 80098ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	621a      	str	r2, [r3, #32]
}
 80098c2:	bf00      	nop
 80098c4:	371c      	adds	r7, #28
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b087      	sub	sp, #28
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	f023 0210 	bic.w	r2, r3, #16
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	031b      	lsls	r3, r3, #12
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	4313      	orrs	r3, r2
 8009902:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800990a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	4313      	orrs	r3, r2
 8009914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	621a      	str	r2, [r3, #32]
}
 8009922:	bf00      	nop
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800992e:	b480      	push	{r7}
 8009930:	b085      	sub	sp, #20
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4313      	orrs	r3, r2
 800994c:	f043 0307 	orr.w	r3, r3, #7
 8009950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	609a      	str	r2, [r3, #8]
}
 8009958:	bf00      	nop
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800997e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	021a      	lsls	r2, r3, #8
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	431a      	orrs	r2, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	4313      	orrs	r3, r2
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	4313      	orrs	r3, r2
 8009990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	609a      	str	r2, [r3, #8]
}
 8009998:	bf00      	nop
 800999a:	371c      	adds	r7, #28
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f003 031f 	and.w	r3, r3, #31
 80099b6:	2201      	movs	r2, #1
 80099b8:	fa02 f303 	lsl.w	r3, r2, r3
 80099bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6a1a      	ldr	r2, [r3, #32]
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	43db      	mvns	r3, r3
 80099c6:	401a      	ands	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6a1a      	ldr	r2, [r3, #32]
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	f003 031f 	and.w	r3, r3, #31
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	fa01 f303 	lsl.w	r3, r1, r3
 80099dc:	431a      	orrs	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	621a      	str	r2, [r3, #32]
}
 80099e2:	bf00      	nop
 80099e4:	371c      	adds	r7, #28
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
	...

080099f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d101      	bne.n	8009a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a04:	2302      	movs	r3, #2
 8009a06:	e05a      	b.n	8009abe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a21      	ldr	r2, [pc, #132]	; (8009acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d022      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a54:	d01d      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a1d      	ldr	r2, [pc, #116]	; (8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d018      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a1b      	ldr	r2, [pc, #108]	; (8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d013      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a1a      	ldr	r2, [pc, #104]	; (8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d00e      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a18      	ldr	r2, [pc, #96]	; (8009adc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d009      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a17      	ldr	r2, [pc, #92]	; (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d004      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a15      	ldr	r2, [pc, #84]	; (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d10c      	bne.n	8009aac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	40010000 	.word	0x40010000
 8009ad0:	40000400 	.word	0x40000400
 8009ad4:	40000800 	.word	0x40000800
 8009ad8:	40000c00 	.word	0x40000c00
 8009adc:	40010400 	.word	0x40010400
 8009ae0:	40014000 	.word	0x40014000
 8009ae4:	40001800 	.word	0x40001800

08009ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e03f      	b.n	8009ba2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d106      	bne.n	8009b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7fa ff28 	bl	800498c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2224      	movs	r2, #36	; 0x24
 8009b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fd0f 	bl	800a578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	691a      	ldr	r2, [r3, #16]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	695a      	ldr	r2, [r3, #20]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68da      	ldr	r2, [r3, #12]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2220      	movs	r2, #32
 8009b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b088      	sub	sp, #32
 8009bae:	af02      	add	r7, sp, #8
 8009bb0:	60f8      	str	r0, [r7, #12]
 8009bb2:	60b9      	str	r1, [r7, #8]
 8009bb4:	603b      	str	r3, [r7, #0]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	f040 8083 	bne.w	8009cd2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d002      	beq.n	8009bd8 <HAL_UART_Transmit+0x2e>
 8009bd2:	88fb      	ldrh	r3, [r7, #6]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e07b      	b.n	8009cd4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d101      	bne.n	8009bea <HAL_UART_Transmit+0x40>
 8009be6:	2302      	movs	r3, #2
 8009be8:	e074      	b.n	8009cd4 <HAL_UART_Transmit+0x12a>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2221      	movs	r2, #33	; 0x21
 8009bfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009c00:	f7fb f908 	bl	8004e14 <HAL_GetTick>
 8009c04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	88fa      	ldrh	r2, [r7, #6]
 8009c0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	88fa      	ldrh	r2, [r7, #6]
 8009c10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009c1a:	e042      	b.n	8009ca2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	3b01      	subs	r3, #1
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c32:	d122      	bne.n	8009c7a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	9300      	str	r3, [sp, #0]
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2180      	movs	r1, #128	; 0x80
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f000 fb19 	bl	800a276 <UART_WaitOnFlagUntilTimeout>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e042      	b.n	8009cd4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c60:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d103      	bne.n	8009c72 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	3302      	adds	r3, #2
 8009c6e:	60bb      	str	r3, [r7, #8]
 8009c70:	e017      	b.n	8009ca2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	3301      	adds	r3, #1
 8009c76:	60bb      	str	r3, [r7, #8]
 8009c78:	e013      	b.n	8009ca2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2200      	movs	r2, #0
 8009c82:	2180      	movs	r1, #128	; 0x80
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 faf6 	bl	800a276 <UART_WaitOnFlagUntilTimeout>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e01f      	b.n	8009cd4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	60ba      	str	r2, [r7, #8]
 8009c9a:	781a      	ldrb	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1b7      	bne.n	8009c1c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	2140      	movs	r1, #64	; 0x40
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 fadd 	bl	800a276 <UART_WaitOnFlagUntilTimeout>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	e006      	b.n	8009cd4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	e000      	b.n	8009cd4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009cd2:	2302      	movs	r3, #2
  }
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3718      	adds	r7, #24
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	2b20      	cmp	r3, #32
 8009cf4:	d153      	bne.n	8009d9e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d002      	beq.n	8009d02 <HAL_UART_Transmit_DMA+0x26>
 8009cfc:	88fb      	ldrh	r3, [r7, #6]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e04c      	b.n	8009da0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d101      	bne.n	8009d14 <HAL_UART_Transmit_DMA+0x38>
 8009d10:	2302      	movs	r3, #2
 8009d12:	e045      	b.n	8009da0 <HAL_UART_Transmit_DMA+0xc4>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	88fa      	ldrh	r2, [r7, #6]
 8009d26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	88fa      	ldrh	r2, [r7, #6]
 8009d2c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2221      	movs	r2, #33	; 0x21
 8009d38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d40:	4a19      	ldr	r2, [pc, #100]	; (8009da8 <HAL_UART_Transmit_DMA+0xcc>)
 8009d42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d48:	4a18      	ldr	r2, [pc, #96]	; (8009dac <HAL_UART_Transmit_DMA+0xd0>)
 8009d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d50:	4a17      	ldr	r2, [pc, #92]	; (8009db0 <HAL_UART_Transmit_DMA+0xd4>)
 8009d52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d58:	2200      	movs	r2, #0
 8009d5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009d5c:	f107 0308 	add.w	r3, r7, #8
 8009d60:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	6819      	ldr	r1, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3304      	adds	r3, #4
 8009d70:	461a      	mov	r2, r3
 8009d72:	88fb      	ldrh	r3, [r7, #6]
 8009d74:	f7fb fcb0 	bl	80056d8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d80:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	695a      	ldr	r2, [r3, #20]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d98:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	e000      	b.n	8009da0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8009d9e:	2302      	movs	r3, #2
  }
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3718      	adds	r7, #24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	0800a0f1 	.word	0x0800a0f1
 8009dac:	0800a143 	.word	0x0800a143
 8009db0:	0800a1e3 	.word	0x0800a1e3

08009db4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b20      	cmp	r3, #32
 8009dcc:	d166      	bne.n	8009e9c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <HAL_UART_Receive_DMA+0x26>
 8009dd4:	88fb      	ldrh	r3, [r7, #6]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e05f      	b.n	8009e9e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d101      	bne.n	8009dec <HAL_UART_Receive_DMA+0x38>
 8009de8:	2302      	movs	r3, #2
 8009dea:	e058      	b.n	8009e9e <HAL_UART_Receive_DMA+0xea>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	88fa      	ldrh	r2, [r7, #6]
 8009dfe:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2222      	movs	r2, #34	; 0x22
 8009e0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e12:	4a25      	ldr	r2, [pc, #148]	; (8009ea8 <HAL_UART_Receive_DMA+0xf4>)
 8009e14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1a:	4a24      	ldr	r2, [pc, #144]	; (8009eac <HAL_UART_Receive_DMA+0xf8>)
 8009e1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e22:	4a23      	ldr	r2, [pc, #140]	; (8009eb0 <HAL_UART_Receive_DMA+0xfc>)
 8009e24:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8009e2e:	f107 0308 	add.w	r3, r7, #8
 8009e32:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	4619      	mov	r1, r3
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	88fb      	ldrh	r3, [r7, #6]
 8009e46:	f7fb fc47 	bl	80056d8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	613b      	str	r3, [r7, #16]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	613b      	str	r3, [r7, #16]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	613b      	str	r3, [r7, #16]
 8009e5e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68da      	ldr	r2, [r3, #12]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e76:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	695a      	ldr	r2, [r3, #20]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f042 0201 	orr.w	r2, r2, #1
 8009e86:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	695a      	ldr	r2, [r3, #20]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e96:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	e000      	b.n	8009e9e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009e9c:	2302      	movs	r3, #2
  }
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	0800a15f 	.word	0x0800a15f
 8009eac:	0800a1c7 	.word	0x0800a1c7
 8009eb0:	0800a1e3 	.word	0x0800a1e3

08009eb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b088      	sub	sp, #32
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	f003 030f 	and.w	r3, r3, #15
 8009ee2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10d      	bne.n	8009f06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	f003 0320 	and.w	r3, r3, #32
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d008      	beq.n	8009f06 <HAL_UART_IRQHandler+0x52>
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	f003 0320 	and.w	r3, r3, #32
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fab9 	bl	800a476 <UART_Receive_IT>
      return;
 8009f04:	e0d0      	b.n	800a0a8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 80b0 	beq.w	800a06e <HAL_UART_IRQHandler+0x1ba>
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	f003 0301 	and.w	r3, r3, #1
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d105      	bne.n	8009f24 <HAL_UART_IRQHandler+0x70>
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f000 80a5 	beq.w	800a06e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00a      	beq.n	8009f44 <HAL_UART_IRQHandler+0x90>
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d005      	beq.n	8009f44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3c:	f043 0201 	orr.w	r2, r3, #1
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00a      	beq.n	8009f64 <HAL_UART_IRQHandler+0xb0>
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f003 0301 	and.w	r3, r3, #1
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d005      	beq.n	8009f64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f5c:	f043 0202 	orr.w	r2, r3, #2
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	f003 0302 	and.w	r3, r3, #2
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00a      	beq.n	8009f84 <HAL_UART_IRQHandler+0xd0>
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	f003 0301 	and.w	r3, r3, #1
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7c:	f043 0204 	orr.w	r2, r3, #4
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	f003 0308 	and.w	r3, r3, #8
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00f      	beq.n	8009fae <HAL_UART_IRQHandler+0xfa>
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	f003 0320 	and.w	r3, r3, #32
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d104      	bne.n	8009fa2 <HAL_UART_IRQHandler+0xee>
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d005      	beq.n	8009fae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa6:	f043 0208 	orr.w	r2, r3, #8
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d077      	beq.n	800a0a6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	f003 0320 	and.w	r3, r3, #32
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d007      	beq.n	8009fd0 <HAL_UART_IRQHandler+0x11c>
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	f003 0320 	and.w	r3, r3, #32
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d002      	beq.n	8009fd0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fa53 	bl	800a476 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fda:	2b40      	cmp	r3, #64	; 0x40
 8009fdc:	bf0c      	ite	eq
 8009fde:	2301      	moveq	r3, #1
 8009fe0:	2300      	movne	r3, #0
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fea:	f003 0308 	and.w	r3, r3, #8
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d102      	bne.n	8009ff8 <HAL_UART_IRQHandler+0x144>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d031      	beq.n	800a05c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f99c 	bl	800a336 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	695b      	ldr	r3, [r3, #20]
 800a004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a008:	2b40      	cmp	r3, #64	; 0x40
 800a00a:	d123      	bne.n	800a054 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	695a      	ldr	r2, [r3, #20]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a01a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a020:	2b00      	cmp	r3, #0
 800a022:	d013      	beq.n	800a04c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a028:	4a21      	ldr	r2, [pc, #132]	; (800a0b0 <HAL_UART_IRQHandler+0x1fc>)
 800a02a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a030:	4618      	mov	r0, r3
 800a032:	f7fb fba9 	bl	8005788 <HAL_DMA_Abort_IT>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d016      	beq.n	800a06a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a046:	4610      	mov	r0, r2
 800a048:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a04a:	e00e      	b.n	800a06a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f845 	bl	800a0dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a052:	e00a      	b.n	800a06a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f841 	bl	800a0dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a05a:	e006      	b.n	800a06a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f83d 	bl	800a0dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a068:	e01d      	b.n	800a0a6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a06a:	bf00      	nop
    return;
 800a06c:	e01b      	b.n	800a0a6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a074:	2b00      	cmp	r3, #0
 800a076:	d008      	beq.n	800a08a <HAL_UART_IRQHandler+0x1d6>
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d003      	beq.n	800a08a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f989 	bl	800a39a <UART_Transmit_IT>
    return;
 800a088:	e00e      	b.n	800a0a8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a090:	2b00      	cmp	r3, #0
 800a092:	d009      	beq.n	800a0a8 <HAL_UART_IRQHandler+0x1f4>
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d004      	beq.n	800a0a8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f9d1 	bl	800a446 <UART_EndTransmit_IT>
    return;
 800a0a4:	e000      	b.n	800a0a8 <HAL_UART_IRQHandler+0x1f4>
    return;
 800a0a6:	bf00      	nop
  }
}
 800a0a8:	3720      	adds	r7, #32
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	0800a373 	.word	0x0800a373

0800a0b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0fc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d113      	bne.n	800a134 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	695a      	ldr	r2, [r3, #20]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a120:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68da      	ldr	r2, [r3, #12]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a130:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a132:	e002      	b.n	800a13a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f7f9 f903 	bl	8003340 <HAL_UART_TxCpltCallback>
}
 800a13a:	bf00      	nop
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f7ff ffaf 	bl	800a0b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a156:	bf00      	nop
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a176:	2b00      	cmp	r3, #0
 800a178:	d11e      	bne.n	800a1b8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68da      	ldr	r2, [r3, #12]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a18e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	695a      	ldr	r2, [r3, #20]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f022 0201 	bic.w	r2, r2, #1
 800a19e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	695a      	ldr	r2, [r3, #20]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1ae:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f7f9 f887 	bl	80032cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1be:	bf00      	nop
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f7ff ff77 	bl	800a0c8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1da:	bf00      	nop
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1fe:	2b80      	cmp	r3, #128	; 0x80
 800a200:	bf0c      	ite	eq
 800a202:	2301      	moveq	r3, #1
 800a204:	2300      	movne	r3, #0
 800a206:	b2db      	uxtb	r3, r3
 800a208:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b21      	cmp	r3, #33	; 0x21
 800a214:	d108      	bne.n	800a228 <UART_DMAError+0x46>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2200      	movs	r2, #0
 800a220:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a222:	68b8      	ldr	r0, [r7, #8]
 800a224:	f000 f871 	bl	800a30a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a232:	2b40      	cmp	r3, #64	; 0x40
 800a234:	bf0c      	ite	eq
 800a236:	2301      	moveq	r3, #1
 800a238:	2300      	movne	r3, #0
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b22      	cmp	r3, #34	; 0x22
 800a248:	d108      	bne.n	800a25c <UART_DMAError+0x7a>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d005      	beq.n	800a25c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2200      	movs	r2, #0
 800a254:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a256:	68b8      	ldr	r0, [r7, #8]
 800a258:	f000 f86d 	bl	800a336 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a260:	f043 0210 	orr.w	r2, r3, #16
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a268:	68b8      	ldr	r0, [r7, #8]
 800a26a:	f7ff ff37 	bl	800a0dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a26e:	bf00      	nop
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b084      	sub	sp, #16
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	60f8      	str	r0, [r7, #12]
 800a27e:	60b9      	str	r1, [r7, #8]
 800a280:	603b      	str	r3, [r7, #0]
 800a282:	4613      	mov	r3, r2
 800a284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a286:	e02c      	b.n	800a2e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28e:	d028      	beq.n	800a2e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d007      	beq.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a296:	f7fa fdbd 	bl	8004e14 <HAL_GetTick>
 800a29a:	4602      	mov	r2, r0
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	69ba      	ldr	r2, [r7, #24]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d21d      	bcs.n	800a2e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68da      	ldr	r2, [r3, #12]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a2b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	695a      	ldr	r2, [r3, #20]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f022 0201 	bic.w	r2, r2, #1
 800a2c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2220      	movs	r2, #32
 800a2ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2220      	movs	r2, #32
 800a2d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e00f      	b.n	800a302 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	bf0c      	ite	eq
 800a2f2:	2301      	moveq	r3, #1
 800a2f4:	2300      	movne	r3, #0
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d0c3      	beq.n	800a288 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b083      	sub	sp, #12
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68da      	ldr	r2, [r3, #12]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a320:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2220      	movs	r2, #32
 800a326:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a32a:	bf00      	nop
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a336:	b480      	push	{r7}
 800a338:	b083      	sub	sp, #12
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68da      	ldr	r2, [r3, #12]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a34c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	695a      	ldr	r2, [r3, #20]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f022 0201 	bic.w	r2, r2, #1
 800a35c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2220      	movs	r2, #32
 800a362:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a366:	bf00      	nop
 800a368:	370c      	adds	r7, #12
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f7ff fea5 	bl	800a0dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a392:	bf00      	nop
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b21      	cmp	r3, #33	; 0x21
 800a3ac:	d144      	bne.n	800a438 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3b6:	d11a      	bne.n	800a3ee <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a1b      	ldr	r3, [r3, #32]
 800a3bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3cc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d105      	bne.n	800a3e2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	1c9a      	adds	r2, r3, #2
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	621a      	str	r2, [r3, #32]
 800a3e0:	e00e      	b.n	800a400 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	1c5a      	adds	r2, r3, #1
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	621a      	str	r2, [r3, #32]
 800a3ec:	e008      	b.n	800a400 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a1b      	ldr	r3, [r3, #32]
 800a3f2:	1c59      	adds	r1, r3, #1
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	6211      	str	r1, [r2, #32]
 800a3f8:	781a      	ldrb	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a404:	b29b      	uxth	r3, r3
 800a406:	3b01      	subs	r3, #1
 800a408:	b29b      	uxth	r3, r3
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	4619      	mov	r1, r3
 800a40e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10f      	bne.n	800a434 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68da      	ldr	r2, [r3, #12]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a422:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68da      	ldr	r2, [r3, #12]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a432:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	e000      	b.n	800a43a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a438:	2302      	movs	r3, #2
  }
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr

0800a446 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b082      	sub	sp, #8
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68da      	ldr	r2, [r3, #12]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a45c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2220      	movs	r2, #32
 800a462:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7f8 ff6a 	bl	8003340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b22      	cmp	r3, #34	; 0x22
 800a488:	d171      	bne.n	800a56e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a492:	d123      	bne.n	800a4dc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a498:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10e      	bne.n	800a4c0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b8:	1c9a      	adds	r2, r3, #2
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	629a      	str	r2, [r3, #40]	; 0x28
 800a4be:	e029      	b.n	800a514 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d4:	1c5a      	adds	r2, r3, #1
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	629a      	str	r2, [r3, #40]	; 0x28
 800a4da:	e01b      	b.n	800a514 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6858      	ldr	r0, [r3, #4]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ee:	1c59      	adds	r1, r3, #1
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	6291      	str	r1, [r2, #40]	; 0x28
 800a4f4:	b2c2      	uxtb	r2, r0
 800a4f6:	701a      	strb	r2, [r3, #0]
 800a4f8:	e00c      	b.n	800a514 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	b2da      	uxtb	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a506:	1c58      	adds	r0, r3, #1
 800a508:	6879      	ldr	r1, [r7, #4]
 800a50a:	6288      	str	r0, [r1, #40]	; 0x28
 800a50c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a510:	b2d2      	uxtb	r2, r2
 800a512:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a518:	b29b      	uxth	r3, r3
 800a51a:	3b01      	subs	r3, #1
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	4619      	mov	r1, r3
 800a522:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a524:	2b00      	cmp	r3, #0
 800a526:	d120      	bne.n	800a56a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f022 0220 	bic.w	r2, r2, #32
 800a536:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68da      	ldr	r2, [r3, #12]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a546:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	695a      	ldr	r2, [r3, #20]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f022 0201 	bic.w	r2, r2, #1
 800a556:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2220      	movs	r2, #32
 800a55c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7f8 feb3 	bl	80032cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	e002      	b.n	800a570 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	e000      	b.n	800a570 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800a56e:	2302      	movs	r3, #2
  }
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	b0bd      	sub	sp, #244	; 0xf4
 800a57e:	af00      	add	r7, sp, #0
 800a580:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a594:	68d9      	ldr	r1, [r3, #12]
 800a596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	ea40 0301 	orr.w	r3, r0, r1
 800a5a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5a6:	689a      	ldr	r2, [r3, #8]
 800a5a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	431a      	orrs	r2, r3
 800a5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	431a      	orrs	r2, r3
 800a5b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5bc:	69db      	ldr	r3, [r3, #28]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800a5c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a5d0:	f021 010c 	bic.w	r1, r1, #12
 800a5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a5de:	430b      	orrs	r3, r1
 800a5e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5f2:	6999      	ldr	r1, [r3, #24]
 800a5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	ea40 0301 	orr.w	r3, r0, r1
 800a5fe:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a604:	69db      	ldr	r3, [r3, #28]
 800a606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a60a:	f040 81a5 	bne.w	800a958 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a60e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	4bcd      	ldr	r3, [pc, #820]	; (800a94c <UART_SetConfig+0x3d4>)
 800a616:	429a      	cmp	r2, r3
 800a618:	d006      	beq.n	800a628 <UART_SetConfig+0xb0>
 800a61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	4bcb      	ldr	r3, [pc, #812]	; (800a950 <UART_SetConfig+0x3d8>)
 800a622:	429a      	cmp	r2, r3
 800a624:	f040 80cb 	bne.w	800a7be <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a628:	f7fd f9da 	bl	80079e0 <HAL_RCC_GetPCLK2Freq>
 800a62c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a630:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a634:	461c      	mov	r4, r3
 800a636:	f04f 0500 	mov.w	r5, #0
 800a63a:	4622      	mov	r2, r4
 800a63c:	462b      	mov	r3, r5
 800a63e:	1891      	adds	r1, r2, r2
 800a640:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800a644:	415b      	adcs	r3, r3
 800a646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a64a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a64e:	1912      	adds	r2, r2, r4
 800a650:	eb45 0303 	adc.w	r3, r5, r3
 800a654:	f04f 0000 	mov.w	r0, #0
 800a658:	f04f 0100 	mov.w	r1, #0
 800a65c:	00d9      	lsls	r1, r3, #3
 800a65e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a662:	00d0      	lsls	r0, r2, #3
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	1911      	adds	r1, r2, r4
 800a66a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800a66e:	416b      	adcs	r3, r5
 800a670:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	461a      	mov	r2, r3
 800a67c:	f04f 0300 	mov.w	r3, #0
 800a680:	1891      	adds	r1, r2, r2
 800a682:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800a686:	415b      	adcs	r3, r3
 800a688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a68c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800a690:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a694:	f7f6 fb18 	bl	8000cc8 <__aeabi_uldivmod>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	4bad      	ldr	r3, [pc, #692]	; (800a954 <UART_SetConfig+0x3dc>)
 800a69e:	fba3 2302 	umull	r2, r3, r3, r2
 800a6a2:	095b      	lsrs	r3, r3, #5
 800a6a4:	011e      	lsls	r6, r3, #4
 800a6a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6aa:	461c      	mov	r4, r3
 800a6ac:	f04f 0500 	mov.w	r5, #0
 800a6b0:	4622      	mov	r2, r4
 800a6b2:	462b      	mov	r3, r5
 800a6b4:	1891      	adds	r1, r2, r2
 800a6b6:	67b9      	str	r1, [r7, #120]	; 0x78
 800a6b8:	415b      	adcs	r3, r3
 800a6ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6bc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800a6c0:	1912      	adds	r2, r2, r4
 800a6c2:	eb45 0303 	adc.w	r3, r5, r3
 800a6c6:	f04f 0000 	mov.w	r0, #0
 800a6ca:	f04f 0100 	mov.w	r1, #0
 800a6ce:	00d9      	lsls	r1, r3, #3
 800a6d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a6d4:	00d0      	lsls	r0, r2, #3
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	1911      	adds	r1, r2, r4
 800a6dc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800a6e0:	416b      	adcs	r3, r5
 800a6e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a6e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	f04f 0300 	mov.w	r3, #0
 800a6f2:	1891      	adds	r1, r2, r2
 800a6f4:	6739      	str	r1, [r7, #112]	; 0x70
 800a6f6:	415b      	adcs	r3, r3
 800a6f8:	677b      	str	r3, [r7, #116]	; 0x74
 800a6fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a6fe:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800a702:	f7f6 fae1 	bl	8000cc8 <__aeabi_uldivmod>
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	4b92      	ldr	r3, [pc, #584]	; (800a954 <UART_SetConfig+0x3dc>)
 800a70c:	fba3 1302 	umull	r1, r3, r3, r2
 800a710:	095b      	lsrs	r3, r3, #5
 800a712:	2164      	movs	r1, #100	; 0x64
 800a714:	fb01 f303 	mul.w	r3, r1, r3
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	00db      	lsls	r3, r3, #3
 800a71c:	3332      	adds	r3, #50	; 0x32
 800a71e:	4a8d      	ldr	r2, [pc, #564]	; (800a954 <UART_SetConfig+0x3dc>)
 800a720:	fba2 2303 	umull	r2, r3, r2, r3
 800a724:	095b      	lsrs	r3, r3, #5
 800a726:	005b      	lsls	r3, r3, #1
 800a728:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a72c:	441e      	add	r6, r3
 800a72e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a732:	4618      	mov	r0, r3
 800a734:	f04f 0100 	mov.w	r1, #0
 800a738:	4602      	mov	r2, r0
 800a73a:	460b      	mov	r3, r1
 800a73c:	1894      	adds	r4, r2, r2
 800a73e:	66bc      	str	r4, [r7, #104]	; 0x68
 800a740:	415b      	adcs	r3, r3
 800a742:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a744:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a748:	1812      	adds	r2, r2, r0
 800a74a:	eb41 0303 	adc.w	r3, r1, r3
 800a74e:	f04f 0400 	mov.w	r4, #0
 800a752:	f04f 0500 	mov.w	r5, #0
 800a756:	00dd      	lsls	r5, r3, #3
 800a758:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a75c:	00d4      	lsls	r4, r2, #3
 800a75e:	4622      	mov	r2, r4
 800a760:	462b      	mov	r3, r5
 800a762:	1814      	adds	r4, r2, r0
 800a764:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800a768:	414b      	adcs	r3, r1
 800a76a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a76e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	461a      	mov	r2, r3
 800a776:	f04f 0300 	mov.w	r3, #0
 800a77a:	1891      	adds	r1, r2, r2
 800a77c:	6639      	str	r1, [r7, #96]	; 0x60
 800a77e:	415b      	adcs	r3, r3
 800a780:	667b      	str	r3, [r7, #100]	; 0x64
 800a782:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800a786:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a78a:	f7f6 fa9d 	bl	8000cc8 <__aeabi_uldivmod>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4b70      	ldr	r3, [pc, #448]	; (800a954 <UART_SetConfig+0x3dc>)
 800a794:	fba3 1302 	umull	r1, r3, r3, r2
 800a798:	095b      	lsrs	r3, r3, #5
 800a79a:	2164      	movs	r1, #100	; 0x64
 800a79c:	fb01 f303 	mul.w	r3, r1, r3
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	00db      	lsls	r3, r3, #3
 800a7a4:	3332      	adds	r3, #50	; 0x32
 800a7a6:	4a6b      	ldr	r2, [pc, #428]	; (800a954 <UART_SetConfig+0x3dc>)
 800a7a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ac:	095b      	lsrs	r3, r3, #5
 800a7ae:	f003 0207 	and.w	r2, r3, #7
 800a7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4432      	add	r2, r6
 800a7ba:	609a      	str	r2, [r3, #8]
 800a7bc:	e26d      	b.n	800ac9a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a7be:	f7fd f8fb 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 800a7c2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a7ca:	461c      	mov	r4, r3
 800a7cc:	f04f 0500 	mov.w	r5, #0
 800a7d0:	4622      	mov	r2, r4
 800a7d2:	462b      	mov	r3, r5
 800a7d4:	1891      	adds	r1, r2, r2
 800a7d6:	65b9      	str	r1, [r7, #88]	; 0x58
 800a7d8:	415b      	adcs	r3, r3
 800a7da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a7e0:	1912      	adds	r2, r2, r4
 800a7e2:	eb45 0303 	adc.w	r3, r5, r3
 800a7e6:	f04f 0000 	mov.w	r0, #0
 800a7ea:	f04f 0100 	mov.w	r1, #0
 800a7ee:	00d9      	lsls	r1, r3, #3
 800a7f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a7f4:	00d0      	lsls	r0, r2, #3
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	1911      	adds	r1, r2, r4
 800a7fc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800a800:	416b      	adcs	r3, r5
 800a802:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	461a      	mov	r2, r3
 800a80e:	f04f 0300 	mov.w	r3, #0
 800a812:	1891      	adds	r1, r2, r2
 800a814:	6539      	str	r1, [r7, #80]	; 0x50
 800a816:	415b      	adcs	r3, r3
 800a818:	657b      	str	r3, [r7, #84]	; 0x54
 800a81a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a81e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800a822:	f7f6 fa51 	bl	8000cc8 <__aeabi_uldivmod>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	4b4a      	ldr	r3, [pc, #296]	; (800a954 <UART_SetConfig+0x3dc>)
 800a82c:	fba3 2302 	umull	r2, r3, r3, r2
 800a830:	095b      	lsrs	r3, r3, #5
 800a832:	011e      	lsls	r6, r3, #4
 800a834:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a838:	461c      	mov	r4, r3
 800a83a:	f04f 0500 	mov.w	r5, #0
 800a83e:	4622      	mov	r2, r4
 800a840:	462b      	mov	r3, r5
 800a842:	1891      	adds	r1, r2, r2
 800a844:	64b9      	str	r1, [r7, #72]	; 0x48
 800a846:	415b      	adcs	r3, r3
 800a848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a84a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a84e:	1912      	adds	r2, r2, r4
 800a850:	eb45 0303 	adc.w	r3, r5, r3
 800a854:	f04f 0000 	mov.w	r0, #0
 800a858:	f04f 0100 	mov.w	r1, #0
 800a85c:	00d9      	lsls	r1, r3, #3
 800a85e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a862:	00d0      	lsls	r0, r2, #3
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	1911      	adds	r1, r2, r4
 800a86a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800a86e:	416b      	adcs	r3, r5
 800a870:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	461a      	mov	r2, r3
 800a87c:	f04f 0300 	mov.w	r3, #0
 800a880:	1891      	adds	r1, r2, r2
 800a882:	6439      	str	r1, [r7, #64]	; 0x40
 800a884:	415b      	adcs	r3, r3
 800a886:	647b      	str	r3, [r7, #68]	; 0x44
 800a888:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a88c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800a890:	f7f6 fa1a 	bl	8000cc8 <__aeabi_uldivmod>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4b2e      	ldr	r3, [pc, #184]	; (800a954 <UART_SetConfig+0x3dc>)
 800a89a:	fba3 1302 	umull	r1, r3, r3, r2
 800a89e:	095b      	lsrs	r3, r3, #5
 800a8a0:	2164      	movs	r1, #100	; 0x64
 800a8a2:	fb01 f303 	mul.w	r3, r1, r3
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	00db      	lsls	r3, r3, #3
 800a8aa:	3332      	adds	r3, #50	; 0x32
 800a8ac:	4a29      	ldr	r2, [pc, #164]	; (800a954 <UART_SetConfig+0x3dc>)
 800a8ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b2:	095b      	lsrs	r3, r3, #5
 800a8b4:	005b      	lsls	r3, r3, #1
 800a8b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a8ba:	441e      	add	r6, r3
 800a8bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f04f 0100 	mov.w	r1, #0
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	1894      	adds	r4, r2, r2
 800a8cc:	63bc      	str	r4, [r7, #56]	; 0x38
 800a8ce:	415b      	adcs	r3, r3
 800a8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a8d6:	1812      	adds	r2, r2, r0
 800a8d8:	eb41 0303 	adc.w	r3, r1, r3
 800a8dc:	f04f 0400 	mov.w	r4, #0
 800a8e0:	f04f 0500 	mov.w	r5, #0
 800a8e4:	00dd      	lsls	r5, r3, #3
 800a8e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a8ea:	00d4      	lsls	r4, r2, #3
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	462b      	mov	r3, r5
 800a8f0:	1814      	adds	r4, r2, r0
 800a8f2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800a8f6:	414b      	adcs	r3, r1
 800a8f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	461a      	mov	r2, r3
 800a904:	f04f 0300 	mov.w	r3, #0
 800a908:	1891      	adds	r1, r2, r2
 800a90a:	6339      	str	r1, [r7, #48]	; 0x30
 800a90c:	415b      	adcs	r3, r3
 800a90e:	637b      	str	r3, [r7, #52]	; 0x34
 800a910:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a914:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a918:	f7f6 f9d6 	bl	8000cc8 <__aeabi_uldivmod>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4b0c      	ldr	r3, [pc, #48]	; (800a954 <UART_SetConfig+0x3dc>)
 800a922:	fba3 1302 	umull	r1, r3, r3, r2
 800a926:	095b      	lsrs	r3, r3, #5
 800a928:	2164      	movs	r1, #100	; 0x64
 800a92a:	fb01 f303 	mul.w	r3, r1, r3
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	00db      	lsls	r3, r3, #3
 800a932:	3332      	adds	r3, #50	; 0x32
 800a934:	4a07      	ldr	r2, [pc, #28]	; (800a954 <UART_SetConfig+0x3dc>)
 800a936:	fba2 2303 	umull	r2, r3, r2, r3
 800a93a:	095b      	lsrs	r3, r3, #5
 800a93c:	f003 0207 	and.w	r2, r3, #7
 800a940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4432      	add	r2, r6
 800a948:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a94a:	e1a6      	b.n	800ac9a <UART_SetConfig+0x722>
 800a94c:	40011000 	.word	0x40011000
 800a950:	40011400 	.word	0x40011400
 800a954:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	4bd1      	ldr	r3, [pc, #836]	; (800aca4 <UART_SetConfig+0x72c>)
 800a960:	429a      	cmp	r2, r3
 800a962:	d006      	beq.n	800a972 <UART_SetConfig+0x3fa>
 800a964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	4bcf      	ldr	r3, [pc, #828]	; (800aca8 <UART_SetConfig+0x730>)
 800a96c:	429a      	cmp	r2, r3
 800a96e:	f040 80ca 	bne.w	800ab06 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a972:	f7fd f835 	bl	80079e0 <HAL_RCC_GetPCLK2Freq>
 800a976:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a97a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a97e:	461c      	mov	r4, r3
 800a980:	f04f 0500 	mov.w	r5, #0
 800a984:	4622      	mov	r2, r4
 800a986:	462b      	mov	r3, r5
 800a988:	1891      	adds	r1, r2, r2
 800a98a:	62b9      	str	r1, [r7, #40]	; 0x28
 800a98c:	415b      	adcs	r3, r3
 800a98e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a990:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a994:	1912      	adds	r2, r2, r4
 800a996:	eb45 0303 	adc.w	r3, r5, r3
 800a99a:	f04f 0000 	mov.w	r0, #0
 800a99e:	f04f 0100 	mov.w	r1, #0
 800a9a2:	00d9      	lsls	r1, r3, #3
 800a9a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a9a8:	00d0      	lsls	r0, r2, #3
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	eb12 0a04 	adds.w	sl, r2, r4
 800a9b2:	eb43 0b05 	adc.w	fp, r3, r5
 800a9b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f04f 0100 	mov.w	r1, #0
 800a9c2:	f04f 0200 	mov.w	r2, #0
 800a9c6:	f04f 0300 	mov.w	r3, #0
 800a9ca:	008b      	lsls	r3, r1, #2
 800a9cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a9d0:	0082      	lsls	r2, r0, #2
 800a9d2:	4650      	mov	r0, sl
 800a9d4:	4659      	mov	r1, fp
 800a9d6:	f7f6 f977 	bl	8000cc8 <__aeabi_uldivmod>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	4bb3      	ldr	r3, [pc, #716]	; (800acac <UART_SetConfig+0x734>)
 800a9e0:	fba3 2302 	umull	r2, r3, r3, r2
 800a9e4:	095b      	lsrs	r3, r3, #5
 800a9e6:	011e      	lsls	r6, r3, #4
 800a9e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f04f 0100 	mov.w	r1, #0
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	1894      	adds	r4, r2, r2
 800a9f8:	623c      	str	r4, [r7, #32]
 800a9fa:	415b      	adcs	r3, r3
 800a9fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a9fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aa02:	1812      	adds	r2, r2, r0
 800aa04:	eb41 0303 	adc.w	r3, r1, r3
 800aa08:	f04f 0400 	mov.w	r4, #0
 800aa0c:	f04f 0500 	mov.w	r5, #0
 800aa10:	00dd      	lsls	r5, r3, #3
 800aa12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aa16:	00d4      	lsls	r4, r2, #3
 800aa18:	4622      	mov	r2, r4
 800aa1a:	462b      	mov	r3, r5
 800aa1c:	1814      	adds	r4, r2, r0
 800aa1e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800aa22:	414b      	adcs	r3, r1
 800aa24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f04f 0100 	mov.w	r1, #0
 800aa34:	f04f 0200 	mov.w	r2, #0
 800aa38:	f04f 0300 	mov.w	r3, #0
 800aa3c:	008b      	lsls	r3, r1, #2
 800aa3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aa42:	0082      	lsls	r2, r0, #2
 800aa44:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800aa48:	f7f6 f93e 	bl	8000cc8 <__aeabi_uldivmod>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4b96      	ldr	r3, [pc, #600]	; (800acac <UART_SetConfig+0x734>)
 800aa52:	fba3 1302 	umull	r1, r3, r3, r2
 800aa56:	095b      	lsrs	r3, r3, #5
 800aa58:	2164      	movs	r1, #100	; 0x64
 800aa5a:	fb01 f303 	mul.w	r3, r1, r3
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	011b      	lsls	r3, r3, #4
 800aa62:	3332      	adds	r3, #50	; 0x32
 800aa64:	4a91      	ldr	r2, [pc, #580]	; (800acac <UART_SetConfig+0x734>)
 800aa66:	fba2 2303 	umull	r2, r3, r2, r3
 800aa6a:	095b      	lsrs	r3, r3, #5
 800aa6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa70:	441e      	add	r6, r3
 800aa72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa76:	4618      	mov	r0, r3
 800aa78:	f04f 0100 	mov.w	r1, #0
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	460b      	mov	r3, r1
 800aa80:	1894      	adds	r4, r2, r2
 800aa82:	61bc      	str	r4, [r7, #24]
 800aa84:	415b      	adcs	r3, r3
 800aa86:	61fb      	str	r3, [r7, #28]
 800aa88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa8c:	1812      	adds	r2, r2, r0
 800aa8e:	eb41 0303 	adc.w	r3, r1, r3
 800aa92:	f04f 0400 	mov.w	r4, #0
 800aa96:	f04f 0500 	mov.w	r5, #0
 800aa9a:	00dd      	lsls	r5, r3, #3
 800aa9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aaa0:	00d4      	lsls	r4, r2, #3
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	462b      	mov	r3, r5
 800aaa6:	1814      	adds	r4, r2, r0
 800aaa8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800aaac:	414b      	adcs	r3, r1
 800aaae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f04f 0100 	mov.w	r1, #0
 800aabe:	f04f 0200 	mov.w	r2, #0
 800aac2:	f04f 0300 	mov.w	r3, #0
 800aac6:	008b      	lsls	r3, r1, #2
 800aac8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aacc:	0082      	lsls	r2, r0, #2
 800aace:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800aad2:	f7f6 f8f9 	bl	8000cc8 <__aeabi_uldivmod>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4b74      	ldr	r3, [pc, #464]	; (800acac <UART_SetConfig+0x734>)
 800aadc:	fba3 1302 	umull	r1, r3, r3, r2
 800aae0:	095b      	lsrs	r3, r3, #5
 800aae2:	2164      	movs	r1, #100	; 0x64
 800aae4:	fb01 f303 	mul.w	r3, r1, r3
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	011b      	lsls	r3, r3, #4
 800aaec:	3332      	adds	r3, #50	; 0x32
 800aaee:	4a6f      	ldr	r2, [pc, #444]	; (800acac <UART_SetConfig+0x734>)
 800aaf0:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf4:	095b      	lsrs	r3, r3, #5
 800aaf6:	f003 020f 	and.w	r2, r3, #15
 800aafa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4432      	add	r2, r6
 800ab02:	609a      	str	r2, [r3, #8]
 800ab04:	e0c9      	b.n	800ac9a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab06:	f7fc ff57 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 800ab0a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab12:	461c      	mov	r4, r3
 800ab14:	f04f 0500 	mov.w	r5, #0
 800ab18:	4622      	mov	r2, r4
 800ab1a:	462b      	mov	r3, r5
 800ab1c:	1891      	adds	r1, r2, r2
 800ab1e:	6139      	str	r1, [r7, #16]
 800ab20:	415b      	adcs	r3, r3
 800ab22:	617b      	str	r3, [r7, #20]
 800ab24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ab28:	1912      	adds	r2, r2, r4
 800ab2a:	eb45 0303 	adc.w	r3, r5, r3
 800ab2e:	f04f 0000 	mov.w	r0, #0
 800ab32:	f04f 0100 	mov.w	r1, #0
 800ab36:	00d9      	lsls	r1, r3, #3
 800ab38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab3c:	00d0      	lsls	r0, r2, #3
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	eb12 0804 	adds.w	r8, r2, r4
 800ab46:	eb43 0905 	adc.w	r9, r3, r5
 800ab4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f04f 0100 	mov.w	r1, #0
 800ab56:	f04f 0200 	mov.w	r2, #0
 800ab5a:	f04f 0300 	mov.w	r3, #0
 800ab5e:	008b      	lsls	r3, r1, #2
 800ab60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ab64:	0082      	lsls	r2, r0, #2
 800ab66:	4640      	mov	r0, r8
 800ab68:	4649      	mov	r1, r9
 800ab6a:	f7f6 f8ad 	bl	8000cc8 <__aeabi_uldivmod>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	460b      	mov	r3, r1
 800ab72:	4b4e      	ldr	r3, [pc, #312]	; (800acac <UART_SetConfig+0x734>)
 800ab74:	fba3 2302 	umull	r2, r3, r3, r2
 800ab78:	095b      	lsrs	r3, r3, #5
 800ab7a:	011e      	lsls	r6, r3, #4
 800ab7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab80:	4618      	mov	r0, r3
 800ab82:	f04f 0100 	mov.w	r1, #0
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	1894      	adds	r4, r2, r2
 800ab8c:	60bc      	str	r4, [r7, #8]
 800ab8e:	415b      	adcs	r3, r3
 800ab90:	60fb      	str	r3, [r7, #12]
 800ab92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab96:	1812      	adds	r2, r2, r0
 800ab98:	eb41 0303 	adc.w	r3, r1, r3
 800ab9c:	f04f 0400 	mov.w	r4, #0
 800aba0:	f04f 0500 	mov.w	r5, #0
 800aba4:	00dd      	lsls	r5, r3, #3
 800aba6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800abaa:	00d4      	lsls	r4, r2, #3
 800abac:	4622      	mov	r2, r4
 800abae:	462b      	mov	r3, r5
 800abb0:	1814      	adds	r4, r2, r0
 800abb2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800abb6:	414b      	adcs	r3, r1
 800abb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800abbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f04f 0100 	mov.w	r1, #0
 800abc8:	f04f 0200 	mov.w	r2, #0
 800abcc:	f04f 0300 	mov.w	r3, #0
 800abd0:	008b      	lsls	r3, r1, #2
 800abd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800abd6:	0082      	lsls	r2, r0, #2
 800abd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800abdc:	f7f6 f874 	bl	8000cc8 <__aeabi_uldivmod>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4b31      	ldr	r3, [pc, #196]	; (800acac <UART_SetConfig+0x734>)
 800abe6:	fba3 1302 	umull	r1, r3, r3, r2
 800abea:	095b      	lsrs	r3, r3, #5
 800abec:	2164      	movs	r1, #100	; 0x64
 800abee:	fb01 f303 	mul.w	r3, r1, r3
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	011b      	lsls	r3, r3, #4
 800abf6:	3332      	adds	r3, #50	; 0x32
 800abf8:	4a2c      	ldr	r2, [pc, #176]	; (800acac <UART_SetConfig+0x734>)
 800abfa:	fba2 2303 	umull	r2, r3, r2, r3
 800abfe:	095b      	lsrs	r3, r3, #5
 800ac00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac04:	441e      	add	r6, r3
 800ac06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f04f 0100 	mov.w	r1, #0
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	1894      	adds	r4, r2, r2
 800ac16:	603c      	str	r4, [r7, #0]
 800ac18:	415b      	adcs	r3, r3
 800ac1a:	607b      	str	r3, [r7, #4]
 800ac1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac20:	1812      	adds	r2, r2, r0
 800ac22:	eb41 0303 	adc.w	r3, r1, r3
 800ac26:	f04f 0400 	mov.w	r4, #0
 800ac2a:	f04f 0500 	mov.w	r5, #0
 800ac2e:	00dd      	lsls	r5, r3, #3
 800ac30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ac34:	00d4      	lsls	r4, r2, #3
 800ac36:	4622      	mov	r2, r4
 800ac38:	462b      	mov	r3, r5
 800ac3a:	1814      	adds	r4, r2, r0
 800ac3c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800ac40:	414b      	adcs	r3, r1
 800ac42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ac46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f04f 0100 	mov.w	r1, #0
 800ac52:	f04f 0200 	mov.w	r2, #0
 800ac56:	f04f 0300 	mov.w	r3, #0
 800ac5a:	008b      	lsls	r3, r1, #2
 800ac5c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ac60:	0082      	lsls	r2, r0, #2
 800ac62:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800ac66:	f7f6 f82f 	bl	8000cc8 <__aeabi_uldivmod>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	4b0f      	ldr	r3, [pc, #60]	; (800acac <UART_SetConfig+0x734>)
 800ac70:	fba3 1302 	umull	r1, r3, r3, r2
 800ac74:	095b      	lsrs	r3, r3, #5
 800ac76:	2164      	movs	r1, #100	; 0x64
 800ac78:	fb01 f303 	mul.w	r3, r1, r3
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	011b      	lsls	r3, r3, #4
 800ac80:	3332      	adds	r3, #50	; 0x32
 800ac82:	4a0a      	ldr	r2, [pc, #40]	; (800acac <UART_SetConfig+0x734>)
 800ac84:	fba2 2303 	umull	r2, r3, r2, r3
 800ac88:	095b      	lsrs	r3, r3, #5
 800ac8a:	f003 020f 	and.w	r2, r3, #15
 800ac8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4432      	add	r2, r6
 800ac96:	609a      	str	r2, [r3, #8]
}
 800ac98:	e7ff      	b.n	800ac9a <UART_SetConfig+0x722>
 800ac9a:	bf00      	nop
 800ac9c:	37f4      	adds	r7, #244	; 0xf4
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca4:	40011000 	.word	0x40011000
 800aca8:	40011400 	.word	0x40011400
 800acac:	51eb851f 	.word	0x51eb851f

0800acb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800acb4:	4904      	ldr	r1, [pc, #16]	; (800acc8 <MX_FATFS_Init+0x18>)
 800acb6:	4805      	ldr	r0, [pc, #20]	; (800accc <MX_FATFS_Init+0x1c>)
 800acb8:	f003 fa92 	bl	800e1e0 <FATFS_LinkDriver>
 800acbc:	4603      	mov	r3, r0
 800acbe:	461a      	mov	r2, r3
 800acc0:	4b03      	ldr	r3, [pc, #12]	; (800acd0 <MX_FATFS_Init+0x20>)
 800acc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800acc4:	bf00      	nop
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	20001614 	.word	0x20001614
 800accc:	20000010 	.word	0x20000010
 800acd0:	20001618 	.word	0x20001618

0800acd4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800acd4:	b480      	push	{r7}
 800acd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800acd8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800acda:	4618      	mov	r0, r3
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	4603      	mov	r3, r0
 800acec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800acee:	79fb      	ldrb	r3, [r7, #7]
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 f9dd 	bl	800b0b0 <USER_SPI_initialize>
 800acf6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	4603      	mov	r3, r0
 800ad08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f000 fab9 	bl	800b284 <USER_SPI_status>
 800ad12:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60b9      	str	r1, [r7, #8]
 800ad24:	607a      	str	r2, [r7, #4]
 800ad26:	603b      	str	r3, [r7, #0]
 800ad28:	4603      	mov	r3, r0
 800ad2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800ad2c:	7bf8      	ldrb	r0, [r7, #15]
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	68b9      	ldr	r1, [r7, #8]
 800ad34:	f000 fabc 	bl	800b2b0 <USER_SPI_read>
 800ad38:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b084      	sub	sp, #16
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
 800ad4c:	603b      	str	r3, [r7, #0]
 800ad4e:	4603      	mov	r3, r0
 800ad50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800ad52:	7bf8      	ldrb	r0, [r7, #15]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	68b9      	ldr	r1, [r7, #8]
 800ad5a:	f000 fb0f 	bl	800b37c <USER_SPI_write>
 800ad5e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	4603      	mov	r3, r0
 800ad70:	603a      	str	r2, [r7, #0]
 800ad72:	71fb      	strb	r3, [r7, #7]
 800ad74:	460b      	mov	r3, r1
 800ad76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800ad78:	79b9      	ldrb	r1, [r7, #6]
 800ad7a:	79fb      	ldrb	r3, [r7, #7]
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 fb78 	bl	800b474 <USER_SPI_ioctl>
 800ad84:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
	...

0800ad90 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800ad98:	f7fa f83c 	bl	8004e14 <HAL_GetTick>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	4a04      	ldr	r2, [pc, #16]	; (800adb0 <SPI_Timer_On+0x20>)
 800ada0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800ada2:	4a04      	ldr	r2, [pc, #16]	; (800adb4 <SPI_Timer_On+0x24>)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6013      	str	r3, [r2, #0]
}
 800ada8:	bf00      	nop
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	20001a7c 	.word	0x20001a7c
 800adb4:	20001a80 	.word	0x20001a80

0800adb8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800adb8:	b580      	push	{r7, lr}
 800adba:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800adbc:	f7fa f82a 	bl	8004e14 <HAL_GetTick>
 800adc0:	4602      	mov	r2, r0
 800adc2:	4b06      	ldr	r3, [pc, #24]	; (800addc <SPI_Timer_Status+0x24>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	1ad2      	subs	r2, r2, r3
 800adc8:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <SPI_Timer_Status+0x28>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	429a      	cmp	r2, r3
 800adce:	bf34      	ite	cc
 800add0:	2301      	movcc	r3, #1
 800add2:	2300      	movcs	r3, #0
 800add4:	b2db      	uxtb	r3, r3
}
 800add6:	4618      	mov	r0, r3
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	20001a7c 	.word	0x20001a7c
 800ade0:	20001a80 	.word	0x20001a80

0800ade4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af02      	add	r7, sp, #8
 800adea:	4603      	mov	r3, r0
 800adec:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800adee:	f107 020f 	add.w	r2, r7, #15
 800adf2:	1df9      	adds	r1, r7, #7
 800adf4:	2332      	movs	r3, #50	; 0x32
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	2301      	movs	r3, #1
 800adfa:	4804      	ldr	r0, [pc, #16]	; (800ae0c <xchg_spi+0x28>)
 800adfc:	f7fd fc61 	bl	80086c2 <HAL_SPI_TransmitReceive>
    return rxDat;
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	200012d8 	.word	0x200012d8

0800ae10 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800ae10:	b590      	push	{r4, r7, lr}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60fb      	str	r3, [r7, #12]
 800ae1e:	e00a      	b.n	800ae36 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	18d4      	adds	r4, r2, r3
 800ae26:	20ff      	movs	r0, #255	; 0xff
 800ae28:	f7ff ffdc 	bl	800ade4 <xchg_spi>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	3301      	adds	r3, #1
 800ae34:	60fb      	str	r3, [r7, #12]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d3f0      	bcc.n	800ae20 <rcvr_spi_multi+0x10>
	}
}
 800ae3e:	bf00      	nop
 800ae40:	bf00      	nop
 800ae42:	3714      	adds	r7, #20
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd90      	pop	{r4, r7, pc}

0800ae48 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800ae52:	2300      	movs	r3, #0
 800ae54:	60fb      	str	r3, [r7, #12]
 800ae56:	e009      	b.n	800ae6c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7ff ffbf 	bl	800ade4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d3f1      	bcc.n	800ae58 <xmit_spi_multi+0x10>
	}
}
 800ae74:	bf00      	nop
 800ae76:	bf00      	nop
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b086      	sub	sp, #24
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800ae86:	f7f9 ffc5 	bl	8004e14 <HAL_GetTick>
 800ae8a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800ae90:	20ff      	movs	r0, #255	; 0xff
 800ae92:	f7ff ffa7 	bl	800ade4 <xchg_spi>
 800ae96:	4603      	mov	r3, r0
 800ae98:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800ae9a:	7bfb      	ldrb	r3, [r7, #15]
 800ae9c:	2bff      	cmp	r3, #255	; 0xff
 800ae9e:	d007      	beq.n	800aeb0 <wait_ready+0x32>
 800aea0:	f7f9 ffb8 	bl	8004e14 <HAL_GetTick>
 800aea4:	4602      	mov	r2, r0
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	693a      	ldr	r2, [r7, #16]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d8ef      	bhi.n	800ae90 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	2bff      	cmp	r3, #255	; 0xff
 800aeb4:	bf0c      	ite	eq
 800aeb6:	2301      	moveq	r3, #1
 800aeb8:	2300      	movne	r3, #0
 800aeba:	b2db      	uxtb	r3, r3
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3718      	adds	r7, #24
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800aec8:	2201      	movs	r2, #1
 800aeca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aece:	4804      	ldr	r0, [pc, #16]	; (800aee0 <despiselect+0x1c>)
 800aed0:	f7fb f8aa 	bl	8006028 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800aed4:	20ff      	movs	r0, #255	; 0xff
 800aed6:	f7ff ff85 	bl	800ade4 <xchg_spi>

}
 800aeda:	bf00      	nop
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	40021400 	.word	0x40021400

0800aee4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800aee8:	2200      	movs	r2, #0
 800aeea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aeee:	480a      	ldr	r0, [pc, #40]	; (800af18 <spiselect+0x34>)
 800aef0:	f7fb f89a 	bl	8006028 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800aef4:	20ff      	movs	r0, #255	; 0xff
 800aef6:	f7ff ff75 	bl	800ade4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800aefa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800aefe:	f7ff ffbe 	bl	800ae7e <wait_ready>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <spiselect+0x28>
 800af08:	2301      	movs	r3, #1
 800af0a:	e002      	b.n	800af12 <spiselect+0x2e>

	despiselect();
 800af0c:	f7ff ffda 	bl	800aec4 <despiselect>
	return 0;	/* Timeout */
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	40021400 	.word	0x40021400

0800af1c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800af26:	20c8      	movs	r0, #200	; 0xc8
 800af28:	f7ff ff32 	bl	800ad90 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800af2c:	20ff      	movs	r0, #255	; 0xff
 800af2e:	f7ff ff59 	bl	800ade4 <xchg_spi>
 800af32:	4603      	mov	r3, r0
 800af34:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800af36:	7bfb      	ldrb	r3, [r7, #15]
 800af38:	2bff      	cmp	r3, #255	; 0xff
 800af3a:	d104      	bne.n	800af46 <rcvr_datablock+0x2a>
 800af3c:	f7ff ff3c 	bl	800adb8 <SPI_Timer_Status>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1f2      	bne.n	800af2c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800af46:	7bfb      	ldrb	r3, [r7, #15]
 800af48:	2bfe      	cmp	r3, #254	; 0xfe
 800af4a:	d001      	beq.n	800af50 <rcvr_datablock+0x34>
 800af4c:	2300      	movs	r3, #0
 800af4e:	e00a      	b.n	800af66 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800af50:	6839      	ldr	r1, [r7, #0]
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7ff ff5c 	bl	800ae10 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800af58:	20ff      	movs	r0, #255	; 0xff
 800af5a:	f7ff ff43 	bl	800ade4 <xchg_spi>
 800af5e:	20ff      	movs	r0, #255	; 0xff
 800af60:	f7ff ff40 	bl	800ade4 <xchg_spi>

	return 1;						/* Function succeeded */
 800af64:	2301      	movs	r3, #1
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b084      	sub	sp, #16
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	460b      	mov	r3, r1
 800af78:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800af7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800af7e:	f7ff ff7e 	bl	800ae7e <wait_ready>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d101      	bne.n	800af8c <xmit_datablock+0x1e>
 800af88:	2300      	movs	r3, #0
 800af8a:	e01e      	b.n	800afca <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800af8c:	78fb      	ldrb	r3, [r7, #3]
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff ff28 	bl	800ade4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800af94:	78fb      	ldrb	r3, [r7, #3]
 800af96:	2bfd      	cmp	r3, #253	; 0xfd
 800af98:	d016      	beq.n	800afc8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800af9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff ff52 	bl	800ae48 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800afa4:	20ff      	movs	r0, #255	; 0xff
 800afa6:	f7ff ff1d 	bl	800ade4 <xchg_spi>
 800afaa:	20ff      	movs	r0, #255	; 0xff
 800afac:	f7ff ff1a 	bl	800ade4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800afb0:	20ff      	movs	r0, #255	; 0xff
 800afb2:	f7ff ff17 	bl	800ade4 <xchg_spi>
 800afb6:	4603      	mov	r3, r0
 800afb8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800afba:	7bfb      	ldrb	r3, [r7, #15]
 800afbc:	f003 031f 	and.w	r3, r3, #31
 800afc0:	2b05      	cmp	r3, #5
 800afc2:	d001      	beq.n	800afc8 <xmit_datablock+0x5a>
 800afc4:	2300      	movs	r3, #0
 800afc6:	e000      	b.n	800afca <xmit_datablock+0x5c>
	}
	return 1;
 800afc8:	2301      	movs	r3, #1
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b084      	sub	sp, #16
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	4603      	mov	r3, r0
 800afda:	6039      	str	r1, [r7, #0]
 800afdc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800afde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	da0e      	bge.n	800b004 <send_cmd+0x32>
		cmd &= 0x7F;
 800afe6:	79fb      	ldrb	r3, [r7, #7]
 800afe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afec:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800afee:	2100      	movs	r1, #0
 800aff0:	2037      	movs	r0, #55	; 0x37
 800aff2:	f7ff ffee 	bl	800afd2 <send_cmd>
 800aff6:	4603      	mov	r3, r0
 800aff8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800affa:	7bbb      	ldrb	r3, [r7, #14]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d901      	bls.n	800b004 <send_cmd+0x32>
 800b000:	7bbb      	ldrb	r3, [r7, #14]
 800b002:	e051      	b.n	800b0a8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800b004:	79fb      	ldrb	r3, [r7, #7]
 800b006:	2b0c      	cmp	r3, #12
 800b008:	d008      	beq.n	800b01c <send_cmd+0x4a>
		despiselect();
 800b00a:	f7ff ff5b 	bl	800aec4 <despiselect>
		if (!spiselect()) return 0xFF;
 800b00e:	f7ff ff69 	bl	800aee4 <spiselect>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d101      	bne.n	800b01c <send_cmd+0x4a>
 800b018:	23ff      	movs	r3, #255	; 0xff
 800b01a:	e045      	b.n	800b0a8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800b01c:	79fb      	ldrb	r3, [r7, #7]
 800b01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b022:	b2db      	uxtb	r3, r3
 800b024:	4618      	mov	r0, r3
 800b026:	f7ff fedd 	bl	800ade4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	0e1b      	lsrs	r3, r3, #24
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	4618      	mov	r0, r3
 800b032:	f7ff fed7 	bl	800ade4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	0c1b      	lsrs	r3, r3, #16
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7ff fed1 	bl	800ade4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	0a1b      	lsrs	r3, r3, #8
 800b046:	b2db      	uxtb	r3, r3
 800b048:	4618      	mov	r0, r3
 800b04a:	f7ff fecb 	bl	800ade4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	4618      	mov	r0, r3
 800b054:	f7ff fec6 	bl	800ade4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800b058:	2301      	movs	r3, #1
 800b05a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800b05c:	79fb      	ldrb	r3, [r7, #7]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <send_cmd+0x94>
 800b062:	2395      	movs	r3, #149	; 0x95
 800b064:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800b066:	79fb      	ldrb	r3, [r7, #7]
 800b068:	2b08      	cmp	r3, #8
 800b06a:	d101      	bne.n	800b070 <send_cmd+0x9e>
 800b06c:	2387      	movs	r3, #135	; 0x87
 800b06e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	4618      	mov	r0, r3
 800b074:	f7ff feb6 	bl	800ade4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800b078:	79fb      	ldrb	r3, [r7, #7]
 800b07a:	2b0c      	cmp	r3, #12
 800b07c:	d102      	bne.n	800b084 <send_cmd+0xb2>
 800b07e:	20ff      	movs	r0, #255	; 0xff
 800b080:	f7ff feb0 	bl	800ade4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800b084:	230a      	movs	r3, #10
 800b086:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800b088:	20ff      	movs	r0, #255	; 0xff
 800b08a:	f7ff feab 	bl	800ade4 <xchg_spi>
 800b08e:	4603      	mov	r3, r0
 800b090:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800b092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b096:	2b00      	cmp	r3, #0
 800b098:	da05      	bge.n	800b0a6 <send_cmd+0xd4>
 800b09a:	7bfb      	ldrb	r3, [r7, #15]
 800b09c:	3b01      	subs	r3, #1
 800b09e:	73fb      	strb	r3, [r7, #15]
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1f0      	bne.n	800b088 <send_cmd+0xb6>

	return res;							/* Return received response */
 800b0a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3710      	adds	r7, #16
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b0b0:	b590      	push	{r4, r7, lr}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800b0ba:	79fb      	ldrb	r3, [r7, #7]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <USER_SPI_initialize+0x14>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e0d4      	b.n	800b26e <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800b0c4:	4b6c      	ldr	r3, [pc, #432]	; (800b278 <USER_SPI_initialize+0x1c8>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	f003 0302 	and.w	r3, r3, #2
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d003      	beq.n	800b0da <USER_SPI_initialize+0x2a>
 800b0d2:	4b69      	ldr	r3, [pc, #420]	; (800b278 <USER_SPI_initialize+0x1c8>)
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	e0c9      	b.n	800b26e <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800b0da:	4b68      	ldr	r3, [pc, #416]	; (800b27c <USER_SPI_initialize+0x1cc>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	4b66      	ldr	r3, [pc, #408]	; (800b27c <USER_SPI_initialize+0x1cc>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800b0e8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800b0ea:	230a      	movs	r3, #10
 800b0ec:	73fb      	strb	r3, [r7, #15]
 800b0ee:	e005      	b.n	800b0fc <USER_SPI_initialize+0x4c>
 800b0f0:	20ff      	movs	r0, #255	; 0xff
 800b0f2:	f7ff fe77 	bl	800ade4 <xchg_spi>
 800b0f6:	7bfb      	ldrb	r3, [r7, #15]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	73fb      	strb	r3, [r7, #15]
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1f6      	bne.n	800b0f0 <USER_SPI_initialize+0x40>

	ty = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800b106:	2100      	movs	r1, #0
 800b108:	2000      	movs	r0, #0
 800b10a:	f7ff ff62 	bl	800afd2 <send_cmd>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b01      	cmp	r3, #1
 800b112:	f040 808b 	bne.w	800b22c <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800b116:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b11a:	f7ff fe39 	bl	800ad90 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800b11e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b122:	2008      	movs	r0, #8
 800b124:	f7ff ff55 	bl	800afd2 <send_cmd>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d151      	bne.n	800b1d2 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800b12e:	2300      	movs	r3, #0
 800b130:	73fb      	strb	r3, [r7, #15]
 800b132:	e00d      	b.n	800b150 <USER_SPI_initialize+0xa0>
 800b134:	7bfc      	ldrb	r4, [r7, #15]
 800b136:	20ff      	movs	r0, #255	; 0xff
 800b138:	f7ff fe54 	bl	800ade4 <xchg_spi>
 800b13c:	4603      	mov	r3, r0
 800b13e:	461a      	mov	r2, r3
 800b140:	f107 0310 	add.w	r3, r7, #16
 800b144:	4423      	add	r3, r4
 800b146:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
 800b14c:	3301      	adds	r3, #1
 800b14e:	73fb      	strb	r3, [r7, #15]
 800b150:	7bfb      	ldrb	r3, [r7, #15]
 800b152:	2b03      	cmp	r3, #3
 800b154:	d9ee      	bls.n	800b134 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800b156:	7abb      	ldrb	r3, [r7, #10]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d167      	bne.n	800b22c <USER_SPI_initialize+0x17c>
 800b15c:	7afb      	ldrb	r3, [r7, #11]
 800b15e:	2baa      	cmp	r3, #170	; 0xaa
 800b160:	d164      	bne.n	800b22c <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800b162:	bf00      	nop
 800b164:	f7ff fe28 	bl	800adb8 <SPI_Timer_Status>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d007      	beq.n	800b17e <USER_SPI_initialize+0xce>
 800b16e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b172:	20a9      	movs	r0, #169	; 0xa9
 800b174:	f7ff ff2d 	bl	800afd2 <send_cmd>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1f2      	bne.n	800b164 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800b17e:	f7ff fe1b 	bl	800adb8 <SPI_Timer_Status>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d051      	beq.n	800b22c <USER_SPI_initialize+0x17c>
 800b188:	2100      	movs	r1, #0
 800b18a:	203a      	movs	r0, #58	; 0x3a
 800b18c:	f7ff ff21 	bl	800afd2 <send_cmd>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d14a      	bne.n	800b22c <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800b196:	2300      	movs	r3, #0
 800b198:	73fb      	strb	r3, [r7, #15]
 800b19a:	e00d      	b.n	800b1b8 <USER_SPI_initialize+0x108>
 800b19c:	7bfc      	ldrb	r4, [r7, #15]
 800b19e:	20ff      	movs	r0, #255	; 0xff
 800b1a0:	f7ff fe20 	bl	800ade4 <xchg_spi>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	f107 0310 	add.w	r3, r7, #16
 800b1ac:	4423      	add	r3, r4
 800b1ae:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	73fb      	strb	r3, [r7, #15]
 800b1b8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ba:	2b03      	cmp	r3, #3
 800b1bc:	d9ee      	bls.n	800b19c <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800b1be:	7a3b      	ldrb	r3, [r7, #8]
 800b1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <USER_SPI_initialize+0x11c>
 800b1c8:	230c      	movs	r3, #12
 800b1ca:	e000      	b.n	800b1ce <USER_SPI_initialize+0x11e>
 800b1cc:	2304      	movs	r3, #4
 800b1ce:	737b      	strb	r3, [r7, #13]
 800b1d0:	e02c      	b.n	800b22c <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	20a9      	movs	r0, #169	; 0xa9
 800b1d6:	f7ff fefc 	bl	800afd2 <send_cmd>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d804      	bhi.n	800b1ea <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	737b      	strb	r3, [r7, #13]
 800b1e4:	23a9      	movs	r3, #169	; 0xa9
 800b1e6:	73bb      	strb	r3, [r7, #14]
 800b1e8:	e003      	b.n	800b1f2 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	737b      	strb	r3, [r7, #13]
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800b1f2:	bf00      	nop
 800b1f4:	f7ff fde0 	bl	800adb8 <SPI_Timer_Status>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d007      	beq.n	800b20e <USER_SPI_initialize+0x15e>
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	2100      	movs	r1, #0
 800b202:	4618      	mov	r0, r3
 800b204:	f7ff fee5 	bl	800afd2 <send_cmd>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1f2      	bne.n	800b1f4 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800b20e:	f7ff fdd3 	bl	800adb8 <SPI_Timer_Status>
 800b212:	4603      	mov	r3, r0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d007      	beq.n	800b228 <USER_SPI_initialize+0x178>
 800b218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b21c:	2010      	movs	r0, #16
 800b21e:	f7ff fed8 	bl	800afd2 <send_cmd>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <USER_SPI_initialize+0x17c>
				ty = 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800b22c:	4a14      	ldr	r2, [pc, #80]	; (800b280 <USER_SPI_initialize+0x1d0>)
 800b22e:	7b7b      	ldrb	r3, [r7, #13]
 800b230:	7013      	strb	r3, [r2, #0]
	despiselect();
 800b232:	f7ff fe47 	bl	800aec4 <despiselect>

	if (ty) {			/* OK */
 800b236:	7b7b      	ldrb	r3, [r7, #13]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d012      	beq.n	800b262 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800b23c:	4b0f      	ldr	r3, [pc, #60]	; (800b27c <USER_SPI_initialize+0x1cc>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b246:	4b0d      	ldr	r3, [pc, #52]	; (800b27c <USER_SPI_initialize+0x1cc>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f042 0220 	orr.w	r2, r2, #32
 800b24e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b250:	4b09      	ldr	r3, [pc, #36]	; (800b278 <USER_SPI_initialize+0x1c8>)
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	b2db      	uxtb	r3, r3
 800b256:	f023 0301 	bic.w	r3, r3, #1
 800b25a:	b2da      	uxtb	r2, r3
 800b25c:	4b06      	ldr	r3, [pc, #24]	; (800b278 <USER_SPI_initialize+0x1c8>)
 800b25e:	701a      	strb	r2, [r3, #0]
 800b260:	e002      	b.n	800b268 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800b262:	4b05      	ldr	r3, [pc, #20]	; (800b278 <USER_SPI_initialize+0x1c8>)
 800b264:	2201      	movs	r2, #1
 800b266:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800b268:	4b03      	ldr	r3, [pc, #12]	; (800b278 <USER_SPI_initialize+0x1c8>)
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	b2db      	uxtb	r3, r3
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3714      	adds	r7, #20
 800b272:	46bd      	mov	sp, r7
 800b274:	bd90      	pop	{r4, r7, pc}
 800b276:	bf00      	nop
 800b278:	20000024 	.word	0x20000024
 800b27c:	200012d8 	.word	0x200012d8
 800b280:	200004b0 	.word	0x200004b0

0800b284 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	4603      	mov	r3, r0
 800b28c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800b28e:	79fb      	ldrb	r3, [r7, #7]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <USER_SPI_status+0x14>
 800b294:	2301      	movs	r3, #1
 800b296:	e002      	b.n	800b29e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800b298:	4b04      	ldr	r3, [pc, #16]	; (800b2ac <USER_SPI_status+0x28>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	b2db      	uxtb	r3, r3
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	20000024 	.word	0x20000024

0800b2b0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60b9      	str	r1, [r7, #8]
 800b2b8:	607a      	str	r2, [r7, #4]
 800b2ba:	603b      	str	r3, [r7, #0]
 800b2bc:	4603      	mov	r3, r0
 800b2be:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d102      	bne.n	800b2cc <USER_SPI_read+0x1c>
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d101      	bne.n	800b2d0 <USER_SPI_read+0x20>
 800b2cc:	2304      	movs	r3, #4
 800b2ce:	e04d      	b.n	800b36c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b2d0:	4b28      	ldr	r3, [pc, #160]	; (800b374 <USER_SPI_read+0xc4>)
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <USER_SPI_read+0x32>
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e044      	b.n	800b36c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800b2e2:	4b25      	ldr	r3, [pc, #148]	; (800b378 <USER_SPI_read+0xc8>)
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	f003 0308 	and.w	r3, r3, #8
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d102      	bne.n	800b2f4 <USER_SPI_read+0x44>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	025b      	lsls	r3, r3, #9
 800b2f2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d111      	bne.n	800b31e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800b2fa:	6879      	ldr	r1, [r7, #4]
 800b2fc:	2011      	movs	r0, #17
 800b2fe:	f7ff fe68 	bl	800afd2 <send_cmd>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d129      	bne.n	800b35c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800b308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b30c:	68b8      	ldr	r0, [r7, #8]
 800b30e:	f7ff fe05 	bl	800af1c <rcvr_datablock>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d021      	beq.n	800b35c <USER_SPI_read+0xac>
			count = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	603b      	str	r3, [r7, #0]
 800b31c:	e01e      	b.n	800b35c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800b31e:	6879      	ldr	r1, [r7, #4]
 800b320:	2012      	movs	r0, #18
 800b322:	f7ff fe56 	bl	800afd2 <send_cmd>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d117      	bne.n	800b35c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800b32c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b330:	68b8      	ldr	r0, [r7, #8]
 800b332:	f7ff fdf3 	bl	800af1c <rcvr_datablock>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00a      	beq.n	800b352 <USER_SPI_read+0xa2>
				buff += 512;
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b342:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	3b01      	subs	r3, #1
 800b348:	603b      	str	r3, [r7, #0]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1ed      	bne.n	800b32c <USER_SPI_read+0x7c>
 800b350:	e000      	b.n	800b354 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800b352:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800b354:	2100      	movs	r1, #0
 800b356:	200c      	movs	r0, #12
 800b358:	f7ff fe3b 	bl	800afd2 <send_cmd>
		}
	}
	despiselect();
 800b35c:	f7ff fdb2 	bl	800aec4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	bf14      	ite	ne
 800b366:	2301      	movne	r3, #1
 800b368:	2300      	moveq	r3, #0
 800b36a:	b2db      	uxtb	r3, r3
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	20000024 	.word	0x20000024
 800b378:	200004b0 	.word	0x200004b0

0800b37c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	60b9      	str	r1, [r7, #8]
 800b384:	607a      	str	r2, [r7, #4]
 800b386:	603b      	str	r3, [r7, #0]
 800b388:	4603      	mov	r3, r0
 800b38a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d102      	bne.n	800b398 <USER_SPI_write+0x1c>
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d101      	bne.n	800b39c <USER_SPI_write+0x20>
 800b398:	2304      	movs	r3, #4
 800b39a:	e063      	b.n	800b464 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b39c:	4b33      	ldr	r3, [pc, #204]	; (800b46c <USER_SPI_write+0xf0>)
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d001      	beq.n	800b3ae <USER_SPI_write+0x32>
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	e05a      	b.n	800b464 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b3ae:	4b2f      	ldr	r3, [pc, #188]	; (800b46c <USER_SPI_write+0xf0>)
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	f003 0304 	and.w	r3, r3, #4
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <USER_SPI_write+0x44>
 800b3bc:	2302      	movs	r3, #2
 800b3be:	e051      	b.n	800b464 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b3c0:	4b2b      	ldr	r3, [pc, #172]	; (800b470 <USER_SPI_write+0xf4>)
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	f003 0308 	and.w	r3, r3, #8
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d102      	bne.n	800b3d2 <USER_SPI_write+0x56>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	025b      	lsls	r3, r3, #9
 800b3d0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d110      	bne.n	800b3fa <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b3d8:	6879      	ldr	r1, [r7, #4]
 800b3da:	2018      	movs	r0, #24
 800b3dc:	f7ff fdf9 	bl	800afd2 <send_cmd>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d136      	bne.n	800b454 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800b3e6:	21fe      	movs	r1, #254	; 0xfe
 800b3e8:	68b8      	ldr	r0, [r7, #8]
 800b3ea:	f7ff fdc0 	bl	800af6e <xmit_datablock>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d02f      	beq.n	800b454 <USER_SPI_write+0xd8>
			count = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	603b      	str	r3, [r7, #0]
 800b3f8:	e02c      	b.n	800b454 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b3fa:	4b1d      	ldr	r3, [pc, #116]	; (800b470 <USER_SPI_write+0xf4>)
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	f003 0306 	and.w	r3, r3, #6
 800b402:	2b00      	cmp	r3, #0
 800b404:	d003      	beq.n	800b40e <USER_SPI_write+0x92>
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	2097      	movs	r0, #151	; 0x97
 800b40a:	f7ff fde2 	bl	800afd2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	2019      	movs	r0, #25
 800b412:	f7ff fdde 	bl	800afd2 <send_cmd>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d11b      	bne.n	800b454 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800b41c:	21fc      	movs	r1, #252	; 0xfc
 800b41e:	68b8      	ldr	r0, [r7, #8]
 800b420:	f7ff fda5 	bl	800af6e <xmit_datablock>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00a      	beq.n	800b440 <USER_SPI_write+0xc4>
				buff += 512;
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b430:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	3b01      	subs	r3, #1
 800b436:	603b      	str	r3, [r7, #0]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1ee      	bne.n	800b41c <USER_SPI_write+0xa0>
 800b43e:	e000      	b.n	800b442 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800b440:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b442:	21fd      	movs	r1, #253	; 0xfd
 800b444:	2000      	movs	r0, #0
 800b446:	f7ff fd92 	bl	800af6e <xmit_datablock>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d101      	bne.n	800b454 <USER_SPI_write+0xd8>
 800b450:	2301      	movs	r3, #1
 800b452:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800b454:	f7ff fd36 	bl	800aec4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	bf14      	ite	ne
 800b45e:	2301      	movne	r3, #1
 800b460:	2300      	moveq	r3, #0
 800b462:	b2db      	uxtb	r3, r3
}
 800b464:	4618      	mov	r0, r3
 800b466:	3710      	adds	r7, #16
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	20000024 	.word	0x20000024
 800b470:	200004b0 	.word	0x200004b0

0800b474 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b08c      	sub	sp, #48	; 0x30
 800b478:	af00      	add	r7, sp, #0
 800b47a:	4603      	mov	r3, r0
 800b47c:	603a      	str	r2, [r7, #0]
 800b47e:	71fb      	strb	r3, [r7, #7]
 800b480:	460b      	mov	r3, r1
 800b482:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800b484:	79fb      	ldrb	r3, [r7, #7]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d001      	beq.n	800b48e <USER_SPI_ioctl+0x1a>
 800b48a:	2304      	movs	r3, #4
 800b48c:	e15a      	b.n	800b744 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b48e:	4baf      	ldr	r3, [pc, #700]	; (800b74c <USER_SPI_ioctl+0x2d8>)
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	b2db      	uxtb	r3, r3
 800b494:	f003 0301 	and.w	r3, r3, #1
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d001      	beq.n	800b4a0 <USER_SPI_ioctl+0x2c>
 800b49c:	2303      	movs	r3, #3
 800b49e:	e151      	b.n	800b744 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800b4a6:	79bb      	ldrb	r3, [r7, #6]
 800b4a8:	2b04      	cmp	r3, #4
 800b4aa:	f200 8136 	bhi.w	800b71a <USER_SPI_ioctl+0x2a6>
 800b4ae:	a201      	add	r2, pc, #4	; (adr r2, 800b4b4 <USER_SPI_ioctl+0x40>)
 800b4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b4:	0800b4c9 	.word	0x0800b4c9
 800b4b8:	0800b4dd 	.word	0x0800b4dd
 800b4bc:	0800b71b 	.word	0x0800b71b
 800b4c0:	0800b589 	.word	0x0800b589
 800b4c4:	0800b67f 	.word	0x0800b67f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800b4c8:	f7ff fd0c 	bl	800aee4 <spiselect>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 8127 	beq.w	800b722 <USER_SPI_ioctl+0x2ae>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800b4da:	e122      	b.n	800b722 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b4dc:	2100      	movs	r1, #0
 800b4de:	2009      	movs	r0, #9
 800b4e0:	f7ff fd77 	bl	800afd2 <send_cmd>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f040 811d 	bne.w	800b726 <USER_SPI_ioctl+0x2b2>
 800b4ec:	f107 030c 	add.w	r3, r7, #12
 800b4f0:	2110      	movs	r1, #16
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7ff fd12 	bl	800af1c <rcvr_datablock>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 8113 	beq.w	800b726 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b500:	7b3b      	ldrb	r3, [r7, #12]
 800b502:	099b      	lsrs	r3, r3, #6
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b01      	cmp	r3, #1
 800b508:	d111      	bne.n	800b52e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b50a:	7d7b      	ldrb	r3, [r7, #21]
 800b50c:	461a      	mov	r2, r3
 800b50e:	7d3b      	ldrb	r3, [r7, #20]
 800b510:	021b      	lsls	r3, r3, #8
 800b512:	4413      	add	r3, r2
 800b514:	461a      	mov	r2, r3
 800b516:	7cfb      	ldrb	r3, [r7, #19]
 800b518:	041b      	lsls	r3, r3, #16
 800b51a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800b51e:	4413      	add	r3, r2
 800b520:	3301      	adds	r3, #1
 800b522:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	029a      	lsls	r2, r3, #10
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	601a      	str	r2, [r3, #0]
 800b52c:	e028      	b.n	800b580 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b52e:	7c7b      	ldrb	r3, [r7, #17]
 800b530:	f003 030f 	and.w	r3, r3, #15
 800b534:	b2da      	uxtb	r2, r3
 800b536:	7dbb      	ldrb	r3, [r7, #22]
 800b538:	09db      	lsrs	r3, r3, #7
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	4413      	add	r3, r2
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	7d7b      	ldrb	r3, [r7, #21]
 800b542:	005b      	lsls	r3, r3, #1
 800b544:	b2db      	uxtb	r3, r3
 800b546:	f003 0306 	and.w	r3, r3, #6
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	4413      	add	r3, r2
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	3302      	adds	r3, #2
 800b552:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b556:	7d3b      	ldrb	r3, [r7, #20]
 800b558:	099b      	lsrs	r3, r3, #6
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	461a      	mov	r2, r3
 800b55e:	7cfb      	ldrb	r3, [r7, #19]
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	441a      	add	r2, r3
 800b564:	7cbb      	ldrb	r3, [r7, #18]
 800b566:	029b      	lsls	r3, r3, #10
 800b568:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b56c:	4413      	add	r3, r2
 800b56e:	3301      	adds	r3, #1
 800b570:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800b572:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b576:	3b09      	subs	r3, #9
 800b578:	69fa      	ldr	r2, [r7, #28]
 800b57a:	409a      	lsls	r2, r3
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800b586:	e0ce      	b.n	800b726 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800b588:	4b71      	ldr	r3, [pc, #452]	; (800b750 <USER_SPI_ioctl+0x2dc>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	f003 0304 	and.w	r3, r3, #4
 800b590:	2b00      	cmp	r3, #0
 800b592:	d031      	beq.n	800b5f8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800b594:	2100      	movs	r1, #0
 800b596:	208d      	movs	r0, #141	; 0x8d
 800b598:	f7ff fd1b 	bl	800afd2 <send_cmd>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f040 80c3 	bne.w	800b72a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800b5a4:	20ff      	movs	r0, #255	; 0xff
 800b5a6:	f7ff fc1d 	bl	800ade4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800b5aa:	f107 030c 	add.w	r3, r7, #12
 800b5ae:	2110      	movs	r1, #16
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7ff fcb3 	bl	800af1c <rcvr_datablock>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 80b6 	beq.w	800b72a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b5be:	2330      	movs	r3, #48	; 0x30
 800b5c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b5c4:	e007      	b.n	800b5d6 <USER_SPI_ioctl+0x162>
 800b5c6:	20ff      	movs	r0, #255	; 0xff
 800b5c8:	f7ff fc0c 	bl	800ade4 <xchg_spi>
 800b5cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b5d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1f3      	bne.n	800b5c6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b5de:	7dbb      	ldrb	r3, [r7, #22]
 800b5e0:	091b      	lsrs	r3, r3, #4
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	2310      	movs	r3, #16
 800b5e8:	fa03 f202 	lsl.w	r2, r3, r2
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800b5f6:	e098      	b.n	800b72a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	2009      	movs	r0, #9
 800b5fc:	f7ff fce9 	bl	800afd2 <send_cmd>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	f040 8091 	bne.w	800b72a <USER_SPI_ioctl+0x2b6>
 800b608:	f107 030c 	add.w	r3, r7, #12
 800b60c:	2110      	movs	r1, #16
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff fc84 	bl	800af1c <rcvr_datablock>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	f000 8087 	beq.w	800b72a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b61c:	4b4c      	ldr	r3, [pc, #304]	; (800b750 <USER_SPI_ioctl+0x2dc>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	f003 0302 	and.w	r3, r3, #2
 800b624:	2b00      	cmp	r3, #0
 800b626:	d012      	beq.n	800b64e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b628:	7dbb      	ldrb	r3, [r7, #22]
 800b62a:	005b      	lsls	r3, r3, #1
 800b62c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b630:	7dfa      	ldrb	r2, [r7, #23]
 800b632:	09d2      	lsrs	r2, r2, #7
 800b634:	b2d2      	uxtb	r2, r2
 800b636:	4413      	add	r3, r2
 800b638:	1c5a      	adds	r2, r3, #1
 800b63a:	7e7b      	ldrb	r3, [r7, #25]
 800b63c:	099b      	lsrs	r3, r3, #6
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	3b01      	subs	r3, #1
 800b642:	fa02 f303 	lsl.w	r3, r2, r3
 800b646:	461a      	mov	r2, r3
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	601a      	str	r2, [r3, #0]
 800b64c:	e013      	b.n	800b676 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b64e:	7dbb      	ldrb	r3, [r7, #22]
 800b650:	109b      	asrs	r3, r3, #2
 800b652:	b29b      	uxth	r3, r3
 800b654:	f003 031f 	and.w	r3, r3, #31
 800b658:	3301      	adds	r3, #1
 800b65a:	7dfa      	ldrb	r2, [r7, #23]
 800b65c:	00d2      	lsls	r2, r2, #3
 800b65e:	f002 0218 	and.w	r2, r2, #24
 800b662:	7df9      	ldrb	r1, [r7, #23]
 800b664:	0949      	lsrs	r1, r1, #5
 800b666:	b2c9      	uxtb	r1, r1
 800b668:	440a      	add	r2, r1
 800b66a:	3201      	adds	r2, #1
 800b66c:	fb02 f303 	mul.w	r3, r2, r3
 800b670:	461a      	mov	r2, r3
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800b67c:	e055      	b.n	800b72a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b67e:	4b34      	ldr	r3, [pc, #208]	; (800b750 <USER_SPI_ioctl+0x2dc>)
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	f003 0306 	and.w	r3, r3, #6
 800b686:	2b00      	cmp	r3, #0
 800b688:	d051      	beq.n	800b72e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b68a:	f107 020c 	add.w	r2, r7, #12
 800b68e:	79fb      	ldrb	r3, [r7, #7]
 800b690:	210b      	movs	r1, #11
 800b692:	4618      	mov	r0, r3
 800b694:	f7ff feee 	bl	800b474 <USER_SPI_ioctl>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d149      	bne.n	800b732 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b69e:	7b3b      	ldrb	r3, [r7, #12]
 800b6a0:	099b      	lsrs	r3, r3, #6
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d104      	bne.n	800b6b2 <USER_SPI_ioctl+0x23e>
 800b6a8:	7dbb      	ldrb	r3, [r7, #22]
 800b6aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d041      	beq.n	800b736 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	623b      	str	r3, [r7, #32]
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6bc:	6a3b      	ldr	r3, [r7, #32]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800b6c2:	4b23      	ldr	r3, [pc, #140]	; (800b750 <USER_SPI_ioctl+0x2dc>)
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	f003 0308 	and.w	r3, r3, #8
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d105      	bne.n	800b6da <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	025b      	lsls	r3, r3, #9
 800b6d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d6:	025b      	lsls	r3, r3, #9
 800b6d8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b6da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6dc:	2020      	movs	r0, #32
 800b6de:	f7ff fc78 	bl	800afd2 <send_cmd>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d128      	bne.n	800b73a <USER_SPI_ioctl+0x2c6>
 800b6e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b6ea:	2021      	movs	r0, #33	; 0x21
 800b6ec:	f7ff fc71 	bl	800afd2 <send_cmd>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d121      	bne.n	800b73a <USER_SPI_ioctl+0x2c6>
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	2026      	movs	r0, #38	; 0x26
 800b6fa:	f7ff fc6a 	bl	800afd2 <send_cmd>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d11a      	bne.n	800b73a <USER_SPI_ioctl+0x2c6>
 800b704:	f247 5030 	movw	r0, #30000	; 0x7530
 800b708:	f7ff fbb9 	bl	800ae7e <wait_ready>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d013      	beq.n	800b73a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800b712:	2300      	movs	r3, #0
 800b714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800b718:	e00f      	b.n	800b73a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800b71a:	2304      	movs	r3, #4
 800b71c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b720:	e00c      	b.n	800b73c <USER_SPI_ioctl+0x2c8>
		break;
 800b722:	bf00      	nop
 800b724:	e00a      	b.n	800b73c <USER_SPI_ioctl+0x2c8>
		break;
 800b726:	bf00      	nop
 800b728:	e008      	b.n	800b73c <USER_SPI_ioctl+0x2c8>
		break;
 800b72a:	bf00      	nop
 800b72c:	e006      	b.n	800b73c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b72e:	bf00      	nop
 800b730:	e004      	b.n	800b73c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b732:	bf00      	nop
 800b734:	e002      	b.n	800b73c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b736:	bf00      	nop
 800b738:	e000      	b.n	800b73c <USER_SPI_ioctl+0x2c8>
		break;
 800b73a:	bf00      	nop
	}

	despiselect();
 800b73c:	f7ff fbc2 	bl	800aec4 <despiselect>

	return res;
 800b740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b744:	4618      	mov	r0, r3
 800b746:	3730      	adds	r7, #48	; 0x30
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	20000024 	.word	0x20000024
 800b750:	200004b0 	.word	0x200004b0

0800b754 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	4603      	mov	r3, r0
 800b75c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b75e:	79fb      	ldrb	r3, [r7, #7]
 800b760:	4a08      	ldr	r2, [pc, #32]	; (800b784 <disk_status+0x30>)
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4413      	add	r3, r2
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	79fa      	ldrb	r2, [r7, #7]
 800b76c:	4905      	ldr	r1, [pc, #20]	; (800b784 <disk_status+0x30>)
 800b76e:	440a      	add	r2, r1
 800b770:	7a12      	ldrb	r2, [r2, #8]
 800b772:	4610      	mov	r0, r2
 800b774:	4798      	blx	r3
 800b776:	4603      	mov	r3, r0
 800b778:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	200004dc 	.word	0x200004dc

0800b788 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	4603      	mov	r3, r0
 800b790:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b792:	2300      	movs	r3, #0
 800b794:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b796:	79fb      	ldrb	r3, [r7, #7]
 800b798:	4a0d      	ldr	r2, [pc, #52]	; (800b7d0 <disk_initialize+0x48>)
 800b79a:	5cd3      	ldrb	r3, [r2, r3]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d111      	bne.n	800b7c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b7a0:	79fb      	ldrb	r3, [r7, #7]
 800b7a2:	4a0b      	ldr	r2, [pc, #44]	; (800b7d0 <disk_initialize+0x48>)
 800b7a4:	2101      	movs	r1, #1
 800b7a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b7a8:	79fb      	ldrb	r3, [r7, #7]
 800b7aa:	4a09      	ldr	r2, [pc, #36]	; (800b7d0 <disk_initialize+0x48>)
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	79fa      	ldrb	r2, [r7, #7]
 800b7b6:	4906      	ldr	r1, [pc, #24]	; (800b7d0 <disk_initialize+0x48>)
 800b7b8:	440a      	add	r2, r1
 800b7ba:	7a12      	ldrb	r2, [r2, #8]
 800b7bc:	4610      	mov	r0, r2
 800b7be:	4798      	blx	r3
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	200004dc 	.word	0x200004dc

0800b7d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b7d4:	b590      	push	{r4, r7, lr}
 800b7d6:	b087      	sub	sp, #28
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60b9      	str	r1, [r7, #8]
 800b7dc:	607a      	str	r2, [r7, #4]
 800b7de:	603b      	str	r3, [r7, #0]
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
 800b7e6:	4a0a      	ldr	r2, [pc, #40]	; (800b810 <disk_read+0x3c>)
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	4413      	add	r3, r2
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	689c      	ldr	r4, [r3, #8]
 800b7f0:	7bfb      	ldrb	r3, [r7, #15]
 800b7f2:	4a07      	ldr	r2, [pc, #28]	; (800b810 <disk_read+0x3c>)
 800b7f4:	4413      	add	r3, r2
 800b7f6:	7a18      	ldrb	r0, [r3, #8]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	68b9      	ldr	r1, [r7, #8]
 800b7fe:	47a0      	blx	r4
 800b800:	4603      	mov	r3, r0
 800b802:	75fb      	strb	r3, [r7, #23]
  return res;
 800b804:	7dfb      	ldrb	r3, [r7, #23]
}
 800b806:	4618      	mov	r0, r3
 800b808:	371c      	adds	r7, #28
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd90      	pop	{r4, r7, pc}
 800b80e:	bf00      	nop
 800b810:	200004dc 	.word	0x200004dc

0800b814 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b814:	b590      	push	{r4, r7, lr}
 800b816:	b087      	sub	sp, #28
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60b9      	str	r1, [r7, #8]
 800b81c:	607a      	str	r2, [r7, #4]
 800b81e:	603b      	str	r3, [r7, #0]
 800b820:	4603      	mov	r3, r0
 800b822:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b824:	7bfb      	ldrb	r3, [r7, #15]
 800b826:	4a0a      	ldr	r2, [pc, #40]	; (800b850 <disk_write+0x3c>)
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4413      	add	r3, r2
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	68dc      	ldr	r4, [r3, #12]
 800b830:	7bfb      	ldrb	r3, [r7, #15]
 800b832:	4a07      	ldr	r2, [pc, #28]	; (800b850 <disk_write+0x3c>)
 800b834:	4413      	add	r3, r2
 800b836:	7a18      	ldrb	r0, [r3, #8]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	68b9      	ldr	r1, [r7, #8]
 800b83e:	47a0      	blx	r4
 800b840:	4603      	mov	r3, r0
 800b842:	75fb      	strb	r3, [r7, #23]
  return res;
 800b844:	7dfb      	ldrb	r3, [r7, #23]
}
 800b846:	4618      	mov	r0, r3
 800b848:	371c      	adds	r7, #28
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd90      	pop	{r4, r7, pc}
 800b84e:	bf00      	nop
 800b850:	200004dc 	.word	0x200004dc

0800b854 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	4603      	mov	r3, r0
 800b85c:	603a      	str	r2, [r7, #0]
 800b85e:	71fb      	strb	r3, [r7, #7]
 800b860:	460b      	mov	r3, r1
 800b862:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b864:	79fb      	ldrb	r3, [r7, #7]
 800b866:	4a09      	ldr	r2, [pc, #36]	; (800b88c <disk_ioctl+0x38>)
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4413      	add	r3, r2
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	79fa      	ldrb	r2, [r7, #7]
 800b872:	4906      	ldr	r1, [pc, #24]	; (800b88c <disk_ioctl+0x38>)
 800b874:	440a      	add	r2, r1
 800b876:	7a10      	ldrb	r0, [r2, #8]
 800b878:	79b9      	ldrb	r1, [r7, #6]
 800b87a:	683a      	ldr	r2, [r7, #0]
 800b87c:	4798      	blx	r3
 800b87e:	4603      	mov	r3, r0
 800b880:	73fb      	strb	r3, [r7, #15]
  return res;
 800b882:	7bfb      	ldrb	r3, [r7, #15]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	200004dc 	.word	0x200004dc

0800b890 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b890:	b480      	push	{r7}
 800b892:	b085      	sub	sp, #20
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3301      	adds	r3, #1
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b8a0:	89fb      	ldrh	r3, [r7, #14]
 800b8a2:	021b      	lsls	r3, r3, #8
 800b8a4:	b21a      	sxth	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	b21b      	sxth	r3, r3
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	b21b      	sxth	r3, r3
 800b8b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b8b2:	89fb      	ldrh	r3, [r7, #14]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3714      	adds	r7, #20
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	3303      	adds	r3, #3
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	021b      	lsls	r3, r3, #8
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	3202      	adds	r2, #2
 800b8d8:	7812      	ldrb	r2, [r2, #0]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	021b      	lsls	r3, r3, #8
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	3201      	adds	r2, #1
 800b8e6:	7812      	ldrb	r2, [r2, #0]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	021b      	lsls	r3, r3, #8
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	7812      	ldrb	r2, [r2, #0]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	60fb      	str	r3, [r7, #12]
	return rv;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b906:	b480      	push	{r7}
 800b908:	b083      	sub	sp, #12
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	460b      	mov	r3, r1
 800b910:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	1c5a      	adds	r2, r3, #1
 800b916:	607a      	str	r2, [r7, #4]
 800b918:	887a      	ldrh	r2, [r7, #2]
 800b91a:	b2d2      	uxtb	r2, r2
 800b91c:	701a      	strb	r2, [r3, #0]
 800b91e:	887b      	ldrh	r3, [r7, #2]
 800b920:	0a1b      	lsrs	r3, r3, #8
 800b922:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	1c5a      	adds	r2, r3, #1
 800b928:	607a      	str	r2, [r7, #4]
 800b92a:	887a      	ldrh	r2, [r7, #2]
 800b92c:	b2d2      	uxtb	r2, r2
 800b92e:	701a      	strb	r2, [r3, #0]
}
 800b930:	bf00      	nop
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	1c5a      	adds	r2, r3, #1
 800b94a:	607a      	str	r2, [r7, #4]
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	b2d2      	uxtb	r2, r2
 800b950:	701a      	strb	r2, [r3, #0]
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	0a1b      	lsrs	r3, r3, #8
 800b956:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	1c5a      	adds	r2, r3, #1
 800b95c:	607a      	str	r2, [r7, #4]
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	b2d2      	uxtb	r2, r2
 800b962:	701a      	strb	r2, [r3, #0]
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	0a1b      	lsrs	r3, r3, #8
 800b968:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	1c5a      	adds	r2, r3, #1
 800b96e:	607a      	str	r2, [r7, #4]
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	b2d2      	uxtb	r2, r2
 800b974:	701a      	strb	r2, [r3, #0]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	0a1b      	lsrs	r3, r3, #8
 800b97a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	1c5a      	adds	r2, r3, #1
 800b980:	607a      	str	r2, [r7, #4]
 800b982:	683a      	ldr	r2, [r7, #0]
 800b984:	b2d2      	uxtb	r2, r2
 800b986:	701a      	strb	r2, [r3, #0]
}
 800b988:	bf00      	nop
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b994:	b480      	push	{r7}
 800b996:	b087      	sub	sp, #28
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00d      	beq.n	800b9ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	1c53      	adds	r3, r2, #1
 800b9b2:	613b      	str	r3, [r7, #16]
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	1c59      	adds	r1, r3, #1
 800b9b8:	6179      	str	r1, [r7, #20]
 800b9ba:	7812      	ldrb	r2, [r2, #0]
 800b9bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	607b      	str	r3, [r7, #4]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1f1      	bne.n	800b9ae <mem_cpy+0x1a>
	}
}
 800b9ca:	bf00      	nop
 800b9cc:	371c      	adds	r7, #28
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b9d6:	b480      	push	{r7}
 800b9d8:	b087      	sub	sp, #28
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	60f8      	str	r0, [r7, #12]
 800b9de:	60b9      	str	r1, [r7, #8]
 800b9e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	617a      	str	r2, [r7, #20]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	b2d2      	uxtb	r2, r2
 800b9f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	607b      	str	r3, [r7, #4]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1f3      	bne.n	800b9e6 <mem_set+0x10>
}
 800b9fe:	bf00      	nop
 800ba00:	bf00      	nop
 800ba02:	371c      	adds	r7, #28
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ba0c:	b480      	push	{r7}
 800ba0e:	b089      	sub	sp, #36	; 0x24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	61fb      	str	r3, [r7, #28]
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ba20:	2300      	movs	r3, #0
 800ba22:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	1c5a      	adds	r2, r3, #1
 800ba28:	61fa      	str	r2, [r7, #28]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	61ba      	str	r2, [r7, #24]
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	1acb      	subs	r3, r1, r3
 800ba38:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	607b      	str	r3, [r7, #4]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d002      	beq.n	800ba4c <mem_cmp+0x40>
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d0eb      	beq.n	800ba24 <mem_cmp+0x18>

	return r;
 800ba4c:	697b      	ldr	r3, [r7, #20]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3724      	adds	r7, #36	; 0x24
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ba5a:	b480      	push	{r7}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ba64:	e002      	b.n	800ba6c <chk_chr+0x12>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	607b      	str	r3, [r7, #4]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d005      	beq.n	800ba80 <chk_chr+0x26>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d1f2      	bne.n	800ba66 <chk_chr+0xc>
	return *str;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	781b      	ldrb	r3, [r3, #0]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	60bb      	str	r3, [r7, #8]
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	60fb      	str	r3, [r7, #12]
 800baa2:	e029      	b.n	800baf8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800baa4:	4a27      	ldr	r2, [pc, #156]	; (800bb44 <chk_lock+0xb4>)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	011b      	lsls	r3, r3, #4
 800baaa:	4413      	add	r3, r2
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d01d      	beq.n	800baee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bab2:	4a24      	ldr	r2, [pc, #144]	; (800bb44 <chk_lock+0xb4>)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	011b      	lsls	r3, r3, #4
 800bab8:	4413      	add	r3, r2
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d116      	bne.n	800baf2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bac4:	4a1f      	ldr	r2, [pc, #124]	; (800bb44 <chk_lock+0xb4>)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	011b      	lsls	r3, r3, #4
 800baca:	4413      	add	r3, r2
 800bacc:	3304      	adds	r3, #4
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d10c      	bne.n	800baf2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bad8:	4a1a      	ldr	r2, [pc, #104]	; (800bb44 <chk_lock+0xb4>)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	011b      	lsls	r3, r3, #4
 800bade:	4413      	add	r3, r2
 800bae0:	3308      	adds	r3, #8
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bae8:	429a      	cmp	r2, r3
 800baea:	d102      	bne.n	800baf2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800baec:	e007      	b.n	800bafe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800baee:	2301      	movs	r3, #1
 800baf0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	3301      	adds	r3, #1
 800baf6:	60fb      	str	r3, [r7, #12]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d9d2      	bls.n	800baa4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2b02      	cmp	r3, #2
 800bb02:	d109      	bne.n	800bb18 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d102      	bne.n	800bb10 <chk_lock+0x80>
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	d101      	bne.n	800bb14 <chk_lock+0x84>
 800bb10:	2300      	movs	r3, #0
 800bb12:	e010      	b.n	800bb36 <chk_lock+0xa6>
 800bb14:	2312      	movs	r3, #18
 800bb16:	e00e      	b.n	800bb36 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d108      	bne.n	800bb30 <chk_lock+0xa0>
 800bb1e:	4a09      	ldr	r2, [pc, #36]	; (800bb44 <chk_lock+0xb4>)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	011b      	lsls	r3, r3, #4
 800bb24:	4413      	add	r3, r2
 800bb26:	330c      	adds	r3, #12
 800bb28:	881b      	ldrh	r3, [r3, #0]
 800bb2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb2e:	d101      	bne.n	800bb34 <chk_lock+0xa4>
 800bb30:	2310      	movs	r3, #16
 800bb32:	e000      	b.n	800bb36 <chk_lock+0xa6>
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	200004bc 	.word	0x200004bc

0800bb48 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	607b      	str	r3, [r7, #4]
 800bb52:	e002      	b.n	800bb5a <enq_lock+0x12>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	3301      	adds	r3, #1
 800bb58:	607b      	str	r3, [r7, #4]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d806      	bhi.n	800bb6e <enq_lock+0x26>
 800bb60:	4a09      	ldr	r2, [pc, #36]	; (800bb88 <enq_lock+0x40>)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	011b      	lsls	r3, r3, #4
 800bb66:	4413      	add	r3, r2
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1f2      	bne.n	800bb54 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	bf14      	ite	ne
 800bb74:	2301      	movne	r3, #1
 800bb76:	2300      	moveq	r3, #0
 800bb78:	b2db      	uxtb	r3, r3
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	370c      	adds	r7, #12
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	200004bc 	.word	0x200004bc

0800bb8c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bb96:	2300      	movs	r3, #0
 800bb98:	60fb      	str	r3, [r7, #12]
 800bb9a:	e01f      	b.n	800bbdc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bb9c:	4a41      	ldr	r2, [pc, #260]	; (800bca4 <inc_lock+0x118>)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	011b      	lsls	r3, r3, #4
 800bba2:	4413      	add	r3, r2
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d113      	bne.n	800bbd6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bbae:	4a3d      	ldr	r2, [pc, #244]	; (800bca4 <inc_lock+0x118>)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	011b      	lsls	r3, r3, #4
 800bbb4:	4413      	add	r3, r2
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d109      	bne.n	800bbd6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bbc2:	4a38      	ldr	r2, [pc, #224]	; (800bca4 <inc_lock+0x118>)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	011b      	lsls	r3, r3, #4
 800bbc8:	4413      	add	r3, r2
 800bbca:	3308      	adds	r3, #8
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d006      	beq.n	800bbe4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	60fb      	str	r3, [r7, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d9dc      	bls.n	800bb9c <inc_lock+0x10>
 800bbe2:	e000      	b.n	800bbe6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bbe4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d132      	bne.n	800bc52 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bbec:	2300      	movs	r3, #0
 800bbee:	60fb      	str	r3, [r7, #12]
 800bbf0:	e002      	b.n	800bbf8 <inc_lock+0x6c>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	60fb      	str	r3, [r7, #12]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d806      	bhi.n	800bc0c <inc_lock+0x80>
 800bbfe:	4a29      	ldr	r2, [pc, #164]	; (800bca4 <inc_lock+0x118>)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	011b      	lsls	r3, r3, #4
 800bc04:	4413      	add	r3, r2
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1f2      	bne.n	800bbf2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	d101      	bne.n	800bc16 <inc_lock+0x8a>
 800bc12:	2300      	movs	r3, #0
 800bc14:	e040      	b.n	800bc98 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	4922      	ldr	r1, [pc, #136]	; (800bca4 <inc_lock+0x118>)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	011b      	lsls	r3, r3, #4
 800bc20:	440b      	add	r3, r1
 800bc22:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	689a      	ldr	r2, [r3, #8]
 800bc28:	491e      	ldr	r1, [pc, #120]	; (800bca4 <inc_lock+0x118>)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	011b      	lsls	r3, r3, #4
 800bc2e:	440b      	add	r3, r1
 800bc30:	3304      	adds	r3, #4
 800bc32:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	695a      	ldr	r2, [r3, #20]
 800bc38:	491a      	ldr	r1, [pc, #104]	; (800bca4 <inc_lock+0x118>)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	011b      	lsls	r3, r3, #4
 800bc3e:	440b      	add	r3, r1
 800bc40:	3308      	adds	r3, #8
 800bc42:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bc44:	4a17      	ldr	r2, [pc, #92]	; (800bca4 <inc_lock+0x118>)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	011b      	lsls	r3, r3, #4
 800bc4a:	4413      	add	r3, r2
 800bc4c:	330c      	adds	r3, #12
 800bc4e:	2200      	movs	r2, #0
 800bc50:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d009      	beq.n	800bc6c <inc_lock+0xe0>
 800bc58:	4a12      	ldr	r2, [pc, #72]	; (800bca4 <inc_lock+0x118>)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	011b      	lsls	r3, r3, #4
 800bc5e:	4413      	add	r3, r2
 800bc60:	330c      	adds	r3, #12
 800bc62:	881b      	ldrh	r3, [r3, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d001      	beq.n	800bc6c <inc_lock+0xe0>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	e015      	b.n	800bc98 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d108      	bne.n	800bc84 <inc_lock+0xf8>
 800bc72:	4a0c      	ldr	r2, [pc, #48]	; (800bca4 <inc_lock+0x118>)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	011b      	lsls	r3, r3, #4
 800bc78:	4413      	add	r3, r2
 800bc7a:	330c      	adds	r3, #12
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	3301      	adds	r3, #1
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	e001      	b.n	800bc88 <inc_lock+0xfc>
 800bc84:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc88:	4906      	ldr	r1, [pc, #24]	; (800bca4 <inc_lock+0x118>)
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	011b      	lsls	r3, r3, #4
 800bc8e:	440b      	add	r3, r1
 800bc90:	330c      	adds	r3, #12
 800bc92:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	3301      	adds	r3, #1
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	200004bc 	.word	0x200004bc

0800bca8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	607b      	str	r3, [r7, #4]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d825      	bhi.n	800bd08 <dec_lock+0x60>
		n = Files[i].ctr;
 800bcbc:	4a17      	ldr	r2, [pc, #92]	; (800bd1c <dec_lock+0x74>)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	011b      	lsls	r3, r3, #4
 800bcc2:	4413      	add	r3, r2
 800bcc4:	330c      	adds	r3, #12
 800bcc6:	881b      	ldrh	r3, [r3, #0]
 800bcc8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bcca:	89fb      	ldrh	r3, [r7, #14]
 800bccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcd0:	d101      	bne.n	800bcd6 <dec_lock+0x2e>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bcd6:	89fb      	ldrh	r3, [r7, #14]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <dec_lock+0x3a>
 800bcdc:	89fb      	ldrh	r3, [r7, #14]
 800bcde:	3b01      	subs	r3, #1
 800bce0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bce2:	4a0e      	ldr	r2, [pc, #56]	; (800bd1c <dec_lock+0x74>)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	011b      	lsls	r3, r3, #4
 800bce8:	4413      	add	r3, r2
 800bcea:	330c      	adds	r3, #12
 800bcec:	89fa      	ldrh	r2, [r7, #14]
 800bcee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bcf0:	89fb      	ldrh	r3, [r7, #14]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d105      	bne.n	800bd02 <dec_lock+0x5a>
 800bcf6:	4a09      	ldr	r2, [pc, #36]	; (800bd1c <dec_lock+0x74>)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	011b      	lsls	r3, r3, #4
 800bcfc:	4413      	add	r3, r2
 800bcfe:	2200      	movs	r2, #0
 800bd00:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bd02:	2300      	movs	r3, #0
 800bd04:	737b      	strb	r3, [r7, #13]
 800bd06:	e001      	b.n	800bd0c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bd08:	2302      	movs	r3, #2
 800bd0a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bd0c:	7b7b      	ldrb	r3, [r7, #13]
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop
 800bd1c:	200004bc 	.word	0x200004bc

0800bd20 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bd28:	2300      	movs	r3, #0
 800bd2a:	60fb      	str	r3, [r7, #12]
 800bd2c:	e010      	b.n	800bd50 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bd2e:	4a0d      	ldr	r2, [pc, #52]	; (800bd64 <clear_lock+0x44>)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	011b      	lsls	r3, r3, #4
 800bd34:	4413      	add	r3, r2
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d105      	bne.n	800bd4a <clear_lock+0x2a>
 800bd3e:	4a09      	ldr	r2, [pc, #36]	; (800bd64 <clear_lock+0x44>)
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	011b      	lsls	r3, r3, #4
 800bd44:	4413      	add	r3, r2
 800bd46:	2200      	movs	r2, #0
 800bd48:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	60fb      	str	r3, [r7, #12]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d9eb      	bls.n	800bd2e <clear_lock+0xe>
	}
}
 800bd56:	bf00      	nop
 800bd58:	bf00      	nop
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr
 800bd64:	200004bc 	.word	0x200004bc

0800bd68 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b086      	sub	sp, #24
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	78db      	ldrb	r3, [r3, #3]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d034      	beq.n	800bde6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd80:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	7858      	ldrb	r0, [r3, #1]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	f7ff fd40 	bl	800b814 <disk_write>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d002      	beq.n	800bda0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	73fb      	strb	r3, [r7, #15]
 800bd9e:	e022      	b.n	800bde6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a1b      	ldr	r3, [r3, #32]
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	1ad2      	subs	r2, r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	699b      	ldr	r3, [r3, #24]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d217      	bcs.n	800bde6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	789b      	ldrb	r3, [r3, #2]
 800bdba:	613b      	str	r3, [r7, #16]
 800bdbc:	e010      	b.n	800bde0 <sync_window+0x78>
					wsect += fs->fsize;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	699b      	ldr	r3, [r3, #24]
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	7858      	ldrb	r0, [r3, #1]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	697a      	ldr	r2, [r7, #20]
 800bdd6:	f7ff fd1d 	bl	800b814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	613b      	str	r3, [r7, #16]
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d8eb      	bhi.n	800bdbe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bde6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	429a      	cmp	r2, r3
 800be06:	d01b      	beq.n	800be40 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7ff ffad 	bl	800bd68 <sync_window>
 800be0e:	4603      	mov	r3, r0
 800be10:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800be12:	7bfb      	ldrb	r3, [r7, #15]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d113      	bne.n	800be40 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	7858      	ldrb	r0, [r3, #1]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be22:	2301      	movs	r3, #1
 800be24:	683a      	ldr	r2, [r7, #0]
 800be26:	f7ff fcd5 	bl	800b7d4 <disk_read>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d004      	beq.n	800be3a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800be30:	f04f 33ff 	mov.w	r3, #4294967295
 800be34:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800be36:	2301      	movs	r3, #1
 800be38:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	683a      	ldr	r2, [r7, #0]
 800be3e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800be40:	7bfb      	ldrb	r3, [r7, #15]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
	...

0800be4c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7ff ff87 	bl	800bd68 <sync_window>
 800be5a:	4603      	mov	r3, r0
 800be5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d158      	bne.n	800bf16 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	2b03      	cmp	r3, #3
 800be6a:	d148      	bne.n	800befe <sync_fs+0xb2>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	791b      	ldrb	r3, [r3, #4]
 800be70:	2b01      	cmp	r3, #1
 800be72:	d144      	bne.n	800befe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3330      	adds	r3, #48	; 0x30
 800be78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be7c:	2100      	movs	r1, #0
 800be7e:	4618      	mov	r0, r3
 800be80:	f7ff fda9 	bl	800b9d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	3330      	adds	r3, #48	; 0x30
 800be88:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800be8c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800be90:	4618      	mov	r0, r3
 800be92:	f7ff fd38 	bl	800b906 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	3330      	adds	r3, #48	; 0x30
 800be9a:	4921      	ldr	r1, [pc, #132]	; (800bf20 <sync_fs+0xd4>)
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7ff fd4d 	bl	800b93c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	3330      	adds	r3, #48	; 0x30
 800bea6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800beaa:	491e      	ldr	r1, [pc, #120]	; (800bf24 <sync_fs+0xd8>)
 800beac:	4618      	mov	r0, r3
 800beae:	f7ff fd45 	bl	800b93c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	3330      	adds	r3, #48	; 0x30
 800beb6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	4619      	mov	r1, r3
 800bec0:	4610      	mov	r0, r2
 800bec2:	f7ff fd3b 	bl	800b93c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	3330      	adds	r3, #48	; 0x30
 800beca:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	4619      	mov	r1, r3
 800bed4:	4610      	mov	r0, r2
 800bed6:	f7ff fd31 	bl	800b93c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	69db      	ldr	r3, [r3, #28]
 800bede:	1c5a      	adds	r2, r3, #1
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	7858      	ldrb	r0, [r3, #1]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef2:	2301      	movs	r3, #1
 800bef4:	f7ff fc8e 	bl	800b814 <disk_write>
			fs->fsi_flag = 0;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	785b      	ldrb	r3, [r3, #1]
 800bf02:	2200      	movs	r2, #0
 800bf04:	2100      	movs	r1, #0
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7ff fca4 	bl	800b854 <disk_ioctl>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d001      	beq.n	800bf16 <sync_fs+0xca>
 800bf12:	2301      	movs	r3, #1
 800bf14:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bf16:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	41615252 	.word	0x41615252
 800bf24:	61417272 	.word	0x61417272

0800bf28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	3b02      	subs	r3, #2
 800bf36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	695b      	ldr	r3, [r3, #20]
 800bf3c:	3b02      	subs	r3, #2
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d301      	bcc.n	800bf48 <clust2sect+0x20>
 800bf44:	2300      	movs	r3, #0
 800bf46:	e008      	b.n	800bf5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	895b      	ldrh	r3, [r3, #10]
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	fb03 f202 	mul.w	r2, r3, r2
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf58:	4413      	add	r3, r2
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	370c      	adds	r7, #12
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr

0800bf66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b086      	sub	sp, #24
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d904      	bls.n	800bf86 <get_fat+0x20>
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	695b      	ldr	r3, [r3, #20]
 800bf80:	683a      	ldr	r2, [r7, #0]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d302      	bcc.n	800bf8c <get_fat+0x26>
		val = 1;	/* Internal error */
 800bf86:	2301      	movs	r3, #1
 800bf88:	617b      	str	r3, [r7, #20]
 800bf8a:	e08f      	b.n	800c0ac <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bf8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	2b03      	cmp	r3, #3
 800bf98:	d062      	beq.n	800c060 <get_fat+0xfa>
 800bf9a:	2b03      	cmp	r3, #3
 800bf9c:	dc7c      	bgt.n	800c098 <get_fat+0x132>
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d002      	beq.n	800bfa8 <get_fat+0x42>
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	d042      	beq.n	800c02c <get_fat+0xc6>
 800bfa6:	e077      	b.n	800c098 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	60fb      	str	r3, [r7, #12]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	085b      	lsrs	r3, r3, #1
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	6a1a      	ldr	r2, [r3, #32]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	0a5b      	lsrs	r3, r3, #9
 800bfbe:	4413      	add	r3, r2
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6938      	ldr	r0, [r7, #16]
 800bfc4:	f7ff ff14 	bl	800bdf0 <move_window>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d167      	bne.n	800c09e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	60fa      	str	r2, [r7, #12]
 800bfd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfd8:	693a      	ldr	r2, [r7, #16]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfe0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	6a1a      	ldr	r2, [r3, #32]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	0a5b      	lsrs	r3, r3, #9
 800bfea:	4413      	add	r3, r2
 800bfec:	4619      	mov	r1, r3
 800bfee:	6938      	ldr	r0, [r7, #16]
 800bff0:	f7ff fefe 	bl	800bdf0 <move_window>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d153      	bne.n	800c0a2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	4413      	add	r3, r2
 800c004:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c008:	021b      	lsls	r3, r3, #8
 800c00a:	461a      	mov	r2, r3
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	4313      	orrs	r3, r2
 800c010:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	f003 0301 	and.w	r3, r3, #1
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d002      	beq.n	800c022 <get_fat+0xbc>
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	091b      	lsrs	r3, r3, #4
 800c020:	e002      	b.n	800c028 <get_fat+0xc2>
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c028:	617b      	str	r3, [r7, #20]
			break;
 800c02a:	e03f      	b.n	800c0ac <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	6a1a      	ldr	r2, [r3, #32]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	0a1b      	lsrs	r3, r3, #8
 800c034:	4413      	add	r3, r2
 800c036:	4619      	mov	r1, r3
 800c038:	6938      	ldr	r0, [r7, #16]
 800c03a:	f7ff fed9 	bl	800bdf0 <move_window>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d130      	bne.n	800c0a6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	005b      	lsls	r3, r3, #1
 800c04e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c052:	4413      	add	r3, r2
 800c054:	4618      	mov	r0, r3
 800c056:	f7ff fc1b 	bl	800b890 <ld_word>
 800c05a:	4603      	mov	r3, r0
 800c05c:	617b      	str	r3, [r7, #20]
			break;
 800c05e:	e025      	b.n	800c0ac <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	6a1a      	ldr	r2, [r3, #32]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	09db      	lsrs	r3, r3, #7
 800c068:	4413      	add	r3, r2
 800c06a:	4619      	mov	r1, r3
 800c06c:	6938      	ldr	r0, [r7, #16]
 800c06e:	f7ff febf 	bl	800bdf0 <move_window>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d118      	bne.n	800c0aa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c086:	4413      	add	r3, r2
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff fc19 	bl	800b8c0 <ld_dword>
 800c08e:	4603      	mov	r3, r0
 800c090:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c094:	617b      	str	r3, [r7, #20]
			break;
 800c096:	e009      	b.n	800c0ac <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c098:	2301      	movs	r3, #1
 800c09a:	617b      	str	r3, [r7, #20]
 800c09c:	e006      	b.n	800c0ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c09e:	bf00      	nop
 800c0a0:	e004      	b.n	800c0ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c0a2:	bf00      	nop
 800c0a4:	e002      	b.n	800c0ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c0a6:	bf00      	nop
 800c0a8:	e000      	b.n	800c0ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c0aa:	bf00      	nop
		}
	}

	return val;
 800c0ac:	697b      	ldr	r3, [r7, #20]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c0b6:	b590      	push	{r4, r7, lr}
 800c0b8:	b089      	sub	sp, #36	; 0x24
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	60f8      	str	r0, [r7, #12]
 800c0be:	60b9      	str	r1, [r7, #8]
 800c0c0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	f240 80d2 	bls.w	800c272 <put_fat+0x1bc>
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	695b      	ldr	r3, [r3, #20]
 800c0d2:	68ba      	ldr	r2, [r7, #8]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	f080 80cc 	bcs.w	800c272 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	f000 8096 	beq.w	800c210 <put_fat+0x15a>
 800c0e4:	2b03      	cmp	r3, #3
 800c0e6:	f300 80cd 	bgt.w	800c284 <put_fat+0x1ce>
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d002      	beq.n	800c0f4 <put_fat+0x3e>
 800c0ee:	2b02      	cmp	r3, #2
 800c0f0:	d06e      	beq.n	800c1d0 <put_fat+0x11a>
 800c0f2:	e0c7      	b.n	800c284 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	61bb      	str	r3, [r7, #24]
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	085b      	lsrs	r3, r3, #1
 800c0fc:	69ba      	ldr	r2, [r7, #24]
 800c0fe:	4413      	add	r3, r2
 800c100:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6a1a      	ldr	r2, [r3, #32]
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	0a5b      	lsrs	r3, r3, #9
 800c10a:	4413      	add	r3, r2
 800c10c:	4619      	mov	r1, r3
 800c10e:	68f8      	ldr	r0, [r7, #12]
 800c110:	f7ff fe6e 	bl	800bdf0 <move_window>
 800c114:	4603      	mov	r3, r0
 800c116:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c118:	7ffb      	ldrb	r3, [r7, #31]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f040 80ab 	bne.w	800c276 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	1c59      	adds	r1, r3, #1
 800c12a:	61b9      	str	r1, [r7, #24]
 800c12c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c130:	4413      	add	r3, r2
 800c132:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	f003 0301 	and.w	r3, r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00d      	beq.n	800c15a <put_fat+0xa4>
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	b25b      	sxtb	r3, r3
 800c144:	f003 030f 	and.w	r3, r3, #15
 800c148:	b25a      	sxtb	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	011b      	lsls	r3, r3, #4
 800c150:	b25b      	sxtb	r3, r3
 800c152:	4313      	orrs	r3, r2
 800c154:	b25b      	sxtb	r3, r3
 800c156:	b2db      	uxtb	r3, r3
 800c158:	e001      	b.n	800c15e <put_fat+0xa8>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2201      	movs	r2, #1
 800c166:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6a1a      	ldr	r2, [r3, #32]
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	0a5b      	lsrs	r3, r3, #9
 800c170:	4413      	add	r3, r2
 800c172:	4619      	mov	r1, r3
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f7ff fe3b 	bl	800bdf0 <move_window>
 800c17a:	4603      	mov	r3, r0
 800c17c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c17e:	7ffb      	ldrb	r3, [r7, #31]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d17a      	bne.n	800c27a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c190:	4413      	add	r3, r2
 800c192:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	f003 0301 	and.w	r3, r3, #1
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <put_fat+0xf0>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	091b      	lsrs	r3, r3, #4
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	e00e      	b.n	800c1c4 <put_fat+0x10e>
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	b25b      	sxtb	r3, r3
 800c1ac:	f023 030f 	bic.w	r3, r3, #15
 800c1b0:	b25a      	sxtb	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	0a1b      	lsrs	r3, r3, #8
 800c1b6:	b25b      	sxtb	r3, r3
 800c1b8:	f003 030f 	and.w	r3, r3, #15
 800c1bc:	b25b      	sxtb	r3, r3
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	b25b      	sxtb	r3, r3
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	697a      	ldr	r2, [r7, #20]
 800c1c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	70da      	strb	r2, [r3, #3]
			break;
 800c1ce:	e059      	b.n	800c284 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6a1a      	ldr	r2, [r3, #32]
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	0a1b      	lsrs	r3, r3, #8
 800c1d8:	4413      	add	r3, r2
 800c1da:	4619      	mov	r1, r3
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f7ff fe07 	bl	800bdf0 <move_window>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c1e6:	7ffb      	ldrb	r3, [r7, #31]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d148      	bne.n	800c27e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	005b      	lsls	r3, r3, #1
 800c1f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c1fa:	4413      	add	r3, r2
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	b292      	uxth	r2, r2
 800c200:	4611      	mov	r1, r2
 800c202:	4618      	mov	r0, r3
 800c204:	f7ff fb7f 	bl	800b906 <st_word>
			fs->wflag = 1;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2201      	movs	r2, #1
 800c20c:	70da      	strb	r2, [r3, #3]
			break;
 800c20e:	e039      	b.n	800c284 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6a1a      	ldr	r2, [r3, #32]
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	09db      	lsrs	r3, r3, #7
 800c218:	4413      	add	r3, r2
 800c21a:	4619      	mov	r1, r3
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f7ff fde7 	bl	800bdf0 <move_window>
 800c222:	4603      	mov	r3, r0
 800c224:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c226:	7ffb      	ldrb	r3, [r7, #31]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d12a      	bne.n	800c282 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c240:	4413      	add	r3, r2
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff fb3c 	bl	800b8c0 <ld_dword>
 800c248:	4603      	mov	r3, r0
 800c24a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c24e:	4323      	orrs	r3, r4
 800c250:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c260:	4413      	add	r3, r2
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	4618      	mov	r0, r3
 800c266:	f7ff fb69 	bl	800b93c <st_dword>
			fs->wflag = 1;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2201      	movs	r2, #1
 800c26e:	70da      	strb	r2, [r3, #3]
			break;
 800c270:	e008      	b.n	800c284 <put_fat+0x1ce>
		}
	}
 800c272:	bf00      	nop
 800c274:	e006      	b.n	800c284 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c276:	bf00      	nop
 800c278:	e004      	b.n	800c284 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c27a:	bf00      	nop
 800c27c:	e002      	b.n	800c284 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c27e:	bf00      	nop
 800c280:	e000      	b.n	800c284 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c282:	bf00      	nop
	return res;
 800c284:	7ffb      	ldrb	r3, [r7, #31]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3724      	adds	r7, #36	; 0x24
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd90      	pop	{r4, r7, pc}

0800c28e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b088      	sub	sp, #32
 800c292:	af00      	add	r7, sp, #0
 800c294:	60f8      	str	r0, [r7, #12]
 800c296:	60b9      	str	r1, [r7, #8]
 800c298:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d904      	bls.n	800c2b4 <remove_chain+0x26>
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	695b      	ldr	r3, [r3, #20]
 800c2ae:	68ba      	ldr	r2, [r7, #8]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d301      	bcc.n	800c2b8 <remove_chain+0x2a>
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	e04b      	b.n	800c350 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00c      	beq.n	800c2d8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c2be:	f04f 32ff 	mov.w	r2, #4294967295
 800c2c2:	6879      	ldr	r1, [r7, #4]
 800c2c4:	69b8      	ldr	r0, [r7, #24]
 800c2c6:	f7ff fef6 	bl	800c0b6 <put_fat>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c2ce:	7ffb      	ldrb	r3, [r7, #31]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d001      	beq.n	800c2d8 <remove_chain+0x4a>
 800c2d4:	7ffb      	ldrb	r3, [r7, #31]
 800c2d6:	e03b      	b.n	800c350 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c2d8:	68b9      	ldr	r1, [r7, #8]
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f7ff fe43 	bl	800bf66 <get_fat>
 800c2e0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d031      	beq.n	800c34c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d101      	bne.n	800c2f2 <remove_chain+0x64>
 800c2ee:	2302      	movs	r3, #2
 800c2f0:	e02e      	b.n	800c350 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f8:	d101      	bne.n	800c2fe <remove_chain+0x70>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e028      	b.n	800c350 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c2fe:	2200      	movs	r2, #0
 800c300:	68b9      	ldr	r1, [r7, #8]
 800c302:	69b8      	ldr	r0, [r7, #24]
 800c304:	f7ff fed7 	bl	800c0b6 <put_fat>
 800c308:	4603      	mov	r3, r0
 800c30a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c30c:	7ffb      	ldrb	r3, [r7, #31]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <remove_chain+0x88>
 800c312:	7ffb      	ldrb	r3, [r7, #31]
 800c314:	e01c      	b.n	800c350 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	691a      	ldr	r2, [r3, #16]
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	3b02      	subs	r3, #2
 800c320:	429a      	cmp	r2, r3
 800c322:	d20b      	bcs.n	800c33c <remove_chain+0xae>
			fs->free_clst++;
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	1c5a      	adds	r2, r3, #1
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	791b      	ldrb	r3, [r3, #4]
 800c332:	f043 0301 	orr.w	r3, r3, #1
 800c336:	b2da      	uxtb	r2, r3
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	695b      	ldr	r3, [r3, #20]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	429a      	cmp	r2, r3
 800c348:	d3c6      	bcc.n	800c2d8 <remove_chain+0x4a>
 800c34a:	e000      	b.n	800c34e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c34c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3720      	adds	r7, #32
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b088      	sub	sp, #32
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d10d      	bne.n	800c38a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d004      	beq.n	800c384 <create_chain+0x2c>
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	695b      	ldr	r3, [r3, #20]
 800c37e:	69ba      	ldr	r2, [r7, #24]
 800c380:	429a      	cmp	r2, r3
 800c382:	d31b      	bcc.n	800c3bc <create_chain+0x64>
 800c384:	2301      	movs	r3, #1
 800c386:	61bb      	str	r3, [r7, #24]
 800c388:	e018      	b.n	800c3bc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7ff fdea 	bl	800bf66 <get_fat>
 800c392:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d801      	bhi.n	800c39e <create_chain+0x46>
 800c39a:	2301      	movs	r3, #1
 800c39c:	e070      	b.n	800c480 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a4:	d101      	bne.n	800c3aa <create_chain+0x52>
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	e06a      	b.n	800c480 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	695b      	ldr	r3, [r3, #20]
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d201      	bcs.n	800c3b8 <create_chain+0x60>
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	e063      	b.n	800c480 <create_chain+0x128>
		scl = clst;
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	695b      	ldr	r3, [r3, #20]
 800c3ca:	69fa      	ldr	r2, [r7, #28]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d307      	bcc.n	800c3e0 <create_chain+0x88>
				ncl = 2;
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c3d4:	69fa      	ldr	r2, [r7, #28]
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d901      	bls.n	800c3e0 <create_chain+0x88>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	e04f      	b.n	800c480 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c3e0:	69f9      	ldr	r1, [r7, #28]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7ff fdbf 	bl	800bf66 <get_fat>
 800c3e8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00e      	beq.n	800c40e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d003      	beq.n	800c3fe <create_chain+0xa6>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fc:	d101      	bne.n	800c402 <create_chain+0xaa>
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	e03e      	b.n	800c480 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c402:	69fa      	ldr	r2, [r7, #28]
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	429a      	cmp	r2, r3
 800c408:	d1da      	bne.n	800c3c0 <create_chain+0x68>
 800c40a:	2300      	movs	r3, #0
 800c40c:	e038      	b.n	800c480 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c40e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c410:	f04f 32ff 	mov.w	r2, #4294967295
 800c414:	69f9      	ldr	r1, [r7, #28]
 800c416:	6938      	ldr	r0, [r7, #16]
 800c418:	f7ff fe4d 	bl	800c0b6 <put_fat>
 800c41c:	4603      	mov	r3, r0
 800c41e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c420:	7dfb      	ldrb	r3, [r7, #23]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d109      	bne.n	800c43a <create_chain+0xe2>
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d006      	beq.n	800c43a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c42c:	69fa      	ldr	r2, [r7, #28]
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6938      	ldr	r0, [r7, #16]
 800c432:	f7ff fe40 	bl	800c0b6 <put_fat>
 800c436:	4603      	mov	r3, r0
 800c438:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c43a:	7dfb      	ldrb	r3, [r7, #23]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d116      	bne.n	800c46e <create_chain+0x116>
		fs->last_clst = ncl;
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	69fa      	ldr	r2, [r7, #28]
 800c444:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	691a      	ldr	r2, [r3, #16]
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	695b      	ldr	r3, [r3, #20]
 800c44e:	3b02      	subs	r3, #2
 800c450:	429a      	cmp	r2, r3
 800c452:	d804      	bhi.n	800c45e <create_chain+0x106>
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	1e5a      	subs	r2, r3, #1
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	791b      	ldrb	r3, [r3, #4]
 800c462:	f043 0301 	orr.w	r3, r3, #1
 800c466:	b2da      	uxtb	r2, r3
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	711a      	strb	r2, [r3, #4]
 800c46c:	e007      	b.n	800c47e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c46e:	7dfb      	ldrb	r3, [r7, #23]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d102      	bne.n	800c47a <create_chain+0x122>
 800c474:	f04f 33ff 	mov.w	r3, #4294967295
 800c478:	e000      	b.n	800c47c <create_chain+0x124>
 800c47a:	2301      	movs	r3, #1
 800c47c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c47e:	69fb      	ldr	r3, [r7, #28]
}
 800c480:	4618      	mov	r0, r3
 800c482:	3720      	adds	r7, #32
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c488:	b480      	push	{r7}
 800c48a:	b087      	sub	sp, #28
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49c:	3304      	adds	r3, #4
 800c49e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	0a5b      	lsrs	r3, r3, #9
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	8952      	ldrh	r2, [r2, #10]
 800c4a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	1d1a      	adds	r2, r3, #4
 800c4b2:	613a      	str	r2, [r7, #16]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d101      	bne.n	800c4c2 <clmt_clust+0x3a>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	e010      	b.n	800c4e4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c4c2:	697a      	ldr	r2, [r7, #20]
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d307      	bcc.n	800c4da <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c4ca:	697a      	ldr	r2, [r7, #20]
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	1ad3      	subs	r3, r2, r3
 800c4d0:	617b      	str	r3, [r7, #20]
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c4d8:	e7e9      	b.n	800c4ae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c4da:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	4413      	add	r3, r2
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	371c      	adds	r7, #28
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b086      	sub	sp, #24
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c506:	d204      	bcs.n	800c512 <dir_sdi+0x22>
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	f003 031f 	and.w	r3, r3, #31
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d001      	beq.n	800c516 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c512:	2302      	movs	r3, #2
 800c514:	e063      	b.n	800c5de <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d106      	bne.n	800c536 <dir_sdi+0x46>
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d902      	bls.n	800c536 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c534:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10c      	bne.n	800c556 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	095b      	lsrs	r3, r3, #5
 800c540:	693a      	ldr	r2, [r7, #16]
 800c542:	8912      	ldrh	r2, [r2, #8]
 800c544:	4293      	cmp	r3, r2
 800c546:	d301      	bcc.n	800c54c <dir_sdi+0x5c>
 800c548:	2302      	movs	r3, #2
 800c54a:	e048      	b.n	800c5de <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	61da      	str	r2, [r3, #28]
 800c554:	e029      	b.n	800c5aa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	895b      	ldrh	r3, [r3, #10]
 800c55a:	025b      	lsls	r3, r3, #9
 800c55c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c55e:	e019      	b.n	800c594 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6979      	ldr	r1, [r7, #20]
 800c564:	4618      	mov	r0, r3
 800c566:	f7ff fcfe 	bl	800bf66 <get_fat>
 800c56a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c572:	d101      	bne.n	800c578 <dir_sdi+0x88>
 800c574:	2301      	movs	r3, #1
 800c576:	e032      	b.n	800c5de <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d904      	bls.n	800c588 <dir_sdi+0x98>
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	695b      	ldr	r3, [r3, #20]
 800c582:	697a      	ldr	r2, [r7, #20]
 800c584:	429a      	cmp	r2, r3
 800c586:	d301      	bcc.n	800c58c <dir_sdi+0x9c>
 800c588:	2302      	movs	r3, #2
 800c58a:	e028      	b.n	800c5de <dir_sdi+0xee>
			ofs -= csz;
 800c58c:	683a      	ldr	r2, [r7, #0]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c594:	683a      	ldr	r2, [r7, #0]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d2e1      	bcs.n	800c560 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c59c:	6979      	ldr	r1, [r7, #20]
 800c59e:	6938      	ldr	r0, [r7, #16]
 800c5a0:	f7ff fcc2 	bl	800bf28 <clust2sect>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	69db      	ldr	r3, [r3, #28]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <dir_sdi+0xcc>
 800c5b8:	2302      	movs	r3, #2
 800c5ba:	e010      	b.n	800c5de <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	69da      	ldr	r2, [r3, #28]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	0a5b      	lsrs	r3, r3, #9
 800c5c4:	441a      	add	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5d6:	441a      	add	r2, r3
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3718      	adds	r7, #24
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b086      	sub	sp, #24
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
 800c5ee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	695b      	ldr	r3, [r3, #20]
 800c5fa:	3320      	adds	r3, #32
 800c5fc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	69db      	ldr	r3, [r3, #28]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d003      	beq.n	800c60e <dir_next+0x28>
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c60c:	d301      	bcc.n	800c612 <dir_next+0x2c>
 800c60e:	2304      	movs	r3, #4
 800c610:	e0aa      	b.n	800c768 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f040 8098 	bne.w	800c74e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	69db      	ldr	r3, [r3, #28]
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	699b      	ldr	r3, [r3, #24]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10b      	bne.n	800c648 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	095b      	lsrs	r3, r3, #5
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	8912      	ldrh	r2, [r2, #8]
 800c638:	4293      	cmp	r3, r2
 800c63a:	f0c0 8088 	bcc.w	800c74e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	61da      	str	r2, [r3, #28]
 800c644:	2304      	movs	r3, #4
 800c646:	e08f      	b.n	800c768 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	0a5b      	lsrs	r3, r3, #9
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	8952      	ldrh	r2, [r2, #10]
 800c650:	3a01      	subs	r2, #1
 800c652:	4013      	ands	r3, r2
 800c654:	2b00      	cmp	r3, #0
 800c656:	d17a      	bne.n	800c74e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	699b      	ldr	r3, [r3, #24]
 800c65e:	4619      	mov	r1, r3
 800c660:	4610      	mov	r0, r2
 800c662:	f7ff fc80 	bl	800bf66 <get_fat>
 800c666:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d801      	bhi.n	800c672 <dir_next+0x8c>
 800c66e:	2302      	movs	r3, #2
 800c670:	e07a      	b.n	800c768 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c678:	d101      	bne.n	800c67e <dir_next+0x98>
 800c67a:	2301      	movs	r3, #1
 800c67c:	e074      	b.n	800c768 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	429a      	cmp	r2, r3
 800c686:	d358      	bcc.n	800c73a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d104      	bne.n	800c698 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	61da      	str	r2, [r3, #28]
 800c694:	2304      	movs	r3, #4
 800c696:	e067      	b.n	800c768 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	4610      	mov	r0, r2
 800c6a2:	f7ff fe59 	bl	800c358 <create_chain>
 800c6a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d101      	bne.n	800c6b2 <dir_next+0xcc>
 800c6ae:	2307      	movs	r3, #7
 800c6b0:	e05a      	b.n	800c768 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d101      	bne.n	800c6bc <dir_next+0xd6>
 800c6b8:	2302      	movs	r3, #2
 800c6ba:	e055      	b.n	800c768 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c2:	d101      	bne.n	800c6c8 <dir_next+0xe2>
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e04f      	b.n	800c768 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f7ff fb4d 	bl	800bd68 <sync_window>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d001      	beq.n	800c6d8 <dir_next+0xf2>
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	e047      	b.n	800c768 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	3330      	adds	r3, #48	; 0x30
 800c6dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7ff f977 	bl	800b9d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	613b      	str	r3, [r7, #16]
 800c6ec:	6979      	ldr	r1, [r7, #20]
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f7ff fc1a 	bl	800bf28 <clust2sect>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	62da      	str	r2, [r3, #44]	; 0x2c
 800c6fa:	e012      	b.n	800c722 <dir_next+0x13c>
						fs->wflag = 1;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2201      	movs	r2, #1
 800c700:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f7ff fb30 	bl	800bd68 <sync_window>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d001      	beq.n	800c712 <dir_next+0x12c>
 800c70e:	2301      	movs	r3, #1
 800c710:	e02a      	b.n	800c768 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	3301      	adds	r3, #1
 800c716:	613b      	str	r3, [r7, #16]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71c:	1c5a      	adds	r2, r3, #1
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	62da      	str	r2, [r3, #44]	; 0x2c
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	895b      	ldrh	r3, [r3, #10]
 800c726:	461a      	mov	r2, r3
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d3e6      	bcc.n	800c6fc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	1ad2      	subs	r2, r2, r3
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	697a      	ldr	r2, [r7, #20]
 800c73e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c740:	6979      	ldr	r1, [r7, #20]
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f7ff fbf0 	bl	800bf28 <clust2sect>
 800c748:	4602      	mov	r2, r0
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c760:	441a      	add	r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3718      	adds	r7, #24
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c780:	2100      	movs	r1, #0
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7ff feb4 	bl	800c4f0 <dir_sdi>
 800c788:	4603      	mov	r3, r0
 800c78a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c78c:	7dfb      	ldrb	r3, [r7, #23]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d12b      	bne.n	800c7ea <dir_alloc+0x7a>
		n = 0;
 800c792:	2300      	movs	r3, #0
 800c794:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	69db      	ldr	r3, [r3, #28]
 800c79a:	4619      	mov	r1, r3
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f7ff fb27 	bl	800bdf0 <move_window>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d11d      	bne.n	800c7e8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a1b      	ldr	r3, [r3, #32]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	2be5      	cmp	r3, #229	; 0xe5
 800c7b4:	d004      	beq.n	800c7c0 <dir_alloc+0x50>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6a1b      	ldr	r3, [r3, #32]
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d107      	bne.n	800c7d0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	613b      	str	r3, [r7, #16]
 800c7c6:	693a      	ldr	r2, [r7, #16]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d102      	bne.n	800c7d4 <dir_alloc+0x64>
 800c7ce:	e00c      	b.n	800c7ea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c7d4:	2101      	movs	r1, #1
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f7ff ff05 	bl	800c5e6 <dir_next>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d0d7      	beq.n	800c796 <dir_alloc+0x26>
 800c7e6:	e000      	b.n	800c7ea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c7e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c7ea:	7dfb      	ldrb	r3, [r7, #23]
 800c7ec:	2b04      	cmp	r3, #4
 800c7ee:	d101      	bne.n	800c7f4 <dir_alloc+0x84>
 800c7f0:	2307      	movs	r3, #7
 800c7f2:	75fb      	strb	r3, [r7, #23]
	return res;
 800c7f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3718      	adds	r7, #24
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b084      	sub	sp, #16
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	331a      	adds	r3, #26
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff f83f 	bl	800b890 <ld_word>
 800c812:	4603      	mov	r3, r0
 800c814:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	2b03      	cmp	r3, #3
 800c81c:	d109      	bne.n	800c832 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	3314      	adds	r3, #20
 800c822:	4618      	mov	r0, r3
 800c824:	f7ff f834 	bl	800b890 <ld_word>
 800c828:	4603      	mov	r3, r0
 800c82a:	041b      	lsls	r3, r3, #16
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	4313      	orrs	r3, r2
 800c830:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c832:	68fb      	ldr	r3, [r7, #12]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	331a      	adds	r3, #26
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	b292      	uxth	r2, r2
 800c850:	4611      	mov	r1, r2
 800c852:	4618      	mov	r0, r3
 800c854:	f7ff f857 	bl	800b906 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	2b03      	cmp	r3, #3
 800c85e:	d109      	bne.n	800c874 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	f103 0214 	add.w	r2, r3, #20
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	0c1b      	lsrs	r3, r3, #16
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	4619      	mov	r1, r3
 800c86e:	4610      	mov	r0, r2
 800c870:	f7ff f849 	bl	800b906 <st_word>
	}
}
 800c874:	bf00      	nop
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b086      	sub	sp, #24
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c886:	2304      	movs	r3, #4
 800c888:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800c890:	e03c      	b.n	800c90c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	69db      	ldr	r3, [r3, #28]
 800c896:	4619      	mov	r1, r3
 800c898:	6938      	ldr	r0, [r7, #16]
 800c89a:	f7ff faa9 	bl	800bdf0 <move_window>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c8a2:	7dfb      	ldrb	r3, [r7, #23]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d136      	bne.n	800c916 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6a1b      	ldr	r3, [r3, #32]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d102      	bne.n	800c8bc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c8b6:	2304      	movs	r3, #4
 800c8b8:	75fb      	strb	r3, [r7, #23]
 800c8ba:	e031      	b.n	800c920 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6a1b      	ldr	r3, [r3, #32]
 800c8c0:	330b      	adds	r3, #11
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8c8:	73bb      	strb	r3, [r7, #14]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	7bba      	ldrb	r2, [r7, #14]
 800c8ce:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	2be5      	cmp	r3, #229	; 0xe5
 800c8d4:	d011      	beq.n	800c8fa <dir_read+0x7e>
 800c8d6:	7bfb      	ldrb	r3, [r7, #15]
 800c8d8:	2b2e      	cmp	r3, #46	; 0x2e
 800c8da:	d00e      	beq.n	800c8fa <dir_read+0x7e>
 800c8dc:	7bbb      	ldrb	r3, [r7, #14]
 800c8de:	2b0f      	cmp	r3, #15
 800c8e0:	d00b      	beq.n	800c8fa <dir_read+0x7e>
 800c8e2:	7bbb      	ldrb	r3, [r7, #14]
 800c8e4:	f023 0320 	bic.w	r3, r3, #32
 800c8e8:	2b08      	cmp	r3, #8
 800c8ea:	bf0c      	ite	eq
 800c8ec:	2301      	moveq	r3, #1
 800c8ee:	2300      	movne	r3, #0
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d00f      	beq.n	800c91a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7ff fe72 	bl	800c5e6 <dir_next>
 800c902:	4603      	mov	r3, r0
 800c904:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d108      	bne.n	800c91e <dir_read+0xa2>
	while (dp->sect) {
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	69db      	ldr	r3, [r3, #28]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1be      	bne.n	800c892 <dir_read+0x16>
 800c914:	e004      	b.n	800c920 <dir_read+0xa4>
		if (res != FR_OK) break;
 800c916:	bf00      	nop
 800c918:	e002      	b.n	800c920 <dir_read+0xa4>
				break;
 800c91a:	bf00      	nop
 800c91c:	e000      	b.n	800c920 <dir_read+0xa4>
		if (res != FR_OK) break;
 800c91e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c920:	7dfb      	ldrb	r3, [r7, #23]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d002      	beq.n	800c92c <dir_read+0xb0>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	61da      	str	r2, [r3, #28]
	return res;
 800c92c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3718      	adds	r7, #24
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b086      	sub	sp, #24
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c944:	2100      	movs	r1, #0
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f7ff fdd2 	bl	800c4f0 <dir_sdi>
 800c94c:	4603      	mov	r3, r0
 800c94e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c950:	7dfb      	ldrb	r3, [r7, #23]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d001      	beq.n	800c95a <dir_find+0x24>
 800c956:	7dfb      	ldrb	r3, [r7, #23]
 800c958:	e03e      	b.n	800c9d8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	69db      	ldr	r3, [r3, #28]
 800c95e:	4619      	mov	r1, r3
 800c960:	6938      	ldr	r0, [r7, #16]
 800c962:	f7ff fa45 	bl	800bdf0 <move_window>
 800c966:	4603      	mov	r3, r0
 800c968:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c96a:	7dfb      	ldrb	r3, [r7, #23]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d12f      	bne.n	800c9d0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6a1b      	ldr	r3, [r3, #32]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c978:	7bfb      	ldrb	r3, [r7, #15]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d102      	bne.n	800c984 <dir_find+0x4e>
 800c97e:	2304      	movs	r3, #4
 800c980:	75fb      	strb	r3, [r7, #23]
 800c982:	e028      	b.n	800c9d6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a1b      	ldr	r3, [r3, #32]
 800c988:	330b      	adds	r3, #11
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c990:	b2da      	uxtb	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a1b      	ldr	r3, [r3, #32]
 800c99a:	330b      	adds	r3, #11
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	f003 0308 	and.w	r3, r3, #8
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d10a      	bne.n	800c9bc <dir_find+0x86>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6a18      	ldr	r0, [r3, #32]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	3324      	adds	r3, #36	; 0x24
 800c9ae:	220b      	movs	r2, #11
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	f7ff f82b 	bl	800ba0c <mem_cmp>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00b      	beq.n	800c9d4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c9bc:	2100      	movs	r1, #0
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f7ff fe11 	bl	800c5e6 <dir_next>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c9c8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0c5      	beq.n	800c95a <dir_find+0x24>
 800c9ce:	e002      	b.n	800c9d6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c9d0:	bf00      	nop
 800c9d2:	e000      	b.n	800c9d6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c9d4:	bf00      	nop

	return res;
 800c9d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3718      	adds	r7, #24
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7ff febd 	bl	800c770 <dir_alloc>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c9fa:	7bfb      	ldrb	r3, [r7, #15]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d11c      	bne.n	800ca3a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	69db      	ldr	r3, [r3, #28]
 800ca04:	4619      	mov	r1, r3
 800ca06:	68b8      	ldr	r0, [r7, #8]
 800ca08:	f7ff f9f2 	bl	800bdf0 <move_window>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ca10:	7bfb      	ldrb	r3, [r7, #15]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d111      	bne.n	800ca3a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6a1b      	ldr	r3, [r3, #32]
 800ca1a:	2220      	movs	r2, #32
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fe ffd9 	bl	800b9d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a18      	ldr	r0, [r3, #32]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	3324      	adds	r3, #36	; 0x24
 800ca2c:	220b      	movs	r2, #11
 800ca2e:	4619      	mov	r1, r3
 800ca30:	f7fe ffb0 	bl	800b994 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	2201      	movs	r2, #1
 800ca38:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ca3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	2200      	movs	r2, #0
 800ca52:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	69db      	ldr	r3, [r3, #28]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d04e      	beq.n	800cafa <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	613b      	str	r3, [r7, #16]
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800ca64:	e021      	b.n	800caaa <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a1a      	ldr	r2, [r3, #32]
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	1c59      	adds	r1, r3, #1
 800ca6e:	6179      	str	r1, [r7, #20]
 800ca70:	4413      	add	r3, r2
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
 800ca78:	2b20      	cmp	r3, #32
 800ca7a:	d100      	bne.n	800ca7e <get_fileinfo+0x3a>
 800ca7c:	e015      	b.n	800caaa <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ca7e:	7bfb      	ldrb	r3, [r7, #15]
 800ca80:	2b05      	cmp	r3, #5
 800ca82:	d101      	bne.n	800ca88 <get_fileinfo+0x44>
 800ca84:	23e5      	movs	r3, #229	; 0xe5
 800ca86:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	2b09      	cmp	r3, #9
 800ca8c:	d106      	bne.n	800ca9c <get_fileinfo+0x58>
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	613a      	str	r2, [r7, #16]
 800ca94:	683a      	ldr	r2, [r7, #0]
 800ca96:	4413      	add	r3, r2
 800ca98:	222e      	movs	r2, #46	; 0x2e
 800ca9a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	1c5a      	adds	r2, r3, #1
 800caa0:	613a      	str	r2, [r7, #16]
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	4413      	add	r3, r2
 800caa6:	7bfa      	ldrb	r2, [r7, #15]
 800caa8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	2b0a      	cmp	r3, #10
 800caae:	d9da      	bls.n	800ca66 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800cab0:	683a      	ldr	r2, [r7, #0]
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	4413      	add	r3, r2
 800cab6:	3309      	adds	r3, #9
 800cab8:	2200      	movs	r2, #0
 800caba:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6a1b      	ldr	r3, [r3, #32]
 800cac0:	7ada      	ldrb	r2, [r3, #11]
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6a1b      	ldr	r3, [r3, #32]
 800caca:	331c      	adds	r3, #28
 800cacc:	4618      	mov	r0, r3
 800cace:	f7fe fef7 	bl	800b8c0 <ld_dword>
 800cad2:	4602      	mov	r2, r0
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6a1b      	ldr	r3, [r3, #32]
 800cadc:	3316      	adds	r3, #22
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fe feee 	bl	800b8c0 <ld_dword>
 800cae4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	b29a      	uxth	r2, r3
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	80da      	strh	r2, [r3, #6]
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	0c1b      	lsrs	r3, r3, #16
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	809a      	strh	r2, [r3, #4]
 800caf8:	e000      	b.n	800cafc <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cafa:	bf00      	nop
}
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
	...

0800cb04 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b088      	sub	sp, #32
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	3324      	adds	r3, #36	; 0x24
 800cb18:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cb1a:	220b      	movs	r2, #11
 800cb1c:	2120      	movs	r1, #32
 800cb1e:	68b8      	ldr	r0, [r7, #8]
 800cb20:	f7fe ff59 	bl	800b9d6 <mem_set>
	si = i = 0; ni = 8;
 800cb24:	2300      	movs	r3, #0
 800cb26:	613b      	str	r3, [r7, #16]
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	61fb      	str	r3, [r7, #28]
 800cb2c:	2308      	movs	r3, #8
 800cb2e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	1c5a      	adds	r2, r3, #1
 800cb34:	61fa      	str	r2, [r7, #28]
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	4413      	add	r3, r2
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cb3e:	7efb      	ldrb	r3, [r7, #27]
 800cb40:	2b20      	cmp	r3, #32
 800cb42:	d94e      	bls.n	800cbe2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cb44:	7efb      	ldrb	r3, [r7, #27]
 800cb46:	2b2f      	cmp	r3, #47	; 0x2f
 800cb48:	d006      	beq.n	800cb58 <create_name+0x54>
 800cb4a:	7efb      	ldrb	r3, [r7, #27]
 800cb4c:	2b5c      	cmp	r3, #92	; 0x5c
 800cb4e:	d110      	bne.n	800cb72 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cb50:	e002      	b.n	800cb58 <create_name+0x54>
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	3301      	adds	r3, #1
 800cb56:	61fb      	str	r3, [r7, #28]
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	2b2f      	cmp	r3, #47	; 0x2f
 800cb62:	d0f6      	beq.n	800cb52 <create_name+0x4e>
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	4413      	add	r3, r2
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	2b5c      	cmp	r3, #92	; 0x5c
 800cb6e:	d0f0      	beq.n	800cb52 <create_name+0x4e>
			break;
 800cb70:	e038      	b.n	800cbe4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cb72:	7efb      	ldrb	r3, [r7, #27]
 800cb74:	2b2e      	cmp	r3, #46	; 0x2e
 800cb76:	d003      	beq.n	800cb80 <create_name+0x7c>
 800cb78:	693a      	ldr	r2, [r7, #16]
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d30c      	bcc.n	800cb9a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	2b0b      	cmp	r3, #11
 800cb84:	d002      	beq.n	800cb8c <create_name+0x88>
 800cb86:	7efb      	ldrb	r3, [r7, #27]
 800cb88:	2b2e      	cmp	r3, #46	; 0x2e
 800cb8a:	d001      	beq.n	800cb90 <create_name+0x8c>
 800cb8c:	2306      	movs	r3, #6
 800cb8e:	e044      	b.n	800cc1a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cb90:	2308      	movs	r3, #8
 800cb92:	613b      	str	r3, [r7, #16]
 800cb94:	230b      	movs	r3, #11
 800cb96:	617b      	str	r3, [r7, #20]
			continue;
 800cb98:	e022      	b.n	800cbe0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cb9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	da04      	bge.n	800cbac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cba2:	7efb      	ldrb	r3, [r7, #27]
 800cba4:	3b80      	subs	r3, #128	; 0x80
 800cba6:	4a1f      	ldr	r2, [pc, #124]	; (800cc24 <create_name+0x120>)
 800cba8:	5cd3      	ldrb	r3, [r2, r3]
 800cbaa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cbac:	7efb      	ldrb	r3, [r7, #27]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	481d      	ldr	r0, [pc, #116]	; (800cc28 <create_name+0x124>)
 800cbb2:	f7fe ff52 	bl	800ba5a <chk_chr>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <create_name+0xbc>
 800cbbc:	2306      	movs	r3, #6
 800cbbe:	e02c      	b.n	800cc1a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cbc0:	7efb      	ldrb	r3, [r7, #27]
 800cbc2:	2b60      	cmp	r3, #96	; 0x60
 800cbc4:	d905      	bls.n	800cbd2 <create_name+0xce>
 800cbc6:	7efb      	ldrb	r3, [r7, #27]
 800cbc8:	2b7a      	cmp	r3, #122	; 0x7a
 800cbca:	d802      	bhi.n	800cbd2 <create_name+0xce>
 800cbcc:	7efb      	ldrb	r3, [r7, #27]
 800cbce:	3b20      	subs	r3, #32
 800cbd0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	1c5a      	adds	r2, r3, #1
 800cbd6:	613a      	str	r2, [r7, #16]
 800cbd8:	68ba      	ldr	r2, [r7, #8]
 800cbda:	4413      	add	r3, r2
 800cbdc:	7efa      	ldrb	r2, [r7, #27]
 800cbde:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cbe0:	e7a6      	b.n	800cb30 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cbe2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	441a      	add	r2, r3
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d101      	bne.n	800cbf8 <create_name+0xf4>
 800cbf4:	2306      	movs	r3, #6
 800cbf6:	e010      	b.n	800cc1a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	2be5      	cmp	r3, #229	; 0xe5
 800cbfe:	d102      	bne.n	800cc06 <create_name+0x102>
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	2205      	movs	r2, #5
 800cc04:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cc06:	7efb      	ldrb	r3, [r7, #27]
 800cc08:	2b20      	cmp	r3, #32
 800cc0a:	d801      	bhi.n	800cc10 <create_name+0x10c>
 800cc0c:	2204      	movs	r2, #4
 800cc0e:	e000      	b.n	800cc12 <create_name+0x10e>
 800cc10:	2200      	movs	r2, #0
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	330b      	adds	r3, #11
 800cc16:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cc18:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3720      	adds	r7, #32
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	080146d8 	.word	0x080146d8
 800cc28:	08014618 	.word	0x08014618

0800cc2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cc40:	e002      	b.n	800cc48 <follow_path+0x1c>
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	3301      	adds	r3, #1
 800cc46:	603b      	str	r3, [r7, #0]
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	2b2f      	cmp	r3, #47	; 0x2f
 800cc4e:	d0f8      	beq.n	800cc42 <follow_path+0x16>
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	2b5c      	cmp	r3, #92	; 0x5c
 800cc56:	d0f4      	beq.n	800cc42 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	2b1f      	cmp	r3, #31
 800cc64:	d80a      	bhi.n	800cc7c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2280      	movs	r2, #128	; 0x80
 800cc6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cc6e:	2100      	movs	r1, #0
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7ff fc3d 	bl	800c4f0 <dir_sdi>
 800cc76:	4603      	mov	r3, r0
 800cc78:	75fb      	strb	r3, [r7, #23]
 800cc7a:	e043      	b.n	800cd04 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc7c:	463b      	mov	r3, r7
 800cc7e:	4619      	mov	r1, r3
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7ff ff3f 	bl	800cb04 <create_name>
 800cc86:	4603      	mov	r3, r0
 800cc88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d134      	bne.n	800ccfa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f7ff fe50 	bl	800c936 <dir_find>
 800cc96:	4603      	mov	r3, r0
 800cc98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cca0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cca2:	7dfb      	ldrb	r3, [r7, #23]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00a      	beq.n	800ccbe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cca8:	7dfb      	ldrb	r3, [r7, #23]
 800ccaa:	2b04      	cmp	r3, #4
 800ccac:	d127      	bne.n	800ccfe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ccae:	7afb      	ldrb	r3, [r7, #11]
 800ccb0:	f003 0304 	and.w	r3, r3, #4
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d122      	bne.n	800ccfe <follow_path+0xd2>
 800ccb8:	2305      	movs	r3, #5
 800ccba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ccbc:	e01f      	b.n	800ccfe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ccbe:	7afb      	ldrb	r3, [r7, #11]
 800ccc0:	f003 0304 	and.w	r3, r3, #4
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d11c      	bne.n	800cd02 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	799b      	ldrb	r3, [r3, #6]
 800cccc:	f003 0310 	and.w	r3, r3, #16
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d102      	bne.n	800ccda <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ccd4:	2305      	movs	r3, #5
 800ccd6:	75fb      	strb	r3, [r7, #23]
 800ccd8:	e014      	b.n	800cd04 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	695b      	ldr	r3, [r3, #20]
 800cce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cce8:	4413      	add	r3, r2
 800ccea:	4619      	mov	r1, r3
 800ccec:	68f8      	ldr	r0, [r7, #12]
 800ccee:	f7ff fd86 	bl	800c7fe <ld_clust>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ccf8:	e7c0      	b.n	800cc7c <follow_path+0x50>
			if (res != FR_OK) break;
 800ccfa:	bf00      	nop
 800ccfc:	e002      	b.n	800cd04 <follow_path+0xd8>
				break;
 800ccfe:	bf00      	nop
 800cd00:	e000      	b.n	800cd04 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd02:	bf00      	nop
			}
		}
	}

	return res;
 800cd04:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3718      	adds	r7, #24
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cd0e:	b480      	push	{r7}
 800cd10:	b087      	sub	sp, #28
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cd16:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d031      	beq.n	800cd88 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	617b      	str	r3, [r7, #20]
 800cd2a:	e002      	b.n	800cd32 <get_ldnumber+0x24>
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	617b      	str	r3, [r7, #20]
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	2b20      	cmp	r3, #32
 800cd38:	d903      	bls.n	800cd42 <get_ldnumber+0x34>
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	2b3a      	cmp	r3, #58	; 0x3a
 800cd40:	d1f4      	bne.n	800cd2c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	2b3a      	cmp	r3, #58	; 0x3a
 800cd48:	d11c      	bne.n	800cd84 <get_ldnumber+0x76>
			tp = *path;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	1c5a      	adds	r2, r3, #1
 800cd54:	60fa      	str	r2, [r7, #12]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	3b30      	subs	r3, #48	; 0x30
 800cd5a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	2b09      	cmp	r3, #9
 800cd60:	d80e      	bhi.n	800cd80 <get_ldnumber+0x72>
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d10a      	bne.n	800cd80 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d107      	bne.n	800cd80 <get_ldnumber+0x72>
					vol = (int)i;
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	3301      	adds	r3, #1
 800cd78:	617b      	str	r3, [r7, #20]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	697a      	ldr	r2, [r7, #20]
 800cd7e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	e002      	b.n	800cd8a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cd84:	2300      	movs	r3, #0
 800cd86:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cd88:	693b      	ldr	r3, [r7, #16]
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	371c      	adds	r7, #28
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
	...

0800cd98 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	70da      	strb	r2, [r3, #3]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f04f 32ff 	mov.w	r2, #4294967295
 800cdae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cdb0:	6839      	ldr	r1, [r7, #0]
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f7ff f81c 	bl	800bdf0 <move_window>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d001      	beq.n	800cdc2 <check_fs+0x2a>
 800cdbe:	2304      	movs	r3, #4
 800cdc0:	e038      	b.n	800ce34 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	3330      	adds	r3, #48	; 0x30
 800cdc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fe fd60 	bl	800b890 <ld_word>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d001      	beq.n	800cde0 <check_fs+0x48>
 800cddc:	2303      	movs	r3, #3
 800cdde:	e029      	b.n	800ce34 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cde6:	2be9      	cmp	r3, #233	; 0xe9
 800cde8:	d009      	beq.n	800cdfe <check_fs+0x66>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdf0:	2beb      	cmp	r3, #235	; 0xeb
 800cdf2:	d11e      	bne.n	800ce32 <check_fs+0x9a>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cdfa:	2b90      	cmp	r3, #144	; 0x90
 800cdfc:	d119      	bne.n	800ce32 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	3330      	adds	r3, #48	; 0x30
 800ce02:	3336      	adds	r3, #54	; 0x36
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fe fd5b 	bl	800b8c0 <ld_dword>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ce10:	4a0a      	ldr	r2, [pc, #40]	; (800ce3c <check_fs+0xa4>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d101      	bne.n	800ce1a <check_fs+0x82>
 800ce16:	2300      	movs	r3, #0
 800ce18:	e00c      	b.n	800ce34 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	3330      	adds	r3, #48	; 0x30
 800ce1e:	3352      	adds	r3, #82	; 0x52
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7fe fd4d 	bl	800b8c0 <ld_dword>
 800ce26:	4603      	mov	r3, r0
 800ce28:	4a05      	ldr	r2, [pc, #20]	; (800ce40 <check_fs+0xa8>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d101      	bne.n	800ce32 <check_fs+0x9a>
 800ce2e:	2300      	movs	r3, #0
 800ce30:	e000      	b.n	800ce34 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ce32:	2302      	movs	r3, #2
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	00544146 	.word	0x00544146
 800ce40:	33544146 	.word	0x33544146

0800ce44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b096      	sub	sp, #88	; 0x58
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	4613      	mov	r3, r2
 800ce50:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	2200      	movs	r2, #0
 800ce56:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ce58:	68f8      	ldr	r0, [r7, #12]
 800ce5a:	f7ff ff58 	bl	800cd0e <get_ldnumber>
 800ce5e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	da01      	bge.n	800ce6a <find_volume+0x26>
 800ce66:	230b      	movs	r3, #11
 800ce68:	e22e      	b.n	800d2c8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ce6a:	4aa8      	ldr	r2, [pc, #672]	; (800d10c <find_volume+0x2c8>)
 800ce6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce72:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ce74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d101      	bne.n	800ce7e <find_volume+0x3a>
 800ce7a:	230c      	movs	r3, #12
 800ce7c:	e224      	b.n	800d2c8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce82:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	f023 0301 	bic.w	r3, r3, #1
 800ce8a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d01a      	beq.n	800ceca <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce96:	785b      	ldrb	r3, [r3, #1]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fe fc5b 	bl	800b754 <disk_status>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cea4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cea8:	f003 0301 	and.w	r3, r3, #1
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d10c      	bne.n	800ceca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d007      	beq.n	800cec6 <find_volume+0x82>
 800ceb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ceba:	f003 0304 	and.w	r3, r3, #4
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d001      	beq.n	800cec6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cec2:	230a      	movs	r3, #10
 800cec4:	e200      	b.n	800d2c8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800cec6:	2300      	movs	r3, #0
 800cec8:	e1fe      	b.n	800d2c8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ceca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cecc:	2200      	movs	r2, #0
 800cece:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ced0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ced2:	b2da      	uxtb	r2, r3
 800ced4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ced8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceda:	785b      	ldrb	r3, [r3, #1]
 800cedc:	4618      	mov	r0, r3
 800cede:	f7fe fc53 	bl	800b788 <disk_initialize>
 800cee2:	4603      	mov	r3, r0
 800cee4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cee8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ceec:	f003 0301 	and.w	r3, r3, #1
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d001      	beq.n	800cef8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cef4:	2303      	movs	r3, #3
 800cef6:	e1e7      	b.n	800d2c8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cef8:	79fb      	ldrb	r3, [r7, #7]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d007      	beq.n	800cf0e <find_volume+0xca>
 800cefe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf02:	f003 0304 	and.w	r3, r3, #4
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cf0a:	230a      	movs	r3, #10
 800cf0c:	e1dc      	b.n	800d2c8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cf12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf16:	f7ff ff3f 	bl	800cd98 <check_fs>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cf20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d14b      	bne.n	800cfc0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf28:	2300      	movs	r3, #0
 800cf2a:	643b      	str	r3, [r7, #64]	; 0x40
 800cf2c:	e01f      	b.n	800cf6e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cf34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf36:	011b      	lsls	r3, r3, #4
 800cf38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cf3c:	4413      	add	r3, r2
 800cf3e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf42:	3304      	adds	r3, #4
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d006      	beq.n	800cf58 <find_volume+0x114>
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4c:	3308      	adds	r3, #8
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fe fcb6 	bl	800b8c0 <ld_dword>
 800cf54:	4602      	mov	r2, r0
 800cf56:	e000      	b.n	800cf5a <find_volume+0x116>
 800cf58:	2200      	movs	r2, #0
 800cf5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800cf62:	440b      	add	r3, r1
 800cf64:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	643b      	str	r3, [r7, #64]	; 0x40
 800cf6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf70:	2b03      	cmp	r3, #3
 800cf72:	d9dc      	bls.n	800cf2e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cf74:	2300      	movs	r3, #0
 800cf76:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cf78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d002      	beq.n	800cf84 <find_volume+0x140>
 800cf7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf80:	3b01      	subs	r3, #1
 800cf82:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cf84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cf92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d005      	beq.n	800cfa6 <find_volume+0x162>
 800cf9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf9e:	f7ff fefb 	bl	800cd98 <check_fs>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	e000      	b.n	800cfa8 <find_volume+0x164>
 800cfa6:	2303      	movs	r3, #3
 800cfa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cfac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d905      	bls.n	800cfc0 <find_volume+0x17c>
 800cfb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	643b      	str	r3, [r7, #64]	; 0x40
 800cfba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfbc:	2b03      	cmp	r3, #3
 800cfbe:	d9e1      	bls.n	800cf84 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cfc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfc4:	2b04      	cmp	r3, #4
 800cfc6:	d101      	bne.n	800cfcc <find_volume+0x188>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e17d      	b.n	800d2c8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cfcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d901      	bls.n	800cfd8 <find_volume+0x194>
 800cfd4:	230d      	movs	r3, #13
 800cfd6:	e177      	b.n	800d2c8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfda:	3330      	adds	r3, #48	; 0x30
 800cfdc:	330b      	adds	r3, #11
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7fe fc56 	bl	800b890 <ld_word>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfea:	d001      	beq.n	800cff0 <find_volume+0x1ac>
 800cfec:	230d      	movs	r3, #13
 800cfee:	e16b      	b.n	800d2c8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	3330      	adds	r3, #48	; 0x30
 800cff4:	3316      	adds	r3, #22
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fe fc4a 	bl	800b890 <ld_word>
 800cffc:	4603      	mov	r3, r0
 800cffe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d002:	2b00      	cmp	r3, #0
 800d004:	d106      	bne.n	800d014 <find_volume+0x1d0>
 800d006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d008:	3330      	adds	r3, #48	; 0x30
 800d00a:	3324      	adds	r3, #36	; 0x24
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7fe fc57 	bl	800b8c0 <ld_dword>
 800d012:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d018:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d022:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d026:	789b      	ldrb	r3, [r3, #2]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d005      	beq.n	800d038 <find_volume+0x1f4>
 800d02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02e:	789b      	ldrb	r3, [r3, #2]
 800d030:	2b02      	cmp	r3, #2
 800d032:	d001      	beq.n	800d038 <find_volume+0x1f4>
 800d034:	230d      	movs	r3, #13
 800d036:	e147      	b.n	800d2c8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03a:	789b      	ldrb	r3, [r3, #2]
 800d03c:	461a      	mov	r2, r3
 800d03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d040:	fb02 f303 	mul.w	r3, r2, r3
 800d044:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d04c:	b29a      	uxth	r2, r3
 800d04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d050:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d054:	895b      	ldrh	r3, [r3, #10]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d008      	beq.n	800d06c <find_volume+0x228>
 800d05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05c:	895b      	ldrh	r3, [r3, #10]
 800d05e:	461a      	mov	r2, r3
 800d060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d062:	895b      	ldrh	r3, [r3, #10]
 800d064:	3b01      	subs	r3, #1
 800d066:	4013      	ands	r3, r2
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d001      	beq.n	800d070 <find_volume+0x22c>
 800d06c:	230d      	movs	r3, #13
 800d06e:	e12b      	b.n	800d2c8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d072:	3330      	adds	r3, #48	; 0x30
 800d074:	3311      	adds	r3, #17
 800d076:	4618      	mov	r0, r3
 800d078:	f7fe fc0a 	bl	800b890 <ld_word>
 800d07c:	4603      	mov	r3, r0
 800d07e:	461a      	mov	r2, r3
 800d080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d082:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d086:	891b      	ldrh	r3, [r3, #8]
 800d088:	f003 030f 	and.w	r3, r3, #15
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d001      	beq.n	800d096 <find_volume+0x252>
 800d092:	230d      	movs	r3, #13
 800d094:	e118      	b.n	800d2c8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d098:	3330      	adds	r3, #48	; 0x30
 800d09a:	3313      	adds	r3, #19
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7fe fbf7 	bl	800b890 <ld_word>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d106      	bne.n	800d0ba <find_volume+0x276>
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ae:	3330      	adds	r3, #48	; 0x30
 800d0b0:	3320      	adds	r3, #32
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fe fc04 	bl	800b8c0 <ld_dword>
 800d0b8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0bc:	3330      	adds	r3, #48	; 0x30
 800d0be:	330e      	adds	r3, #14
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7fe fbe5 	bl	800b890 <ld_word>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d0ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d101      	bne.n	800d0d4 <find_volume+0x290>
 800d0d0:	230d      	movs	r3, #13
 800d0d2:	e0f9      	b.n	800d2c8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d0d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d0d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0d8:	4413      	add	r3, r2
 800d0da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0dc:	8912      	ldrh	r2, [r2, #8]
 800d0de:	0912      	lsrs	r2, r2, #4
 800d0e0:	b292      	uxth	r2, r2
 800d0e2:	4413      	add	r3, r2
 800d0e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d0e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d201      	bcs.n	800d0f2 <find_volume+0x2ae>
 800d0ee:	230d      	movs	r3, #13
 800d0f0:	e0ea      	b.n	800d2c8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d0f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0fa:	8952      	ldrh	r2, [r2, #10]
 800d0fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d100:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d104:	2b00      	cmp	r3, #0
 800d106:	d103      	bne.n	800d110 <find_volume+0x2cc>
 800d108:	230d      	movs	r3, #13
 800d10a:	e0dd      	b.n	800d2c8 <find_volume+0x484>
 800d10c:	200004b4 	.word	0x200004b4
		fmt = FS_FAT32;
 800d110:	2303      	movs	r3, #3
 800d112:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d118:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d802      	bhi.n	800d126 <find_volume+0x2e2>
 800d120:	2302      	movs	r3, #2
 800d122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d128:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d802      	bhi.n	800d136 <find_volume+0x2f2>
 800d130:	2301      	movs	r3, #1
 800d132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d138:	1c9a      	adds	r2, r3, #2
 800d13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d140:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d142:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d144:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d148:	441a      	add	r2, r3
 800d14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d14e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d152:	441a      	add	r2, r3
 800d154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d156:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d158:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d15c:	2b03      	cmp	r3, #3
 800d15e:	d11e      	bne.n	800d19e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d162:	3330      	adds	r3, #48	; 0x30
 800d164:	332a      	adds	r3, #42	; 0x2a
 800d166:	4618      	mov	r0, r3
 800d168:	f7fe fb92 	bl	800b890 <ld_word>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d001      	beq.n	800d176 <find_volume+0x332>
 800d172:	230d      	movs	r3, #13
 800d174:	e0a8      	b.n	800d2c8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d178:	891b      	ldrh	r3, [r3, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <find_volume+0x33e>
 800d17e:	230d      	movs	r3, #13
 800d180:	e0a2      	b.n	800d2c8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d184:	3330      	adds	r3, #48	; 0x30
 800d186:	332c      	adds	r3, #44	; 0x2c
 800d188:	4618      	mov	r0, r3
 800d18a:	f7fe fb99 	bl	800b8c0 <ld_dword>
 800d18e:	4602      	mov	r2, r0
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d196:	695b      	ldr	r3, [r3, #20]
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	647b      	str	r3, [r7, #68]	; 0x44
 800d19c:	e01f      	b.n	800d1de <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a0:	891b      	ldrh	r3, [r3, #8]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <find_volume+0x366>
 800d1a6:	230d      	movs	r3, #13
 800d1a8:	e08e      	b.n	800d2c8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ac:	6a1a      	ldr	r2, [r3, #32]
 800d1ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b0:	441a      	add	r2, r3
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d1b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1ba:	2b02      	cmp	r3, #2
 800d1bc:	d103      	bne.n	800d1c6 <find_volume+0x382>
 800d1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c0:	695b      	ldr	r3, [r3, #20]
 800d1c2:	005b      	lsls	r3, r3, #1
 800d1c4:	e00a      	b.n	800d1dc <find_volume+0x398>
 800d1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c8:	695a      	ldr	r2, [r3, #20]
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	005b      	lsls	r3, r3, #1
 800d1ce:	4413      	add	r3, r2
 800d1d0:	085a      	lsrs	r2, r3, #1
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d4:	695b      	ldr	r3, [r3, #20]
 800d1d6:	f003 0301 	and.w	r3, r3, #1
 800d1da:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d1dc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e0:	699a      	ldr	r2, [r3, #24]
 800d1e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d1e8:	0a5b      	lsrs	r3, r3, #9
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d201      	bcs.n	800d1f2 <find_volume+0x3ae>
 800d1ee:	230d      	movs	r3, #13
 800d1f0:	e06a      	b.n	800d2c8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f8:	611a      	str	r2, [r3, #16]
 800d1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fc:	691a      	ldr	r2, [r3, #16]
 800d1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d200:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d204:	2280      	movs	r2, #128	; 0x80
 800d206:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d20c:	2b03      	cmp	r3, #3
 800d20e:	d149      	bne.n	800d2a4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d212:	3330      	adds	r3, #48	; 0x30
 800d214:	3330      	adds	r3, #48	; 0x30
 800d216:	4618      	mov	r0, r3
 800d218:	f7fe fb3a 	bl	800b890 <ld_word>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d140      	bne.n	800d2a4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d224:	3301      	adds	r3, #1
 800d226:	4619      	mov	r1, r3
 800d228:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d22a:	f7fe fde1 	bl	800bdf0 <move_window>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d137      	bne.n	800d2a4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d236:	2200      	movs	r2, #0
 800d238:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23c:	3330      	adds	r3, #48	; 0x30
 800d23e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d242:	4618      	mov	r0, r3
 800d244:	f7fe fb24 	bl	800b890 <ld_word>
 800d248:	4603      	mov	r3, r0
 800d24a:	461a      	mov	r2, r3
 800d24c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d250:	429a      	cmp	r2, r3
 800d252:	d127      	bne.n	800d2a4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d256:	3330      	adds	r3, #48	; 0x30
 800d258:	4618      	mov	r0, r3
 800d25a:	f7fe fb31 	bl	800b8c0 <ld_dword>
 800d25e:	4603      	mov	r3, r0
 800d260:	4a1b      	ldr	r2, [pc, #108]	; (800d2d0 <find_volume+0x48c>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d11e      	bne.n	800d2a4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d268:	3330      	adds	r3, #48	; 0x30
 800d26a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fe fb26 	bl	800b8c0 <ld_dword>
 800d274:	4603      	mov	r3, r0
 800d276:	4a17      	ldr	r2, [pc, #92]	; (800d2d4 <find_volume+0x490>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d113      	bne.n	800d2a4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27e:	3330      	adds	r3, #48	; 0x30
 800d280:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d284:	4618      	mov	r0, r3
 800d286:	f7fe fb1b 	bl	800b8c0 <ld_dword>
 800d28a:	4602      	mov	r2, r0
 800d28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d292:	3330      	adds	r3, #48	; 0x30
 800d294:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d298:	4618      	mov	r0, r3
 800d29a:	f7fe fb11 	bl	800b8c0 <ld_dword>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d2aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d2ac:	4b0a      	ldr	r3, [pc, #40]	; (800d2d8 <find_volume+0x494>)
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	4b08      	ldr	r3, [pc, #32]	; (800d2d8 <find_volume+0x494>)
 800d2b6:	801a      	strh	r2, [r3, #0]
 800d2b8:	4b07      	ldr	r3, [pc, #28]	; (800d2d8 <find_volume+0x494>)
 800d2ba:	881a      	ldrh	r2, [r3, #0]
 800d2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2be:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d2c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d2c2:	f7fe fd2d 	bl	800bd20 <clear_lock>
#endif
	return FR_OK;
 800d2c6:	2300      	movs	r3, #0
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3758      	adds	r7, #88	; 0x58
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	41615252 	.word	0x41615252
 800d2d4:	61417272 	.word	0x61417272
 800d2d8:	200004b8 	.word	0x200004b8

0800d2dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d2e6:	2309      	movs	r3, #9
 800d2e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d01c      	beq.n	800d32a <validate+0x4e>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d018      	beq.n	800d32a <validate+0x4e>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d013      	beq.n	800d32a <validate+0x4e>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	889a      	ldrh	r2, [r3, #4]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	88db      	ldrh	r3, [r3, #6]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d10c      	bne.n	800d32a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	785b      	ldrb	r3, [r3, #1]
 800d316:	4618      	mov	r0, r3
 800d318:	f7fe fa1c 	bl	800b754 <disk_status>
 800d31c:	4603      	mov	r3, r0
 800d31e:	f003 0301 	and.w	r3, r3, #1
 800d322:	2b00      	cmp	r3, #0
 800d324:	d101      	bne.n	800d32a <validate+0x4e>
			res = FR_OK;
 800d326:	2300      	movs	r3, #0
 800d328:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d102      	bne.n	800d336 <validate+0x5a>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	e000      	b.n	800d338 <validate+0x5c>
 800d336:	2300      	movs	r3, #0
 800d338:	683a      	ldr	r2, [r7, #0]
 800d33a:	6013      	str	r3, [r2, #0]
	return res;
 800d33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3710      	adds	r7, #16
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
	...

0800d348 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b088      	sub	sp, #32
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	4613      	mov	r3, r2
 800d354:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d35a:	f107 0310 	add.w	r3, r7, #16
 800d35e:	4618      	mov	r0, r3
 800d360:	f7ff fcd5 	bl	800cd0e <get_ldnumber>
 800d364:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d366:	69fb      	ldr	r3, [r7, #28]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	da01      	bge.n	800d370 <f_mount+0x28>
 800d36c:	230b      	movs	r3, #11
 800d36e:	e02b      	b.n	800d3c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d370:	4a17      	ldr	r2, [pc, #92]	; (800d3d0 <f_mount+0x88>)
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d378:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d37a:	69bb      	ldr	r3, [r7, #24]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d005      	beq.n	800d38c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d380:	69b8      	ldr	r0, [r7, #24]
 800d382:	f7fe fccd 	bl	800bd20 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	2200      	movs	r2, #0
 800d38a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d002      	beq.n	800d398 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	490d      	ldr	r1, [pc, #52]	; (800d3d0 <f_mount+0x88>)
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d002      	beq.n	800d3ae <f_mount+0x66>
 800d3a8:	79fb      	ldrb	r3, [r7, #7]
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d001      	beq.n	800d3b2 <f_mount+0x6a>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	e00a      	b.n	800d3c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d3b2:	f107 010c 	add.w	r1, r7, #12
 800d3b6:	f107 0308 	add.w	r3, r7, #8
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff fd41 	bl	800ce44 <find_volume>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d3c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3720      	adds	r7, #32
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	200004b4 	.word	0x200004b4

0800d3d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b098      	sub	sp, #96	; 0x60
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d101      	bne.n	800d3ec <f_open+0x18>
 800d3e8:	2309      	movs	r3, #9
 800d3ea:	e1ad      	b.n	800d748 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d3ec:	79fb      	ldrb	r3, [r7, #7]
 800d3ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d3f4:	79fa      	ldrb	r2, [r7, #7]
 800d3f6:	f107 0110 	add.w	r1, r7, #16
 800d3fa:	f107 0308 	add.w	r3, r7, #8
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7ff fd20 	bl	800ce44 <find_volume>
 800d404:	4603      	mov	r3, r0
 800d406:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d40a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f040 8191 	bne.w	800d736 <f_open+0x362>
		dj.obj.fs = fs;
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d418:	68ba      	ldr	r2, [r7, #8]
 800d41a:	f107 0314 	add.w	r3, r7, #20
 800d41e:	4611      	mov	r1, r2
 800d420:	4618      	mov	r0, r3
 800d422:	f7ff fc03 	bl	800cc2c <follow_path>
 800d426:	4603      	mov	r3, r0
 800d428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d42c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d430:	2b00      	cmp	r3, #0
 800d432:	d11a      	bne.n	800d46a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d434:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d438:	b25b      	sxtb	r3, r3
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	da03      	bge.n	800d446 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d43e:	2306      	movs	r3, #6
 800d440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d444:	e011      	b.n	800d46a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d446:	79fb      	ldrb	r3, [r7, #7]
 800d448:	f023 0301 	bic.w	r3, r3, #1
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	bf14      	ite	ne
 800d450:	2301      	movne	r3, #1
 800d452:	2300      	moveq	r3, #0
 800d454:	b2db      	uxtb	r3, r3
 800d456:	461a      	mov	r2, r3
 800d458:	f107 0314 	add.w	r3, r7, #20
 800d45c:	4611      	mov	r1, r2
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fe fb16 	bl	800ba90 <chk_lock>
 800d464:	4603      	mov	r3, r0
 800d466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d46a:	79fb      	ldrb	r3, [r7, #7]
 800d46c:	f003 031c 	and.w	r3, r3, #28
 800d470:	2b00      	cmp	r3, #0
 800d472:	d07f      	beq.n	800d574 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d017      	beq.n	800d4ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d47c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d480:	2b04      	cmp	r3, #4
 800d482:	d10e      	bne.n	800d4a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d484:	f7fe fb60 	bl	800bb48 <enq_lock>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d006      	beq.n	800d49c <f_open+0xc8>
 800d48e:	f107 0314 	add.w	r3, r7, #20
 800d492:	4618      	mov	r0, r3
 800d494:	f7ff faa4 	bl	800c9e0 <dir_register>
 800d498:	4603      	mov	r3, r0
 800d49a:	e000      	b.n	800d49e <f_open+0xca>
 800d49c:	2312      	movs	r3, #18
 800d49e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d4a2:	79fb      	ldrb	r3, [r7, #7]
 800d4a4:	f043 0308 	orr.w	r3, r3, #8
 800d4a8:	71fb      	strb	r3, [r7, #7]
 800d4aa:	e010      	b.n	800d4ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d4ac:	7ebb      	ldrb	r3, [r7, #26]
 800d4ae:	f003 0311 	and.w	r3, r3, #17
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d003      	beq.n	800d4be <f_open+0xea>
					res = FR_DENIED;
 800d4b6:	2307      	movs	r3, #7
 800d4b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d4bc:	e007      	b.n	800d4ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d4be:	79fb      	ldrb	r3, [r7, #7]
 800d4c0:	f003 0304 	and.w	r3, r3, #4
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d002      	beq.n	800d4ce <f_open+0xfa>
 800d4c8:	2308      	movs	r3, #8
 800d4ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d4ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d168      	bne.n	800d5a8 <f_open+0x1d4>
 800d4d6:	79fb      	ldrb	r3, [r7, #7]
 800d4d8:	f003 0308 	and.w	r3, r3, #8
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d063      	beq.n	800d5a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d4e0:	f7fd fbf8 	bl	800acd4 <get_fattime>
 800d4e4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e8:	330e      	adds	r3, #14
 800d4ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fe fa25 	bl	800b93c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f4:	3316      	adds	r3, #22
 800d4f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7fe fa1f 	bl	800b93c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d500:	330b      	adds	r3, #11
 800d502:	2220      	movs	r2, #32
 800d504:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d50a:	4611      	mov	r1, r2
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7ff f976 	bl	800c7fe <ld_clust>
 800d512:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d518:	2200      	movs	r2, #0
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7ff f98e 	bl	800c83c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d522:	331c      	adds	r3, #28
 800d524:	2100      	movs	r1, #0
 800d526:	4618      	mov	r0, r3
 800d528:	f7fe fa08 	bl	800b93c <st_dword>
					fs->wflag = 1;
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	2201      	movs	r2, #1
 800d530:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d534:	2b00      	cmp	r3, #0
 800d536:	d037      	beq.n	800d5a8 <f_open+0x1d4>
						dw = fs->winsect;
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d53c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d53e:	f107 0314 	add.w	r3, r7, #20
 800d542:	2200      	movs	r2, #0
 800d544:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d546:	4618      	mov	r0, r3
 800d548:	f7fe fea1 	bl	800c28e <remove_chain>
 800d54c:	4603      	mov	r3, r0
 800d54e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d556:	2b00      	cmp	r3, #0
 800d558:	d126      	bne.n	800d5a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fe fc46 	bl	800bdf0 <move_window>
 800d564:	4603      	mov	r3, r0
 800d566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d56e:	3a01      	subs	r2, #1
 800d570:	60da      	str	r2, [r3, #12]
 800d572:	e019      	b.n	800d5a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d115      	bne.n	800d5a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d57c:	7ebb      	ldrb	r3, [r7, #26]
 800d57e:	f003 0310 	and.w	r3, r3, #16
 800d582:	2b00      	cmp	r3, #0
 800d584:	d003      	beq.n	800d58e <f_open+0x1ba>
					res = FR_NO_FILE;
 800d586:	2304      	movs	r3, #4
 800d588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d58c:	e00c      	b.n	800d5a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d58e:	79fb      	ldrb	r3, [r7, #7]
 800d590:	f003 0302 	and.w	r3, r3, #2
 800d594:	2b00      	cmp	r3, #0
 800d596:	d007      	beq.n	800d5a8 <f_open+0x1d4>
 800d598:	7ebb      	ldrb	r3, [r7, #26]
 800d59a:	f003 0301 	and.w	r3, r3, #1
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d002      	beq.n	800d5a8 <f_open+0x1d4>
						res = FR_DENIED;
 800d5a2:	2307      	movs	r3, #7
 800d5a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d5a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d128      	bne.n	800d602 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d5b0:	79fb      	ldrb	r3, [r7, #7]
 800d5b2:	f003 0308 	and.w	r3, r3, #8
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d003      	beq.n	800d5c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d5ba:	79fb      	ldrb	r3, [r7, #7]
 800d5bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d5ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d5d0:	79fb      	ldrb	r3, [r7, #7]
 800d5d2:	f023 0301 	bic.w	r3, r3, #1
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	bf14      	ite	ne
 800d5da:	2301      	movne	r3, #1
 800d5dc:	2300      	moveq	r3, #0
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	f107 0314 	add.w	r3, r7, #20
 800d5e6:	4611      	mov	r1, r2
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7fe facf 	bl	800bb8c <inc_lock>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d102      	bne.n	800d602 <f_open+0x22e>
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d606:	2b00      	cmp	r3, #0
 800d608:	f040 8095 	bne.w	800d736 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d610:	4611      	mov	r1, r2
 800d612:	4618      	mov	r0, r3
 800d614:	f7ff f8f3 	bl	800c7fe <ld_clust>
 800d618:	4602      	mov	r2, r0
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d620:	331c      	adds	r3, #28
 800d622:	4618      	mov	r0, r3
 800d624:	f7fe f94c 	bl	800b8c0 <ld_dword>
 800d628:	4602      	mov	r2, r0
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2200      	movs	r2, #0
 800d632:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d634:	693a      	ldr	r2, [r7, #16]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	88da      	ldrh	r2, [r3, #6]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	79fa      	ldrb	r2, [r7, #7]
 800d646:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2200      	movs	r2, #0
 800d64c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2200      	movs	r2, #0
 800d652:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2200      	movs	r2, #0
 800d658:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	3330      	adds	r3, #48	; 0x30
 800d65e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d662:	2100      	movs	r1, #0
 800d664:	4618      	mov	r0, r3
 800d666:	f7fe f9b6 	bl	800b9d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d66a:	79fb      	ldrb	r3, [r7, #7]
 800d66c:	f003 0320 	and.w	r3, r3, #32
 800d670:	2b00      	cmp	r3, #0
 800d672:	d060      	beq.n	800d736 <f_open+0x362>
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d05c      	beq.n	800d736 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	68da      	ldr	r2, [r3, #12]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	895b      	ldrh	r3, [r3, #10]
 800d688:	025b      	lsls	r3, r3, #9
 800d68a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	657b      	str	r3, [r7, #84]	; 0x54
 800d698:	e016      	b.n	800d6c8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fe fc61 	bl	800bf66 <get_fat>
 800d6a4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d6a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d802      	bhi.n	800d6b2 <f_open+0x2de>
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d6b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b8:	d102      	bne.n	800d6c0 <f_open+0x2ec>
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d6c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6c4:	1ad3      	subs	r3, r2, r3
 800d6c6:	657b      	str	r3, [r7, #84]	; 0x54
 800d6c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d103      	bne.n	800d6d8 <f_open+0x304>
 800d6d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d8e0      	bhi.n	800d69a <f_open+0x2c6>
				}
				fp->clust = clst;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d6de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d127      	bne.n	800d736 <f_open+0x362>
 800d6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d022      	beq.n	800d736 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fe fc17 	bl	800bf28 <clust2sect>
 800d6fa:	6478      	str	r0, [r7, #68]	; 0x44
 800d6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d103      	bne.n	800d70a <f_open+0x336>
						res = FR_INT_ERR;
 800d702:	2302      	movs	r3, #2
 800d704:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d708:	e015      	b.n	800d736 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d70a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d70c:	0a5a      	lsrs	r2, r3, #9
 800d70e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d710:	441a      	add	r2, r3
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	7858      	ldrb	r0, [r3, #1]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6a1a      	ldr	r2, [r3, #32]
 800d724:	2301      	movs	r3, #1
 800d726:	f7fe f855 	bl	800b7d4 <disk_read>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d002      	beq.n	800d736 <f_open+0x362>
 800d730:	2301      	movs	r3, #1
 800d732:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d002      	beq.n	800d744 <f_open+0x370>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2200      	movs	r2, #0
 800d742:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3760      	adds	r7, #96	; 0x60
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b08c      	sub	sp, #48	; 0x30
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	607a      	str	r2, [r7, #4]
 800d75c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	2200      	movs	r2, #0
 800d766:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f107 0210 	add.w	r2, r7, #16
 800d76e:	4611      	mov	r1, r2
 800d770:	4618      	mov	r0, r3
 800d772:	f7ff fdb3 	bl	800d2dc <validate>
 800d776:	4603      	mov	r3, r0
 800d778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d77c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d780:	2b00      	cmp	r3, #0
 800d782:	d107      	bne.n	800d794 <f_write+0x44>
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	7d5b      	ldrb	r3, [r3, #21]
 800d788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d78c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d790:	2b00      	cmp	r3, #0
 800d792:	d002      	beq.n	800d79a <f_write+0x4a>
 800d794:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d798:	e14b      	b.n	800da32 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	7d1b      	ldrb	r3, [r3, #20]
 800d79e:	f003 0302 	and.w	r3, r3, #2
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d101      	bne.n	800d7aa <f_write+0x5a>
 800d7a6:	2307      	movs	r3, #7
 800d7a8:	e143      	b.n	800da32 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	699a      	ldr	r2, [r3, #24]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	441a      	add	r2, r3
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	699b      	ldr	r3, [r3, #24]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	f080 812d 	bcs.w	800da16 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	699b      	ldr	r3, [r3, #24]
 800d7c0:	43db      	mvns	r3, r3
 800d7c2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d7c4:	e127      	b.n	800da16 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	699b      	ldr	r3, [r3, #24]
 800d7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	f040 80e3 	bne.w	800d99a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	699b      	ldr	r3, [r3, #24]
 800d7d8:	0a5b      	lsrs	r3, r3, #9
 800d7da:	693a      	ldr	r2, [r7, #16]
 800d7dc:	8952      	ldrh	r2, [r2, #10]
 800d7de:	3a01      	subs	r2, #1
 800d7e0:	4013      	ands	r3, r2
 800d7e2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d143      	bne.n	800d872 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10c      	bne.n	800d80c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d11a      	bne.n	800d834 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2100      	movs	r1, #0
 800d802:	4618      	mov	r0, r3
 800d804:	f7fe fda8 	bl	800c358 <create_chain>
 800d808:	62b8      	str	r0, [r7, #40]	; 0x28
 800d80a:	e013      	b.n	800d834 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d810:	2b00      	cmp	r3, #0
 800d812:	d007      	beq.n	800d824 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	699b      	ldr	r3, [r3, #24]
 800d818:	4619      	mov	r1, r3
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f7fe fe34 	bl	800c488 <clmt_clust>
 800d820:	62b8      	str	r0, [r7, #40]	; 0x28
 800d822:	e007      	b.n	800d834 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	69db      	ldr	r3, [r3, #28]
 800d82a:	4619      	mov	r1, r3
 800d82c:	4610      	mov	r0, r2
 800d82e:	f7fe fd93 	bl	800c358 <create_chain>
 800d832:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d836:	2b00      	cmp	r3, #0
 800d838:	f000 80f2 	beq.w	800da20 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d104      	bne.n	800d84c <f_write+0xfc>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2202      	movs	r2, #2
 800d846:	755a      	strb	r2, [r3, #21]
 800d848:	2302      	movs	r3, #2
 800d84a:	e0f2      	b.n	800da32 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d852:	d104      	bne.n	800d85e <f_write+0x10e>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2201      	movs	r2, #1
 800d858:	755a      	strb	r2, [r3, #21]
 800d85a:	2301      	movs	r3, #1
 800d85c:	e0e9      	b.n	800da32 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d862:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d102      	bne.n	800d872 <f_write+0x122>
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d870:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	7d1b      	ldrb	r3, [r3, #20]
 800d876:	b25b      	sxtb	r3, r3
 800d878:	2b00      	cmp	r3, #0
 800d87a:	da18      	bge.n	800d8ae <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	7858      	ldrb	r0, [r3, #1]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6a1a      	ldr	r2, [r3, #32]
 800d88a:	2301      	movs	r3, #1
 800d88c:	f7fd ffc2 	bl	800b814 <disk_write>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d004      	beq.n	800d8a0 <f_write+0x150>
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2201      	movs	r2, #1
 800d89a:	755a      	strb	r2, [r3, #21]
 800d89c:	2301      	movs	r3, #1
 800d89e:	e0c8      	b.n	800da32 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	7d1b      	ldrb	r3, [r3, #20]
 800d8a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d8ae:	693a      	ldr	r2, [r7, #16]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	69db      	ldr	r3, [r3, #28]
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	4610      	mov	r0, r2
 800d8b8:	f7fe fb36 	bl	800bf28 <clust2sect>
 800d8bc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d104      	bne.n	800d8ce <f_write+0x17e>
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2202      	movs	r2, #2
 800d8c8:	755a      	strb	r2, [r3, #21]
 800d8ca:	2302      	movs	r3, #2
 800d8cc:	e0b1      	b.n	800da32 <f_write+0x2e2>
			sect += csect;
 800d8ce:	697a      	ldr	r2, [r7, #20]
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	0a5b      	lsrs	r3, r3, #9
 800d8da:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d8dc:	6a3b      	ldr	r3, [r7, #32]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d03c      	beq.n	800d95c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d8e2:	69ba      	ldr	r2, [r7, #24]
 800d8e4:	6a3b      	ldr	r3, [r7, #32]
 800d8e6:	4413      	add	r3, r2
 800d8e8:	693a      	ldr	r2, [r7, #16]
 800d8ea:	8952      	ldrh	r2, [r2, #10]
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d905      	bls.n	800d8fc <f_write+0x1ac>
					cc = fs->csize - csect;
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	895b      	ldrh	r3, [r3, #10]
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	69bb      	ldr	r3, [r7, #24]
 800d8f8:	1ad3      	subs	r3, r2, r3
 800d8fa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	7858      	ldrb	r0, [r3, #1]
 800d900:	6a3b      	ldr	r3, [r7, #32]
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	69f9      	ldr	r1, [r7, #28]
 800d906:	f7fd ff85 	bl	800b814 <disk_write>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d004      	beq.n	800d91a <f_write+0x1ca>
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2201      	movs	r2, #1
 800d914:	755a      	strb	r2, [r3, #21]
 800d916:	2301      	movs	r3, #1
 800d918:	e08b      	b.n	800da32 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	6a1a      	ldr	r2, [r3, #32]
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	1ad3      	subs	r3, r2, r3
 800d922:	6a3a      	ldr	r2, [r7, #32]
 800d924:	429a      	cmp	r2, r3
 800d926:	d915      	bls.n	800d954 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6a1a      	ldr	r2, [r3, #32]
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	1ad3      	subs	r3, r2, r3
 800d936:	025b      	lsls	r3, r3, #9
 800d938:	69fa      	ldr	r2, [r7, #28]
 800d93a:	4413      	add	r3, r2
 800d93c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d940:	4619      	mov	r1, r3
 800d942:	f7fe f827 	bl	800b994 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	7d1b      	ldrb	r3, [r3, #20]
 800d94a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d94e:	b2da      	uxtb	r2, r3
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d954:	6a3b      	ldr	r3, [r7, #32]
 800d956:	025b      	lsls	r3, r3, #9
 800d958:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d95a:	e03f      	b.n	800d9dc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6a1b      	ldr	r3, [r3, #32]
 800d960:	697a      	ldr	r2, [r7, #20]
 800d962:	429a      	cmp	r2, r3
 800d964:	d016      	beq.n	800d994 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	699a      	ldr	r2, [r3, #24]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d96e:	429a      	cmp	r2, r3
 800d970:	d210      	bcs.n	800d994 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	7858      	ldrb	r0, [r3, #1]
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d97c:	2301      	movs	r3, #1
 800d97e:	697a      	ldr	r2, [r7, #20]
 800d980:	f7fd ff28 	bl	800b7d4 <disk_read>
 800d984:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d986:	2b00      	cmp	r3, #0
 800d988:	d004      	beq.n	800d994 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2201      	movs	r2, #1
 800d98e:	755a      	strb	r2, [r3, #21]
 800d990:	2301      	movs	r3, #1
 800d992:	e04e      	b.n	800da32 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	699b      	ldr	r3, [r3, #24]
 800d99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9a2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d9a6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d901      	bls.n	800d9b4 <f_write+0x264>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	699b      	ldr	r3, [r3, #24]
 800d9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9c2:	4413      	add	r3, r2
 800d9c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9c6:	69f9      	ldr	r1, [r7, #28]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7fd ffe3 	bl	800b994 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	7d1b      	ldrb	r3, [r3, #20]
 800d9d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d9dc:	69fa      	ldr	r2, [r7, #28]
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e0:	4413      	add	r3, r2
 800d9e2:	61fb      	str	r3, [r7, #28]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	699a      	ldr	r2, [r3, #24]
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ea:	441a      	add	r2, r3
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	619a      	str	r2, [r3, #24]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	68da      	ldr	r2, [r3, #12]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	699b      	ldr	r3, [r3, #24]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	bf38      	it	cc
 800d9fc:	461a      	movcc	r2, r3
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	60da      	str	r2, [r3, #12]
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da08:	441a      	add	r2, r3
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	601a      	str	r2, [r3, #0]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f47f aed4 	bne.w	800d7c6 <f_write+0x76>
 800da1e:	e000      	b.n	800da22 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800da20:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	7d1b      	ldrb	r3, [r3, #20]
 800da26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3730      	adds	r7, #48	; 0x30
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b086      	sub	sp, #24
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f107 0208 	add.w	r2, r7, #8
 800da48:	4611      	mov	r1, r2
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7ff fc46 	bl	800d2dc <validate>
 800da50:	4603      	mov	r3, r0
 800da52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800da54:	7dfb      	ldrb	r3, [r7, #23]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d168      	bne.n	800db2c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	7d1b      	ldrb	r3, [r3, #20]
 800da5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da62:	2b00      	cmp	r3, #0
 800da64:	d062      	beq.n	800db2c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	7d1b      	ldrb	r3, [r3, #20]
 800da6a:	b25b      	sxtb	r3, r3
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	da15      	bge.n	800da9c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	7858      	ldrb	r0, [r3, #1]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6a1a      	ldr	r2, [r3, #32]
 800da7e:	2301      	movs	r3, #1
 800da80:	f7fd fec8 	bl	800b814 <disk_write>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d001      	beq.n	800da8e <f_sync+0x54>
 800da8a:	2301      	movs	r3, #1
 800da8c:	e04f      	b.n	800db2e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	7d1b      	ldrb	r3, [r3, #20]
 800da92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da96:	b2da      	uxtb	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800da9c:	f7fd f91a 	bl	800acd4 <get_fattime>
 800daa0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800daa2:	68ba      	ldr	r2, [r7, #8]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa8:	4619      	mov	r1, r3
 800daaa:	4610      	mov	r0, r2
 800daac:	f7fe f9a0 	bl	800bdf0 <move_window>
 800dab0:	4603      	mov	r3, r0
 800dab2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dab4:	7dfb      	ldrb	r3, [r7, #23]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d138      	bne.n	800db2c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dabe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	330b      	adds	r3, #11
 800dac4:	781a      	ldrb	r2, [r3, #0]
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	330b      	adds	r3, #11
 800daca:	f042 0220 	orr.w	r2, r2, #32
 800dace:	b2d2      	uxtb	r2, r2
 800dad0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6818      	ldr	r0, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	461a      	mov	r2, r3
 800dadc:	68f9      	ldr	r1, [r7, #12]
 800dade:	f7fe fead 	bl	800c83c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f103 021c 	add.w	r2, r3, #28
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	4619      	mov	r1, r3
 800daee:	4610      	mov	r0, r2
 800daf0:	f7fd ff24 	bl	800b93c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	3316      	adds	r3, #22
 800daf8:	6939      	ldr	r1, [r7, #16]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fd ff1e 	bl	800b93c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	3312      	adds	r3, #18
 800db04:	2100      	movs	r1, #0
 800db06:	4618      	mov	r0, r3
 800db08:	f7fd fefd 	bl	800b906 <st_word>
					fs->wflag = 1;
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	2201      	movs	r2, #1
 800db10:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	4618      	mov	r0, r3
 800db16:	f7fe f999 	bl	800be4c <sync_fs>
 800db1a:	4603      	mov	r3, r0
 800db1c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	7d1b      	ldrb	r3, [r3, #20]
 800db22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db26:	b2da      	uxtb	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800db2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3718      	adds	r7, #24
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b084      	sub	sp, #16
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7ff ff7b 	bl	800da3a <f_sync>
 800db44:	4603      	mov	r3, r0
 800db46:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800db48:	7bfb      	ldrb	r3, [r7, #15]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d118      	bne.n	800db80 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f107 0208 	add.w	r2, r7, #8
 800db54:	4611      	mov	r1, r2
 800db56:	4618      	mov	r0, r3
 800db58:	f7ff fbc0 	bl	800d2dc <validate>
 800db5c:	4603      	mov	r3, r0
 800db5e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800db60:	7bfb      	ldrb	r3, [r7, #15]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10c      	bne.n	800db80 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fe f89c 	bl	800bca8 <dec_lock>
 800db70:	4603      	mov	r3, r0
 800db72:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800db74:	7bfb      	ldrb	r3, [r7, #15]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d102      	bne.n	800db80 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800db80:	7bfb      	ldrb	r3, [r7, #15]
}
 800db82:	4618      	mov	r0, r3
 800db84:	3710      	adds	r7, #16
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b090      	sub	sp, #64	; 0x40
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f107 0208 	add.w	r2, r7, #8
 800db9a:	4611      	mov	r1, r2
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7ff fb9d 	bl	800d2dc <validate>
 800dba2:	4603      	mov	r3, r0
 800dba4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800dba8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d103      	bne.n	800dbb8 <f_lseek+0x2e>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	7d5b      	ldrb	r3, [r3, #21]
 800dbb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800dbb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d002      	beq.n	800dbc6 <f_lseek+0x3c>
 800dbc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dbc4:	e1e6      	b.n	800df94 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f000 80d1 	beq.w	800dd72 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd6:	d15a      	bne.n	800dc8e <f_lseek+0x104>
			tbl = fp->cltbl;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbdc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800dbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe0:	1d1a      	adds	r2, r3, #4
 800dbe2:	627a      	str	r2, [r7, #36]	; 0x24
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	617b      	str	r3, [r7, #20]
 800dbe8:	2302      	movs	r3, #2
 800dbea:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	689b      	ldr	r3, [r3, #8]
 800dbf0:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800dbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d03a      	beq.n	800dc6e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800dbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfa:	613b      	str	r3, [r7, #16]
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc02:	3302      	adds	r3, #2
 800dc04:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800dc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc08:	60fb      	str	r3, [r7, #12]
 800dc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7fe f9a6 	bl	800bf66 <get_fat>
 800dc1a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d804      	bhi.n	800dc2c <f_lseek+0xa2>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2202      	movs	r2, #2
 800dc26:	755a      	strb	r2, [r3, #21]
 800dc28:	2302      	movs	r3, #2
 800dc2a:	e1b3      	b.n	800df94 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc32:	d104      	bne.n	800dc3e <f_lseek+0xb4>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2201      	movs	r2, #1
 800dc38:	755a      	strb	r2, [r3, #21]
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	e1aa      	b.n	800df94 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	3301      	adds	r3, #1
 800dc42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d0de      	beq.n	800dc06 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dc48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d809      	bhi.n	800dc64 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	1d1a      	adds	r2, r3, #4
 800dc54:	627a      	str	r2, [r7, #36]	; 0x24
 800dc56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc58:	601a      	str	r2, [r3, #0]
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5c:	1d1a      	adds	r2, r3, #4
 800dc5e:	627a      	str	r2, [r7, #36]	; 0x24
 800dc60:	693a      	ldr	r2, [r7, #16]
 800dc62:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	695b      	ldr	r3, [r3, #20]
 800dc68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d3c4      	bcc.n	800dbf8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc74:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800dc76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d803      	bhi.n	800dc86 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc80:	2200      	movs	r2, #0
 800dc82:	601a      	str	r2, [r3, #0]
 800dc84:	e184      	b.n	800df90 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800dc86:	2311      	movs	r3, #17
 800dc88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dc8c:	e180      	b.n	800df90 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	683a      	ldr	r2, [r7, #0]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d902      	bls.n	800dc9e <f_lseek+0x114>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	683a      	ldr	r2, [r7, #0]
 800dca2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f000 8172 	beq.w	800df90 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f7fe fbe8 	bl	800c488 <clmt_clust>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	69db      	ldr	r3, [r3, #28]
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	4610      	mov	r0, r2
 800dcc8:	f7fe f92e 	bl	800bf28 <clust2sect>
 800dccc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d104      	bne.n	800dcde <f_lseek+0x154>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2202      	movs	r2, #2
 800dcd8:	755a      	strb	r2, [r3, #21]
 800dcda:	2302      	movs	r3, #2
 800dcdc:	e15a      	b.n	800df94 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	3b01      	subs	r3, #1
 800dce2:	0a5b      	lsrs	r3, r3, #9
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	8952      	ldrh	r2, [r2, #10]
 800dce8:	3a01      	subs	r2, #1
 800dcea:	4013      	ands	r3, r2
 800dcec:	69ba      	ldr	r2, [r7, #24]
 800dcee:	4413      	add	r3, r2
 800dcf0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	699b      	ldr	r3, [r3, #24]
 800dcf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f000 8148 	beq.w	800df90 <f_lseek+0x406>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6a1b      	ldr	r3, [r3, #32]
 800dd04:	69ba      	ldr	r2, [r7, #24]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	f000 8142 	beq.w	800df90 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	7d1b      	ldrb	r3, [r3, #20]
 800dd10:	b25b      	sxtb	r3, r3
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	da18      	bge.n	800dd48 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	7858      	ldrb	r0, [r3, #1]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6a1a      	ldr	r2, [r3, #32]
 800dd24:	2301      	movs	r3, #1
 800dd26:	f7fd fd75 	bl	800b814 <disk_write>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d004      	beq.n	800dd3a <f_lseek+0x1b0>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2201      	movs	r2, #1
 800dd34:	755a      	strb	r2, [r3, #21]
 800dd36:	2301      	movs	r3, #1
 800dd38:	e12c      	b.n	800df94 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	7d1b      	ldrb	r3, [r3, #20]
 800dd3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	7858      	ldrb	r0, [r3, #1]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd52:	2301      	movs	r3, #1
 800dd54:	69ba      	ldr	r2, [r7, #24]
 800dd56:	f7fd fd3d 	bl	800b7d4 <disk_read>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d004      	beq.n	800dd6a <f_lseek+0x1e0>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2201      	movs	r2, #1
 800dd64:	755a      	strb	r2, [r3, #21]
 800dd66:	2301      	movs	r3, #1
 800dd68:	e114      	b.n	800df94 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	69ba      	ldr	r2, [r7, #24]
 800dd6e:	621a      	str	r2, [r3, #32]
 800dd70:	e10e      	b.n	800df90 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d908      	bls.n	800dd8e <f_lseek+0x204>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	7d1b      	ldrb	r3, [r3, #20]
 800dd80:	f003 0302 	and.w	r3, r3, #2
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d102      	bne.n	800dd8e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	699b      	ldr	r3, [r3, #24]
 800dd92:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dd94:	2300      	movs	r3, #0
 800dd96:	637b      	str	r3, [r7, #52]	; 0x34
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd9c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f000 80a7 	beq.w	800def4 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	895b      	ldrh	r3, [r3, #10]
 800ddaa:	025b      	lsls	r3, r3, #9
 800ddac:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ddae:	6a3b      	ldr	r3, [r7, #32]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d01b      	beq.n	800ddec <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	1e5a      	subs	r2, r3, #1
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	fbb2 f2f3 	udiv	r2, r2, r3
 800ddbe:	6a3b      	ldr	r3, [r7, #32]
 800ddc0:	1e59      	subs	r1, r3, #1
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d30f      	bcc.n	800ddec <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ddcc:	6a3b      	ldr	r3, [r7, #32]
 800ddce:	1e5a      	subs	r2, r3, #1
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	425b      	negs	r3, r3
 800ddd4:	401a      	ands	r2, r3
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	699b      	ldr	r3, [r3, #24]
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	69db      	ldr	r3, [r3, #28]
 800dde8:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddea:	e022      	b.n	800de32 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	689b      	ldr	r3, [r3, #8]
 800ddf0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ddf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d119      	bne.n	800de2c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7fe faab 	bl	800c358 <create_chain>
 800de02:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800de04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de06:	2b01      	cmp	r3, #1
 800de08:	d104      	bne.n	800de14 <f_lseek+0x28a>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2202      	movs	r2, #2
 800de0e:	755a      	strb	r2, [r3, #21]
 800de10:	2302      	movs	r3, #2
 800de12:	e0bf      	b.n	800df94 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de1a:	d104      	bne.n	800de26 <f_lseek+0x29c>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	755a      	strb	r2, [r3, #21]
 800de22:	2301      	movs	r3, #1
 800de24:	e0b6      	b.n	800df94 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de2a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de30:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800de32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de34:	2b00      	cmp	r3, #0
 800de36:	d05d      	beq.n	800def4 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800de38:	e03a      	b.n	800deb0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800de3a:	683a      	ldr	r2, [r7, #0]
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	1ad3      	subs	r3, r2, r3
 800de40:	603b      	str	r3, [r7, #0]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	699a      	ldr	r2, [r3, #24]
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	441a      	add	r2, r3
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	7d1b      	ldrb	r3, [r3, #20]
 800de52:	f003 0302 	and.w	r3, r3, #2
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00b      	beq.n	800de72 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de5e:	4618      	mov	r0, r3
 800de60:	f7fe fa7a 	bl	800c358 <create_chain>
 800de64:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800de66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d108      	bne.n	800de7e <f_lseek+0x2f4>
							ofs = 0; break;
 800de6c:	2300      	movs	r3, #0
 800de6e:	603b      	str	r3, [r7, #0]
 800de70:	e022      	b.n	800deb8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de76:	4618      	mov	r0, r3
 800de78:	f7fe f875 	bl	800bf66 <get_fat>
 800de7c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de84:	d104      	bne.n	800de90 <f_lseek+0x306>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2201      	movs	r2, #1
 800de8a:	755a      	strb	r2, [r3, #21]
 800de8c:	2301      	movs	r3, #1
 800de8e:	e081      	b.n	800df94 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800de90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de92:	2b01      	cmp	r3, #1
 800de94:	d904      	bls.n	800dea0 <f_lseek+0x316>
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d304      	bcc.n	800deaa <f_lseek+0x320>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2202      	movs	r2, #2
 800dea4:	755a      	strb	r2, [r3, #21]
 800dea6:	2302      	movs	r3, #2
 800dea8:	e074      	b.n	800df94 <f_lseek+0x40a>
					fp->clust = clst;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800deae:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800deb0:	683a      	ldr	r2, [r7, #0]
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d8c0      	bhi.n	800de3a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	699a      	ldr	r2, [r3, #24]
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	441a      	add	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deca:	2b00      	cmp	r3, #0
 800decc:	d012      	beq.n	800def4 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fe f828 	bl	800bf28 <clust2sect>
 800ded8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800deda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d104      	bne.n	800deea <f_lseek+0x360>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2202      	movs	r2, #2
 800dee4:	755a      	strb	r2, [r3, #21]
 800dee6:	2302      	movs	r3, #2
 800dee8:	e054      	b.n	800df94 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	0a5b      	lsrs	r3, r3, #9
 800deee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800def0:	4413      	add	r3, r2
 800def2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	699a      	ldr	r2, [r3, #24]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	429a      	cmp	r2, r3
 800defe:	d90a      	bls.n	800df16 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	699a      	ldr	r2, [r3, #24]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	7d1b      	ldrb	r3, [r3, #20]
 800df0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df10:	b2da      	uxtb	r2, r3
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	699b      	ldr	r3, [r3, #24]
 800df1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d036      	beq.n	800df90 <f_lseek+0x406>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6a1b      	ldr	r3, [r3, #32]
 800df26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df28:	429a      	cmp	r2, r3
 800df2a:	d031      	beq.n	800df90 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	7d1b      	ldrb	r3, [r3, #20]
 800df30:	b25b      	sxtb	r3, r3
 800df32:	2b00      	cmp	r3, #0
 800df34:	da18      	bge.n	800df68 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	7858      	ldrb	r0, [r3, #1]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a1a      	ldr	r2, [r3, #32]
 800df44:	2301      	movs	r3, #1
 800df46:	f7fd fc65 	bl	800b814 <disk_write>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d004      	beq.n	800df5a <f_lseek+0x3d0>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2201      	movs	r2, #1
 800df54:	755a      	strb	r2, [r3, #21]
 800df56:	2301      	movs	r3, #1
 800df58:	e01c      	b.n	800df94 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	7d1b      	ldrb	r3, [r3, #20]
 800df5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df62:	b2da      	uxtb	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	7858      	ldrb	r0, [r3, #1]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df72:	2301      	movs	r3, #1
 800df74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df76:	f7fd fc2d 	bl	800b7d4 <disk_read>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d004      	beq.n	800df8a <f_lseek+0x400>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2201      	movs	r2, #1
 800df84:	755a      	strb	r2, [r3, #21]
 800df86:	2301      	movs	r3, #1
 800df88:	e004      	b.n	800df94 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df8e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800df90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800df94:	4618      	mov	r0, r3
 800df96:	3740      	adds	r7, #64	; 0x40
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b086      	sub	sp, #24
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d101      	bne.n	800dfb0 <f_opendir+0x14>
 800dfac:	2309      	movs	r3, #9
 800dfae:	e064      	b.n	800e07a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800dfb4:	f107 010c 	add.w	r1, r7, #12
 800dfb8:	463b      	mov	r3, r7
 800dfba:	2200      	movs	r2, #0
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7fe ff41 	bl	800ce44 <find_volume>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dfc6:	7dfb      	ldrb	r3, [r7, #23]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d14f      	bne.n	800e06c <f_opendir+0xd0>
		obj->fs = fs;
 800dfcc:	68fa      	ldr	r2, [r7, #12]
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f7fe fe28 	bl	800cc2c <follow_path>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800dfe0:	7dfb      	ldrb	r3, [r7, #23]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d13d      	bne.n	800e062 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dfec:	b25b      	sxtb	r3, r3
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	db12      	blt.n	800e018 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	799b      	ldrb	r3, [r3, #6]
 800dff6:	f003 0310 	and.w	r3, r3, #16
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d00a      	beq.n	800e014 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6a1b      	ldr	r3, [r3, #32]
 800e004:	4619      	mov	r1, r3
 800e006:	4610      	mov	r0, r2
 800e008:	f7fe fbf9 	bl	800c7fe <ld_clust>
 800e00c:	4602      	mov	r2, r0
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	609a      	str	r2, [r3, #8]
 800e012:	e001      	b.n	800e018 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e014:	2305      	movs	r3, #5
 800e016:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e018:	7dfb      	ldrb	r3, [r7, #23]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d121      	bne.n	800e062 <f_opendir+0xc6>
				obj->id = fs->id;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	88da      	ldrh	r2, [r3, #6]
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e026:	2100      	movs	r1, #0
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f7fe fa61 	bl	800c4f0 <dir_sdi>
 800e02e:	4603      	mov	r3, r0
 800e030:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e032:	7dfb      	ldrb	r3, [r7, #23]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d114      	bne.n	800e062 <f_opendir+0xc6>
					if (obj->sclust) {
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00d      	beq.n	800e05c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e040:	2100      	movs	r1, #0
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f7fd fda2 	bl	800bb8c <inc_lock>
 800e048:	4602      	mov	r2, r0
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	691b      	ldr	r3, [r3, #16]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d105      	bne.n	800e062 <f_opendir+0xc6>
 800e056:	2312      	movs	r3, #18
 800e058:	75fb      	strb	r3, [r7, #23]
 800e05a:	e002      	b.n	800e062 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	2200      	movs	r2, #0
 800e060:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e062:	7dfb      	ldrb	r3, [r7, #23]
 800e064:	2b04      	cmp	r3, #4
 800e066:	d101      	bne.n	800e06c <f_opendir+0xd0>
 800e068:	2305      	movs	r3, #5
 800e06a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e06c:	7dfb      	ldrb	r3, [r7, #23]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d002      	beq.n	800e078 <f_opendir+0xdc>
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	2200      	movs	r2, #0
 800e076:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e078:	7dfb      	ldrb	r3, [r7, #23]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3718      	adds	r7, #24
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b084      	sub	sp, #16
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f107 0208 	add.w	r2, r7, #8
 800e090:	4611      	mov	r1, r2
 800e092:	4618      	mov	r0, r3
 800e094:	f7ff f922 	bl	800d2dc <validate>
 800e098:	4603      	mov	r3, r0
 800e09a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e09c:	7bfb      	ldrb	r3, [r7, #15]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d110      	bne.n	800e0c4 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d006      	beq.n	800e0b8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	691b      	ldr	r3, [r3, #16]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7fd fdfa 	bl	800bca8 <dec_lock>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e0b8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d102      	bne.n	800e0c4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b084      	sub	sp, #16
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f107 0208 	add.w	r2, r7, #8
 800e0de:	4611      	mov	r1, r2
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7ff f8fb 	bl	800d2dc <validate>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e0ea:	7bfb      	ldrb	r3, [r7, #15]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d126      	bne.n	800e13e <f_readdir+0x70>
		if (!fno) {
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d106      	bne.n	800e104 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7fe f9f9 	bl	800c4f0 <dir_sdi>
 800e0fe:	4603      	mov	r3, r0
 800e100:	73fb      	strb	r3, [r7, #15]
 800e102:	e01c      	b.n	800e13e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e104:	2100      	movs	r1, #0
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f7fe fbb8 	bl	800c87c <dir_read>
 800e10c:	4603      	mov	r3, r0
 800e10e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e110:	7bfb      	ldrb	r3, [r7, #15]
 800e112:	2b04      	cmp	r3, #4
 800e114:	d101      	bne.n	800e11a <f_readdir+0x4c>
 800e116:	2300      	movs	r3, #0
 800e118:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e11a:	7bfb      	ldrb	r3, [r7, #15]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10e      	bne.n	800e13e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e120:	6839      	ldr	r1, [r7, #0]
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f7fe fc8e 	bl	800ca44 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e128:	2100      	movs	r1, #0
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f7fe fa5b 	bl	800c5e6 <dir_next>
 800e130:	4603      	mov	r3, r0
 800e132:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e134:	7bfb      	ldrb	r3, [r7, #15]
 800e136:	2b04      	cmp	r3, #4
 800e138:	d101      	bne.n	800e13e <f_readdir+0x70>
 800e13a:	2300      	movs	r3, #0
 800e13c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e140:	4618      	mov	r0, r3
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e148:	b480      	push	{r7}
 800e14a:	b087      	sub	sp, #28
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	4613      	mov	r3, r2
 800e154:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e156:	2301      	movs	r3, #1
 800e158:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e15a:	2300      	movs	r3, #0
 800e15c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e15e:	4b1f      	ldr	r3, [pc, #124]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e160:	7a5b      	ldrb	r3, [r3, #9]
 800e162:	b2db      	uxtb	r3, r3
 800e164:	2b00      	cmp	r3, #0
 800e166:	d131      	bne.n	800e1cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e168:	4b1c      	ldr	r3, [pc, #112]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e16a:	7a5b      	ldrb	r3, [r3, #9]
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	461a      	mov	r2, r3
 800e170:	4b1a      	ldr	r3, [pc, #104]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e172:	2100      	movs	r1, #0
 800e174:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e176:	4b19      	ldr	r3, [pc, #100]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e178:	7a5b      	ldrb	r3, [r3, #9]
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	4a17      	ldr	r2, [pc, #92]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	4413      	add	r3, r2
 800e182:	68fa      	ldr	r2, [r7, #12]
 800e184:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e186:	4b15      	ldr	r3, [pc, #84]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e188:	7a5b      	ldrb	r3, [r3, #9]
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	461a      	mov	r2, r3
 800e18e:	4b13      	ldr	r3, [pc, #76]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e190:	4413      	add	r3, r2
 800e192:	79fa      	ldrb	r2, [r7, #7]
 800e194:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e196:	4b11      	ldr	r3, [pc, #68]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e198:	7a5b      	ldrb	r3, [r3, #9]
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	1c5a      	adds	r2, r3, #1
 800e19e:	b2d1      	uxtb	r1, r2
 800e1a0:	4a0e      	ldr	r2, [pc, #56]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e1a2:	7251      	strb	r1, [r2, #9]
 800e1a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e1a6:	7dbb      	ldrb	r3, [r7, #22]
 800e1a8:	3330      	adds	r3, #48	; 0x30
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	223a      	movs	r2, #58	; 0x3a
 800e1b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	3302      	adds	r3, #2
 800e1bc:	222f      	movs	r2, #47	; 0x2f
 800e1be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	3303      	adds	r3, #3
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	371c      	adds	r7, #28
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop
 800e1dc:	200004dc 	.word	0x200004dc

0800e1e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	6839      	ldr	r1, [r7, #0]
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7ff ffaa 	bl	800e148 <FATFS_LinkDriverEx>
 800e1f4:	4603      	mov	r3, r0
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3708      	adds	r7, #8
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
	...

0800e200 <__errno>:
 800e200:	4b01      	ldr	r3, [pc, #4]	; (800e208 <__errno+0x8>)
 800e202:	6818      	ldr	r0, [r3, #0]
 800e204:	4770      	bx	lr
 800e206:	bf00      	nop
 800e208:	20000028 	.word	0x20000028

0800e20c <__libc_init_array>:
 800e20c:	b570      	push	{r4, r5, r6, lr}
 800e20e:	4d0d      	ldr	r5, [pc, #52]	; (800e244 <__libc_init_array+0x38>)
 800e210:	4c0d      	ldr	r4, [pc, #52]	; (800e248 <__libc_init_array+0x3c>)
 800e212:	1b64      	subs	r4, r4, r5
 800e214:	10a4      	asrs	r4, r4, #2
 800e216:	2600      	movs	r6, #0
 800e218:	42a6      	cmp	r6, r4
 800e21a:	d109      	bne.n	800e230 <__libc_init_array+0x24>
 800e21c:	4d0b      	ldr	r5, [pc, #44]	; (800e24c <__libc_init_array+0x40>)
 800e21e:	4c0c      	ldr	r4, [pc, #48]	; (800e250 <__libc_init_array+0x44>)
 800e220:	f006 f884 	bl	801432c <_init>
 800e224:	1b64      	subs	r4, r4, r5
 800e226:	10a4      	asrs	r4, r4, #2
 800e228:	2600      	movs	r6, #0
 800e22a:	42a6      	cmp	r6, r4
 800e22c:	d105      	bne.n	800e23a <__libc_init_array+0x2e>
 800e22e:	bd70      	pop	{r4, r5, r6, pc}
 800e230:	f855 3b04 	ldr.w	r3, [r5], #4
 800e234:	4798      	blx	r3
 800e236:	3601      	adds	r6, #1
 800e238:	e7ee      	b.n	800e218 <__libc_init_array+0xc>
 800e23a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e23e:	4798      	blx	r3
 800e240:	3601      	adds	r6, #1
 800e242:	e7f2      	b.n	800e22a <__libc_init_array+0x1e>
 800e244:	08014c70 	.word	0x08014c70
 800e248:	08014c70 	.word	0x08014c70
 800e24c:	08014c70 	.word	0x08014c70
 800e250:	08014c74 	.word	0x08014c74

0800e254 <malloc>:
 800e254:	4b02      	ldr	r3, [pc, #8]	; (800e260 <malloc+0xc>)
 800e256:	4601      	mov	r1, r0
 800e258:	6818      	ldr	r0, [r3, #0]
 800e25a:	f000 b869 	b.w	800e330 <_malloc_r>
 800e25e:	bf00      	nop
 800e260:	20000028 	.word	0x20000028

0800e264 <memcpy>:
 800e264:	440a      	add	r2, r1
 800e266:	4291      	cmp	r1, r2
 800e268:	f100 33ff 	add.w	r3, r0, #4294967295
 800e26c:	d100      	bne.n	800e270 <memcpy+0xc>
 800e26e:	4770      	bx	lr
 800e270:	b510      	push	{r4, lr}
 800e272:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e27a:	4291      	cmp	r1, r2
 800e27c:	d1f9      	bne.n	800e272 <memcpy+0xe>
 800e27e:	bd10      	pop	{r4, pc}

0800e280 <memset>:
 800e280:	4402      	add	r2, r0
 800e282:	4603      	mov	r3, r0
 800e284:	4293      	cmp	r3, r2
 800e286:	d100      	bne.n	800e28a <memset+0xa>
 800e288:	4770      	bx	lr
 800e28a:	f803 1b01 	strb.w	r1, [r3], #1
 800e28e:	e7f9      	b.n	800e284 <memset+0x4>

0800e290 <_free_r>:
 800e290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e292:	2900      	cmp	r1, #0
 800e294:	d048      	beq.n	800e328 <_free_r+0x98>
 800e296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e29a:	9001      	str	r0, [sp, #4]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f1a1 0404 	sub.w	r4, r1, #4
 800e2a2:	bfb8      	it	lt
 800e2a4:	18e4      	addlt	r4, r4, r3
 800e2a6:	f003 fbed 	bl	8011a84 <__malloc_lock>
 800e2aa:	4a20      	ldr	r2, [pc, #128]	; (800e32c <_free_r+0x9c>)
 800e2ac:	9801      	ldr	r0, [sp, #4]
 800e2ae:	6813      	ldr	r3, [r2, #0]
 800e2b0:	4615      	mov	r5, r2
 800e2b2:	b933      	cbnz	r3, 800e2c2 <_free_r+0x32>
 800e2b4:	6063      	str	r3, [r4, #4]
 800e2b6:	6014      	str	r4, [r2, #0]
 800e2b8:	b003      	add	sp, #12
 800e2ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2be:	f003 bbe7 	b.w	8011a90 <__malloc_unlock>
 800e2c2:	42a3      	cmp	r3, r4
 800e2c4:	d90b      	bls.n	800e2de <_free_r+0x4e>
 800e2c6:	6821      	ldr	r1, [r4, #0]
 800e2c8:	1862      	adds	r2, r4, r1
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	bf04      	itt	eq
 800e2ce:	681a      	ldreq	r2, [r3, #0]
 800e2d0:	685b      	ldreq	r3, [r3, #4]
 800e2d2:	6063      	str	r3, [r4, #4]
 800e2d4:	bf04      	itt	eq
 800e2d6:	1852      	addeq	r2, r2, r1
 800e2d8:	6022      	streq	r2, [r4, #0]
 800e2da:	602c      	str	r4, [r5, #0]
 800e2dc:	e7ec      	b.n	800e2b8 <_free_r+0x28>
 800e2de:	461a      	mov	r2, r3
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	b10b      	cbz	r3, 800e2e8 <_free_r+0x58>
 800e2e4:	42a3      	cmp	r3, r4
 800e2e6:	d9fa      	bls.n	800e2de <_free_r+0x4e>
 800e2e8:	6811      	ldr	r1, [r2, #0]
 800e2ea:	1855      	adds	r5, r2, r1
 800e2ec:	42a5      	cmp	r5, r4
 800e2ee:	d10b      	bne.n	800e308 <_free_r+0x78>
 800e2f0:	6824      	ldr	r4, [r4, #0]
 800e2f2:	4421      	add	r1, r4
 800e2f4:	1854      	adds	r4, r2, r1
 800e2f6:	42a3      	cmp	r3, r4
 800e2f8:	6011      	str	r1, [r2, #0]
 800e2fa:	d1dd      	bne.n	800e2b8 <_free_r+0x28>
 800e2fc:	681c      	ldr	r4, [r3, #0]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	6053      	str	r3, [r2, #4]
 800e302:	4421      	add	r1, r4
 800e304:	6011      	str	r1, [r2, #0]
 800e306:	e7d7      	b.n	800e2b8 <_free_r+0x28>
 800e308:	d902      	bls.n	800e310 <_free_r+0x80>
 800e30a:	230c      	movs	r3, #12
 800e30c:	6003      	str	r3, [r0, #0]
 800e30e:	e7d3      	b.n	800e2b8 <_free_r+0x28>
 800e310:	6825      	ldr	r5, [r4, #0]
 800e312:	1961      	adds	r1, r4, r5
 800e314:	428b      	cmp	r3, r1
 800e316:	bf04      	itt	eq
 800e318:	6819      	ldreq	r1, [r3, #0]
 800e31a:	685b      	ldreq	r3, [r3, #4]
 800e31c:	6063      	str	r3, [r4, #4]
 800e31e:	bf04      	itt	eq
 800e320:	1949      	addeq	r1, r1, r5
 800e322:	6021      	streq	r1, [r4, #0]
 800e324:	6054      	str	r4, [r2, #4]
 800e326:	e7c7      	b.n	800e2b8 <_free_r+0x28>
 800e328:	b003      	add	sp, #12
 800e32a:	bd30      	pop	{r4, r5, pc}
 800e32c:	200004e8 	.word	0x200004e8

0800e330 <_malloc_r>:
 800e330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e332:	1ccd      	adds	r5, r1, #3
 800e334:	f025 0503 	bic.w	r5, r5, #3
 800e338:	3508      	adds	r5, #8
 800e33a:	2d0c      	cmp	r5, #12
 800e33c:	bf38      	it	cc
 800e33e:	250c      	movcc	r5, #12
 800e340:	2d00      	cmp	r5, #0
 800e342:	4606      	mov	r6, r0
 800e344:	db01      	blt.n	800e34a <_malloc_r+0x1a>
 800e346:	42a9      	cmp	r1, r5
 800e348:	d903      	bls.n	800e352 <_malloc_r+0x22>
 800e34a:	230c      	movs	r3, #12
 800e34c:	6033      	str	r3, [r6, #0]
 800e34e:	2000      	movs	r0, #0
 800e350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e352:	f003 fb97 	bl	8011a84 <__malloc_lock>
 800e356:	4921      	ldr	r1, [pc, #132]	; (800e3dc <_malloc_r+0xac>)
 800e358:	680a      	ldr	r2, [r1, #0]
 800e35a:	4614      	mov	r4, r2
 800e35c:	b99c      	cbnz	r4, 800e386 <_malloc_r+0x56>
 800e35e:	4f20      	ldr	r7, [pc, #128]	; (800e3e0 <_malloc_r+0xb0>)
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	b923      	cbnz	r3, 800e36e <_malloc_r+0x3e>
 800e364:	4621      	mov	r1, r4
 800e366:	4630      	mov	r0, r6
 800e368:	f000 feb6 	bl	800f0d8 <_sbrk_r>
 800e36c:	6038      	str	r0, [r7, #0]
 800e36e:	4629      	mov	r1, r5
 800e370:	4630      	mov	r0, r6
 800e372:	f000 feb1 	bl	800f0d8 <_sbrk_r>
 800e376:	1c43      	adds	r3, r0, #1
 800e378:	d123      	bne.n	800e3c2 <_malloc_r+0x92>
 800e37a:	230c      	movs	r3, #12
 800e37c:	6033      	str	r3, [r6, #0]
 800e37e:	4630      	mov	r0, r6
 800e380:	f003 fb86 	bl	8011a90 <__malloc_unlock>
 800e384:	e7e3      	b.n	800e34e <_malloc_r+0x1e>
 800e386:	6823      	ldr	r3, [r4, #0]
 800e388:	1b5b      	subs	r3, r3, r5
 800e38a:	d417      	bmi.n	800e3bc <_malloc_r+0x8c>
 800e38c:	2b0b      	cmp	r3, #11
 800e38e:	d903      	bls.n	800e398 <_malloc_r+0x68>
 800e390:	6023      	str	r3, [r4, #0]
 800e392:	441c      	add	r4, r3
 800e394:	6025      	str	r5, [r4, #0]
 800e396:	e004      	b.n	800e3a2 <_malloc_r+0x72>
 800e398:	6863      	ldr	r3, [r4, #4]
 800e39a:	42a2      	cmp	r2, r4
 800e39c:	bf0c      	ite	eq
 800e39e:	600b      	streq	r3, [r1, #0]
 800e3a0:	6053      	strne	r3, [r2, #4]
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	f003 fb74 	bl	8011a90 <__malloc_unlock>
 800e3a8:	f104 000b 	add.w	r0, r4, #11
 800e3ac:	1d23      	adds	r3, r4, #4
 800e3ae:	f020 0007 	bic.w	r0, r0, #7
 800e3b2:	1ac2      	subs	r2, r0, r3
 800e3b4:	d0cc      	beq.n	800e350 <_malloc_r+0x20>
 800e3b6:	1a1b      	subs	r3, r3, r0
 800e3b8:	50a3      	str	r3, [r4, r2]
 800e3ba:	e7c9      	b.n	800e350 <_malloc_r+0x20>
 800e3bc:	4622      	mov	r2, r4
 800e3be:	6864      	ldr	r4, [r4, #4]
 800e3c0:	e7cc      	b.n	800e35c <_malloc_r+0x2c>
 800e3c2:	1cc4      	adds	r4, r0, #3
 800e3c4:	f024 0403 	bic.w	r4, r4, #3
 800e3c8:	42a0      	cmp	r0, r4
 800e3ca:	d0e3      	beq.n	800e394 <_malloc_r+0x64>
 800e3cc:	1a21      	subs	r1, r4, r0
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	f000 fe82 	bl	800f0d8 <_sbrk_r>
 800e3d4:	3001      	adds	r0, #1
 800e3d6:	d1dd      	bne.n	800e394 <_malloc_r+0x64>
 800e3d8:	e7cf      	b.n	800e37a <_malloc_r+0x4a>
 800e3da:	bf00      	nop
 800e3dc:	200004e8 	.word	0x200004e8
 800e3e0:	200004ec 	.word	0x200004ec

0800e3e4 <__cvt>:
 800e3e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e8:	ec55 4b10 	vmov	r4, r5, d0
 800e3ec:	2d00      	cmp	r5, #0
 800e3ee:	460e      	mov	r6, r1
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	462b      	mov	r3, r5
 800e3f4:	bfbb      	ittet	lt
 800e3f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e3fa:	461d      	movlt	r5, r3
 800e3fc:	2300      	movge	r3, #0
 800e3fe:	232d      	movlt	r3, #45	; 0x2d
 800e400:	700b      	strb	r3, [r1, #0]
 800e402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e404:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e408:	4691      	mov	r9, r2
 800e40a:	f023 0820 	bic.w	r8, r3, #32
 800e40e:	bfbc      	itt	lt
 800e410:	4622      	movlt	r2, r4
 800e412:	4614      	movlt	r4, r2
 800e414:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e418:	d005      	beq.n	800e426 <__cvt+0x42>
 800e41a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e41e:	d100      	bne.n	800e422 <__cvt+0x3e>
 800e420:	3601      	adds	r6, #1
 800e422:	2102      	movs	r1, #2
 800e424:	e000      	b.n	800e428 <__cvt+0x44>
 800e426:	2103      	movs	r1, #3
 800e428:	ab03      	add	r3, sp, #12
 800e42a:	9301      	str	r3, [sp, #4]
 800e42c:	ab02      	add	r3, sp, #8
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	ec45 4b10 	vmov	d0, r4, r5
 800e434:	4653      	mov	r3, sl
 800e436:	4632      	mov	r2, r6
 800e438:	f001 ff82 	bl	8010340 <_dtoa_r>
 800e43c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e440:	4607      	mov	r7, r0
 800e442:	d102      	bne.n	800e44a <__cvt+0x66>
 800e444:	f019 0f01 	tst.w	r9, #1
 800e448:	d022      	beq.n	800e490 <__cvt+0xac>
 800e44a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e44e:	eb07 0906 	add.w	r9, r7, r6
 800e452:	d110      	bne.n	800e476 <__cvt+0x92>
 800e454:	783b      	ldrb	r3, [r7, #0]
 800e456:	2b30      	cmp	r3, #48	; 0x30
 800e458:	d10a      	bne.n	800e470 <__cvt+0x8c>
 800e45a:	2200      	movs	r2, #0
 800e45c:	2300      	movs	r3, #0
 800e45e:	4620      	mov	r0, r4
 800e460:	4629      	mov	r1, r5
 800e462:	f7f2 fb51 	bl	8000b08 <__aeabi_dcmpeq>
 800e466:	b918      	cbnz	r0, 800e470 <__cvt+0x8c>
 800e468:	f1c6 0601 	rsb	r6, r6, #1
 800e46c:	f8ca 6000 	str.w	r6, [sl]
 800e470:	f8da 3000 	ldr.w	r3, [sl]
 800e474:	4499      	add	r9, r3
 800e476:	2200      	movs	r2, #0
 800e478:	2300      	movs	r3, #0
 800e47a:	4620      	mov	r0, r4
 800e47c:	4629      	mov	r1, r5
 800e47e:	f7f2 fb43 	bl	8000b08 <__aeabi_dcmpeq>
 800e482:	b108      	cbz	r0, 800e488 <__cvt+0xa4>
 800e484:	f8cd 900c 	str.w	r9, [sp, #12]
 800e488:	2230      	movs	r2, #48	; 0x30
 800e48a:	9b03      	ldr	r3, [sp, #12]
 800e48c:	454b      	cmp	r3, r9
 800e48e:	d307      	bcc.n	800e4a0 <__cvt+0xbc>
 800e490:	9b03      	ldr	r3, [sp, #12]
 800e492:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e494:	1bdb      	subs	r3, r3, r7
 800e496:	4638      	mov	r0, r7
 800e498:	6013      	str	r3, [r2, #0]
 800e49a:	b004      	add	sp, #16
 800e49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a0:	1c59      	adds	r1, r3, #1
 800e4a2:	9103      	str	r1, [sp, #12]
 800e4a4:	701a      	strb	r2, [r3, #0]
 800e4a6:	e7f0      	b.n	800e48a <__cvt+0xa6>

0800e4a8 <__exponent>:
 800e4a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2900      	cmp	r1, #0
 800e4ae:	bfb8      	it	lt
 800e4b0:	4249      	neglt	r1, r1
 800e4b2:	f803 2b02 	strb.w	r2, [r3], #2
 800e4b6:	bfb4      	ite	lt
 800e4b8:	222d      	movlt	r2, #45	; 0x2d
 800e4ba:	222b      	movge	r2, #43	; 0x2b
 800e4bc:	2909      	cmp	r1, #9
 800e4be:	7042      	strb	r2, [r0, #1]
 800e4c0:	dd2a      	ble.n	800e518 <__exponent+0x70>
 800e4c2:	f10d 0407 	add.w	r4, sp, #7
 800e4c6:	46a4      	mov	ip, r4
 800e4c8:	270a      	movs	r7, #10
 800e4ca:	46a6      	mov	lr, r4
 800e4cc:	460a      	mov	r2, r1
 800e4ce:	fb91 f6f7 	sdiv	r6, r1, r7
 800e4d2:	fb07 1516 	mls	r5, r7, r6, r1
 800e4d6:	3530      	adds	r5, #48	; 0x30
 800e4d8:	2a63      	cmp	r2, #99	; 0x63
 800e4da:	f104 34ff 	add.w	r4, r4, #4294967295
 800e4de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e4e2:	4631      	mov	r1, r6
 800e4e4:	dcf1      	bgt.n	800e4ca <__exponent+0x22>
 800e4e6:	3130      	adds	r1, #48	; 0x30
 800e4e8:	f1ae 0502 	sub.w	r5, lr, #2
 800e4ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e4f0:	1c44      	adds	r4, r0, #1
 800e4f2:	4629      	mov	r1, r5
 800e4f4:	4561      	cmp	r1, ip
 800e4f6:	d30a      	bcc.n	800e50e <__exponent+0x66>
 800e4f8:	f10d 0209 	add.w	r2, sp, #9
 800e4fc:	eba2 020e 	sub.w	r2, r2, lr
 800e500:	4565      	cmp	r5, ip
 800e502:	bf88      	it	hi
 800e504:	2200      	movhi	r2, #0
 800e506:	4413      	add	r3, r2
 800e508:	1a18      	subs	r0, r3, r0
 800e50a:	b003      	add	sp, #12
 800e50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e50e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e512:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e516:	e7ed      	b.n	800e4f4 <__exponent+0x4c>
 800e518:	2330      	movs	r3, #48	; 0x30
 800e51a:	3130      	adds	r1, #48	; 0x30
 800e51c:	7083      	strb	r3, [r0, #2]
 800e51e:	70c1      	strb	r1, [r0, #3]
 800e520:	1d03      	adds	r3, r0, #4
 800e522:	e7f1      	b.n	800e508 <__exponent+0x60>

0800e524 <_printf_float>:
 800e524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e528:	ed2d 8b02 	vpush	{d8}
 800e52c:	b08d      	sub	sp, #52	; 0x34
 800e52e:	460c      	mov	r4, r1
 800e530:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e534:	4616      	mov	r6, r2
 800e536:	461f      	mov	r7, r3
 800e538:	4605      	mov	r5, r0
 800e53a:	f003 fa13 	bl	8011964 <_localeconv_r>
 800e53e:	f8d0 a000 	ldr.w	sl, [r0]
 800e542:	4650      	mov	r0, sl
 800e544:	f7f1 fe5e 	bl	8000204 <strlen>
 800e548:	2300      	movs	r3, #0
 800e54a:	930a      	str	r3, [sp, #40]	; 0x28
 800e54c:	6823      	ldr	r3, [r4, #0]
 800e54e:	9305      	str	r3, [sp, #20]
 800e550:	f8d8 3000 	ldr.w	r3, [r8]
 800e554:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e558:	3307      	adds	r3, #7
 800e55a:	f023 0307 	bic.w	r3, r3, #7
 800e55e:	f103 0208 	add.w	r2, r3, #8
 800e562:	f8c8 2000 	str.w	r2, [r8]
 800e566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e56e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e572:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e576:	9307      	str	r3, [sp, #28]
 800e578:	f8cd 8018 	str.w	r8, [sp, #24]
 800e57c:	ee08 0a10 	vmov	s16, r0
 800e580:	4b9f      	ldr	r3, [pc, #636]	; (800e800 <_printf_float+0x2dc>)
 800e582:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e586:	f04f 32ff 	mov.w	r2, #4294967295
 800e58a:	f7f2 faef 	bl	8000b6c <__aeabi_dcmpun>
 800e58e:	bb88      	cbnz	r0, 800e5f4 <_printf_float+0xd0>
 800e590:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e594:	4b9a      	ldr	r3, [pc, #616]	; (800e800 <_printf_float+0x2dc>)
 800e596:	f04f 32ff 	mov.w	r2, #4294967295
 800e59a:	f7f2 fac9 	bl	8000b30 <__aeabi_dcmple>
 800e59e:	bb48      	cbnz	r0, 800e5f4 <_printf_float+0xd0>
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	4640      	mov	r0, r8
 800e5a6:	4649      	mov	r1, r9
 800e5a8:	f7f2 fab8 	bl	8000b1c <__aeabi_dcmplt>
 800e5ac:	b110      	cbz	r0, 800e5b4 <_printf_float+0x90>
 800e5ae:	232d      	movs	r3, #45	; 0x2d
 800e5b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5b4:	4b93      	ldr	r3, [pc, #588]	; (800e804 <_printf_float+0x2e0>)
 800e5b6:	4894      	ldr	r0, [pc, #592]	; (800e808 <_printf_float+0x2e4>)
 800e5b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e5bc:	bf94      	ite	ls
 800e5be:	4698      	movls	r8, r3
 800e5c0:	4680      	movhi	r8, r0
 800e5c2:	2303      	movs	r3, #3
 800e5c4:	6123      	str	r3, [r4, #16]
 800e5c6:	9b05      	ldr	r3, [sp, #20]
 800e5c8:	f023 0204 	bic.w	r2, r3, #4
 800e5cc:	6022      	str	r2, [r4, #0]
 800e5ce:	f04f 0900 	mov.w	r9, #0
 800e5d2:	9700      	str	r7, [sp, #0]
 800e5d4:	4633      	mov	r3, r6
 800e5d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800e5d8:	4621      	mov	r1, r4
 800e5da:	4628      	mov	r0, r5
 800e5dc:	f000 f9d8 	bl	800e990 <_printf_common>
 800e5e0:	3001      	adds	r0, #1
 800e5e2:	f040 8090 	bne.w	800e706 <_printf_float+0x1e2>
 800e5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ea:	b00d      	add	sp, #52	; 0x34
 800e5ec:	ecbd 8b02 	vpop	{d8}
 800e5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5f4:	4642      	mov	r2, r8
 800e5f6:	464b      	mov	r3, r9
 800e5f8:	4640      	mov	r0, r8
 800e5fa:	4649      	mov	r1, r9
 800e5fc:	f7f2 fab6 	bl	8000b6c <__aeabi_dcmpun>
 800e600:	b140      	cbz	r0, 800e614 <_printf_float+0xf0>
 800e602:	464b      	mov	r3, r9
 800e604:	2b00      	cmp	r3, #0
 800e606:	bfbc      	itt	lt
 800e608:	232d      	movlt	r3, #45	; 0x2d
 800e60a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e60e:	487f      	ldr	r0, [pc, #508]	; (800e80c <_printf_float+0x2e8>)
 800e610:	4b7f      	ldr	r3, [pc, #508]	; (800e810 <_printf_float+0x2ec>)
 800e612:	e7d1      	b.n	800e5b8 <_printf_float+0x94>
 800e614:	6863      	ldr	r3, [r4, #4]
 800e616:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e61a:	9206      	str	r2, [sp, #24]
 800e61c:	1c5a      	adds	r2, r3, #1
 800e61e:	d13f      	bne.n	800e6a0 <_printf_float+0x17c>
 800e620:	2306      	movs	r3, #6
 800e622:	6063      	str	r3, [r4, #4]
 800e624:	9b05      	ldr	r3, [sp, #20]
 800e626:	6861      	ldr	r1, [r4, #4]
 800e628:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e62c:	2300      	movs	r3, #0
 800e62e:	9303      	str	r3, [sp, #12]
 800e630:	ab0a      	add	r3, sp, #40	; 0x28
 800e632:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e636:	ab09      	add	r3, sp, #36	; 0x24
 800e638:	ec49 8b10 	vmov	d0, r8, r9
 800e63c:	9300      	str	r3, [sp, #0]
 800e63e:	6022      	str	r2, [r4, #0]
 800e640:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e644:	4628      	mov	r0, r5
 800e646:	f7ff fecd 	bl	800e3e4 <__cvt>
 800e64a:	9b06      	ldr	r3, [sp, #24]
 800e64c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e64e:	2b47      	cmp	r3, #71	; 0x47
 800e650:	4680      	mov	r8, r0
 800e652:	d108      	bne.n	800e666 <_printf_float+0x142>
 800e654:	1cc8      	adds	r0, r1, #3
 800e656:	db02      	blt.n	800e65e <_printf_float+0x13a>
 800e658:	6863      	ldr	r3, [r4, #4]
 800e65a:	4299      	cmp	r1, r3
 800e65c:	dd41      	ble.n	800e6e2 <_printf_float+0x1be>
 800e65e:	f1ab 0b02 	sub.w	fp, fp, #2
 800e662:	fa5f fb8b 	uxtb.w	fp, fp
 800e666:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e66a:	d820      	bhi.n	800e6ae <_printf_float+0x18a>
 800e66c:	3901      	subs	r1, #1
 800e66e:	465a      	mov	r2, fp
 800e670:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e674:	9109      	str	r1, [sp, #36]	; 0x24
 800e676:	f7ff ff17 	bl	800e4a8 <__exponent>
 800e67a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e67c:	1813      	adds	r3, r2, r0
 800e67e:	2a01      	cmp	r2, #1
 800e680:	4681      	mov	r9, r0
 800e682:	6123      	str	r3, [r4, #16]
 800e684:	dc02      	bgt.n	800e68c <_printf_float+0x168>
 800e686:	6822      	ldr	r2, [r4, #0]
 800e688:	07d2      	lsls	r2, r2, #31
 800e68a:	d501      	bpl.n	800e690 <_printf_float+0x16c>
 800e68c:	3301      	adds	r3, #1
 800e68e:	6123      	str	r3, [r4, #16]
 800e690:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e694:	2b00      	cmp	r3, #0
 800e696:	d09c      	beq.n	800e5d2 <_printf_float+0xae>
 800e698:	232d      	movs	r3, #45	; 0x2d
 800e69a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e69e:	e798      	b.n	800e5d2 <_printf_float+0xae>
 800e6a0:	9a06      	ldr	r2, [sp, #24]
 800e6a2:	2a47      	cmp	r2, #71	; 0x47
 800e6a4:	d1be      	bne.n	800e624 <_printf_float+0x100>
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d1bc      	bne.n	800e624 <_printf_float+0x100>
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e7b9      	b.n	800e622 <_printf_float+0xfe>
 800e6ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e6b2:	d118      	bne.n	800e6e6 <_printf_float+0x1c2>
 800e6b4:	2900      	cmp	r1, #0
 800e6b6:	6863      	ldr	r3, [r4, #4]
 800e6b8:	dd0b      	ble.n	800e6d2 <_printf_float+0x1ae>
 800e6ba:	6121      	str	r1, [r4, #16]
 800e6bc:	b913      	cbnz	r3, 800e6c4 <_printf_float+0x1a0>
 800e6be:	6822      	ldr	r2, [r4, #0]
 800e6c0:	07d0      	lsls	r0, r2, #31
 800e6c2:	d502      	bpl.n	800e6ca <_printf_float+0x1a6>
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	440b      	add	r3, r1
 800e6c8:	6123      	str	r3, [r4, #16]
 800e6ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800e6cc:	f04f 0900 	mov.w	r9, #0
 800e6d0:	e7de      	b.n	800e690 <_printf_float+0x16c>
 800e6d2:	b913      	cbnz	r3, 800e6da <_printf_float+0x1b6>
 800e6d4:	6822      	ldr	r2, [r4, #0]
 800e6d6:	07d2      	lsls	r2, r2, #31
 800e6d8:	d501      	bpl.n	800e6de <_printf_float+0x1ba>
 800e6da:	3302      	adds	r3, #2
 800e6dc:	e7f4      	b.n	800e6c8 <_printf_float+0x1a4>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e7f2      	b.n	800e6c8 <_printf_float+0x1a4>
 800e6e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6e8:	4299      	cmp	r1, r3
 800e6ea:	db05      	blt.n	800e6f8 <_printf_float+0x1d4>
 800e6ec:	6823      	ldr	r3, [r4, #0]
 800e6ee:	6121      	str	r1, [r4, #16]
 800e6f0:	07d8      	lsls	r0, r3, #31
 800e6f2:	d5ea      	bpl.n	800e6ca <_printf_float+0x1a6>
 800e6f4:	1c4b      	adds	r3, r1, #1
 800e6f6:	e7e7      	b.n	800e6c8 <_printf_float+0x1a4>
 800e6f8:	2900      	cmp	r1, #0
 800e6fa:	bfd4      	ite	le
 800e6fc:	f1c1 0202 	rsble	r2, r1, #2
 800e700:	2201      	movgt	r2, #1
 800e702:	4413      	add	r3, r2
 800e704:	e7e0      	b.n	800e6c8 <_printf_float+0x1a4>
 800e706:	6823      	ldr	r3, [r4, #0]
 800e708:	055a      	lsls	r2, r3, #21
 800e70a:	d407      	bmi.n	800e71c <_printf_float+0x1f8>
 800e70c:	6923      	ldr	r3, [r4, #16]
 800e70e:	4642      	mov	r2, r8
 800e710:	4631      	mov	r1, r6
 800e712:	4628      	mov	r0, r5
 800e714:	47b8      	blx	r7
 800e716:	3001      	adds	r0, #1
 800e718:	d12c      	bne.n	800e774 <_printf_float+0x250>
 800e71a:	e764      	b.n	800e5e6 <_printf_float+0xc2>
 800e71c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e720:	f240 80e0 	bls.w	800e8e4 <_printf_float+0x3c0>
 800e724:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e728:	2200      	movs	r2, #0
 800e72a:	2300      	movs	r3, #0
 800e72c:	f7f2 f9ec 	bl	8000b08 <__aeabi_dcmpeq>
 800e730:	2800      	cmp	r0, #0
 800e732:	d034      	beq.n	800e79e <_printf_float+0x27a>
 800e734:	4a37      	ldr	r2, [pc, #220]	; (800e814 <_printf_float+0x2f0>)
 800e736:	2301      	movs	r3, #1
 800e738:	4631      	mov	r1, r6
 800e73a:	4628      	mov	r0, r5
 800e73c:	47b8      	blx	r7
 800e73e:	3001      	adds	r0, #1
 800e740:	f43f af51 	beq.w	800e5e6 <_printf_float+0xc2>
 800e744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e748:	429a      	cmp	r2, r3
 800e74a:	db02      	blt.n	800e752 <_printf_float+0x22e>
 800e74c:	6823      	ldr	r3, [r4, #0]
 800e74e:	07d8      	lsls	r0, r3, #31
 800e750:	d510      	bpl.n	800e774 <_printf_float+0x250>
 800e752:	ee18 3a10 	vmov	r3, s16
 800e756:	4652      	mov	r2, sl
 800e758:	4631      	mov	r1, r6
 800e75a:	4628      	mov	r0, r5
 800e75c:	47b8      	blx	r7
 800e75e:	3001      	adds	r0, #1
 800e760:	f43f af41 	beq.w	800e5e6 <_printf_float+0xc2>
 800e764:	f04f 0800 	mov.w	r8, #0
 800e768:	f104 091a 	add.w	r9, r4, #26
 800e76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e76e:	3b01      	subs	r3, #1
 800e770:	4543      	cmp	r3, r8
 800e772:	dc09      	bgt.n	800e788 <_printf_float+0x264>
 800e774:	6823      	ldr	r3, [r4, #0]
 800e776:	079b      	lsls	r3, r3, #30
 800e778:	f100 8105 	bmi.w	800e986 <_printf_float+0x462>
 800e77c:	68e0      	ldr	r0, [r4, #12]
 800e77e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e780:	4298      	cmp	r0, r3
 800e782:	bfb8      	it	lt
 800e784:	4618      	movlt	r0, r3
 800e786:	e730      	b.n	800e5ea <_printf_float+0xc6>
 800e788:	2301      	movs	r3, #1
 800e78a:	464a      	mov	r2, r9
 800e78c:	4631      	mov	r1, r6
 800e78e:	4628      	mov	r0, r5
 800e790:	47b8      	blx	r7
 800e792:	3001      	adds	r0, #1
 800e794:	f43f af27 	beq.w	800e5e6 <_printf_float+0xc2>
 800e798:	f108 0801 	add.w	r8, r8, #1
 800e79c:	e7e6      	b.n	800e76c <_printf_float+0x248>
 800e79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	dc39      	bgt.n	800e818 <_printf_float+0x2f4>
 800e7a4:	4a1b      	ldr	r2, [pc, #108]	; (800e814 <_printf_float+0x2f0>)
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	4631      	mov	r1, r6
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	47b8      	blx	r7
 800e7ae:	3001      	adds	r0, #1
 800e7b0:	f43f af19 	beq.w	800e5e6 <_printf_float+0xc2>
 800e7b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	d102      	bne.n	800e7c2 <_printf_float+0x29e>
 800e7bc:	6823      	ldr	r3, [r4, #0]
 800e7be:	07d9      	lsls	r1, r3, #31
 800e7c0:	d5d8      	bpl.n	800e774 <_printf_float+0x250>
 800e7c2:	ee18 3a10 	vmov	r3, s16
 800e7c6:	4652      	mov	r2, sl
 800e7c8:	4631      	mov	r1, r6
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	47b8      	blx	r7
 800e7ce:	3001      	adds	r0, #1
 800e7d0:	f43f af09 	beq.w	800e5e6 <_printf_float+0xc2>
 800e7d4:	f04f 0900 	mov.w	r9, #0
 800e7d8:	f104 0a1a 	add.w	sl, r4, #26
 800e7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7de:	425b      	negs	r3, r3
 800e7e0:	454b      	cmp	r3, r9
 800e7e2:	dc01      	bgt.n	800e7e8 <_printf_float+0x2c4>
 800e7e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7e6:	e792      	b.n	800e70e <_printf_float+0x1ea>
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	4652      	mov	r2, sl
 800e7ec:	4631      	mov	r1, r6
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	47b8      	blx	r7
 800e7f2:	3001      	adds	r0, #1
 800e7f4:	f43f aef7 	beq.w	800e5e6 <_printf_float+0xc2>
 800e7f8:	f109 0901 	add.w	r9, r9, #1
 800e7fc:	e7ee      	b.n	800e7dc <_printf_float+0x2b8>
 800e7fe:	bf00      	nop
 800e800:	7fefffff 	.word	0x7fefffff
 800e804:	08014860 	.word	0x08014860
 800e808:	08014864 	.word	0x08014864
 800e80c:	0801486c 	.word	0x0801486c
 800e810:	08014868 	.word	0x08014868
 800e814:	08014bd1 	.word	0x08014bd1
 800e818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e81a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e81c:	429a      	cmp	r2, r3
 800e81e:	bfa8      	it	ge
 800e820:	461a      	movge	r2, r3
 800e822:	2a00      	cmp	r2, #0
 800e824:	4691      	mov	r9, r2
 800e826:	dc37      	bgt.n	800e898 <_printf_float+0x374>
 800e828:	f04f 0b00 	mov.w	fp, #0
 800e82c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e830:	f104 021a 	add.w	r2, r4, #26
 800e834:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e836:	9305      	str	r3, [sp, #20]
 800e838:	eba3 0309 	sub.w	r3, r3, r9
 800e83c:	455b      	cmp	r3, fp
 800e83e:	dc33      	bgt.n	800e8a8 <_printf_float+0x384>
 800e840:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e844:	429a      	cmp	r2, r3
 800e846:	db3b      	blt.n	800e8c0 <_printf_float+0x39c>
 800e848:	6823      	ldr	r3, [r4, #0]
 800e84a:	07da      	lsls	r2, r3, #31
 800e84c:	d438      	bmi.n	800e8c0 <_printf_float+0x39c>
 800e84e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e850:	9b05      	ldr	r3, [sp, #20]
 800e852:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e854:	1ad3      	subs	r3, r2, r3
 800e856:	eba2 0901 	sub.w	r9, r2, r1
 800e85a:	4599      	cmp	r9, r3
 800e85c:	bfa8      	it	ge
 800e85e:	4699      	movge	r9, r3
 800e860:	f1b9 0f00 	cmp.w	r9, #0
 800e864:	dc35      	bgt.n	800e8d2 <_printf_float+0x3ae>
 800e866:	f04f 0800 	mov.w	r8, #0
 800e86a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e86e:	f104 0a1a 	add.w	sl, r4, #26
 800e872:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e876:	1a9b      	subs	r3, r3, r2
 800e878:	eba3 0309 	sub.w	r3, r3, r9
 800e87c:	4543      	cmp	r3, r8
 800e87e:	f77f af79 	ble.w	800e774 <_printf_float+0x250>
 800e882:	2301      	movs	r3, #1
 800e884:	4652      	mov	r2, sl
 800e886:	4631      	mov	r1, r6
 800e888:	4628      	mov	r0, r5
 800e88a:	47b8      	blx	r7
 800e88c:	3001      	adds	r0, #1
 800e88e:	f43f aeaa 	beq.w	800e5e6 <_printf_float+0xc2>
 800e892:	f108 0801 	add.w	r8, r8, #1
 800e896:	e7ec      	b.n	800e872 <_printf_float+0x34e>
 800e898:	4613      	mov	r3, r2
 800e89a:	4631      	mov	r1, r6
 800e89c:	4642      	mov	r2, r8
 800e89e:	4628      	mov	r0, r5
 800e8a0:	47b8      	blx	r7
 800e8a2:	3001      	adds	r0, #1
 800e8a4:	d1c0      	bne.n	800e828 <_printf_float+0x304>
 800e8a6:	e69e      	b.n	800e5e6 <_printf_float+0xc2>
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	4631      	mov	r1, r6
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	9205      	str	r2, [sp, #20]
 800e8b0:	47b8      	blx	r7
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	f43f ae97 	beq.w	800e5e6 <_printf_float+0xc2>
 800e8b8:	9a05      	ldr	r2, [sp, #20]
 800e8ba:	f10b 0b01 	add.w	fp, fp, #1
 800e8be:	e7b9      	b.n	800e834 <_printf_float+0x310>
 800e8c0:	ee18 3a10 	vmov	r3, s16
 800e8c4:	4652      	mov	r2, sl
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	47b8      	blx	r7
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	d1be      	bne.n	800e84e <_printf_float+0x32a>
 800e8d0:	e689      	b.n	800e5e6 <_printf_float+0xc2>
 800e8d2:	9a05      	ldr	r2, [sp, #20]
 800e8d4:	464b      	mov	r3, r9
 800e8d6:	4442      	add	r2, r8
 800e8d8:	4631      	mov	r1, r6
 800e8da:	4628      	mov	r0, r5
 800e8dc:	47b8      	blx	r7
 800e8de:	3001      	adds	r0, #1
 800e8e0:	d1c1      	bne.n	800e866 <_printf_float+0x342>
 800e8e2:	e680      	b.n	800e5e6 <_printf_float+0xc2>
 800e8e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8e6:	2a01      	cmp	r2, #1
 800e8e8:	dc01      	bgt.n	800e8ee <_printf_float+0x3ca>
 800e8ea:	07db      	lsls	r3, r3, #31
 800e8ec:	d538      	bpl.n	800e960 <_printf_float+0x43c>
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	4642      	mov	r2, r8
 800e8f2:	4631      	mov	r1, r6
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	47b8      	blx	r7
 800e8f8:	3001      	adds	r0, #1
 800e8fa:	f43f ae74 	beq.w	800e5e6 <_printf_float+0xc2>
 800e8fe:	ee18 3a10 	vmov	r3, s16
 800e902:	4652      	mov	r2, sl
 800e904:	4631      	mov	r1, r6
 800e906:	4628      	mov	r0, r5
 800e908:	47b8      	blx	r7
 800e90a:	3001      	adds	r0, #1
 800e90c:	f43f ae6b 	beq.w	800e5e6 <_printf_float+0xc2>
 800e910:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e914:	2200      	movs	r2, #0
 800e916:	2300      	movs	r3, #0
 800e918:	f7f2 f8f6 	bl	8000b08 <__aeabi_dcmpeq>
 800e91c:	b9d8      	cbnz	r0, 800e956 <_printf_float+0x432>
 800e91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e920:	f108 0201 	add.w	r2, r8, #1
 800e924:	3b01      	subs	r3, #1
 800e926:	4631      	mov	r1, r6
 800e928:	4628      	mov	r0, r5
 800e92a:	47b8      	blx	r7
 800e92c:	3001      	adds	r0, #1
 800e92e:	d10e      	bne.n	800e94e <_printf_float+0x42a>
 800e930:	e659      	b.n	800e5e6 <_printf_float+0xc2>
 800e932:	2301      	movs	r3, #1
 800e934:	4652      	mov	r2, sl
 800e936:	4631      	mov	r1, r6
 800e938:	4628      	mov	r0, r5
 800e93a:	47b8      	blx	r7
 800e93c:	3001      	adds	r0, #1
 800e93e:	f43f ae52 	beq.w	800e5e6 <_printf_float+0xc2>
 800e942:	f108 0801 	add.w	r8, r8, #1
 800e946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e948:	3b01      	subs	r3, #1
 800e94a:	4543      	cmp	r3, r8
 800e94c:	dcf1      	bgt.n	800e932 <_printf_float+0x40e>
 800e94e:	464b      	mov	r3, r9
 800e950:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e954:	e6dc      	b.n	800e710 <_printf_float+0x1ec>
 800e956:	f04f 0800 	mov.w	r8, #0
 800e95a:	f104 0a1a 	add.w	sl, r4, #26
 800e95e:	e7f2      	b.n	800e946 <_printf_float+0x422>
 800e960:	2301      	movs	r3, #1
 800e962:	4642      	mov	r2, r8
 800e964:	e7df      	b.n	800e926 <_printf_float+0x402>
 800e966:	2301      	movs	r3, #1
 800e968:	464a      	mov	r2, r9
 800e96a:	4631      	mov	r1, r6
 800e96c:	4628      	mov	r0, r5
 800e96e:	47b8      	blx	r7
 800e970:	3001      	adds	r0, #1
 800e972:	f43f ae38 	beq.w	800e5e6 <_printf_float+0xc2>
 800e976:	f108 0801 	add.w	r8, r8, #1
 800e97a:	68e3      	ldr	r3, [r4, #12]
 800e97c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e97e:	1a5b      	subs	r3, r3, r1
 800e980:	4543      	cmp	r3, r8
 800e982:	dcf0      	bgt.n	800e966 <_printf_float+0x442>
 800e984:	e6fa      	b.n	800e77c <_printf_float+0x258>
 800e986:	f04f 0800 	mov.w	r8, #0
 800e98a:	f104 0919 	add.w	r9, r4, #25
 800e98e:	e7f4      	b.n	800e97a <_printf_float+0x456>

0800e990 <_printf_common>:
 800e990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e994:	4616      	mov	r6, r2
 800e996:	4699      	mov	r9, r3
 800e998:	688a      	ldr	r2, [r1, #8]
 800e99a:	690b      	ldr	r3, [r1, #16]
 800e99c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	bfb8      	it	lt
 800e9a4:	4613      	movlt	r3, r2
 800e9a6:	6033      	str	r3, [r6, #0]
 800e9a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e9ac:	4607      	mov	r7, r0
 800e9ae:	460c      	mov	r4, r1
 800e9b0:	b10a      	cbz	r2, 800e9b6 <_printf_common+0x26>
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	6033      	str	r3, [r6, #0]
 800e9b6:	6823      	ldr	r3, [r4, #0]
 800e9b8:	0699      	lsls	r1, r3, #26
 800e9ba:	bf42      	ittt	mi
 800e9bc:	6833      	ldrmi	r3, [r6, #0]
 800e9be:	3302      	addmi	r3, #2
 800e9c0:	6033      	strmi	r3, [r6, #0]
 800e9c2:	6825      	ldr	r5, [r4, #0]
 800e9c4:	f015 0506 	ands.w	r5, r5, #6
 800e9c8:	d106      	bne.n	800e9d8 <_printf_common+0x48>
 800e9ca:	f104 0a19 	add.w	sl, r4, #25
 800e9ce:	68e3      	ldr	r3, [r4, #12]
 800e9d0:	6832      	ldr	r2, [r6, #0]
 800e9d2:	1a9b      	subs	r3, r3, r2
 800e9d4:	42ab      	cmp	r3, r5
 800e9d6:	dc26      	bgt.n	800ea26 <_printf_common+0x96>
 800e9d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e9dc:	1e13      	subs	r3, r2, #0
 800e9de:	6822      	ldr	r2, [r4, #0]
 800e9e0:	bf18      	it	ne
 800e9e2:	2301      	movne	r3, #1
 800e9e4:	0692      	lsls	r2, r2, #26
 800e9e6:	d42b      	bmi.n	800ea40 <_printf_common+0xb0>
 800e9e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9ec:	4649      	mov	r1, r9
 800e9ee:	4638      	mov	r0, r7
 800e9f0:	47c0      	blx	r8
 800e9f2:	3001      	adds	r0, #1
 800e9f4:	d01e      	beq.n	800ea34 <_printf_common+0xa4>
 800e9f6:	6823      	ldr	r3, [r4, #0]
 800e9f8:	68e5      	ldr	r5, [r4, #12]
 800e9fa:	6832      	ldr	r2, [r6, #0]
 800e9fc:	f003 0306 	and.w	r3, r3, #6
 800ea00:	2b04      	cmp	r3, #4
 800ea02:	bf08      	it	eq
 800ea04:	1aad      	subeq	r5, r5, r2
 800ea06:	68a3      	ldr	r3, [r4, #8]
 800ea08:	6922      	ldr	r2, [r4, #16]
 800ea0a:	bf0c      	ite	eq
 800ea0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea10:	2500      	movne	r5, #0
 800ea12:	4293      	cmp	r3, r2
 800ea14:	bfc4      	itt	gt
 800ea16:	1a9b      	subgt	r3, r3, r2
 800ea18:	18ed      	addgt	r5, r5, r3
 800ea1a:	2600      	movs	r6, #0
 800ea1c:	341a      	adds	r4, #26
 800ea1e:	42b5      	cmp	r5, r6
 800ea20:	d11a      	bne.n	800ea58 <_printf_common+0xc8>
 800ea22:	2000      	movs	r0, #0
 800ea24:	e008      	b.n	800ea38 <_printf_common+0xa8>
 800ea26:	2301      	movs	r3, #1
 800ea28:	4652      	mov	r2, sl
 800ea2a:	4649      	mov	r1, r9
 800ea2c:	4638      	mov	r0, r7
 800ea2e:	47c0      	blx	r8
 800ea30:	3001      	adds	r0, #1
 800ea32:	d103      	bne.n	800ea3c <_printf_common+0xac>
 800ea34:	f04f 30ff 	mov.w	r0, #4294967295
 800ea38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea3c:	3501      	adds	r5, #1
 800ea3e:	e7c6      	b.n	800e9ce <_printf_common+0x3e>
 800ea40:	18e1      	adds	r1, r4, r3
 800ea42:	1c5a      	adds	r2, r3, #1
 800ea44:	2030      	movs	r0, #48	; 0x30
 800ea46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea4a:	4422      	add	r2, r4
 800ea4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea54:	3302      	adds	r3, #2
 800ea56:	e7c7      	b.n	800e9e8 <_printf_common+0x58>
 800ea58:	2301      	movs	r3, #1
 800ea5a:	4622      	mov	r2, r4
 800ea5c:	4649      	mov	r1, r9
 800ea5e:	4638      	mov	r0, r7
 800ea60:	47c0      	blx	r8
 800ea62:	3001      	adds	r0, #1
 800ea64:	d0e6      	beq.n	800ea34 <_printf_common+0xa4>
 800ea66:	3601      	adds	r6, #1
 800ea68:	e7d9      	b.n	800ea1e <_printf_common+0x8e>
	...

0800ea6c <_printf_i>:
 800ea6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea70:	460c      	mov	r4, r1
 800ea72:	4691      	mov	r9, r2
 800ea74:	7e27      	ldrb	r7, [r4, #24]
 800ea76:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ea78:	2f78      	cmp	r7, #120	; 0x78
 800ea7a:	4680      	mov	r8, r0
 800ea7c:	469a      	mov	sl, r3
 800ea7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea82:	d807      	bhi.n	800ea94 <_printf_i+0x28>
 800ea84:	2f62      	cmp	r7, #98	; 0x62
 800ea86:	d80a      	bhi.n	800ea9e <_printf_i+0x32>
 800ea88:	2f00      	cmp	r7, #0
 800ea8a:	f000 80d8 	beq.w	800ec3e <_printf_i+0x1d2>
 800ea8e:	2f58      	cmp	r7, #88	; 0x58
 800ea90:	f000 80a3 	beq.w	800ebda <_printf_i+0x16e>
 800ea94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ea98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea9c:	e03a      	b.n	800eb14 <_printf_i+0xa8>
 800ea9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eaa2:	2b15      	cmp	r3, #21
 800eaa4:	d8f6      	bhi.n	800ea94 <_printf_i+0x28>
 800eaa6:	a001      	add	r0, pc, #4	; (adr r0, 800eaac <_printf_i+0x40>)
 800eaa8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eaac:	0800eb05 	.word	0x0800eb05
 800eab0:	0800eb19 	.word	0x0800eb19
 800eab4:	0800ea95 	.word	0x0800ea95
 800eab8:	0800ea95 	.word	0x0800ea95
 800eabc:	0800ea95 	.word	0x0800ea95
 800eac0:	0800ea95 	.word	0x0800ea95
 800eac4:	0800eb19 	.word	0x0800eb19
 800eac8:	0800ea95 	.word	0x0800ea95
 800eacc:	0800ea95 	.word	0x0800ea95
 800ead0:	0800ea95 	.word	0x0800ea95
 800ead4:	0800ea95 	.word	0x0800ea95
 800ead8:	0800ec25 	.word	0x0800ec25
 800eadc:	0800eb49 	.word	0x0800eb49
 800eae0:	0800ec07 	.word	0x0800ec07
 800eae4:	0800ea95 	.word	0x0800ea95
 800eae8:	0800ea95 	.word	0x0800ea95
 800eaec:	0800ec47 	.word	0x0800ec47
 800eaf0:	0800ea95 	.word	0x0800ea95
 800eaf4:	0800eb49 	.word	0x0800eb49
 800eaf8:	0800ea95 	.word	0x0800ea95
 800eafc:	0800ea95 	.word	0x0800ea95
 800eb00:	0800ec0f 	.word	0x0800ec0f
 800eb04:	680b      	ldr	r3, [r1, #0]
 800eb06:	1d1a      	adds	r2, r3, #4
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	600a      	str	r2, [r1, #0]
 800eb0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eb10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb14:	2301      	movs	r3, #1
 800eb16:	e0a3      	b.n	800ec60 <_printf_i+0x1f4>
 800eb18:	6825      	ldr	r5, [r4, #0]
 800eb1a:	6808      	ldr	r0, [r1, #0]
 800eb1c:	062e      	lsls	r6, r5, #24
 800eb1e:	f100 0304 	add.w	r3, r0, #4
 800eb22:	d50a      	bpl.n	800eb3a <_printf_i+0xce>
 800eb24:	6805      	ldr	r5, [r0, #0]
 800eb26:	600b      	str	r3, [r1, #0]
 800eb28:	2d00      	cmp	r5, #0
 800eb2a:	da03      	bge.n	800eb34 <_printf_i+0xc8>
 800eb2c:	232d      	movs	r3, #45	; 0x2d
 800eb2e:	426d      	negs	r5, r5
 800eb30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb34:	485e      	ldr	r0, [pc, #376]	; (800ecb0 <_printf_i+0x244>)
 800eb36:	230a      	movs	r3, #10
 800eb38:	e019      	b.n	800eb6e <_printf_i+0x102>
 800eb3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800eb3e:	6805      	ldr	r5, [r0, #0]
 800eb40:	600b      	str	r3, [r1, #0]
 800eb42:	bf18      	it	ne
 800eb44:	b22d      	sxthne	r5, r5
 800eb46:	e7ef      	b.n	800eb28 <_printf_i+0xbc>
 800eb48:	680b      	ldr	r3, [r1, #0]
 800eb4a:	6825      	ldr	r5, [r4, #0]
 800eb4c:	1d18      	adds	r0, r3, #4
 800eb4e:	6008      	str	r0, [r1, #0]
 800eb50:	0628      	lsls	r0, r5, #24
 800eb52:	d501      	bpl.n	800eb58 <_printf_i+0xec>
 800eb54:	681d      	ldr	r5, [r3, #0]
 800eb56:	e002      	b.n	800eb5e <_printf_i+0xf2>
 800eb58:	0669      	lsls	r1, r5, #25
 800eb5a:	d5fb      	bpl.n	800eb54 <_printf_i+0xe8>
 800eb5c:	881d      	ldrh	r5, [r3, #0]
 800eb5e:	4854      	ldr	r0, [pc, #336]	; (800ecb0 <_printf_i+0x244>)
 800eb60:	2f6f      	cmp	r7, #111	; 0x6f
 800eb62:	bf0c      	ite	eq
 800eb64:	2308      	moveq	r3, #8
 800eb66:	230a      	movne	r3, #10
 800eb68:	2100      	movs	r1, #0
 800eb6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb6e:	6866      	ldr	r6, [r4, #4]
 800eb70:	60a6      	str	r6, [r4, #8]
 800eb72:	2e00      	cmp	r6, #0
 800eb74:	bfa2      	ittt	ge
 800eb76:	6821      	ldrge	r1, [r4, #0]
 800eb78:	f021 0104 	bicge.w	r1, r1, #4
 800eb7c:	6021      	strge	r1, [r4, #0]
 800eb7e:	b90d      	cbnz	r5, 800eb84 <_printf_i+0x118>
 800eb80:	2e00      	cmp	r6, #0
 800eb82:	d04d      	beq.n	800ec20 <_printf_i+0x1b4>
 800eb84:	4616      	mov	r6, r2
 800eb86:	fbb5 f1f3 	udiv	r1, r5, r3
 800eb8a:	fb03 5711 	mls	r7, r3, r1, r5
 800eb8e:	5dc7      	ldrb	r7, [r0, r7]
 800eb90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eb94:	462f      	mov	r7, r5
 800eb96:	42bb      	cmp	r3, r7
 800eb98:	460d      	mov	r5, r1
 800eb9a:	d9f4      	bls.n	800eb86 <_printf_i+0x11a>
 800eb9c:	2b08      	cmp	r3, #8
 800eb9e:	d10b      	bne.n	800ebb8 <_printf_i+0x14c>
 800eba0:	6823      	ldr	r3, [r4, #0]
 800eba2:	07df      	lsls	r7, r3, #31
 800eba4:	d508      	bpl.n	800ebb8 <_printf_i+0x14c>
 800eba6:	6923      	ldr	r3, [r4, #16]
 800eba8:	6861      	ldr	r1, [r4, #4]
 800ebaa:	4299      	cmp	r1, r3
 800ebac:	bfde      	ittt	le
 800ebae:	2330      	movle	r3, #48	; 0x30
 800ebb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ebb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ebb8:	1b92      	subs	r2, r2, r6
 800ebba:	6122      	str	r2, [r4, #16]
 800ebbc:	f8cd a000 	str.w	sl, [sp]
 800ebc0:	464b      	mov	r3, r9
 800ebc2:	aa03      	add	r2, sp, #12
 800ebc4:	4621      	mov	r1, r4
 800ebc6:	4640      	mov	r0, r8
 800ebc8:	f7ff fee2 	bl	800e990 <_printf_common>
 800ebcc:	3001      	adds	r0, #1
 800ebce:	d14c      	bne.n	800ec6a <_printf_i+0x1fe>
 800ebd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd4:	b004      	add	sp, #16
 800ebd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebda:	4835      	ldr	r0, [pc, #212]	; (800ecb0 <_printf_i+0x244>)
 800ebdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	680e      	ldr	r6, [r1, #0]
 800ebe4:	061f      	lsls	r7, r3, #24
 800ebe6:	f856 5b04 	ldr.w	r5, [r6], #4
 800ebea:	600e      	str	r6, [r1, #0]
 800ebec:	d514      	bpl.n	800ec18 <_printf_i+0x1ac>
 800ebee:	07d9      	lsls	r1, r3, #31
 800ebf0:	bf44      	itt	mi
 800ebf2:	f043 0320 	orrmi.w	r3, r3, #32
 800ebf6:	6023      	strmi	r3, [r4, #0]
 800ebf8:	b91d      	cbnz	r5, 800ec02 <_printf_i+0x196>
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	f023 0320 	bic.w	r3, r3, #32
 800ec00:	6023      	str	r3, [r4, #0]
 800ec02:	2310      	movs	r3, #16
 800ec04:	e7b0      	b.n	800eb68 <_printf_i+0xfc>
 800ec06:	6823      	ldr	r3, [r4, #0]
 800ec08:	f043 0320 	orr.w	r3, r3, #32
 800ec0c:	6023      	str	r3, [r4, #0]
 800ec0e:	2378      	movs	r3, #120	; 0x78
 800ec10:	4828      	ldr	r0, [pc, #160]	; (800ecb4 <_printf_i+0x248>)
 800ec12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec16:	e7e3      	b.n	800ebe0 <_printf_i+0x174>
 800ec18:	065e      	lsls	r6, r3, #25
 800ec1a:	bf48      	it	mi
 800ec1c:	b2ad      	uxthmi	r5, r5
 800ec1e:	e7e6      	b.n	800ebee <_printf_i+0x182>
 800ec20:	4616      	mov	r6, r2
 800ec22:	e7bb      	b.n	800eb9c <_printf_i+0x130>
 800ec24:	680b      	ldr	r3, [r1, #0]
 800ec26:	6826      	ldr	r6, [r4, #0]
 800ec28:	6960      	ldr	r0, [r4, #20]
 800ec2a:	1d1d      	adds	r5, r3, #4
 800ec2c:	600d      	str	r5, [r1, #0]
 800ec2e:	0635      	lsls	r5, r6, #24
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	d501      	bpl.n	800ec38 <_printf_i+0x1cc>
 800ec34:	6018      	str	r0, [r3, #0]
 800ec36:	e002      	b.n	800ec3e <_printf_i+0x1d2>
 800ec38:	0671      	lsls	r1, r6, #25
 800ec3a:	d5fb      	bpl.n	800ec34 <_printf_i+0x1c8>
 800ec3c:	8018      	strh	r0, [r3, #0]
 800ec3e:	2300      	movs	r3, #0
 800ec40:	6123      	str	r3, [r4, #16]
 800ec42:	4616      	mov	r6, r2
 800ec44:	e7ba      	b.n	800ebbc <_printf_i+0x150>
 800ec46:	680b      	ldr	r3, [r1, #0]
 800ec48:	1d1a      	adds	r2, r3, #4
 800ec4a:	600a      	str	r2, [r1, #0]
 800ec4c:	681e      	ldr	r6, [r3, #0]
 800ec4e:	6862      	ldr	r2, [r4, #4]
 800ec50:	2100      	movs	r1, #0
 800ec52:	4630      	mov	r0, r6
 800ec54:	f7f1 fae4 	bl	8000220 <memchr>
 800ec58:	b108      	cbz	r0, 800ec5e <_printf_i+0x1f2>
 800ec5a:	1b80      	subs	r0, r0, r6
 800ec5c:	6060      	str	r0, [r4, #4]
 800ec5e:	6863      	ldr	r3, [r4, #4]
 800ec60:	6123      	str	r3, [r4, #16]
 800ec62:	2300      	movs	r3, #0
 800ec64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec68:	e7a8      	b.n	800ebbc <_printf_i+0x150>
 800ec6a:	6923      	ldr	r3, [r4, #16]
 800ec6c:	4632      	mov	r2, r6
 800ec6e:	4649      	mov	r1, r9
 800ec70:	4640      	mov	r0, r8
 800ec72:	47d0      	blx	sl
 800ec74:	3001      	adds	r0, #1
 800ec76:	d0ab      	beq.n	800ebd0 <_printf_i+0x164>
 800ec78:	6823      	ldr	r3, [r4, #0]
 800ec7a:	079b      	lsls	r3, r3, #30
 800ec7c:	d413      	bmi.n	800eca6 <_printf_i+0x23a>
 800ec7e:	68e0      	ldr	r0, [r4, #12]
 800ec80:	9b03      	ldr	r3, [sp, #12]
 800ec82:	4298      	cmp	r0, r3
 800ec84:	bfb8      	it	lt
 800ec86:	4618      	movlt	r0, r3
 800ec88:	e7a4      	b.n	800ebd4 <_printf_i+0x168>
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	4632      	mov	r2, r6
 800ec8e:	4649      	mov	r1, r9
 800ec90:	4640      	mov	r0, r8
 800ec92:	47d0      	blx	sl
 800ec94:	3001      	adds	r0, #1
 800ec96:	d09b      	beq.n	800ebd0 <_printf_i+0x164>
 800ec98:	3501      	adds	r5, #1
 800ec9a:	68e3      	ldr	r3, [r4, #12]
 800ec9c:	9903      	ldr	r1, [sp, #12]
 800ec9e:	1a5b      	subs	r3, r3, r1
 800eca0:	42ab      	cmp	r3, r5
 800eca2:	dcf2      	bgt.n	800ec8a <_printf_i+0x21e>
 800eca4:	e7eb      	b.n	800ec7e <_printf_i+0x212>
 800eca6:	2500      	movs	r5, #0
 800eca8:	f104 0619 	add.w	r6, r4, #25
 800ecac:	e7f5      	b.n	800ec9a <_printf_i+0x22e>
 800ecae:	bf00      	nop
 800ecb0:	08014870 	.word	0x08014870
 800ecb4:	08014881 	.word	0x08014881

0800ecb8 <_scanf_float>:
 800ecb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecbc:	b087      	sub	sp, #28
 800ecbe:	4617      	mov	r7, r2
 800ecc0:	9303      	str	r3, [sp, #12]
 800ecc2:	688b      	ldr	r3, [r1, #8]
 800ecc4:	1e5a      	subs	r2, r3, #1
 800ecc6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ecca:	bf83      	ittte	hi
 800eccc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ecd0:	195b      	addhi	r3, r3, r5
 800ecd2:	9302      	strhi	r3, [sp, #8]
 800ecd4:	2300      	movls	r3, #0
 800ecd6:	bf86      	itte	hi
 800ecd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ecdc:	608b      	strhi	r3, [r1, #8]
 800ecde:	9302      	strls	r3, [sp, #8]
 800ece0:	680b      	ldr	r3, [r1, #0]
 800ece2:	468b      	mov	fp, r1
 800ece4:	2500      	movs	r5, #0
 800ece6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ecea:	f84b 3b1c 	str.w	r3, [fp], #28
 800ecee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ecf2:	4680      	mov	r8, r0
 800ecf4:	460c      	mov	r4, r1
 800ecf6:	465e      	mov	r6, fp
 800ecf8:	46aa      	mov	sl, r5
 800ecfa:	46a9      	mov	r9, r5
 800ecfc:	9501      	str	r5, [sp, #4]
 800ecfe:	68a2      	ldr	r2, [r4, #8]
 800ed00:	b152      	cbz	r2, 800ed18 <_scanf_float+0x60>
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	2b4e      	cmp	r3, #78	; 0x4e
 800ed08:	d864      	bhi.n	800edd4 <_scanf_float+0x11c>
 800ed0a:	2b40      	cmp	r3, #64	; 0x40
 800ed0c:	d83c      	bhi.n	800ed88 <_scanf_float+0xd0>
 800ed0e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ed12:	b2c8      	uxtb	r0, r1
 800ed14:	280e      	cmp	r0, #14
 800ed16:	d93a      	bls.n	800ed8e <_scanf_float+0xd6>
 800ed18:	f1b9 0f00 	cmp.w	r9, #0
 800ed1c:	d003      	beq.n	800ed26 <_scanf_float+0x6e>
 800ed1e:	6823      	ldr	r3, [r4, #0]
 800ed20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed24:	6023      	str	r3, [r4, #0]
 800ed26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed2a:	f1ba 0f01 	cmp.w	sl, #1
 800ed2e:	f200 8113 	bhi.w	800ef58 <_scanf_float+0x2a0>
 800ed32:	455e      	cmp	r6, fp
 800ed34:	f200 8105 	bhi.w	800ef42 <_scanf_float+0x28a>
 800ed38:	2501      	movs	r5, #1
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	b007      	add	sp, #28
 800ed3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed42:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ed46:	2a0d      	cmp	r2, #13
 800ed48:	d8e6      	bhi.n	800ed18 <_scanf_float+0x60>
 800ed4a:	a101      	add	r1, pc, #4	; (adr r1, 800ed50 <_scanf_float+0x98>)
 800ed4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ed50:	0800ee8f 	.word	0x0800ee8f
 800ed54:	0800ed19 	.word	0x0800ed19
 800ed58:	0800ed19 	.word	0x0800ed19
 800ed5c:	0800ed19 	.word	0x0800ed19
 800ed60:	0800eeef 	.word	0x0800eeef
 800ed64:	0800eec7 	.word	0x0800eec7
 800ed68:	0800ed19 	.word	0x0800ed19
 800ed6c:	0800ed19 	.word	0x0800ed19
 800ed70:	0800ee9d 	.word	0x0800ee9d
 800ed74:	0800ed19 	.word	0x0800ed19
 800ed78:	0800ed19 	.word	0x0800ed19
 800ed7c:	0800ed19 	.word	0x0800ed19
 800ed80:	0800ed19 	.word	0x0800ed19
 800ed84:	0800ee55 	.word	0x0800ee55
 800ed88:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ed8c:	e7db      	b.n	800ed46 <_scanf_float+0x8e>
 800ed8e:	290e      	cmp	r1, #14
 800ed90:	d8c2      	bhi.n	800ed18 <_scanf_float+0x60>
 800ed92:	a001      	add	r0, pc, #4	; (adr r0, 800ed98 <_scanf_float+0xe0>)
 800ed94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ed98:	0800ee47 	.word	0x0800ee47
 800ed9c:	0800ed19 	.word	0x0800ed19
 800eda0:	0800ee47 	.word	0x0800ee47
 800eda4:	0800eedb 	.word	0x0800eedb
 800eda8:	0800ed19 	.word	0x0800ed19
 800edac:	0800edf5 	.word	0x0800edf5
 800edb0:	0800ee31 	.word	0x0800ee31
 800edb4:	0800ee31 	.word	0x0800ee31
 800edb8:	0800ee31 	.word	0x0800ee31
 800edbc:	0800ee31 	.word	0x0800ee31
 800edc0:	0800ee31 	.word	0x0800ee31
 800edc4:	0800ee31 	.word	0x0800ee31
 800edc8:	0800ee31 	.word	0x0800ee31
 800edcc:	0800ee31 	.word	0x0800ee31
 800edd0:	0800ee31 	.word	0x0800ee31
 800edd4:	2b6e      	cmp	r3, #110	; 0x6e
 800edd6:	d809      	bhi.n	800edec <_scanf_float+0x134>
 800edd8:	2b60      	cmp	r3, #96	; 0x60
 800edda:	d8b2      	bhi.n	800ed42 <_scanf_float+0x8a>
 800eddc:	2b54      	cmp	r3, #84	; 0x54
 800edde:	d077      	beq.n	800eed0 <_scanf_float+0x218>
 800ede0:	2b59      	cmp	r3, #89	; 0x59
 800ede2:	d199      	bne.n	800ed18 <_scanf_float+0x60>
 800ede4:	2d07      	cmp	r5, #7
 800ede6:	d197      	bne.n	800ed18 <_scanf_float+0x60>
 800ede8:	2508      	movs	r5, #8
 800edea:	e029      	b.n	800ee40 <_scanf_float+0x188>
 800edec:	2b74      	cmp	r3, #116	; 0x74
 800edee:	d06f      	beq.n	800eed0 <_scanf_float+0x218>
 800edf0:	2b79      	cmp	r3, #121	; 0x79
 800edf2:	e7f6      	b.n	800ede2 <_scanf_float+0x12a>
 800edf4:	6821      	ldr	r1, [r4, #0]
 800edf6:	05c8      	lsls	r0, r1, #23
 800edf8:	d51a      	bpl.n	800ee30 <_scanf_float+0x178>
 800edfa:	9b02      	ldr	r3, [sp, #8]
 800edfc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ee00:	6021      	str	r1, [r4, #0]
 800ee02:	f109 0901 	add.w	r9, r9, #1
 800ee06:	b11b      	cbz	r3, 800ee10 <_scanf_float+0x158>
 800ee08:	3b01      	subs	r3, #1
 800ee0a:	3201      	adds	r2, #1
 800ee0c:	9302      	str	r3, [sp, #8]
 800ee0e:	60a2      	str	r2, [r4, #8]
 800ee10:	68a3      	ldr	r3, [r4, #8]
 800ee12:	3b01      	subs	r3, #1
 800ee14:	60a3      	str	r3, [r4, #8]
 800ee16:	6923      	ldr	r3, [r4, #16]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	6123      	str	r3, [r4, #16]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	3b01      	subs	r3, #1
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	607b      	str	r3, [r7, #4]
 800ee24:	f340 8084 	ble.w	800ef30 <_scanf_float+0x278>
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	603b      	str	r3, [r7, #0]
 800ee2e:	e766      	b.n	800ecfe <_scanf_float+0x46>
 800ee30:	eb1a 0f05 	cmn.w	sl, r5
 800ee34:	f47f af70 	bne.w	800ed18 <_scanf_float+0x60>
 800ee38:	6822      	ldr	r2, [r4, #0]
 800ee3a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ee3e:	6022      	str	r2, [r4, #0]
 800ee40:	f806 3b01 	strb.w	r3, [r6], #1
 800ee44:	e7e4      	b.n	800ee10 <_scanf_float+0x158>
 800ee46:	6822      	ldr	r2, [r4, #0]
 800ee48:	0610      	lsls	r0, r2, #24
 800ee4a:	f57f af65 	bpl.w	800ed18 <_scanf_float+0x60>
 800ee4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee52:	e7f4      	b.n	800ee3e <_scanf_float+0x186>
 800ee54:	f1ba 0f00 	cmp.w	sl, #0
 800ee58:	d10e      	bne.n	800ee78 <_scanf_float+0x1c0>
 800ee5a:	f1b9 0f00 	cmp.w	r9, #0
 800ee5e:	d10e      	bne.n	800ee7e <_scanf_float+0x1c6>
 800ee60:	6822      	ldr	r2, [r4, #0]
 800ee62:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ee66:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ee6a:	d108      	bne.n	800ee7e <_scanf_float+0x1c6>
 800ee6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ee70:	6022      	str	r2, [r4, #0]
 800ee72:	f04f 0a01 	mov.w	sl, #1
 800ee76:	e7e3      	b.n	800ee40 <_scanf_float+0x188>
 800ee78:	f1ba 0f02 	cmp.w	sl, #2
 800ee7c:	d055      	beq.n	800ef2a <_scanf_float+0x272>
 800ee7e:	2d01      	cmp	r5, #1
 800ee80:	d002      	beq.n	800ee88 <_scanf_float+0x1d0>
 800ee82:	2d04      	cmp	r5, #4
 800ee84:	f47f af48 	bne.w	800ed18 <_scanf_float+0x60>
 800ee88:	3501      	adds	r5, #1
 800ee8a:	b2ed      	uxtb	r5, r5
 800ee8c:	e7d8      	b.n	800ee40 <_scanf_float+0x188>
 800ee8e:	f1ba 0f01 	cmp.w	sl, #1
 800ee92:	f47f af41 	bne.w	800ed18 <_scanf_float+0x60>
 800ee96:	f04f 0a02 	mov.w	sl, #2
 800ee9a:	e7d1      	b.n	800ee40 <_scanf_float+0x188>
 800ee9c:	b97d      	cbnz	r5, 800eebe <_scanf_float+0x206>
 800ee9e:	f1b9 0f00 	cmp.w	r9, #0
 800eea2:	f47f af3c 	bne.w	800ed1e <_scanf_float+0x66>
 800eea6:	6822      	ldr	r2, [r4, #0]
 800eea8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800eeac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800eeb0:	f47f af39 	bne.w	800ed26 <_scanf_float+0x6e>
 800eeb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eeb8:	6022      	str	r2, [r4, #0]
 800eeba:	2501      	movs	r5, #1
 800eebc:	e7c0      	b.n	800ee40 <_scanf_float+0x188>
 800eebe:	2d03      	cmp	r5, #3
 800eec0:	d0e2      	beq.n	800ee88 <_scanf_float+0x1d0>
 800eec2:	2d05      	cmp	r5, #5
 800eec4:	e7de      	b.n	800ee84 <_scanf_float+0x1cc>
 800eec6:	2d02      	cmp	r5, #2
 800eec8:	f47f af26 	bne.w	800ed18 <_scanf_float+0x60>
 800eecc:	2503      	movs	r5, #3
 800eece:	e7b7      	b.n	800ee40 <_scanf_float+0x188>
 800eed0:	2d06      	cmp	r5, #6
 800eed2:	f47f af21 	bne.w	800ed18 <_scanf_float+0x60>
 800eed6:	2507      	movs	r5, #7
 800eed8:	e7b2      	b.n	800ee40 <_scanf_float+0x188>
 800eeda:	6822      	ldr	r2, [r4, #0]
 800eedc:	0591      	lsls	r1, r2, #22
 800eede:	f57f af1b 	bpl.w	800ed18 <_scanf_float+0x60>
 800eee2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800eee6:	6022      	str	r2, [r4, #0]
 800eee8:	f8cd 9004 	str.w	r9, [sp, #4]
 800eeec:	e7a8      	b.n	800ee40 <_scanf_float+0x188>
 800eeee:	6822      	ldr	r2, [r4, #0]
 800eef0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800eef4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800eef8:	d006      	beq.n	800ef08 <_scanf_float+0x250>
 800eefa:	0550      	lsls	r0, r2, #21
 800eefc:	f57f af0c 	bpl.w	800ed18 <_scanf_float+0x60>
 800ef00:	f1b9 0f00 	cmp.w	r9, #0
 800ef04:	f43f af0f 	beq.w	800ed26 <_scanf_float+0x6e>
 800ef08:	0591      	lsls	r1, r2, #22
 800ef0a:	bf58      	it	pl
 800ef0c:	9901      	ldrpl	r1, [sp, #4]
 800ef0e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ef12:	bf58      	it	pl
 800ef14:	eba9 0101 	subpl.w	r1, r9, r1
 800ef18:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ef1c:	bf58      	it	pl
 800ef1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ef22:	6022      	str	r2, [r4, #0]
 800ef24:	f04f 0900 	mov.w	r9, #0
 800ef28:	e78a      	b.n	800ee40 <_scanf_float+0x188>
 800ef2a:	f04f 0a03 	mov.w	sl, #3
 800ef2e:	e787      	b.n	800ee40 <_scanf_float+0x188>
 800ef30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ef34:	4639      	mov	r1, r7
 800ef36:	4640      	mov	r0, r8
 800ef38:	4798      	blx	r3
 800ef3a:	2800      	cmp	r0, #0
 800ef3c:	f43f aedf 	beq.w	800ecfe <_scanf_float+0x46>
 800ef40:	e6ea      	b.n	800ed18 <_scanf_float+0x60>
 800ef42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ef46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ef4a:	463a      	mov	r2, r7
 800ef4c:	4640      	mov	r0, r8
 800ef4e:	4798      	blx	r3
 800ef50:	6923      	ldr	r3, [r4, #16]
 800ef52:	3b01      	subs	r3, #1
 800ef54:	6123      	str	r3, [r4, #16]
 800ef56:	e6ec      	b.n	800ed32 <_scanf_float+0x7a>
 800ef58:	1e6b      	subs	r3, r5, #1
 800ef5a:	2b06      	cmp	r3, #6
 800ef5c:	d825      	bhi.n	800efaa <_scanf_float+0x2f2>
 800ef5e:	2d02      	cmp	r5, #2
 800ef60:	d836      	bhi.n	800efd0 <_scanf_float+0x318>
 800ef62:	455e      	cmp	r6, fp
 800ef64:	f67f aee8 	bls.w	800ed38 <_scanf_float+0x80>
 800ef68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ef6c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ef70:	463a      	mov	r2, r7
 800ef72:	4640      	mov	r0, r8
 800ef74:	4798      	blx	r3
 800ef76:	6923      	ldr	r3, [r4, #16]
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	6123      	str	r3, [r4, #16]
 800ef7c:	e7f1      	b.n	800ef62 <_scanf_float+0x2aa>
 800ef7e:	9802      	ldr	r0, [sp, #8]
 800ef80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ef84:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ef88:	9002      	str	r0, [sp, #8]
 800ef8a:	463a      	mov	r2, r7
 800ef8c:	4640      	mov	r0, r8
 800ef8e:	4798      	blx	r3
 800ef90:	6923      	ldr	r3, [r4, #16]
 800ef92:	3b01      	subs	r3, #1
 800ef94:	6123      	str	r3, [r4, #16]
 800ef96:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef9a:	fa5f fa8a 	uxtb.w	sl, sl
 800ef9e:	f1ba 0f02 	cmp.w	sl, #2
 800efa2:	d1ec      	bne.n	800ef7e <_scanf_float+0x2c6>
 800efa4:	3d03      	subs	r5, #3
 800efa6:	b2ed      	uxtb	r5, r5
 800efa8:	1b76      	subs	r6, r6, r5
 800efaa:	6823      	ldr	r3, [r4, #0]
 800efac:	05da      	lsls	r2, r3, #23
 800efae:	d52f      	bpl.n	800f010 <_scanf_float+0x358>
 800efb0:	055b      	lsls	r3, r3, #21
 800efb2:	d510      	bpl.n	800efd6 <_scanf_float+0x31e>
 800efb4:	455e      	cmp	r6, fp
 800efb6:	f67f aebf 	bls.w	800ed38 <_scanf_float+0x80>
 800efba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800efbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800efc2:	463a      	mov	r2, r7
 800efc4:	4640      	mov	r0, r8
 800efc6:	4798      	blx	r3
 800efc8:	6923      	ldr	r3, [r4, #16]
 800efca:	3b01      	subs	r3, #1
 800efcc:	6123      	str	r3, [r4, #16]
 800efce:	e7f1      	b.n	800efb4 <_scanf_float+0x2fc>
 800efd0:	46aa      	mov	sl, r5
 800efd2:	9602      	str	r6, [sp, #8]
 800efd4:	e7df      	b.n	800ef96 <_scanf_float+0x2de>
 800efd6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800efda:	6923      	ldr	r3, [r4, #16]
 800efdc:	2965      	cmp	r1, #101	; 0x65
 800efde:	f103 33ff 	add.w	r3, r3, #4294967295
 800efe2:	f106 35ff 	add.w	r5, r6, #4294967295
 800efe6:	6123      	str	r3, [r4, #16]
 800efe8:	d00c      	beq.n	800f004 <_scanf_float+0x34c>
 800efea:	2945      	cmp	r1, #69	; 0x45
 800efec:	d00a      	beq.n	800f004 <_scanf_float+0x34c>
 800efee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eff2:	463a      	mov	r2, r7
 800eff4:	4640      	mov	r0, r8
 800eff6:	4798      	blx	r3
 800eff8:	6923      	ldr	r3, [r4, #16]
 800effa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800effe:	3b01      	subs	r3, #1
 800f000:	1eb5      	subs	r5, r6, #2
 800f002:	6123      	str	r3, [r4, #16]
 800f004:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f008:	463a      	mov	r2, r7
 800f00a:	4640      	mov	r0, r8
 800f00c:	4798      	blx	r3
 800f00e:	462e      	mov	r6, r5
 800f010:	6825      	ldr	r5, [r4, #0]
 800f012:	f015 0510 	ands.w	r5, r5, #16
 800f016:	d158      	bne.n	800f0ca <_scanf_float+0x412>
 800f018:	7035      	strb	r5, [r6, #0]
 800f01a:	6823      	ldr	r3, [r4, #0]
 800f01c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f024:	d11c      	bne.n	800f060 <_scanf_float+0x3a8>
 800f026:	9b01      	ldr	r3, [sp, #4]
 800f028:	454b      	cmp	r3, r9
 800f02a:	eba3 0209 	sub.w	r2, r3, r9
 800f02e:	d124      	bne.n	800f07a <_scanf_float+0x3c2>
 800f030:	2200      	movs	r2, #0
 800f032:	4659      	mov	r1, fp
 800f034:	4640      	mov	r0, r8
 800f036:	f000 ff45 	bl	800fec4 <_strtod_r>
 800f03a:	9b03      	ldr	r3, [sp, #12]
 800f03c:	6821      	ldr	r1, [r4, #0]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f011 0f02 	tst.w	r1, #2
 800f044:	ec57 6b10 	vmov	r6, r7, d0
 800f048:	f103 0204 	add.w	r2, r3, #4
 800f04c:	d020      	beq.n	800f090 <_scanf_float+0x3d8>
 800f04e:	9903      	ldr	r1, [sp, #12]
 800f050:	600a      	str	r2, [r1, #0]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	e9c3 6700 	strd	r6, r7, [r3]
 800f058:	68e3      	ldr	r3, [r4, #12]
 800f05a:	3301      	adds	r3, #1
 800f05c:	60e3      	str	r3, [r4, #12]
 800f05e:	e66c      	b.n	800ed3a <_scanf_float+0x82>
 800f060:	9b04      	ldr	r3, [sp, #16]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d0e4      	beq.n	800f030 <_scanf_float+0x378>
 800f066:	9905      	ldr	r1, [sp, #20]
 800f068:	230a      	movs	r3, #10
 800f06a:	462a      	mov	r2, r5
 800f06c:	3101      	adds	r1, #1
 800f06e:	4640      	mov	r0, r8
 800f070:	f000 ffb2 	bl	800ffd8 <_strtol_r>
 800f074:	9b04      	ldr	r3, [sp, #16]
 800f076:	9e05      	ldr	r6, [sp, #20]
 800f078:	1ac2      	subs	r2, r0, r3
 800f07a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f07e:	429e      	cmp	r6, r3
 800f080:	bf28      	it	cs
 800f082:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f086:	4912      	ldr	r1, [pc, #72]	; (800f0d0 <_scanf_float+0x418>)
 800f088:	4630      	mov	r0, r6
 800f08a:	f000 f83b 	bl	800f104 <siprintf>
 800f08e:	e7cf      	b.n	800f030 <_scanf_float+0x378>
 800f090:	f011 0f04 	tst.w	r1, #4
 800f094:	9903      	ldr	r1, [sp, #12]
 800f096:	600a      	str	r2, [r1, #0]
 800f098:	d1db      	bne.n	800f052 <_scanf_float+0x39a>
 800f09a:	f8d3 8000 	ldr.w	r8, [r3]
 800f09e:	ee10 2a10 	vmov	r2, s0
 800f0a2:	ee10 0a10 	vmov	r0, s0
 800f0a6:	463b      	mov	r3, r7
 800f0a8:	4639      	mov	r1, r7
 800f0aa:	f7f1 fd5f 	bl	8000b6c <__aeabi_dcmpun>
 800f0ae:	b128      	cbz	r0, 800f0bc <_scanf_float+0x404>
 800f0b0:	4808      	ldr	r0, [pc, #32]	; (800f0d4 <_scanf_float+0x41c>)
 800f0b2:	f000 f821 	bl	800f0f8 <nanf>
 800f0b6:	ed88 0a00 	vstr	s0, [r8]
 800f0ba:	e7cd      	b.n	800f058 <_scanf_float+0x3a0>
 800f0bc:	4630      	mov	r0, r6
 800f0be:	4639      	mov	r1, r7
 800f0c0:	f7f1 fdb2 	bl	8000c28 <__aeabi_d2f>
 800f0c4:	f8c8 0000 	str.w	r0, [r8]
 800f0c8:	e7c6      	b.n	800f058 <_scanf_float+0x3a0>
 800f0ca:	2500      	movs	r5, #0
 800f0cc:	e635      	b.n	800ed3a <_scanf_float+0x82>
 800f0ce:	bf00      	nop
 800f0d0:	08014892 	.word	0x08014892
 800f0d4:	08014c23 	.word	0x08014c23

0800f0d8 <_sbrk_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	4d06      	ldr	r5, [pc, #24]	; (800f0f4 <_sbrk_r+0x1c>)
 800f0dc:	2300      	movs	r3, #0
 800f0de:	4604      	mov	r4, r0
 800f0e0:	4608      	mov	r0, r1
 800f0e2:	602b      	str	r3, [r5, #0]
 800f0e4:	f7f5 f97c 	bl	80043e0 <_sbrk>
 800f0e8:	1c43      	adds	r3, r0, #1
 800f0ea:	d102      	bne.n	800f0f2 <_sbrk_r+0x1a>
 800f0ec:	682b      	ldr	r3, [r5, #0]
 800f0ee:	b103      	cbz	r3, 800f0f2 <_sbrk_r+0x1a>
 800f0f0:	6023      	str	r3, [r4, #0]
 800f0f2:	bd38      	pop	{r3, r4, r5, pc}
 800f0f4:	20001a90 	.word	0x20001a90

0800f0f8 <nanf>:
 800f0f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f100 <nanf+0x8>
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop
 800f100:	7fc00000 	.word	0x7fc00000

0800f104 <siprintf>:
 800f104:	b40e      	push	{r1, r2, r3}
 800f106:	b500      	push	{lr}
 800f108:	b09c      	sub	sp, #112	; 0x70
 800f10a:	ab1d      	add	r3, sp, #116	; 0x74
 800f10c:	9002      	str	r0, [sp, #8]
 800f10e:	9006      	str	r0, [sp, #24]
 800f110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f114:	4809      	ldr	r0, [pc, #36]	; (800f13c <siprintf+0x38>)
 800f116:	9107      	str	r1, [sp, #28]
 800f118:	9104      	str	r1, [sp, #16]
 800f11a:	4909      	ldr	r1, [pc, #36]	; (800f140 <siprintf+0x3c>)
 800f11c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f120:	9105      	str	r1, [sp, #20]
 800f122:	6800      	ldr	r0, [r0, #0]
 800f124:	9301      	str	r3, [sp, #4]
 800f126:	a902      	add	r1, sp, #8
 800f128:	f003 f9de 	bl	80124e8 <_svfiprintf_r>
 800f12c:	9b02      	ldr	r3, [sp, #8]
 800f12e:	2200      	movs	r2, #0
 800f130:	701a      	strb	r2, [r3, #0]
 800f132:	b01c      	add	sp, #112	; 0x70
 800f134:	f85d eb04 	ldr.w	lr, [sp], #4
 800f138:	b003      	add	sp, #12
 800f13a:	4770      	bx	lr
 800f13c:	20000028 	.word	0x20000028
 800f140:	ffff0208 	.word	0xffff0208

0800f144 <siscanf>:
 800f144:	b40e      	push	{r1, r2, r3}
 800f146:	b510      	push	{r4, lr}
 800f148:	b09f      	sub	sp, #124	; 0x7c
 800f14a:	ac21      	add	r4, sp, #132	; 0x84
 800f14c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f150:	f854 2b04 	ldr.w	r2, [r4], #4
 800f154:	9201      	str	r2, [sp, #4]
 800f156:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f15a:	9004      	str	r0, [sp, #16]
 800f15c:	9008      	str	r0, [sp, #32]
 800f15e:	f7f1 f851 	bl	8000204 <strlen>
 800f162:	4b0c      	ldr	r3, [pc, #48]	; (800f194 <siscanf+0x50>)
 800f164:	9005      	str	r0, [sp, #20]
 800f166:	9009      	str	r0, [sp, #36]	; 0x24
 800f168:	930d      	str	r3, [sp, #52]	; 0x34
 800f16a:	480b      	ldr	r0, [pc, #44]	; (800f198 <siscanf+0x54>)
 800f16c:	9a01      	ldr	r2, [sp, #4]
 800f16e:	6800      	ldr	r0, [r0, #0]
 800f170:	9403      	str	r4, [sp, #12]
 800f172:	2300      	movs	r3, #0
 800f174:	9311      	str	r3, [sp, #68]	; 0x44
 800f176:	9316      	str	r3, [sp, #88]	; 0x58
 800f178:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f17c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f180:	a904      	add	r1, sp, #16
 800f182:	4623      	mov	r3, r4
 800f184:	f003 fb0a 	bl	801279c <__ssvfiscanf_r>
 800f188:	b01f      	add	sp, #124	; 0x7c
 800f18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f18e:	b003      	add	sp, #12
 800f190:	4770      	bx	lr
 800f192:	bf00      	nop
 800f194:	0800f1bf 	.word	0x0800f1bf
 800f198:	20000028 	.word	0x20000028

0800f19c <__sread>:
 800f19c:	b510      	push	{r4, lr}
 800f19e:	460c      	mov	r4, r1
 800f1a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1a4:	f003 ff18 	bl	8012fd8 <_read_r>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	bfab      	itete	ge
 800f1ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f1ae:	89a3      	ldrhlt	r3, [r4, #12]
 800f1b0:	181b      	addge	r3, r3, r0
 800f1b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f1b6:	bfac      	ite	ge
 800f1b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f1ba:	81a3      	strhlt	r3, [r4, #12]
 800f1bc:	bd10      	pop	{r4, pc}

0800f1be <__seofread>:
 800f1be:	2000      	movs	r0, #0
 800f1c0:	4770      	bx	lr

0800f1c2 <__swrite>:
 800f1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c6:	461f      	mov	r7, r3
 800f1c8:	898b      	ldrh	r3, [r1, #12]
 800f1ca:	05db      	lsls	r3, r3, #23
 800f1cc:	4605      	mov	r5, r0
 800f1ce:	460c      	mov	r4, r1
 800f1d0:	4616      	mov	r6, r2
 800f1d2:	d505      	bpl.n	800f1e0 <__swrite+0x1e>
 800f1d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1d8:	2302      	movs	r3, #2
 800f1da:	2200      	movs	r2, #0
 800f1dc:	f002 fbca 	bl	8011974 <_lseek_r>
 800f1e0:	89a3      	ldrh	r3, [r4, #12]
 800f1e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1ea:	81a3      	strh	r3, [r4, #12]
 800f1ec:	4632      	mov	r2, r6
 800f1ee:	463b      	mov	r3, r7
 800f1f0:	4628      	mov	r0, r5
 800f1f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f6:	f000 bf87 	b.w	8010108 <_write_r>

0800f1fa <__sseek>:
 800f1fa:	b510      	push	{r4, lr}
 800f1fc:	460c      	mov	r4, r1
 800f1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f202:	f002 fbb7 	bl	8011974 <_lseek_r>
 800f206:	1c43      	adds	r3, r0, #1
 800f208:	89a3      	ldrh	r3, [r4, #12]
 800f20a:	bf15      	itete	ne
 800f20c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f20e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f212:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f216:	81a3      	strheq	r3, [r4, #12]
 800f218:	bf18      	it	ne
 800f21a:	81a3      	strhne	r3, [r4, #12]
 800f21c:	bd10      	pop	{r4, pc}

0800f21e <__sclose>:
 800f21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f222:	f000 bff1 	b.w	8010208 <_close_r>

0800f226 <strchr>:
 800f226:	b2c9      	uxtb	r1, r1
 800f228:	4603      	mov	r3, r0
 800f22a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f22e:	b11a      	cbz	r2, 800f238 <strchr+0x12>
 800f230:	428a      	cmp	r2, r1
 800f232:	d1f9      	bne.n	800f228 <strchr+0x2>
 800f234:	4618      	mov	r0, r3
 800f236:	4770      	bx	lr
 800f238:	2900      	cmp	r1, #0
 800f23a:	bf18      	it	ne
 800f23c:	2300      	movne	r3, #0
 800f23e:	e7f9      	b.n	800f234 <strchr+0xe>

0800f240 <strcpy>:
 800f240:	4603      	mov	r3, r0
 800f242:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f246:	f803 2b01 	strb.w	r2, [r3], #1
 800f24a:	2a00      	cmp	r2, #0
 800f24c:	d1f9      	bne.n	800f242 <strcpy+0x2>
 800f24e:	4770      	bx	lr

0800f250 <strncmp>:
 800f250:	b510      	push	{r4, lr}
 800f252:	b16a      	cbz	r2, 800f270 <strncmp+0x20>
 800f254:	3901      	subs	r1, #1
 800f256:	1884      	adds	r4, r0, r2
 800f258:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f25c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f260:	4293      	cmp	r3, r2
 800f262:	d103      	bne.n	800f26c <strncmp+0x1c>
 800f264:	42a0      	cmp	r0, r4
 800f266:	d001      	beq.n	800f26c <strncmp+0x1c>
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d1f5      	bne.n	800f258 <strncmp+0x8>
 800f26c:	1a98      	subs	r0, r3, r2
 800f26e:	bd10      	pop	{r4, pc}
 800f270:	4610      	mov	r0, r2
 800f272:	e7fc      	b.n	800f26e <strncmp+0x1e>

0800f274 <sulp>:
 800f274:	b570      	push	{r4, r5, r6, lr}
 800f276:	4604      	mov	r4, r0
 800f278:	460d      	mov	r5, r1
 800f27a:	ec45 4b10 	vmov	d0, r4, r5
 800f27e:	4616      	mov	r6, r2
 800f280:	f002 ff78 	bl	8012174 <__ulp>
 800f284:	ec51 0b10 	vmov	r0, r1, d0
 800f288:	b17e      	cbz	r6, 800f2aa <sulp+0x36>
 800f28a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f28e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f292:	2b00      	cmp	r3, #0
 800f294:	dd09      	ble.n	800f2aa <sulp+0x36>
 800f296:	051b      	lsls	r3, r3, #20
 800f298:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f29c:	2400      	movs	r4, #0
 800f29e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f2a2:	4622      	mov	r2, r4
 800f2a4:	462b      	mov	r3, r5
 800f2a6:	f7f1 f9c7 	bl	8000638 <__aeabi_dmul>
 800f2aa:	bd70      	pop	{r4, r5, r6, pc}
 800f2ac:	0000      	movs	r0, r0
	...

0800f2b0 <_strtod_l>:
 800f2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2b4:	b0a3      	sub	sp, #140	; 0x8c
 800f2b6:	461f      	mov	r7, r3
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	931e      	str	r3, [sp, #120]	; 0x78
 800f2bc:	4ba4      	ldr	r3, [pc, #656]	; (800f550 <_strtod_l+0x2a0>)
 800f2be:	9219      	str	r2, [sp, #100]	; 0x64
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	9307      	str	r3, [sp, #28]
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	4688      	mov	r8, r1
 800f2ca:	f7f0 ff9b 	bl	8000204 <strlen>
 800f2ce:	f04f 0a00 	mov.w	sl, #0
 800f2d2:	4605      	mov	r5, r0
 800f2d4:	f04f 0b00 	mov.w	fp, #0
 800f2d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f2dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f2de:	781a      	ldrb	r2, [r3, #0]
 800f2e0:	2a2b      	cmp	r2, #43	; 0x2b
 800f2e2:	d04c      	beq.n	800f37e <_strtod_l+0xce>
 800f2e4:	d839      	bhi.n	800f35a <_strtod_l+0xaa>
 800f2e6:	2a0d      	cmp	r2, #13
 800f2e8:	d832      	bhi.n	800f350 <_strtod_l+0xa0>
 800f2ea:	2a08      	cmp	r2, #8
 800f2ec:	d832      	bhi.n	800f354 <_strtod_l+0xa4>
 800f2ee:	2a00      	cmp	r2, #0
 800f2f0:	d03c      	beq.n	800f36c <_strtod_l+0xbc>
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	930e      	str	r3, [sp, #56]	; 0x38
 800f2f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f2f8:	7833      	ldrb	r3, [r6, #0]
 800f2fa:	2b30      	cmp	r3, #48	; 0x30
 800f2fc:	f040 80b4 	bne.w	800f468 <_strtod_l+0x1b8>
 800f300:	7873      	ldrb	r3, [r6, #1]
 800f302:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f306:	2b58      	cmp	r3, #88	; 0x58
 800f308:	d16c      	bne.n	800f3e4 <_strtod_l+0x134>
 800f30a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f30c:	9301      	str	r3, [sp, #4]
 800f30e:	ab1e      	add	r3, sp, #120	; 0x78
 800f310:	9702      	str	r7, [sp, #8]
 800f312:	9300      	str	r3, [sp, #0]
 800f314:	4a8f      	ldr	r2, [pc, #572]	; (800f554 <_strtod_l+0x2a4>)
 800f316:	ab1f      	add	r3, sp, #124	; 0x7c
 800f318:	a91d      	add	r1, sp, #116	; 0x74
 800f31a:	4620      	mov	r0, r4
 800f31c:	f002 f81a 	bl	8011354 <__gethex>
 800f320:	f010 0707 	ands.w	r7, r0, #7
 800f324:	4605      	mov	r5, r0
 800f326:	d005      	beq.n	800f334 <_strtod_l+0x84>
 800f328:	2f06      	cmp	r7, #6
 800f32a:	d12a      	bne.n	800f382 <_strtod_l+0xd2>
 800f32c:	3601      	adds	r6, #1
 800f32e:	2300      	movs	r3, #0
 800f330:	961d      	str	r6, [sp, #116]	; 0x74
 800f332:	930e      	str	r3, [sp, #56]	; 0x38
 800f334:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f336:	2b00      	cmp	r3, #0
 800f338:	f040 8596 	bne.w	800fe68 <_strtod_l+0xbb8>
 800f33c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f33e:	b1db      	cbz	r3, 800f378 <_strtod_l+0xc8>
 800f340:	4652      	mov	r2, sl
 800f342:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f346:	ec43 2b10 	vmov	d0, r2, r3
 800f34a:	b023      	add	sp, #140	; 0x8c
 800f34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f350:	2a20      	cmp	r2, #32
 800f352:	d1ce      	bne.n	800f2f2 <_strtod_l+0x42>
 800f354:	3301      	adds	r3, #1
 800f356:	931d      	str	r3, [sp, #116]	; 0x74
 800f358:	e7c0      	b.n	800f2dc <_strtod_l+0x2c>
 800f35a:	2a2d      	cmp	r2, #45	; 0x2d
 800f35c:	d1c9      	bne.n	800f2f2 <_strtod_l+0x42>
 800f35e:	2201      	movs	r2, #1
 800f360:	920e      	str	r2, [sp, #56]	; 0x38
 800f362:	1c5a      	adds	r2, r3, #1
 800f364:	921d      	str	r2, [sp, #116]	; 0x74
 800f366:	785b      	ldrb	r3, [r3, #1]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d1c4      	bne.n	800f2f6 <_strtod_l+0x46>
 800f36c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f36e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f372:	2b00      	cmp	r3, #0
 800f374:	f040 8576 	bne.w	800fe64 <_strtod_l+0xbb4>
 800f378:	4652      	mov	r2, sl
 800f37a:	465b      	mov	r3, fp
 800f37c:	e7e3      	b.n	800f346 <_strtod_l+0x96>
 800f37e:	2200      	movs	r2, #0
 800f380:	e7ee      	b.n	800f360 <_strtod_l+0xb0>
 800f382:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f384:	b13a      	cbz	r2, 800f396 <_strtod_l+0xe6>
 800f386:	2135      	movs	r1, #53	; 0x35
 800f388:	a820      	add	r0, sp, #128	; 0x80
 800f38a:	f002 fffe 	bl	801238a <__copybits>
 800f38e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f390:	4620      	mov	r0, r4
 800f392:	f002 fbc3 	bl	8011b1c <_Bfree>
 800f396:	3f01      	subs	r7, #1
 800f398:	2f05      	cmp	r7, #5
 800f39a:	d807      	bhi.n	800f3ac <_strtod_l+0xfc>
 800f39c:	e8df f007 	tbb	[pc, r7]
 800f3a0:	1d180b0e 	.word	0x1d180b0e
 800f3a4:	030e      	.short	0x030e
 800f3a6:	f04f 0b00 	mov.w	fp, #0
 800f3aa:	46da      	mov	sl, fp
 800f3ac:	0728      	lsls	r0, r5, #28
 800f3ae:	d5c1      	bpl.n	800f334 <_strtod_l+0x84>
 800f3b0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f3b4:	e7be      	b.n	800f334 <_strtod_l+0x84>
 800f3b6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800f3ba:	e7f7      	b.n	800f3ac <_strtod_l+0xfc>
 800f3bc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800f3c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f3c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f3c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f3ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f3ce:	e7ed      	b.n	800f3ac <_strtod_l+0xfc>
 800f3d0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800f558 <_strtod_l+0x2a8>
 800f3d4:	f04f 0a00 	mov.w	sl, #0
 800f3d8:	e7e8      	b.n	800f3ac <_strtod_l+0xfc>
 800f3da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f3de:	f04f 3aff 	mov.w	sl, #4294967295
 800f3e2:	e7e3      	b.n	800f3ac <_strtod_l+0xfc>
 800f3e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f3e6:	1c5a      	adds	r2, r3, #1
 800f3e8:	921d      	str	r2, [sp, #116]	; 0x74
 800f3ea:	785b      	ldrb	r3, [r3, #1]
 800f3ec:	2b30      	cmp	r3, #48	; 0x30
 800f3ee:	d0f9      	beq.n	800f3e4 <_strtod_l+0x134>
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d09f      	beq.n	800f334 <_strtod_l+0x84>
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	f04f 0900 	mov.w	r9, #0
 800f3fa:	9304      	str	r3, [sp, #16]
 800f3fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f3fe:	930a      	str	r3, [sp, #40]	; 0x28
 800f400:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f404:	464f      	mov	r7, r9
 800f406:	220a      	movs	r2, #10
 800f408:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f40a:	7806      	ldrb	r6, [r0, #0]
 800f40c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f410:	b2d9      	uxtb	r1, r3
 800f412:	2909      	cmp	r1, #9
 800f414:	d92a      	bls.n	800f46c <_strtod_l+0x1bc>
 800f416:	9907      	ldr	r1, [sp, #28]
 800f418:	462a      	mov	r2, r5
 800f41a:	f7ff ff19 	bl	800f250 <strncmp>
 800f41e:	b398      	cbz	r0, 800f488 <_strtod_l+0x1d8>
 800f420:	2000      	movs	r0, #0
 800f422:	4633      	mov	r3, r6
 800f424:	463d      	mov	r5, r7
 800f426:	9007      	str	r0, [sp, #28]
 800f428:	4602      	mov	r2, r0
 800f42a:	2b65      	cmp	r3, #101	; 0x65
 800f42c:	d001      	beq.n	800f432 <_strtod_l+0x182>
 800f42e:	2b45      	cmp	r3, #69	; 0x45
 800f430:	d118      	bne.n	800f464 <_strtod_l+0x1b4>
 800f432:	b91d      	cbnz	r5, 800f43c <_strtod_l+0x18c>
 800f434:	9b04      	ldr	r3, [sp, #16]
 800f436:	4303      	orrs	r3, r0
 800f438:	d098      	beq.n	800f36c <_strtod_l+0xbc>
 800f43a:	2500      	movs	r5, #0
 800f43c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800f440:	f108 0301 	add.w	r3, r8, #1
 800f444:	931d      	str	r3, [sp, #116]	; 0x74
 800f446:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f44a:	2b2b      	cmp	r3, #43	; 0x2b
 800f44c:	d075      	beq.n	800f53a <_strtod_l+0x28a>
 800f44e:	2b2d      	cmp	r3, #45	; 0x2d
 800f450:	d07b      	beq.n	800f54a <_strtod_l+0x29a>
 800f452:	f04f 0c00 	mov.w	ip, #0
 800f456:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f45a:	2909      	cmp	r1, #9
 800f45c:	f240 8082 	bls.w	800f564 <_strtod_l+0x2b4>
 800f460:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f464:	2600      	movs	r6, #0
 800f466:	e09d      	b.n	800f5a4 <_strtod_l+0x2f4>
 800f468:	2300      	movs	r3, #0
 800f46a:	e7c4      	b.n	800f3f6 <_strtod_l+0x146>
 800f46c:	2f08      	cmp	r7, #8
 800f46e:	bfd8      	it	le
 800f470:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f472:	f100 0001 	add.w	r0, r0, #1
 800f476:	bfda      	itte	le
 800f478:	fb02 3301 	mlale	r3, r2, r1, r3
 800f47c:	9309      	strle	r3, [sp, #36]	; 0x24
 800f47e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f482:	3701      	adds	r7, #1
 800f484:	901d      	str	r0, [sp, #116]	; 0x74
 800f486:	e7bf      	b.n	800f408 <_strtod_l+0x158>
 800f488:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f48a:	195a      	adds	r2, r3, r5
 800f48c:	921d      	str	r2, [sp, #116]	; 0x74
 800f48e:	5d5b      	ldrb	r3, [r3, r5]
 800f490:	2f00      	cmp	r7, #0
 800f492:	d037      	beq.n	800f504 <_strtod_l+0x254>
 800f494:	9007      	str	r0, [sp, #28]
 800f496:	463d      	mov	r5, r7
 800f498:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f49c:	2a09      	cmp	r2, #9
 800f49e:	d912      	bls.n	800f4c6 <_strtod_l+0x216>
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	e7c2      	b.n	800f42a <_strtod_l+0x17a>
 800f4a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f4a6:	1c5a      	adds	r2, r3, #1
 800f4a8:	921d      	str	r2, [sp, #116]	; 0x74
 800f4aa:	785b      	ldrb	r3, [r3, #1]
 800f4ac:	3001      	adds	r0, #1
 800f4ae:	2b30      	cmp	r3, #48	; 0x30
 800f4b0:	d0f8      	beq.n	800f4a4 <_strtod_l+0x1f4>
 800f4b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f4b6:	2a08      	cmp	r2, #8
 800f4b8:	f200 84db 	bhi.w	800fe72 <_strtod_l+0xbc2>
 800f4bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f4be:	9007      	str	r0, [sp, #28]
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	920a      	str	r2, [sp, #40]	; 0x28
 800f4c4:	4605      	mov	r5, r0
 800f4c6:	3b30      	subs	r3, #48	; 0x30
 800f4c8:	f100 0201 	add.w	r2, r0, #1
 800f4cc:	d014      	beq.n	800f4f8 <_strtod_l+0x248>
 800f4ce:	9907      	ldr	r1, [sp, #28]
 800f4d0:	4411      	add	r1, r2
 800f4d2:	9107      	str	r1, [sp, #28]
 800f4d4:	462a      	mov	r2, r5
 800f4d6:	eb00 0e05 	add.w	lr, r0, r5
 800f4da:	210a      	movs	r1, #10
 800f4dc:	4572      	cmp	r2, lr
 800f4de:	d113      	bne.n	800f508 <_strtod_l+0x258>
 800f4e0:	182a      	adds	r2, r5, r0
 800f4e2:	2a08      	cmp	r2, #8
 800f4e4:	f105 0501 	add.w	r5, r5, #1
 800f4e8:	4405      	add	r5, r0
 800f4ea:	dc1c      	bgt.n	800f526 <_strtod_l+0x276>
 800f4ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4ee:	220a      	movs	r2, #10
 800f4f0:	fb02 3301 	mla	r3, r2, r1, r3
 800f4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f4fa:	1c59      	adds	r1, r3, #1
 800f4fc:	911d      	str	r1, [sp, #116]	; 0x74
 800f4fe:	785b      	ldrb	r3, [r3, #1]
 800f500:	4610      	mov	r0, r2
 800f502:	e7c9      	b.n	800f498 <_strtod_l+0x1e8>
 800f504:	4638      	mov	r0, r7
 800f506:	e7d2      	b.n	800f4ae <_strtod_l+0x1fe>
 800f508:	2a08      	cmp	r2, #8
 800f50a:	dc04      	bgt.n	800f516 <_strtod_l+0x266>
 800f50c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f50e:	434e      	muls	r6, r1
 800f510:	9609      	str	r6, [sp, #36]	; 0x24
 800f512:	3201      	adds	r2, #1
 800f514:	e7e2      	b.n	800f4dc <_strtod_l+0x22c>
 800f516:	f102 0c01 	add.w	ip, r2, #1
 800f51a:	f1bc 0f10 	cmp.w	ip, #16
 800f51e:	bfd8      	it	le
 800f520:	fb01 f909 	mulle.w	r9, r1, r9
 800f524:	e7f5      	b.n	800f512 <_strtod_l+0x262>
 800f526:	2d10      	cmp	r5, #16
 800f528:	bfdc      	itt	le
 800f52a:	220a      	movle	r2, #10
 800f52c:	fb02 3909 	mlale	r9, r2, r9, r3
 800f530:	e7e1      	b.n	800f4f6 <_strtod_l+0x246>
 800f532:	2300      	movs	r3, #0
 800f534:	9307      	str	r3, [sp, #28]
 800f536:	2201      	movs	r2, #1
 800f538:	e77c      	b.n	800f434 <_strtod_l+0x184>
 800f53a:	f04f 0c00 	mov.w	ip, #0
 800f53e:	f108 0302 	add.w	r3, r8, #2
 800f542:	931d      	str	r3, [sp, #116]	; 0x74
 800f544:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f548:	e785      	b.n	800f456 <_strtod_l+0x1a6>
 800f54a:	f04f 0c01 	mov.w	ip, #1
 800f54e:	e7f6      	b.n	800f53e <_strtod_l+0x28e>
 800f550:	08014a48 	.word	0x08014a48
 800f554:	08014898 	.word	0x08014898
 800f558:	7ff00000 	.word	0x7ff00000
 800f55c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f55e:	1c59      	adds	r1, r3, #1
 800f560:	911d      	str	r1, [sp, #116]	; 0x74
 800f562:	785b      	ldrb	r3, [r3, #1]
 800f564:	2b30      	cmp	r3, #48	; 0x30
 800f566:	d0f9      	beq.n	800f55c <_strtod_l+0x2ac>
 800f568:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800f56c:	2908      	cmp	r1, #8
 800f56e:	f63f af79 	bhi.w	800f464 <_strtod_l+0x1b4>
 800f572:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f576:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f578:	9308      	str	r3, [sp, #32]
 800f57a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f57c:	1c59      	adds	r1, r3, #1
 800f57e:	911d      	str	r1, [sp, #116]	; 0x74
 800f580:	785b      	ldrb	r3, [r3, #1]
 800f582:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800f586:	2e09      	cmp	r6, #9
 800f588:	d937      	bls.n	800f5fa <_strtod_l+0x34a>
 800f58a:	9e08      	ldr	r6, [sp, #32]
 800f58c:	1b89      	subs	r1, r1, r6
 800f58e:	2908      	cmp	r1, #8
 800f590:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f594:	dc02      	bgt.n	800f59c <_strtod_l+0x2ec>
 800f596:	4576      	cmp	r6, lr
 800f598:	bfa8      	it	ge
 800f59a:	4676      	movge	r6, lr
 800f59c:	f1bc 0f00 	cmp.w	ip, #0
 800f5a0:	d000      	beq.n	800f5a4 <_strtod_l+0x2f4>
 800f5a2:	4276      	negs	r6, r6
 800f5a4:	2d00      	cmp	r5, #0
 800f5a6:	d14f      	bne.n	800f648 <_strtod_l+0x398>
 800f5a8:	9904      	ldr	r1, [sp, #16]
 800f5aa:	4301      	orrs	r1, r0
 800f5ac:	f47f aec2 	bne.w	800f334 <_strtod_l+0x84>
 800f5b0:	2a00      	cmp	r2, #0
 800f5b2:	f47f aedb 	bne.w	800f36c <_strtod_l+0xbc>
 800f5b6:	2b69      	cmp	r3, #105	; 0x69
 800f5b8:	d027      	beq.n	800f60a <_strtod_l+0x35a>
 800f5ba:	dc24      	bgt.n	800f606 <_strtod_l+0x356>
 800f5bc:	2b49      	cmp	r3, #73	; 0x49
 800f5be:	d024      	beq.n	800f60a <_strtod_l+0x35a>
 800f5c0:	2b4e      	cmp	r3, #78	; 0x4e
 800f5c2:	f47f aed3 	bne.w	800f36c <_strtod_l+0xbc>
 800f5c6:	499e      	ldr	r1, [pc, #632]	; (800f840 <_strtod_l+0x590>)
 800f5c8:	a81d      	add	r0, sp, #116	; 0x74
 800f5ca:	f002 f91b 	bl	8011804 <__match>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	f43f aecc 	beq.w	800f36c <_strtod_l+0xbc>
 800f5d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	2b28      	cmp	r3, #40	; 0x28
 800f5da:	d12d      	bne.n	800f638 <_strtod_l+0x388>
 800f5dc:	4999      	ldr	r1, [pc, #612]	; (800f844 <_strtod_l+0x594>)
 800f5de:	aa20      	add	r2, sp, #128	; 0x80
 800f5e0:	a81d      	add	r0, sp, #116	; 0x74
 800f5e2:	f002 f923 	bl	801182c <__hexnan>
 800f5e6:	2805      	cmp	r0, #5
 800f5e8:	d126      	bne.n	800f638 <_strtod_l+0x388>
 800f5ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5ec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800f5f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f5f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f5f8:	e69c      	b.n	800f334 <_strtod_l+0x84>
 800f5fa:	210a      	movs	r1, #10
 800f5fc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f600:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f604:	e7b9      	b.n	800f57a <_strtod_l+0x2ca>
 800f606:	2b6e      	cmp	r3, #110	; 0x6e
 800f608:	e7db      	b.n	800f5c2 <_strtod_l+0x312>
 800f60a:	498f      	ldr	r1, [pc, #572]	; (800f848 <_strtod_l+0x598>)
 800f60c:	a81d      	add	r0, sp, #116	; 0x74
 800f60e:	f002 f8f9 	bl	8011804 <__match>
 800f612:	2800      	cmp	r0, #0
 800f614:	f43f aeaa 	beq.w	800f36c <_strtod_l+0xbc>
 800f618:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f61a:	498c      	ldr	r1, [pc, #560]	; (800f84c <_strtod_l+0x59c>)
 800f61c:	3b01      	subs	r3, #1
 800f61e:	a81d      	add	r0, sp, #116	; 0x74
 800f620:	931d      	str	r3, [sp, #116]	; 0x74
 800f622:	f002 f8ef 	bl	8011804 <__match>
 800f626:	b910      	cbnz	r0, 800f62e <_strtod_l+0x37e>
 800f628:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f62a:	3301      	adds	r3, #1
 800f62c:	931d      	str	r3, [sp, #116]	; 0x74
 800f62e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800f85c <_strtod_l+0x5ac>
 800f632:	f04f 0a00 	mov.w	sl, #0
 800f636:	e67d      	b.n	800f334 <_strtod_l+0x84>
 800f638:	4885      	ldr	r0, [pc, #532]	; (800f850 <_strtod_l+0x5a0>)
 800f63a:	f003 fce1 	bl	8013000 <nan>
 800f63e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f642:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f646:	e675      	b.n	800f334 <_strtod_l+0x84>
 800f648:	9b07      	ldr	r3, [sp, #28]
 800f64a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f64c:	1af3      	subs	r3, r6, r3
 800f64e:	2f00      	cmp	r7, #0
 800f650:	bf08      	it	eq
 800f652:	462f      	moveq	r7, r5
 800f654:	2d10      	cmp	r5, #16
 800f656:	9308      	str	r3, [sp, #32]
 800f658:	46a8      	mov	r8, r5
 800f65a:	bfa8      	it	ge
 800f65c:	f04f 0810 	movge.w	r8, #16
 800f660:	f7f0 ff70 	bl	8000544 <__aeabi_ui2d>
 800f664:	2d09      	cmp	r5, #9
 800f666:	4682      	mov	sl, r0
 800f668:	468b      	mov	fp, r1
 800f66a:	dd13      	ble.n	800f694 <_strtod_l+0x3e4>
 800f66c:	4b79      	ldr	r3, [pc, #484]	; (800f854 <_strtod_l+0x5a4>)
 800f66e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f672:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f676:	f7f0 ffdf 	bl	8000638 <__aeabi_dmul>
 800f67a:	4682      	mov	sl, r0
 800f67c:	4648      	mov	r0, r9
 800f67e:	468b      	mov	fp, r1
 800f680:	f7f0 ff60 	bl	8000544 <__aeabi_ui2d>
 800f684:	4602      	mov	r2, r0
 800f686:	460b      	mov	r3, r1
 800f688:	4650      	mov	r0, sl
 800f68a:	4659      	mov	r1, fp
 800f68c:	f7f0 fe1e 	bl	80002cc <__adddf3>
 800f690:	4682      	mov	sl, r0
 800f692:	468b      	mov	fp, r1
 800f694:	2d0f      	cmp	r5, #15
 800f696:	dc38      	bgt.n	800f70a <_strtod_l+0x45a>
 800f698:	9b08      	ldr	r3, [sp, #32]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	f43f ae4a 	beq.w	800f334 <_strtod_l+0x84>
 800f6a0:	dd24      	ble.n	800f6ec <_strtod_l+0x43c>
 800f6a2:	2b16      	cmp	r3, #22
 800f6a4:	dc0b      	bgt.n	800f6be <_strtod_l+0x40e>
 800f6a6:	4d6b      	ldr	r5, [pc, #428]	; (800f854 <_strtod_l+0x5a4>)
 800f6a8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800f6ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f6b0:	4652      	mov	r2, sl
 800f6b2:	465b      	mov	r3, fp
 800f6b4:	f7f0 ffc0 	bl	8000638 <__aeabi_dmul>
 800f6b8:	4682      	mov	sl, r0
 800f6ba:	468b      	mov	fp, r1
 800f6bc:	e63a      	b.n	800f334 <_strtod_l+0x84>
 800f6be:	9a08      	ldr	r2, [sp, #32]
 800f6c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	db20      	blt.n	800f70a <_strtod_l+0x45a>
 800f6c8:	4c62      	ldr	r4, [pc, #392]	; (800f854 <_strtod_l+0x5a4>)
 800f6ca:	f1c5 050f 	rsb	r5, r5, #15
 800f6ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f6d2:	4652      	mov	r2, sl
 800f6d4:	465b      	mov	r3, fp
 800f6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6da:	f7f0 ffad 	bl	8000638 <__aeabi_dmul>
 800f6de:	9b08      	ldr	r3, [sp, #32]
 800f6e0:	1b5d      	subs	r5, r3, r5
 800f6e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f6e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f6ea:	e7e3      	b.n	800f6b4 <_strtod_l+0x404>
 800f6ec:	9b08      	ldr	r3, [sp, #32]
 800f6ee:	3316      	adds	r3, #22
 800f6f0:	db0b      	blt.n	800f70a <_strtod_l+0x45a>
 800f6f2:	9b07      	ldr	r3, [sp, #28]
 800f6f4:	4a57      	ldr	r2, [pc, #348]	; (800f854 <_strtod_l+0x5a4>)
 800f6f6:	1b9e      	subs	r6, r3, r6
 800f6f8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f6fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f700:	4650      	mov	r0, sl
 800f702:	4659      	mov	r1, fp
 800f704:	f7f1 f8c2 	bl	800088c <__aeabi_ddiv>
 800f708:	e7d6      	b.n	800f6b8 <_strtod_l+0x408>
 800f70a:	9b08      	ldr	r3, [sp, #32]
 800f70c:	eba5 0808 	sub.w	r8, r5, r8
 800f710:	4498      	add	r8, r3
 800f712:	f1b8 0f00 	cmp.w	r8, #0
 800f716:	dd71      	ble.n	800f7fc <_strtod_l+0x54c>
 800f718:	f018 030f 	ands.w	r3, r8, #15
 800f71c:	d00a      	beq.n	800f734 <_strtod_l+0x484>
 800f71e:	494d      	ldr	r1, [pc, #308]	; (800f854 <_strtod_l+0x5a4>)
 800f720:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f724:	4652      	mov	r2, sl
 800f726:	465b      	mov	r3, fp
 800f728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f72c:	f7f0 ff84 	bl	8000638 <__aeabi_dmul>
 800f730:	4682      	mov	sl, r0
 800f732:	468b      	mov	fp, r1
 800f734:	f038 080f 	bics.w	r8, r8, #15
 800f738:	d04d      	beq.n	800f7d6 <_strtod_l+0x526>
 800f73a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f73e:	dd22      	ble.n	800f786 <_strtod_l+0x4d6>
 800f740:	2500      	movs	r5, #0
 800f742:	462e      	mov	r6, r5
 800f744:	9509      	str	r5, [sp, #36]	; 0x24
 800f746:	9507      	str	r5, [sp, #28]
 800f748:	2322      	movs	r3, #34	; 0x22
 800f74a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800f85c <_strtod_l+0x5ac>
 800f74e:	6023      	str	r3, [r4, #0]
 800f750:	f04f 0a00 	mov.w	sl, #0
 800f754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f756:	2b00      	cmp	r3, #0
 800f758:	f43f adec 	beq.w	800f334 <_strtod_l+0x84>
 800f75c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f75e:	4620      	mov	r0, r4
 800f760:	f002 f9dc 	bl	8011b1c <_Bfree>
 800f764:	9907      	ldr	r1, [sp, #28]
 800f766:	4620      	mov	r0, r4
 800f768:	f002 f9d8 	bl	8011b1c <_Bfree>
 800f76c:	4631      	mov	r1, r6
 800f76e:	4620      	mov	r0, r4
 800f770:	f002 f9d4 	bl	8011b1c <_Bfree>
 800f774:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f776:	4620      	mov	r0, r4
 800f778:	f002 f9d0 	bl	8011b1c <_Bfree>
 800f77c:	4629      	mov	r1, r5
 800f77e:	4620      	mov	r0, r4
 800f780:	f002 f9cc 	bl	8011b1c <_Bfree>
 800f784:	e5d6      	b.n	800f334 <_strtod_l+0x84>
 800f786:	2300      	movs	r3, #0
 800f788:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f78c:	4650      	mov	r0, sl
 800f78e:	4659      	mov	r1, fp
 800f790:	4699      	mov	r9, r3
 800f792:	f1b8 0f01 	cmp.w	r8, #1
 800f796:	dc21      	bgt.n	800f7dc <_strtod_l+0x52c>
 800f798:	b10b      	cbz	r3, 800f79e <_strtod_l+0x4ee>
 800f79a:	4682      	mov	sl, r0
 800f79c:	468b      	mov	fp, r1
 800f79e:	4b2e      	ldr	r3, [pc, #184]	; (800f858 <_strtod_l+0x5a8>)
 800f7a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f7a4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f7a8:	4652      	mov	r2, sl
 800f7aa:	465b      	mov	r3, fp
 800f7ac:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f7b0:	f7f0 ff42 	bl	8000638 <__aeabi_dmul>
 800f7b4:	4b29      	ldr	r3, [pc, #164]	; (800f85c <_strtod_l+0x5ac>)
 800f7b6:	460a      	mov	r2, r1
 800f7b8:	400b      	ands	r3, r1
 800f7ba:	4929      	ldr	r1, [pc, #164]	; (800f860 <_strtod_l+0x5b0>)
 800f7bc:	428b      	cmp	r3, r1
 800f7be:	4682      	mov	sl, r0
 800f7c0:	d8be      	bhi.n	800f740 <_strtod_l+0x490>
 800f7c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f7c6:	428b      	cmp	r3, r1
 800f7c8:	bf86      	itte	hi
 800f7ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f864 <_strtod_l+0x5b4>
 800f7ce:	f04f 3aff 	movhi.w	sl, #4294967295
 800f7d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	9304      	str	r3, [sp, #16]
 800f7da:	e081      	b.n	800f8e0 <_strtod_l+0x630>
 800f7dc:	f018 0f01 	tst.w	r8, #1
 800f7e0:	d007      	beq.n	800f7f2 <_strtod_l+0x542>
 800f7e2:	4b1d      	ldr	r3, [pc, #116]	; (800f858 <_strtod_l+0x5a8>)
 800f7e4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ec:	f7f0 ff24 	bl	8000638 <__aeabi_dmul>
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	f109 0901 	add.w	r9, r9, #1
 800f7f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f7fa:	e7ca      	b.n	800f792 <_strtod_l+0x4e2>
 800f7fc:	d0eb      	beq.n	800f7d6 <_strtod_l+0x526>
 800f7fe:	f1c8 0800 	rsb	r8, r8, #0
 800f802:	f018 020f 	ands.w	r2, r8, #15
 800f806:	d00a      	beq.n	800f81e <_strtod_l+0x56e>
 800f808:	4b12      	ldr	r3, [pc, #72]	; (800f854 <_strtod_l+0x5a4>)
 800f80a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f80e:	4650      	mov	r0, sl
 800f810:	4659      	mov	r1, fp
 800f812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f816:	f7f1 f839 	bl	800088c <__aeabi_ddiv>
 800f81a:	4682      	mov	sl, r0
 800f81c:	468b      	mov	fp, r1
 800f81e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f822:	d0d8      	beq.n	800f7d6 <_strtod_l+0x526>
 800f824:	f1b8 0f1f 	cmp.w	r8, #31
 800f828:	dd1e      	ble.n	800f868 <_strtod_l+0x5b8>
 800f82a:	2500      	movs	r5, #0
 800f82c:	462e      	mov	r6, r5
 800f82e:	9509      	str	r5, [sp, #36]	; 0x24
 800f830:	9507      	str	r5, [sp, #28]
 800f832:	2322      	movs	r3, #34	; 0x22
 800f834:	f04f 0a00 	mov.w	sl, #0
 800f838:	f04f 0b00 	mov.w	fp, #0
 800f83c:	6023      	str	r3, [r4, #0]
 800f83e:	e789      	b.n	800f754 <_strtod_l+0x4a4>
 800f840:	0801486d 	.word	0x0801486d
 800f844:	080148ac 	.word	0x080148ac
 800f848:	08014865 	.word	0x08014865
 800f84c:	080148eb 	.word	0x080148eb
 800f850:	08014c23 	.word	0x08014c23
 800f854:	08014ae8 	.word	0x08014ae8
 800f858:	08014ac0 	.word	0x08014ac0
 800f85c:	7ff00000 	.word	0x7ff00000
 800f860:	7ca00000 	.word	0x7ca00000
 800f864:	7fefffff 	.word	0x7fefffff
 800f868:	f018 0310 	ands.w	r3, r8, #16
 800f86c:	bf18      	it	ne
 800f86e:	236a      	movne	r3, #106	; 0x6a
 800f870:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800fc28 <_strtod_l+0x978>
 800f874:	9304      	str	r3, [sp, #16]
 800f876:	4650      	mov	r0, sl
 800f878:	4659      	mov	r1, fp
 800f87a:	2300      	movs	r3, #0
 800f87c:	f018 0f01 	tst.w	r8, #1
 800f880:	d004      	beq.n	800f88c <_strtod_l+0x5dc>
 800f882:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f886:	f7f0 fed7 	bl	8000638 <__aeabi_dmul>
 800f88a:	2301      	movs	r3, #1
 800f88c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f890:	f109 0908 	add.w	r9, r9, #8
 800f894:	d1f2      	bne.n	800f87c <_strtod_l+0x5cc>
 800f896:	b10b      	cbz	r3, 800f89c <_strtod_l+0x5ec>
 800f898:	4682      	mov	sl, r0
 800f89a:	468b      	mov	fp, r1
 800f89c:	9b04      	ldr	r3, [sp, #16]
 800f89e:	b1bb      	cbz	r3, 800f8d0 <_strtod_l+0x620>
 800f8a0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f8a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	4659      	mov	r1, fp
 800f8ac:	dd10      	ble.n	800f8d0 <_strtod_l+0x620>
 800f8ae:	2b1f      	cmp	r3, #31
 800f8b0:	f340 8128 	ble.w	800fb04 <_strtod_l+0x854>
 800f8b4:	2b34      	cmp	r3, #52	; 0x34
 800f8b6:	bfde      	ittt	le
 800f8b8:	3b20      	suble	r3, #32
 800f8ba:	f04f 32ff 	movle.w	r2, #4294967295
 800f8be:	fa02 f303 	lslle.w	r3, r2, r3
 800f8c2:	f04f 0a00 	mov.w	sl, #0
 800f8c6:	bfcc      	ite	gt
 800f8c8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f8cc:	ea03 0b01 	andle.w	fp, r3, r1
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	4650      	mov	r0, sl
 800f8d6:	4659      	mov	r1, fp
 800f8d8:	f7f1 f916 	bl	8000b08 <__aeabi_dcmpeq>
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	d1a4      	bne.n	800f82a <_strtod_l+0x57a>
 800f8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8e2:	9300      	str	r3, [sp, #0]
 800f8e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f8e6:	462b      	mov	r3, r5
 800f8e8:	463a      	mov	r2, r7
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f002 f982 	bl	8011bf4 <__s2b>
 800f8f0:	9009      	str	r0, [sp, #36]	; 0x24
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	f43f af24 	beq.w	800f740 <_strtod_l+0x490>
 800f8f8:	9b07      	ldr	r3, [sp, #28]
 800f8fa:	1b9e      	subs	r6, r3, r6
 800f8fc:	9b08      	ldr	r3, [sp, #32]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	bfb4      	ite	lt
 800f902:	4633      	movlt	r3, r6
 800f904:	2300      	movge	r3, #0
 800f906:	9310      	str	r3, [sp, #64]	; 0x40
 800f908:	9b08      	ldr	r3, [sp, #32]
 800f90a:	2500      	movs	r5, #0
 800f90c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f910:	9318      	str	r3, [sp, #96]	; 0x60
 800f912:	462e      	mov	r6, r5
 800f914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f916:	4620      	mov	r0, r4
 800f918:	6859      	ldr	r1, [r3, #4]
 800f91a:	f002 f8bf 	bl	8011a9c <_Balloc>
 800f91e:	9007      	str	r0, [sp, #28]
 800f920:	2800      	cmp	r0, #0
 800f922:	f43f af11 	beq.w	800f748 <_strtod_l+0x498>
 800f926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f928:	691a      	ldr	r2, [r3, #16]
 800f92a:	3202      	adds	r2, #2
 800f92c:	f103 010c 	add.w	r1, r3, #12
 800f930:	0092      	lsls	r2, r2, #2
 800f932:	300c      	adds	r0, #12
 800f934:	f7fe fc96 	bl	800e264 <memcpy>
 800f938:	ec4b ab10 	vmov	d0, sl, fp
 800f93c:	aa20      	add	r2, sp, #128	; 0x80
 800f93e:	a91f      	add	r1, sp, #124	; 0x7c
 800f940:	4620      	mov	r0, r4
 800f942:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f946:	f002 fc91 	bl	801226c <__d2b>
 800f94a:	901e      	str	r0, [sp, #120]	; 0x78
 800f94c:	2800      	cmp	r0, #0
 800f94e:	f43f aefb 	beq.w	800f748 <_strtod_l+0x498>
 800f952:	2101      	movs	r1, #1
 800f954:	4620      	mov	r0, r4
 800f956:	f002 f9e7 	bl	8011d28 <__i2b>
 800f95a:	4606      	mov	r6, r0
 800f95c:	2800      	cmp	r0, #0
 800f95e:	f43f aef3 	beq.w	800f748 <_strtod_l+0x498>
 800f962:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f964:	9904      	ldr	r1, [sp, #16]
 800f966:	2b00      	cmp	r3, #0
 800f968:	bfab      	itete	ge
 800f96a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800f96c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800f96e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800f970:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800f974:	bfac      	ite	ge
 800f976:	eb03 0902 	addge.w	r9, r3, r2
 800f97a:	1ad7      	sublt	r7, r2, r3
 800f97c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f97e:	eba3 0801 	sub.w	r8, r3, r1
 800f982:	4490      	add	r8, r2
 800f984:	4ba3      	ldr	r3, [pc, #652]	; (800fc14 <_strtod_l+0x964>)
 800f986:	f108 38ff 	add.w	r8, r8, #4294967295
 800f98a:	4598      	cmp	r8, r3
 800f98c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f990:	f280 80cc 	bge.w	800fb2c <_strtod_l+0x87c>
 800f994:	eba3 0308 	sub.w	r3, r3, r8
 800f998:	2b1f      	cmp	r3, #31
 800f99a:	eba2 0203 	sub.w	r2, r2, r3
 800f99e:	f04f 0101 	mov.w	r1, #1
 800f9a2:	f300 80b6 	bgt.w	800fb12 <_strtod_l+0x862>
 800f9a6:	fa01 f303 	lsl.w	r3, r1, r3
 800f9aa:	9311      	str	r3, [sp, #68]	; 0x44
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	930c      	str	r3, [sp, #48]	; 0x30
 800f9b0:	eb09 0802 	add.w	r8, r9, r2
 800f9b4:	9b04      	ldr	r3, [sp, #16]
 800f9b6:	45c1      	cmp	r9, r8
 800f9b8:	4417      	add	r7, r2
 800f9ba:	441f      	add	r7, r3
 800f9bc:	464b      	mov	r3, r9
 800f9be:	bfa8      	it	ge
 800f9c0:	4643      	movge	r3, r8
 800f9c2:	42bb      	cmp	r3, r7
 800f9c4:	bfa8      	it	ge
 800f9c6:	463b      	movge	r3, r7
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	bfc2      	ittt	gt
 800f9cc:	eba8 0803 	subgt.w	r8, r8, r3
 800f9d0:	1aff      	subgt	r7, r7, r3
 800f9d2:	eba9 0903 	subgt.w	r9, r9, r3
 800f9d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	dd17      	ble.n	800fa0c <_strtod_l+0x75c>
 800f9dc:	4631      	mov	r1, r6
 800f9de:	461a      	mov	r2, r3
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f002 fa5d 	bl	8011ea0 <__pow5mult>
 800f9e6:	4606      	mov	r6, r0
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	f43f aead 	beq.w	800f748 <_strtod_l+0x498>
 800f9ee:	4601      	mov	r1, r0
 800f9f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	f002 f9ae 	bl	8011d54 <__multiply>
 800f9f8:	900f      	str	r0, [sp, #60]	; 0x3c
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	f43f aea4 	beq.w	800f748 <_strtod_l+0x498>
 800fa00:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fa02:	4620      	mov	r0, r4
 800fa04:	f002 f88a 	bl	8011b1c <_Bfree>
 800fa08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa0a:	931e      	str	r3, [sp, #120]	; 0x78
 800fa0c:	f1b8 0f00 	cmp.w	r8, #0
 800fa10:	f300 8091 	bgt.w	800fb36 <_strtod_l+0x886>
 800fa14:	9b08      	ldr	r3, [sp, #32]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	dd08      	ble.n	800fa2c <_strtod_l+0x77c>
 800fa1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fa1c:	9907      	ldr	r1, [sp, #28]
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f002 fa3e 	bl	8011ea0 <__pow5mult>
 800fa24:	9007      	str	r0, [sp, #28]
 800fa26:	2800      	cmp	r0, #0
 800fa28:	f43f ae8e 	beq.w	800f748 <_strtod_l+0x498>
 800fa2c:	2f00      	cmp	r7, #0
 800fa2e:	dd08      	ble.n	800fa42 <_strtod_l+0x792>
 800fa30:	9907      	ldr	r1, [sp, #28]
 800fa32:	463a      	mov	r2, r7
 800fa34:	4620      	mov	r0, r4
 800fa36:	f002 fa8d 	bl	8011f54 <__lshift>
 800fa3a:	9007      	str	r0, [sp, #28]
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	f43f ae83 	beq.w	800f748 <_strtod_l+0x498>
 800fa42:	f1b9 0f00 	cmp.w	r9, #0
 800fa46:	dd08      	ble.n	800fa5a <_strtod_l+0x7aa>
 800fa48:	4631      	mov	r1, r6
 800fa4a:	464a      	mov	r2, r9
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f002 fa81 	bl	8011f54 <__lshift>
 800fa52:	4606      	mov	r6, r0
 800fa54:	2800      	cmp	r0, #0
 800fa56:	f43f ae77 	beq.w	800f748 <_strtod_l+0x498>
 800fa5a:	9a07      	ldr	r2, [sp, #28]
 800fa5c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f002 fb00 	bl	8012064 <__mdiff>
 800fa64:	4605      	mov	r5, r0
 800fa66:	2800      	cmp	r0, #0
 800fa68:	f43f ae6e 	beq.w	800f748 <_strtod_l+0x498>
 800fa6c:	68c3      	ldr	r3, [r0, #12]
 800fa6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa70:	2300      	movs	r3, #0
 800fa72:	60c3      	str	r3, [r0, #12]
 800fa74:	4631      	mov	r1, r6
 800fa76:	f002 fad9 	bl	801202c <__mcmp>
 800fa7a:	2800      	cmp	r0, #0
 800fa7c:	da65      	bge.n	800fb4a <_strtod_l+0x89a>
 800fa7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa80:	ea53 030a 	orrs.w	r3, r3, sl
 800fa84:	f040 8087 	bne.w	800fb96 <_strtod_l+0x8e6>
 800fa88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	f040 8082 	bne.w	800fb96 <_strtod_l+0x8e6>
 800fa92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fa96:	0d1b      	lsrs	r3, r3, #20
 800fa98:	051b      	lsls	r3, r3, #20
 800fa9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fa9e:	d97a      	bls.n	800fb96 <_strtod_l+0x8e6>
 800faa0:	696b      	ldr	r3, [r5, #20]
 800faa2:	b913      	cbnz	r3, 800faaa <_strtod_l+0x7fa>
 800faa4:	692b      	ldr	r3, [r5, #16]
 800faa6:	2b01      	cmp	r3, #1
 800faa8:	dd75      	ble.n	800fb96 <_strtod_l+0x8e6>
 800faaa:	4629      	mov	r1, r5
 800faac:	2201      	movs	r2, #1
 800faae:	4620      	mov	r0, r4
 800fab0:	f002 fa50 	bl	8011f54 <__lshift>
 800fab4:	4631      	mov	r1, r6
 800fab6:	4605      	mov	r5, r0
 800fab8:	f002 fab8 	bl	801202c <__mcmp>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	dd6a      	ble.n	800fb96 <_strtod_l+0x8e6>
 800fac0:	9904      	ldr	r1, [sp, #16]
 800fac2:	4a55      	ldr	r2, [pc, #340]	; (800fc18 <_strtod_l+0x968>)
 800fac4:	465b      	mov	r3, fp
 800fac6:	2900      	cmp	r1, #0
 800fac8:	f000 8085 	beq.w	800fbd6 <_strtod_l+0x926>
 800facc:	ea02 010b 	and.w	r1, r2, fp
 800fad0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fad4:	dc7f      	bgt.n	800fbd6 <_strtod_l+0x926>
 800fad6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fada:	f77f aeaa 	ble.w	800f832 <_strtod_l+0x582>
 800fade:	4a4f      	ldr	r2, [pc, #316]	; (800fc1c <_strtod_l+0x96c>)
 800fae0:	2300      	movs	r3, #0
 800fae2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800fae6:	4650      	mov	r0, sl
 800fae8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800faec:	4659      	mov	r1, fp
 800faee:	f7f0 fda3 	bl	8000638 <__aeabi_dmul>
 800faf2:	460b      	mov	r3, r1
 800faf4:	4303      	orrs	r3, r0
 800faf6:	bf08      	it	eq
 800faf8:	2322      	moveq	r3, #34	; 0x22
 800fafa:	4682      	mov	sl, r0
 800fafc:	468b      	mov	fp, r1
 800fafe:	bf08      	it	eq
 800fb00:	6023      	streq	r3, [r4, #0]
 800fb02:	e62b      	b.n	800f75c <_strtod_l+0x4ac>
 800fb04:	f04f 32ff 	mov.w	r2, #4294967295
 800fb08:	fa02 f303 	lsl.w	r3, r2, r3
 800fb0c:	ea03 0a0a 	and.w	sl, r3, sl
 800fb10:	e6de      	b.n	800f8d0 <_strtod_l+0x620>
 800fb12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fb16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800fb1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fb1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fb22:	fa01 f308 	lsl.w	r3, r1, r8
 800fb26:	930c      	str	r3, [sp, #48]	; 0x30
 800fb28:	9111      	str	r1, [sp, #68]	; 0x44
 800fb2a:	e741      	b.n	800f9b0 <_strtod_l+0x700>
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	930c      	str	r3, [sp, #48]	; 0x30
 800fb30:	2301      	movs	r3, #1
 800fb32:	9311      	str	r3, [sp, #68]	; 0x44
 800fb34:	e73c      	b.n	800f9b0 <_strtod_l+0x700>
 800fb36:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fb38:	4642      	mov	r2, r8
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	f002 fa0a 	bl	8011f54 <__lshift>
 800fb40:	901e      	str	r0, [sp, #120]	; 0x78
 800fb42:	2800      	cmp	r0, #0
 800fb44:	f47f af66 	bne.w	800fa14 <_strtod_l+0x764>
 800fb48:	e5fe      	b.n	800f748 <_strtod_l+0x498>
 800fb4a:	465f      	mov	r7, fp
 800fb4c:	d16e      	bne.n	800fc2c <_strtod_l+0x97c>
 800fb4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fb50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fb54:	b342      	cbz	r2, 800fba8 <_strtod_l+0x8f8>
 800fb56:	4a32      	ldr	r2, [pc, #200]	; (800fc20 <_strtod_l+0x970>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d128      	bne.n	800fbae <_strtod_l+0x8fe>
 800fb5c:	9b04      	ldr	r3, [sp, #16]
 800fb5e:	4650      	mov	r0, sl
 800fb60:	b1eb      	cbz	r3, 800fb9e <_strtod_l+0x8ee>
 800fb62:	4a2d      	ldr	r2, [pc, #180]	; (800fc18 <_strtod_l+0x968>)
 800fb64:	403a      	ands	r2, r7
 800fb66:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800fb6a:	f04f 31ff 	mov.w	r1, #4294967295
 800fb6e:	d819      	bhi.n	800fba4 <_strtod_l+0x8f4>
 800fb70:	0d12      	lsrs	r2, r2, #20
 800fb72:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fb76:	fa01 f303 	lsl.w	r3, r1, r3
 800fb7a:	4298      	cmp	r0, r3
 800fb7c:	d117      	bne.n	800fbae <_strtod_l+0x8fe>
 800fb7e:	4b29      	ldr	r3, [pc, #164]	; (800fc24 <_strtod_l+0x974>)
 800fb80:	429f      	cmp	r7, r3
 800fb82:	d102      	bne.n	800fb8a <_strtod_l+0x8da>
 800fb84:	3001      	adds	r0, #1
 800fb86:	f43f addf 	beq.w	800f748 <_strtod_l+0x498>
 800fb8a:	4b23      	ldr	r3, [pc, #140]	; (800fc18 <_strtod_l+0x968>)
 800fb8c:	403b      	ands	r3, r7
 800fb8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fb92:	f04f 0a00 	mov.w	sl, #0
 800fb96:	9b04      	ldr	r3, [sp, #16]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d1a0      	bne.n	800fade <_strtod_l+0x82e>
 800fb9c:	e5de      	b.n	800f75c <_strtod_l+0x4ac>
 800fb9e:	f04f 33ff 	mov.w	r3, #4294967295
 800fba2:	e7ea      	b.n	800fb7a <_strtod_l+0x8ca>
 800fba4:	460b      	mov	r3, r1
 800fba6:	e7e8      	b.n	800fb7a <_strtod_l+0x8ca>
 800fba8:	ea53 030a 	orrs.w	r3, r3, sl
 800fbac:	d088      	beq.n	800fac0 <_strtod_l+0x810>
 800fbae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbb0:	b1db      	cbz	r3, 800fbea <_strtod_l+0x93a>
 800fbb2:	423b      	tst	r3, r7
 800fbb4:	d0ef      	beq.n	800fb96 <_strtod_l+0x8e6>
 800fbb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbb8:	9a04      	ldr	r2, [sp, #16]
 800fbba:	4650      	mov	r0, sl
 800fbbc:	4659      	mov	r1, fp
 800fbbe:	b1c3      	cbz	r3, 800fbf2 <_strtod_l+0x942>
 800fbc0:	f7ff fb58 	bl	800f274 <sulp>
 800fbc4:	4602      	mov	r2, r0
 800fbc6:	460b      	mov	r3, r1
 800fbc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fbcc:	f7f0 fb7e 	bl	80002cc <__adddf3>
 800fbd0:	4682      	mov	sl, r0
 800fbd2:	468b      	mov	fp, r1
 800fbd4:	e7df      	b.n	800fb96 <_strtod_l+0x8e6>
 800fbd6:	4013      	ands	r3, r2
 800fbd8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fbdc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fbe0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fbe4:	f04f 3aff 	mov.w	sl, #4294967295
 800fbe8:	e7d5      	b.n	800fb96 <_strtod_l+0x8e6>
 800fbea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fbec:	ea13 0f0a 	tst.w	r3, sl
 800fbf0:	e7e0      	b.n	800fbb4 <_strtod_l+0x904>
 800fbf2:	f7ff fb3f 	bl	800f274 <sulp>
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fbfe:	f7f0 fb63 	bl	80002c8 <__aeabi_dsub>
 800fc02:	2200      	movs	r2, #0
 800fc04:	2300      	movs	r3, #0
 800fc06:	4682      	mov	sl, r0
 800fc08:	468b      	mov	fp, r1
 800fc0a:	f7f0 ff7d 	bl	8000b08 <__aeabi_dcmpeq>
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d0c1      	beq.n	800fb96 <_strtod_l+0x8e6>
 800fc12:	e60e      	b.n	800f832 <_strtod_l+0x582>
 800fc14:	fffffc02 	.word	0xfffffc02
 800fc18:	7ff00000 	.word	0x7ff00000
 800fc1c:	39500000 	.word	0x39500000
 800fc20:	000fffff 	.word	0x000fffff
 800fc24:	7fefffff 	.word	0x7fefffff
 800fc28:	080148c0 	.word	0x080148c0
 800fc2c:	4631      	mov	r1, r6
 800fc2e:	4628      	mov	r0, r5
 800fc30:	f002 fb78 	bl	8012324 <__ratio>
 800fc34:	ec59 8b10 	vmov	r8, r9, d0
 800fc38:	ee10 0a10 	vmov	r0, s0
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fc42:	4649      	mov	r1, r9
 800fc44:	f7f0 ff74 	bl	8000b30 <__aeabi_dcmple>
 800fc48:	2800      	cmp	r0, #0
 800fc4a:	d07c      	beq.n	800fd46 <_strtod_l+0xa96>
 800fc4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d04c      	beq.n	800fcec <_strtod_l+0xa3c>
 800fc52:	4b95      	ldr	r3, [pc, #596]	; (800fea8 <_strtod_l+0xbf8>)
 800fc54:	2200      	movs	r2, #0
 800fc56:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fc5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fea8 <_strtod_l+0xbf8>
 800fc5e:	f04f 0800 	mov.w	r8, #0
 800fc62:	4b92      	ldr	r3, [pc, #584]	; (800feac <_strtod_l+0xbfc>)
 800fc64:	403b      	ands	r3, r7
 800fc66:	9311      	str	r3, [sp, #68]	; 0x44
 800fc68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fc6a:	4b91      	ldr	r3, [pc, #580]	; (800feb0 <_strtod_l+0xc00>)
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	f040 80b2 	bne.w	800fdd6 <_strtod_l+0xb26>
 800fc72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fc76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fc7a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800fc7e:	ec4b ab10 	vmov	d0, sl, fp
 800fc82:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800fc86:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fc8a:	f002 fa73 	bl	8012174 <__ulp>
 800fc8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fc92:	ec53 2b10 	vmov	r2, r3, d0
 800fc96:	f7f0 fccf 	bl	8000638 <__aeabi_dmul>
 800fc9a:	4652      	mov	r2, sl
 800fc9c:	465b      	mov	r3, fp
 800fc9e:	f7f0 fb15 	bl	80002cc <__adddf3>
 800fca2:	460b      	mov	r3, r1
 800fca4:	4981      	ldr	r1, [pc, #516]	; (800feac <_strtod_l+0xbfc>)
 800fca6:	4a83      	ldr	r2, [pc, #524]	; (800feb4 <_strtod_l+0xc04>)
 800fca8:	4019      	ands	r1, r3
 800fcaa:	4291      	cmp	r1, r2
 800fcac:	4682      	mov	sl, r0
 800fcae:	d95e      	bls.n	800fd6e <_strtod_l+0xabe>
 800fcb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcb2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d103      	bne.n	800fcc2 <_strtod_l+0xa12>
 800fcba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	f43f ad43 	beq.w	800f748 <_strtod_l+0x498>
 800fcc2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800fec0 <_strtod_l+0xc10>
 800fcc6:	f04f 3aff 	mov.w	sl, #4294967295
 800fcca:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fccc:	4620      	mov	r0, r4
 800fcce:	f001 ff25 	bl	8011b1c <_Bfree>
 800fcd2:	9907      	ldr	r1, [sp, #28]
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	f001 ff21 	bl	8011b1c <_Bfree>
 800fcda:	4631      	mov	r1, r6
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f001 ff1d 	bl	8011b1c <_Bfree>
 800fce2:	4629      	mov	r1, r5
 800fce4:	4620      	mov	r0, r4
 800fce6:	f001 ff19 	bl	8011b1c <_Bfree>
 800fcea:	e613      	b.n	800f914 <_strtod_l+0x664>
 800fcec:	f1ba 0f00 	cmp.w	sl, #0
 800fcf0:	d11b      	bne.n	800fd2a <_strtod_l+0xa7a>
 800fcf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fcf6:	b9f3      	cbnz	r3, 800fd36 <_strtod_l+0xa86>
 800fcf8:	4b6b      	ldr	r3, [pc, #428]	; (800fea8 <_strtod_l+0xbf8>)
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	4640      	mov	r0, r8
 800fcfe:	4649      	mov	r1, r9
 800fd00:	f7f0 ff0c 	bl	8000b1c <__aeabi_dcmplt>
 800fd04:	b9d0      	cbnz	r0, 800fd3c <_strtod_l+0xa8c>
 800fd06:	4640      	mov	r0, r8
 800fd08:	4649      	mov	r1, r9
 800fd0a:	4b6b      	ldr	r3, [pc, #428]	; (800feb8 <_strtod_l+0xc08>)
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f7f0 fc93 	bl	8000638 <__aeabi_dmul>
 800fd12:	4680      	mov	r8, r0
 800fd14:	4689      	mov	r9, r1
 800fd16:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fd1a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800fd1e:	931b      	str	r3, [sp, #108]	; 0x6c
 800fd20:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800fd24:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fd28:	e79b      	b.n	800fc62 <_strtod_l+0x9b2>
 800fd2a:	f1ba 0f01 	cmp.w	sl, #1
 800fd2e:	d102      	bne.n	800fd36 <_strtod_l+0xa86>
 800fd30:	2f00      	cmp	r7, #0
 800fd32:	f43f ad7e 	beq.w	800f832 <_strtod_l+0x582>
 800fd36:	4b61      	ldr	r3, [pc, #388]	; (800febc <_strtod_l+0xc0c>)
 800fd38:	2200      	movs	r2, #0
 800fd3a:	e78c      	b.n	800fc56 <_strtod_l+0x9a6>
 800fd3c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800feb8 <_strtod_l+0xc08>
 800fd40:	f04f 0800 	mov.w	r8, #0
 800fd44:	e7e7      	b.n	800fd16 <_strtod_l+0xa66>
 800fd46:	4b5c      	ldr	r3, [pc, #368]	; (800feb8 <_strtod_l+0xc08>)
 800fd48:	4640      	mov	r0, r8
 800fd4a:	4649      	mov	r1, r9
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	f7f0 fc73 	bl	8000638 <__aeabi_dmul>
 800fd52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd54:	4680      	mov	r8, r0
 800fd56:	4689      	mov	r9, r1
 800fd58:	b933      	cbnz	r3, 800fd68 <_strtod_l+0xab8>
 800fd5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd5e:	9012      	str	r0, [sp, #72]	; 0x48
 800fd60:	9313      	str	r3, [sp, #76]	; 0x4c
 800fd62:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800fd66:	e7dd      	b.n	800fd24 <_strtod_l+0xa74>
 800fd68:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800fd6c:	e7f9      	b.n	800fd62 <_strtod_l+0xab2>
 800fd6e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fd72:	9b04      	ldr	r3, [sp, #16]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d1a8      	bne.n	800fcca <_strtod_l+0xa1a>
 800fd78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fd7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fd7e:	0d1b      	lsrs	r3, r3, #20
 800fd80:	051b      	lsls	r3, r3, #20
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d1a1      	bne.n	800fcca <_strtod_l+0xa1a>
 800fd86:	4640      	mov	r0, r8
 800fd88:	4649      	mov	r1, r9
 800fd8a:	f7f0 ffb5 	bl	8000cf8 <__aeabi_d2lz>
 800fd8e:	f7f0 fc25 	bl	80005dc <__aeabi_l2d>
 800fd92:	4602      	mov	r2, r0
 800fd94:	460b      	mov	r3, r1
 800fd96:	4640      	mov	r0, r8
 800fd98:	4649      	mov	r1, r9
 800fd9a:	f7f0 fa95 	bl	80002c8 <__aeabi_dsub>
 800fd9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fda0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fda4:	ea43 030a 	orr.w	r3, r3, sl
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	4680      	mov	r8, r0
 800fdac:	4689      	mov	r9, r1
 800fdae:	d053      	beq.n	800fe58 <_strtod_l+0xba8>
 800fdb0:	a335      	add	r3, pc, #212	; (adr r3, 800fe88 <_strtod_l+0xbd8>)
 800fdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb6:	f7f0 feb1 	bl	8000b1c <__aeabi_dcmplt>
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	f47f acce 	bne.w	800f75c <_strtod_l+0x4ac>
 800fdc0:	a333      	add	r3, pc, #204	; (adr r3, 800fe90 <_strtod_l+0xbe0>)
 800fdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc6:	4640      	mov	r0, r8
 800fdc8:	4649      	mov	r1, r9
 800fdca:	f7f0 fec5 	bl	8000b58 <__aeabi_dcmpgt>
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	f43f af7b 	beq.w	800fcca <_strtod_l+0xa1a>
 800fdd4:	e4c2      	b.n	800f75c <_strtod_l+0x4ac>
 800fdd6:	9b04      	ldr	r3, [sp, #16]
 800fdd8:	b333      	cbz	r3, 800fe28 <_strtod_l+0xb78>
 800fdda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fddc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fde0:	d822      	bhi.n	800fe28 <_strtod_l+0xb78>
 800fde2:	a32d      	add	r3, pc, #180	; (adr r3, 800fe98 <_strtod_l+0xbe8>)
 800fde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde8:	4640      	mov	r0, r8
 800fdea:	4649      	mov	r1, r9
 800fdec:	f7f0 fea0 	bl	8000b30 <__aeabi_dcmple>
 800fdf0:	b1a0      	cbz	r0, 800fe1c <_strtod_l+0xb6c>
 800fdf2:	4649      	mov	r1, r9
 800fdf4:	4640      	mov	r0, r8
 800fdf6:	f7f0 fef7 	bl	8000be8 <__aeabi_d2uiz>
 800fdfa:	2801      	cmp	r0, #1
 800fdfc:	bf38      	it	cc
 800fdfe:	2001      	movcc	r0, #1
 800fe00:	f7f0 fba0 	bl	8000544 <__aeabi_ui2d>
 800fe04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe06:	4680      	mov	r8, r0
 800fe08:	4689      	mov	r9, r1
 800fe0a:	bb13      	cbnz	r3, 800fe52 <_strtod_l+0xba2>
 800fe0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe10:	9014      	str	r0, [sp, #80]	; 0x50
 800fe12:	9315      	str	r3, [sp, #84]	; 0x54
 800fe14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fe18:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fe1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fe20:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fe24:	1a9b      	subs	r3, r3, r2
 800fe26:	930d      	str	r3, [sp, #52]	; 0x34
 800fe28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fe2c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fe30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fe34:	f002 f99e 	bl	8012174 <__ulp>
 800fe38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fe3c:	ec53 2b10 	vmov	r2, r3, d0
 800fe40:	f7f0 fbfa 	bl	8000638 <__aeabi_dmul>
 800fe44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fe48:	f7f0 fa40 	bl	80002cc <__adddf3>
 800fe4c:	4682      	mov	sl, r0
 800fe4e:	468b      	mov	fp, r1
 800fe50:	e78f      	b.n	800fd72 <_strtod_l+0xac2>
 800fe52:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800fe56:	e7dd      	b.n	800fe14 <_strtod_l+0xb64>
 800fe58:	a311      	add	r3, pc, #68	; (adr r3, 800fea0 <_strtod_l+0xbf0>)
 800fe5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5e:	f7f0 fe5d 	bl	8000b1c <__aeabi_dcmplt>
 800fe62:	e7b4      	b.n	800fdce <_strtod_l+0xb1e>
 800fe64:	2300      	movs	r3, #0
 800fe66:	930e      	str	r3, [sp, #56]	; 0x38
 800fe68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fe6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fe6c:	6013      	str	r3, [r2, #0]
 800fe6e:	f7ff ba65 	b.w	800f33c <_strtod_l+0x8c>
 800fe72:	2b65      	cmp	r3, #101	; 0x65
 800fe74:	f43f ab5d 	beq.w	800f532 <_strtod_l+0x282>
 800fe78:	2b45      	cmp	r3, #69	; 0x45
 800fe7a:	f43f ab5a 	beq.w	800f532 <_strtod_l+0x282>
 800fe7e:	2201      	movs	r2, #1
 800fe80:	f7ff bb92 	b.w	800f5a8 <_strtod_l+0x2f8>
 800fe84:	f3af 8000 	nop.w
 800fe88:	94a03595 	.word	0x94a03595
 800fe8c:	3fdfffff 	.word	0x3fdfffff
 800fe90:	35afe535 	.word	0x35afe535
 800fe94:	3fe00000 	.word	0x3fe00000
 800fe98:	ffc00000 	.word	0xffc00000
 800fe9c:	41dfffff 	.word	0x41dfffff
 800fea0:	94a03595 	.word	0x94a03595
 800fea4:	3fcfffff 	.word	0x3fcfffff
 800fea8:	3ff00000 	.word	0x3ff00000
 800feac:	7ff00000 	.word	0x7ff00000
 800feb0:	7fe00000 	.word	0x7fe00000
 800feb4:	7c9fffff 	.word	0x7c9fffff
 800feb8:	3fe00000 	.word	0x3fe00000
 800febc:	bff00000 	.word	0xbff00000
 800fec0:	7fefffff 	.word	0x7fefffff

0800fec4 <_strtod_r>:
 800fec4:	4b01      	ldr	r3, [pc, #4]	; (800fecc <_strtod_r+0x8>)
 800fec6:	f7ff b9f3 	b.w	800f2b0 <_strtod_l>
 800feca:	bf00      	nop
 800fecc:	20000090 	.word	0x20000090

0800fed0 <_strtol_l.isra.0>:
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fed6:	d001      	beq.n	800fedc <_strtol_l.isra.0+0xc>
 800fed8:	2b24      	cmp	r3, #36	; 0x24
 800feda:	d906      	bls.n	800feea <_strtol_l.isra.0+0x1a>
 800fedc:	f7fe f990 	bl	800e200 <__errno>
 800fee0:	2316      	movs	r3, #22
 800fee2:	6003      	str	r3, [r0, #0]
 800fee4:	2000      	movs	r0, #0
 800fee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feea:	4f3a      	ldr	r7, [pc, #232]	; (800ffd4 <_strtol_l.isra.0+0x104>)
 800feec:	468e      	mov	lr, r1
 800feee:	4676      	mov	r6, lr
 800fef0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800fef4:	5de5      	ldrb	r5, [r4, r7]
 800fef6:	f015 0508 	ands.w	r5, r5, #8
 800fefa:	d1f8      	bne.n	800feee <_strtol_l.isra.0+0x1e>
 800fefc:	2c2d      	cmp	r4, #45	; 0x2d
 800fefe:	d134      	bne.n	800ff6a <_strtol_l.isra.0+0x9a>
 800ff00:	f89e 4000 	ldrb.w	r4, [lr]
 800ff04:	f04f 0801 	mov.w	r8, #1
 800ff08:	f106 0e02 	add.w	lr, r6, #2
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d05c      	beq.n	800ffca <_strtol_l.isra.0+0xfa>
 800ff10:	2b10      	cmp	r3, #16
 800ff12:	d10c      	bne.n	800ff2e <_strtol_l.isra.0+0x5e>
 800ff14:	2c30      	cmp	r4, #48	; 0x30
 800ff16:	d10a      	bne.n	800ff2e <_strtol_l.isra.0+0x5e>
 800ff18:	f89e 4000 	ldrb.w	r4, [lr]
 800ff1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ff20:	2c58      	cmp	r4, #88	; 0x58
 800ff22:	d14d      	bne.n	800ffc0 <_strtol_l.isra.0+0xf0>
 800ff24:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ff28:	2310      	movs	r3, #16
 800ff2a:	f10e 0e02 	add.w	lr, lr, #2
 800ff2e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ff32:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ff36:	2600      	movs	r6, #0
 800ff38:	fbbc f9f3 	udiv	r9, ip, r3
 800ff3c:	4635      	mov	r5, r6
 800ff3e:	fb03 ca19 	mls	sl, r3, r9, ip
 800ff42:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ff46:	2f09      	cmp	r7, #9
 800ff48:	d818      	bhi.n	800ff7c <_strtol_l.isra.0+0xac>
 800ff4a:	463c      	mov	r4, r7
 800ff4c:	42a3      	cmp	r3, r4
 800ff4e:	dd24      	ble.n	800ff9a <_strtol_l.isra.0+0xca>
 800ff50:	2e00      	cmp	r6, #0
 800ff52:	db1f      	blt.n	800ff94 <_strtol_l.isra.0+0xc4>
 800ff54:	45a9      	cmp	r9, r5
 800ff56:	d31d      	bcc.n	800ff94 <_strtol_l.isra.0+0xc4>
 800ff58:	d101      	bne.n	800ff5e <_strtol_l.isra.0+0x8e>
 800ff5a:	45a2      	cmp	sl, r4
 800ff5c:	db1a      	blt.n	800ff94 <_strtol_l.isra.0+0xc4>
 800ff5e:	fb05 4503 	mla	r5, r5, r3, r4
 800ff62:	2601      	movs	r6, #1
 800ff64:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ff68:	e7eb      	b.n	800ff42 <_strtol_l.isra.0+0x72>
 800ff6a:	2c2b      	cmp	r4, #43	; 0x2b
 800ff6c:	bf08      	it	eq
 800ff6e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ff72:	46a8      	mov	r8, r5
 800ff74:	bf08      	it	eq
 800ff76:	f106 0e02 	addeq.w	lr, r6, #2
 800ff7a:	e7c7      	b.n	800ff0c <_strtol_l.isra.0+0x3c>
 800ff7c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ff80:	2f19      	cmp	r7, #25
 800ff82:	d801      	bhi.n	800ff88 <_strtol_l.isra.0+0xb8>
 800ff84:	3c37      	subs	r4, #55	; 0x37
 800ff86:	e7e1      	b.n	800ff4c <_strtol_l.isra.0+0x7c>
 800ff88:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ff8c:	2f19      	cmp	r7, #25
 800ff8e:	d804      	bhi.n	800ff9a <_strtol_l.isra.0+0xca>
 800ff90:	3c57      	subs	r4, #87	; 0x57
 800ff92:	e7db      	b.n	800ff4c <_strtol_l.isra.0+0x7c>
 800ff94:	f04f 36ff 	mov.w	r6, #4294967295
 800ff98:	e7e4      	b.n	800ff64 <_strtol_l.isra.0+0x94>
 800ff9a:	2e00      	cmp	r6, #0
 800ff9c:	da05      	bge.n	800ffaa <_strtol_l.isra.0+0xda>
 800ff9e:	2322      	movs	r3, #34	; 0x22
 800ffa0:	6003      	str	r3, [r0, #0]
 800ffa2:	4665      	mov	r5, ip
 800ffa4:	b942      	cbnz	r2, 800ffb8 <_strtol_l.isra.0+0xe8>
 800ffa6:	4628      	mov	r0, r5
 800ffa8:	e79d      	b.n	800fee6 <_strtol_l.isra.0+0x16>
 800ffaa:	f1b8 0f00 	cmp.w	r8, #0
 800ffae:	d000      	beq.n	800ffb2 <_strtol_l.isra.0+0xe2>
 800ffb0:	426d      	negs	r5, r5
 800ffb2:	2a00      	cmp	r2, #0
 800ffb4:	d0f7      	beq.n	800ffa6 <_strtol_l.isra.0+0xd6>
 800ffb6:	b10e      	cbz	r6, 800ffbc <_strtol_l.isra.0+0xec>
 800ffb8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ffbc:	6011      	str	r1, [r2, #0]
 800ffbe:	e7f2      	b.n	800ffa6 <_strtol_l.isra.0+0xd6>
 800ffc0:	2430      	movs	r4, #48	; 0x30
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d1b3      	bne.n	800ff2e <_strtol_l.isra.0+0x5e>
 800ffc6:	2308      	movs	r3, #8
 800ffc8:	e7b1      	b.n	800ff2e <_strtol_l.isra.0+0x5e>
 800ffca:	2c30      	cmp	r4, #48	; 0x30
 800ffcc:	d0a4      	beq.n	800ff18 <_strtol_l.isra.0+0x48>
 800ffce:	230a      	movs	r3, #10
 800ffd0:	e7ad      	b.n	800ff2e <_strtol_l.isra.0+0x5e>
 800ffd2:	bf00      	nop
 800ffd4:	08014759 	.word	0x08014759

0800ffd8 <_strtol_r>:
 800ffd8:	f7ff bf7a 	b.w	800fed0 <_strtol_l.isra.0>

0800ffdc <strtol>:
 800ffdc:	4613      	mov	r3, r2
 800ffde:	460a      	mov	r2, r1
 800ffe0:	4601      	mov	r1, r0
 800ffe2:	4802      	ldr	r0, [pc, #8]	; (800ffec <strtol+0x10>)
 800ffe4:	6800      	ldr	r0, [r0, #0]
 800ffe6:	f7ff bf73 	b.w	800fed0 <_strtol_l.isra.0>
 800ffea:	bf00      	nop
 800ffec:	20000028 	.word	0x20000028

0800fff0 <_vsniprintf_r>:
 800fff0:	b530      	push	{r4, r5, lr}
 800fff2:	1e14      	subs	r4, r2, #0
 800fff4:	4605      	mov	r5, r0
 800fff6:	b09b      	sub	sp, #108	; 0x6c
 800fff8:	4618      	mov	r0, r3
 800fffa:	da05      	bge.n	8010008 <_vsniprintf_r+0x18>
 800fffc:	238b      	movs	r3, #139	; 0x8b
 800fffe:	602b      	str	r3, [r5, #0]
 8010000:	f04f 30ff 	mov.w	r0, #4294967295
 8010004:	b01b      	add	sp, #108	; 0x6c
 8010006:	bd30      	pop	{r4, r5, pc}
 8010008:	f44f 7302 	mov.w	r3, #520	; 0x208
 801000c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010010:	bf14      	ite	ne
 8010012:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010016:	4623      	moveq	r3, r4
 8010018:	9302      	str	r3, [sp, #8]
 801001a:	9305      	str	r3, [sp, #20]
 801001c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010020:	9100      	str	r1, [sp, #0]
 8010022:	9104      	str	r1, [sp, #16]
 8010024:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010028:	4602      	mov	r2, r0
 801002a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801002c:	4669      	mov	r1, sp
 801002e:	4628      	mov	r0, r5
 8010030:	f002 fa5a 	bl	80124e8 <_svfiprintf_r>
 8010034:	1c43      	adds	r3, r0, #1
 8010036:	bfbc      	itt	lt
 8010038:	238b      	movlt	r3, #139	; 0x8b
 801003a:	602b      	strlt	r3, [r5, #0]
 801003c:	2c00      	cmp	r4, #0
 801003e:	d0e1      	beq.n	8010004 <_vsniprintf_r+0x14>
 8010040:	9b00      	ldr	r3, [sp, #0]
 8010042:	2200      	movs	r2, #0
 8010044:	701a      	strb	r2, [r3, #0]
 8010046:	e7dd      	b.n	8010004 <_vsniprintf_r+0x14>

08010048 <vsniprintf>:
 8010048:	b507      	push	{r0, r1, r2, lr}
 801004a:	9300      	str	r3, [sp, #0]
 801004c:	4613      	mov	r3, r2
 801004e:	460a      	mov	r2, r1
 8010050:	4601      	mov	r1, r0
 8010052:	4803      	ldr	r0, [pc, #12]	; (8010060 <vsniprintf+0x18>)
 8010054:	6800      	ldr	r0, [r0, #0]
 8010056:	f7ff ffcb 	bl	800fff0 <_vsniprintf_r>
 801005a:	b003      	add	sp, #12
 801005c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010060:	20000028 	.word	0x20000028

08010064 <__swbuf_r>:
 8010064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010066:	460e      	mov	r6, r1
 8010068:	4614      	mov	r4, r2
 801006a:	4605      	mov	r5, r0
 801006c:	b118      	cbz	r0, 8010076 <__swbuf_r+0x12>
 801006e:	6983      	ldr	r3, [r0, #24]
 8010070:	b90b      	cbnz	r3, 8010076 <__swbuf_r+0x12>
 8010072:	f001 f86b 	bl	801114c <__sinit>
 8010076:	4b21      	ldr	r3, [pc, #132]	; (80100fc <__swbuf_r+0x98>)
 8010078:	429c      	cmp	r4, r3
 801007a:	d12b      	bne.n	80100d4 <__swbuf_r+0x70>
 801007c:	686c      	ldr	r4, [r5, #4]
 801007e:	69a3      	ldr	r3, [r4, #24]
 8010080:	60a3      	str	r3, [r4, #8]
 8010082:	89a3      	ldrh	r3, [r4, #12]
 8010084:	071a      	lsls	r2, r3, #28
 8010086:	d52f      	bpl.n	80100e8 <__swbuf_r+0x84>
 8010088:	6923      	ldr	r3, [r4, #16]
 801008a:	b36b      	cbz	r3, 80100e8 <__swbuf_r+0x84>
 801008c:	6923      	ldr	r3, [r4, #16]
 801008e:	6820      	ldr	r0, [r4, #0]
 8010090:	1ac0      	subs	r0, r0, r3
 8010092:	6963      	ldr	r3, [r4, #20]
 8010094:	b2f6      	uxtb	r6, r6
 8010096:	4283      	cmp	r3, r0
 8010098:	4637      	mov	r7, r6
 801009a:	dc04      	bgt.n	80100a6 <__swbuf_r+0x42>
 801009c:	4621      	mov	r1, r4
 801009e:	4628      	mov	r0, r5
 80100a0:	f000 ffc0 	bl	8011024 <_fflush_r>
 80100a4:	bb30      	cbnz	r0, 80100f4 <__swbuf_r+0x90>
 80100a6:	68a3      	ldr	r3, [r4, #8]
 80100a8:	3b01      	subs	r3, #1
 80100aa:	60a3      	str	r3, [r4, #8]
 80100ac:	6823      	ldr	r3, [r4, #0]
 80100ae:	1c5a      	adds	r2, r3, #1
 80100b0:	6022      	str	r2, [r4, #0]
 80100b2:	701e      	strb	r6, [r3, #0]
 80100b4:	6963      	ldr	r3, [r4, #20]
 80100b6:	3001      	adds	r0, #1
 80100b8:	4283      	cmp	r3, r0
 80100ba:	d004      	beq.n	80100c6 <__swbuf_r+0x62>
 80100bc:	89a3      	ldrh	r3, [r4, #12]
 80100be:	07db      	lsls	r3, r3, #31
 80100c0:	d506      	bpl.n	80100d0 <__swbuf_r+0x6c>
 80100c2:	2e0a      	cmp	r6, #10
 80100c4:	d104      	bne.n	80100d0 <__swbuf_r+0x6c>
 80100c6:	4621      	mov	r1, r4
 80100c8:	4628      	mov	r0, r5
 80100ca:	f000 ffab 	bl	8011024 <_fflush_r>
 80100ce:	b988      	cbnz	r0, 80100f4 <__swbuf_r+0x90>
 80100d0:	4638      	mov	r0, r7
 80100d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100d4:	4b0a      	ldr	r3, [pc, #40]	; (8010100 <__swbuf_r+0x9c>)
 80100d6:	429c      	cmp	r4, r3
 80100d8:	d101      	bne.n	80100de <__swbuf_r+0x7a>
 80100da:	68ac      	ldr	r4, [r5, #8]
 80100dc:	e7cf      	b.n	801007e <__swbuf_r+0x1a>
 80100de:	4b09      	ldr	r3, [pc, #36]	; (8010104 <__swbuf_r+0xa0>)
 80100e0:	429c      	cmp	r4, r3
 80100e2:	bf08      	it	eq
 80100e4:	68ec      	ldreq	r4, [r5, #12]
 80100e6:	e7ca      	b.n	801007e <__swbuf_r+0x1a>
 80100e8:	4621      	mov	r1, r4
 80100ea:	4628      	mov	r0, r5
 80100ec:	f000 f81e 	bl	801012c <__swsetup_r>
 80100f0:	2800      	cmp	r0, #0
 80100f2:	d0cb      	beq.n	801008c <__swbuf_r+0x28>
 80100f4:	f04f 37ff 	mov.w	r7, #4294967295
 80100f8:	e7ea      	b.n	80100d0 <__swbuf_r+0x6c>
 80100fa:	bf00      	nop
 80100fc:	0801499c 	.word	0x0801499c
 8010100:	080149bc 	.word	0x080149bc
 8010104:	0801497c 	.word	0x0801497c

08010108 <_write_r>:
 8010108:	b538      	push	{r3, r4, r5, lr}
 801010a:	4d07      	ldr	r5, [pc, #28]	; (8010128 <_write_r+0x20>)
 801010c:	4604      	mov	r4, r0
 801010e:	4608      	mov	r0, r1
 8010110:	4611      	mov	r1, r2
 8010112:	2200      	movs	r2, #0
 8010114:	602a      	str	r2, [r5, #0]
 8010116:	461a      	mov	r2, r3
 8010118:	f7f4 f911 	bl	800433e <_write>
 801011c:	1c43      	adds	r3, r0, #1
 801011e:	d102      	bne.n	8010126 <_write_r+0x1e>
 8010120:	682b      	ldr	r3, [r5, #0]
 8010122:	b103      	cbz	r3, 8010126 <_write_r+0x1e>
 8010124:	6023      	str	r3, [r4, #0]
 8010126:	bd38      	pop	{r3, r4, r5, pc}
 8010128:	20001a90 	.word	0x20001a90

0801012c <__swsetup_r>:
 801012c:	4b32      	ldr	r3, [pc, #200]	; (80101f8 <__swsetup_r+0xcc>)
 801012e:	b570      	push	{r4, r5, r6, lr}
 8010130:	681d      	ldr	r5, [r3, #0]
 8010132:	4606      	mov	r6, r0
 8010134:	460c      	mov	r4, r1
 8010136:	b125      	cbz	r5, 8010142 <__swsetup_r+0x16>
 8010138:	69ab      	ldr	r3, [r5, #24]
 801013a:	b913      	cbnz	r3, 8010142 <__swsetup_r+0x16>
 801013c:	4628      	mov	r0, r5
 801013e:	f001 f805 	bl	801114c <__sinit>
 8010142:	4b2e      	ldr	r3, [pc, #184]	; (80101fc <__swsetup_r+0xd0>)
 8010144:	429c      	cmp	r4, r3
 8010146:	d10f      	bne.n	8010168 <__swsetup_r+0x3c>
 8010148:	686c      	ldr	r4, [r5, #4]
 801014a:	89a3      	ldrh	r3, [r4, #12]
 801014c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010150:	0719      	lsls	r1, r3, #28
 8010152:	d42c      	bmi.n	80101ae <__swsetup_r+0x82>
 8010154:	06dd      	lsls	r5, r3, #27
 8010156:	d411      	bmi.n	801017c <__swsetup_r+0x50>
 8010158:	2309      	movs	r3, #9
 801015a:	6033      	str	r3, [r6, #0]
 801015c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010160:	81a3      	strh	r3, [r4, #12]
 8010162:	f04f 30ff 	mov.w	r0, #4294967295
 8010166:	e03e      	b.n	80101e6 <__swsetup_r+0xba>
 8010168:	4b25      	ldr	r3, [pc, #148]	; (8010200 <__swsetup_r+0xd4>)
 801016a:	429c      	cmp	r4, r3
 801016c:	d101      	bne.n	8010172 <__swsetup_r+0x46>
 801016e:	68ac      	ldr	r4, [r5, #8]
 8010170:	e7eb      	b.n	801014a <__swsetup_r+0x1e>
 8010172:	4b24      	ldr	r3, [pc, #144]	; (8010204 <__swsetup_r+0xd8>)
 8010174:	429c      	cmp	r4, r3
 8010176:	bf08      	it	eq
 8010178:	68ec      	ldreq	r4, [r5, #12]
 801017a:	e7e6      	b.n	801014a <__swsetup_r+0x1e>
 801017c:	0758      	lsls	r0, r3, #29
 801017e:	d512      	bpl.n	80101a6 <__swsetup_r+0x7a>
 8010180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010182:	b141      	cbz	r1, 8010196 <__swsetup_r+0x6a>
 8010184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010188:	4299      	cmp	r1, r3
 801018a:	d002      	beq.n	8010192 <__swsetup_r+0x66>
 801018c:	4630      	mov	r0, r6
 801018e:	f7fe f87f 	bl	800e290 <_free_r>
 8010192:	2300      	movs	r3, #0
 8010194:	6363      	str	r3, [r4, #52]	; 0x34
 8010196:	89a3      	ldrh	r3, [r4, #12]
 8010198:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801019c:	81a3      	strh	r3, [r4, #12]
 801019e:	2300      	movs	r3, #0
 80101a0:	6063      	str	r3, [r4, #4]
 80101a2:	6923      	ldr	r3, [r4, #16]
 80101a4:	6023      	str	r3, [r4, #0]
 80101a6:	89a3      	ldrh	r3, [r4, #12]
 80101a8:	f043 0308 	orr.w	r3, r3, #8
 80101ac:	81a3      	strh	r3, [r4, #12]
 80101ae:	6923      	ldr	r3, [r4, #16]
 80101b0:	b94b      	cbnz	r3, 80101c6 <__swsetup_r+0x9a>
 80101b2:	89a3      	ldrh	r3, [r4, #12]
 80101b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101bc:	d003      	beq.n	80101c6 <__swsetup_r+0x9a>
 80101be:	4621      	mov	r1, r4
 80101c0:	4630      	mov	r0, r6
 80101c2:	f001 fc0d 	bl	80119e0 <__smakebuf_r>
 80101c6:	89a0      	ldrh	r0, [r4, #12]
 80101c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101cc:	f010 0301 	ands.w	r3, r0, #1
 80101d0:	d00a      	beq.n	80101e8 <__swsetup_r+0xbc>
 80101d2:	2300      	movs	r3, #0
 80101d4:	60a3      	str	r3, [r4, #8]
 80101d6:	6963      	ldr	r3, [r4, #20]
 80101d8:	425b      	negs	r3, r3
 80101da:	61a3      	str	r3, [r4, #24]
 80101dc:	6923      	ldr	r3, [r4, #16]
 80101de:	b943      	cbnz	r3, 80101f2 <__swsetup_r+0xc6>
 80101e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80101e4:	d1ba      	bne.n	801015c <__swsetup_r+0x30>
 80101e6:	bd70      	pop	{r4, r5, r6, pc}
 80101e8:	0781      	lsls	r1, r0, #30
 80101ea:	bf58      	it	pl
 80101ec:	6963      	ldrpl	r3, [r4, #20]
 80101ee:	60a3      	str	r3, [r4, #8]
 80101f0:	e7f4      	b.n	80101dc <__swsetup_r+0xb0>
 80101f2:	2000      	movs	r0, #0
 80101f4:	e7f7      	b.n	80101e6 <__swsetup_r+0xba>
 80101f6:	bf00      	nop
 80101f8:	20000028 	.word	0x20000028
 80101fc:	0801499c 	.word	0x0801499c
 8010200:	080149bc 	.word	0x080149bc
 8010204:	0801497c 	.word	0x0801497c

08010208 <_close_r>:
 8010208:	b538      	push	{r3, r4, r5, lr}
 801020a:	4d06      	ldr	r5, [pc, #24]	; (8010224 <_close_r+0x1c>)
 801020c:	2300      	movs	r3, #0
 801020e:	4604      	mov	r4, r0
 8010210:	4608      	mov	r0, r1
 8010212:	602b      	str	r3, [r5, #0]
 8010214:	f7f4 f8af 	bl	8004376 <_close>
 8010218:	1c43      	adds	r3, r0, #1
 801021a:	d102      	bne.n	8010222 <_close_r+0x1a>
 801021c:	682b      	ldr	r3, [r5, #0]
 801021e:	b103      	cbz	r3, 8010222 <_close_r+0x1a>
 8010220:	6023      	str	r3, [r4, #0]
 8010222:	bd38      	pop	{r3, r4, r5, pc}
 8010224:	20001a90 	.word	0x20001a90

08010228 <quorem>:
 8010228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801022c:	6903      	ldr	r3, [r0, #16]
 801022e:	690c      	ldr	r4, [r1, #16]
 8010230:	42a3      	cmp	r3, r4
 8010232:	4607      	mov	r7, r0
 8010234:	f2c0 8081 	blt.w	801033a <quorem+0x112>
 8010238:	3c01      	subs	r4, #1
 801023a:	f101 0814 	add.w	r8, r1, #20
 801023e:	f100 0514 	add.w	r5, r0, #20
 8010242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010246:	9301      	str	r3, [sp, #4]
 8010248:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801024c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010250:	3301      	adds	r3, #1
 8010252:	429a      	cmp	r2, r3
 8010254:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010258:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801025c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010260:	d331      	bcc.n	80102c6 <quorem+0x9e>
 8010262:	f04f 0e00 	mov.w	lr, #0
 8010266:	4640      	mov	r0, r8
 8010268:	46ac      	mov	ip, r5
 801026a:	46f2      	mov	sl, lr
 801026c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010270:	b293      	uxth	r3, r2
 8010272:	fb06 e303 	mla	r3, r6, r3, lr
 8010276:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801027a:	b29b      	uxth	r3, r3
 801027c:	ebaa 0303 	sub.w	r3, sl, r3
 8010280:	0c12      	lsrs	r2, r2, #16
 8010282:	f8dc a000 	ldr.w	sl, [ip]
 8010286:	fb06 e202 	mla	r2, r6, r2, lr
 801028a:	fa13 f38a 	uxtah	r3, r3, sl
 801028e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010292:	fa1f fa82 	uxth.w	sl, r2
 8010296:	f8dc 2000 	ldr.w	r2, [ip]
 801029a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801029e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102a8:	4581      	cmp	r9, r0
 80102aa:	f84c 3b04 	str.w	r3, [ip], #4
 80102ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80102b2:	d2db      	bcs.n	801026c <quorem+0x44>
 80102b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80102b8:	b92b      	cbnz	r3, 80102c6 <quorem+0x9e>
 80102ba:	9b01      	ldr	r3, [sp, #4]
 80102bc:	3b04      	subs	r3, #4
 80102be:	429d      	cmp	r5, r3
 80102c0:	461a      	mov	r2, r3
 80102c2:	d32e      	bcc.n	8010322 <quorem+0xfa>
 80102c4:	613c      	str	r4, [r7, #16]
 80102c6:	4638      	mov	r0, r7
 80102c8:	f001 feb0 	bl	801202c <__mcmp>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	db24      	blt.n	801031a <quorem+0xf2>
 80102d0:	3601      	adds	r6, #1
 80102d2:	4628      	mov	r0, r5
 80102d4:	f04f 0c00 	mov.w	ip, #0
 80102d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80102dc:	f8d0 e000 	ldr.w	lr, [r0]
 80102e0:	b293      	uxth	r3, r2
 80102e2:	ebac 0303 	sub.w	r3, ip, r3
 80102e6:	0c12      	lsrs	r2, r2, #16
 80102e8:	fa13 f38e 	uxtah	r3, r3, lr
 80102ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80102f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102fa:	45c1      	cmp	r9, r8
 80102fc:	f840 3b04 	str.w	r3, [r0], #4
 8010300:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010304:	d2e8      	bcs.n	80102d8 <quorem+0xb0>
 8010306:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801030a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801030e:	b922      	cbnz	r2, 801031a <quorem+0xf2>
 8010310:	3b04      	subs	r3, #4
 8010312:	429d      	cmp	r5, r3
 8010314:	461a      	mov	r2, r3
 8010316:	d30a      	bcc.n	801032e <quorem+0x106>
 8010318:	613c      	str	r4, [r7, #16]
 801031a:	4630      	mov	r0, r6
 801031c:	b003      	add	sp, #12
 801031e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010322:	6812      	ldr	r2, [r2, #0]
 8010324:	3b04      	subs	r3, #4
 8010326:	2a00      	cmp	r2, #0
 8010328:	d1cc      	bne.n	80102c4 <quorem+0x9c>
 801032a:	3c01      	subs	r4, #1
 801032c:	e7c7      	b.n	80102be <quorem+0x96>
 801032e:	6812      	ldr	r2, [r2, #0]
 8010330:	3b04      	subs	r3, #4
 8010332:	2a00      	cmp	r2, #0
 8010334:	d1f0      	bne.n	8010318 <quorem+0xf0>
 8010336:	3c01      	subs	r4, #1
 8010338:	e7eb      	b.n	8010312 <quorem+0xea>
 801033a:	2000      	movs	r0, #0
 801033c:	e7ee      	b.n	801031c <quorem+0xf4>
	...

08010340 <_dtoa_r>:
 8010340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010344:	ed2d 8b02 	vpush	{d8}
 8010348:	ec57 6b10 	vmov	r6, r7, d0
 801034c:	b095      	sub	sp, #84	; 0x54
 801034e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010350:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010354:	9105      	str	r1, [sp, #20]
 8010356:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801035a:	4604      	mov	r4, r0
 801035c:	9209      	str	r2, [sp, #36]	; 0x24
 801035e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010360:	b975      	cbnz	r5, 8010380 <_dtoa_r+0x40>
 8010362:	2010      	movs	r0, #16
 8010364:	f7fd ff76 	bl	800e254 <malloc>
 8010368:	4602      	mov	r2, r0
 801036a:	6260      	str	r0, [r4, #36]	; 0x24
 801036c:	b920      	cbnz	r0, 8010378 <_dtoa_r+0x38>
 801036e:	4bb2      	ldr	r3, [pc, #712]	; (8010638 <_dtoa_r+0x2f8>)
 8010370:	21ea      	movs	r1, #234	; 0xea
 8010372:	48b2      	ldr	r0, [pc, #712]	; (801063c <_dtoa_r+0x2fc>)
 8010374:	f002 ff4c 	bl	8013210 <__assert_func>
 8010378:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801037c:	6005      	str	r5, [r0, #0]
 801037e:	60c5      	str	r5, [r0, #12]
 8010380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010382:	6819      	ldr	r1, [r3, #0]
 8010384:	b151      	cbz	r1, 801039c <_dtoa_r+0x5c>
 8010386:	685a      	ldr	r2, [r3, #4]
 8010388:	604a      	str	r2, [r1, #4]
 801038a:	2301      	movs	r3, #1
 801038c:	4093      	lsls	r3, r2
 801038e:	608b      	str	r3, [r1, #8]
 8010390:	4620      	mov	r0, r4
 8010392:	f001 fbc3 	bl	8011b1c <_Bfree>
 8010396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010398:	2200      	movs	r2, #0
 801039a:	601a      	str	r2, [r3, #0]
 801039c:	1e3b      	subs	r3, r7, #0
 801039e:	bfb9      	ittee	lt
 80103a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80103a4:	9303      	strlt	r3, [sp, #12]
 80103a6:	2300      	movge	r3, #0
 80103a8:	f8c8 3000 	strge.w	r3, [r8]
 80103ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80103b0:	4ba3      	ldr	r3, [pc, #652]	; (8010640 <_dtoa_r+0x300>)
 80103b2:	bfbc      	itt	lt
 80103b4:	2201      	movlt	r2, #1
 80103b6:	f8c8 2000 	strlt.w	r2, [r8]
 80103ba:	ea33 0309 	bics.w	r3, r3, r9
 80103be:	d11b      	bne.n	80103f8 <_dtoa_r+0xb8>
 80103c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80103c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80103c6:	6013      	str	r3, [r2, #0]
 80103c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80103cc:	4333      	orrs	r3, r6
 80103ce:	f000 857a 	beq.w	8010ec6 <_dtoa_r+0xb86>
 80103d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103d4:	b963      	cbnz	r3, 80103f0 <_dtoa_r+0xb0>
 80103d6:	4b9b      	ldr	r3, [pc, #620]	; (8010644 <_dtoa_r+0x304>)
 80103d8:	e024      	b.n	8010424 <_dtoa_r+0xe4>
 80103da:	4b9b      	ldr	r3, [pc, #620]	; (8010648 <_dtoa_r+0x308>)
 80103dc:	9300      	str	r3, [sp, #0]
 80103de:	3308      	adds	r3, #8
 80103e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80103e2:	6013      	str	r3, [r2, #0]
 80103e4:	9800      	ldr	r0, [sp, #0]
 80103e6:	b015      	add	sp, #84	; 0x54
 80103e8:	ecbd 8b02 	vpop	{d8}
 80103ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f0:	4b94      	ldr	r3, [pc, #592]	; (8010644 <_dtoa_r+0x304>)
 80103f2:	9300      	str	r3, [sp, #0]
 80103f4:	3303      	adds	r3, #3
 80103f6:	e7f3      	b.n	80103e0 <_dtoa_r+0xa0>
 80103f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103fc:	2200      	movs	r2, #0
 80103fe:	ec51 0b17 	vmov	r0, r1, d7
 8010402:	2300      	movs	r3, #0
 8010404:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010408:	f7f0 fb7e 	bl	8000b08 <__aeabi_dcmpeq>
 801040c:	4680      	mov	r8, r0
 801040e:	b158      	cbz	r0, 8010428 <_dtoa_r+0xe8>
 8010410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010412:	2301      	movs	r3, #1
 8010414:	6013      	str	r3, [r2, #0]
 8010416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010418:	2b00      	cmp	r3, #0
 801041a:	f000 8551 	beq.w	8010ec0 <_dtoa_r+0xb80>
 801041e:	488b      	ldr	r0, [pc, #556]	; (801064c <_dtoa_r+0x30c>)
 8010420:	6018      	str	r0, [r3, #0]
 8010422:	1e43      	subs	r3, r0, #1
 8010424:	9300      	str	r3, [sp, #0]
 8010426:	e7dd      	b.n	80103e4 <_dtoa_r+0xa4>
 8010428:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801042c:	aa12      	add	r2, sp, #72	; 0x48
 801042e:	a913      	add	r1, sp, #76	; 0x4c
 8010430:	4620      	mov	r0, r4
 8010432:	f001 ff1b 	bl	801226c <__d2b>
 8010436:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801043a:	4683      	mov	fp, r0
 801043c:	2d00      	cmp	r5, #0
 801043e:	d07c      	beq.n	801053a <_dtoa_r+0x1fa>
 8010440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010442:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010446:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801044a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801044e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010452:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010456:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801045a:	4b7d      	ldr	r3, [pc, #500]	; (8010650 <_dtoa_r+0x310>)
 801045c:	2200      	movs	r2, #0
 801045e:	4630      	mov	r0, r6
 8010460:	4639      	mov	r1, r7
 8010462:	f7ef ff31 	bl	80002c8 <__aeabi_dsub>
 8010466:	a36e      	add	r3, pc, #440	; (adr r3, 8010620 <_dtoa_r+0x2e0>)
 8010468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046c:	f7f0 f8e4 	bl	8000638 <__aeabi_dmul>
 8010470:	a36d      	add	r3, pc, #436	; (adr r3, 8010628 <_dtoa_r+0x2e8>)
 8010472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010476:	f7ef ff29 	bl	80002cc <__adddf3>
 801047a:	4606      	mov	r6, r0
 801047c:	4628      	mov	r0, r5
 801047e:	460f      	mov	r7, r1
 8010480:	f7f0 f870 	bl	8000564 <__aeabi_i2d>
 8010484:	a36a      	add	r3, pc, #424	; (adr r3, 8010630 <_dtoa_r+0x2f0>)
 8010486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801048a:	f7f0 f8d5 	bl	8000638 <__aeabi_dmul>
 801048e:	4602      	mov	r2, r0
 8010490:	460b      	mov	r3, r1
 8010492:	4630      	mov	r0, r6
 8010494:	4639      	mov	r1, r7
 8010496:	f7ef ff19 	bl	80002cc <__adddf3>
 801049a:	4606      	mov	r6, r0
 801049c:	460f      	mov	r7, r1
 801049e:	f7f0 fb7b 	bl	8000b98 <__aeabi_d2iz>
 80104a2:	2200      	movs	r2, #0
 80104a4:	4682      	mov	sl, r0
 80104a6:	2300      	movs	r3, #0
 80104a8:	4630      	mov	r0, r6
 80104aa:	4639      	mov	r1, r7
 80104ac:	f7f0 fb36 	bl	8000b1c <__aeabi_dcmplt>
 80104b0:	b148      	cbz	r0, 80104c6 <_dtoa_r+0x186>
 80104b2:	4650      	mov	r0, sl
 80104b4:	f7f0 f856 	bl	8000564 <__aeabi_i2d>
 80104b8:	4632      	mov	r2, r6
 80104ba:	463b      	mov	r3, r7
 80104bc:	f7f0 fb24 	bl	8000b08 <__aeabi_dcmpeq>
 80104c0:	b908      	cbnz	r0, 80104c6 <_dtoa_r+0x186>
 80104c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80104c6:	f1ba 0f16 	cmp.w	sl, #22
 80104ca:	d854      	bhi.n	8010576 <_dtoa_r+0x236>
 80104cc:	4b61      	ldr	r3, [pc, #388]	; (8010654 <_dtoa_r+0x314>)
 80104ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80104d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80104da:	f7f0 fb1f 	bl	8000b1c <__aeabi_dcmplt>
 80104de:	2800      	cmp	r0, #0
 80104e0:	d04b      	beq.n	801057a <_dtoa_r+0x23a>
 80104e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80104e6:	2300      	movs	r3, #0
 80104e8:	930e      	str	r3, [sp, #56]	; 0x38
 80104ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80104ec:	1b5d      	subs	r5, r3, r5
 80104ee:	1e6b      	subs	r3, r5, #1
 80104f0:	9304      	str	r3, [sp, #16]
 80104f2:	bf43      	ittte	mi
 80104f4:	2300      	movmi	r3, #0
 80104f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80104fa:	9304      	strmi	r3, [sp, #16]
 80104fc:	f04f 0800 	movpl.w	r8, #0
 8010500:	f1ba 0f00 	cmp.w	sl, #0
 8010504:	db3b      	blt.n	801057e <_dtoa_r+0x23e>
 8010506:	9b04      	ldr	r3, [sp, #16]
 8010508:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801050c:	4453      	add	r3, sl
 801050e:	9304      	str	r3, [sp, #16]
 8010510:	2300      	movs	r3, #0
 8010512:	9306      	str	r3, [sp, #24]
 8010514:	9b05      	ldr	r3, [sp, #20]
 8010516:	2b09      	cmp	r3, #9
 8010518:	d869      	bhi.n	80105ee <_dtoa_r+0x2ae>
 801051a:	2b05      	cmp	r3, #5
 801051c:	bfc4      	itt	gt
 801051e:	3b04      	subgt	r3, #4
 8010520:	9305      	strgt	r3, [sp, #20]
 8010522:	9b05      	ldr	r3, [sp, #20]
 8010524:	f1a3 0302 	sub.w	r3, r3, #2
 8010528:	bfcc      	ite	gt
 801052a:	2500      	movgt	r5, #0
 801052c:	2501      	movle	r5, #1
 801052e:	2b03      	cmp	r3, #3
 8010530:	d869      	bhi.n	8010606 <_dtoa_r+0x2c6>
 8010532:	e8df f003 	tbb	[pc, r3]
 8010536:	4e2c      	.short	0x4e2c
 8010538:	5a4c      	.short	0x5a4c
 801053a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801053e:	441d      	add	r5, r3
 8010540:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010544:	2b20      	cmp	r3, #32
 8010546:	bfc1      	itttt	gt
 8010548:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801054c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010550:	fa09 f303 	lslgt.w	r3, r9, r3
 8010554:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010558:	bfda      	itte	le
 801055a:	f1c3 0320 	rsble	r3, r3, #32
 801055e:	fa06 f003 	lslle.w	r0, r6, r3
 8010562:	4318      	orrgt	r0, r3
 8010564:	f7ef ffee 	bl	8000544 <__aeabi_ui2d>
 8010568:	2301      	movs	r3, #1
 801056a:	4606      	mov	r6, r0
 801056c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010570:	3d01      	subs	r5, #1
 8010572:	9310      	str	r3, [sp, #64]	; 0x40
 8010574:	e771      	b.n	801045a <_dtoa_r+0x11a>
 8010576:	2301      	movs	r3, #1
 8010578:	e7b6      	b.n	80104e8 <_dtoa_r+0x1a8>
 801057a:	900e      	str	r0, [sp, #56]	; 0x38
 801057c:	e7b5      	b.n	80104ea <_dtoa_r+0x1aa>
 801057e:	f1ca 0300 	rsb	r3, sl, #0
 8010582:	9306      	str	r3, [sp, #24]
 8010584:	2300      	movs	r3, #0
 8010586:	eba8 080a 	sub.w	r8, r8, sl
 801058a:	930d      	str	r3, [sp, #52]	; 0x34
 801058c:	e7c2      	b.n	8010514 <_dtoa_r+0x1d4>
 801058e:	2300      	movs	r3, #0
 8010590:	9308      	str	r3, [sp, #32]
 8010592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010594:	2b00      	cmp	r3, #0
 8010596:	dc39      	bgt.n	801060c <_dtoa_r+0x2cc>
 8010598:	f04f 0901 	mov.w	r9, #1
 801059c:	f8cd 9004 	str.w	r9, [sp, #4]
 80105a0:	464b      	mov	r3, r9
 80105a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80105a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80105a8:	2200      	movs	r2, #0
 80105aa:	6042      	str	r2, [r0, #4]
 80105ac:	2204      	movs	r2, #4
 80105ae:	f102 0614 	add.w	r6, r2, #20
 80105b2:	429e      	cmp	r6, r3
 80105b4:	6841      	ldr	r1, [r0, #4]
 80105b6:	d92f      	bls.n	8010618 <_dtoa_r+0x2d8>
 80105b8:	4620      	mov	r0, r4
 80105ba:	f001 fa6f 	bl	8011a9c <_Balloc>
 80105be:	9000      	str	r0, [sp, #0]
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d14b      	bne.n	801065c <_dtoa_r+0x31c>
 80105c4:	4b24      	ldr	r3, [pc, #144]	; (8010658 <_dtoa_r+0x318>)
 80105c6:	4602      	mov	r2, r0
 80105c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80105cc:	e6d1      	b.n	8010372 <_dtoa_r+0x32>
 80105ce:	2301      	movs	r3, #1
 80105d0:	e7de      	b.n	8010590 <_dtoa_r+0x250>
 80105d2:	2300      	movs	r3, #0
 80105d4:	9308      	str	r3, [sp, #32]
 80105d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105d8:	eb0a 0903 	add.w	r9, sl, r3
 80105dc:	f109 0301 	add.w	r3, r9, #1
 80105e0:	2b01      	cmp	r3, #1
 80105e2:	9301      	str	r3, [sp, #4]
 80105e4:	bfb8      	it	lt
 80105e6:	2301      	movlt	r3, #1
 80105e8:	e7dd      	b.n	80105a6 <_dtoa_r+0x266>
 80105ea:	2301      	movs	r3, #1
 80105ec:	e7f2      	b.n	80105d4 <_dtoa_r+0x294>
 80105ee:	2501      	movs	r5, #1
 80105f0:	2300      	movs	r3, #0
 80105f2:	9305      	str	r3, [sp, #20]
 80105f4:	9508      	str	r5, [sp, #32]
 80105f6:	f04f 39ff 	mov.w	r9, #4294967295
 80105fa:	2200      	movs	r2, #0
 80105fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8010600:	2312      	movs	r3, #18
 8010602:	9209      	str	r2, [sp, #36]	; 0x24
 8010604:	e7cf      	b.n	80105a6 <_dtoa_r+0x266>
 8010606:	2301      	movs	r3, #1
 8010608:	9308      	str	r3, [sp, #32]
 801060a:	e7f4      	b.n	80105f6 <_dtoa_r+0x2b6>
 801060c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010610:	f8cd 9004 	str.w	r9, [sp, #4]
 8010614:	464b      	mov	r3, r9
 8010616:	e7c6      	b.n	80105a6 <_dtoa_r+0x266>
 8010618:	3101      	adds	r1, #1
 801061a:	6041      	str	r1, [r0, #4]
 801061c:	0052      	lsls	r2, r2, #1
 801061e:	e7c6      	b.n	80105ae <_dtoa_r+0x26e>
 8010620:	636f4361 	.word	0x636f4361
 8010624:	3fd287a7 	.word	0x3fd287a7
 8010628:	8b60c8b3 	.word	0x8b60c8b3
 801062c:	3fc68a28 	.word	0x3fc68a28
 8010630:	509f79fb 	.word	0x509f79fb
 8010634:	3fd34413 	.word	0x3fd34413
 8010638:	080148f5 	.word	0x080148f5
 801063c:	0801490c 	.word	0x0801490c
 8010640:	7ff00000 	.word	0x7ff00000
 8010644:	080148f1 	.word	0x080148f1
 8010648:	080148e8 	.word	0x080148e8
 801064c:	08014bd2 	.word	0x08014bd2
 8010650:	3ff80000 	.word	0x3ff80000
 8010654:	08014ae8 	.word	0x08014ae8
 8010658:	0801496b 	.word	0x0801496b
 801065c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801065e:	9a00      	ldr	r2, [sp, #0]
 8010660:	601a      	str	r2, [r3, #0]
 8010662:	9b01      	ldr	r3, [sp, #4]
 8010664:	2b0e      	cmp	r3, #14
 8010666:	f200 80ad 	bhi.w	80107c4 <_dtoa_r+0x484>
 801066a:	2d00      	cmp	r5, #0
 801066c:	f000 80aa 	beq.w	80107c4 <_dtoa_r+0x484>
 8010670:	f1ba 0f00 	cmp.w	sl, #0
 8010674:	dd36      	ble.n	80106e4 <_dtoa_r+0x3a4>
 8010676:	4ac3      	ldr	r2, [pc, #780]	; (8010984 <_dtoa_r+0x644>)
 8010678:	f00a 030f 	and.w	r3, sl, #15
 801067c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010680:	ed93 7b00 	vldr	d7, [r3]
 8010684:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010688:	ea4f 172a 	mov.w	r7, sl, asr #4
 801068c:	eeb0 8a47 	vmov.f32	s16, s14
 8010690:	eef0 8a67 	vmov.f32	s17, s15
 8010694:	d016      	beq.n	80106c4 <_dtoa_r+0x384>
 8010696:	4bbc      	ldr	r3, [pc, #752]	; (8010988 <_dtoa_r+0x648>)
 8010698:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801069c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80106a0:	f7f0 f8f4 	bl	800088c <__aeabi_ddiv>
 80106a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106a8:	f007 070f 	and.w	r7, r7, #15
 80106ac:	2503      	movs	r5, #3
 80106ae:	4eb6      	ldr	r6, [pc, #728]	; (8010988 <_dtoa_r+0x648>)
 80106b0:	b957      	cbnz	r7, 80106c8 <_dtoa_r+0x388>
 80106b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106b6:	ec53 2b18 	vmov	r2, r3, d8
 80106ba:	f7f0 f8e7 	bl	800088c <__aeabi_ddiv>
 80106be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106c2:	e029      	b.n	8010718 <_dtoa_r+0x3d8>
 80106c4:	2502      	movs	r5, #2
 80106c6:	e7f2      	b.n	80106ae <_dtoa_r+0x36e>
 80106c8:	07f9      	lsls	r1, r7, #31
 80106ca:	d508      	bpl.n	80106de <_dtoa_r+0x39e>
 80106cc:	ec51 0b18 	vmov	r0, r1, d8
 80106d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80106d4:	f7ef ffb0 	bl	8000638 <__aeabi_dmul>
 80106d8:	ec41 0b18 	vmov	d8, r0, r1
 80106dc:	3501      	adds	r5, #1
 80106de:	107f      	asrs	r7, r7, #1
 80106e0:	3608      	adds	r6, #8
 80106e2:	e7e5      	b.n	80106b0 <_dtoa_r+0x370>
 80106e4:	f000 80a6 	beq.w	8010834 <_dtoa_r+0x4f4>
 80106e8:	f1ca 0600 	rsb	r6, sl, #0
 80106ec:	4ba5      	ldr	r3, [pc, #660]	; (8010984 <_dtoa_r+0x644>)
 80106ee:	4fa6      	ldr	r7, [pc, #664]	; (8010988 <_dtoa_r+0x648>)
 80106f0:	f006 020f 	and.w	r2, r6, #15
 80106f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010700:	f7ef ff9a 	bl	8000638 <__aeabi_dmul>
 8010704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010708:	1136      	asrs	r6, r6, #4
 801070a:	2300      	movs	r3, #0
 801070c:	2502      	movs	r5, #2
 801070e:	2e00      	cmp	r6, #0
 8010710:	f040 8085 	bne.w	801081e <_dtoa_r+0x4de>
 8010714:	2b00      	cmp	r3, #0
 8010716:	d1d2      	bne.n	80106be <_dtoa_r+0x37e>
 8010718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801071a:	2b00      	cmp	r3, #0
 801071c:	f000 808c 	beq.w	8010838 <_dtoa_r+0x4f8>
 8010720:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010724:	4b99      	ldr	r3, [pc, #612]	; (801098c <_dtoa_r+0x64c>)
 8010726:	2200      	movs	r2, #0
 8010728:	4630      	mov	r0, r6
 801072a:	4639      	mov	r1, r7
 801072c:	f7f0 f9f6 	bl	8000b1c <__aeabi_dcmplt>
 8010730:	2800      	cmp	r0, #0
 8010732:	f000 8081 	beq.w	8010838 <_dtoa_r+0x4f8>
 8010736:	9b01      	ldr	r3, [sp, #4]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d07d      	beq.n	8010838 <_dtoa_r+0x4f8>
 801073c:	f1b9 0f00 	cmp.w	r9, #0
 8010740:	dd3c      	ble.n	80107bc <_dtoa_r+0x47c>
 8010742:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010746:	9307      	str	r3, [sp, #28]
 8010748:	2200      	movs	r2, #0
 801074a:	4b91      	ldr	r3, [pc, #580]	; (8010990 <_dtoa_r+0x650>)
 801074c:	4630      	mov	r0, r6
 801074e:	4639      	mov	r1, r7
 8010750:	f7ef ff72 	bl	8000638 <__aeabi_dmul>
 8010754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010758:	3501      	adds	r5, #1
 801075a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801075e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010762:	4628      	mov	r0, r5
 8010764:	f7ef fefe 	bl	8000564 <__aeabi_i2d>
 8010768:	4632      	mov	r2, r6
 801076a:	463b      	mov	r3, r7
 801076c:	f7ef ff64 	bl	8000638 <__aeabi_dmul>
 8010770:	4b88      	ldr	r3, [pc, #544]	; (8010994 <_dtoa_r+0x654>)
 8010772:	2200      	movs	r2, #0
 8010774:	f7ef fdaa 	bl	80002cc <__adddf3>
 8010778:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801077c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010780:	9303      	str	r3, [sp, #12]
 8010782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010784:	2b00      	cmp	r3, #0
 8010786:	d15c      	bne.n	8010842 <_dtoa_r+0x502>
 8010788:	4b83      	ldr	r3, [pc, #524]	; (8010998 <_dtoa_r+0x658>)
 801078a:	2200      	movs	r2, #0
 801078c:	4630      	mov	r0, r6
 801078e:	4639      	mov	r1, r7
 8010790:	f7ef fd9a 	bl	80002c8 <__aeabi_dsub>
 8010794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010798:	4606      	mov	r6, r0
 801079a:	460f      	mov	r7, r1
 801079c:	f7f0 f9dc 	bl	8000b58 <__aeabi_dcmpgt>
 80107a0:	2800      	cmp	r0, #0
 80107a2:	f040 8296 	bne.w	8010cd2 <_dtoa_r+0x992>
 80107a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80107aa:	4630      	mov	r0, r6
 80107ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80107b0:	4639      	mov	r1, r7
 80107b2:	f7f0 f9b3 	bl	8000b1c <__aeabi_dcmplt>
 80107b6:	2800      	cmp	r0, #0
 80107b8:	f040 8288 	bne.w	8010ccc <_dtoa_r+0x98c>
 80107bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80107c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80107c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	f2c0 8158 	blt.w	8010a7c <_dtoa_r+0x73c>
 80107cc:	f1ba 0f0e 	cmp.w	sl, #14
 80107d0:	f300 8154 	bgt.w	8010a7c <_dtoa_r+0x73c>
 80107d4:	4b6b      	ldr	r3, [pc, #428]	; (8010984 <_dtoa_r+0x644>)
 80107d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80107da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80107de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	f280 80e3 	bge.w	80109ac <_dtoa_r+0x66c>
 80107e6:	9b01      	ldr	r3, [sp, #4]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	f300 80df 	bgt.w	80109ac <_dtoa_r+0x66c>
 80107ee:	f040 826d 	bne.w	8010ccc <_dtoa_r+0x98c>
 80107f2:	4b69      	ldr	r3, [pc, #420]	; (8010998 <_dtoa_r+0x658>)
 80107f4:	2200      	movs	r2, #0
 80107f6:	4640      	mov	r0, r8
 80107f8:	4649      	mov	r1, r9
 80107fa:	f7ef ff1d 	bl	8000638 <__aeabi_dmul>
 80107fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010802:	f7f0 f99f 	bl	8000b44 <__aeabi_dcmpge>
 8010806:	9e01      	ldr	r6, [sp, #4]
 8010808:	4637      	mov	r7, r6
 801080a:	2800      	cmp	r0, #0
 801080c:	f040 8243 	bne.w	8010c96 <_dtoa_r+0x956>
 8010810:	9d00      	ldr	r5, [sp, #0]
 8010812:	2331      	movs	r3, #49	; 0x31
 8010814:	f805 3b01 	strb.w	r3, [r5], #1
 8010818:	f10a 0a01 	add.w	sl, sl, #1
 801081c:	e23f      	b.n	8010c9e <_dtoa_r+0x95e>
 801081e:	07f2      	lsls	r2, r6, #31
 8010820:	d505      	bpl.n	801082e <_dtoa_r+0x4ee>
 8010822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010826:	f7ef ff07 	bl	8000638 <__aeabi_dmul>
 801082a:	3501      	adds	r5, #1
 801082c:	2301      	movs	r3, #1
 801082e:	1076      	asrs	r6, r6, #1
 8010830:	3708      	adds	r7, #8
 8010832:	e76c      	b.n	801070e <_dtoa_r+0x3ce>
 8010834:	2502      	movs	r5, #2
 8010836:	e76f      	b.n	8010718 <_dtoa_r+0x3d8>
 8010838:	9b01      	ldr	r3, [sp, #4]
 801083a:	f8cd a01c 	str.w	sl, [sp, #28]
 801083e:	930c      	str	r3, [sp, #48]	; 0x30
 8010840:	e78d      	b.n	801075e <_dtoa_r+0x41e>
 8010842:	9900      	ldr	r1, [sp, #0]
 8010844:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010846:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010848:	4b4e      	ldr	r3, [pc, #312]	; (8010984 <_dtoa_r+0x644>)
 801084a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801084e:	4401      	add	r1, r0
 8010850:	9102      	str	r1, [sp, #8]
 8010852:	9908      	ldr	r1, [sp, #32]
 8010854:	eeb0 8a47 	vmov.f32	s16, s14
 8010858:	eef0 8a67 	vmov.f32	s17, s15
 801085c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010860:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010864:	2900      	cmp	r1, #0
 8010866:	d045      	beq.n	80108f4 <_dtoa_r+0x5b4>
 8010868:	494c      	ldr	r1, [pc, #304]	; (801099c <_dtoa_r+0x65c>)
 801086a:	2000      	movs	r0, #0
 801086c:	f7f0 f80e 	bl	800088c <__aeabi_ddiv>
 8010870:	ec53 2b18 	vmov	r2, r3, d8
 8010874:	f7ef fd28 	bl	80002c8 <__aeabi_dsub>
 8010878:	9d00      	ldr	r5, [sp, #0]
 801087a:	ec41 0b18 	vmov	d8, r0, r1
 801087e:	4639      	mov	r1, r7
 8010880:	4630      	mov	r0, r6
 8010882:	f7f0 f989 	bl	8000b98 <__aeabi_d2iz>
 8010886:	900c      	str	r0, [sp, #48]	; 0x30
 8010888:	f7ef fe6c 	bl	8000564 <__aeabi_i2d>
 801088c:	4602      	mov	r2, r0
 801088e:	460b      	mov	r3, r1
 8010890:	4630      	mov	r0, r6
 8010892:	4639      	mov	r1, r7
 8010894:	f7ef fd18 	bl	80002c8 <__aeabi_dsub>
 8010898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801089a:	3330      	adds	r3, #48	; 0x30
 801089c:	f805 3b01 	strb.w	r3, [r5], #1
 80108a0:	ec53 2b18 	vmov	r2, r3, d8
 80108a4:	4606      	mov	r6, r0
 80108a6:	460f      	mov	r7, r1
 80108a8:	f7f0 f938 	bl	8000b1c <__aeabi_dcmplt>
 80108ac:	2800      	cmp	r0, #0
 80108ae:	d165      	bne.n	801097c <_dtoa_r+0x63c>
 80108b0:	4632      	mov	r2, r6
 80108b2:	463b      	mov	r3, r7
 80108b4:	4935      	ldr	r1, [pc, #212]	; (801098c <_dtoa_r+0x64c>)
 80108b6:	2000      	movs	r0, #0
 80108b8:	f7ef fd06 	bl	80002c8 <__aeabi_dsub>
 80108bc:	ec53 2b18 	vmov	r2, r3, d8
 80108c0:	f7f0 f92c 	bl	8000b1c <__aeabi_dcmplt>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	f040 80b9 	bne.w	8010a3c <_dtoa_r+0x6fc>
 80108ca:	9b02      	ldr	r3, [sp, #8]
 80108cc:	429d      	cmp	r5, r3
 80108ce:	f43f af75 	beq.w	80107bc <_dtoa_r+0x47c>
 80108d2:	4b2f      	ldr	r3, [pc, #188]	; (8010990 <_dtoa_r+0x650>)
 80108d4:	ec51 0b18 	vmov	r0, r1, d8
 80108d8:	2200      	movs	r2, #0
 80108da:	f7ef fead 	bl	8000638 <__aeabi_dmul>
 80108de:	4b2c      	ldr	r3, [pc, #176]	; (8010990 <_dtoa_r+0x650>)
 80108e0:	ec41 0b18 	vmov	d8, r0, r1
 80108e4:	2200      	movs	r2, #0
 80108e6:	4630      	mov	r0, r6
 80108e8:	4639      	mov	r1, r7
 80108ea:	f7ef fea5 	bl	8000638 <__aeabi_dmul>
 80108ee:	4606      	mov	r6, r0
 80108f0:	460f      	mov	r7, r1
 80108f2:	e7c4      	b.n	801087e <_dtoa_r+0x53e>
 80108f4:	ec51 0b17 	vmov	r0, r1, d7
 80108f8:	f7ef fe9e 	bl	8000638 <__aeabi_dmul>
 80108fc:	9b02      	ldr	r3, [sp, #8]
 80108fe:	9d00      	ldr	r5, [sp, #0]
 8010900:	930c      	str	r3, [sp, #48]	; 0x30
 8010902:	ec41 0b18 	vmov	d8, r0, r1
 8010906:	4639      	mov	r1, r7
 8010908:	4630      	mov	r0, r6
 801090a:	f7f0 f945 	bl	8000b98 <__aeabi_d2iz>
 801090e:	9011      	str	r0, [sp, #68]	; 0x44
 8010910:	f7ef fe28 	bl	8000564 <__aeabi_i2d>
 8010914:	4602      	mov	r2, r0
 8010916:	460b      	mov	r3, r1
 8010918:	4630      	mov	r0, r6
 801091a:	4639      	mov	r1, r7
 801091c:	f7ef fcd4 	bl	80002c8 <__aeabi_dsub>
 8010920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010922:	3330      	adds	r3, #48	; 0x30
 8010924:	f805 3b01 	strb.w	r3, [r5], #1
 8010928:	9b02      	ldr	r3, [sp, #8]
 801092a:	429d      	cmp	r5, r3
 801092c:	4606      	mov	r6, r0
 801092e:	460f      	mov	r7, r1
 8010930:	f04f 0200 	mov.w	r2, #0
 8010934:	d134      	bne.n	80109a0 <_dtoa_r+0x660>
 8010936:	4b19      	ldr	r3, [pc, #100]	; (801099c <_dtoa_r+0x65c>)
 8010938:	ec51 0b18 	vmov	r0, r1, d8
 801093c:	f7ef fcc6 	bl	80002cc <__adddf3>
 8010940:	4602      	mov	r2, r0
 8010942:	460b      	mov	r3, r1
 8010944:	4630      	mov	r0, r6
 8010946:	4639      	mov	r1, r7
 8010948:	f7f0 f906 	bl	8000b58 <__aeabi_dcmpgt>
 801094c:	2800      	cmp	r0, #0
 801094e:	d175      	bne.n	8010a3c <_dtoa_r+0x6fc>
 8010950:	ec53 2b18 	vmov	r2, r3, d8
 8010954:	4911      	ldr	r1, [pc, #68]	; (801099c <_dtoa_r+0x65c>)
 8010956:	2000      	movs	r0, #0
 8010958:	f7ef fcb6 	bl	80002c8 <__aeabi_dsub>
 801095c:	4602      	mov	r2, r0
 801095e:	460b      	mov	r3, r1
 8010960:	4630      	mov	r0, r6
 8010962:	4639      	mov	r1, r7
 8010964:	f7f0 f8da 	bl	8000b1c <__aeabi_dcmplt>
 8010968:	2800      	cmp	r0, #0
 801096a:	f43f af27 	beq.w	80107bc <_dtoa_r+0x47c>
 801096e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010970:	1e6b      	subs	r3, r5, #1
 8010972:	930c      	str	r3, [sp, #48]	; 0x30
 8010974:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010978:	2b30      	cmp	r3, #48	; 0x30
 801097a:	d0f8      	beq.n	801096e <_dtoa_r+0x62e>
 801097c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010980:	e04a      	b.n	8010a18 <_dtoa_r+0x6d8>
 8010982:	bf00      	nop
 8010984:	08014ae8 	.word	0x08014ae8
 8010988:	08014ac0 	.word	0x08014ac0
 801098c:	3ff00000 	.word	0x3ff00000
 8010990:	40240000 	.word	0x40240000
 8010994:	401c0000 	.word	0x401c0000
 8010998:	40140000 	.word	0x40140000
 801099c:	3fe00000 	.word	0x3fe00000
 80109a0:	4baf      	ldr	r3, [pc, #700]	; (8010c60 <_dtoa_r+0x920>)
 80109a2:	f7ef fe49 	bl	8000638 <__aeabi_dmul>
 80109a6:	4606      	mov	r6, r0
 80109a8:	460f      	mov	r7, r1
 80109aa:	e7ac      	b.n	8010906 <_dtoa_r+0x5c6>
 80109ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80109b0:	9d00      	ldr	r5, [sp, #0]
 80109b2:	4642      	mov	r2, r8
 80109b4:	464b      	mov	r3, r9
 80109b6:	4630      	mov	r0, r6
 80109b8:	4639      	mov	r1, r7
 80109ba:	f7ef ff67 	bl	800088c <__aeabi_ddiv>
 80109be:	f7f0 f8eb 	bl	8000b98 <__aeabi_d2iz>
 80109c2:	9002      	str	r0, [sp, #8]
 80109c4:	f7ef fdce 	bl	8000564 <__aeabi_i2d>
 80109c8:	4642      	mov	r2, r8
 80109ca:	464b      	mov	r3, r9
 80109cc:	f7ef fe34 	bl	8000638 <__aeabi_dmul>
 80109d0:	4602      	mov	r2, r0
 80109d2:	460b      	mov	r3, r1
 80109d4:	4630      	mov	r0, r6
 80109d6:	4639      	mov	r1, r7
 80109d8:	f7ef fc76 	bl	80002c8 <__aeabi_dsub>
 80109dc:	9e02      	ldr	r6, [sp, #8]
 80109de:	9f01      	ldr	r7, [sp, #4]
 80109e0:	3630      	adds	r6, #48	; 0x30
 80109e2:	f805 6b01 	strb.w	r6, [r5], #1
 80109e6:	9e00      	ldr	r6, [sp, #0]
 80109e8:	1bae      	subs	r6, r5, r6
 80109ea:	42b7      	cmp	r7, r6
 80109ec:	4602      	mov	r2, r0
 80109ee:	460b      	mov	r3, r1
 80109f0:	d137      	bne.n	8010a62 <_dtoa_r+0x722>
 80109f2:	f7ef fc6b 	bl	80002cc <__adddf3>
 80109f6:	4642      	mov	r2, r8
 80109f8:	464b      	mov	r3, r9
 80109fa:	4606      	mov	r6, r0
 80109fc:	460f      	mov	r7, r1
 80109fe:	f7f0 f8ab 	bl	8000b58 <__aeabi_dcmpgt>
 8010a02:	b9c8      	cbnz	r0, 8010a38 <_dtoa_r+0x6f8>
 8010a04:	4642      	mov	r2, r8
 8010a06:	464b      	mov	r3, r9
 8010a08:	4630      	mov	r0, r6
 8010a0a:	4639      	mov	r1, r7
 8010a0c:	f7f0 f87c 	bl	8000b08 <__aeabi_dcmpeq>
 8010a10:	b110      	cbz	r0, 8010a18 <_dtoa_r+0x6d8>
 8010a12:	9b02      	ldr	r3, [sp, #8]
 8010a14:	07d9      	lsls	r1, r3, #31
 8010a16:	d40f      	bmi.n	8010a38 <_dtoa_r+0x6f8>
 8010a18:	4620      	mov	r0, r4
 8010a1a:	4659      	mov	r1, fp
 8010a1c:	f001 f87e 	bl	8011b1c <_Bfree>
 8010a20:	2300      	movs	r3, #0
 8010a22:	702b      	strb	r3, [r5, #0]
 8010a24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a26:	f10a 0001 	add.w	r0, sl, #1
 8010a2a:	6018      	str	r0, [r3, #0]
 8010a2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	f43f acd8 	beq.w	80103e4 <_dtoa_r+0xa4>
 8010a34:	601d      	str	r5, [r3, #0]
 8010a36:	e4d5      	b.n	80103e4 <_dtoa_r+0xa4>
 8010a38:	f8cd a01c 	str.w	sl, [sp, #28]
 8010a3c:	462b      	mov	r3, r5
 8010a3e:	461d      	mov	r5, r3
 8010a40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a44:	2a39      	cmp	r2, #57	; 0x39
 8010a46:	d108      	bne.n	8010a5a <_dtoa_r+0x71a>
 8010a48:	9a00      	ldr	r2, [sp, #0]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d1f7      	bne.n	8010a3e <_dtoa_r+0x6fe>
 8010a4e:	9a07      	ldr	r2, [sp, #28]
 8010a50:	9900      	ldr	r1, [sp, #0]
 8010a52:	3201      	adds	r2, #1
 8010a54:	9207      	str	r2, [sp, #28]
 8010a56:	2230      	movs	r2, #48	; 0x30
 8010a58:	700a      	strb	r2, [r1, #0]
 8010a5a:	781a      	ldrb	r2, [r3, #0]
 8010a5c:	3201      	adds	r2, #1
 8010a5e:	701a      	strb	r2, [r3, #0]
 8010a60:	e78c      	b.n	801097c <_dtoa_r+0x63c>
 8010a62:	4b7f      	ldr	r3, [pc, #508]	; (8010c60 <_dtoa_r+0x920>)
 8010a64:	2200      	movs	r2, #0
 8010a66:	f7ef fde7 	bl	8000638 <__aeabi_dmul>
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	4606      	mov	r6, r0
 8010a70:	460f      	mov	r7, r1
 8010a72:	f7f0 f849 	bl	8000b08 <__aeabi_dcmpeq>
 8010a76:	2800      	cmp	r0, #0
 8010a78:	d09b      	beq.n	80109b2 <_dtoa_r+0x672>
 8010a7a:	e7cd      	b.n	8010a18 <_dtoa_r+0x6d8>
 8010a7c:	9a08      	ldr	r2, [sp, #32]
 8010a7e:	2a00      	cmp	r2, #0
 8010a80:	f000 80c4 	beq.w	8010c0c <_dtoa_r+0x8cc>
 8010a84:	9a05      	ldr	r2, [sp, #20]
 8010a86:	2a01      	cmp	r2, #1
 8010a88:	f300 80a8 	bgt.w	8010bdc <_dtoa_r+0x89c>
 8010a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010a8e:	2a00      	cmp	r2, #0
 8010a90:	f000 80a0 	beq.w	8010bd4 <_dtoa_r+0x894>
 8010a94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010a98:	9e06      	ldr	r6, [sp, #24]
 8010a9a:	4645      	mov	r5, r8
 8010a9c:	9a04      	ldr	r2, [sp, #16]
 8010a9e:	2101      	movs	r1, #1
 8010aa0:	441a      	add	r2, r3
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	4498      	add	r8, r3
 8010aa6:	9204      	str	r2, [sp, #16]
 8010aa8:	f001 f93e 	bl	8011d28 <__i2b>
 8010aac:	4607      	mov	r7, r0
 8010aae:	2d00      	cmp	r5, #0
 8010ab0:	dd0b      	ble.n	8010aca <_dtoa_r+0x78a>
 8010ab2:	9b04      	ldr	r3, [sp, #16]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	dd08      	ble.n	8010aca <_dtoa_r+0x78a>
 8010ab8:	42ab      	cmp	r3, r5
 8010aba:	9a04      	ldr	r2, [sp, #16]
 8010abc:	bfa8      	it	ge
 8010abe:	462b      	movge	r3, r5
 8010ac0:	eba8 0803 	sub.w	r8, r8, r3
 8010ac4:	1aed      	subs	r5, r5, r3
 8010ac6:	1ad3      	subs	r3, r2, r3
 8010ac8:	9304      	str	r3, [sp, #16]
 8010aca:	9b06      	ldr	r3, [sp, #24]
 8010acc:	b1fb      	cbz	r3, 8010b0e <_dtoa_r+0x7ce>
 8010ace:	9b08      	ldr	r3, [sp, #32]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	f000 809f 	beq.w	8010c14 <_dtoa_r+0x8d4>
 8010ad6:	2e00      	cmp	r6, #0
 8010ad8:	dd11      	ble.n	8010afe <_dtoa_r+0x7be>
 8010ada:	4639      	mov	r1, r7
 8010adc:	4632      	mov	r2, r6
 8010ade:	4620      	mov	r0, r4
 8010ae0:	f001 f9de 	bl	8011ea0 <__pow5mult>
 8010ae4:	465a      	mov	r2, fp
 8010ae6:	4601      	mov	r1, r0
 8010ae8:	4607      	mov	r7, r0
 8010aea:	4620      	mov	r0, r4
 8010aec:	f001 f932 	bl	8011d54 <__multiply>
 8010af0:	4659      	mov	r1, fp
 8010af2:	9007      	str	r0, [sp, #28]
 8010af4:	4620      	mov	r0, r4
 8010af6:	f001 f811 	bl	8011b1c <_Bfree>
 8010afa:	9b07      	ldr	r3, [sp, #28]
 8010afc:	469b      	mov	fp, r3
 8010afe:	9b06      	ldr	r3, [sp, #24]
 8010b00:	1b9a      	subs	r2, r3, r6
 8010b02:	d004      	beq.n	8010b0e <_dtoa_r+0x7ce>
 8010b04:	4659      	mov	r1, fp
 8010b06:	4620      	mov	r0, r4
 8010b08:	f001 f9ca 	bl	8011ea0 <__pow5mult>
 8010b0c:	4683      	mov	fp, r0
 8010b0e:	2101      	movs	r1, #1
 8010b10:	4620      	mov	r0, r4
 8010b12:	f001 f909 	bl	8011d28 <__i2b>
 8010b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	4606      	mov	r6, r0
 8010b1c:	dd7c      	ble.n	8010c18 <_dtoa_r+0x8d8>
 8010b1e:	461a      	mov	r2, r3
 8010b20:	4601      	mov	r1, r0
 8010b22:	4620      	mov	r0, r4
 8010b24:	f001 f9bc 	bl	8011ea0 <__pow5mult>
 8010b28:	9b05      	ldr	r3, [sp, #20]
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	4606      	mov	r6, r0
 8010b2e:	dd76      	ble.n	8010c1e <_dtoa_r+0x8de>
 8010b30:	2300      	movs	r3, #0
 8010b32:	9306      	str	r3, [sp, #24]
 8010b34:	6933      	ldr	r3, [r6, #16]
 8010b36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010b3a:	6918      	ldr	r0, [r3, #16]
 8010b3c:	f001 f8a4 	bl	8011c88 <__hi0bits>
 8010b40:	f1c0 0020 	rsb	r0, r0, #32
 8010b44:	9b04      	ldr	r3, [sp, #16]
 8010b46:	4418      	add	r0, r3
 8010b48:	f010 001f 	ands.w	r0, r0, #31
 8010b4c:	f000 8086 	beq.w	8010c5c <_dtoa_r+0x91c>
 8010b50:	f1c0 0320 	rsb	r3, r0, #32
 8010b54:	2b04      	cmp	r3, #4
 8010b56:	dd7f      	ble.n	8010c58 <_dtoa_r+0x918>
 8010b58:	f1c0 001c 	rsb	r0, r0, #28
 8010b5c:	9b04      	ldr	r3, [sp, #16]
 8010b5e:	4403      	add	r3, r0
 8010b60:	4480      	add	r8, r0
 8010b62:	4405      	add	r5, r0
 8010b64:	9304      	str	r3, [sp, #16]
 8010b66:	f1b8 0f00 	cmp.w	r8, #0
 8010b6a:	dd05      	ble.n	8010b78 <_dtoa_r+0x838>
 8010b6c:	4659      	mov	r1, fp
 8010b6e:	4642      	mov	r2, r8
 8010b70:	4620      	mov	r0, r4
 8010b72:	f001 f9ef 	bl	8011f54 <__lshift>
 8010b76:	4683      	mov	fp, r0
 8010b78:	9b04      	ldr	r3, [sp, #16]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	dd05      	ble.n	8010b8a <_dtoa_r+0x84a>
 8010b7e:	4631      	mov	r1, r6
 8010b80:	461a      	mov	r2, r3
 8010b82:	4620      	mov	r0, r4
 8010b84:	f001 f9e6 	bl	8011f54 <__lshift>
 8010b88:	4606      	mov	r6, r0
 8010b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d069      	beq.n	8010c64 <_dtoa_r+0x924>
 8010b90:	4631      	mov	r1, r6
 8010b92:	4658      	mov	r0, fp
 8010b94:	f001 fa4a 	bl	801202c <__mcmp>
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	da63      	bge.n	8010c64 <_dtoa_r+0x924>
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	4659      	mov	r1, fp
 8010ba0:	220a      	movs	r2, #10
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	f000 ffdc 	bl	8011b60 <__multadd>
 8010ba8:	9b08      	ldr	r3, [sp, #32]
 8010baa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010bae:	4683      	mov	fp, r0
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f000 818f 	beq.w	8010ed4 <_dtoa_r+0xb94>
 8010bb6:	4639      	mov	r1, r7
 8010bb8:	2300      	movs	r3, #0
 8010bba:	220a      	movs	r2, #10
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	f000 ffcf 	bl	8011b60 <__multadd>
 8010bc2:	f1b9 0f00 	cmp.w	r9, #0
 8010bc6:	4607      	mov	r7, r0
 8010bc8:	f300 808e 	bgt.w	8010ce8 <_dtoa_r+0x9a8>
 8010bcc:	9b05      	ldr	r3, [sp, #20]
 8010bce:	2b02      	cmp	r3, #2
 8010bd0:	dc50      	bgt.n	8010c74 <_dtoa_r+0x934>
 8010bd2:	e089      	b.n	8010ce8 <_dtoa_r+0x9a8>
 8010bd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010bd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010bda:	e75d      	b.n	8010a98 <_dtoa_r+0x758>
 8010bdc:	9b01      	ldr	r3, [sp, #4]
 8010bde:	1e5e      	subs	r6, r3, #1
 8010be0:	9b06      	ldr	r3, [sp, #24]
 8010be2:	42b3      	cmp	r3, r6
 8010be4:	bfbf      	itttt	lt
 8010be6:	9b06      	ldrlt	r3, [sp, #24]
 8010be8:	9606      	strlt	r6, [sp, #24]
 8010bea:	1af2      	sublt	r2, r6, r3
 8010bec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8010bee:	bfb6      	itet	lt
 8010bf0:	189b      	addlt	r3, r3, r2
 8010bf2:	1b9e      	subge	r6, r3, r6
 8010bf4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010bf6:	9b01      	ldr	r3, [sp, #4]
 8010bf8:	bfb8      	it	lt
 8010bfa:	2600      	movlt	r6, #0
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	bfb5      	itete	lt
 8010c00:	eba8 0503 	sublt.w	r5, r8, r3
 8010c04:	9b01      	ldrge	r3, [sp, #4]
 8010c06:	2300      	movlt	r3, #0
 8010c08:	4645      	movge	r5, r8
 8010c0a:	e747      	b.n	8010a9c <_dtoa_r+0x75c>
 8010c0c:	9e06      	ldr	r6, [sp, #24]
 8010c0e:	9f08      	ldr	r7, [sp, #32]
 8010c10:	4645      	mov	r5, r8
 8010c12:	e74c      	b.n	8010aae <_dtoa_r+0x76e>
 8010c14:	9a06      	ldr	r2, [sp, #24]
 8010c16:	e775      	b.n	8010b04 <_dtoa_r+0x7c4>
 8010c18:	9b05      	ldr	r3, [sp, #20]
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	dc18      	bgt.n	8010c50 <_dtoa_r+0x910>
 8010c1e:	9b02      	ldr	r3, [sp, #8]
 8010c20:	b9b3      	cbnz	r3, 8010c50 <_dtoa_r+0x910>
 8010c22:	9b03      	ldr	r3, [sp, #12]
 8010c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c28:	b9a3      	cbnz	r3, 8010c54 <_dtoa_r+0x914>
 8010c2a:	9b03      	ldr	r3, [sp, #12]
 8010c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c30:	0d1b      	lsrs	r3, r3, #20
 8010c32:	051b      	lsls	r3, r3, #20
 8010c34:	b12b      	cbz	r3, 8010c42 <_dtoa_r+0x902>
 8010c36:	9b04      	ldr	r3, [sp, #16]
 8010c38:	3301      	adds	r3, #1
 8010c3a:	9304      	str	r3, [sp, #16]
 8010c3c:	f108 0801 	add.w	r8, r8, #1
 8010c40:	2301      	movs	r3, #1
 8010c42:	9306      	str	r3, [sp, #24]
 8010c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	f47f af74 	bne.w	8010b34 <_dtoa_r+0x7f4>
 8010c4c:	2001      	movs	r0, #1
 8010c4e:	e779      	b.n	8010b44 <_dtoa_r+0x804>
 8010c50:	2300      	movs	r3, #0
 8010c52:	e7f6      	b.n	8010c42 <_dtoa_r+0x902>
 8010c54:	9b02      	ldr	r3, [sp, #8]
 8010c56:	e7f4      	b.n	8010c42 <_dtoa_r+0x902>
 8010c58:	d085      	beq.n	8010b66 <_dtoa_r+0x826>
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	301c      	adds	r0, #28
 8010c5e:	e77d      	b.n	8010b5c <_dtoa_r+0x81c>
 8010c60:	40240000 	.word	0x40240000
 8010c64:	9b01      	ldr	r3, [sp, #4]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	dc38      	bgt.n	8010cdc <_dtoa_r+0x99c>
 8010c6a:	9b05      	ldr	r3, [sp, #20]
 8010c6c:	2b02      	cmp	r3, #2
 8010c6e:	dd35      	ble.n	8010cdc <_dtoa_r+0x99c>
 8010c70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010c74:	f1b9 0f00 	cmp.w	r9, #0
 8010c78:	d10d      	bne.n	8010c96 <_dtoa_r+0x956>
 8010c7a:	4631      	mov	r1, r6
 8010c7c:	464b      	mov	r3, r9
 8010c7e:	2205      	movs	r2, #5
 8010c80:	4620      	mov	r0, r4
 8010c82:	f000 ff6d 	bl	8011b60 <__multadd>
 8010c86:	4601      	mov	r1, r0
 8010c88:	4606      	mov	r6, r0
 8010c8a:	4658      	mov	r0, fp
 8010c8c:	f001 f9ce 	bl	801202c <__mcmp>
 8010c90:	2800      	cmp	r0, #0
 8010c92:	f73f adbd 	bgt.w	8010810 <_dtoa_r+0x4d0>
 8010c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c98:	9d00      	ldr	r5, [sp, #0]
 8010c9a:	ea6f 0a03 	mvn.w	sl, r3
 8010c9e:	f04f 0800 	mov.w	r8, #0
 8010ca2:	4631      	mov	r1, r6
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f000 ff39 	bl	8011b1c <_Bfree>
 8010caa:	2f00      	cmp	r7, #0
 8010cac:	f43f aeb4 	beq.w	8010a18 <_dtoa_r+0x6d8>
 8010cb0:	f1b8 0f00 	cmp.w	r8, #0
 8010cb4:	d005      	beq.n	8010cc2 <_dtoa_r+0x982>
 8010cb6:	45b8      	cmp	r8, r7
 8010cb8:	d003      	beq.n	8010cc2 <_dtoa_r+0x982>
 8010cba:	4641      	mov	r1, r8
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f000 ff2d 	bl	8011b1c <_Bfree>
 8010cc2:	4639      	mov	r1, r7
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f000 ff29 	bl	8011b1c <_Bfree>
 8010cca:	e6a5      	b.n	8010a18 <_dtoa_r+0x6d8>
 8010ccc:	2600      	movs	r6, #0
 8010cce:	4637      	mov	r7, r6
 8010cd0:	e7e1      	b.n	8010c96 <_dtoa_r+0x956>
 8010cd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010cd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010cd8:	4637      	mov	r7, r6
 8010cda:	e599      	b.n	8010810 <_dtoa_r+0x4d0>
 8010cdc:	9b08      	ldr	r3, [sp, #32]
 8010cde:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	f000 80fd 	beq.w	8010ee2 <_dtoa_r+0xba2>
 8010ce8:	2d00      	cmp	r5, #0
 8010cea:	dd05      	ble.n	8010cf8 <_dtoa_r+0x9b8>
 8010cec:	4639      	mov	r1, r7
 8010cee:	462a      	mov	r2, r5
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	f001 f92f 	bl	8011f54 <__lshift>
 8010cf6:	4607      	mov	r7, r0
 8010cf8:	9b06      	ldr	r3, [sp, #24]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d05c      	beq.n	8010db8 <_dtoa_r+0xa78>
 8010cfe:	6879      	ldr	r1, [r7, #4]
 8010d00:	4620      	mov	r0, r4
 8010d02:	f000 fecb 	bl	8011a9c <_Balloc>
 8010d06:	4605      	mov	r5, r0
 8010d08:	b928      	cbnz	r0, 8010d16 <_dtoa_r+0x9d6>
 8010d0a:	4b80      	ldr	r3, [pc, #512]	; (8010f0c <_dtoa_r+0xbcc>)
 8010d0c:	4602      	mov	r2, r0
 8010d0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010d12:	f7ff bb2e 	b.w	8010372 <_dtoa_r+0x32>
 8010d16:	693a      	ldr	r2, [r7, #16]
 8010d18:	3202      	adds	r2, #2
 8010d1a:	0092      	lsls	r2, r2, #2
 8010d1c:	f107 010c 	add.w	r1, r7, #12
 8010d20:	300c      	adds	r0, #12
 8010d22:	f7fd fa9f 	bl	800e264 <memcpy>
 8010d26:	2201      	movs	r2, #1
 8010d28:	4629      	mov	r1, r5
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	f001 f912 	bl	8011f54 <__lshift>
 8010d30:	9b00      	ldr	r3, [sp, #0]
 8010d32:	3301      	adds	r3, #1
 8010d34:	9301      	str	r3, [sp, #4]
 8010d36:	9b00      	ldr	r3, [sp, #0]
 8010d38:	444b      	add	r3, r9
 8010d3a:	9307      	str	r3, [sp, #28]
 8010d3c:	9b02      	ldr	r3, [sp, #8]
 8010d3e:	f003 0301 	and.w	r3, r3, #1
 8010d42:	46b8      	mov	r8, r7
 8010d44:	9306      	str	r3, [sp, #24]
 8010d46:	4607      	mov	r7, r0
 8010d48:	9b01      	ldr	r3, [sp, #4]
 8010d4a:	4631      	mov	r1, r6
 8010d4c:	3b01      	subs	r3, #1
 8010d4e:	4658      	mov	r0, fp
 8010d50:	9302      	str	r3, [sp, #8]
 8010d52:	f7ff fa69 	bl	8010228 <quorem>
 8010d56:	4603      	mov	r3, r0
 8010d58:	3330      	adds	r3, #48	; 0x30
 8010d5a:	9004      	str	r0, [sp, #16]
 8010d5c:	4641      	mov	r1, r8
 8010d5e:	4658      	mov	r0, fp
 8010d60:	9308      	str	r3, [sp, #32]
 8010d62:	f001 f963 	bl	801202c <__mcmp>
 8010d66:	463a      	mov	r2, r7
 8010d68:	4681      	mov	r9, r0
 8010d6a:	4631      	mov	r1, r6
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	f001 f979 	bl	8012064 <__mdiff>
 8010d72:	68c2      	ldr	r2, [r0, #12]
 8010d74:	9b08      	ldr	r3, [sp, #32]
 8010d76:	4605      	mov	r5, r0
 8010d78:	bb02      	cbnz	r2, 8010dbc <_dtoa_r+0xa7c>
 8010d7a:	4601      	mov	r1, r0
 8010d7c:	4658      	mov	r0, fp
 8010d7e:	f001 f955 	bl	801202c <__mcmp>
 8010d82:	9b08      	ldr	r3, [sp, #32]
 8010d84:	4602      	mov	r2, r0
 8010d86:	4629      	mov	r1, r5
 8010d88:	4620      	mov	r0, r4
 8010d8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8010d8e:	f000 fec5 	bl	8011b1c <_Bfree>
 8010d92:	9b05      	ldr	r3, [sp, #20]
 8010d94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d96:	9d01      	ldr	r5, [sp, #4]
 8010d98:	ea43 0102 	orr.w	r1, r3, r2
 8010d9c:	9b06      	ldr	r3, [sp, #24]
 8010d9e:	430b      	orrs	r3, r1
 8010da0:	9b08      	ldr	r3, [sp, #32]
 8010da2:	d10d      	bne.n	8010dc0 <_dtoa_r+0xa80>
 8010da4:	2b39      	cmp	r3, #57	; 0x39
 8010da6:	d029      	beq.n	8010dfc <_dtoa_r+0xabc>
 8010da8:	f1b9 0f00 	cmp.w	r9, #0
 8010dac:	dd01      	ble.n	8010db2 <_dtoa_r+0xa72>
 8010dae:	9b04      	ldr	r3, [sp, #16]
 8010db0:	3331      	adds	r3, #49	; 0x31
 8010db2:	9a02      	ldr	r2, [sp, #8]
 8010db4:	7013      	strb	r3, [r2, #0]
 8010db6:	e774      	b.n	8010ca2 <_dtoa_r+0x962>
 8010db8:	4638      	mov	r0, r7
 8010dba:	e7b9      	b.n	8010d30 <_dtoa_r+0x9f0>
 8010dbc:	2201      	movs	r2, #1
 8010dbe:	e7e2      	b.n	8010d86 <_dtoa_r+0xa46>
 8010dc0:	f1b9 0f00 	cmp.w	r9, #0
 8010dc4:	db06      	blt.n	8010dd4 <_dtoa_r+0xa94>
 8010dc6:	9905      	ldr	r1, [sp, #20]
 8010dc8:	ea41 0909 	orr.w	r9, r1, r9
 8010dcc:	9906      	ldr	r1, [sp, #24]
 8010dce:	ea59 0101 	orrs.w	r1, r9, r1
 8010dd2:	d120      	bne.n	8010e16 <_dtoa_r+0xad6>
 8010dd4:	2a00      	cmp	r2, #0
 8010dd6:	ddec      	ble.n	8010db2 <_dtoa_r+0xa72>
 8010dd8:	4659      	mov	r1, fp
 8010dda:	2201      	movs	r2, #1
 8010ddc:	4620      	mov	r0, r4
 8010dde:	9301      	str	r3, [sp, #4]
 8010de0:	f001 f8b8 	bl	8011f54 <__lshift>
 8010de4:	4631      	mov	r1, r6
 8010de6:	4683      	mov	fp, r0
 8010de8:	f001 f920 	bl	801202c <__mcmp>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	9b01      	ldr	r3, [sp, #4]
 8010df0:	dc02      	bgt.n	8010df8 <_dtoa_r+0xab8>
 8010df2:	d1de      	bne.n	8010db2 <_dtoa_r+0xa72>
 8010df4:	07da      	lsls	r2, r3, #31
 8010df6:	d5dc      	bpl.n	8010db2 <_dtoa_r+0xa72>
 8010df8:	2b39      	cmp	r3, #57	; 0x39
 8010dfa:	d1d8      	bne.n	8010dae <_dtoa_r+0xa6e>
 8010dfc:	9a02      	ldr	r2, [sp, #8]
 8010dfe:	2339      	movs	r3, #57	; 0x39
 8010e00:	7013      	strb	r3, [r2, #0]
 8010e02:	462b      	mov	r3, r5
 8010e04:	461d      	mov	r5, r3
 8010e06:	3b01      	subs	r3, #1
 8010e08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010e0c:	2a39      	cmp	r2, #57	; 0x39
 8010e0e:	d050      	beq.n	8010eb2 <_dtoa_r+0xb72>
 8010e10:	3201      	adds	r2, #1
 8010e12:	701a      	strb	r2, [r3, #0]
 8010e14:	e745      	b.n	8010ca2 <_dtoa_r+0x962>
 8010e16:	2a00      	cmp	r2, #0
 8010e18:	dd03      	ble.n	8010e22 <_dtoa_r+0xae2>
 8010e1a:	2b39      	cmp	r3, #57	; 0x39
 8010e1c:	d0ee      	beq.n	8010dfc <_dtoa_r+0xabc>
 8010e1e:	3301      	adds	r3, #1
 8010e20:	e7c7      	b.n	8010db2 <_dtoa_r+0xa72>
 8010e22:	9a01      	ldr	r2, [sp, #4]
 8010e24:	9907      	ldr	r1, [sp, #28]
 8010e26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010e2a:	428a      	cmp	r2, r1
 8010e2c:	d02a      	beq.n	8010e84 <_dtoa_r+0xb44>
 8010e2e:	4659      	mov	r1, fp
 8010e30:	2300      	movs	r3, #0
 8010e32:	220a      	movs	r2, #10
 8010e34:	4620      	mov	r0, r4
 8010e36:	f000 fe93 	bl	8011b60 <__multadd>
 8010e3a:	45b8      	cmp	r8, r7
 8010e3c:	4683      	mov	fp, r0
 8010e3e:	f04f 0300 	mov.w	r3, #0
 8010e42:	f04f 020a 	mov.w	r2, #10
 8010e46:	4641      	mov	r1, r8
 8010e48:	4620      	mov	r0, r4
 8010e4a:	d107      	bne.n	8010e5c <_dtoa_r+0xb1c>
 8010e4c:	f000 fe88 	bl	8011b60 <__multadd>
 8010e50:	4680      	mov	r8, r0
 8010e52:	4607      	mov	r7, r0
 8010e54:	9b01      	ldr	r3, [sp, #4]
 8010e56:	3301      	adds	r3, #1
 8010e58:	9301      	str	r3, [sp, #4]
 8010e5a:	e775      	b.n	8010d48 <_dtoa_r+0xa08>
 8010e5c:	f000 fe80 	bl	8011b60 <__multadd>
 8010e60:	4639      	mov	r1, r7
 8010e62:	4680      	mov	r8, r0
 8010e64:	2300      	movs	r3, #0
 8010e66:	220a      	movs	r2, #10
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f000 fe79 	bl	8011b60 <__multadd>
 8010e6e:	4607      	mov	r7, r0
 8010e70:	e7f0      	b.n	8010e54 <_dtoa_r+0xb14>
 8010e72:	f1b9 0f00 	cmp.w	r9, #0
 8010e76:	9a00      	ldr	r2, [sp, #0]
 8010e78:	bfcc      	ite	gt
 8010e7a:	464d      	movgt	r5, r9
 8010e7c:	2501      	movle	r5, #1
 8010e7e:	4415      	add	r5, r2
 8010e80:	f04f 0800 	mov.w	r8, #0
 8010e84:	4659      	mov	r1, fp
 8010e86:	2201      	movs	r2, #1
 8010e88:	4620      	mov	r0, r4
 8010e8a:	9301      	str	r3, [sp, #4]
 8010e8c:	f001 f862 	bl	8011f54 <__lshift>
 8010e90:	4631      	mov	r1, r6
 8010e92:	4683      	mov	fp, r0
 8010e94:	f001 f8ca 	bl	801202c <__mcmp>
 8010e98:	2800      	cmp	r0, #0
 8010e9a:	dcb2      	bgt.n	8010e02 <_dtoa_r+0xac2>
 8010e9c:	d102      	bne.n	8010ea4 <_dtoa_r+0xb64>
 8010e9e:	9b01      	ldr	r3, [sp, #4]
 8010ea0:	07db      	lsls	r3, r3, #31
 8010ea2:	d4ae      	bmi.n	8010e02 <_dtoa_r+0xac2>
 8010ea4:	462b      	mov	r3, r5
 8010ea6:	461d      	mov	r5, r3
 8010ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010eac:	2a30      	cmp	r2, #48	; 0x30
 8010eae:	d0fa      	beq.n	8010ea6 <_dtoa_r+0xb66>
 8010eb0:	e6f7      	b.n	8010ca2 <_dtoa_r+0x962>
 8010eb2:	9a00      	ldr	r2, [sp, #0]
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d1a5      	bne.n	8010e04 <_dtoa_r+0xac4>
 8010eb8:	f10a 0a01 	add.w	sl, sl, #1
 8010ebc:	2331      	movs	r3, #49	; 0x31
 8010ebe:	e779      	b.n	8010db4 <_dtoa_r+0xa74>
 8010ec0:	4b13      	ldr	r3, [pc, #76]	; (8010f10 <_dtoa_r+0xbd0>)
 8010ec2:	f7ff baaf 	b.w	8010424 <_dtoa_r+0xe4>
 8010ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	f47f aa86 	bne.w	80103da <_dtoa_r+0x9a>
 8010ece:	4b11      	ldr	r3, [pc, #68]	; (8010f14 <_dtoa_r+0xbd4>)
 8010ed0:	f7ff baa8 	b.w	8010424 <_dtoa_r+0xe4>
 8010ed4:	f1b9 0f00 	cmp.w	r9, #0
 8010ed8:	dc03      	bgt.n	8010ee2 <_dtoa_r+0xba2>
 8010eda:	9b05      	ldr	r3, [sp, #20]
 8010edc:	2b02      	cmp	r3, #2
 8010ede:	f73f aec9 	bgt.w	8010c74 <_dtoa_r+0x934>
 8010ee2:	9d00      	ldr	r5, [sp, #0]
 8010ee4:	4631      	mov	r1, r6
 8010ee6:	4658      	mov	r0, fp
 8010ee8:	f7ff f99e 	bl	8010228 <quorem>
 8010eec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010ef0:	f805 3b01 	strb.w	r3, [r5], #1
 8010ef4:	9a00      	ldr	r2, [sp, #0]
 8010ef6:	1aaa      	subs	r2, r5, r2
 8010ef8:	4591      	cmp	r9, r2
 8010efa:	ddba      	ble.n	8010e72 <_dtoa_r+0xb32>
 8010efc:	4659      	mov	r1, fp
 8010efe:	2300      	movs	r3, #0
 8010f00:	220a      	movs	r2, #10
 8010f02:	4620      	mov	r0, r4
 8010f04:	f000 fe2c 	bl	8011b60 <__multadd>
 8010f08:	4683      	mov	fp, r0
 8010f0a:	e7eb      	b.n	8010ee4 <_dtoa_r+0xba4>
 8010f0c:	0801496b 	.word	0x0801496b
 8010f10:	08014bd1 	.word	0x08014bd1
 8010f14:	080148e8 	.word	0x080148e8

08010f18 <__sflush_r>:
 8010f18:	898a      	ldrh	r2, [r1, #12]
 8010f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f1e:	4605      	mov	r5, r0
 8010f20:	0710      	lsls	r0, r2, #28
 8010f22:	460c      	mov	r4, r1
 8010f24:	d458      	bmi.n	8010fd8 <__sflush_r+0xc0>
 8010f26:	684b      	ldr	r3, [r1, #4]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	dc05      	bgt.n	8010f38 <__sflush_r+0x20>
 8010f2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	dc02      	bgt.n	8010f38 <__sflush_r+0x20>
 8010f32:	2000      	movs	r0, #0
 8010f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f3a:	2e00      	cmp	r6, #0
 8010f3c:	d0f9      	beq.n	8010f32 <__sflush_r+0x1a>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010f44:	682f      	ldr	r7, [r5, #0]
 8010f46:	602b      	str	r3, [r5, #0]
 8010f48:	d032      	beq.n	8010fb0 <__sflush_r+0x98>
 8010f4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010f4c:	89a3      	ldrh	r3, [r4, #12]
 8010f4e:	075a      	lsls	r2, r3, #29
 8010f50:	d505      	bpl.n	8010f5e <__sflush_r+0x46>
 8010f52:	6863      	ldr	r3, [r4, #4]
 8010f54:	1ac0      	subs	r0, r0, r3
 8010f56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f58:	b10b      	cbz	r3, 8010f5e <__sflush_r+0x46>
 8010f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f5c:	1ac0      	subs	r0, r0, r3
 8010f5e:	2300      	movs	r3, #0
 8010f60:	4602      	mov	r2, r0
 8010f62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f64:	6a21      	ldr	r1, [r4, #32]
 8010f66:	4628      	mov	r0, r5
 8010f68:	47b0      	blx	r6
 8010f6a:	1c43      	adds	r3, r0, #1
 8010f6c:	89a3      	ldrh	r3, [r4, #12]
 8010f6e:	d106      	bne.n	8010f7e <__sflush_r+0x66>
 8010f70:	6829      	ldr	r1, [r5, #0]
 8010f72:	291d      	cmp	r1, #29
 8010f74:	d82c      	bhi.n	8010fd0 <__sflush_r+0xb8>
 8010f76:	4a2a      	ldr	r2, [pc, #168]	; (8011020 <__sflush_r+0x108>)
 8010f78:	40ca      	lsrs	r2, r1
 8010f7a:	07d6      	lsls	r6, r2, #31
 8010f7c:	d528      	bpl.n	8010fd0 <__sflush_r+0xb8>
 8010f7e:	2200      	movs	r2, #0
 8010f80:	6062      	str	r2, [r4, #4]
 8010f82:	04d9      	lsls	r1, r3, #19
 8010f84:	6922      	ldr	r2, [r4, #16]
 8010f86:	6022      	str	r2, [r4, #0]
 8010f88:	d504      	bpl.n	8010f94 <__sflush_r+0x7c>
 8010f8a:	1c42      	adds	r2, r0, #1
 8010f8c:	d101      	bne.n	8010f92 <__sflush_r+0x7a>
 8010f8e:	682b      	ldr	r3, [r5, #0]
 8010f90:	b903      	cbnz	r3, 8010f94 <__sflush_r+0x7c>
 8010f92:	6560      	str	r0, [r4, #84]	; 0x54
 8010f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f96:	602f      	str	r7, [r5, #0]
 8010f98:	2900      	cmp	r1, #0
 8010f9a:	d0ca      	beq.n	8010f32 <__sflush_r+0x1a>
 8010f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010fa0:	4299      	cmp	r1, r3
 8010fa2:	d002      	beq.n	8010faa <__sflush_r+0x92>
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	f7fd f973 	bl	800e290 <_free_r>
 8010faa:	2000      	movs	r0, #0
 8010fac:	6360      	str	r0, [r4, #52]	; 0x34
 8010fae:	e7c1      	b.n	8010f34 <__sflush_r+0x1c>
 8010fb0:	6a21      	ldr	r1, [r4, #32]
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	47b0      	blx	r6
 8010fb8:	1c41      	adds	r1, r0, #1
 8010fba:	d1c7      	bne.n	8010f4c <__sflush_r+0x34>
 8010fbc:	682b      	ldr	r3, [r5, #0]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d0c4      	beq.n	8010f4c <__sflush_r+0x34>
 8010fc2:	2b1d      	cmp	r3, #29
 8010fc4:	d001      	beq.n	8010fca <__sflush_r+0xb2>
 8010fc6:	2b16      	cmp	r3, #22
 8010fc8:	d101      	bne.n	8010fce <__sflush_r+0xb6>
 8010fca:	602f      	str	r7, [r5, #0]
 8010fcc:	e7b1      	b.n	8010f32 <__sflush_r+0x1a>
 8010fce:	89a3      	ldrh	r3, [r4, #12]
 8010fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fd4:	81a3      	strh	r3, [r4, #12]
 8010fd6:	e7ad      	b.n	8010f34 <__sflush_r+0x1c>
 8010fd8:	690f      	ldr	r7, [r1, #16]
 8010fda:	2f00      	cmp	r7, #0
 8010fdc:	d0a9      	beq.n	8010f32 <__sflush_r+0x1a>
 8010fde:	0793      	lsls	r3, r2, #30
 8010fe0:	680e      	ldr	r6, [r1, #0]
 8010fe2:	bf08      	it	eq
 8010fe4:	694b      	ldreq	r3, [r1, #20]
 8010fe6:	600f      	str	r7, [r1, #0]
 8010fe8:	bf18      	it	ne
 8010fea:	2300      	movne	r3, #0
 8010fec:	eba6 0807 	sub.w	r8, r6, r7
 8010ff0:	608b      	str	r3, [r1, #8]
 8010ff2:	f1b8 0f00 	cmp.w	r8, #0
 8010ff6:	dd9c      	ble.n	8010f32 <__sflush_r+0x1a>
 8010ff8:	6a21      	ldr	r1, [r4, #32]
 8010ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ffc:	4643      	mov	r3, r8
 8010ffe:	463a      	mov	r2, r7
 8011000:	4628      	mov	r0, r5
 8011002:	47b0      	blx	r6
 8011004:	2800      	cmp	r0, #0
 8011006:	dc06      	bgt.n	8011016 <__sflush_r+0xfe>
 8011008:	89a3      	ldrh	r3, [r4, #12]
 801100a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801100e:	81a3      	strh	r3, [r4, #12]
 8011010:	f04f 30ff 	mov.w	r0, #4294967295
 8011014:	e78e      	b.n	8010f34 <__sflush_r+0x1c>
 8011016:	4407      	add	r7, r0
 8011018:	eba8 0800 	sub.w	r8, r8, r0
 801101c:	e7e9      	b.n	8010ff2 <__sflush_r+0xda>
 801101e:	bf00      	nop
 8011020:	20400001 	.word	0x20400001

08011024 <_fflush_r>:
 8011024:	b538      	push	{r3, r4, r5, lr}
 8011026:	690b      	ldr	r3, [r1, #16]
 8011028:	4605      	mov	r5, r0
 801102a:	460c      	mov	r4, r1
 801102c:	b913      	cbnz	r3, 8011034 <_fflush_r+0x10>
 801102e:	2500      	movs	r5, #0
 8011030:	4628      	mov	r0, r5
 8011032:	bd38      	pop	{r3, r4, r5, pc}
 8011034:	b118      	cbz	r0, 801103e <_fflush_r+0x1a>
 8011036:	6983      	ldr	r3, [r0, #24]
 8011038:	b90b      	cbnz	r3, 801103e <_fflush_r+0x1a>
 801103a:	f000 f887 	bl	801114c <__sinit>
 801103e:	4b14      	ldr	r3, [pc, #80]	; (8011090 <_fflush_r+0x6c>)
 8011040:	429c      	cmp	r4, r3
 8011042:	d11b      	bne.n	801107c <_fflush_r+0x58>
 8011044:	686c      	ldr	r4, [r5, #4]
 8011046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d0ef      	beq.n	801102e <_fflush_r+0xa>
 801104e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011050:	07d0      	lsls	r0, r2, #31
 8011052:	d404      	bmi.n	801105e <_fflush_r+0x3a>
 8011054:	0599      	lsls	r1, r3, #22
 8011056:	d402      	bmi.n	801105e <_fflush_r+0x3a>
 8011058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801105a:	f000 fc88 	bl	801196e <__retarget_lock_acquire_recursive>
 801105e:	4628      	mov	r0, r5
 8011060:	4621      	mov	r1, r4
 8011062:	f7ff ff59 	bl	8010f18 <__sflush_r>
 8011066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011068:	07da      	lsls	r2, r3, #31
 801106a:	4605      	mov	r5, r0
 801106c:	d4e0      	bmi.n	8011030 <_fflush_r+0xc>
 801106e:	89a3      	ldrh	r3, [r4, #12]
 8011070:	059b      	lsls	r3, r3, #22
 8011072:	d4dd      	bmi.n	8011030 <_fflush_r+0xc>
 8011074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011076:	f000 fc7b 	bl	8011970 <__retarget_lock_release_recursive>
 801107a:	e7d9      	b.n	8011030 <_fflush_r+0xc>
 801107c:	4b05      	ldr	r3, [pc, #20]	; (8011094 <_fflush_r+0x70>)
 801107e:	429c      	cmp	r4, r3
 8011080:	d101      	bne.n	8011086 <_fflush_r+0x62>
 8011082:	68ac      	ldr	r4, [r5, #8]
 8011084:	e7df      	b.n	8011046 <_fflush_r+0x22>
 8011086:	4b04      	ldr	r3, [pc, #16]	; (8011098 <_fflush_r+0x74>)
 8011088:	429c      	cmp	r4, r3
 801108a:	bf08      	it	eq
 801108c:	68ec      	ldreq	r4, [r5, #12]
 801108e:	e7da      	b.n	8011046 <_fflush_r+0x22>
 8011090:	0801499c 	.word	0x0801499c
 8011094:	080149bc 	.word	0x080149bc
 8011098:	0801497c 	.word	0x0801497c

0801109c <std>:
 801109c:	2300      	movs	r3, #0
 801109e:	b510      	push	{r4, lr}
 80110a0:	4604      	mov	r4, r0
 80110a2:	e9c0 3300 	strd	r3, r3, [r0]
 80110a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80110aa:	6083      	str	r3, [r0, #8]
 80110ac:	8181      	strh	r1, [r0, #12]
 80110ae:	6643      	str	r3, [r0, #100]	; 0x64
 80110b0:	81c2      	strh	r2, [r0, #14]
 80110b2:	6183      	str	r3, [r0, #24]
 80110b4:	4619      	mov	r1, r3
 80110b6:	2208      	movs	r2, #8
 80110b8:	305c      	adds	r0, #92	; 0x5c
 80110ba:	f7fd f8e1 	bl	800e280 <memset>
 80110be:	4b05      	ldr	r3, [pc, #20]	; (80110d4 <std+0x38>)
 80110c0:	6263      	str	r3, [r4, #36]	; 0x24
 80110c2:	4b05      	ldr	r3, [pc, #20]	; (80110d8 <std+0x3c>)
 80110c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80110c6:	4b05      	ldr	r3, [pc, #20]	; (80110dc <std+0x40>)
 80110c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80110ca:	4b05      	ldr	r3, [pc, #20]	; (80110e0 <std+0x44>)
 80110cc:	6224      	str	r4, [r4, #32]
 80110ce:	6323      	str	r3, [r4, #48]	; 0x30
 80110d0:	bd10      	pop	{r4, pc}
 80110d2:	bf00      	nop
 80110d4:	0800f19d 	.word	0x0800f19d
 80110d8:	0800f1c3 	.word	0x0800f1c3
 80110dc:	0800f1fb 	.word	0x0800f1fb
 80110e0:	0800f21f 	.word	0x0800f21f

080110e4 <_cleanup_r>:
 80110e4:	4901      	ldr	r1, [pc, #4]	; (80110ec <_cleanup_r+0x8>)
 80110e6:	f000 b8af 	b.w	8011248 <_fwalk_reent>
 80110ea:	bf00      	nop
 80110ec:	08011025 	.word	0x08011025

080110f0 <__sfmoreglue>:
 80110f0:	b570      	push	{r4, r5, r6, lr}
 80110f2:	1e4a      	subs	r2, r1, #1
 80110f4:	2568      	movs	r5, #104	; 0x68
 80110f6:	4355      	muls	r5, r2
 80110f8:	460e      	mov	r6, r1
 80110fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80110fe:	f7fd f917 	bl	800e330 <_malloc_r>
 8011102:	4604      	mov	r4, r0
 8011104:	b140      	cbz	r0, 8011118 <__sfmoreglue+0x28>
 8011106:	2100      	movs	r1, #0
 8011108:	e9c0 1600 	strd	r1, r6, [r0]
 801110c:	300c      	adds	r0, #12
 801110e:	60a0      	str	r0, [r4, #8]
 8011110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011114:	f7fd f8b4 	bl	800e280 <memset>
 8011118:	4620      	mov	r0, r4
 801111a:	bd70      	pop	{r4, r5, r6, pc}

0801111c <__sfp_lock_acquire>:
 801111c:	4801      	ldr	r0, [pc, #4]	; (8011124 <__sfp_lock_acquire+0x8>)
 801111e:	f000 bc26 	b.w	801196e <__retarget_lock_acquire_recursive>
 8011122:	bf00      	nop
 8011124:	20001a8c 	.word	0x20001a8c

08011128 <__sfp_lock_release>:
 8011128:	4801      	ldr	r0, [pc, #4]	; (8011130 <__sfp_lock_release+0x8>)
 801112a:	f000 bc21 	b.w	8011970 <__retarget_lock_release_recursive>
 801112e:	bf00      	nop
 8011130:	20001a8c 	.word	0x20001a8c

08011134 <__sinit_lock_acquire>:
 8011134:	4801      	ldr	r0, [pc, #4]	; (801113c <__sinit_lock_acquire+0x8>)
 8011136:	f000 bc1a 	b.w	801196e <__retarget_lock_acquire_recursive>
 801113a:	bf00      	nop
 801113c:	20001a87 	.word	0x20001a87

08011140 <__sinit_lock_release>:
 8011140:	4801      	ldr	r0, [pc, #4]	; (8011148 <__sinit_lock_release+0x8>)
 8011142:	f000 bc15 	b.w	8011970 <__retarget_lock_release_recursive>
 8011146:	bf00      	nop
 8011148:	20001a87 	.word	0x20001a87

0801114c <__sinit>:
 801114c:	b510      	push	{r4, lr}
 801114e:	4604      	mov	r4, r0
 8011150:	f7ff fff0 	bl	8011134 <__sinit_lock_acquire>
 8011154:	69a3      	ldr	r3, [r4, #24]
 8011156:	b11b      	cbz	r3, 8011160 <__sinit+0x14>
 8011158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801115c:	f7ff bff0 	b.w	8011140 <__sinit_lock_release>
 8011160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011164:	6523      	str	r3, [r4, #80]	; 0x50
 8011166:	4b13      	ldr	r3, [pc, #76]	; (80111b4 <__sinit+0x68>)
 8011168:	4a13      	ldr	r2, [pc, #76]	; (80111b8 <__sinit+0x6c>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	62a2      	str	r2, [r4, #40]	; 0x28
 801116e:	42a3      	cmp	r3, r4
 8011170:	bf04      	itt	eq
 8011172:	2301      	moveq	r3, #1
 8011174:	61a3      	streq	r3, [r4, #24]
 8011176:	4620      	mov	r0, r4
 8011178:	f000 f820 	bl	80111bc <__sfp>
 801117c:	6060      	str	r0, [r4, #4]
 801117e:	4620      	mov	r0, r4
 8011180:	f000 f81c 	bl	80111bc <__sfp>
 8011184:	60a0      	str	r0, [r4, #8]
 8011186:	4620      	mov	r0, r4
 8011188:	f000 f818 	bl	80111bc <__sfp>
 801118c:	2200      	movs	r2, #0
 801118e:	60e0      	str	r0, [r4, #12]
 8011190:	2104      	movs	r1, #4
 8011192:	6860      	ldr	r0, [r4, #4]
 8011194:	f7ff ff82 	bl	801109c <std>
 8011198:	68a0      	ldr	r0, [r4, #8]
 801119a:	2201      	movs	r2, #1
 801119c:	2109      	movs	r1, #9
 801119e:	f7ff ff7d 	bl	801109c <std>
 80111a2:	68e0      	ldr	r0, [r4, #12]
 80111a4:	2202      	movs	r2, #2
 80111a6:	2112      	movs	r1, #18
 80111a8:	f7ff ff78 	bl	801109c <std>
 80111ac:	2301      	movs	r3, #1
 80111ae:	61a3      	str	r3, [r4, #24]
 80111b0:	e7d2      	b.n	8011158 <__sinit+0xc>
 80111b2:	bf00      	nop
 80111b4:	0801485c 	.word	0x0801485c
 80111b8:	080110e5 	.word	0x080110e5

080111bc <__sfp>:
 80111bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111be:	4607      	mov	r7, r0
 80111c0:	f7ff ffac 	bl	801111c <__sfp_lock_acquire>
 80111c4:	4b1e      	ldr	r3, [pc, #120]	; (8011240 <__sfp+0x84>)
 80111c6:	681e      	ldr	r6, [r3, #0]
 80111c8:	69b3      	ldr	r3, [r6, #24]
 80111ca:	b913      	cbnz	r3, 80111d2 <__sfp+0x16>
 80111cc:	4630      	mov	r0, r6
 80111ce:	f7ff ffbd 	bl	801114c <__sinit>
 80111d2:	3648      	adds	r6, #72	; 0x48
 80111d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80111d8:	3b01      	subs	r3, #1
 80111da:	d503      	bpl.n	80111e4 <__sfp+0x28>
 80111dc:	6833      	ldr	r3, [r6, #0]
 80111de:	b30b      	cbz	r3, 8011224 <__sfp+0x68>
 80111e0:	6836      	ldr	r6, [r6, #0]
 80111e2:	e7f7      	b.n	80111d4 <__sfp+0x18>
 80111e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80111e8:	b9d5      	cbnz	r5, 8011220 <__sfp+0x64>
 80111ea:	4b16      	ldr	r3, [pc, #88]	; (8011244 <__sfp+0x88>)
 80111ec:	60e3      	str	r3, [r4, #12]
 80111ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80111f2:	6665      	str	r5, [r4, #100]	; 0x64
 80111f4:	f000 fbba 	bl	801196c <__retarget_lock_init_recursive>
 80111f8:	f7ff ff96 	bl	8011128 <__sfp_lock_release>
 80111fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011204:	6025      	str	r5, [r4, #0]
 8011206:	61a5      	str	r5, [r4, #24]
 8011208:	2208      	movs	r2, #8
 801120a:	4629      	mov	r1, r5
 801120c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011210:	f7fd f836 	bl	800e280 <memset>
 8011214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801121c:	4620      	mov	r0, r4
 801121e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011220:	3468      	adds	r4, #104	; 0x68
 8011222:	e7d9      	b.n	80111d8 <__sfp+0x1c>
 8011224:	2104      	movs	r1, #4
 8011226:	4638      	mov	r0, r7
 8011228:	f7ff ff62 	bl	80110f0 <__sfmoreglue>
 801122c:	4604      	mov	r4, r0
 801122e:	6030      	str	r0, [r6, #0]
 8011230:	2800      	cmp	r0, #0
 8011232:	d1d5      	bne.n	80111e0 <__sfp+0x24>
 8011234:	f7ff ff78 	bl	8011128 <__sfp_lock_release>
 8011238:	230c      	movs	r3, #12
 801123a:	603b      	str	r3, [r7, #0]
 801123c:	e7ee      	b.n	801121c <__sfp+0x60>
 801123e:	bf00      	nop
 8011240:	0801485c 	.word	0x0801485c
 8011244:	ffff0001 	.word	0xffff0001

08011248 <_fwalk_reent>:
 8011248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801124c:	4606      	mov	r6, r0
 801124e:	4688      	mov	r8, r1
 8011250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011254:	2700      	movs	r7, #0
 8011256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801125a:	f1b9 0901 	subs.w	r9, r9, #1
 801125e:	d505      	bpl.n	801126c <_fwalk_reent+0x24>
 8011260:	6824      	ldr	r4, [r4, #0]
 8011262:	2c00      	cmp	r4, #0
 8011264:	d1f7      	bne.n	8011256 <_fwalk_reent+0xe>
 8011266:	4638      	mov	r0, r7
 8011268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801126c:	89ab      	ldrh	r3, [r5, #12]
 801126e:	2b01      	cmp	r3, #1
 8011270:	d907      	bls.n	8011282 <_fwalk_reent+0x3a>
 8011272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011276:	3301      	adds	r3, #1
 8011278:	d003      	beq.n	8011282 <_fwalk_reent+0x3a>
 801127a:	4629      	mov	r1, r5
 801127c:	4630      	mov	r0, r6
 801127e:	47c0      	blx	r8
 8011280:	4307      	orrs	r7, r0
 8011282:	3568      	adds	r5, #104	; 0x68
 8011284:	e7e9      	b.n	801125a <_fwalk_reent+0x12>

08011286 <rshift>:
 8011286:	6903      	ldr	r3, [r0, #16]
 8011288:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801128c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011290:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011294:	f100 0414 	add.w	r4, r0, #20
 8011298:	dd45      	ble.n	8011326 <rshift+0xa0>
 801129a:	f011 011f 	ands.w	r1, r1, #31
 801129e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80112a2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80112a6:	d10c      	bne.n	80112c2 <rshift+0x3c>
 80112a8:	f100 0710 	add.w	r7, r0, #16
 80112ac:	4629      	mov	r1, r5
 80112ae:	42b1      	cmp	r1, r6
 80112b0:	d334      	bcc.n	801131c <rshift+0x96>
 80112b2:	1a9b      	subs	r3, r3, r2
 80112b4:	009b      	lsls	r3, r3, #2
 80112b6:	1eea      	subs	r2, r5, #3
 80112b8:	4296      	cmp	r6, r2
 80112ba:	bf38      	it	cc
 80112bc:	2300      	movcc	r3, #0
 80112be:	4423      	add	r3, r4
 80112c0:	e015      	b.n	80112ee <rshift+0x68>
 80112c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80112c6:	f1c1 0820 	rsb	r8, r1, #32
 80112ca:	40cf      	lsrs	r7, r1
 80112cc:	f105 0e04 	add.w	lr, r5, #4
 80112d0:	46a1      	mov	r9, r4
 80112d2:	4576      	cmp	r6, lr
 80112d4:	46f4      	mov	ip, lr
 80112d6:	d815      	bhi.n	8011304 <rshift+0x7e>
 80112d8:	1a9b      	subs	r3, r3, r2
 80112da:	009a      	lsls	r2, r3, #2
 80112dc:	3a04      	subs	r2, #4
 80112de:	3501      	adds	r5, #1
 80112e0:	42ae      	cmp	r6, r5
 80112e2:	bf38      	it	cc
 80112e4:	2200      	movcc	r2, #0
 80112e6:	18a3      	adds	r3, r4, r2
 80112e8:	50a7      	str	r7, [r4, r2]
 80112ea:	b107      	cbz	r7, 80112ee <rshift+0x68>
 80112ec:	3304      	adds	r3, #4
 80112ee:	1b1a      	subs	r2, r3, r4
 80112f0:	42a3      	cmp	r3, r4
 80112f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80112f6:	bf08      	it	eq
 80112f8:	2300      	moveq	r3, #0
 80112fa:	6102      	str	r2, [r0, #16]
 80112fc:	bf08      	it	eq
 80112fe:	6143      	streq	r3, [r0, #20]
 8011300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011304:	f8dc c000 	ldr.w	ip, [ip]
 8011308:	fa0c fc08 	lsl.w	ip, ip, r8
 801130c:	ea4c 0707 	orr.w	r7, ip, r7
 8011310:	f849 7b04 	str.w	r7, [r9], #4
 8011314:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011318:	40cf      	lsrs	r7, r1
 801131a:	e7da      	b.n	80112d2 <rshift+0x4c>
 801131c:	f851 cb04 	ldr.w	ip, [r1], #4
 8011320:	f847 cf04 	str.w	ip, [r7, #4]!
 8011324:	e7c3      	b.n	80112ae <rshift+0x28>
 8011326:	4623      	mov	r3, r4
 8011328:	e7e1      	b.n	80112ee <rshift+0x68>

0801132a <__hexdig_fun>:
 801132a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801132e:	2b09      	cmp	r3, #9
 8011330:	d802      	bhi.n	8011338 <__hexdig_fun+0xe>
 8011332:	3820      	subs	r0, #32
 8011334:	b2c0      	uxtb	r0, r0
 8011336:	4770      	bx	lr
 8011338:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801133c:	2b05      	cmp	r3, #5
 801133e:	d801      	bhi.n	8011344 <__hexdig_fun+0x1a>
 8011340:	3847      	subs	r0, #71	; 0x47
 8011342:	e7f7      	b.n	8011334 <__hexdig_fun+0xa>
 8011344:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011348:	2b05      	cmp	r3, #5
 801134a:	d801      	bhi.n	8011350 <__hexdig_fun+0x26>
 801134c:	3827      	subs	r0, #39	; 0x27
 801134e:	e7f1      	b.n	8011334 <__hexdig_fun+0xa>
 8011350:	2000      	movs	r0, #0
 8011352:	4770      	bx	lr

08011354 <__gethex>:
 8011354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011358:	ed2d 8b02 	vpush	{d8}
 801135c:	b089      	sub	sp, #36	; 0x24
 801135e:	ee08 0a10 	vmov	s16, r0
 8011362:	9304      	str	r3, [sp, #16]
 8011364:	4bbc      	ldr	r3, [pc, #752]	; (8011658 <__gethex+0x304>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	9301      	str	r3, [sp, #4]
 801136a:	4618      	mov	r0, r3
 801136c:	468b      	mov	fp, r1
 801136e:	4690      	mov	r8, r2
 8011370:	f7ee ff48 	bl	8000204 <strlen>
 8011374:	9b01      	ldr	r3, [sp, #4]
 8011376:	f8db 2000 	ldr.w	r2, [fp]
 801137a:	4403      	add	r3, r0
 801137c:	4682      	mov	sl, r0
 801137e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011382:	9305      	str	r3, [sp, #20]
 8011384:	1c93      	adds	r3, r2, #2
 8011386:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801138a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801138e:	32fe      	adds	r2, #254	; 0xfe
 8011390:	18d1      	adds	r1, r2, r3
 8011392:	461f      	mov	r7, r3
 8011394:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011398:	9100      	str	r1, [sp, #0]
 801139a:	2830      	cmp	r0, #48	; 0x30
 801139c:	d0f8      	beq.n	8011390 <__gethex+0x3c>
 801139e:	f7ff ffc4 	bl	801132a <__hexdig_fun>
 80113a2:	4604      	mov	r4, r0
 80113a4:	2800      	cmp	r0, #0
 80113a6:	d13a      	bne.n	801141e <__gethex+0xca>
 80113a8:	9901      	ldr	r1, [sp, #4]
 80113aa:	4652      	mov	r2, sl
 80113ac:	4638      	mov	r0, r7
 80113ae:	f7fd ff4f 	bl	800f250 <strncmp>
 80113b2:	4605      	mov	r5, r0
 80113b4:	2800      	cmp	r0, #0
 80113b6:	d168      	bne.n	801148a <__gethex+0x136>
 80113b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80113bc:	eb07 060a 	add.w	r6, r7, sl
 80113c0:	f7ff ffb3 	bl	801132a <__hexdig_fun>
 80113c4:	2800      	cmp	r0, #0
 80113c6:	d062      	beq.n	801148e <__gethex+0x13a>
 80113c8:	4633      	mov	r3, r6
 80113ca:	7818      	ldrb	r0, [r3, #0]
 80113cc:	2830      	cmp	r0, #48	; 0x30
 80113ce:	461f      	mov	r7, r3
 80113d0:	f103 0301 	add.w	r3, r3, #1
 80113d4:	d0f9      	beq.n	80113ca <__gethex+0x76>
 80113d6:	f7ff ffa8 	bl	801132a <__hexdig_fun>
 80113da:	2301      	movs	r3, #1
 80113dc:	fab0 f480 	clz	r4, r0
 80113e0:	0964      	lsrs	r4, r4, #5
 80113e2:	4635      	mov	r5, r6
 80113e4:	9300      	str	r3, [sp, #0]
 80113e6:	463a      	mov	r2, r7
 80113e8:	4616      	mov	r6, r2
 80113ea:	3201      	adds	r2, #1
 80113ec:	7830      	ldrb	r0, [r6, #0]
 80113ee:	f7ff ff9c 	bl	801132a <__hexdig_fun>
 80113f2:	2800      	cmp	r0, #0
 80113f4:	d1f8      	bne.n	80113e8 <__gethex+0x94>
 80113f6:	9901      	ldr	r1, [sp, #4]
 80113f8:	4652      	mov	r2, sl
 80113fa:	4630      	mov	r0, r6
 80113fc:	f7fd ff28 	bl	800f250 <strncmp>
 8011400:	b980      	cbnz	r0, 8011424 <__gethex+0xd0>
 8011402:	b94d      	cbnz	r5, 8011418 <__gethex+0xc4>
 8011404:	eb06 050a 	add.w	r5, r6, sl
 8011408:	462a      	mov	r2, r5
 801140a:	4616      	mov	r6, r2
 801140c:	3201      	adds	r2, #1
 801140e:	7830      	ldrb	r0, [r6, #0]
 8011410:	f7ff ff8b 	bl	801132a <__hexdig_fun>
 8011414:	2800      	cmp	r0, #0
 8011416:	d1f8      	bne.n	801140a <__gethex+0xb6>
 8011418:	1bad      	subs	r5, r5, r6
 801141a:	00ad      	lsls	r5, r5, #2
 801141c:	e004      	b.n	8011428 <__gethex+0xd4>
 801141e:	2400      	movs	r4, #0
 8011420:	4625      	mov	r5, r4
 8011422:	e7e0      	b.n	80113e6 <__gethex+0x92>
 8011424:	2d00      	cmp	r5, #0
 8011426:	d1f7      	bne.n	8011418 <__gethex+0xc4>
 8011428:	7833      	ldrb	r3, [r6, #0]
 801142a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801142e:	2b50      	cmp	r3, #80	; 0x50
 8011430:	d13b      	bne.n	80114aa <__gethex+0x156>
 8011432:	7873      	ldrb	r3, [r6, #1]
 8011434:	2b2b      	cmp	r3, #43	; 0x2b
 8011436:	d02c      	beq.n	8011492 <__gethex+0x13e>
 8011438:	2b2d      	cmp	r3, #45	; 0x2d
 801143a:	d02e      	beq.n	801149a <__gethex+0x146>
 801143c:	1c71      	adds	r1, r6, #1
 801143e:	f04f 0900 	mov.w	r9, #0
 8011442:	7808      	ldrb	r0, [r1, #0]
 8011444:	f7ff ff71 	bl	801132a <__hexdig_fun>
 8011448:	1e43      	subs	r3, r0, #1
 801144a:	b2db      	uxtb	r3, r3
 801144c:	2b18      	cmp	r3, #24
 801144e:	d82c      	bhi.n	80114aa <__gethex+0x156>
 8011450:	f1a0 0210 	sub.w	r2, r0, #16
 8011454:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011458:	f7ff ff67 	bl	801132a <__hexdig_fun>
 801145c:	1e43      	subs	r3, r0, #1
 801145e:	b2db      	uxtb	r3, r3
 8011460:	2b18      	cmp	r3, #24
 8011462:	d91d      	bls.n	80114a0 <__gethex+0x14c>
 8011464:	f1b9 0f00 	cmp.w	r9, #0
 8011468:	d000      	beq.n	801146c <__gethex+0x118>
 801146a:	4252      	negs	r2, r2
 801146c:	4415      	add	r5, r2
 801146e:	f8cb 1000 	str.w	r1, [fp]
 8011472:	b1e4      	cbz	r4, 80114ae <__gethex+0x15a>
 8011474:	9b00      	ldr	r3, [sp, #0]
 8011476:	2b00      	cmp	r3, #0
 8011478:	bf14      	ite	ne
 801147a:	2700      	movne	r7, #0
 801147c:	2706      	moveq	r7, #6
 801147e:	4638      	mov	r0, r7
 8011480:	b009      	add	sp, #36	; 0x24
 8011482:	ecbd 8b02 	vpop	{d8}
 8011486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801148a:	463e      	mov	r6, r7
 801148c:	4625      	mov	r5, r4
 801148e:	2401      	movs	r4, #1
 8011490:	e7ca      	b.n	8011428 <__gethex+0xd4>
 8011492:	f04f 0900 	mov.w	r9, #0
 8011496:	1cb1      	adds	r1, r6, #2
 8011498:	e7d3      	b.n	8011442 <__gethex+0xee>
 801149a:	f04f 0901 	mov.w	r9, #1
 801149e:	e7fa      	b.n	8011496 <__gethex+0x142>
 80114a0:	230a      	movs	r3, #10
 80114a2:	fb03 0202 	mla	r2, r3, r2, r0
 80114a6:	3a10      	subs	r2, #16
 80114a8:	e7d4      	b.n	8011454 <__gethex+0x100>
 80114aa:	4631      	mov	r1, r6
 80114ac:	e7df      	b.n	801146e <__gethex+0x11a>
 80114ae:	1bf3      	subs	r3, r6, r7
 80114b0:	3b01      	subs	r3, #1
 80114b2:	4621      	mov	r1, r4
 80114b4:	2b07      	cmp	r3, #7
 80114b6:	dc0b      	bgt.n	80114d0 <__gethex+0x17c>
 80114b8:	ee18 0a10 	vmov	r0, s16
 80114bc:	f000 faee 	bl	8011a9c <_Balloc>
 80114c0:	4604      	mov	r4, r0
 80114c2:	b940      	cbnz	r0, 80114d6 <__gethex+0x182>
 80114c4:	4b65      	ldr	r3, [pc, #404]	; (801165c <__gethex+0x308>)
 80114c6:	4602      	mov	r2, r0
 80114c8:	21de      	movs	r1, #222	; 0xde
 80114ca:	4865      	ldr	r0, [pc, #404]	; (8011660 <__gethex+0x30c>)
 80114cc:	f001 fea0 	bl	8013210 <__assert_func>
 80114d0:	3101      	adds	r1, #1
 80114d2:	105b      	asrs	r3, r3, #1
 80114d4:	e7ee      	b.n	80114b4 <__gethex+0x160>
 80114d6:	f100 0914 	add.w	r9, r0, #20
 80114da:	f04f 0b00 	mov.w	fp, #0
 80114de:	f1ca 0301 	rsb	r3, sl, #1
 80114e2:	f8cd 9008 	str.w	r9, [sp, #8]
 80114e6:	f8cd b000 	str.w	fp, [sp]
 80114ea:	9306      	str	r3, [sp, #24]
 80114ec:	42b7      	cmp	r7, r6
 80114ee:	d340      	bcc.n	8011572 <__gethex+0x21e>
 80114f0:	9802      	ldr	r0, [sp, #8]
 80114f2:	9b00      	ldr	r3, [sp, #0]
 80114f4:	f840 3b04 	str.w	r3, [r0], #4
 80114f8:	eba0 0009 	sub.w	r0, r0, r9
 80114fc:	1080      	asrs	r0, r0, #2
 80114fe:	0146      	lsls	r6, r0, #5
 8011500:	6120      	str	r0, [r4, #16]
 8011502:	4618      	mov	r0, r3
 8011504:	f000 fbc0 	bl	8011c88 <__hi0bits>
 8011508:	1a30      	subs	r0, r6, r0
 801150a:	f8d8 6000 	ldr.w	r6, [r8]
 801150e:	42b0      	cmp	r0, r6
 8011510:	dd63      	ble.n	80115da <__gethex+0x286>
 8011512:	1b87      	subs	r7, r0, r6
 8011514:	4639      	mov	r1, r7
 8011516:	4620      	mov	r0, r4
 8011518:	f000 ff5a 	bl	80123d0 <__any_on>
 801151c:	4682      	mov	sl, r0
 801151e:	b1a8      	cbz	r0, 801154c <__gethex+0x1f8>
 8011520:	1e7b      	subs	r3, r7, #1
 8011522:	1159      	asrs	r1, r3, #5
 8011524:	f003 021f 	and.w	r2, r3, #31
 8011528:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801152c:	f04f 0a01 	mov.w	sl, #1
 8011530:	fa0a f202 	lsl.w	r2, sl, r2
 8011534:	420a      	tst	r2, r1
 8011536:	d009      	beq.n	801154c <__gethex+0x1f8>
 8011538:	4553      	cmp	r3, sl
 801153a:	dd05      	ble.n	8011548 <__gethex+0x1f4>
 801153c:	1eb9      	subs	r1, r7, #2
 801153e:	4620      	mov	r0, r4
 8011540:	f000 ff46 	bl	80123d0 <__any_on>
 8011544:	2800      	cmp	r0, #0
 8011546:	d145      	bne.n	80115d4 <__gethex+0x280>
 8011548:	f04f 0a02 	mov.w	sl, #2
 801154c:	4639      	mov	r1, r7
 801154e:	4620      	mov	r0, r4
 8011550:	f7ff fe99 	bl	8011286 <rshift>
 8011554:	443d      	add	r5, r7
 8011556:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801155a:	42ab      	cmp	r3, r5
 801155c:	da4c      	bge.n	80115f8 <__gethex+0x2a4>
 801155e:	ee18 0a10 	vmov	r0, s16
 8011562:	4621      	mov	r1, r4
 8011564:	f000 fada 	bl	8011b1c <_Bfree>
 8011568:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801156a:	2300      	movs	r3, #0
 801156c:	6013      	str	r3, [r2, #0]
 801156e:	27a3      	movs	r7, #163	; 0xa3
 8011570:	e785      	b.n	801147e <__gethex+0x12a>
 8011572:	1e73      	subs	r3, r6, #1
 8011574:	9a05      	ldr	r2, [sp, #20]
 8011576:	9303      	str	r3, [sp, #12]
 8011578:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801157c:	4293      	cmp	r3, r2
 801157e:	d019      	beq.n	80115b4 <__gethex+0x260>
 8011580:	f1bb 0f20 	cmp.w	fp, #32
 8011584:	d107      	bne.n	8011596 <__gethex+0x242>
 8011586:	9b02      	ldr	r3, [sp, #8]
 8011588:	9a00      	ldr	r2, [sp, #0]
 801158a:	f843 2b04 	str.w	r2, [r3], #4
 801158e:	9302      	str	r3, [sp, #8]
 8011590:	2300      	movs	r3, #0
 8011592:	9300      	str	r3, [sp, #0]
 8011594:	469b      	mov	fp, r3
 8011596:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801159a:	f7ff fec6 	bl	801132a <__hexdig_fun>
 801159e:	9b00      	ldr	r3, [sp, #0]
 80115a0:	f000 000f 	and.w	r0, r0, #15
 80115a4:	fa00 f00b 	lsl.w	r0, r0, fp
 80115a8:	4303      	orrs	r3, r0
 80115aa:	9300      	str	r3, [sp, #0]
 80115ac:	f10b 0b04 	add.w	fp, fp, #4
 80115b0:	9b03      	ldr	r3, [sp, #12]
 80115b2:	e00d      	b.n	80115d0 <__gethex+0x27c>
 80115b4:	9b03      	ldr	r3, [sp, #12]
 80115b6:	9a06      	ldr	r2, [sp, #24]
 80115b8:	4413      	add	r3, r2
 80115ba:	42bb      	cmp	r3, r7
 80115bc:	d3e0      	bcc.n	8011580 <__gethex+0x22c>
 80115be:	4618      	mov	r0, r3
 80115c0:	9901      	ldr	r1, [sp, #4]
 80115c2:	9307      	str	r3, [sp, #28]
 80115c4:	4652      	mov	r2, sl
 80115c6:	f7fd fe43 	bl	800f250 <strncmp>
 80115ca:	9b07      	ldr	r3, [sp, #28]
 80115cc:	2800      	cmp	r0, #0
 80115ce:	d1d7      	bne.n	8011580 <__gethex+0x22c>
 80115d0:	461e      	mov	r6, r3
 80115d2:	e78b      	b.n	80114ec <__gethex+0x198>
 80115d4:	f04f 0a03 	mov.w	sl, #3
 80115d8:	e7b8      	b.n	801154c <__gethex+0x1f8>
 80115da:	da0a      	bge.n	80115f2 <__gethex+0x29e>
 80115dc:	1a37      	subs	r7, r6, r0
 80115de:	4621      	mov	r1, r4
 80115e0:	ee18 0a10 	vmov	r0, s16
 80115e4:	463a      	mov	r2, r7
 80115e6:	f000 fcb5 	bl	8011f54 <__lshift>
 80115ea:	1bed      	subs	r5, r5, r7
 80115ec:	4604      	mov	r4, r0
 80115ee:	f100 0914 	add.w	r9, r0, #20
 80115f2:	f04f 0a00 	mov.w	sl, #0
 80115f6:	e7ae      	b.n	8011556 <__gethex+0x202>
 80115f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80115fc:	42a8      	cmp	r0, r5
 80115fe:	dd72      	ble.n	80116e6 <__gethex+0x392>
 8011600:	1b45      	subs	r5, r0, r5
 8011602:	42ae      	cmp	r6, r5
 8011604:	dc36      	bgt.n	8011674 <__gethex+0x320>
 8011606:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801160a:	2b02      	cmp	r3, #2
 801160c:	d02a      	beq.n	8011664 <__gethex+0x310>
 801160e:	2b03      	cmp	r3, #3
 8011610:	d02c      	beq.n	801166c <__gethex+0x318>
 8011612:	2b01      	cmp	r3, #1
 8011614:	d115      	bne.n	8011642 <__gethex+0x2ee>
 8011616:	42ae      	cmp	r6, r5
 8011618:	d113      	bne.n	8011642 <__gethex+0x2ee>
 801161a:	2e01      	cmp	r6, #1
 801161c:	d10b      	bne.n	8011636 <__gethex+0x2e2>
 801161e:	9a04      	ldr	r2, [sp, #16]
 8011620:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011624:	6013      	str	r3, [r2, #0]
 8011626:	2301      	movs	r3, #1
 8011628:	6123      	str	r3, [r4, #16]
 801162a:	f8c9 3000 	str.w	r3, [r9]
 801162e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011630:	2762      	movs	r7, #98	; 0x62
 8011632:	601c      	str	r4, [r3, #0]
 8011634:	e723      	b.n	801147e <__gethex+0x12a>
 8011636:	1e71      	subs	r1, r6, #1
 8011638:	4620      	mov	r0, r4
 801163a:	f000 fec9 	bl	80123d0 <__any_on>
 801163e:	2800      	cmp	r0, #0
 8011640:	d1ed      	bne.n	801161e <__gethex+0x2ca>
 8011642:	ee18 0a10 	vmov	r0, s16
 8011646:	4621      	mov	r1, r4
 8011648:	f000 fa68 	bl	8011b1c <_Bfree>
 801164c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801164e:	2300      	movs	r3, #0
 8011650:	6013      	str	r3, [r2, #0]
 8011652:	2750      	movs	r7, #80	; 0x50
 8011654:	e713      	b.n	801147e <__gethex+0x12a>
 8011656:	bf00      	nop
 8011658:	08014a48 	.word	0x08014a48
 801165c:	0801496b 	.word	0x0801496b
 8011660:	080149dc 	.word	0x080149dc
 8011664:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011666:	2b00      	cmp	r3, #0
 8011668:	d1eb      	bne.n	8011642 <__gethex+0x2ee>
 801166a:	e7d8      	b.n	801161e <__gethex+0x2ca>
 801166c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801166e:	2b00      	cmp	r3, #0
 8011670:	d1d5      	bne.n	801161e <__gethex+0x2ca>
 8011672:	e7e6      	b.n	8011642 <__gethex+0x2ee>
 8011674:	1e6f      	subs	r7, r5, #1
 8011676:	f1ba 0f00 	cmp.w	sl, #0
 801167a:	d131      	bne.n	80116e0 <__gethex+0x38c>
 801167c:	b127      	cbz	r7, 8011688 <__gethex+0x334>
 801167e:	4639      	mov	r1, r7
 8011680:	4620      	mov	r0, r4
 8011682:	f000 fea5 	bl	80123d0 <__any_on>
 8011686:	4682      	mov	sl, r0
 8011688:	117b      	asrs	r3, r7, #5
 801168a:	2101      	movs	r1, #1
 801168c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011690:	f007 071f 	and.w	r7, r7, #31
 8011694:	fa01 f707 	lsl.w	r7, r1, r7
 8011698:	421f      	tst	r7, r3
 801169a:	4629      	mov	r1, r5
 801169c:	4620      	mov	r0, r4
 801169e:	bf18      	it	ne
 80116a0:	f04a 0a02 	orrne.w	sl, sl, #2
 80116a4:	1b76      	subs	r6, r6, r5
 80116a6:	f7ff fdee 	bl	8011286 <rshift>
 80116aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80116ae:	2702      	movs	r7, #2
 80116b0:	f1ba 0f00 	cmp.w	sl, #0
 80116b4:	d048      	beq.n	8011748 <__gethex+0x3f4>
 80116b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80116ba:	2b02      	cmp	r3, #2
 80116bc:	d015      	beq.n	80116ea <__gethex+0x396>
 80116be:	2b03      	cmp	r3, #3
 80116c0:	d017      	beq.n	80116f2 <__gethex+0x39e>
 80116c2:	2b01      	cmp	r3, #1
 80116c4:	d109      	bne.n	80116da <__gethex+0x386>
 80116c6:	f01a 0f02 	tst.w	sl, #2
 80116ca:	d006      	beq.n	80116da <__gethex+0x386>
 80116cc:	f8d9 0000 	ldr.w	r0, [r9]
 80116d0:	ea4a 0a00 	orr.w	sl, sl, r0
 80116d4:	f01a 0f01 	tst.w	sl, #1
 80116d8:	d10e      	bne.n	80116f8 <__gethex+0x3a4>
 80116da:	f047 0710 	orr.w	r7, r7, #16
 80116de:	e033      	b.n	8011748 <__gethex+0x3f4>
 80116e0:	f04f 0a01 	mov.w	sl, #1
 80116e4:	e7d0      	b.n	8011688 <__gethex+0x334>
 80116e6:	2701      	movs	r7, #1
 80116e8:	e7e2      	b.n	80116b0 <__gethex+0x35c>
 80116ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116ec:	f1c3 0301 	rsb	r3, r3, #1
 80116f0:	9315      	str	r3, [sp, #84]	; 0x54
 80116f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d0f0      	beq.n	80116da <__gethex+0x386>
 80116f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80116fc:	f104 0314 	add.w	r3, r4, #20
 8011700:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011704:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011708:	f04f 0c00 	mov.w	ip, #0
 801170c:	4618      	mov	r0, r3
 801170e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011712:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011716:	d01c      	beq.n	8011752 <__gethex+0x3fe>
 8011718:	3201      	adds	r2, #1
 801171a:	6002      	str	r2, [r0, #0]
 801171c:	2f02      	cmp	r7, #2
 801171e:	f104 0314 	add.w	r3, r4, #20
 8011722:	d13f      	bne.n	80117a4 <__gethex+0x450>
 8011724:	f8d8 2000 	ldr.w	r2, [r8]
 8011728:	3a01      	subs	r2, #1
 801172a:	42b2      	cmp	r2, r6
 801172c:	d10a      	bne.n	8011744 <__gethex+0x3f0>
 801172e:	1171      	asrs	r1, r6, #5
 8011730:	2201      	movs	r2, #1
 8011732:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011736:	f006 061f 	and.w	r6, r6, #31
 801173a:	fa02 f606 	lsl.w	r6, r2, r6
 801173e:	421e      	tst	r6, r3
 8011740:	bf18      	it	ne
 8011742:	4617      	movne	r7, r2
 8011744:	f047 0720 	orr.w	r7, r7, #32
 8011748:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801174a:	601c      	str	r4, [r3, #0]
 801174c:	9b04      	ldr	r3, [sp, #16]
 801174e:	601d      	str	r5, [r3, #0]
 8011750:	e695      	b.n	801147e <__gethex+0x12a>
 8011752:	4299      	cmp	r1, r3
 8011754:	f843 cc04 	str.w	ip, [r3, #-4]
 8011758:	d8d8      	bhi.n	801170c <__gethex+0x3b8>
 801175a:	68a3      	ldr	r3, [r4, #8]
 801175c:	459b      	cmp	fp, r3
 801175e:	db19      	blt.n	8011794 <__gethex+0x440>
 8011760:	6861      	ldr	r1, [r4, #4]
 8011762:	ee18 0a10 	vmov	r0, s16
 8011766:	3101      	adds	r1, #1
 8011768:	f000 f998 	bl	8011a9c <_Balloc>
 801176c:	4681      	mov	r9, r0
 801176e:	b918      	cbnz	r0, 8011778 <__gethex+0x424>
 8011770:	4b1a      	ldr	r3, [pc, #104]	; (80117dc <__gethex+0x488>)
 8011772:	4602      	mov	r2, r0
 8011774:	2184      	movs	r1, #132	; 0x84
 8011776:	e6a8      	b.n	80114ca <__gethex+0x176>
 8011778:	6922      	ldr	r2, [r4, #16]
 801177a:	3202      	adds	r2, #2
 801177c:	f104 010c 	add.w	r1, r4, #12
 8011780:	0092      	lsls	r2, r2, #2
 8011782:	300c      	adds	r0, #12
 8011784:	f7fc fd6e 	bl	800e264 <memcpy>
 8011788:	4621      	mov	r1, r4
 801178a:	ee18 0a10 	vmov	r0, s16
 801178e:	f000 f9c5 	bl	8011b1c <_Bfree>
 8011792:	464c      	mov	r4, r9
 8011794:	6923      	ldr	r3, [r4, #16]
 8011796:	1c5a      	adds	r2, r3, #1
 8011798:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801179c:	6122      	str	r2, [r4, #16]
 801179e:	2201      	movs	r2, #1
 80117a0:	615a      	str	r2, [r3, #20]
 80117a2:	e7bb      	b.n	801171c <__gethex+0x3c8>
 80117a4:	6922      	ldr	r2, [r4, #16]
 80117a6:	455a      	cmp	r2, fp
 80117a8:	dd0b      	ble.n	80117c2 <__gethex+0x46e>
 80117aa:	2101      	movs	r1, #1
 80117ac:	4620      	mov	r0, r4
 80117ae:	f7ff fd6a 	bl	8011286 <rshift>
 80117b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80117b6:	3501      	adds	r5, #1
 80117b8:	42ab      	cmp	r3, r5
 80117ba:	f6ff aed0 	blt.w	801155e <__gethex+0x20a>
 80117be:	2701      	movs	r7, #1
 80117c0:	e7c0      	b.n	8011744 <__gethex+0x3f0>
 80117c2:	f016 061f 	ands.w	r6, r6, #31
 80117c6:	d0fa      	beq.n	80117be <__gethex+0x46a>
 80117c8:	449a      	add	sl, r3
 80117ca:	f1c6 0620 	rsb	r6, r6, #32
 80117ce:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80117d2:	f000 fa59 	bl	8011c88 <__hi0bits>
 80117d6:	42b0      	cmp	r0, r6
 80117d8:	dbe7      	blt.n	80117aa <__gethex+0x456>
 80117da:	e7f0      	b.n	80117be <__gethex+0x46a>
 80117dc:	0801496b 	.word	0x0801496b

080117e0 <L_shift>:
 80117e0:	f1c2 0208 	rsb	r2, r2, #8
 80117e4:	0092      	lsls	r2, r2, #2
 80117e6:	b570      	push	{r4, r5, r6, lr}
 80117e8:	f1c2 0620 	rsb	r6, r2, #32
 80117ec:	6843      	ldr	r3, [r0, #4]
 80117ee:	6804      	ldr	r4, [r0, #0]
 80117f0:	fa03 f506 	lsl.w	r5, r3, r6
 80117f4:	432c      	orrs	r4, r5
 80117f6:	40d3      	lsrs	r3, r2
 80117f8:	6004      	str	r4, [r0, #0]
 80117fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80117fe:	4288      	cmp	r0, r1
 8011800:	d3f4      	bcc.n	80117ec <L_shift+0xc>
 8011802:	bd70      	pop	{r4, r5, r6, pc}

08011804 <__match>:
 8011804:	b530      	push	{r4, r5, lr}
 8011806:	6803      	ldr	r3, [r0, #0]
 8011808:	3301      	adds	r3, #1
 801180a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801180e:	b914      	cbnz	r4, 8011816 <__match+0x12>
 8011810:	6003      	str	r3, [r0, #0]
 8011812:	2001      	movs	r0, #1
 8011814:	bd30      	pop	{r4, r5, pc}
 8011816:	f813 2b01 	ldrb.w	r2, [r3], #1
 801181a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801181e:	2d19      	cmp	r5, #25
 8011820:	bf98      	it	ls
 8011822:	3220      	addls	r2, #32
 8011824:	42a2      	cmp	r2, r4
 8011826:	d0f0      	beq.n	801180a <__match+0x6>
 8011828:	2000      	movs	r0, #0
 801182a:	e7f3      	b.n	8011814 <__match+0x10>

0801182c <__hexnan>:
 801182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011830:	680b      	ldr	r3, [r1, #0]
 8011832:	6801      	ldr	r1, [r0, #0]
 8011834:	115e      	asrs	r6, r3, #5
 8011836:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801183a:	f013 031f 	ands.w	r3, r3, #31
 801183e:	b087      	sub	sp, #28
 8011840:	bf18      	it	ne
 8011842:	3604      	addne	r6, #4
 8011844:	2500      	movs	r5, #0
 8011846:	1f37      	subs	r7, r6, #4
 8011848:	4682      	mov	sl, r0
 801184a:	4690      	mov	r8, r2
 801184c:	9301      	str	r3, [sp, #4]
 801184e:	f846 5c04 	str.w	r5, [r6, #-4]
 8011852:	46b9      	mov	r9, r7
 8011854:	463c      	mov	r4, r7
 8011856:	9502      	str	r5, [sp, #8]
 8011858:	46ab      	mov	fp, r5
 801185a:	784a      	ldrb	r2, [r1, #1]
 801185c:	1c4b      	adds	r3, r1, #1
 801185e:	9303      	str	r3, [sp, #12]
 8011860:	b342      	cbz	r2, 80118b4 <__hexnan+0x88>
 8011862:	4610      	mov	r0, r2
 8011864:	9105      	str	r1, [sp, #20]
 8011866:	9204      	str	r2, [sp, #16]
 8011868:	f7ff fd5f 	bl	801132a <__hexdig_fun>
 801186c:	2800      	cmp	r0, #0
 801186e:	d14f      	bne.n	8011910 <__hexnan+0xe4>
 8011870:	9a04      	ldr	r2, [sp, #16]
 8011872:	9905      	ldr	r1, [sp, #20]
 8011874:	2a20      	cmp	r2, #32
 8011876:	d818      	bhi.n	80118aa <__hexnan+0x7e>
 8011878:	9b02      	ldr	r3, [sp, #8]
 801187a:	459b      	cmp	fp, r3
 801187c:	dd13      	ble.n	80118a6 <__hexnan+0x7a>
 801187e:	454c      	cmp	r4, r9
 8011880:	d206      	bcs.n	8011890 <__hexnan+0x64>
 8011882:	2d07      	cmp	r5, #7
 8011884:	dc04      	bgt.n	8011890 <__hexnan+0x64>
 8011886:	462a      	mov	r2, r5
 8011888:	4649      	mov	r1, r9
 801188a:	4620      	mov	r0, r4
 801188c:	f7ff ffa8 	bl	80117e0 <L_shift>
 8011890:	4544      	cmp	r4, r8
 8011892:	d950      	bls.n	8011936 <__hexnan+0x10a>
 8011894:	2300      	movs	r3, #0
 8011896:	f1a4 0904 	sub.w	r9, r4, #4
 801189a:	f844 3c04 	str.w	r3, [r4, #-4]
 801189e:	f8cd b008 	str.w	fp, [sp, #8]
 80118a2:	464c      	mov	r4, r9
 80118a4:	461d      	mov	r5, r3
 80118a6:	9903      	ldr	r1, [sp, #12]
 80118a8:	e7d7      	b.n	801185a <__hexnan+0x2e>
 80118aa:	2a29      	cmp	r2, #41	; 0x29
 80118ac:	d156      	bne.n	801195c <__hexnan+0x130>
 80118ae:	3102      	adds	r1, #2
 80118b0:	f8ca 1000 	str.w	r1, [sl]
 80118b4:	f1bb 0f00 	cmp.w	fp, #0
 80118b8:	d050      	beq.n	801195c <__hexnan+0x130>
 80118ba:	454c      	cmp	r4, r9
 80118bc:	d206      	bcs.n	80118cc <__hexnan+0xa0>
 80118be:	2d07      	cmp	r5, #7
 80118c0:	dc04      	bgt.n	80118cc <__hexnan+0xa0>
 80118c2:	462a      	mov	r2, r5
 80118c4:	4649      	mov	r1, r9
 80118c6:	4620      	mov	r0, r4
 80118c8:	f7ff ff8a 	bl	80117e0 <L_shift>
 80118cc:	4544      	cmp	r4, r8
 80118ce:	d934      	bls.n	801193a <__hexnan+0x10e>
 80118d0:	f1a8 0204 	sub.w	r2, r8, #4
 80118d4:	4623      	mov	r3, r4
 80118d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80118da:	f842 1f04 	str.w	r1, [r2, #4]!
 80118de:	429f      	cmp	r7, r3
 80118e0:	d2f9      	bcs.n	80118d6 <__hexnan+0xaa>
 80118e2:	1b3b      	subs	r3, r7, r4
 80118e4:	f023 0303 	bic.w	r3, r3, #3
 80118e8:	3304      	adds	r3, #4
 80118ea:	3401      	adds	r4, #1
 80118ec:	3e03      	subs	r6, #3
 80118ee:	42b4      	cmp	r4, r6
 80118f0:	bf88      	it	hi
 80118f2:	2304      	movhi	r3, #4
 80118f4:	4443      	add	r3, r8
 80118f6:	2200      	movs	r2, #0
 80118f8:	f843 2b04 	str.w	r2, [r3], #4
 80118fc:	429f      	cmp	r7, r3
 80118fe:	d2fb      	bcs.n	80118f8 <__hexnan+0xcc>
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	b91b      	cbnz	r3, 801190c <__hexnan+0xe0>
 8011904:	4547      	cmp	r7, r8
 8011906:	d127      	bne.n	8011958 <__hexnan+0x12c>
 8011908:	2301      	movs	r3, #1
 801190a:	603b      	str	r3, [r7, #0]
 801190c:	2005      	movs	r0, #5
 801190e:	e026      	b.n	801195e <__hexnan+0x132>
 8011910:	3501      	adds	r5, #1
 8011912:	2d08      	cmp	r5, #8
 8011914:	f10b 0b01 	add.w	fp, fp, #1
 8011918:	dd06      	ble.n	8011928 <__hexnan+0xfc>
 801191a:	4544      	cmp	r4, r8
 801191c:	d9c3      	bls.n	80118a6 <__hexnan+0x7a>
 801191e:	2300      	movs	r3, #0
 8011920:	f844 3c04 	str.w	r3, [r4, #-4]
 8011924:	2501      	movs	r5, #1
 8011926:	3c04      	subs	r4, #4
 8011928:	6822      	ldr	r2, [r4, #0]
 801192a:	f000 000f 	and.w	r0, r0, #15
 801192e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011932:	6022      	str	r2, [r4, #0]
 8011934:	e7b7      	b.n	80118a6 <__hexnan+0x7a>
 8011936:	2508      	movs	r5, #8
 8011938:	e7b5      	b.n	80118a6 <__hexnan+0x7a>
 801193a:	9b01      	ldr	r3, [sp, #4]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d0df      	beq.n	8011900 <__hexnan+0xd4>
 8011940:	f04f 32ff 	mov.w	r2, #4294967295
 8011944:	f1c3 0320 	rsb	r3, r3, #32
 8011948:	fa22 f303 	lsr.w	r3, r2, r3
 801194c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011950:	401a      	ands	r2, r3
 8011952:	f846 2c04 	str.w	r2, [r6, #-4]
 8011956:	e7d3      	b.n	8011900 <__hexnan+0xd4>
 8011958:	3f04      	subs	r7, #4
 801195a:	e7d1      	b.n	8011900 <__hexnan+0xd4>
 801195c:	2004      	movs	r0, #4
 801195e:	b007      	add	sp, #28
 8011960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011964 <_localeconv_r>:
 8011964:	4800      	ldr	r0, [pc, #0]	; (8011968 <_localeconv_r+0x4>)
 8011966:	4770      	bx	lr
 8011968:	20000180 	.word	0x20000180

0801196c <__retarget_lock_init_recursive>:
 801196c:	4770      	bx	lr

0801196e <__retarget_lock_acquire_recursive>:
 801196e:	4770      	bx	lr

08011970 <__retarget_lock_release_recursive>:
 8011970:	4770      	bx	lr
	...

08011974 <_lseek_r>:
 8011974:	b538      	push	{r3, r4, r5, lr}
 8011976:	4d07      	ldr	r5, [pc, #28]	; (8011994 <_lseek_r+0x20>)
 8011978:	4604      	mov	r4, r0
 801197a:	4608      	mov	r0, r1
 801197c:	4611      	mov	r1, r2
 801197e:	2200      	movs	r2, #0
 8011980:	602a      	str	r2, [r5, #0]
 8011982:	461a      	mov	r2, r3
 8011984:	f7f2 fd1e 	bl	80043c4 <_lseek>
 8011988:	1c43      	adds	r3, r0, #1
 801198a:	d102      	bne.n	8011992 <_lseek_r+0x1e>
 801198c:	682b      	ldr	r3, [r5, #0]
 801198e:	b103      	cbz	r3, 8011992 <_lseek_r+0x1e>
 8011990:	6023      	str	r3, [r4, #0]
 8011992:	bd38      	pop	{r3, r4, r5, pc}
 8011994:	20001a90 	.word	0x20001a90

08011998 <__swhatbuf_r>:
 8011998:	b570      	push	{r4, r5, r6, lr}
 801199a:	460e      	mov	r6, r1
 801199c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119a0:	2900      	cmp	r1, #0
 80119a2:	b096      	sub	sp, #88	; 0x58
 80119a4:	4614      	mov	r4, r2
 80119a6:	461d      	mov	r5, r3
 80119a8:	da07      	bge.n	80119ba <__swhatbuf_r+0x22>
 80119aa:	2300      	movs	r3, #0
 80119ac:	602b      	str	r3, [r5, #0]
 80119ae:	89b3      	ldrh	r3, [r6, #12]
 80119b0:	061a      	lsls	r2, r3, #24
 80119b2:	d410      	bmi.n	80119d6 <__swhatbuf_r+0x3e>
 80119b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119b8:	e00e      	b.n	80119d8 <__swhatbuf_r+0x40>
 80119ba:	466a      	mov	r2, sp
 80119bc:	f001 fc58 	bl	8013270 <_fstat_r>
 80119c0:	2800      	cmp	r0, #0
 80119c2:	dbf2      	blt.n	80119aa <__swhatbuf_r+0x12>
 80119c4:	9a01      	ldr	r2, [sp, #4]
 80119c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80119ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80119ce:	425a      	negs	r2, r3
 80119d0:	415a      	adcs	r2, r3
 80119d2:	602a      	str	r2, [r5, #0]
 80119d4:	e7ee      	b.n	80119b4 <__swhatbuf_r+0x1c>
 80119d6:	2340      	movs	r3, #64	; 0x40
 80119d8:	2000      	movs	r0, #0
 80119da:	6023      	str	r3, [r4, #0]
 80119dc:	b016      	add	sp, #88	; 0x58
 80119de:	bd70      	pop	{r4, r5, r6, pc}

080119e0 <__smakebuf_r>:
 80119e0:	898b      	ldrh	r3, [r1, #12]
 80119e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119e4:	079d      	lsls	r5, r3, #30
 80119e6:	4606      	mov	r6, r0
 80119e8:	460c      	mov	r4, r1
 80119ea:	d507      	bpl.n	80119fc <__smakebuf_r+0x1c>
 80119ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80119f0:	6023      	str	r3, [r4, #0]
 80119f2:	6123      	str	r3, [r4, #16]
 80119f4:	2301      	movs	r3, #1
 80119f6:	6163      	str	r3, [r4, #20]
 80119f8:	b002      	add	sp, #8
 80119fa:	bd70      	pop	{r4, r5, r6, pc}
 80119fc:	ab01      	add	r3, sp, #4
 80119fe:	466a      	mov	r2, sp
 8011a00:	f7ff ffca 	bl	8011998 <__swhatbuf_r>
 8011a04:	9900      	ldr	r1, [sp, #0]
 8011a06:	4605      	mov	r5, r0
 8011a08:	4630      	mov	r0, r6
 8011a0a:	f7fc fc91 	bl	800e330 <_malloc_r>
 8011a0e:	b948      	cbnz	r0, 8011a24 <__smakebuf_r+0x44>
 8011a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a14:	059a      	lsls	r2, r3, #22
 8011a16:	d4ef      	bmi.n	80119f8 <__smakebuf_r+0x18>
 8011a18:	f023 0303 	bic.w	r3, r3, #3
 8011a1c:	f043 0302 	orr.w	r3, r3, #2
 8011a20:	81a3      	strh	r3, [r4, #12]
 8011a22:	e7e3      	b.n	80119ec <__smakebuf_r+0xc>
 8011a24:	4b0d      	ldr	r3, [pc, #52]	; (8011a5c <__smakebuf_r+0x7c>)
 8011a26:	62b3      	str	r3, [r6, #40]	; 0x28
 8011a28:	89a3      	ldrh	r3, [r4, #12]
 8011a2a:	6020      	str	r0, [r4, #0]
 8011a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a30:	81a3      	strh	r3, [r4, #12]
 8011a32:	9b00      	ldr	r3, [sp, #0]
 8011a34:	6163      	str	r3, [r4, #20]
 8011a36:	9b01      	ldr	r3, [sp, #4]
 8011a38:	6120      	str	r0, [r4, #16]
 8011a3a:	b15b      	cbz	r3, 8011a54 <__smakebuf_r+0x74>
 8011a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a40:	4630      	mov	r0, r6
 8011a42:	f001 fc27 	bl	8013294 <_isatty_r>
 8011a46:	b128      	cbz	r0, 8011a54 <__smakebuf_r+0x74>
 8011a48:	89a3      	ldrh	r3, [r4, #12]
 8011a4a:	f023 0303 	bic.w	r3, r3, #3
 8011a4e:	f043 0301 	orr.w	r3, r3, #1
 8011a52:	81a3      	strh	r3, [r4, #12]
 8011a54:	89a0      	ldrh	r0, [r4, #12]
 8011a56:	4305      	orrs	r5, r0
 8011a58:	81a5      	strh	r5, [r4, #12]
 8011a5a:	e7cd      	b.n	80119f8 <__smakebuf_r+0x18>
 8011a5c:	080110e5 	.word	0x080110e5

08011a60 <__ascii_mbtowc>:
 8011a60:	b082      	sub	sp, #8
 8011a62:	b901      	cbnz	r1, 8011a66 <__ascii_mbtowc+0x6>
 8011a64:	a901      	add	r1, sp, #4
 8011a66:	b142      	cbz	r2, 8011a7a <__ascii_mbtowc+0x1a>
 8011a68:	b14b      	cbz	r3, 8011a7e <__ascii_mbtowc+0x1e>
 8011a6a:	7813      	ldrb	r3, [r2, #0]
 8011a6c:	600b      	str	r3, [r1, #0]
 8011a6e:	7812      	ldrb	r2, [r2, #0]
 8011a70:	1e10      	subs	r0, r2, #0
 8011a72:	bf18      	it	ne
 8011a74:	2001      	movne	r0, #1
 8011a76:	b002      	add	sp, #8
 8011a78:	4770      	bx	lr
 8011a7a:	4610      	mov	r0, r2
 8011a7c:	e7fb      	b.n	8011a76 <__ascii_mbtowc+0x16>
 8011a7e:	f06f 0001 	mvn.w	r0, #1
 8011a82:	e7f8      	b.n	8011a76 <__ascii_mbtowc+0x16>

08011a84 <__malloc_lock>:
 8011a84:	4801      	ldr	r0, [pc, #4]	; (8011a8c <__malloc_lock+0x8>)
 8011a86:	f7ff bf72 	b.w	801196e <__retarget_lock_acquire_recursive>
 8011a8a:	bf00      	nop
 8011a8c:	20001a88 	.word	0x20001a88

08011a90 <__malloc_unlock>:
 8011a90:	4801      	ldr	r0, [pc, #4]	; (8011a98 <__malloc_unlock+0x8>)
 8011a92:	f7ff bf6d 	b.w	8011970 <__retarget_lock_release_recursive>
 8011a96:	bf00      	nop
 8011a98:	20001a88 	.word	0x20001a88

08011a9c <_Balloc>:
 8011a9c:	b570      	push	{r4, r5, r6, lr}
 8011a9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011aa0:	4604      	mov	r4, r0
 8011aa2:	460d      	mov	r5, r1
 8011aa4:	b976      	cbnz	r6, 8011ac4 <_Balloc+0x28>
 8011aa6:	2010      	movs	r0, #16
 8011aa8:	f7fc fbd4 	bl	800e254 <malloc>
 8011aac:	4602      	mov	r2, r0
 8011aae:	6260      	str	r0, [r4, #36]	; 0x24
 8011ab0:	b920      	cbnz	r0, 8011abc <_Balloc+0x20>
 8011ab2:	4b18      	ldr	r3, [pc, #96]	; (8011b14 <_Balloc+0x78>)
 8011ab4:	4818      	ldr	r0, [pc, #96]	; (8011b18 <_Balloc+0x7c>)
 8011ab6:	2166      	movs	r1, #102	; 0x66
 8011ab8:	f001 fbaa 	bl	8013210 <__assert_func>
 8011abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ac0:	6006      	str	r6, [r0, #0]
 8011ac2:	60c6      	str	r6, [r0, #12]
 8011ac4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011ac6:	68f3      	ldr	r3, [r6, #12]
 8011ac8:	b183      	cbz	r3, 8011aec <_Balloc+0x50>
 8011aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011acc:	68db      	ldr	r3, [r3, #12]
 8011ace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011ad2:	b9b8      	cbnz	r0, 8011b04 <_Balloc+0x68>
 8011ad4:	2101      	movs	r1, #1
 8011ad6:	fa01 f605 	lsl.w	r6, r1, r5
 8011ada:	1d72      	adds	r2, r6, #5
 8011adc:	0092      	lsls	r2, r2, #2
 8011ade:	4620      	mov	r0, r4
 8011ae0:	f000 fc97 	bl	8012412 <_calloc_r>
 8011ae4:	b160      	cbz	r0, 8011b00 <_Balloc+0x64>
 8011ae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011aea:	e00e      	b.n	8011b0a <_Balloc+0x6e>
 8011aec:	2221      	movs	r2, #33	; 0x21
 8011aee:	2104      	movs	r1, #4
 8011af0:	4620      	mov	r0, r4
 8011af2:	f000 fc8e 	bl	8012412 <_calloc_r>
 8011af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011af8:	60f0      	str	r0, [r6, #12]
 8011afa:	68db      	ldr	r3, [r3, #12]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d1e4      	bne.n	8011aca <_Balloc+0x2e>
 8011b00:	2000      	movs	r0, #0
 8011b02:	bd70      	pop	{r4, r5, r6, pc}
 8011b04:	6802      	ldr	r2, [r0, #0]
 8011b06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011b10:	e7f7      	b.n	8011b02 <_Balloc+0x66>
 8011b12:	bf00      	nop
 8011b14:	080148f5 	.word	0x080148f5
 8011b18:	08014a5c 	.word	0x08014a5c

08011b1c <_Bfree>:
 8011b1c:	b570      	push	{r4, r5, r6, lr}
 8011b1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011b20:	4605      	mov	r5, r0
 8011b22:	460c      	mov	r4, r1
 8011b24:	b976      	cbnz	r6, 8011b44 <_Bfree+0x28>
 8011b26:	2010      	movs	r0, #16
 8011b28:	f7fc fb94 	bl	800e254 <malloc>
 8011b2c:	4602      	mov	r2, r0
 8011b2e:	6268      	str	r0, [r5, #36]	; 0x24
 8011b30:	b920      	cbnz	r0, 8011b3c <_Bfree+0x20>
 8011b32:	4b09      	ldr	r3, [pc, #36]	; (8011b58 <_Bfree+0x3c>)
 8011b34:	4809      	ldr	r0, [pc, #36]	; (8011b5c <_Bfree+0x40>)
 8011b36:	218a      	movs	r1, #138	; 0x8a
 8011b38:	f001 fb6a 	bl	8013210 <__assert_func>
 8011b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011b40:	6006      	str	r6, [r0, #0]
 8011b42:	60c6      	str	r6, [r0, #12]
 8011b44:	b13c      	cbz	r4, 8011b56 <_Bfree+0x3a>
 8011b46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011b48:	6862      	ldr	r2, [r4, #4]
 8011b4a:	68db      	ldr	r3, [r3, #12]
 8011b4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b50:	6021      	str	r1, [r4, #0]
 8011b52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011b56:	bd70      	pop	{r4, r5, r6, pc}
 8011b58:	080148f5 	.word	0x080148f5
 8011b5c:	08014a5c 	.word	0x08014a5c

08011b60 <__multadd>:
 8011b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b64:	690e      	ldr	r6, [r1, #16]
 8011b66:	4607      	mov	r7, r0
 8011b68:	4698      	mov	r8, r3
 8011b6a:	460c      	mov	r4, r1
 8011b6c:	f101 0014 	add.w	r0, r1, #20
 8011b70:	2300      	movs	r3, #0
 8011b72:	6805      	ldr	r5, [r0, #0]
 8011b74:	b2a9      	uxth	r1, r5
 8011b76:	fb02 8101 	mla	r1, r2, r1, r8
 8011b7a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011b7e:	0c2d      	lsrs	r5, r5, #16
 8011b80:	fb02 c505 	mla	r5, r2, r5, ip
 8011b84:	b289      	uxth	r1, r1
 8011b86:	3301      	adds	r3, #1
 8011b88:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011b8c:	429e      	cmp	r6, r3
 8011b8e:	f840 1b04 	str.w	r1, [r0], #4
 8011b92:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011b96:	dcec      	bgt.n	8011b72 <__multadd+0x12>
 8011b98:	f1b8 0f00 	cmp.w	r8, #0
 8011b9c:	d022      	beq.n	8011be4 <__multadd+0x84>
 8011b9e:	68a3      	ldr	r3, [r4, #8]
 8011ba0:	42b3      	cmp	r3, r6
 8011ba2:	dc19      	bgt.n	8011bd8 <__multadd+0x78>
 8011ba4:	6861      	ldr	r1, [r4, #4]
 8011ba6:	4638      	mov	r0, r7
 8011ba8:	3101      	adds	r1, #1
 8011baa:	f7ff ff77 	bl	8011a9c <_Balloc>
 8011bae:	4605      	mov	r5, r0
 8011bb0:	b928      	cbnz	r0, 8011bbe <__multadd+0x5e>
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	4b0d      	ldr	r3, [pc, #52]	; (8011bec <__multadd+0x8c>)
 8011bb6:	480e      	ldr	r0, [pc, #56]	; (8011bf0 <__multadd+0x90>)
 8011bb8:	21b5      	movs	r1, #181	; 0xb5
 8011bba:	f001 fb29 	bl	8013210 <__assert_func>
 8011bbe:	6922      	ldr	r2, [r4, #16]
 8011bc0:	3202      	adds	r2, #2
 8011bc2:	f104 010c 	add.w	r1, r4, #12
 8011bc6:	0092      	lsls	r2, r2, #2
 8011bc8:	300c      	adds	r0, #12
 8011bca:	f7fc fb4b 	bl	800e264 <memcpy>
 8011bce:	4621      	mov	r1, r4
 8011bd0:	4638      	mov	r0, r7
 8011bd2:	f7ff ffa3 	bl	8011b1c <_Bfree>
 8011bd6:	462c      	mov	r4, r5
 8011bd8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011bdc:	3601      	adds	r6, #1
 8011bde:	f8c3 8014 	str.w	r8, [r3, #20]
 8011be2:	6126      	str	r6, [r4, #16]
 8011be4:	4620      	mov	r0, r4
 8011be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bea:	bf00      	nop
 8011bec:	0801496b 	.word	0x0801496b
 8011bf0:	08014a5c 	.word	0x08014a5c

08011bf4 <__s2b>:
 8011bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bf8:	460c      	mov	r4, r1
 8011bfa:	4615      	mov	r5, r2
 8011bfc:	461f      	mov	r7, r3
 8011bfe:	2209      	movs	r2, #9
 8011c00:	3308      	adds	r3, #8
 8011c02:	4606      	mov	r6, r0
 8011c04:	fb93 f3f2 	sdiv	r3, r3, r2
 8011c08:	2100      	movs	r1, #0
 8011c0a:	2201      	movs	r2, #1
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	db09      	blt.n	8011c24 <__s2b+0x30>
 8011c10:	4630      	mov	r0, r6
 8011c12:	f7ff ff43 	bl	8011a9c <_Balloc>
 8011c16:	b940      	cbnz	r0, 8011c2a <__s2b+0x36>
 8011c18:	4602      	mov	r2, r0
 8011c1a:	4b19      	ldr	r3, [pc, #100]	; (8011c80 <__s2b+0x8c>)
 8011c1c:	4819      	ldr	r0, [pc, #100]	; (8011c84 <__s2b+0x90>)
 8011c1e:	21ce      	movs	r1, #206	; 0xce
 8011c20:	f001 faf6 	bl	8013210 <__assert_func>
 8011c24:	0052      	lsls	r2, r2, #1
 8011c26:	3101      	adds	r1, #1
 8011c28:	e7f0      	b.n	8011c0c <__s2b+0x18>
 8011c2a:	9b08      	ldr	r3, [sp, #32]
 8011c2c:	6143      	str	r3, [r0, #20]
 8011c2e:	2d09      	cmp	r5, #9
 8011c30:	f04f 0301 	mov.w	r3, #1
 8011c34:	6103      	str	r3, [r0, #16]
 8011c36:	dd16      	ble.n	8011c66 <__s2b+0x72>
 8011c38:	f104 0909 	add.w	r9, r4, #9
 8011c3c:	46c8      	mov	r8, r9
 8011c3e:	442c      	add	r4, r5
 8011c40:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011c44:	4601      	mov	r1, r0
 8011c46:	3b30      	subs	r3, #48	; 0x30
 8011c48:	220a      	movs	r2, #10
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	f7ff ff88 	bl	8011b60 <__multadd>
 8011c50:	45a0      	cmp	r8, r4
 8011c52:	d1f5      	bne.n	8011c40 <__s2b+0x4c>
 8011c54:	f1a5 0408 	sub.w	r4, r5, #8
 8011c58:	444c      	add	r4, r9
 8011c5a:	1b2d      	subs	r5, r5, r4
 8011c5c:	1963      	adds	r3, r4, r5
 8011c5e:	42bb      	cmp	r3, r7
 8011c60:	db04      	blt.n	8011c6c <__s2b+0x78>
 8011c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c66:	340a      	adds	r4, #10
 8011c68:	2509      	movs	r5, #9
 8011c6a:	e7f6      	b.n	8011c5a <__s2b+0x66>
 8011c6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011c70:	4601      	mov	r1, r0
 8011c72:	3b30      	subs	r3, #48	; 0x30
 8011c74:	220a      	movs	r2, #10
 8011c76:	4630      	mov	r0, r6
 8011c78:	f7ff ff72 	bl	8011b60 <__multadd>
 8011c7c:	e7ee      	b.n	8011c5c <__s2b+0x68>
 8011c7e:	bf00      	nop
 8011c80:	0801496b 	.word	0x0801496b
 8011c84:	08014a5c 	.word	0x08014a5c

08011c88 <__hi0bits>:
 8011c88:	0c03      	lsrs	r3, r0, #16
 8011c8a:	041b      	lsls	r3, r3, #16
 8011c8c:	b9d3      	cbnz	r3, 8011cc4 <__hi0bits+0x3c>
 8011c8e:	0400      	lsls	r0, r0, #16
 8011c90:	2310      	movs	r3, #16
 8011c92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011c96:	bf04      	itt	eq
 8011c98:	0200      	lsleq	r0, r0, #8
 8011c9a:	3308      	addeq	r3, #8
 8011c9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011ca0:	bf04      	itt	eq
 8011ca2:	0100      	lsleq	r0, r0, #4
 8011ca4:	3304      	addeq	r3, #4
 8011ca6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011caa:	bf04      	itt	eq
 8011cac:	0080      	lsleq	r0, r0, #2
 8011cae:	3302      	addeq	r3, #2
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	db05      	blt.n	8011cc0 <__hi0bits+0x38>
 8011cb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011cb8:	f103 0301 	add.w	r3, r3, #1
 8011cbc:	bf08      	it	eq
 8011cbe:	2320      	moveq	r3, #32
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	4770      	bx	lr
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	e7e4      	b.n	8011c92 <__hi0bits+0xa>

08011cc8 <__lo0bits>:
 8011cc8:	6803      	ldr	r3, [r0, #0]
 8011cca:	f013 0207 	ands.w	r2, r3, #7
 8011cce:	4601      	mov	r1, r0
 8011cd0:	d00b      	beq.n	8011cea <__lo0bits+0x22>
 8011cd2:	07da      	lsls	r2, r3, #31
 8011cd4:	d424      	bmi.n	8011d20 <__lo0bits+0x58>
 8011cd6:	0798      	lsls	r0, r3, #30
 8011cd8:	bf49      	itett	mi
 8011cda:	085b      	lsrmi	r3, r3, #1
 8011cdc:	089b      	lsrpl	r3, r3, #2
 8011cde:	2001      	movmi	r0, #1
 8011ce0:	600b      	strmi	r3, [r1, #0]
 8011ce2:	bf5c      	itt	pl
 8011ce4:	600b      	strpl	r3, [r1, #0]
 8011ce6:	2002      	movpl	r0, #2
 8011ce8:	4770      	bx	lr
 8011cea:	b298      	uxth	r0, r3
 8011cec:	b9b0      	cbnz	r0, 8011d1c <__lo0bits+0x54>
 8011cee:	0c1b      	lsrs	r3, r3, #16
 8011cf0:	2010      	movs	r0, #16
 8011cf2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011cf6:	bf04      	itt	eq
 8011cf8:	0a1b      	lsreq	r3, r3, #8
 8011cfa:	3008      	addeq	r0, #8
 8011cfc:	071a      	lsls	r2, r3, #28
 8011cfe:	bf04      	itt	eq
 8011d00:	091b      	lsreq	r3, r3, #4
 8011d02:	3004      	addeq	r0, #4
 8011d04:	079a      	lsls	r2, r3, #30
 8011d06:	bf04      	itt	eq
 8011d08:	089b      	lsreq	r3, r3, #2
 8011d0a:	3002      	addeq	r0, #2
 8011d0c:	07da      	lsls	r2, r3, #31
 8011d0e:	d403      	bmi.n	8011d18 <__lo0bits+0x50>
 8011d10:	085b      	lsrs	r3, r3, #1
 8011d12:	f100 0001 	add.w	r0, r0, #1
 8011d16:	d005      	beq.n	8011d24 <__lo0bits+0x5c>
 8011d18:	600b      	str	r3, [r1, #0]
 8011d1a:	4770      	bx	lr
 8011d1c:	4610      	mov	r0, r2
 8011d1e:	e7e8      	b.n	8011cf2 <__lo0bits+0x2a>
 8011d20:	2000      	movs	r0, #0
 8011d22:	4770      	bx	lr
 8011d24:	2020      	movs	r0, #32
 8011d26:	4770      	bx	lr

08011d28 <__i2b>:
 8011d28:	b510      	push	{r4, lr}
 8011d2a:	460c      	mov	r4, r1
 8011d2c:	2101      	movs	r1, #1
 8011d2e:	f7ff feb5 	bl	8011a9c <_Balloc>
 8011d32:	4602      	mov	r2, r0
 8011d34:	b928      	cbnz	r0, 8011d42 <__i2b+0x1a>
 8011d36:	4b05      	ldr	r3, [pc, #20]	; (8011d4c <__i2b+0x24>)
 8011d38:	4805      	ldr	r0, [pc, #20]	; (8011d50 <__i2b+0x28>)
 8011d3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011d3e:	f001 fa67 	bl	8013210 <__assert_func>
 8011d42:	2301      	movs	r3, #1
 8011d44:	6144      	str	r4, [r0, #20]
 8011d46:	6103      	str	r3, [r0, #16]
 8011d48:	bd10      	pop	{r4, pc}
 8011d4a:	bf00      	nop
 8011d4c:	0801496b 	.word	0x0801496b
 8011d50:	08014a5c 	.word	0x08014a5c

08011d54 <__multiply>:
 8011d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d58:	4614      	mov	r4, r2
 8011d5a:	690a      	ldr	r2, [r1, #16]
 8011d5c:	6923      	ldr	r3, [r4, #16]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	bfb8      	it	lt
 8011d62:	460b      	movlt	r3, r1
 8011d64:	460d      	mov	r5, r1
 8011d66:	bfbc      	itt	lt
 8011d68:	4625      	movlt	r5, r4
 8011d6a:	461c      	movlt	r4, r3
 8011d6c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011d70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011d74:	68ab      	ldr	r3, [r5, #8]
 8011d76:	6869      	ldr	r1, [r5, #4]
 8011d78:	eb0a 0709 	add.w	r7, sl, r9
 8011d7c:	42bb      	cmp	r3, r7
 8011d7e:	b085      	sub	sp, #20
 8011d80:	bfb8      	it	lt
 8011d82:	3101      	addlt	r1, #1
 8011d84:	f7ff fe8a 	bl	8011a9c <_Balloc>
 8011d88:	b930      	cbnz	r0, 8011d98 <__multiply+0x44>
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	4b42      	ldr	r3, [pc, #264]	; (8011e98 <__multiply+0x144>)
 8011d8e:	4843      	ldr	r0, [pc, #268]	; (8011e9c <__multiply+0x148>)
 8011d90:	f240 115d 	movw	r1, #349	; 0x15d
 8011d94:	f001 fa3c 	bl	8013210 <__assert_func>
 8011d98:	f100 0614 	add.w	r6, r0, #20
 8011d9c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011da0:	4633      	mov	r3, r6
 8011da2:	2200      	movs	r2, #0
 8011da4:	4543      	cmp	r3, r8
 8011da6:	d31e      	bcc.n	8011de6 <__multiply+0x92>
 8011da8:	f105 0c14 	add.w	ip, r5, #20
 8011dac:	f104 0314 	add.w	r3, r4, #20
 8011db0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011db4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011db8:	9202      	str	r2, [sp, #8]
 8011dba:	ebac 0205 	sub.w	r2, ip, r5
 8011dbe:	3a15      	subs	r2, #21
 8011dc0:	f022 0203 	bic.w	r2, r2, #3
 8011dc4:	3204      	adds	r2, #4
 8011dc6:	f105 0115 	add.w	r1, r5, #21
 8011dca:	458c      	cmp	ip, r1
 8011dcc:	bf38      	it	cc
 8011dce:	2204      	movcc	r2, #4
 8011dd0:	9201      	str	r2, [sp, #4]
 8011dd2:	9a02      	ldr	r2, [sp, #8]
 8011dd4:	9303      	str	r3, [sp, #12]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d808      	bhi.n	8011dec <__multiply+0x98>
 8011dda:	2f00      	cmp	r7, #0
 8011ddc:	dc55      	bgt.n	8011e8a <__multiply+0x136>
 8011dde:	6107      	str	r7, [r0, #16]
 8011de0:	b005      	add	sp, #20
 8011de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011de6:	f843 2b04 	str.w	r2, [r3], #4
 8011dea:	e7db      	b.n	8011da4 <__multiply+0x50>
 8011dec:	f8b3 a000 	ldrh.w	sl, [r3]
 8011df0:	f1ba 0f00 	cmp.w	sl, #0
 8011df4:	d020      	beq.n	8011e38 <__multiply+0xe4>
 8011df6:	f105 0e14 	add.w	lr, r5, #20
 8011dfa:	46b1      	mov	r9, r6
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011e02:	f8d9 b000 	ldr.w	fp, [r9]
 8011e06:	b2a1      	uxth	r1, r4
 8011e08:	fa1f fb8b 	uxth.w	fp, fp
 8011e0c:	fb0a b101 	mla	r1, sl, r1, fp
 8011e10:	4411      	add	r1, r2
 8011e12:	f8d9 2000 	ldr.w	r2, [r9]
 8011e16:	0c24      	lsrs	r4, r4, #16
 8011e18:	0c12      	lsrs	r2, r2, #16
 8011e1a:	fb0a 2404 	mla	r4, sl, r4, r2
 8011e1e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011e22:	b289      	uxth	r1, r1
 8011e24:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011e28:	45f4      	cmp	ip, lr
 8011e2a:	f849 1b04 	str.w	r1, [r9], #4
 8011e2e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011e32:	d8e4      	bhi.n	8011dfe <__multiply+0xaa>
 8011e34:	9901      	ldr	r1, [sp, #4]
 8011e36:	5072      	str	r2, [r6, r1]
 8011e38:	9a03      	ldr	r2, [sp, #12]
 8011e3a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011e3e:	3304      	adds	r3, #4
 8011e40:	f1b9 0f00 	cmp.w	r9, #0
 8011e44:	d01f      	beq.n	8011e86 <__multiply+0x132>
 8011e46:	6834      	ldr	r4, [r6, #0]
 8011e48:	f105 0114 	add.w	r1, r5, #20
 8011e4c:	46b6      	mov	lr, r6
 8011e4e:	f04f 0a00 	mov.w	sl, #0
 8011e52:	880a      	ldrh	r2, [r1, #0]
 8011e54:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011e58:	fb09 b202 	mla	r2, r9, r2, fp
 8011e5c:	4492      	add	sl, r2
 8011e5e:	b2a4      	uxth	r4, r4
 8011e60:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011e64:	f84e 4b04 	str.w	r4, [lr], #4
 8011e68:	f851 4b04 	ldr.w	r4, [r1], #4
 8011e6c:	f8be 2000 	ldrh.w	r2, [lr]
 8011e70:	0c24      	lsrs	r4, r4, #16
 8011e72:	fb09 2404 	mla	r4, r9, r4, r2
 8011e76:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011e7a:	458c      	cmp	ip, r1
 8011e7c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011e80:	d8e7      	bhi.n	8011e52 <__multiply+0xfe>
 8011e82:	9a01      	ldr	r2, [sp, #4]
 8011e84:	50b4      	str	r4, [r6, r2]
 8011e86:	3604      	adds	r6, #4
 8011e88:	e7a3      	b.n	8011dd2 <__multiply+0x7e>
 8011e8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d1a5      	bne.n	8011dde <__multiply+0x8a>
 8011e92:	3f01      	subs	r7, #1
 8011e94:	e7a1      	b.n	8011dda <__multiply+0x86>
 8011e96:	bf00      	nop
 8011e98:	0801496b 	.word	0x0801496b
 8011e9c:	08014a5c 	.word	0x08014a5c

08011ea0 <__pow5mult>:
 8011ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ea4:	4615      	mov	r5, r2
 8011ea6:	f012 0203 	ands.w	r2, r2, #3
 8011eaa:	4606      	mov	r6, r0
 8011eac:	460f      	mov	r7, r1
 8011eae:	d007      	beq.n	8011ec0 <__pow5mult+0x20>
 8011eb0:	4c25      	ldr	r4, [pc, #148]	; (8011f48 <__pow5mult+0xa8>)
 8011eb2:	3a01      	subs	r2, #1
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011eba:	f7ff fe51 	bl	8011b60 <__multadd>
 8011ebe:	4607      	mov	r7, r0
 8011ec0:	10ad      	asrs	r5, r5, #2
 8011ec2:	d03d      	beq.n	8011f40 <__pow5mult+0xa0>
 8011ec4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011ec6:	b97c      	cbnz	r4, 8011ee8 <__pow5mult+0x48>
 8011ec8:	2010      	movs	r0, #16
 8011eca:	f7fc f9c3 	bl	800e254 <malloc>
 8011ece:	4602      	mov	r2, r0
 8011ed0:	6270      	str	r0, [r6, #36]	; 0x24
 8011ed2:	b928      	cbnz	r0, 8011ee0 <__pow5mult+0x40>
 8011ed4:	4b1d      	ldr	r3, [pc, #116]	; (8011f4c <__pow5mult+0xac>)
 8011ed6:	481e      	ldr	r0, [pc, #120]	; (8011f50 <__pow5mult+0xb0>)
 8011ed8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011edc:	f001 f998 	bl	8013210 <__assert_func>
 8011ee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011ee4:	6004      	str	r4, [r0, #0]
 8011ee6:	60c4      	str	r4, [r0, #12]
 8011ee8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011eec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ef0:	b94c      	cbnz	r4, 8011f06 <__pow5mult+0x66>
 8011ef2:	f240 2171 	movw	r1, #625	; 0x271
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	f7ff ff16 	bl	8011d28 <__i2b>
 8011efc:	2300      	movs	r3, #0
 8011efe:	f8c8 0008 	str.w	r0, [r8, #8]
 8011f02:	4604      	mov	r4, r0
 8011f04:	6003      	str	r3, [r0, #0]
 8011f06:	f04f 0900 	mov.w	r9, #0
 8011f0a:	07eb      	lsls	r3, r5, #31
 8011f0c:	d50a      	bpl.n	8011f24 <__pow5mult+0x84>
 8011f0e:	4639      	mov	r1, r7
 8011f10:	4622      	mov	r2, r4
 8011f12:	4630      	mov	r0, r6
 8011f14:	f7ff ff1e 	bl	8011d54 <__multiply>
 8011f18:	4639      	mov	r1, r7
 8011f1a:	4680      	mov	r8, r0
 8011f1c:	4630      	mov	r0, r6
 8011f1e:	f7ff fdfd 	bl	8011b1c <_Bfree>
 8011f22:	4647      	mov	r7, r8
 8011f24:	106d      	asrs	r5, r5, #1
 8011f26:	d00b      	beq.n	8011f40 <__pow5mult+0xa0>
 8011f28:	6820      	ldr	r0, [r4, #0]
 8011f2a:	b938      	cbnz	r0, 8011f3c <__pow5mult+0x9c>
 8011f2c:	4622      	mov	r2, r4
 8011f2e:	4621      	mov	r1, r4
 8011f30:	4630      	mov	r0, r6
 8011f32:	f7ff ff0f 	bl	8011d54 <__multiply>
 8011f36:	6020      	str	r0, [r4, #0]
 8011f38:	f8c0 9000 	str.w	r9, [r0]
 8011f3c:	4604      	mov	r4, r0
 8011f3e:	e7e4      	b.n	8011f0a <__pow5mult+0x6a>
 8011f40:	4638      	mov	r0, r7
 8011f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f46:	bf00      	nop
 8011f48:	08014bb0 	.word	0x08014bb0
 8011f4c:	080148f5 	.word	0x080148f5
 8011f50:	08014a5c 	.word	0x08014a5c

08011f54 <__lshift>:
 8011f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f58:	460c      	mov	r4, r1
 8011f5a:	6849      	ldr	r1, [r1, #4]
 8011f5c:	6923      	ldr	r3, [r4, #16]
 8011f5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011f62:	68a3      	ldr	r3, [r4, #8]
 8011f64:	4607      	mov	r7, r0
 8011f66:	4691      	mov	r9, r2
 8011f68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011f6c:	f108 0601 	add.w	r6, r8, #1
 8011f70:	42b3      	cmp	r3, r6
 8011f72:	db0b      	blt.n	8011f8c <__lshift+0x38>
 8011f74:	4638      	mov	r0, r7
 8011f76:	f7ff fd91 	bl	8011a9c <_Balloc>
 8011f7a:	4605      	mov	r5, r0
 8011f7c:	b948      	cbnz	r0, 8011f92 <__lshift+0x3e>
 8011f7e:	4602      	mov	r2, r0
 8011f80:	4b28      	ldr	r3, [pc, #160]	; (8012024 <__lshift+0xd0>)
 8011f82:	4829      	ldr	r0, [pc, #164]	; (8012028 <__lshift+0xd4>)
 8011f84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011f88:	f001 f942 	bl	8013210 <__assert_func>
 8011f8c:	3101      	adds	r1, #1
 8011f8e:	005b      	lsls	r3, r3, #1
 8011f90:	e7ee      	b.n	8011f70 <__lshift+0x1c>
 8011f92:	2300      	movs	r3, #0
 8011f94:	f100 0114 	add.w	r1, r0, #20
 8011f98:	f100 0210 	add.w	r2, r0, #16
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	4553      	cmp	r3, sl
 8011fa0:	db33      	blt.n	801200a <__lshift+0xb6>
 8011fa2:	6920      	ldr	r0, [r4, #16]
 8011fa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011fa8:	f104 0314 	add.w	r3, r4, #20
 8011fac:	f019 091f 	ands.w	r9, r9, #31
 8011fb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011fb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011fb8:	d02b      	beq.n	8012012 <__lshift+0xbe>
 8011fba:	f1c9 0e20 	rsb	lr, r9, #32
 8011fbe:	468a      	mov	sl, r1
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	6818      	ldr	r0, [r3, #0]
 8011fc4:	fa00 f009 	lsl.w	r0, r0, r9
 8011fc8:	4302      	orrs	r2, r0
 8011fca:	f84a 2b04 	str.w	r2, [sl], #4
 8011fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fd2:	459c      	cmp	ip, r3
 8011fd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8011fd8:	d8f3      	bhi.n	8011fc2 <__lshift+0x6e>
 8011fda:	ebac 0304 	sub.w	r3, ip, r4
 8011fde:	3b15      	subs	r3, #21
 8011fe0:	f023 0303 	bic.w	r3, r3, #3
 8011fe4:	3304      	adds	r3, #4
 8011fe6:	f104 0015 	add.w	r0, r4, #21
 8011fea:	4584      	cmp	ip, r0
 8011fec:	bf38      	it	cc
 8011fee:	2304      	movcc	r3, #4
 8011ff0:	50ca      	str	r2, [r1, r3]
 8011ff2:	b10a      	cbz	r2, 8011ff8 <__lshift+0xa4>
 8011ff4:	f108 0602 	add.w	r6, r8, #2
 8011ff8:	3e01      	subs	r6, #1
 8011ffa:	4638      	mov	r0, r7
 8011ffc:	612e      	str	r6, [r5, #16]
 8011ffe:	4621      	mov	r1, r4
 8012000:	f7ff fd8c 	bl	8011b1c <_Bfree>
 8012004:	4628      	mov	r0, r5
 8012006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801200a:	f842 0f04 	str.w	r0, [r2, #4]!
 801200e:	3301      	adds	r3, #1
 8012010:	e7c5      	b.n	8011f9e <__lshift+0x4a>
 8012012:	3904      	subs	r1, #4
 8012014:	f853 2b04 	ldr.w	r2, [r3], #4
 8012018:	f841 2f04 	str.w	r2, [r1, #4]!
 801201c:	459c      	cmp	ip, r3
 801201e:	d8f9      	bhi.n	8012014 <__lshift+0xc0>
 8012020:	e7ea      	b.n	8011ff8 <__lshift+0xa4>
 8012022:	bf00      	nop
 8012024:	0801496b 	.word	0x0801496b
 8012028:	08014a5c 	.word	0x08014a5c

0801202c <__mcmp>:
 801202c:	b530      	push	{r4, r5, lr}
 801202e:	6902      	ldr	r2, [r0, #16]
 8012030:	690c      	ldr	r4, [r1, #16]
 8012032:	1b12      	subs	r2, r2, r4
 8012034:	d10e      	bne.n	8012054 <__mcmp+0x28>
 8012036:	f100 0314 	add.w	r3, r0, #20
 801203a:	3114      	adds	r1, #20
 801203c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012040:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012044:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012048:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801204c:	42a5      	cmp	r5, r4
 801204e:	d003      	beq.n	8012058 <__mcmp+0x2c>
 8012050:	d305      	bcc.n	801205e <__mcmp+0x32>
 8012052:	2201      	movs	r2, #1
 8012054:	4610      	mov	r0, r2
 8012056:	bd30      	pop	{r4, r5, pc}
 8012058:	4283      	cmp	r3, r0
 801205a:	d3f3      	bcc.n	8012044 <__mcmp+0x18>
 801205c:	e7fa      	b.n	8012054 <__mcmp+0x28>
 801205e:	f04f 32ff 	mov.w	r2, #4294967295
 8012062:	e7f7      	b.n	8012054 <__mcmp+0x28>

08012064 <__mdiff>:
 8012064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012068:	460c      	mov	r4, r1
 801206a:	4606      	mov	r6, r0
 801206c:	4611      	mov	r1, r2
 801206e:	4620      	mov	r0, r4
 8012070:	4617      	mov	r7, r2
 8012072:	f7ff ffdb 	bl	801202c <__mcmp>
 8012076:	1e05      	subs	r5, r0, #0
 8012078:	d110      	bne.n	801209c <__mdiff+0x38>
 801207a:	4629      	mov	r1, r5
 801207c:	4630      	mov	r0, r6
 801207e:	f7ff fd0d 	bl	8011a9c <_Balloc>
 8012082:	b930      	cbnz	r0, 8012092 <__mdiff+0x2e>
 8012084:	4b39      	ldr	r3, [pc, #228]	; (801216c <__mdiff+0x108>)
 8012086:	4602      	mov	r2, r0
 8012088:	f240 2132 	movw	r1, #562	; 0x232
 801208c:	4838      	ldr	r0, [pc, #224]	; (8012170 <__mdiff+0x10c>)
 801208e:	f001 f8bf 	bl	8013210 <__assert_func>
 8012092:	2301      	movs	r3, #1
 8012094:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801209c:	bfa4      	itt	ge
 801209e:	463b      	movge	r3, r7
 80120a0:	4627      	movge	r7, r4
 80120a2:	4630      	mov	r0, r6
 80120a4:	6879      	ldr	r1, [r7, #4]
 80120a6:	bfa6      	itte	ge
 80120a8:	461c      	movge	r4, r3
 80120aa:	2500      	movge	r5, #0
 80120ac:	2501      	movlt	r5, #1
 80120ae:	f7ff fcf5 	bl	8011a9c <_Balloc>
 80120b2:	b920      	cbnz	r0, 80120be <__mdiff+0x5a>
 80120b4:	4b2d      	ldr	r3, [pc, #180]	; (801216c <__mdiff+0x108>)
 80120b6:	4602      	mov	r2, r0
 80120b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80120bc:	e7e6      	b.n	801208c <__mdiff+0x28>
 80120be:	693e      	ldr	r6, [r7, #16]
 80120c0:	60c5      	str	r5, [r0, #12]
 80120c2:	6925      	ldr	r5, [r4, #16]
 80120c4:	f107 0114 	add.w	r1, r7, #20
 80120c8:	f104 0914 	add.w	r9, r4, #20
 80120cc:	f100 0e14 	add.w	lr, r0, #20
 80120d0:	f107 0210 	add.w	r2, r7, #16
 80120d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80120d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80120dc:	46f2      	mov	sl, lr
 80120de:	2700      	movs	r7, #0
 80120e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80120e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80120e8:	fa1f f883 	uxth.w	r8, r3
 80120ec:	fa17 f78b 	uxtah	r7, r7, fp
 80120f0:	0c1b      	lsrs	r3, r3, #16
 80120f2:	eba7 0808 	sub.w	r8, r7, r8
 80120f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80120fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80120fe:	fa1f f888 	uxth.w	r8, r8
 8012102:	141f      	asrs	r7, r3, #16
 8012104:	454d      	cmp	r5, r9
 8012106:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801210a:	f84a 3b04 	str.w	r3, [sl], #4
 801210e:	d8e7      	bhi.n	80120e0 <__mdiff+0x7c>
 8012110:	1b2b      	subs	r3, r5, r4
 8012112:	3b15      	subs	r3, #21
 8012114:	f023 0303 	bic.w	r3, r3, #3
 8012118:	3304      	adds	r3, #4
 801211a:	3415      	adds	r4, #21
 801211c:	42a5      	cmp	r5, r4
 801211e:	bf38      	it	cc
 8012120:	2304      	movcc	r3, #4
 8012122:	4419      	add	r1, r3
 8012124:	4473      	add	r3, lr
 8012126:	469e      	mov	lr, r3
 8012128:	460d      	mov	r5, r1
 801212a:	4565      	cmp	r5, ip
 801212c:	d30e      	bcc.n	801214c <__mdiff+0xe8>
 801212e:	f10c 0203 	add.w	r2, ip, #3
 8012132:	1a52      	subs	r2, r2, r1
 8012134:	f022 0203 	bic.w	r2, r2, #3
 8012138:	3903      	subs	r1, #3
 801213a:	458c      	cmp	ip, r1
 801213c:	bf38      	it	cc
 801213e:	2200      	movcc	r2, #0
 8012140:	441a      	add	r2, r3
 8012142:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012146:	b17b      	cbz	r3, 8012168 <__mdiff+0x104>
 8012148:	6106      	str	r6, [r0, #16]
 801214a:	e7a5      	b.n	8012098 <__mdiff+0x34>
 801214c:	f855 8b04 	ldr.w	r8, [r5], #4
 8012150:	fa17 f488 	uxtah	r4, r7, r8
 8012154:	1422      	asrs	r2, r4, #16
 8012156:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801215a:	b2a4      	uxth	r4, r4
 801215c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012160:	f84e 4b04 	str.w	r4, [lr], #4
 8012164:	1417      	asrs	r7, r2, #16
 8012166:	e7e0      	b.n	801212a <__mdiff+0xc6>
 8012168:	3e01      	subs	r6, #1
 801216a:	e7ea      	b.n	8012142 <__mdiff+0xde>
 801216c:	0801496b 	.word	0x0801496b
 8012170:	08014a5c 	.word	0x08014a5c

08012174 <__ulp>:
 8012174:	b082      	sub	sp, #8
 8012176:	ed8d 0b00 	vstr	d0, [sp]
 801217a:	9b01      	ldr	r3, [sp, #4]
 801217c:	4912      	ldr	r1, [pc, #72]	; (80121c8 <__ulp+0x54>)
 801217e:	4019      	ands	r1, r3
 8012180:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012184:	2900      	cmp	r1, #0
 8012186:	dd05      	ble.n	8012194 <__ulp+0x20>
 8012188:	2200      	movs	r2, #0
 801218a:	460b      	mov	r3, r1
 801218c:	ec43 2b10 	vmov	d0, r2, r3
 8012190:	b002      	add	sp, #8
 8012192:	4770      	bx	lr
 8012194:	4249      	negs	r1, r1
 8012196:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801219a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801219e:	f04f 0200 	mov.w	r2, #0
 80121a2:	f04f 0300 	mov.w	r3, #0
 80121a6:	da04      	bge.n	80121b2 <__ulp+0x3e>
 80121a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80121ac:	fa41 f300 	asr.w	r3, r1, r0
 80121b0:	e7ec      	b.n	801218c <__ulp+0x18>
 80121b2:	f1a0 0114 	sub.w	r1, r0, #20
 80121b6:	291e      	cmp	r1, #30
 80121b8:	bfda      	itte	le
 80121ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80121be:	fa20 f101 	lsrle.w	r1, r0, r1
 80121c2:	2101      	movgt	r1, #1
 80121c4:	460a      	mov	r2, r1
 80121c6:	e7e1      	b.n	801218c <__ulp+0x18>
 80121c8:	7ff00000 	.word	0x7ff00000

080121cc <__b2d>:
 80121cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ce:	6905      	ldr	r5, [r0, #16]
 80121d0:	f100 0714 	add.w	r7, r0, #20
 80121d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80121d8:	1f2e      	subs	r6, r5, #4
 80121da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80121de:	4620      	mov	r0, r4
 80121e0:	f7ff fd52 	bl	8011c88 <__hi0bits>
 80121e4:	f1c0 0320 	rsb	r3, r0, #32
 80121e8:	280a      	cmp	r0, #10
 80121ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012268 <__b2d+0x9c>
 80121ee:	600b      	str	r3, [r1, #0]
 80121f0:	dc14      	bgt.n	801221c <__b2d+0x50>
 80121f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80121f6:	fa24 f10e 	lsr.w	r1, r4, lr
 80121fa:	42b7      	cmp	r7, r6
 80121fc:	ea41 030c 	orr.w	r3, r1, ip
 8012200:	bf34      	ite	cc
 8012202:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012206:	2100      	movcs	r1, #0
 8012208:	3015      	adds	r0, #21
 801220a:	fa04 f000 	lsl.w	r0, r4, r0
 801220e:	fa21 f10e 	lsr.w	r1, r1, lr
 8012212:	ea40 0201 	orr.w	r2, r0, r1
 8012216:	ec43 2b10 	vmov	d0, r2, r3
 801221a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801221c:	42b7      	cmp	r7, r6
 801221e:	bf3a      	itte	cc
 8012220:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012224:	f1a5 0608 	subcc.w	r6, r5, #8
 8012228:	2100      	movcs	r1, #0
 801222a:	380b      	subs	r0, #11
 801222c:	d017      	beq.n	801225e <__b2d+0x92>
 801222e:	f1c0 0c20 	rsb	ip, r0, #32
 8012232:	fa04 f500 	lsl.w	r5, r4, r0
 8012236:	42be      	cmp	r6, r7
 8012238:	fa21 f40c 	lsr.w	r4, r1, ip
 801223c:	ea45 0504 	orr.w	r5, r5, r4
 8012240:	bf8c      	ite	hi
 8012242:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012246:	2400      	movls	r4, #0
 8012248:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801224c:	fa01 f000 	lsl.w	r0, r1, r0
 8012250:	fa24 f40c 	lsr.w	r4, r4, ip
 8012254:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012258:	ea40 0204 	orr.w	r2, r0, r4
 801225c:	e7db      	b.n	8012216 <__b2d+0x4a>
 801225e:	ea44 030c 	orr.w	r3, r4, ip
 8012262:	460a      	mov	r2, r1
 8012264:	e7d7      	b.n	8012216 <__b2d+0x4a>
 8012266:	bf00      	nop
 8012268:	3ff00000 	.word	0x3ff00000

0801226c <__d2b>:
 801226c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012270:	4689      	mov	r9, r1
 8012272:	2101      	movs	r1, #1
 8012274:	ec57 6b10 	vmov	r6, r7, d0
 8012278:	4690      	mov	r8, r2
 801227a:	f7ff fc0f 	bl	8011a9c <_Balloc>
 801227e:	4604      	mov	r4, r0
 8012280:	b930      	cbnz	r0, 8012290 <__d2b+0x24>
 8012282:	4602      	mov	r2, r0
 8012284:	4b25      	ldr	r3, [pc, #148]	; (801231c <__d2b+0xb0>)
 8012286:	4826      	ldr	r0, [pc, #152]	; (8012320 <__d2b+0xb4>)
 8012288:	f240 310a 	movw	r1, #778	; 0x30a
 801228c:	f000 ffc0 	bl	8013210 <__assert_func>
 8012290:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012294:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012298:	bb35      	cbnz	r5, 80122e8 <__d2b+0x7c>
 801229a:	2e00      	cmp	r6, #0
 801229c:	9301      	str	r3, [sp, #4]
 801229e:	d028      	beq.n	80122f2 <__d2b+0x86>
 80122a0:	4668      	mov	r0, sp
 80122a2:	9600      	str	r6, [sp, #0]
 80122a4:	f7ff fd10 	bl	8011cc8 <__lo0bits>
 80122a8:	9900      	ldr	r1, [sp, #0]
 80122aa:	b300      	cbz	r0, 80122ee <__d2b+0x82>
 80122ac:	9a01      	ldr	r2, [sp, #4]
 80122ae:	f1c0 0320 	rsb	r3, r0, #32
 80122b2:	fa02 f303 	lsl.w	r3, r2, r3
 80122b6:	430b      	orrs	r3, r1
 80122b8:	40c2      	lsrs	r2, r0
 80122ba:	6163      	str	r3, [r4, #20]
 80122bc:	9201      	str	r2, [sp, #4]
 80122be:	9b01      	ldr	r3, [sp, #4]
 80122c0:	61a3      	str	r3, [r4, #24]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	bf14      	ite	ne
 80122c6:	2202      	movne	r2, #2
 80122c8:	2201      	moveq	r2, #1
 80122ca:	6122      	str	r2, [r4, #16]
 80122cc:	b1d5      	cbz	r5, 8012304 <__d2b+0x98>
 80122ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80122d2:	4405      	add	r5, r0
 80122d4:	f8c9 5000 	str.w	r5, [r9]
 80122d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80122dc:	f8c8 0000 	str.w	r0, [r8]
 80122e0:	4620      	mov	r0, r4
 80122e2:	b003      	add	sp, #12
 80122e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80122ec:	e7d5      	b.n	801229a <__d2b+0x2e>
 80122ee:	6161      	str	r1, [r4, #20]
 80122f0:	e7e5      	b.n	80122be <__d2b+0x52>
 80122f2:	a801      	add	r0, sp, #4
 80122f4:	f7ff fce8 	bl	8011cc8 <__lo0bits>
 80122f8:	9b01      	ldr	r3, [sp, #4]
 80122fa:	6163      	str	r3, [r4, #20]
 80122fc:	2201      	movs	r2, #1
 80122fe:	6122      	str	r2, [r4, #16]
 8012300:	3020      	adds	r0, #32
 8012302:	e7e3      	b.n	80122cc <__d2b+0x60>
 8012304:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012308:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801230c:	f8c9 0000 	str.w	r0, [r9]
 8012310:	6918      	ldr	r0, [r3, #16]
 8012312:	f7ff fcb9 	bl	8011c88 <__hi0bits>
 8012316:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801231a:	e7df      	b.n	80122dc <__d2b+0x70>
 801231c:	0801496b 	.word	0x0801496b
 8012320:	08014a5c 	.word	0x08014a5c

08012324 <__ratio>:
 8012324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012328:	4688      	mov	r8, r1
 801232a:	4669      	mov	r1, sp
 801232c:	4681      	mov	r9, r0
 801232e:	f7ff ff4d 	bl	80121cc <__b2d>
 8012332:	a901      	add	r1, sp, #4
 8012334:	4640      	mov	r0, r8
 8012336:	ec55 4b10 	vmov	r4, r5, d0
 801233a:	f7ff ff47 	bl	80121cc <__b2d>
 801233e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012342:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012346:	eba3 0c02 	sub.w	ip, r3, r2
 801234a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801234e:	1a9b      	subs	r3, r3, r2
 8012350:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012354:	ec51 0b10 	vmov	r0, r1, d0
 8012358:	2b00      	cmp	r3, #0
 801235a:	bfd6      	itet	le
 801235c:	460a      	movle	r2, r1
 801235e:	462a      	movgt	r2, r5
 8012360:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012364:	468b      	mov	fp, r1
 8012366:	462f      	mov	r7, r5
 8012368:	bfd4      	ite	le
 801236a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801236e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012372:	4620      	mov	r0, r4
 8012374:	ee10 2a10 	vmov	r2, s0
 8012378:	465b      	mov	r3, fp
 801237a:	4639      	mov	r1, r7
 801237c:	f7ee fa86 	bl	800088c <__aeabi_ddiv>
 8012380:	ec41 0b10 	vmov	d0, r0, r1
 8012384:	b003      	add	sp, #12
 8012386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801238a <__copybits>:
 801238a:	3901      	subs	r1, #1
 801238c:	b570      	push	{r4, r5, r6, lr}
 801238e:	1149      	asrs	r1, r1, #5
 8012390:	6914      	ldr	r4, [r2, #16]
 8012392:	3101      	adds	r1, #1
 8012394:	f102 0314 	add.w	r3, r2, #20
 8012398:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801239c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80123a0:	1f05      	subs	r5, r0, #4
 80123a2:	42a3      	cmp	r3, r4
 80123a4:	d30c      	bcc.n	80123c0 <__copybits+0x36>
 80123a6:	1aa3      	subs	r3, r4, r2
 80123a8:	3b11      	subs	r3, #17
 80123aa:	f023 0303 	bic.w	r3, r3, #3
 80123ae:	3211      	adds	r2, #17
 80123b0:	42a2      	cmp	r2, r4
 80123b2:	bf88      	it	hi
 80123b4:	2300      	movhi	r3, #0
 80123b6:	4418      	add	r0, r3
 80123b8:	2300      	movs	r3, #0
 80123ba:	4288      	cmp	r0, r1
 80123bc:	d305      	bcc.n	80123ca <__copybits+0x40>
 80123be:	bd70      	pop	{r4, r5, r6, pc}
 80123c0:	f853 6b04 	ldr.w	r6, [r3], #4
 80123c4:	f845 6f04 	str.w	r6, [r5, #4]!
 80123c8:	e7eb      	b.n	80123a2 <__copybits+0x18>
 80123ca:	f840 3b04 	str.w	r3, [r0], #4
 80123ce:	e7f4      	b.n	80123ba <__copybits+0x30>

080123d0 <__any_on>:
 80123d0:	f100 0214 	add.w	r2, r0, #20
 80123d4:	6900      	ldr	r0, [r0, #16]
 80123d6:	114b      	asrs	r3, r1, #5
 80123d8:	4298      	cmp	r0, r3
 80123da:	b510      	push	{r4, lr}
 80123dc:	db11      	blt.n	8012402 <__any_on+0x32>
 80123de:	dd0a      	ble.n	80123f6 <__any_on+0x26>
 80123e0:	f011 011f 	ands.w	r1, r1, #31
 80123e4:	d007      	beq.n	80123f6 <__any_on+0x26>
 80123e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80123ea:	fa24 f001 	lsr.w	r0, r4, r1
 80123ee:	fa00 f101 	lsl.w	r1, r0, r1
 80123f2:	428c      	cmp	r4, r1
 80123f4:	d10b      	bne.n	801240e <__any_on+0x3e>
 80123f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80123fa:	4293      	cmp	r3, r2
 80123fc:	d803      	bhi.n	8012406 <__any_on+0x36>
 80123fe:	2000      	movs	r0, #0
 8012400:	bd10      	pop	{r4, pc}
 8012402:	4603      	mov	r3, r0
 8012404:	e7f7      	b.n	80123f6 <__any_on+0x26>
 8012406:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801240a:	2900      	cmp	r1, #0
 801240c:	d0f5      	beq.n	80123fa <__any_on+0x2a>
 801240e:	2001      	movs	r0, #1
 8012410:	e7f6      	b.n	8012400 <__any_on+0x30>

08012412 <_calloc_r>:
 8012412:	b513      	push	{r0, r1, r4, lr}
 8012414:	434a      	muls	r2, r1
 8012416:	4611      	mov	r1, r2
 8012418:	9201      	str	r2, [sp, #4]
 801241a:	f7fb ff89 	bl	800e330 <_malloc_r>
 801241e:	4604      	mov	r4, r0
 8012420:	b118      	cbz	r0, 801242a <_calloc_r+0x18>
 8012422:	9a01      	ldr	r2, [sp, #4]
 8012424:	2100      	movs	r1, #0
 8012426:	f7fb ff2b 	bl	800e280 <memset>
 801242a:	4620      	mov	r0, r4
 801242c:	b002      	add	sp, #8
 801242e:	bd10      	pop	{r4, pc}

08012430 <__ssputs_r>:
 8012430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012434:	688e      	ldr	r6, [r1, #8]
 8012436:	429e      	cmp	r6, r3
 8012438:	4682      	mov	sl, r0
 801243a:	460c      	mov	r4, r1
 801243c:	4690      	mov	r8, r2
 801243e:	461f      	mov	r7, r3
 8012440:	d838      	bhi.n	80124b4 <__ssputs_r+0x84>
 8012442:	898a      	ldrh	r2, [r1, #12]
 8012444:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012448:	d032      	beq.n	80124b0 <__ssputs_r+0x80>
 801244a:	6825      	ldr	r5, [r4, #0]
 801244c:	6909      	ldr	r1, [r1, #16]
 801244e:	eba5 0901 	sub.w	r9, r5, r1
 8012452:	6965      	ldr	r5, [r4, #20]
 8012454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012458:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801245c:	3301      	adds	r3, #1
 801245e:	444b      	add	r3, r9
 8012460:	106d      	asrs	r5, r5, #1
 8012462:	429d      	cmp	r5, r3
 8012464:	bf38      	it	cc
 8012466:	461d      	movcc	r5, r3
 8012468:	0553      	lsls	r3, r2, #21
 801246a:	d531      	bpl.n	80124d0 <__ssputs_r+0xa0>
 801246c:	4629      	mov	r1, r5
 801246e:	f7fb ff5f 	bl	800e330 <_malloc_r>
 8012472:	4606      	mov	r6, r0
 8012474:	b950      	cbnz	r0, 801248c <__ssputs_r+0x5c>
 8012476:	230c      	movs	r3, #12
 8012478:	f8ca 3000 	str.w	r3, [sl]
 801247c:	89a3      	ldrh	r3, [r4, #12]
 801247e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012482:	81a3      	strh	r3, [r4, #12]
 8012484:	f04f 30ff 	mov.w	r0, #4294967295
 8012488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801248c:	6921      	ldr	r1, [r4, #16]
 801248e:	464a      	mov	r2, r9
 8012490:	f7fb fee8 	bl	800e264 <memcpy>
 8012494:	89a3      	ldrh	r3, [r4, #12]
 8012496:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801249a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801249e:	81a3      	strh	r3, [r4, #12]
 80124a0:	6126      	str	r6, [r4, #16]
 80124a2:	6165      	str	r5, [r4, #20]
 80124a4:	444e      	add	r6, r9
 80124a6:	eba5 0509 	sub.w	r5, r5, r9
 80124aa:	6026      	str	r6, [r4, #0]
 80124ac:	60a5      	str	r5, [r4, #8]
 80124ae:	463e      	mov	r6, r7
 80124b0:	42be      	cmp	r6, r7
 80124b2:	d900      	bls.n	80124b6 <__ssputs_r+0x86>
 80124b4:	463e      	mov	r6, r7
 80124b6:	4632      	mov	r2, r6
 80124b8:	6820      	ldr	r0, [r4, #0]
 80124ba:	4641      	mov	r1, r8
 80124bc:	f000 fefa 	bl	80132b4 <memmove>
 80124c0:	68a3      	ldr	r3, [r4, #8]
 80124c2:	6822      	ldr	r2, [r4, #0]
 80124c4:	1b9b      	subs	r3, r3, r6
 80124c6:	4432      	add	r2, r6
 80124c8:	60a3      	str	r3, [r4, #8]
 80124ca:	6022      	str	r2, [r4, #0]
 80124cc:	2000      	movs	r0, #0
 80124ce:	e7db      	b.n	8012488 <__ssputs_r+0x58>
 80124d0:	462a      	mov	r2, r5
 80124d2:	f000 ff09 	bl	80132e8 <_realloc_r>
 80124d6:	4606      	mov	r6, r0
 80124d8:	2800      	cmp	r0, #0
 80124da:	d1e1      	bne.n	80124a0 <__ssputs_r+0x70>
 80124dc:	6921      	ldr	r1, [r4, #16]
 80124de:	4650      	mov	r0, sl
 80124e0:	f7fb fed6 	bl	800e290 <_free_r>
 80124e4:	e7c7      	b.n	8012476 <__ssputs_r+0x46>
	...

080124e8 <_svfiprintf_r>:
 80124e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ec:	4698      	mov	r8, r3
 80124ee:	898b      	ldrh	r3, [r1, #12]
 80124f0:	061b      	lsls	r3, r3, #24
 80124f2:	b09d      	sub	sp, #116	; 0x74
 80124f4:	4607      	mov	r7, r0
 80124f6:	460d      	mov	r5, r1
 80124f8:	4614      	mov	r4, r2
 80124fa:	d50e      	bpl.n	801251a <_svfiprintf_r+0x32>
 80124fc:	690b      	ldr	r3, [r1, #16]
 80124fe:	b963      	cbnz	r3, 801251a <_svfiprintf_r+0x32>
 8012500:	2140      	movs	r1, #64	; 0x40
 8012502:	f7fb ff15 	bl	800e330 <_malloc_r>
 8012506:	6028      	str	r0, [r5, #0]
 8012508:	6128      	str	r0, [r5, #16]
 801250a:	b920      	cbnz	r0, 8012516 <_svfiprintf_r+0x2e>
 801250c:	230c      	movs	r3, #12
 801250e:	603b      	str	r3, [r7, #0]
 8012510:	f04f 30ff 	mov.w	r0, #4294967295
 8012514:	e0d1      	b.n	80126ba <_svfiprintf_r+0x1d2>
 8012516:	2340      	movs	r3, #64	; 0x40
 8012518:	616b      	str	r3, [r5, #20]
 801251a:	2300      	movs	r3, #0
 801251c:	9309      	str	r3, [sp, #36]	; 0x24
 801251e:	2320      	movs	r3, #32
 8012520:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012524:	f8cd 800c 	str.w	r8, [sp, #12]
 8012528:	2330      	movs	r3, #48	; 0x30
 801252a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80126d4 <_svfiprintf_r+0x1ec>
 801252e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012532:	f04f 0901 	mov.w	r9, #1
 8012536:	4623      	mov	r3, r4
 8012538:	469a      	mov	sl, r3
 801253a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801253e:	b10a      	cbz	r2, 8012544 <_svfiprintf_r+0x5c>
 8012540:	2a25      	cmp	r2, #37	; 0x25
 8012542:	d1f9      	bne.n	8012538 <_svfiprintf_r+0x50>
 8012544:	ebba 0b04 	subs.w	fp, sl, r4
 8012548:	d00b      	beq.n	8012562 <_svfiprintf_r+0x7a>
 801254a:	465b      	mov	r3, fp
 801254c:	4622      	mov	r2, r4
 801254e:	4629      	mov	r1, r5
 8012550:	4638      	mov	r0, r7
 8012552:	f7ff ff6d 	bl	8012430 <__ssputs_r>
 8012556:	3001      	adds	r0, #1
 8012558:	f000 80aa 	beq.w	80126b0 <_svfiprintf_r+0x1c8>
 801255c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801255e:	445a      	add	r2, fp
 8012560:	9209      	str	r2, [sp, #36]	; 0x24
 8012562:	f89a 3000 	ldrb.w	r3, [sl]
 8012566:	2b00      	cmp	r3, #0
 8012568:	f000 80a2 	beq.w	80126b0 <_svfiprintf_r+0x1c8>
 801256c:	2300      	movs	r3, #0
 801256e:	f04f 32ff 	mov.w	r2, #4294967295
 8012572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012576:	f10a 0a01 	add.w	sl, sl, #1
 801257a:	9304      	str	r3, [sp, #16]
 801257c:	9307      	str	r3, [sp, #28]
 801257e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012582:	931a      	str	r3, [sp, #104]	; 0x68
 8012584:	4654      	mov	r4, sl
 8012586:	2205      	movs	r2, #5
 8012588:	f814 1b01 	ldrb.w	r1, [r4], #1
 801258c:	4851      	ldr	r0, [pc, #324]	; (80126d4 <_svfiprintf_r+0x1ec>)
 801258e:	f7ed fe47 	bl	8000220 <memchr>
 8012592:	9a04      	ldr	r2, [sp, #16]
 8012594:	b9d8      	cbnz	r0, 80125ce <_svfiprintf_r+0xe6>
 8012596:	06d0      	lsls	r0, r2, #27
 8012598:	bf44      	itt	mi
 801259a:	2320      	movmi	r3, #32
 801259c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125a0:	0711      	lsls	r1, r2, #28
 80125a2:	bf44      	itt	mi
 80125a4:	232b      	movmi	r3, #43	; 0x2b
 80125a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125aa:	f89a 3000 	ldrb.w	r3, [sl]
 80125ae:	2b2a      	cmp	r3, #42	; 0x2a
 80125b0:	d015      	beq.n	80125de <_svfiprintf_r+0xf6>
 80125b2:	9a07      	ldr	r2, [sp, #28]
 80125b4:	4654      	mov	r4, sl
 80125b6:	2000      	movs	r0, #0
 80125b8:	f04f 0c0a 	mov.w	ip, #10
 80125bc:	4621      	mov	r1, r4
 80125be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125c2:	3b30      	subs	r3, #48	; 0x30
 80125c4:	2b09      	cmp	r3, #9
 80125c6:	d94e      	bls.n	8012666 <_svfiprintf_r+0x17e>
 80125c8:	b1b0      	cbz	r0, 80125f8 <_svfiprintf_r+0x110>
 80125ca:	9207      	str	r2, [sp, #28]
 80125cc:	e014      	b.n	80125f8 <_svfiprintf_r+0x110>
 80125ce:	eba0 0308 	sub.w	r3, r0, r8
 80125d2:	fa09 f303 	lsl.w	r3, r9, r3
 80125d6:	4313      	orrs	r3, r2
 80125d8:	9304      	str	r3, [sp, #16]
 80125da:	46a2      	mov	sl, r4
 80125dc:	e7d2      	b.n	8012584 <_svfiprintf_r+0x9c>
 80125de:	9b03      	ldr	r3, [sp, #12]
 80125e0:	1d19      	adds	r1, r3, #4
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	9103      	str	r1, [sp, #12]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	bfbb      	ittet	lt
 80125ea:	425b      	neglt	r3, r3
 80125ec:	f042 0202 	orrlt.w	r2, r2, #2
 80125f0:	9307      	strge	r3, [sp, #28]
 80125f2:	9307      	strlt	r3, [sp, #28]
 80125f4:	bfb8      	it	lt
 80125f6:	9204      	strlt	r2, [sp, #16]
 80125f8:	7823      	ldrb	r3, [r4, #0]
 80125fa:	2b2e      	cmp	r3, #46	; 0x2e
 80125fc:	d10c      	bne.n	8012618 <_svfiprintf_r+0x130>
 80125fe:	7863      	ldrb	r3, [r4, #1]
 8012600:	2b2a      	cmp	r3, #42	; 0x2a
 8012602:	d135      	bne.n	8012670 <_svfiprintf_r+0x188>
 8012604:	9b03      	ldr	r3, [sp, #12]
 8012606:	1d1a      	adds	r2, r3, #4
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	9203      	str	r2, [sp, #12]
 801260c:	2b00      	cmp	r3, #0
 801260e:	bfb8      	it	lt
 8012610:	f04f 33ff 	movlt.w	r3, #4294967295
 8012614:	3402      	adds	r4, #2
 8012616:	9305      	str	r3, [sp, #20]
 8012618:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80126e4 <_svfiprintf_r+0x1fc>
 801261c:	7821      	ldrb	r1, [r4, #0]
 801261e:	2203      	movs	r2, #3
 8012620:	4650      	mov	r0, sl
 8012622:	f7ed fdfd 	bl	8000220 <memchr>
 8012626:	b140      	cbz	r0, 801263a <_svfiprintf_r+0x152>
 8012628:	2340      	movs	r3, #64	; 0x40
 801262a:	eba0 000a 	sub.w	r0, r0, sl
 801262e:	fa03 f000 	lsl.w	r0, r3, r0
 8012632:	9b04      	ldr	r3, [sp, #16]
 8012634:	4303      	orrs	r3, r0
 8012636:	3401      	adds	r4, #1
 8012638:	9304      	str	r3, [sp, #16]
 801263a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801263e:	4826      	ldr	r0, [pc, #152]	; (80126d8 <_svfiprintf_r+0x1f0>)
 8012640:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012644:	2206      	movs	r2, #6
 8012646:	f7ed fdeb 	bl	8000220 <memchr>
 801264a:	2800      	cmp	r0, #0
 801264c:	d038      	beq.n	80126c0 <_svfiprintf_r+0x1d8>
 801264e:	4b23      	ldr	r3, [pc, #140]	; (80126dc <_svfiprintf_r+0x1f4>)
 8012650:	bb1b      	cbnz	r3, 801269a <_svfiprintf_r+0x1b2>
 8012652:	9b03      	ldr	r3, [sp, #12]
 8012654:	3307      	adds	r3, #7
 8012656:	f023 0307 	bic.w	r3, r3, #7
 801265a:	3308      	adds	r3, #8
 801265c:	9303      	str	r3, [sp, #12]
 801265e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012660:	4433      	add	r3, r6
 8012662:	9309      	str	r3, [sp, #36]	; 0x24
 8012664:	e767      	b.n	8012536 <_svfiprintf_r+0x4e>
 8012666:	fb0c 3202 	mla	r2, ip, r2, r3
 801266a:	460c      	mov	r4, r1
 801266c:	2001      	movs	r0, #1
 801266e:	e7a5      	b.n	80125bc <_svfiprintf_r+0xd4>
 8012670:	2300      	movs	r3, #0
 8012672:	3401      	adds	r4, #1
 8012674:	9305      	str	r3, [sp, #20]
 8012676:	4619      	mov	r1, r3
 8012678:	f04f 0c0a 	mov.w	ip, #10
 801267c:	4620      	mov	r0, r4
 801267e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012682:	3a30      	subs	r2, #48	; 0x30
 8012684:	2a09      	cmp	r2, #9
 8012686:	d903      	bls.n	8012690 <_svfiprintf_r+0x1a8>
 8012688:	2b00      	cmp	r3, #0
 801268a:	d0c5      	beq.n	8012618 <_svfiprintf_r+0x130>
 801268c:	9105      	str	r1, [sp, #20]
 801268e:	e7c3      	b.n	8012618 <_svfiprintf_r+0x130>
 8012690:	fb0c 2101 	mla	r1, ip, r1, r2
 8012694:	4604      	mov	r4, r0
 8012696:	2301      	movs	r3, #1
 8012698:	e7f0      	b.n	801267c <_svfiprintf_r+0x194>
 801269a:	ab03      	add	r3, sp, #12
 801269c:	9300      	str	r3, [sp, #0]
 801269e:	462a      	mov	r2, r5
 80126a0:	4b0f      	ldr	r3, [pc, #60]	; (80126e0 <_svfiprintf_r+0x1f8>)
 80126a2:	a904      	add	r1, sp, #16
 80126a4:	4638      	mov	r0, r7
 80126a6:	f7fb ff3d 	bl	800e524 <_printf_float>
 80126aa:	1c42      	adds	r2, r0, #1
 80126ac:	4606      	mov	r6, r0
 80126ae:	d1d6      	bne.n	801265e <_svfiprintf_r+0x176>
 80126b0:	89ab      	ldrh	r3, [r5, #12]
 80126b2:	065b      	lsls	r3, r3, #25
 80126b4:	f53f af2c 	bmi.w	8012510 <_svfiprintf_r+0x28>
 80126b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80126ba:	b01d      	add	sp, #116	; 0x74
 80126bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126c0:	ab03      	add	r3, sp, #12
 80126c2:	9300      	str	r3, [sp, #0]
 80126c4:	462a      	mov	r2, r5
 80126c6:	4b06      	ldr	r3, [pc, #24]	; (80126e0 <_svfiprintf_r+0x1f8>)
 80126c8:	a904      	add	r1, sp, #16
 80126ca:	4638      	mov	r0, r7
 80126cc:	f7fc f9ce 	bl	800ea6c <_printf_i>
 80126d0:	e7eb      	b.n	80126aa <_svfiprintf_r+0x1c2>
 80126d2:	bf00      	nop
 80126d4:	08014bbc 	.word	0x08014bbc
 80126d8:	08014bc6 	.word	0x08014bc6
 80126dc:	0800e525 	.word	0x0800e525
 80126e0:	08012431 	.word	0x08012431
 80126e4:	08014bc2 	.word	0x08014bc2

080126e8 <_sungetc_r>:
 80126e8:	b538      	push	{r3, r4, r5, lr}
 80126ea:	1c4b      	adds	r3, r1, #1
 80126ec:	4614      	mov	r4, r2
 80126ee:	d103      	bne.n	80126f8 <_sungetc_r+0x10>
 80126f0:	f04f 35ff 	mov.w	r5, #4294967295
 80126f4:	4628      	mov	r0, r5
 80126f6:	bd38      	pop	{r3, r4, r5, pc}
 80126f8:	8993      	ldrh	r3, [r2, #12]
 80126fa:	f023 0320 	bic.w	r3, r3, #32
 80126fe:	8193      	strh	r3, [r2, #12]
 8012700:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012702:	6852      	ldr	r2, [r2, #4]
 8012704:	b2cd      	uxtb	r5, r1
 8012706:	b18b      	cbz	r3, 801272c <_sungetc_r+0x44>
 8012708:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801270a:	4293      	cmp	r3, r2
 801270c:	dd08      	ble.n	8012720 <_sungetc_r+0x38>
 801270e:	6823      	ldr	r3, [r4, #0]
 8012710:	1e5a      	subs	r2, r3, #1
 8012712:	6022      	str	r2, [r4, #0]
 8012714:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012718:	6863      	ldr	r3, [r4, #4]
 801271a:	3301      	adds	r3, #1
 801271c:	6063      	str	r3, [r4, #4]
 801271e:	e7e9      	b.n	80126f4 <_sungetc_r+0xc>
 8012720:	4621      	mov	r1, r4
 8012722:	f000 fd2d 	bl	8013180 <__submore>
 8012726:	2800      	cmp	r0, #0
 8012728:	d0f1      	beq.n	801270e <_sungetc_r+0x26>
 801272a:	e7e1      	b.n	80126f0 <_sungetc_r+0x8>
 801272c:	6921      	ldr	r1, [r4, #16]
 801272e:	6823      	ldr	r3, [r4, #0]
 8012730:	b151      	cbz	r1, 8012748 <_sungetc_r+0x60>
 8012732:	4299      	cmp	r1, r3
 8012734:	d208      	bcs.n	8012748 <_sungetc_r+0x60>
 8012736:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801273a:	42a9      	cmp	r1, r5
 801273c:	d104      	bne.n	8012748 <_sungetc_r+0x60>
 801273e:	3b01      	subs	r3, #1
 8012740:	3201      	adds	r2, #1
 8012742:	6023      	str	r3, [r4, #0]
 8012744:	6062      	str	r2, [r4, #4]
 8012746:	e7d5      	b.n	80126f4 <_sungetc_r+0xc>
 8012748:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801274c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012750:	6363      	str	r3, [r4, #52]	; 0x34
 8012752:	2303      	movs	r3, #3
 8012754:	63a3      	str	r3, [r4, #56]	; 0x38
 8012756:	4623      	mov	r3, r4
 8012758:	f803 5f46 	strb.w	r5, [r3, #70]!
 801275c:	6023      	str	r3, [r4, #0]
 801275e:	2301      	movs	r3, #1
 8012760:	e7dc      	b.n	801271c <_sungetc_r+0x34>

08012762 <__ssrefill_r>:
 8012762:	b510      	push	{r4, lr}
 8012764:	460c      	mov	r4, r1
 8012766:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012768:	b169      	cbz	r1, 8012786 <__ssrefill_r+0x24>
 801276a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801276e:	4299      	cmp	r1, r3
 8012770:	d001      	beq.n	8012776 <__ssrefill_r+0x14>
 8012772:	f7fb fd8d 	bl	800e290 <_free_r>
 8012776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012778:	6063      	str	r3, [r4, #4]
 801277a:	2000      	movs	r0, #0
 801277c:	6360      	str	r0, [r4, #52]	; 0x34
 801277e:	b113      	cbz	r3, 8012786 <__ssrefill_r+0x24>
 8012780:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012782:	6023      	str	r3, [r4, #0]
 8012784:	bd10      	pop	{r4, pc}
 8012786:	6923      	ldr	r3, [r4, #16]
 8012788:	6023      	str	r3, [r4, #0]
 801278a:	2300      	movs	r3, #0
 801278c:	6063      	str	r3, [r4, #4]
 801278e:	89a3      	ldrh	r3, [r4, #12]
 8012790:	f043 0320 	orr.w	r3, r3, #32
 8012794:	81a3      	strh	r3, [r4, #12]
 8012796:	f04f 30ff 	mov.w	r0, #4294967295
 801279a:	e7f3      	b.n	8012784 <__ssrefill_r+0x22>

0801279c <__ssvfiscanf_r>:
 801279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a0:	460c      	mov	r4, r1
 80127a2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80127a6:	2100      	movs	r1, #0
 80127a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80127ac:	49b2      	ldr	r1, [pc, #712]	; (8012a78 <__ssvfiscanf_r+0x2dc>)
 80127ae:	91a0      	str	r1, [sp, #640]	; 0x280
 80127b0:	f10d 0804 	add.w	r8, sp, #4
 80127b4:	49b1      	ldr	r1, [pc, #708]	; (8012a7c <__ssvfiscanf_r+0x2e0>)
 80127b6:	4fb2      	ldr	r7, [pc, #712]	; (8012a80 <__ssvfiscanf_r+0x2e4>)
 80127b8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8012a84 <__ssvfiscanf_r+0x2e8>
 80127bc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80127c0:	4606      	mov	r6, r0
 80127c2:	91a1      	str	r1, [sp, #644]	; 0x284
 80127c4:	9300      	str	r3, [sp, #0]
 80127c6:	f892 a000 	ldrb.w	sl, [r2]
 80127ca:	f1ba 0f00 	cmp.w	sl, #0
 80127ce:	f000 8151 	beq.w	8012a74 <__ssvfiscanf_r+0x2d8>
 80127d2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80127d6:	f013 0308 	ands.w	r3, r3, #8
 80127da:	f102 0501 	add.w	r5, r2, #1
 80127de:	d019      	beq.n	8012814 <__ssvfiscanf_r+0x78>
 80127e0:	6863      	ldr	r3, [r4, #4]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	dd0f      	ble.n	8012806 <__ssvfiscanf_r+0x6a>
 80127e6:	6823      	ldr	r3, [r4, #0]
 80127e8:	781a      	ldrb	r2, [r3, #0]
 80127ea:	5cba      	ldrb	r2, [r7, r2]
 80127ec:	0712      	lsls	r2, r2, #28
 80127ee:	d401      	bmi.n	80127f4 <__ssvfiscanf_r+0x58>
 80127f0:	462a      	mov	r2, r5
 80127f2:	e7e8      	b.n	80127c6 <__ssvfiscanf_r+0x2a>
 80127f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80127f6:	3201      	adds	r2, #1
 80127f8:	9245      	str	r2, [sp, #276]	; 0x114
 80127fa:	6862      	ldr	r2, [r4, #4]
 80127fc:	3301      	adds	r3, #1
 80127fe:	3a01      	subs	r2, #1
 8012800:	6062      	str	r2, [r4, #4]
 8012802:	6023      	str	r3, [r4, #0]
 8012804:	e7ec      	b.n	80127e0 <__ssvfiscanf_r+0x44>
 8012806:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012808:	4621      	mov	r1, r4
 801280a:	4630      	mov	r0, r6
 801280c:	4798      	blx	r3
 801280e:	2800      	cmp	r0, #0
 8012810:	d0e9      	beq.n	80127e6 <__ssvfiscanf_r+0x4a>
 8012812:	e7ed      	b.n	80127f0 <__ssvfiscanf_r+0x54>
 8012814:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8012818:	f040 8083 	bne.w	8012922 <__ssvfiscanf_r+0x186>
 801281c:	9341      	str	r3, [sp, #260]	; 0x104
 801281e:	9343      	str	r3, [sp, #268]	; 0x10c
 8012820:	7853      	ldrb	r3, [r2, #1]
 8012822:	2b2a      	cmp	r3, #42	; 0x2a
 8012824:	bf02      	ittt	eq
 8012826:	2310      	moveq	r3, #16
 8012828:	1c95      	addeq	r5, r2, #2
 801282a:	9341      	streq	r3, [sp, #260]	; 0x104
 801282c:	220a      	movs	r2, #10
 801282e:	46ab      	mov	fp, r5
 8012830:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8012834:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012838:	2b09      	cmp	r3, #9
 801283a:	d91d      	bls.n	8012878 <__ssvfiscanf_r+0xdc>
 801283c:	4891      	ldr	r0, [pc, #580]	; (8012a84 <__ssvfiscanf_r+0x2e8>)
 801283e:	2203      	movs	r2, #3
 8012840:	f7ed fcee 	bl	8000220 <memchr>
 8012844:	b140      	cbz	r0, 8012858 <__ssvfiscanf_r+0xbc>
 8012846:	2301      	movs	r3, #1
 8012848:	eba0 0009 	sub.w	r0, r0, r9
 801284c:	fa03 f000 	lsl.w	r0, r3, r0
 8012850:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012852:	4318      	orrs	r0, r3
 8012854:	9041      	str	r0, [sp, #260]	; 0x104
 8012856:	465d      	mov	r5, fp
 8012858:	f815 3b01 	ldrb.w	r3, [r5], #1
 801285c:	2b78      	cmp	r3, #120	; 0x78
 801285e:	d806      	bhi.n	801286e <__ssvfiscanf_r+0xd2>
 8012860:	2b57      	cmp	r3, #87	; 0x57
 8012862:	d810      	bhi.n	8012886 <__ssvfiscanf_r+0xea>
 8012864:	2b25      	cmp	r3, #37	; 0x25
 8012866:	d05c      	beq.n	8012922 <__ssvfiscanf_r+0x186>
 8012868:	d856      	bhi.n	8012918 <__ssvfiscanf_r+0x17c>
 801286a:	2b00      	cmp	r3, #0
 801286c:	d074      	beq.n	8012958 <__ssvfiscanf_r+0x1bc>
 801286e:	2303      	movs	r3, #3
 8012870:	9347      	str	r3, [sp, #284]	; 0x11c
 8012872:	230a      	movs	r3, #10
 8012874:	9342      	str	r3, [sp, #264]	; 0x108
 8012876:	e081      	b.n	801297c <__ssvfiscanf_r+0x1e0>
 8012878:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801287a:	fb02 1303 	mla	r3, r2, r3, r1
 801287e:	3b30      	subs	r3, #48	; 0x30
 8012880:	9343      	str	r3, [sp, #268]	; 0x10c
 8012882:	465d      	mov	r5, fp
 8012884:	e7d3      	b.n	801282e <__ssvfiscanf_r+0x92>
 8012886:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801288a:	2a20      	cmp	r2, #32
 801288c:	d8ef      	bhi.n	801286e <__ssvfiscanf_r+0xd2>
 801288e:	a101      	add	r1, pc, #4	; (adr r1, 8012894 <__ssvfiscanf_r+0xf8>)
 8012890:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012894:	08012967 	.word	0x08012967
 8012898:	0801286f 	.word	0x0801286f
 801289c:	0801286f 	.word	0x0801286f
 80128a0:	080129c5 	.word	0x080129c5
 80128a4:	0801286f 	.word	0x0801286f
 80128a8:	0801286f 	.word	0x0801286f
 80128ac:	0801286f 	.word	0x0801286f
 80128b0:	0801286f 	.word	0x0801286f
 80128b4:	0801286f 	.word	0x0801286f
 80128b8:	0801286f 	.word	0x0801286f
 80128bc:	0801286f 	.word	0x0801286f
 80128c0:	080129db 	.word	0x080129db
 80128c4:	080129b1 	.word	0x080129b1
 80128c8:	0801291f 	.word	0x0801291f
 80128cc:	0801291f 	.word	0x0801291f
 80128d0:	0801291f 	.word	0x0801291f
 80128d4:	0801286f 	.word	0x0801286f
 80128d8:	080129b5 	.word	0x080129b5
 80128dc:	0801286f 	.word	0x0801286f
 80128e0:	0801286f 	.word	0x0801286f
 80128e4:	0801286f 	.word	0x0801286f
 80128e8:	0801286f 	.word	0x0801286f
 80128ec:	080129eb 	.word	0x080129eb
 80128f0:	080129bd 	.word	0x080129bd
 80128f4:	0801295f 	.word	0x0801295f
 80128f8:	0801286f 	.word	0x0801286f
 80128fc:	0801286f 	.word	0x0801286f
 8012900:	080129e7 	.word	0x080129e7
 8012904:	0801286f 	.word	0x0801286f
 8012908:	080129b1 	.word	0x080129b1
 801290c:	0801286f 	.word	0x0801286f
 8012910:	0801286f 	.word	0x0801286f
 8012914:	08012967 	.word	0x08012967
 8012918:	3b45      	subs	r3, #69	; 0x45
 801291a:	2b02      	cmp	r3, #2
 801291c:	d8a7      	bhi.n	801286e <__ssvfiscanf_r+0xd2>
 801291e:	2305      	movs	r3, #5
 8012920:	e02b      	b.n	801297a <__ssvfiscanf_r+0x1de>
 8012922:	6863      	ldr	r3, [r4, #4]
 8012924:	2b00      	cmp	r3, #0
 8012926:	dd0d      	ble.n	8012944 <__ssvfiscanf_r+0x1a8>
 8012928:	6823      	ldr	r3, [r4, #0]
 801292a:	781a      	ldrb	r2, [r3, #0]
 801292c:	4552      	cmp	r2, sl
 801292e:	f040 80a1 	bne.w	8012a74 <__ssvfiscanf_r+0x2d8>
 8012932:	3301      	adds	r3, #1
 8012934:	6862      	ldr	r2, [r4, #4]
 8012936:	6023      	str	r3, [r4, #0]
 8012938:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801293a:	3a01      	subs	r2, #1
 801293c:	3301      	adds	r3, #1
 801293e:	6062      	str	r2, [r4, #4]
 8012940:	9345      	str	r3, [sp, #276]	; 0x114
 8012942:	e755      	b.n	80127f0 <__ssvfiscanf_r+0x54>
 8012944:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012946:	4621      	mov	r1, r4
 8012948:	4630      	mov	r0, r6
 801294a:	4798      	blx	r3
 801294c:	2800      	cmp	r0, #0
 801294e:	d0eb      	beq.n	8012928 <__ssvfiscanf_r+0x18c>
 8012950:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012952:	2800      	cmp	r0, #0
 8012954:	f040 8084 	bne.w	8012a60 <__ssvfiscanf_r+0x2c4>
 8012958:	f04f 30ff 	mov.w	r0, #4294967295
 801295c:	e086      	b.n	8012a6c <__ssvfiscanf_r+0x2d0>
 801295e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012960:	f042 0220 	orr.w	r2, r2, #32
 8012964:	9241      	str	r2, [sp, #260]	; 0x104
 8012966:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801296c:	9241      	str	r2, [sp, #260]	; 0x104
 801296e:	2210      	movs	r2, #16
 8012970:	2b6f      	cmp	r3, #111	; 0x6f
 8012972:	9242      	str	r2, [sp, #264]	; 0x108
 8012974:	bf34      	ite	cc
 8012976:	2303      	movcc	r3, #3
 8012978:	2304      	movcs	r3, #4
 801297a:	9347      	str	r3, [sp, #284]	; 0x11c
 801297c:	6863      	ldr	r3, [r4, #4]
 801297e:	2b00      	cmp	r3, #0
 8012980:	dd41      	ble.n	8012a06 <__ssvfiscanf_r+0x26a>
 8012982:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012984:	0659      	lsls	r1, r3, #25
 8012986:	d404      	bmi.n	8012992 <__ssvfiscanf_r+0x1f6>
 8012988:	6823      	ldr	r3, [r4, #0]
 801298a:	781a      	ldrb	r2, [r3, #0]
 801298c:	5cba      	ldrb	r2, [r7, r2]
 801298e:	0712      	lsls	r2, r2, #28
 8012990:	d440      	bmi.n	8012a14 <__ssvfiscanf_r+0x278>
 8012992:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012994:	2b02      	cmp	r3, #2
 8012996:	dc4f      	bgt.n	8012a38 <__ssvfiscanf_r+0x29c>
 8012998:	466b      	mov	r3, sp
 801299a:	4622      	mov	r2, r4
 801299c:	a941      	add	r1, sp, #260	; 0x104
 801299e:	4630      	mov	r0, r6
 80129a0:	f000 f9ce 	bl	8012d40 <_scanf_chars>
 80129a4:	2801      	cmp	r0, #1
 80129a6:	d065      	beq.n	8012a74 <__ssvfiscanf_r+0x2d8>
 80129a8:	2802      	cmp	r0, #2
 80129aa:	f47f af21 	bne.w	80127f0 <__ssvfiscanf_r+0x54>
 80129ae:	e7cf      	b.n	8012950 <__ssvfiscanf_r+0x1b4>
 80129b0:	220a      	movs	r2, #10
 80129b2:	e7dd      	b.n	8012970 <__ssvfiscanf_r+0x1d4>
 80129b4:	2300      	movs	r3, #0
 80129b6:	9342      	str	r3, [sp, #264]	; 0x108
 80129b8:	2303      	movs	r3, #3
 80129ba:	e7de      	b.n	801297a <__ssvfiscanf_r+0x1de>
 80129bc:	2308      	movs	r3, #8
 80129be:	9342      	str	r3, [sp, #264]	; 0x108
 80129c0:	2304      	movs	r3, #4
 80129c2:	e7da      	b.n	801297a <__ssvfiscanf_r+0x1de>
 80129c4:	4629      	mov	r1, r5
 80129c6:	4640      	mov	r0, r8
 80129c8:	f000 fb22 	bl	8013010 <__sccl>
 80129cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80129ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129d2:	9341      	str	r3, [sp, #260]	; 0x104
 80129d4:	4605      	mov	r5, r0
 80129d6:	2301      	movs	r3, #1
 80129d8:	e7cf      	b.n	801297a <__ssvfiscanf_r+0x1de>
 80129da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80129dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129e0:	9341      	str	r3, [sp, #260]	; 0x104
 80129e2:	2300      	movs	r3, #0
 80129e4:	e7c9      	b.n	801297a <__ssvfiscanf_r+0x1de>
 80129e6:	2302      	movs	r3, #2
 80129e8:	e7c7      	b.n	801297a <__ssvfiscanf_r+0x1de>
 80129ea:	9841      	ldr	r0, [sp, #260]	; 0x104
 80129ec:	06c3      	lsls	r3, r0, #27
 80129ee:	f53f aeff 	bmi.w	80127f0 <__ssvfiscanf_r+0x54>
 80129f2:	9b00      	ldr	r3, [sp, #0]
 80129f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80129f6:	1d19      	adds	r1, r3, #4
 80129f8:	9100      	str	r1, [sp, #0]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	07c0      	lsls	r0, r0, #31
 80129fe:	bf4c      	ite	mi
 8012a00:	801a      	strhmi	r2, [r3, #0]
 8012a02:	601a      	strpl	r2, [r3, #0]
 8012a04:	e6f4      	b.n	80127f0 <__ssvfiscanf_r+0x54>
 8012a06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012a08:	4621      	mov	r1, r4
 8012a0a:	4630      	mov	r0, r6
 8012a0c:	4798      	blx	r3
 8012a0e:	2800      	cmp	r0, #0
 8012a10:	d0b7      	beq.n	8012982 <__ssvfiscanf_r+0x1e6>
 8012a12:	e79d      	b.n	8012950 <__ssvfiscanf_r+0x1b4>
 8012a14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012a16:	3201      	adds	r2, #1
 8012a18:	9245      	str	r2, [sp, #276]	; 0x114
 8012a1a:	6862      	ldr	r2, [r4, #4]
 8012a1c:	3a01      	subs	r2, #1
 8012a1e:	2a00      	cmp	r2, #0
 8012a20:	6062      	str	r2, [r4, #4]
 8012a22:	dd02      	ble.n	8012a2a <__ssvfiscanf_r+0x28e>
 8012a24:	3301      	adds	r3, #1
 8012a26:	6023      	str	r3, [r4, #0]
 8012a28:	e7ae      	b.n	8012988 <__ssvfiscanf_r+0x1ec>
 8012a2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012a2c:	4621      	mov	r1, r4
 8012a2e:	4630      	mov	r0, r6
 8012a30:	4798      	blx	r3
 8012a32:	2800      	cmp	r0, #0
 8012a34:	d0a8      	beq.n	8012988 <__ssvfiscanf_r+0x1ec>
 8012a36:	e78b      	b.n	8012950 <__ssvfiscanf_r+0x1b4>
 8012a38:	2b04      	cmp	r3, #4
 8012a3a:	dc06      	bgt.n	8012a4a <__ssvfiscanf_r+0x2ae>
 8012a3c:	466b      	mov	r3, sp
 8012a3e:	4622      	mov	r2, r4
 8012a40:	a941      	add	r1, sp, #260	; 0x104
 8012a42:	4630      	mov	r0, r6
 8012a44:	f000 f9d4 	bl	8012df0 <_scanf_i>
 8012a48:	e7ac      	b.n	80129a4 <__ssvfiscanf_r+0x208>
 8012a4a:	4b0f      	ldr	r3, [pc, #60]	; (8012a88 <__ssvfiscanf_r+0x2ec>)
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	f43f aecf 	beq.w	80127f0 <__ssvfiscanf_r+0x54>
 8012a52:	466b      	mov	r3, sp
 8012a54:	4622      	mov	r2, r4
 8012a56:	a941      	add	r1, sp, #260	; 0x104
 8012a58:	4630      	mov	r0, r6
 8012a5a:	f7fc f92d 	bl	800ecb8 <_scanf_float>
 8012a5e:	e7a1      	b.n	80129a4 <__ssvfiscanf_r+0x208>
 8012a60:	89a3      	ldrh	r3, [r4, #12]
 8012a62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012a66:	bf18      	it	ne
 8012a68:	f04f 30ff 	movne.w	r0, #4294967295
 8012a6c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8012a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a74:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012a76:	e7f9      	b.n	8012a6c <__ssvfiscanf_r+0x2d0>
 8012a78:	080126e9 	.word	0x080126e9
 8012a7c:	08012763 	.word	0x08012763
 8012a80:	08014759 	.word	0x08014759
 8012a84:	08014bc2 	.word	0x08014bc2
 8012a88:	0800ecb9 	.word	0x0800ecb9

08012a8c <__sfputc_r>:
 8012a8c:	6893      	ldr	r3, [r2, #8]
 8012a8e:	3b01      	subs	r3, #1
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	b410      	push	{r4}
 8012a94:	6093      	str	r3, [r2, #8]
 8012a96:	da08      	bge.n	8012aaa <__sfputc_r+0x1e>
 8012a98:	6994      	ldr	r4, [r2, #24]
 8012a9a:	42a3      	cmp	r3, r4
 8012a9c:	db01      	blt.n	8012aa2 <__sfputc_r+0x16>
 8012a9e:	290a      	cmp	r1, #10
 8012aa0:	d103      	bne.n	8012aaa <__sfputc_r+0x1e>
 8012aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012aa6:	f7fd badd 	b.w	8010064 <__swbuf_r>
 8012aaa:	6813      	ldr	r3, [r2, #0]
 8012aac:	1c58      	adds	r0, r3, #1
 8012aae:	6010      	str	r0, [r2, #0]
 8012ab0:	7019      	strb	r1, [r3, #0]
 8012ab2:	4608      	mov	r0, r1
 8012ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ab8:	4770      	bx	lr

08012aba <__sfputs_r>:
 8012aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012abc:	4606      	mov	r6, r0
 8012abe:	460f      	mov	r7, r1
 8012ac0:	4614      	mov	r4, r2
 8012ac2:	18d5      	adds	r5, r2, r3
 8012ac4:	42ac      	cmp	r4, r5
 8012ac6:	d101      	bne.n	8012acc <__sfputs_r+0x12>
 8012ac8:	2000      	movs	r0, #0
 8012aca:	e007      	b.n	8012adc <__sfputs_r+0x22>
 8012acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ad0:	463a      	mov	r2, r7
 8012ad2:	4630      	mov	r0, r6
 8012ad4:	f7ff ffda 	bl	8012a8c <__sfputc_r>
 8012ad8:	1c43      	adds	r3, r0, #1
 8012ada:	d1f3      	bne.n	8012ac4 <__sfputs_r+0xa>
 8012adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ae0 <_vfiprintf_r>:
 8012ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ae4:	460d      	mov	r5, r1
 8012ae6:	b09d      	sub	sp, #116	; 0x74
 8012ae8:	4614      	mov	r4, r2
 8012aea:	4698      	mov	r8, r3
 8012aec:	4606      	mov	r6, r0
 8012aee:	b118      	cbz	r0, 8012af8 <_vfiprintf_r+0x18>
 8012af0:	6983      	ldr	r3, [r0, #24]
 8012af2:	b90b      	cbnz	r3, 8012af8 <_vfiprintf_r+0x18>
 8012af4:	f7fe fb2a 	bl	801114c <__sinit>
 8012af8:	4b89      	ldr	r3, [pc, #548]	; (8012d20 <_vfiprintf_r+0x240>)
 8012afa:	429d      	cmp	r5, r3
 8012afc:	d11b      	bne.n	8012b36 <_vfiprintf_r+0x56>
 8012afe:	6875      	ldr	r5, [r6, #4]
 8012b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b02:	07d9      	lsls	r1, r3, #31
 8012b04:	d405      	bmi.n	8012b12 <_vfiprintf_r+0x32>
 8012b06:	89ab      	ldrh	r3, [r5, #12]
 8012b08:	059a      	lsls	r2, r3, #22
 8012b0a:	d402      	bmi.n	8012b12 <_vfiprintf_r+0x32>
 8012b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b0e:	f7fe ff2e 	bl	801196e <__retarget_lock_acquire_recursive>
 8012b12:	89ab      	ldrh	r3, [r5, #12]
 8012b14:	071b      	lsls	r3, r3, #28
 8012b16:	d501      	bpl.n	8012b1c <_vfiprintf_r+0x3c>
 8012b18:	692b      	ldr	r3, [r5, #16]
 8012b1a:	b9eb      	cbnz	r3, 8012b58 <_vfiprintf_r+0x78>
 8012b1c:	4629      	mov	r1, r5
 8012b1e:	4630      	mov	r0, r6
 8012b20:	f7fd fb04 	bl	801012c <__swsetup_r>
 8012b24:	b1c0      	cbz	r0, 8012b58 <_vfiprintf_r+0x78>
 8012b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b28:	07dc      	lsls	r4, r3, #31
 8012b2a:	d50e      	bpl.n	8012b4a <_vfiprintf_r+0x6a>
 8012b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b30:	b01d      	add	sp, #116	; 0x74
 8012b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b36:	4b7b      	ldr	r3, [pc, #492]	; (8012d24 <_vfiprintf_r+0x244>)
 8012b38:	429d      	cmp	r5, r3
 8012b3a:	d101      	bne.n	8012b40 <_vfiprintf_r+0x60>
 8012b3c:	68b5      	ldr	r5, [r6, #8]
 8012b3e:	e7df      	b.n	8012b00 <_vfiprintf_r+0x20>
 8012b40:	4b79      	ldr	r3, [pc, #484]	; (8012d28 <_vfiprintf_r+0x248>)
 8012b42:	429d      	cmp	r5, r3
 8012b44:	bf08      	it	eq
 8012b46:	68f5      	ldreq	r5, [r6, #12]
 8012b48:	e7da      	b.n	8012b00 <_vfiprintf_r+0x20>
 8012b4a:	89ab      	ldrh	r3, [r5, #12]
 8012b4c:	0598      	lsls	r0, r3, #22
 8012b4e:	d4ed      	bmi.n	8012b2c <_vfiprintf_r+0x4c>
 8012b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b52:	f7fe ff0d 	bl	8011970 <__retarget_lock_release_recursive>
 8012b56:	e7e9      	b.n	8012b2c <_vfiprintf_r+0x4c>
 8012b58:	2300      	movs	r3, #0
 8012b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8012b5c:	2320      	movs	r3, #32
 8012b5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b62:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b66:	2330      	movs	r3, #48	; 0x30
 8012b68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012d2c <_vfiprintf_r+0x24c>
 8012b6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b70:	f04f 0901 	mov.w	r9, #1
 8012b74:	4623      	mov	r3, r4
 8012b76:	469a      	mov	sl, r3
 8012b78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b7c:	b10a      	cbz	r2, 8012b82 <_vfiprintf_r+0xa2>
 8012b7e:	2a25      	cmp	r2, #37	; 0x25
 8012b80:	d1f9      	bne.n	8012b76 <_vfiprintf_r+0x96>
 8012b82:	ebba 0b04 	subs.w	fp, sl, r4
 8012b86:	d00b      	beq.n	8012ba0 <_vfiprintf_r+0xc0>
 8012b88:	465b      	mov	r3, fp
 8012b8a:	4622      	mov	r2, r4
 8012b8c:	4629      	mov	r1, r5
 8012b8e:	4630      	mov	r0, r6
 8012b90:	f7ff ff93 	bl	8012aba <__sfputs_r>
 8012b94:	3001      	adds	r0, #1
 8012b96:	f000 80aa 	beq.w	8012cee <_vfiprintf_r+0x20e>
 8012b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b9c:	445a      	add	r2, fp
 8012b9e:	9209      	str	r2, [sp, #36]	; 0x24
 8012ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	f000 80a2 	beq.w	8012cee <_vfiprintf_r+0x20e>
 8012baa:	2300      	movs	r3, #0
 8012bac:	f04f 32ff 	mov.w	r2, #4294967295
 8012bb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012bb4:	f10a 0a01 	add.w	sl, sl, #1
 8012bb8:	9304      	str	r3, [sp, #16]
 8012bba:	9307      	str	r3, [sp, #28]
 8012bbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012bc0:	931a      	str	r3, [sp, #104]	; 0x68
 8012bc2:	4654      	mov	r4, sl
 8012bc4:	2205      	movs	r2, #5
 8012bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bca:	4858      	ldr	r0, [pc, #352]	; (8012d2c <_vfiprintf_r+0x24c>)
 8012bcc:	f7ed fb28 	bl	8000220 <memchr>
 8012bd0:	9a04      	ldr	r2, [sp, #16]
 8012bd2:	b9d8      	cbnz	r0, 8012c0c <_vfiprintf_r+0x12c>
 8012bd4:	06d1      	lsls	r1, r2, #27
 8012bd6:	bf44      	itt	mi
 8012bd8:	2320      	movmi	r3, #32
 8012bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bde:	0713      	lsls	r3, r2, #28
 8012be0:	bf44      	itt	mi
 8012be2:	232b      	movmi	r3, #43	; 0x2b
 8012be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012be8:	f89a 3000 	ldrb.w	r3, [sl]
 8012bec:	2b2a      	cmp	r3, #42	; 0x2a
 8012bee:	d015      	beq.n	8012c1c <_vfiprintf_r+0x13c>
 8012bf0:	9a07      	ldr	r2, [sp, #28]
 8012bf2:	4654      	mov	r4, sl
 8012bf4:	2000      	movs	r0, #0
 8012bf6:	f04f 0c0a 	mov.w	ip, #10
 8012bfa:	4621      	mov	r1, r4
 8012bfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c00:	3b30      	subs	r3, #48	; 0x30
 8012c02:	2b09      	cmp	r3, #9
 8012c04:	d94e      	bls.n	8012ca4 <_vfiprintf_r+0x1c4>
 8012c06:	b1b0      	cbz	r0, 8012c36 <_vfiprintf_r+0x156>
 8012c08:	9207      	str	r2, [sp, #28]
 8012c0a:	e014      	b.n	8012c36 <_vfiprintf_r+0x156>
 8012c0c:	eba0 0308 	sub.w	r3, r0, r8
 8012c10:	fa09 f303 	lsl.w	r3, r9, r3
 8012c14:	4313      	orrs	r3, r2
 8012c16:	9304      	str	r3, [sp, #16]
 8012c18:	46a2      	mov	sl, r4
 8012c1a:	e7d2      	b.n	8012bc2 <_vfiprintf_r+0xe2>
 8012c1c:	9b03      	ldr	r3, [sp, #12]
 8012c1e:	1d19      	adds	r1, r3, #4
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	9103      	str	r1, [sp, #12]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	bfbb      	ittet	lt
 8012c28:	425b      	neglt	r3, r3
 8012c2a:	f042 0202 	orrlt.w	r2, r2, #2
 8012c2e:	9307      	strge	r3, [sp, #28]
 8012c30:	9307      	strlt	r3, [sp, #28]
 8012c32:	bfb8      	it	lt
 8012c34:	9204      	strlt	r2, [sp, #16]
 8012c36:	7823      	ldrb	r3, [r4, #0]
 8012c38:	2b2e      	cmp	r3, #46	; 0x2e
 8012c3a:	d10c      	bne.n	8012c56 <_vfiprintf_r+0x176>
 8012c3c:	7863      	ldrb	r3, [r4, #1]
 8012c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8012c40:	d135      	bne.n	8012cae <_vfiprintf_r+0x1ce>
 8012c42:	9b03      	ldr	r3, [sp, #12]
 8012c44:	1d1a      	adds	r2, r3, #4
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	9203      	str	r2, [sp, #12]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	bfb8      	it	lt
 8012c4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012c52:	3402      	adds	r4, #2
 8012c54:	9305      	str	r3, [sp, #20]
 8012c56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012d3c <_vfiprintf_r+0x25c>
 8012c5a:	7821      	ldrb	r1, [r4, #0]
 8012c5c:	2203      	movs	r2, #3
 8012c5e:	4650      	mov	r0, sl
 8012c60:	f7ed fade 	bl	8000220 <memchr>
 8012c64:	b140      	cbz	r0, 8012c78 <_vfiprintf_r+0x198>
 8012c66:	2340      	movs	r3, #64	; 0x40
 8012c68:	eba0 000a 	sub.w	r0, r0, sl
 8012c6c:	fa03 f000 	lsl.w	r0, r3, r0
 8012c70:	9b04      	ldr	r3, [sp, #16]
 8012c72:	4303      	orrs	r3, r0
 8012c74:	3401      	adds	r4, #1
 8012c76:	9304      	str	r3, [sp, #16]
 8012c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c7c:	482c      	ldr	r0, [pc, #176]	; (8012d30 <_vfiprintf_r+0x250>)
 8012c7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c82:	2206      	movs	r2, #6
 8012c84:	f7ed facc 	bl	8000220 <memchr>
 8012c88:	2800      	cmp	r0, #0
 8012c8a:	d03f      	beq.n	8012d0c <_vfiprintf_r+0x22c>
 8012c8c:	4b29      	ldr	r3, [pc, #164]	; (8012d34 <_vfiprintf_r+0x254>)
 8012c8e:	bb1b      	cbnz	r3, 8012cd8 <_vfiprintf_r+0x1f8>
 8012c90:	9b03      	ldr	r3, [sp, #12]
 8012c92:	3307      	adds	r3, #7
 8012c94:	f023 0307 	bic.w	r3, r3, #7
 8012c98:	3308      	adds	r3, #8
 8012c9a:	9303      	str	r3, [sp, #12]
 8012c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c9e:	443b      	add	r3, r7
 8012ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8012ca2:	e767      	b.n	8012b74 <_vfiprintf_r+0x94>
 8012ca4:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ca8:	460c      	mov	r4, r1
 8012caa:	2001      	movs	r0, #1
 8012cac:	e7a5      	b.n	8012bfa <_vfiprintf_r+0x11a>
 8012cae:	2300      	movs	r3, #0
 8012cb0:	3401      	adds	r4, #1
 8012cb2:	9305      	str	r3, [sp, #20]
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	f04f 0c0a 	mov.w	ip, #10
 8012cba:	4620      	mov	r0, r4
 8012cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012cc0:	3a30      	subs	r2, #48	; 0x30
 8012cc2:	2a09      	cmp	r2, #9
 8012cc4:	d903      	bls.n	8012cce <_vfiprintf_r+0x1ee>
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d0c5      	beq.n	8012c56 <_vfiprintf_r+0x176>
 8012cca:	9105      	str	r1, [sp, #20]
 8012ccc:	e7c3      	b.n	8012c56 <_vfiprintf_r+0x176>
 8012cce:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cd2:	4604      	mov	r4, r0
 8012cd4:	2301      	movs	r3, #1
 8012cd6:	e7f0      	b.n	8012cba <_vfiprintf_r+0x1da>
 8012cd8:	ab03      	add	r3, sp, #12
 8012cda:	9300      	str	r3, [sp, #0]
 8012cdc:	462a      	mov	r2, r5
 8012cde:	4b16      	ldr	r3, [pc, #88]	; (8012d38 <_vfiprintf_r+0x258>)
 8012ce0:	a904      	add	r1, sp, #16
 8012ce2:	4630      	mov	r0, r6
 8012ce4:	f7fb fc1e 	bl	800e524 <_printf_float>
 8012ce8:	4607      	mov	r7, r0
 8012cea:	1c78      	adds	r0, r7, #1
 8012cec:	d1d6      	bne.n	8012c9c <_vfiprintf_r+0x1bc>
 8012cee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012cf0:	07d9      	lsls	r1, r3, #31
 8012cf2:	d405      	bmi.n	8012d00 <_vfiprintf_r+0x220>
 8012cf4:	89ab      	ldrh	r3, [r5, #12]
 8012cf6:	059a      	lsls	r2, r3, #22
 8012cf8:	d402      	bmi.n	8012d00 <_vfiprintf_r+0x220>
 8012cfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012cfc:	f7fe fe38 	bl	8011970 <__retarget_lock_release_recursive>
 8012d00:	89ab      	ldrh	r3, [r5, #12]
 8012d02:	065b      	lsls	r3, r3, #25
 8012d04:	f53f af12 	bmi.w	8012b2c <_vfiprintf_r+0x4c>
 8012d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d0a:	e711      	b.n	8012b30 <_vfiprintf_r+0x50>
 8012d0c:	ab03      	add	r3, sp, #12
 8012d0e:	9300      	str	r3, [sp, #0]
 8012d10:	462a      	mov	r2, r5
 8012d12:	4b09      	ldr	r3, [pc, #36]	; (8012d38 <_vfiprintf_r+0x258>)
 8012d14:	a904      	add	r1, sp, #16
 8012d16:	4630      	mov	r0, r6
 8012d18:	f7fb fea8 	bl	800ea6c <_printf_i>
 8012d1c:	e7e4      	b.n	8012ce8 <_vfiprintf_r+0x208>
 8012d1e:	bf00      	nop
 8012d20:	0801499c 	.word	0x0801499c
 8012d24:	080149bc 	.word	0x080149bc
 8012d28:	0801497c 	.word	0x0801497c
 8012d2c:	08014bbc 	.word	0x08014bbc
 8012d30:	08014bc6 	.word	0x08014bc6
 8012d34:	0800e525 	.word	0x0800e525
 8012d38:	08012abb 	.word	0x08012abb
 8012d3c:	08014bc2 	.word	0x08014bc2

08012d40 <_scanf_chars>:
 8012d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d44:	4615      	mov	r5, r2
 8012d46:	688a      	ldr	r2, [r1, #8]
 8012d48:	4680      	mov	r8, r0
 8012d4a:	460c      	mov	r4, r1
 8012d4c:	b932      	cbnz	r2, 8012d5c <_scanf_chars+0x1c>
 8012d4e:	698a      	ldr	r2, [r1, #24]
 8012d50:	2a00      	cmp	r2, #0
 8012d52:	bf0c      	ite	eq
 8012d54:	2201      	moveq	r2, #1
 8012d56:	f04f 32ff 	movne.w	r2, #4294967295
 8012d5a:	608a      	str	r2, [r1, #8]
 8012d5c:	6822      	ldr	r2, [r4, #0]
 8012d5e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8012dec <_scanf_chars+0xac>
 8012d62:	06d1      	lsls	r1, r2, #27
 8012d64:	bf5f      	itttt	pl
 8012d66:	681a      	ldrpl	r2, [r3, #0]
 8012d68:	1d11      	addpl	r1, r2, #4
 8012d6a:	6019      	strpl	r1, [r3, #0]
 8012d6c:	6816      	ldrpl	r6, [r2, #0]
 8012d6e:	2700      	movs	r7, #0
 8012d70:	69a0      	ldr	r0, [r4, #24]
 8012d72:	b188      	cbz	r0, 8012d98 <_scanf_chars+0x58>
 8012d74:	2801      	cmp	r0, #1
 8012d76:	d107      	bne.n	8012d88 <_scanf_chars+0x48>
 8012d78:	682b      	ldr	r3, [r5, #0]
 8012d7a:	781a      	ldrb	r2, [r3, #0]
 8012d7c:	6963      	ldr	r3, [r4, #20]
 8012d7e:	5c9b      	ldrb	r3, [r3, r2]
 8012d80:	b953      	cbnz	r3, 8012d98 <_scanf_chars+0x58>
 8012d82:	bb27      	cbnz	r7, 8012dce <_scanf_chars+0x8e>
 8012d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d88:	2802      	cmp	r0, #2
 8012d8a:	d120      	bne.n	8012dce <_scanf_chars+0x8e>
 8012d8c:	682b      	ldr	r3, [r5, #0]
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	f813 3009 	ldrb.w	r3, [r3, r9]
 8012d94:	071b      	lsls	r3, r3, #28
 8012d96:	d41a      	bmi.n	8012dce <_scanf_chars+0x8e>
 8012d98:	6823      	ldr	r3, [r4, #0]
 8012d9a:	06da      	lsls	r2, r3, #27
 8012d9c:	bf5e      	ittt	pl
 8012d9e:	682b      	ldrpl	r3, [r5, #0]
 8012da0:	781b      	ldrbpl	r3, [r3, #0]
 8012da2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012da6:	682a      	ldr	r2, [r5, #0]
 8012da8:	686b      	ldr	r3, [r5, #4]
 8012daa:	3201      	adds	r2, #1
 8012dac:	602a      	str	r2, [r5, #0]
 8012dae:	68a2      	ldr	r2, [r4, #8]
 8012db0:	3b01      	subs	r3, #1
 8012db2:	3a01      	subs	r2, #1
 8012db4:	606b      	str	r3, [r5, #4]
 8012db6:	3701      	adds	r7, #1
 8012db8:	60a2      	str	r2, [r4, #8]
 8012dba:	b142      	cbz	r2, 8012dce <_scanf_chars+0x8e>
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	dcd7      	bgt.n	8012d70 <_scanf_chars+0x30>
 8012dc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012dc4:	4629      	mov	r1, r5
 8012dc6:	4640      	mov	r0, r8
 8012dc8:	4798      	blx	r3
 8012dca:	2800      	cmp	r0, #0
 8012dcc:	d0d0      	beq.n	8012d70 <_scanf_chars+0x30>
 8012dce:	6823      	ldr	r3, [r4, #0]
 8012dd0:	f013 0310 	ands.w	r3, r3, #16
 8012dd4:	d105      	bne.n	8012de2 <_scanf_chars+0xa2>
 8012dd6:	68e2      	ldr	r2, [r4, #12]
 8012dd8:	3201      	adds	r2, #1
 8012dda:	60e2      	str	r2, [r4, #12]
 8012ddc:	69a2      	ldr	r2, [r4, #24]
 8012dde:	b102      	cbz	r2, 8012de2 <_scanf_chars+0xa2>
 8012de0:	7033      	strb	r3, [r6, #0]
 8012de2:	6923      	ldr	r3, [r4, #16]
 8012de4:	441f      	add	r7, r3
 8012de6:	6127      	str	r7, [r4, #16]
 8012de8:	2000      	movs	r0, #0
 8012dea:	e7cb      	b.n	8012d84 <_scanf_chars+0x44>
 8012dec:	08014759 	.word	0x08014759

08012df0 <_scanf_i>:
 8012df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012df4:	4698      	mov	r8, r3
 8012df6:	4b74      	ldr	r3, [pc, #464]	; (8012fc8 <_scanf_i+0x1d8>)
 8012df8:	460c      	mov	r4, r1
 8012dfa:	4682      	mov	sl, r0
 8012dfc:	4616      	mov	r6, r2
 8012dfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012e02:	b087      	sub	sp, #28
 8012e04:	ab03      	add	r3, sp, #12
 8012e06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012e0a:	4b70      	ldr	r3, [pc, #448]	; (8012fcc <_scanf_i+0x1dc>)
 8012e0c:	69a1      	ldr	r1, [r4, #24]
 8012e0e:	4a70      	ldr	r2, [pc, #448]	; (8012fd0 <_scanf_i+0x1e0>)
 8012e10:	2903      	cmp	r1, #3
 8012e12:	bf18      	it	ne
 8012e14:	461a      	movne	r2, r3
 8012e16:	68a3      	ldr	r3, [r4, #8]
 8012e18:	9201      	str	r2, [sp, #4]
 8012e1a:	1e5a      	subs	r2, r3, #1
 8012e1c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012e20:	bf88      	it	hi
 8012e22:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012e26:	4627      	mov	r7, r4
 8012e28:	bf82      	ittt	hi
 8012e2a:	eb03 0905 	addhi.w	r9, r3, r5
 8012e2e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012e32:	60a3      	strhi	r3, [r4, #8]
 8012e34:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012e38:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012e3c:	bf98      	it	ls
 8012e3e:	f04f 0900 	movls.w	r9, #0
 8012e42:	6023      	str	r3, [r4, #0]
 8012e44:	463d      	mov	r5, r7
 8012e46:	f04f 0b00 	mov.w	fp, #0
 8012e4a:	6831      	ldr	r1, [r6, #0]
 8012e4c:	ab03      	add	r3, sp, #12
 8012e4e:	7809      	ldrb	r1, [r1, #0]
 8012e50:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012e54:	2202      	movs	r2, #2
 8012e56:	f7ed f9e3 	bl	8000220 <memchr>
 8012e5a:	b328      	cbz	r0, 8012ea8 <_scanf_i+0xb8>
 8012e5c:	f1bb 0f01 	cmp.w	fp, #1
 8012e60:	d159      	bne.n	8012f16 <_scanf_i+0x126>
 8012e62:	6862      	ldr	r2, [r4, #4]
 8012e64:	b92a      	cbnz	r2, 8012e72 <_scanf_i+0x82>
 8012e66:	6822      	ldr	r2, [r4, #0]
 8012e68:	2308      	movs	r3, #8
 8012e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012e6e:	6063      	str	r3, [r4, #4]
 8012e70:	6022      	str	r2, [r4, #0]
 8012e72:	6822      	ldr	r2, [r4, #0]
 8012e74:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012e78:	6022      	str	r2, [r4, #0]
 8012e7a:	68a2      	ldr	r2, [r4, #8]
 8012e7c:	1e51      	subs	r1, r2, #1
 8012e7e:	60a1      	str	r1, [r4, #8]
 8012e80:	b192      	cbz	r2, 8012ea8 <_scanf_i+0xb8>
 8012e82:	6832      	ldr	r2, [r6, #0]
 8012e84:	1c51      	adds	r1, r2, #1
 8012e86:	6031      	str	r1, [r6, #0]
 8012e88:	7812      	ldrb	r2, [r2, #0]
 8012e8a:	f805 2b01 	strb.w	r2, [r5], #1
 8012e8e:	6872      	ldr	r2, [r6, #4]
 8012e90:	3a01      	subs	r2, #1
 8012e92:	2a00      	cmp	r2, #0
 8012e94:	6072      	str	r2, [r6, #4]
 8012e96:	dc07      	bgt.n	8012ea8 <_scanf_i+0xb8>
 8012e98:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012e9c:	4631      	mov	r1, r6
 8012e9e:	4650      	mov	r0, sl
 8012ea0:	4790      	blx	r2
 8012ea2:	2800      	cmp	r0, #0
 8012ea4:	f040 8085 	bne.w	8012fb2 <_scanf_i+0x1c2>
 8012ea8:	f10b 0b01 	add.w	fp, fp, #1
 8012eac:	f1bb 0f03 	cmp.w	fp, #3
 8012eb0:	d1cb      	bne.n	8012e4a <_scanf_i+0x5a>
 8012eb2:	6863      	ldr	r3, [r4, #4]
 8012eb4:	b90b      	cbnz	r3, 8012eba <_scanf_i+0xca>
 8012eb6:	230a      	movs	r3, #10
 8012eb8:	6063      	str	r3, [r4, #4]
 8012eba:	6863      	ldr	r3, [r4, #4]
 8012ebc:	4945      	ldr	r1, [pc, #276]	; (8012fd4 <_scanf_i+0x1e4>)
 8012ebe:	6960      	ldr	r0, [r4, #20]
 8012ec0:	1ac9      	subs	r1, r1, r3
 8012ec2:	f000 f8a5 	bl	8013010 <__sccl>
 8012ec6:	f04f 0b00 	mov.w	fp, #0
 8012eca:	68a3      	ldr	r3, [r4, #8]
 8012ecc:	6822      	ldr	r2, [r4, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d03d      	beq.n	8012f4e <_scanf_i+0x15e>
 8012ed2:	6831      	ldr	r1, [r6, #0]
 8012ed4:	6960      	ldr	r0, [r4, #20]
 8012ed6:	f891 c000 	ldrb.w	ip, [r1]
 8012eda:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012ede:	2800      	cmp	r0, #0
 8012ee0:	d035      	beq.n	8012f4e <_scanf_i+0x15e>
 8012ee2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8012ee6:	d124      	bne.n	8012f32 <_scanf_i+0x142>
 8012ee8:	0510      	lsls	r0, r2, #20
 8012eea:	d522      	bpl.n	8012f32 <_scanf_i+0x142>
 8012eec:	f10b 0b01 	add.w	fp, fp, #1
 8012ef0:	f1b9 0f00 	cmp.w	r9, #0
 8012ef4:	d003      	beq.n	8012efe <_scanf_i+0x10e>
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	f109 39ff 	add.w	r9, r9, #4294967295
 8012efc:	60a3      	str	r3, [r4, #8]
 8012efe:	6873      	ldr	r3, [r6, #4]
 8012f00:	3b01      	subs	r3, #1
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	6073      	str	r3, [r6, #4]
 8012f06:	dd1b      	ble.n	8012f40 <_scanf_i+0x150>
 8012f08:	6833      	ldr	r3, [r6, #0]
 8012f0a:	3301      	adds	r3, #1
 8012f0c:	6033      	str	r3, [r6, #0]
 8012f0e:	68a3      	ldr	r3, [r4, #8]
 8012f10:	3b01      	subs	r3, #1
 8012f12:	60a3      	str	r3, [r4, #8]
 8012f14:	e7d9      	b.n	8012eca <_scanf_i+0xda>
 8012f16:	f1bb 0f02 	cmp.w	fp, #2
 8012f1a:	d1ae      	bne.n	8012e7a <_scanf_i+0x8a>
 8012f1c:	6822      	ldr	r2, [r4, #0]
 8012f1e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012f22:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012f26:	d1bf      	bne.n	8012ea8 <_scanf_i+0xb8>
 8012f28:	2310      	movs	r3, #16
 8012f2a:	6063      	str	r3, [r4, #4]
 8012f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012f30:	e7a2      	b.n	8012e78 <_scanf_i+0x88>
 8012f32:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012f36:	6022      	str	r2, [r4, #0]
 8012f38:	780b      	ldrb	r3, [r1, #0]
 8012f3a:	f805 3b01 	strb.w	r3, [r5], #1
 8012f3e:	e7de      	b.n	8012efe <_scanf_i+0x10e>
 8012f40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012f44:	4631      	mov	r1, r6
 8012f46:	4650      	mov	r0, sl
 8012f48:	4798      	blx	r3
 8012f4a:	2800      	cmp	r0, #0
 8012f4c:	d0df      	beq.n	8012f0e <_scanf_i+0x11e>
 8012f4e:	6823      	ldr	r3, [r4, #0]
 8012f50:	05d9      	lsls	r1, r3, #23
 8012f52:	d50d      	bpl.n	8012f70 <_scanf_i+0x180>
 8012f54:	42bd      	cmp	r5, r7
 8012f56:	d909      	bls.n	8012f6c <_scanf_i+0x17c>
 8012f58:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012f5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f60:	4632      	mov	r2, r6
 8012f62:	4650      	mov	r0, sl
 8012f64:	4798      	blx	r3
 8012f66:	f105 39ff 	add.w	r9, r5, #4294967295
 8012f6a:	464d      	mov	r5, r9
 8012f6c:	42bd      	cmp	r5, r7
 8012f6e:	d028      	beq.n	8012fc2 <_scanf_i+0x1d2>
 8012f70:	6822      	ldr	r2, [r4, #0]
 8012f72:	f012 0210 	ands.w	r2, r2, #16
 8012f76:	d113      	bne.n	8012fa0 <_scanf_i+0x1b0>
 8012f78:	702a      	strb	r2, [r5, #0]
 8012f7a:	6863      	ldr	r3, [r4, #4]
 8012f7c:	9e01      	ldr	r6, [sp, #4]
 8012f7e:	4639      	mov	r1, r7
 8012f80:	4650      	mov	r0, sl
 8012f82:	47b0      	blx	r6
 8012f84:	f8d8 3000 	ldr.w	r3, [r8]
 8012f88:	6821      	ldr	r1, [r4, #0]
 8012f8a:	1d1a      	adds	r2, r3, #4
 8012f8c:	f8c8 2000 	str.w	r2, [r8]
 8012f90:	f011 0f20 	tst.w	r1, #32
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	d00f      	beq.n	8012fb8 <_scanf_i+0x1c8>
 8012f98:	6018      	str	r0, [r3, #0]
 8012f9a:	68e3      	ldr	r3, [r4, #12]
 8012f9c:	3301      	adds	r3, #1
 8012f9e:	60e3      	str	r3, [r4, #12]
 8012fa0:	1bed      	subs	r5, r5, r7
 8012fa2:	44ab      	add	fp, r5
 8012fa4:	6925      	ldr	r5, [r4, #16]
 8012fa6:	445d      	add	r5, fp
 8012fa8:	6125      	str	r5, [r4, #16]
 8012faa:	2000      	movs	r0, #0
 8012fac:	b007      	add	sp, #28
 8012fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fb2:	f04f 0b00 	mov.w	fp, #0
 8012fb6:	e7ca      	b.n	8012f4e <_scanf_i+0x15e>
 8012fb8:	07ca      	lsls	r2, r1, #31
 8012fba:	bf4c      	ite	mi
 8012fbc:	8018      	strhmi	r0, [r3, #0]
 8012fbe:	6018      	strpl	r0, [r3, #0]
 8012fc0:	e7eb      	b.n	8012f9a <_scanf_i+0x1aa>
 8012fc2:	2001      	movs	r0, #1
 8012fc4:	e7f2      	b.n	8012fac <_scanf_i+0x1bc>
 8012fc6:	bf00      	nop
 8012fc8:	0801465c 	.word	0x0801465c
 8012fcc:	0801317d 	.word	0x0801317d
 8012fd0:	0800ffd9 	.word	0x0800ffd9
 8012fd4:	08014be6 	.word	0x08014be6

08012fd8 <_read_r>:
 8012fd8:	b538      	push	{r3, r4, r5, lr}
 8012fda:	4d07      	ldr	r5, [pc, #28]	; (8012ff8 <_read_r+0x20>)
 8012fdc:	4604      	mov	r4, r0
 8012fde:	4608      	mov	r0, r1
 8012fe0:	4611      	mov	r1, r2
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	602a      	str	r2, [r5, #0]
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	f7f1 f98c 	bl	8004304 <_read>
 8012fec:	1c43      	adds	r3, r0, #1
 8012fee:	d102      	bne.n	8012ff6 <_read_r+0x1e>
 8012ff0:	682b      	ldr	r3, [r5, #0]
 8012ff2:	b103      	cbz	r3, 8012ff6 <_read_r+0x1e>
 8012ff4:	6023      	str	r3, [r4, #0]
 8012ff6:	bd38      	pop	{r3, r4, r5, pc}
 8012ff8:	20001a90 	.word	0x20001a90
 8012ffc:	00000000 	.word	0x00000000

08013000 <nan>:
 8013000:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013008 <nan+0x8>
 8013004:	4770      	bx	lr
 8013006:	bf00      	nop
 8013008:	00000000 	.word	0x00000000
 801300c:	7ff80000 	.word	0x7ff80000

08013010 <__sccl>:
 8013010:	b570      	push	{r4, r5, r6, lr}
 8013012:	780b      	ldrb	r3, [r1, #0]
 8013014:	4604      	mov	r4, r0
 8013016:	2b5e      	cmp	r3, #94	; 0x5e
 8013018:	bf0b      	itete	eq
 801301a:	784b      	ldrbeq	r3, [r1, #1]
 801301c:	1c48      	addne	r0, r1, #1
 801301e:	1c88      	addeq	r0, r1, #2
 8013020:	2200      	movne	r2, #0
 8013022:	bf08      	it	eq
 8013024:	2201      	moveq	r2, #1
 8013026:	1e61      	subs	r1, r4, #1
 8013028:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801302c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013030:	42a9      	cmp	r1, r5
 8013032:	d1fb      	bne.n	801302c <__sccl+0x1c>
 8013034:	b90b      	cbnz	r3, 801303a <__sccl+0x2a>
 8013036:	3801      	subs	r0, #1
 8013038:	bd70      	pop	{r4, r5, r6, pc}
 801303a:	f082 0101 	eor.w	r1, r2, #1
 801303e:	54e1      	strb	r1, [r4, r3]
 8013040:	1c42      	adds	r2, r0, #1
 8013042:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8013046:	2d2d      	cmp	r5, #45	; 0x2d
 8013048:	f102 36ff 	add.w	r6, r2, #4294967295
 801304c:	4610      	mov	r0, r2
 801304e:	d006      	beq.n	801305e <__sccl+0x4e>
 8013050:	2d5d      	cmp	r5, #93	; 0x5d
 8013052:	d0f1      	beq.n	8013038 <__sccl+0x28>
 8013054:	b90d      	cbnz	r5, 801305a <__sccl+0x4a>
 8013056:	4630      	mov	r0, r6
 8013058:	e7ee      	b.n	8013038 <__sccl+0x28>
 801305a:	462b      	mov	r3, r5
 801305c:	e7ef      	b.n	801303e <__sccl+0x2e>
 801305e:	7816      	ldrb	r6, [r2, #0]
 8013060:	2e5d      	cmp	r6, #93	; 0x5d
 8013062:	d0fa      	beq.n	801305a <__sccl+0x4a>
 8013064:	42b3      	cmp	r3, r6
 8013066:	dcf8      	bgt.n	801305a <__sccl+0x4a>
 8013068:	4618      	mov	r0, r3
 801306a:	3001      	adds	r0, #1
 801306c:	4286      	cmp	r6, r0
 801306e:	5421      	strb	r1, [r4, r0]
 8013070:	dcfb      	bgt.n	801306a <__sccl+0x5a>
 8013072:	43d8      	mvns	r0, r3
 8013074:	4430      	add	r0, r6
 8013076:	1c5d      	adds	r5, r3, #1
 8013078:	42b3      	cmp	r3, r6
 801307a:	bfa8      	it	ge
 801307c:	2000      	movge	r0, #0
 801307e:	182b      	adds	r3, r5, r0
 8013080:	3202      	adds	r2, #2
 8013082:	e7de      	b.n	8013042 <__sccl+0x32>

08013084 <_strtoul_l.isra.0>:
 8013084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013088:	4e3b      	ldr	r6, [pc, #236]	; (8013178 <_strtoul_l.isra.0+0xf4>)
 801308a:	4686      	mov	lr, r0
 801308c:	468c      	mov	ip, r1
 801308e:	4660      	mov	r0, ip
 8013090:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013094:	5da5      	ldrb	r5, [r4, r6]
 8013096:	f015 0508 	ands.w	r5, r5, #8
 801309a:	d1f8      	bne.n	801308e <_strtoul_l.isra.0+0xa>
 801309c:	2c2d      	cmp	r4, #45	; 0x2d
 801309e:	d134      	bne.n	801310a <_strtoul_l.isra.0+0x86>
 80130a0:	f89c 4000 	ldrb.w	r4, [ip]
 80130a4:	f04f 0801 	mov.w	r8, #1
 80130a8:	f100 0c02 	add.w	ip, r0, #2
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d05e      	beq.n	801316e <_strtoul_l.isra.0+0xea>
 80130b0:	2b10      	cmp	r3, #16
 80130b2:	d10c      	bne.n	80130ce <_strtoul_l.isra.0+0x4a>
 80130b4:	2c30      	cmp	r4, #48	; 0x30
 80130b6:	d10a      	bne.n	80130ce <_strtoul_l.isra.0+0x4a>
 80130b8:	f89c 0000 	ldrb.w	r0, [ip]
 80130bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80130c0:	2858      	cmp	r0, #88	; 0x58
 80130c2:	d14f      	bne.n	8013164 <_strtoul_l.isra.0+0xe0>
 80130c4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80130c8:	2310      	movs	r3, #16
 80130ca:	f10c 0c02 	add.w	ip, ip, #2
 80130ce:	f04f 37ff 	mov.w	r7, #4294967295
 80130d2:	2500      	movs	r5, #0
 80130d4:	fbb7 f7f3 	udiv	r7, r7, r3
 80130d8:	fb03 f907 	mul.w	r9, r3, r7
 80130dc:	ea6f 0909 	mvn.w	r9, r9
 80130e0:	4628      	mov	r0, r5
 80130e2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80130e6:	2e09      	cmp	r6, #9
 80130e8:	d818      	bhi.n	801311c <_strtoul_l.isra.0+0x98>
 80130ea:	4634      	mov	r4, r6
 80130ec:	42a3      	cmp	r3, r4
 80130ee:	dd24      	ble.n	801313a <_strtoul_l.isra.0+0xb6>
 80130f0:	2d00      	cmp	r5, #0
 80130f2:	db1f      	blt.n	8013134 <_strtoul_l.isra.0+0xb0>
 80130f4:	4287      	cmp	r7, r0
 80130f6:	d31d      	bcc.n	8013134 <_strtoul_l.isra.0+0xb0>
 80130f8:	d101      	bne.n	80130fe <_strtoul_l.isra.0+0x7a>
 80130fa:	45a1      	cmp	r9, r4
 80130fc:	db1a      	blt.n	8013134 <_strtoul_l.isra.0+0xb0>
 80130fe:	fb00 4003 	mla	r0, r0, r3, r4
 8013102:	2501      	movs	r5, #1
 8013104:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013108:	e7eb      	b.n	80130e2 <_strtoul_l.isra.0+0x5e>
 801310a:	2c2b      	cmp	r4, #43	; 0x2b
 801310c:	bf08      	it	eq
 801310e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8013112:	46a8      	mov	r8, r5
 8013114:	bf08      	it	eq
 8013116:	f100 0c02 	addeq.w	ip, r0, #2
 801311a:	e7c7      	b.n	80130ac <_strtoul_l.isra.0+0x28>
 801311c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8013120:	2e19      	cmp	r6, #25
 8013122:	d801      	bhi.n	8013128 <_strtoul_l.isra.0+0xa4>
 8013124:	3c37      	subs	r4, #55	; 0x37
 8013126:	e7e1      	b.n	80130ec <_strtoul_l.isra.0+0x68>
 8013128:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801312c:	2e19      	cmp	r6, #25
 801312e:	d804      	bhi.n	801313a <_strtoul_l.isra.0+0xb6>
 8013130:	3c57      	subs	r4, #87	; 0x57
 8013132:	e7db      	b.n	80130ec <_strtoul_l.isra.0+0x68>
 8013134:	f04f 35ff 	mov.w	r5, #4294967295
 8013138:	e7e4      	b.n	8013104 <_strtoul_l.isra.0+0x80>
 801313a:	2d00      	cmp	r5, #0
 801313c:	da07      	bge.n	801314e <_strtoul_l.isra.0+0xca>
 801313e:	2322      	movs	r3, #34	; 0x22
 8013140:	f8ce 3000 	str.w	r3, [lr]
 8013144:	f04f 30ff 	mov.w	r0, #4294967295
 8013148:	b942      	cbnz	r2, 801315c <_strtoul_l.isra.0+0xd8>
 801314a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801314e:	f1b8 0f00 	cmp.w	r8, #0
 8013152:	d000      	beq.n	8013156 <_strtoul_l.isra.0+0xd2>
 8013154:	4240      	negs	r0, r0
 8013156:	2a00      	cmp	r2, #0
 8013158:	d0f7      	beq.n	801314a <_strtoul_l.isra.0+0xc6>
 801315a:	b10d      	cbz	r5, 8013160 <_strtoul_l.isra.0+0xdc>
 801315c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8013160:	6011      	str	r1, [r2, #0]
 8013162:	e7f2      	b.n	801314a <_strtoul_l.isra.0+0xc6>
 8013164:	2430      	movs	r4, #48	; 0x30
 8013166:	2b00      	cmp	r3, #0
 8013168:	d1b1      	bne.n	80130ce <_strtoul_l.isra.0+0x4a>
 801316a:	2308      	movs	r3, #8
 801316c:	e7af      	b.n	80130ce <_strtoul_l.isra.0+0x4a>
 801316e:	2c30      	cmp	r4, #48	; 0x30
 8013170:	d0a2      	beq.n	80130b8 <_strtoul_l.isra.0+0x34>
 8013172:	230a      	movs	r3, #10
 8013174:	e7ab      	b.n	80130ce <_strtoul_l.isra.0+0x4a>
 8013176:	bf00      	nop
 8013178:	08014759 	.word	0x08014759

0801317c <_strtoul_r>:
 801317c:	f7ff bf82 	b.w	8013084 <_strtoul_l.isra.0>

08013180 <__submore>:
 8013180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013184:	460c      	mov	r4, r1
 8013186:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801318c:	4299      	cmp	r1, r3
 801318e:	d11d      	bne.n	80131cc <__submore+0x4c>
 8013190:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013194:	f7fb f8cc 	bl	800e330 <_malloc_r>
 8013198:	b918      	cbnz	r0, 80131a2 <__submore+0x22>
 801319a:	f04f 30ff 	mov.w	r0, #4294967295
 801319e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80131a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80131ac:	6360      	str	r0, [r4, #52]	; 0x34
 80131ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80131b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80131b6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80131ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80131be:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80131c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80131c6:	6020      	str	r0, [r4, #0]
 80131c8:	2000      	movs	r0, #0
 80131ca:	e7e8      	b.n	801319e <__submore+0x1e>
 80131cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80131ce:	0077      	lsls	r7, r6, #1
 80131d0:	463a      	mov	r2, r7
 80131d2:	f000 f889 	bl	80132e8 <_realloc_r>
 80131d6:	4605      	mov	r5, r0
 80131d8:	2800      	cmp	r0, #0
 80131da:	d0de      	beq.n	801319a <__submore+0x1a>
 80131dc:	eb00 0806 	add.w	r8, r0, r6
 80131e0:	4601      	mov	r1, r0
 80131e2:	4632      	mov	r2, r6
 80131e4:	4640      	mov	r0, r8
 80131e6:	f7fb f83d 	bl	800e264 <memcpy>
 80131ea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80131ee:	f8c4 8000 	str.w	r8, [r4]
 80131f2:	e7e9      	b.n	80131c8 <__submore+0x48>

080131f4 <__ascii_wctomb>:
 80131f4:	b149      	cbz	r1, 801320a <__ascii_wctomb+0x16>
 80131f6:	2aff      	cmp	r2, #255	; 0xff
 80131f8:	bf85      	ittet	hi
 80131fa:	238a      	movhi	r3, #138	; 0x8a
 80131fc:	6003      	strhi	r3, [r0, #0]
 80131fe:	700a      	strbls	r2, [r1, #0]
 8013200:	f04f 30ff 	movhi.w	r0, #4294967295
 8013204:	bf98      	it	ls
 8013206:	2001      	movls	r0, #1
 8013208:	4770      	bx	lr
 801320a:	4608      	mov	r0, r1
 801320c:	4770      	bx	lr
	...

08013210 <__assert_func>:
 8013210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013212:	4614      	mov	r4, r2
 8013214:	461a      	mov	r2, r3
 8013216:	4b09      	ldr	r3, [pc, #36]	; (801323c <__assert_func+0x2c>)
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	4605      	mov	r5, r0
 801321c:	68d8      	ldr	r0, [r3, #12]
 801321e:	b14c      	cbz	r4, 8013234 <__assert_func+0x24>
 8013220:	4b07      	ldr	r3, [pc, #28]	; (8013240 <__assert_func+0x30>)
 8013222:	9100      	str	r1, [sp, #0]
 8013224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013228:	4906      	ldr	r1, [pc, #24]	; (8013244 <__assert_func+0x34>)
 801322a:	462b      	mov	r3, r5
 801322c:	f000 f80e 	bl	801324c <fiprintf>
 8013230:	f000 f880 	bl	8013334 <abort>
 8013234:	4b04      	ldr	r3, [pc, #16]	; (8013248 <__assert_func+0x38>)
 8013236:	461c      	mov	r4, r3
 8013238:	e7f3      	b.n	8013222 <__assert_func+0x12>
 801323a:	bf00      	nop
 801323c:	20000028 	.word	0x20000028
 8013240:	08014be8 	.word	0x08014be8
 8013244:	08014bf5 	.word	0x08014bf5
 8013248:	08014c23 	.word	0x08014c23

0801324c <fiprintf>:
 801324c:	b40e      	push	{r1, r2, r3}
 801324e:	b503      	push	{r0, r1, lr}
 8013250:	4601      	mov	r1, r0
 8013252:	ab03      	add	r3, sp, #12
 8013254:	4805      	ldr	r0, [pc, #20]	; (801326c <fiprintf+0x20>)
 8013256:	f853 2b04 	ldr.w	r2, [r3], #4
 801325a:	6800      	ldr	r0, [r0, #0]
 801325c:	9301      	str	r3, [sp, #4]
 801325e:	f7ff fc3f 	bl	8012ae0 <_vfiprintf_r>
 8013262:	b002      	add	sp, #8
 8013264:	f85d eb04 	ldr.w	lr, [sp], #4
 8013268:	b003      	add	sp, #12
 801326a:	4770      	bx	lr
 801326c:	20000028 	.word	0x20000028

08013270 <_fstat_r>:
 8013270:	b538      	push	{r3, r4, r5, lr}
 8013272:	4d07      	ldr	r5, [pc, #28]	; (8013290 <_fstat_r+0x20>)
 8013274:	2300      	movs	r3, #0
 8013276:	4604      	mov	r4, r0
 8013278:	4608      	mov	r0, r1
 801327a:	4611      	mov	r1, r2
 801327c:	602b      	str	r3, [r5, #0]
 801327e:	f7f1 f886 	bl	800438e <_fstat>
 8013282:	1c43      	adds	r3, r0, #1
 8013284:	d102      	bne.n	801328c <_fstat_r+0x1c>
 8013286:	682b      	ldr	r3, [r5, #0]
 8013288:	b103      	cbz	r3, 801328c <_fstat_r+0x1c>
 801328a:	6023      	str	r3, [r4, #0]
 801328c:	bd38      	pop	{r3, r4, r5, pc}
 801328e:	bf00      	nop
 8013290:	20001a90 	.word	0x20001a90

08013294 <_isatty_r>:
 8013294:	b538      	push	{r3, r4, r5, lr}
 8013296:	4d06      	ldr	r5, [pc, #24]	; (80132b0 <_isatty_r+0x1c>)
 8013298:	2300      	movs	r3, #0
 801329a:	4604      	mov	r4, r0
 801329c:	4608      	mov	r0, r1
 801329e:	602b      	str	r3, [r5, #0]
 80132a0:	f7f1 f885 	bl	80043ae <_isatty>
 80132a4:	1c43      	adds	r3, r0, #1
 80132a6:	d102      	bne.n	80132ae <_isatty_r+0x1a>
 80132a8:	682b      	ldr	r3, [r5, #0]
 80132aa:	b103      	cbz	r3, 80132ae <_isatty_r+0x1a>
 80132ac:	6023      	str	r3, [r4, #0]
 80132ae:	bd38      	pop	{r3, r4, r5, pc}
 80132b0:	20001a90 	.word	0x20001a90

080132b4 <memmove>:
 80132b4:	4288      	cmp	r0, r1
 80132b6:	b510      	push	{r4, lr}
 80132b8:	eb01 0402 	add.w	r4, r1, r2
 80132bc:	d902      	bls.n	80132c4 <memmove+0x10>
 80132be:	4284      	cmp	r4, r0
 80132c0:	4623      	mov	r3, r4
 80132c2:	d807      	bhi.n	80132d4 <memmove+0x20>
 80132c4:	1e43      	subs	r3, r0, #1
 80132c6:	42a1      	cmp	r1, r4
 80132c8:	d008      	beq.n	80132dc <memmove+0x28>
 80132ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132d2:	e7f8      	b.n	80132c6 <memmove+0x12>
 80132d4:	4402      	add	r2, r0
 80132d6:	4601      	mov	r1, r0
 80132d8:	428a      	cmp	r2, r1
 80132da:	d100      	bne.n	80132de <memmove+0x2a>
 80132dc:	bd10      	pop	{r4, pc}
 80132de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80132e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80132e6:	e7f7      	b.n	80132d8 <memmove+0x24>

080132e8 <_realloc_r>:
 80132e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ea:	4607      	mov	r7, r0
 80132ec:	4614      	mov	r4, r2
 80132ee:	460e      	mov	r6, r1
 80132f0:	b921      	cbnz	r1, 80132fc <_realloc_r+0x14>
 80132f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80132f6:	4611      	mov	r1, r2
 80132f8:	f7fb b81a 	b.w	800e330 <_malloc_r>
 80132fc:	b922      	cbnz	r2, 8013308 <_realloc_r+0x20>
 80132fe:	f7fa ffc7 	bl	800e290 <_free_r>
 8013302:	4625      	mov	r5, r4
 8013304:	4628      	mov	r0, r5
 8013306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013308:	f000 f81b 	bl	8013342 <_malloc_usable_size_r>
 801330c:	42a0      	cmp	r0, r4
 801330e:	d20f      	bcs.n	8013330 <_realloc_r+0x48>
 8013310:	4621      	mov	r1, r4
 8013312:	4638      	mov	r0, r7
 8013314:	f7fb f80c 	bl	800e330 <_malloc_r>
 8013318:	4605      	mov	r5, r0
 801331a:	2800      	cmp	r0, #0
 801331c:	d0f2      	beq.n	8013304 <_realloc_r+0x1c>
 801331e:	4631      	mov	r1, r6
 8013320:	4622      	mov	r2, r4
 8013322:	f7fa ff9f 	bl	800e264 <memcpy>
 8013326:	4631      	mov	r1, r6
 8013328:	4638      	mov	r0, r7
 801332a:	f7fa ffb1 	bl	800e290 <_free_r>
 801332e:	e7e9      	b.n	8013304 <_realloc_r+0x1c>
 8013330:	4635      	mov	r5, r6
 8013332:	e7e7      	b.n	8013304 <_realloc_r+0x1c>

08013334 <abort>:
 8013334:	b508      	push	{r3, lr}
 8013336:	2006      	movs	r0, #6
 8013338:	f000 f834 	bl	80133a4 <raise>
 801333c:	2001      	movs	r0, #1
 801333e:	f7f0 ffd7 	bl	80042f0 <_exit>

08013342 <_malloc_usable_size_r>:
 8013342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013346:	1f18      	subs	r0, r3, #4
 8013348:	2b00      	cmp	r3, #0
 801334a:	bfbc      	itt	lt
 801334c:	580b      	ldrlt	r3, [r1, r0]
 801334e:	18c0      	addlt	r0, r0, r3
 8013350:	4770      	bx	lr

08013352 <_raise_r>:
 8013352:	291f      	cmp	r1, #31
 8013354:	b538      	push	{r3, r4, r5, lr}
 8013356:	4604      	mov	r4, r0
 8013358:	460d      	mov	r5, r1
 801335a:	d904      	bls.n	8013366 <_raise_r+0x14>
 801335c:	2316      	movs	r3, #22
 801335e:	6003      	str	r3, [r0, #0]
 8013360:	f04f 30ff 	mov.w	r0, #4294967295
 8013364:	bd38      	pop	{r3, r4, r5, pc}
 8013366:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013368:	b112      	cbz	r2, 8013370 <_raise_r+0x1e>
 801336a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801336e:	b94b      	cbnz	r3, 8013384 <_raise_r+0x32>
 8013370:	4620      	mov	r0, r4
 8013372:	f000 f831 	bl	80133d8 <_getpid_r>
 8013376:	462a      	mov	r2, r5
 8013378:	4601      	mov	r1, r0
 801337a:	4620      	mov	r0, r4
 801337c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013380:	f000 b818 	b.w	80133b4 <_kill_r>
 8013384:	2b01      	cmp	r3, #1
 8013386:	d00a      	beq.n	801339e <_raise_r+0x4c>
 8013388:	1c59      	adds	r1, r3, #1
 801338a:	d103      	bne.n	8013394 <_raise_r+0x42>
 801338c:	2316      	movs	r3, #22
 801338e:	6003      	str	r3, [r0, #0]
 8013390:	2001      	movs	r0, #1
 8013392:	e7e7      	b.n	8013364 <_raise_r+0x12>
 8013394:	2400      	movs	r4, #0
 8013396:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801339a:	4628      	mov	r0, r5
 801339c:	4798      	blx	r3
 801339e:	2000      	movs	r0, #0
 80133a0:	e7e0      	b.n	8013364 <_raise_r+0x12>
	...

080133a4 <raise>:
 80133a4:	4b02      	ldr	r3, [pc, #8]	; (80133b0 <raise+0xc>)
 80133a6:	4601      	mov	r1, r0
 80133a8:	6818      	ldr	r0, [r3, #0]
 80133aa:	f7ff bfd2 	b.w	8013352 <_raise_r>
 80133ae:	bf00      	nop
 80133b0:	20000028 	.word	0x20000028

080133b4 <_kill_r>:
 80133b4:	b538      	push	{r3, r4, r5, lr}
 80133b6:	4d07      	ldr	r5, [pc, #28]	; (80133d4 <_kill_r+0x20>)
 80133b8:	2300      	movs	r3, #0
 80133ba:	4604      	mov	r4, r0
 80133bc:	4608      	mov	r0, r1
 80133be:	4611      	mov	r1, r2
 80133c0:	602b      	str	r3, [r5, #0]
 80133c2:	f7f0 ff85 	bl	80042d0 <_kill>
 80133c6:	1c43      	adds	r3, r0, #1
 80133c8:	d102      	bne.n	80133d0 <_kill_r+0x1c>
 80133ca:	682b      	ldr	r3, [r5, #0]
 80133cc:	b103      	cbz	r3, 80133d0 <_kill_r+0x1c>
 80133ce:	6023      	str	r3, [r4, #0]
 80133d0:	bd38      	pop	{r3, r4, r5, pc}
 80133d2:	bf00      	nop
 80133d4:	20001a90 	.word	0x20001a90

080133d8 <_getpid_r>:
 80133d8:	f7f0 bf72 	b.w	80042c0 <_getpid>

080133dc <pow>:
 80133dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133e0:	ec59 8b10 	vmov	r8, r9, d0
 80133e4:	ec57 6b11 	vmov	r6, r7, d1
 80133e8:	f000 f8a6 	bl	8013538 <__ieee754_pow>
 80133ec:	4b4e      	ldr	r3, [pc, #312]	; (8013528 <pow+0x14c>)
 80133ee:	f993 3000 	ldrsb.w	r3, [r3]
 80133f2:	3301      	adds	r3, #1
 80133f4:	ec55 4b10 	vmov	r4, r5, d0
 80133f8:	d015      	beq.n	8013426 <pow+0x4a>
 80133fa:	4632      	mov	r2, r6
 80133fc:	463b      	mov	r3, r7
 80133fe:	4630      	mov	r0, r6
 8013400:	4639      	mov	r1, r7
 8013402:	f7ed fbb3 	bl	8000b6c <__aeabi_dcmpun>
 8013406:	b970      	cbnz	r0, 8013426 <pow+0x4a>
 8013408:	4642      	mov	r2, r8
 801340a:	464b      	mov	r3, r9
 801340c:	4640      	mov	r0, r8
 801340e:	4649      	mov	r1, r9
 8013410:	f7ed fbac 	bl	8000b6c <__aeabi_dcmpun>
 8013414:	2200      	movs	r2, #0
 8013416:	2300      	movs	r3, #0
 8013418:	b148      	cbz	r0, 801342e <pow+0x52>
 801341a:	4630      	mov	r0, r6
 801341c:	4639      	mov	r1, r7
 801341e:	f7ed fb73 	bl	8000b08 <__aeabi_dcmpeq>
 8013422:	2800      	cmp	r0, #0
 8013424:	d17d      	bne.n	8013522 <pow+0x146>
 8013426:	ec45 4b10 	vmov	d0, r4, r5
 801342a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801342e:	4640      	mov	r0, r8
 8013430:	4649      	mov	r1, r9
 8013432:	f7ed fb69 	bl	8000b08 <__aeabi_dcmpeq>
 8013436:	b1e0      	cbz	r0, 8013472 <pow+0x96>
 8013438:	2200      	movs	r2, #0
 801343a:	2300      	movs	r3, #0
 801343c:	4630      	mov	r0, r6
 801343e:	4639      	mov	r1, r7
 8013440:	f7ed fb62 	bl	8000b08 <__aeabi_dcmpeq>
 8013444:	2800      	cmp	r0, #0
 8013446:	d16c      	bne.n	8013522 <pow+0x146>
 8013448:	ec47 6b10 	vmov	d0, r6, r7
 801344c:	f000 fe53 	bl	80140f6 <finite>
 8013450:	2800      	cmp	r0, #0
 8013452:	d0e8      	beq.n	8013426 <pow+0x4a>
 8013454:	2200      	movs	r2, #0
 8013456:	2300      	movs	r3, #0
 8013458:	4630      	mov	r0, r6
 801345a:	4639      	mov	r1, r7
 801345c:	f7ed fb5e 	bl	8000b1c <__aeabi_dcmplt>
 8013460:	2800      	cmp	r0, #0
 8013462:	d0e0      	beq.n	8013426 <pow+0x4a>
 8013464:	f7fa fecc 	bl	800e200 <__errno>
 8013468:	2321      	movs	r3, #33	; 0x21
 801346a:	6003      	str	r3, [r0, #0]
 801346c:	2400      	movs	r4, #0
 801346e:	4d2f      	ldr	r5, [pc, #188]	; (801352c <pow+0x150>)
 8013470:	e7d9      	b.n	8013426 <pow+0x4a>
 8013472:	ec45 4b10 	vmov	d0, r4, r5
 8013476:	f000 fe3e 	bl	80140f6 <finite>
 801347a:	bbb8      	cbnz	r0, 80134ec <pow+0x110>
 801347c:	ec49 8b10 	vmov	d0, r8, r9
 8013480:	f000 fe39 	bl	80140f6 <finite>
 8013484:	b390      	cbz	r0, 80134ec <pow+0x110>
 8013486:	ec47 6b10 	vmov	d0, r6, r7
 801348a:	f000 fe34 	bl	80140f6 <finite>
 801348e:	b368      	cbz	r0, 80134ec <pow+0x110>
 8013490:	4622      	mov	r2, r4
 8013492:	462b      	mov	r3, r5
 8013494:	4620      	mov	r0, r4
 8013496:	4629      	mov	r1, r5
 8013498:	f7ed fb68 	bl	8000b6c <__aeabi_dcmpun>
 801349c:	b160      	cbz	r0, 80134b8 <pow+0xdc>
 801349e:	f7fa feaf 	bl	800e200 <__errno>
 80134a2:	2321      	movs	r3, #33	; 0x21
 80134a4:	6003      	str	r3, [r0, #0]
 80134a6:	2200      	movs	r2, #0
 80134a8:	2300      	movs	r3, #0
 80134aa:	4610      	mov	r0, r2
 80134ac:	4619      	mov	r1, r3
 80134ae:	f7ed f9ed 	bl	800088c <__aeabi_ddiv>
 80134b2:	4604      	mov	r4, r0
 80134b4:	460d      	mov	r5, r1
 80134b6:	e7b6      	b.n	8013426 <pow+0x4a>
 80134b8:	f7fa fea2 	bl	800e200 <__errno>
 80134bc:	2322      	movs	r3, #34	; 0x22
 80134be:	6003      	str	r3, [r0, #0]
 80134c0:	2200      	movs	r2, #0
 80134c2:	2300      	movs	r3, #0
 80134c4:	4640      	mov	r0, r8
 80134c6:	4649      	mov	r1, r9
 80134c8:	f7ed fb28 	bl	8000b1c <__aeabi_dcmplt>
 80134cc:	2400      	movs	r4, #0
 80134ce:	b158      	cbz	r0, 80134e8 <pow+0x10c>
 80134d0:	ec47 6b10 	vmov	d0, r6, r7
 80134d4:	f000 fe1a 	bl	801410c <rint>
 80134d8:	4632      	mov	r2, r6
 80134da:	ec51 0b10 	vmov	r0, r1, d0
 80134de:	463b      	mov	r3, r7
 80134e0:	f7ed fb12 	bl	8000b08 <__aeabi_dcmpeq>
 80134e4:	2800      	cmp	r0, #0
 80134e6:	d0c2      	beq.n	801346e <pow+0x92>
 80134e8:	4d11      	ldr	r5, [pc, #68]	; (8013530 <pow+0x154>)
 80134ea:	e79c      	b.n	8013426 <pow+0x4a>
 80134ec:	2200      	movs	r2, #0
 80134ee:	2300      	movs	r3, #0
 80134f0:	4620      	mov	r0, r4
 80134f2:	4629      	mov	r1, r5
 80134f4:	f7ed fb08 	bl	8000b08 <__aeabi_dcmpeq>
 80134f8:	2800      	cmp	r0, #0
 80134fa:	d094      	beq.n	8013426 <pow+0x4a>
 80134fc:	ec49 8b10 	vmov	d0, r8, r9
 8013500:	f000 fdf9 	bl	80140f6 <finite>
 8013504:	2800      	cmp	r0, #0
 8013506:	d08e      	beq.n	8013426 <pow+0x4a>
 8013508:	ec47 6b10 	vmov	d0, r6, r7
 801350c:	f000 fdf3 	bl	80140f6 <finite>
 8013510:	2800      	cmp	r0, #0
 8013512:	d088      	beq.n	8013426 <pow+0x4a>
 8013514:	f7fa fe74 	bl	800e200 <__errno>
 8013518:	2322      	movs	r3, #34	; 0x22
 801351a:	6003      	str	r3, [r0, #0]
 801351c:	2400      	movs	r4, #0
 801351e:	2500      	movs	r5, #0
 8013520:	e781      	b.n	8013426 <pow+0x4a>
 8013522:	4d04      	ldr	r5, [pc, #16]	; (8013534 <pow+0x158>)
 8013524:	2400      	movs	r4, #0
 8013526:	e77e      	b.n	8013426 <pow+0x4a>
 8013528:	200001fc 	.word	0x200001fc
 801352c:	fff00000 	.word	0xfff00000
 8013530:	7ff00000 	.word	0x7ff00000
 8013534:	3ff00000 	.word	0x3ff00000

08013538 <__ieee754_pow>:
 8013538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801353c:	ed2d 8b06 	vpush	{d8-d10}
 8013540:	b08d      	sub	sp, #52	; 0x34
 8013542:	ed8d 1b02 	vstr	d1, [sp, #8]
 8013546:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801354a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801354e:	ea56 0100 	orrs.w	r1, r6, r0
 8013552:	ec53 2b10 	vmov	r2, r3, d0
 8013556:	f000 84d1 	beq.w	8013efc <__ieee754_pow+0x9c4>
 801355a:	497f      	ldr	r1, [pc, #508]	; (8013758 <__ieee754_pow+0x220>)
 801355c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8013560:	428c      	cmp	r4, r1
 8013562:	ee10 8a10 	vmov	r8, s0
 8013566:	4699      	mov	r9, r3
 8013568:	dc09      	bgt.n	801357e <__ieee754_pow+0x46>
 801356a:	d103      	bne.n	8013574 <__ieee754_pow+0x3c>
 801356c:	b97a      	cbnz	r2, 801358e <__ieee754_pow+0x56>
 801356e:	42a6      	cmp	r6, r4
 8013570:	dd02      	ble.n	8013578 <__ieee754_pow+0x40>
 8013572:	e00c      	b.n	801358e <__ieee754_pow+0x56>
 8013574:	428e      	cmp	r6, r1
 8013576:	dc02      	bgt.n	801357e <__ieee754_pow+0x46>
 8013578:	428e      	cmp	r6, r1
 801357a:	d110      	bne.n	801359e <__ieee754_pow+0x66>
 801357c:	b178      	cbz	r0, 801359e <__ieee754_pow+0x66>
 801357e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013582:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013586:	ea54 0308 	orrs.w	r3, r4, r8
 801358a:	f000 84b7 	beq.w	8013efc <__ieee754_pow+0x9c4>
 801358e:	4873      	ldr	r0, [pc, #460]	; (801375c <__ieee754_pow+0x224>)
 8013590:	b00d      	add	sp, #52	; 0x34
 8013592:	ecbd 8b06 	vpop	{d8-d10}
 8013596:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801359a:	f7ff bd31 	b.w	8013000 <nan>
 801359e:	f1b9 0f00 	cmp.w	r9, #0
 80135a2:	da36      	bge.n	8013612 <__ieee754_pow+0xda>
 80135a4:	496e      	ldr	r1, [pc, #440]	; (8013760 <__ieee754_pow+0x228>)
 80135a6:	428e      	cmp	r6, r1
 80135a8:	dc51      	bgt.n	801364e <__ieee754_pow+0x116>
 80135aa:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80135ae:	428e      	cmp	r6, r1
 80135b0:	f340 84af 	ble.w	8013f12 <__ieee754_pow+0x9da>
 80135b4:	1531      	asrs	r1, r6, #20
 80135b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80135ba:	2914      	cmp	r1, #20
 80135bc:	dd0f      	ble.n	80135de <__ieee754_pow+0xa6>
 80135be:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80135c2:	fa20 fc01 	lsr.w	ip, r0, r1
 80135c6:	fa0c f101 	lsl.w	r1, ip, r1
 80135ca:	4281      	cmp	r1, r0
 80135cc:	f040 84a1 	bne.w	8013f12 <__ieee754_pow+0x9da>
 80135d0:	f00c 0c01 	and.w	ip, ip, #1
 80135d4:	f1cc 0102 	rsb	r1, ip, #2
 80135d8:	9100      	str	r1, [sp, #0]
 80135da:	b180      	cbz	r0, 80135fe <__ieee754_pow+0xc6>
 80135dc:	e059      	b.n	8013692 <__ieee754_pow+0x15a>
 80135de:	2800      	cmp	r0, #0
 80135e0:	d155      	bne.n	801368e <__ieee754_pow+0x156>
 80135e2:	f1c1 0114 	rsb	r1, r1, #20
 80135e6:	fa46 fc01 	asr.w	ip, r6, r1
 80135ea:	fa0c f101 	lsl.w	r1, ip, r1
 80135ee:	42b1      	cmp	r1, r6
 80135f0:	f040 848c 	bne.w	8013f0c <__ieee754_pow+0x9d4>
 80135f4:	f00c 0c01 	and.w	ip, ip, #1
 80135f8:	f1cc 0102 	rsb	r1, ip, #2
 80135fc:	9100      	str	r1, [sp, #0]
 80135fe:	4959      	ldr	r1, [pc, #356]	; (8013764 <__ieee754_pow+0x22c>)
 8013600:	428e      	cmp	r6, r1
 8013602:	d12d      	bne.n	8013660 <__ieee754_pow+0x128>
 8013604:	2f00      	cmp	r7, #0
 8013606:	da79      	bge.n	80136fc <__ieee754_pow+0x1c4>
 8013608:	4956      	ldr	r1, [pc, #344]	; (8013764 <__ieee754_pow+0x22c>)
 801360a:	2000      	movs	r0, #0
 801360c:	f7ed f93e 	bl	800088c <__aeabi_ddiv>
 8013610:	e016      	b.n	8013640 <__ieee754_pow+0x108>
 8013612:	2100      	movs	r1, #0
 8013614:	9100      	str	r1, [sp, #0]
 8013616:	2800      	cmp	r0, #0
 8013618:	d13b      	bne.n	8013692 <__ieee754_pow+0x15a>
 801361a:	494f      	ldr	r1, [pc, #316]	; (8013758 <__ieee754_pow+0x220>)
 801361c:	428e      	cmp	r6, r1
 801361e:	d1ee      	bne.n	80135fe <__ieee754_pow+0xc6>
 8013620:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013624:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013628:	ea53 0308 	orrs.w	r3, r3, r8
 801362c:	f000 8466 	beq.w	8013efc <__ieee754_pow+0x9c4>
 8013630:	4b4d      	ldr	r3, [pc, #308]	; (8013768 <__ieee754_pow+0x230>)
 8013632:	429c      	cmp	r4, r3
 8013634:	dd0d      	ble.n	8013652 <__ieee754_pow+0x11a>
 8013636:	2f00      	cmp	r7, #0
 8013638:	f280 8464 	bge.w	8013f04 <__ieee754_pow+0x9cc>
 801363c:	2000      	movs	r0, #0
 801363e:	2100      	movs	r1, #0
 8013640:	ec41 0b10 	vmov	d0, r0, r1
 8013644:	b00d      	add	sp, #52	; 0x34
 8013646:	ecbd 8b06 	vpop	{d8-d10}
 801364a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801364e:	2102      	movs	r1, #2
 8013650:	e7e0      	b.n	8013614 <__ieee754_pow+0xdc>
 8013652:	2f00      	cmp	r7, #0
 8013654:	daf2      	bge.n	801363c <__ieee754_pow+0x104>
 8013656:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801365a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801365e:	e7ef      	b.n	8013640 <__ieee754_pow+0x108>
 8013660:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8013664:	d104      	bne.n	8013670 <__ieee754_pow+0x138>
 8013666:	4610      	mov	r0, r2
 8013668:	4619      	mov	r1, r3
 801366a:	f7ec ffe5 	bl	8000638 <__aeabi_dmul>
 801366e:	e7e7      	b.n	8013640 <__ieee754_pow+0x108>
 8013670:	493e      	ldr	r1, [pc, #248]	; (801376c <__ieee754_pow+0x234>)
 8013672:	428f      	cmp	r7, r1
 8013674:	d10d      	bne.n	8013692 <__ieee754_pow+0x15a>
 8013676:	f1b9 0f00 	cmp.w	r9, #0
 801367a:	db0a      	blt.n	8013692 <__ieee754_pow+0x15a>
 801367c:	ec43 2b10 	vmov	d0, r2, r3
 8013680:	b00d      	add	sp, #52	; 0x34
 8013682:	ecbd 8b06 	vpop	{d8-d10}
 8013686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801368a:	f000 bc77 	b.w	8013f7c <__ieee754_sqrt>
 801368e:	2100      	movs	r1, #0
 8013690:	9100      	str	r1, [sp, #0]
 8013692:	ec43 2b10 	vmov	d0, r2, r3
 8013696:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801369a:	f000 fd23 	bl	80140e4 <fabs>
 801369e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80136a2:	ec51 0b10 	vmov	r0, r1, d0
 80136a6:	f1b8 0f00 	cmp.w	r8, #0
 80136aa:	d12a      	bne.n	8013702 <__ieee754_pow+0x1ca>
 80136ac:	b12c      	cbz	r4, 80136ba <__ieee754_pow+0x182>
 80136ae:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8013764 <__ieee754_pow+0x22c>
 80136b2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80136b6:	45e6      	cmp	lr, ip
 80136b8:	d123      	bne.n	8013702 <__ieee754_pow+0x1ca>
 80136ba:	2f00      	cmp	r7, #0
 80136bc:	da05      	bge.n	80136ca <__ieee754_pow+0x192>
 80136be:	4602      	mov	r2, r0
 80136c0:	460b      	mov	r3, r1
 80136c2:	2000      	movs	r0, #0
 80136c4:	4927      	ldr	r1, [pc, #156]	; (8013764 <__ieee754_pow+0x22c>)
 80136c6:	f7ed f8e1 	bl	800088c <__aeabi_ddiv>
 80136ca:	f1b9 0f00 	cmp.w	r9, #0
 80136ce:	dab7      	bge.n	8013640 <__ieee754_pow+0x108>
 80136d0:	9b00      	ldr	r3, [sp, #0]
 80136d2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80136d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80136da:	4323      	orrs	r3, r4
 80136dc:	d108      	bne.n	80136f0 <__ieee754_pow+0x1b8>
 80136de:	4602      	mov	r2, r0
 80136e0:	460b      	mov	r3, r1
 80136e2:	4610      	mov	r0, r2
 80136e4:	4619      	mov	r1, r3
 80136e6:	f7ec fdef 	bl	80002c8 <__aeabi_dsub>
 80136ea:	4602      	mov	r2, r0
 80136ec:	460b      	mov	r3, r1
 80136ee:	e78d      	b.n	801360c <__ieee754_pow+0xd4>
 80136f0:	9b00      	ldr	r3, [sp, #0]
 80136f2:	2b01      	cmp	r3, #1
 80136f4:	d1a4      	bne.n	8013640 <__ieee754_pow+0x108>
 80136f6:	4602      	mov	r2, r0
 80136f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80136fc:	4610      	mov	r0, r2
 80136fe:	4619      	mov	r1, r3
 8013700:	e79e      	b.n	8013640 <__ieee754_pow+0x108>
 8013702:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8013706:	f10c 35ff 	add.w	r5, ip, #4294967295
 801370a:	950a      	str	r5, [sp, #40]	; 0x28
 801370c:	9d00      	ldr	r5, [sp, #0]
 801370e:	46ac      	mov	ip, r5
 8013710:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013712:	ea5c 0505 	orrs.w	r5, ip, r5
 8013716:	d0e4      	beq.n	80136e2 <__ieee754_pow+0x1aa>
 8013718:	4b15      	ldr	r3, [pc, #84]	; (8013770 <__ieee754_pow+0x238>)
 801371a:	429e      	cmp	r6, r3
 801371c:	f340 80fc 	ble.w	8013918 <__ieee754_pow+0x3e0>
 8013720:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013724:	429e      	cmp	r6, r3
 8013726:	4b10      	ldr	r3, [pc, #64]	; (8013768 <__ieee754_pow+0x230>)
 8013728:	dd07      	ble.n	801373a <__ieee754_pow+0x202>
 801372a:	429c      	cmp	r4, r3
 801372c:	dc0a      	bgt.n	8013744 <__ieee754_pow+0x20c>
 801372e:	2f00      	cmp	r7, #0
 8013730:	da84      	bge.n	801363c <__ieee754_pow+0x104>
 8013732:	a307      	add	r3, pc, #28	; (adr r3, 8013750 <__ieee754_pow+0x218>)
 8013734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013738:	e795      	b.n	8013666 <__ieee754_pow+0x12e>
 801373a:	429c      	cmp	r4, r3
 801373c:	dbf7      	blt.n	801372e <__ieee754_pow+0x1f6>
 801373e:	4b09      	ldr	r3, [pc, #36]	; (8013764 <__ieee754_pow+0x22c>)
 8013740:	429c      	cmp	r4, r3
 8013742:	dd17      	ble.n	8013774 <__ieee754_pow+0x23c>
 8013744:	2f00      	cmp	r7, #0
 8013746:	dcf4      	bgt.n	8013732 <__ieee754_pow+0x1fa>
 8013748:	e778      	b.n	801363c <__ieee754_pow+0x104>
 801374a:	bf00      	nop
 801374c:	f3af 8000 	nop.w
 8013750:	8800759c 	.word	0x8800759c
 8013754:	7e37e43c 	.word	0x7e37e43c
 8013758:	7ff00000 	.word	0x7ff00000
 801375c:	08014c23 	.word	0x08014c23
 8013760:	433fffff 	.word	0x433fffff
 8013764:	3ff00000 	.word	0x3ff00000
 8013768:	3fefffff 	.word	0x3fefffff
 801376c:	3fe00000 	.word	0x3fe00000
 8013770:	41e00000 	.word	0x41e00000
 8013774:	4b64      	ldr	r3, [pc, #400]	; (8013908 <__ieee754_pow+0x3d0>)
 8013776:	2200      	movs	r2, #0
 8013778:	f7ec fda6 	bl	80002c8 <__aeabi_dsub>
 801377c:	a356      	add	r3, pc, #344	; (adr r3, 80138d8 <__ieee754_pow+0x3a0>)
 801377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013782:	4604      	mov	r4, r0
 8013784:	460d      	mov	r5, r1
 8013786:	f7ec ff57 	bl	8000638 <__aeabi_dmul>
 801378a:	a355      	add	r3, pc, #340	; (adr r3, 80138e0 <__ieee754_pow+0x3a8>)
 801378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013790:	4606      	mov	r6, r0
 8013792:	460f      	mov	r7, r1
 8013794:	4620      	mov	r0, r4
 8013796:	4629      	mov	r1, r5
 8013798:	f7ec ff4e 	bl	8000638 <__aeabi_dmul>
 801379c:	4b5b      	ldr	r3, [pc, #364]	; (801390c <__ieee754_pow+0x3d4>)
 801379e:	4682      	mov	sl, r0
 80137a0:	468b      	mov	fp, r1
 80137a2:	2200      	movs	r2, #0
 80137a4:	4620      	mov	r0, r4
 80137a6:	4629      	mov	r1, r5
 80137a8:	f7ec ff46 	bl	8000638 <__aeabi_dmul>
 80137ac:	4602      	mov	r2, r0
 80137ae:	460b      	mov	r3, r1
 80137b0:	a14d      	add	r1, pc, #308	; (adr r1, 80138e8 <__ieee754_pow+0x3b0>)
 80137b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137b6:	f7ec fd87 	bl	80002c8 <__aeabi_dsub>
 80137ba:	4622      	mov	r2, r4
 80137bc:	462b      	mov	r3, r5
 80137be:	f7ec ff3b 	bl	8000638 <__aeabi_dmul>
 80137c2:	4602      	mov	r2, r0
 80137c4:	460b      	mov	r3, r1
 80137c6:	2000      	movs	r0, #0
 80137c8:	4951      	ldr	r1, [pc, #324]	; (8013910 <__ieee754_pow+0x3d8>)
 80137ca:	f7ec fd7d 	bl	80002c8 <__aeabi_dsub>
 80137ce:	4622      	mov	r2, r4
 80137d0:	4680      	mov	r8, r0
 80137d2:	4689      	mov	r9, r1
 80137d4:	462b      	mov	r3, r5
 80137d6:	4620      	mov	r0, r4
 80137d8:	4629      	mov	r1, r5
 80137da:	f7ec ff2d 	bl	8000638 <__aeabi_dmul>
 80137de:	4602      	mov	r2, r0
 80137e0:	460b      	mov	r3, r1
 80137e2:	4640      	mov	r0, r8
 80137e4:	4649      	mov	r1, r9
 80137e6:	f7ec ff27 	bl	8000638 <__aeabi_dmul>
 80137ea:	a341      	add	r3, pc, #260	; (adr r3, 80138f0 <__ieee754_pow+0x3b8>)
 80137ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137f0:	f7ec ff22 	bl	8000638 <__aeabi_dmul>
 80137f4:	4602      	mov	r2, r0
 80137f6:	460b      	mov	r3, r1
 80137f8:	4650      	mov	r0, sl
 80137fa:	4659      	mov	r1, fp
 80137fc:	f7ec fd64 	bl	80002c8 <__aeabi_dsub>
 8013800:	4602      	mov	r2, r0
 8013802:	460b      	mov	r3, r1
 8013804:	4680      	mov	r8, r0
 8013806:	4689      	mov	r9, r1
 8013808:	4630      	mov	r0, r6
 801380a:	4639      	mov	r1, r7
 801380c:	f7ec fd5e 	bl	80002cc <__adddf3>
 8013810:	2400      	movs	r4, #0
 8013812:	4632      	mov	r2, r6
 8013814:	463b      	mov	r3, r7
 8013816:	4620      	mov	r0, r4
 8013818:	460d      	mov	r5, r1
 801381a:	f7ec fd55 	bl	80002c8 <__aeabi_dsub>
 801381e:	4602      	mov	r2, r0
 8013820:	460b      	mov	r3, r1
 8013822:	4640      	mov	r0, r8
 8013824:	4649      	mov	r1, r9
 8013826:	f7ec fd4f 	bl	80002c8 <__aeabi_dsub>
 801382a:	9b00      	ldr	r3, [sp, #0]
 801382c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801382e:	3b01      	subs	r3, #1
 8013830:	4313      	orrs	r3, r2
 8013832:	4682      	mov	sl, r0
 8013834:	468b      	mov	fp, r1
 8013836:	f040 81f1 	bne.w	8013c1c <__ieee754_pow+0x6e4>
 801383a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80138f8 <__ieee754_pow+0x3c0>
 801383e:	eeb0 8a47 	vmov.f32	s16, s14
 8013842:	eef0 8a67 	vmov.f32	s17, s15
 8013846:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801384a:	2600      	movs	r6, #0
 801384c:	4632      	mov	r2, r6
 801384e:	463b      	mov	r3, r7
 8013850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013854:	f7ec fd38 	bl	80002c8 <__aeabi_dsub>
 8013858:	4622      	mov	r2, r4
 801385a:	462b      	mov	r3, r5
 801385c:	f7ec feec 	bl	8000638 <__aeabi_dmul>
 8013860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013864:	4680      	mov	r8, r0
 8013866:	4689      	mov	r9, r1
 8013868:	4650      	mov	r0, sl
 801386a:	4659      	mov	r1, fp
 801386c:	f7ec fee4 	bl	8000638 <__aeabi_dmul>
 8013870:	4602      	mov	r2, r0
 8013872:	460b      	mov	r3, r1
 8013874:	4640      	mov	r0, r8
 8013876:	4649      	mov	r1, r9
 8013878:	f7ec fd28 	bl	80002cc <__adddf3>
 801387c:	4632      	mov	r2, r6
 801387e:	463b      	mov	r3, r7
 8013880:	4680      	mov	r8, r0
 8013882:	4689      	mov	r9, r1
 8013884:	4620      	mov	r0, r4
 8013886:	4629      	mov	r1, r5
 8013888:	f7ec fed6 	bl	8000638 <__aeabi_dmul>
 801388c:	460b      	mov	r3, r1
 801388e:	4604      	mov	r4, r0
 8013890:	460d      	mov	r5, r1
 8013892:	4602      	mov	r2, r0
 8013894:	4649      	mov	r1, r9
 8013896:	4640      	mov	r0, r8
 8013898:	f7ec fd18 	bl	80002cc <__adddf3>
 801389c:	4b1d      	ldr	r3, [pc, #116]	; (8013914 <__ieee754_pow+0x3dc>)
 801389e:	4299      	cmp	r1, r3
 80138a0:	ec45 4b19 	vmov	d9, r4, r5
 80138a4:	4606      	mov	r6, r0
 80138a6:	460f      	mov	r7, r1
 80138a8:	468b      	mov	fp, r1
 80138aa:	f340 82fe 	ble.w	8013eaa <__ieee754_pow+0x972>
 80138ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80138b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80138b6:	4303      	orrs	r3, r0
 80138b8:	f000 81f0 	beq.w	8013c9c <__ieee754_pow+0x764>
 80138bc:	a310      	add	r3, pc, #64	; (adr r3, 8013900 <__ieee754_pow+0x3c8>)
 80138be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138c2:	ec51 0b18 	vmov	r0, r1, d8
 80138c6:	f7ec feb7 	bl	8000638 <__aeabi_dmul>
 80138ca:	a30d      	add	r3, pc, #52	; (adr r3, 8013900 <__ieee754_pow+0x3c8>)
 80138cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d0:	e6cb      	b.n	801366a <__ieee754_pow+0x132>
 80138d2:	bf00      	nop
 80138d4:	f3af 8000 	nop.w
 80138d8:	60000000 	.word	0x60000000
 80138dc:	3ff71547 	.word	0x3ff71547
 80138e0:	f85ddf44 	.word	0xf85ddf44
 80138e4:	3e54ae0b 	.word	0x3e54ae0b
 80138e8:	55555555 	.word	0x55555555
 80138ec:	3fd55555 	.word	0x3fd55555
 80138f0:	652b82fe 	.word	0x652b82fe
 80138f4:	3ff71547 	.word	0x3ff71547
 80138f8:	00000000 	.word	0x00000000
 80138fc:	bff00000 	.word	0xbff00000
 8013900:	8800759c 	.word	0x8800759c
 8013904:	7e37e43c 	.word	0x7e37e43c
 8013908:	3ff00000 	.word	0x3ff00000
 801390c:	3fd00000 	.word	0x3fd00000
 8013910:	3fe00000 	.word	0x3fe00000
 8013914:	408fffff 	.word	0x408fffff
 8013918:	4bd7      	ldr	r3, [pc, #860]	; (8013c78 <__ieee754_pow+0x740>)
 801391a:	ea03 0309 	and.w	r3, r3, r9
 801391e:	2200      	movs	r2, #0
 8013920:	b92b      	cbnz	r3, 801392e <__ieee754_pow+0x3f6>
 8013922:	4bd6      	ldr	r3, [pc, #856]	; (8013c7c <__ieee754_pow+0x744>)
 8013924:	f7ec fe88 	bl	8000638 <__aeabi_dmul>
 8013928:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801392c:	460c      	mov	r4, r1
 801392e:	1523      	asrs	r3, r4, #20
 8013930:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013934:	4413      	add	r3, r2
 8013936:	9309      	str	r3, [sp, #36]	; 0x24
 8013938:	4bd1      	ldr	r3, [pc, #836]	; (8013c80 <__ieee754_pow+0x748>)
 801393a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801393e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013942:	429c      	cmp	r4, r3
 8013944:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013948:	dd08      	ble.n	801395c <__ieee754_pow+0x424>
 801394a:	4bce      	ldr	r3, [pc, #824]	; (8013c84 <__ieee754_pow+0x74c>)
 801394c:	429c      	cmp	r4, r3
 801394e:	f340 8163 	ble.w	8013c18 <__ieee754_pow+0x6e0>
 8013952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013954:	3301      	adds	r3, #1
 8013956:	9309      	str	r3, [sp, #36]	; 0x24
 8013958:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801395c:	2400      	movs	r4, #0
 801395e:	00e3      	lsls	r3, r4, #3
 8013960:	930b      	str	r3, [sp, #44]	; 0x2c
 8013962:	4bc9      	ldr	r3, [pc, #804]	; (8013c88 <__ieee754_pow+0x750>)
 8013964:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013968:	ed93 7b00 	vldr	d7, [r3]
 801396c:	4629      	mov	r1, r5
 801396e:	ec53 2b17 	vmov	r2, r3, d7
 8013972:	eeb0 8a47 	vmov.f32	s16, s14
 8013976:	eef0 8a67 	vmov.f32	s17, s15
 801397a:	4682      	mov	sl, r0
 801397c:	f7ec fca4 	bl	80002c8 <__aeabi_dsub>
 8013980:	4652      	mov	r2, sl
 8013982:	4606      	mov	r6, r0
 8013984:	460f      	mov	r7, r1
 8013986:	462b      	mov	r3, r5
 8013988:	ec51 0b18 	vmov	r0, r1, d8
 801398c:	f7ec fc9e 	bl	80002cc <__adddf3>
 8013990:	4602      	mov	r2, r0
 8013992:	460b      	mov	r3, r1
 8013994:	2000      	movs	r0, #0
 8013996:	49bd      	ldr	r1, [pc, #756]	; (8013c8c <__ieee754_pow+0x754>)
 8013998:	f7ec ff78 	bl	800088c <__aeabi_ddiv>
 801399c:	ec41 0b19 	vmov	d9, r0, r1
 80139a0:	4602      	mov	r2, r0
 80139a2:	460b      	mov	r3, r1
 80139a4:	4630      	mov	r0, r6
 80139a6:	4639      	mov	r1, r7
 80139a8:	f7ec fe46 	bl	8000638 <__aeabi_dmul>
 80139ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80139b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80139b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80139b8:	2300      	movs	r3, #0
 80139ba:	9304      	str	r3, [sp, #16]
 80139bc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80139c0:	46ab      	mov	fp, r5
 80139c2:	106d      	asrs	r5, r5, #1
 80139c4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80139c8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80139cc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80139d0:	2200      	movs	r2, #0
 80139d2:	4640      	mov	r0, r8
 80139d4:	4649      	mov	r1, r9
 80139d6:	4614      	mov	r4, r2
 80139d8:	461d      	mov	r5, r3
 80139da:	f7ec fe2d 	bl	8000638 <__aeabi_dmul>
 80139de:	4602      	mov	r2, r0
 80139e0:	460b      	mov	r3, r1
 80139e2:	4630      	mov	r0, r6
 80139e4:	4639      	mov	r1, r7
 80139e6:	f7ec fc6f 	bl	80002c8 <__aeabi_dsub>
 80139ea:	ec53 2b18 	vmov	r2, r3, d8
 80139ee:	4606      	mov	r6, r0
 80139f0:	460f      	mov	r7, r1
 80139f2:	4620      	mov	r0, r4
 80139f4:	4629      	mov	r1, r5
 80139f6:	f7ec fc67 	bl	80002c8 <__aeabi_dsub>
 80139fa:	4602      	mov	r2, r0
 80139fc:	460b      	mov	r3, r1
 80139fe:	4650      	mov	r0, sl
 8013a00:	4659      	mov	r1, fp
 8013a02:	f7ec fc61 	bl	80002c8 <__aeabi_dsub>
 8013a06:	4642      	mov	r2, r8
 8013a08:	464b      	mov	r3, r9
 8013a0a:	f7ec fe15 	bl	8000638 <__aeabi_dmul>
 8013a0e:	4602      	mov	r2, r0
 8013a10:	460b      	mov	r3, r1
 8013a12:	4630      	mov	r0, r6
 8013a14:	4639      	mov	r1, r7
 8013a16:	f7ec fc57 	bl	80002c8 <__aeabi_dsub>
 8013a1a:	ec53 2b19 	vmov	r2, r3, d9
 8013a1e:	f7ec fe0b 	bl	8000638 <__aeabi_dmul>
 8013a22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a26:	ec41 0b18 	vmov	d8, r0, r1
 8013a2a:	4610      	mov	r0, r2
 8013a2c:	4619      	mov	r1, r3
 8013a2e:	f7ec fe03 	bl	8000638 <__aeabi_dmul>
 8013a32:	a37d      	add	r3, pc, #500	; (adr r3, 8013c28 <__ieee754_pow+0x6f0>)
 8013a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a38:	4604      	mov	r4, r0
 8013a3a:	460d      	mov	r5, r1
 8013a3c:	f7ec fdfc 	bl	8000638 <__aeabi_dmul>
 8013a40:	a37b      	add	r3, pc, #492	; (adr r3, 8013c30 <__ieee754_pow+0x6f8>)
 8013a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a46:	f7ec fc41 	bl	80002cc <__adddf3>
 8013a4a:	4622      	mov	r2, r4
 8013a4c:	462b      	mov	r3, r5
 8013a4e:	f7ec fdf3 	bl	8000638 <__aeabi_dmul>
 8013a52:	a379      	add	r3, pc, #484	; (adr r3, 8013c38 <__ieee754_pow+0x700>)
 8013a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a58:	f7ec fc38 	bl	80002cc <__adddf3>
 8013a5c:	4622      	mov	r2, r4
 8013a5e:	462b      	mov	r3, r5
 8013a60:	f7ec fdea 	bl	8000638 <__aeabi_dmul>
 8013a64:	a376      	add	r3, pc, #472	; (adr r3, 8013c40 <__ieee754_pow+0x708>)
 8013a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a6a:	f7ec fc2f 	bl	80002cc <__adddf3>
 8013a6e:	4622      	mov	r2, r4
 8013a70:	462b      	mov	r3, r5
 8013a72:	f7ec fde1 	bl	8000638 <__aeabi_dmul>
 8013a76:	a374      	add	r3, pc, #464	; (adr r3, 8013c48 <__ieee754_pow+0x710>)
 8013a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a7c:	f7ec fc26 	bl	80002cc <__adddf3>
 8013a80:	4622      	mov	r2, r4
 8013a82:	462b      	mov	r3, r5
 8013a84:	f7ec fdd8 	bl	8000638 <__aeabi_dmul>
 8013a88:	a371      	add	r3, pc, #452	; (adr r3, 8013c50 <__ieee754_pow+0x718>)
 8013a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a8e:	f7ec fc1d 	bl	80002cc <__adddf3>
 8013a92:	4622      	mov	r2, r4
 8013a94:	4606      	mov	r6, r0
 8013a96:	460f      	mov	r7, r1
 8013a98:	462b      	mov	r3, r5
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	4629      	mov	r1, r5
 8013a9e:	f7ec fdcb 	bl	8000638 <__aeabi_dmul>
 8013aa2:	4602      	mov	r2, r0
 8013aa4:	460b      	mov	r3, r1
 8013aa6:	4630      	mov	r0, r6
 8013aa8:	4639      	mov	r1, r7
 8013aaa:	f7ec fdc5 	bl	8000638 <__aeabi_dmul>
 8013aae:	4642      	mov	r2, r8
 8013ab0:	4604      	mov	r4, r0
 8013ab2:	460d      	mov	r5, r1
 8013ab4:	464b      	mov	r3, r9
 8013ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013aba:	f7ec fc07 	bl	80002cc <__adddf3>
 8013abe:	ec53 2b18 	vmov	r2, r3, d8
 8013ac2:	f7ec fdb9 	bl	8000638 <__aeabi_dmul>
 8013ac6:	4622      	mov	r2, r4
 8013ac8:	462b      	mov	r3, r5
 8013aca:	f7ec fbff 	bl	80002cc <__adddf3>
 8013ace:	4642      	mov	r2, r8
 8013ad0:	4682      	mov	sl, r0
 8013ad2:	468b      	mov	fp, r1
 8013ad4:	464b      	mov	r3, r9
 8013ad6:	4640      	mov	r0, r8
 8013ad8:	4649      	mov	r1, r9
 8013ada:	f7ec fdad 	bl	8000638 <__aeabi_dmul>
 8013ade:	4b6c      	ldr	r3, [pc, #432]	; (8013c90 <__ieee754_pow+0x758>)
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	4606      	mov	r6, r0
 8013ae4:	460f      	mov	r7, r1
 8013ae6:	f7ec fbf1 	bl	80002cc <__adddf3>
 8013aea:	4652      	mov	r2, sl
 8013aec:	465b      	mov	r3, fp
 8013aee:	f7ec fbed 	bl	80002cc <__adddf3>
 8013af2:	9c04      	ldr	r4, [sp, #16]
 8013af4:	460d      	mov	r5, r1
 8013af6:	4622      	mov	r2, r4
 8013af8:	460b      	mov	r3, r1
 8013afa:	4640      	mov	r0, r8
 8013afc:	4649      	mov	r1, r9
 8013afe:	f7ec fd9b 	bl	8000638 <__aeabi_dmul>
 8013b02:	4b63      	ldr	r3, [pc, #396]	; (8013c90 <__ieee754_pow+0x758>)
 8013b04:	4680      	mov	r8, r0
 8013b06:	4689      	mov	r9, r1
 8013b08:	2200      	movs	r2, #0
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	4629      	mov	r1, r5
 8013b0e:	f7ec fbdb 	bl	80002c8 <__aeabi_dsub>
 8013b12:	4632      	mov	r2, r6
 8013b14:	463b      	mov	r3, r7
 8013b16:	f7ec fbd7 	bl	80002c8 <__aeabi_dsub>
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	460b      	mov	r3, r1
 8013b1e:	4650      	mov	r0, sl
 8013b20:	4659      	mov	r1, fp
 8013b22:	f7ec fbd1 	bl	80002c8 <__aeabi_dsub>
 8013b26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b2a:	f7ec fd85 	bl	8000638 <__aeabi_dmul>
 8013b2e:	4622      	mov	r2, r4
 8013b30:	4606      	mov	r6, r0
 8013b32:	460f      	mov	r7, r1
 8013b34:	462b      	mov	r3, r5
 8013b36:	ec51 0b18 	vmov	r0, r1, d8
 8013b3a:	f7ec fd7d 	bl	8000638 <__aeabi_dmul>
 8013b3e:	4602      	mov	r2, r0
 8013b40:	460b      	mov	r3, r1
 8013b42:	4630      	mov	r0, r6
 8013b44:	4639      	mov	r1, r7
 8013b46:	f7ec fbc1 	bl	80002cc <__adddf3>
 8013b4a:	4606      	mov	r6, r0
 8013b4c:	460f      	mov	r7, r1
 8013b4e:	4602      	mov	r2, r0
 8013b50:	460b      	mov	r3, r1
 8013b52:	4640      	mov	r0, r8
 8013b54:	4649      	mov	r1, r9
 8013b56:	f7ec fbb9 	bl	80002cc <__adddf3>
 8013b5a:	9c04      	ldr	r4, [sp, #16]
 8013b5c:	a33e      	add	r3, pc, #248	; (adr r3, 8013c58 <__ieee754_pow+0x720>)
 8013b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b62:	4620      	mov	r0, r4
 8013b64:	460d      	mov	r5, r1
 8013b66:	f7ec fd67 	bl	8000638 <__aeabi_dmul>
 8013b6a:	4642      	mov	r2, r8
 8013b6c:	ec41 0b18 	vmov	d8, r0, r1
 8013b70:	464b      	mov	r3, r9
 8013b72:	4620      	mov	r0, r4
 8013b74:	4629      	mov	r1, r5
 8013b76:	f7ec fba7 	bl	80002c8 <__aeabi_dsub>
 8013b7a:	4602      	mov	r2, r0
 8013b7c:	460b      	mov	r3, r1
 8013b7e:	4630      	mov	r0, r6
 8013b80:	4639      	mov	r1, r7
 8013b82:	f7ec fba1 	bl	80002c8 <__aeabi_dsub>
 8013b86:	a336      	add	r3, pc, #216	; (adr r3, 8013c60 <__ieee754_pow+0x728>)
 8013b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b8c:	f7ec fd54 	bl	8000638 <__aeabi_dmul>
 8013b90:	a335      	add	r3, pc, #212	; (adr r3, 8013c68 <__ieee754_pow+0x730>)
 8013b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b96:	4606      	mov	r6, r0
 8013b98:	460f      	mov	r7, r1
 8013b9a:	4620      	mov	r0, r4
 8013b9c:	4629      	mov	r1, r5
 8013b9e:	f7ec fd4b 	bl	8000638 <__aeabi_dmul>
 8013ba2:	4602      	mov	r2, r0
 8013ba4:	460b      	mov	r3, r1
 8013ba6:	4630      	mov	r0, r6
 8013ba8:	4639      	mov	r1, r7
 8013baa:	f7ec fb8f 	bl	80002cc <__adddf3>
 8013bae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013bb0:	4b38      	ldr	r3, [pc, #224]	; (8013c94 <__ieee754_pow+0x75c>)
 8013bb2:	4413      	add	r3, r2
 8013bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb8:	f7ec fb88 	bl	80002cc <__adddf3>
 8013bbc:	4682      	mov	sl, r0
 8013bbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013bc0:	468b      	mov	fp, r1
 8013bc2:	f7ec fccf 	bl	8000564 <__aeabi_i2d>
 8013bc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013bc8:	4b33      	ldr	r3, [pc, #204]	; (8013c98 <__ieee754_pow+0x760>)
 8013bca:	4413      	add	r3, r2
 8013bcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013bd0:	4606      	mov	r6, r0
 8013bd2:	460f      	mov	r7, r1
 8013bd4:	4652      	mov	r2, sl
 8013bd6:	465b      	mov	r3, fp
 8013bd8:	ec51 0b18 	vmov	r0, r1, d8
 8013bdc:	f7ec fb76 	bl	80002cc <__adddf3>
 8013be0:	4642      	mov	r2, r8
 8013be2:	464b      	mov	r3, r9
 8013be4:	f7ec fb72 	bl	80002cc <__adddf3>
 8013be8:	4632      	mov	r2, r6
 8013bea:	463b      	mov	r3, r7
 8013bec:	f7ec fb6e 	bl	80002cc <__adddf3>
 8013bf0:	9c04      	ldr	r4, [sp, #16]
 8013bf2:	4632      	mov	r2, r6
 8013bf4:	463b      	mov	r3, r7
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	460d      	mov	r5, r1
 8013bfa:	f7ec fb65 	bl	80002c8 <__aeabi_dsub>
 8013bfe:	4642      	mov	r2, r8
 8013c00:	464b      	mov	r3, r9
 8013c02:	f7ec fb61 	bl	80002c8 <__aeabi_dsub>
 8013c06:	ec53 2b18 	vmov	r2, r3, d8
 8013c0a:	f7ec fb5d 	bl	80002c8 <__aeabi_dsub>
 8013c0e:	4602      	mov	r2, r0
 8013c10:	460b      	mov	r3, r1
 8013c12:	4650      	mov	r0, sl
 8013c14:	4659      	mov	r1, fp
 8013c16:	e606      	b.n	8013826 <__ieee754_pow+0x2ee>
 8013c18:	2401      	movs	r4, #1
 8013c1a:	e6a0      	b.n	801395e <__ieee754_pow+0x426>
 8013c1c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8013c70 <__ieee754_pow+0x738>
 8013c20:	e60d      	b.n	801383e <__ieee754_pow+0x306>
 8013c22:	bf00      	nop
 8013c24:	f3af 8000 	nop.w
 8013c28:	4a454eef 	.word	0x4a454eef
 8013c2c:	3fca7e28 	.word	0x3fca7e28
 8013c30:	93c9db65 	.word	0x93c9db65
 8013c34:	3fcd864a 	.word	0x3fcd864a
 8013c38:	a91d4101 	.word	0xa91d4101
 8013c3c:	3fd17460 	.word	0x3fd17460
 8013c40:	518f264d 	.word	0x518f264d
 8013c44:	3fd55555 	.word	0x3fd55555
 8013c48:	db6fabff 	.word	0xdb6fabff
 8013c4c:	3fdb6db6 	.word	0x3fdb6db6
 8013c50:	33333303 	.word	0x33333303
 8013c54:	3fe33333 	.word	0x3fe33333
 8013c58:	e0000000 	.word	0xe0000000
 8013c5c:	3feec709 	.word	0x3feec709
 8013c60:	dc3a03fd 	.word	0xdc3a03fd
 8013c64:	3feec709 	.word	0x3feec709
 8013c68:	145b01f5 	.word	0x145b01f5
 8013c6c:	be3e2fe0 	.word	0xbe3e2fe0
 8013c70:	00000000 	.word	0x00000000
 8013c74:	3ff00000 	.word	0x3ff00000
 8013c78:	7ff00000 	.word	0x7ff00000
 8013c7c:	43400000 	.word	0x43400000
 8013c80:	0003988e 	.word	0x0003988e
 8013c84:	000bb679 	.word	0x000bb679
 8013c88:	08014c28 	.word	0x08014c28
 8013c8c:	3ff00000 	.word	0x3ff00000
 8013c90:	40080000 	.word	0x40080000
 8013c94:	08014c48 	.word	0x08014c48
 8013c98:	08014c38 	.word	0x08014c38
 8013c9c:	a3b5      	add	r3, pc, #724	; (adr r3, 8013f74 <__ieee754_pow+0xa3c>)
 8013c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca2:	4640      	mov	r0, r8
 8013ca4:	4649      	mov	r1, r9
 8013ca6:	f7ec fb11 	bl	80002cc <__adddf3>
 8013caa:	4622      	mov	r2, r4
 8013cac:	ec41 0b1a 	vmov	d10, r0, r1
 8013cb0:	462b      	mov	r3, r5
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	4639      	mov	r1, r7
 8013cb6:	f7ec fb07 	bl	80002c8 <__aeabi_dsub>
 8013cba:	4602      	mov	r2, r0
 8013cbc:	460b      	mov	r3, r1
 8013cbe:	ec51 0b1a 	vmov	r0, r1, d10
 8013cc2:	f7ec ff49 	bl	8000b58 <__aeabi_dcmpgt>
 8013cc6:	2800      	cmp	r0, #0
 8013cc8:	f47f adf8 	bne.w	80138bc <__ieee754_pow+0x384>
 8013ccc:	4aa4      	ldr	r2, [pc, #656]	; (8013f60 <__ieee754_pow+0xa28>)
 8013cce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013cd2:	4293      	cmp	r3, r2
 8013cd4:	f340 810b 	ble.w	8013eee <__ieee754_pow+0x9b6>
 8013cd8:	151b      	asrs	r3, r3, #20
 8013cda:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013cde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013ce2:	fa4a f303 	asr.w	r3, sl, r3
 8013ce6:	445b      	add	r3, fp
 8013ce8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013cec:	4e9d      	ldr	r6, [pc, #628]	; (8013f64 <__ieee754_pow+0xa2c>)
 8013cee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013cf2:	4116      	asrs	r6, r2
 8013cf4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	ea23 0106 	bic.w	r1, r3, r6
 8013cfe:	f1c2 0214 	rsb	r2, r2, #20
 8013d02:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013d06:	fa4a fa02 	asr.w	sl, sl, r2
 8013d0a:	f1bb 0f00 	cmp.w	fp, #0
 8013d0e:	4602      	mov	r2, r0
 8013d10:	460b      	mov	r3, r1
 8013d12:	4620      	mov	r0, r4
 8013d14:	4629      	mov	r1, r5
 8013d16:	bfb8      	it	lt
 8013d18:	f1ca 0a00 	rsblt	sl, sl, #0
 8013d1c:	f7ec fad4 	bl	80002c8 <__aeabi_dsub>
 8013d20:	ec41 0b19 	vmov	d9, r0, r1
 8013d24:	4642      	mov	r2, r8
 8013d26:	464b      	mov	r3, r9
 8013d28:	ec51 0b19 	vmov	r0, r1, d9
 8013d2c:	f7ec face 	bl	80002cc <__adddf3>
 8013d30:	2400      	movs	r4, #0
 8013d32:	a379      	add	r3, pc, #484	; (adr r3, 8013f18 <__ieee754_pow+0x9e0>)
 8013d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d38:	4620      	mov	r0, r4
 8013d3a:	460d      	mov	r5, r1
 8013d3c:	f7ec fc7c 	bl	8000638 <__aeabi_dmul>
 8013d40:	ec53 2b19 	vmov	r2, r3, d9
 8013d44:	4606      	mov	r6, r0
 8013d46:	460f      	mov	r7, r1
 8013d48:	4620      	mov	r0, r4
 8013d4a:	4629      	mov	r1, r5
 8013d4c:	f7ec fabc 	bl	80002c8 <__aeabi_dsub>
 8013d50:	4602      	mov	r2, r0
 8013d52:	460b      	mov	r3, r1
 8013d54:	4640      	mov	r0, r8
 8013d56:	4649      	mov	r1, r9
 8013d58:	f7ec fab6 	bl	80002c8 <__aeabi_dsub>
 8013d5c:	a370      	add	r3, pc, #448	; (adr r3, 8013f20 <__ieee754_pow+0x9e8>)
 8013d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d62:	f7ec fc69 	bl	8000638 <__aeabi_dmul>
 8013d66:	a370      	add	r3, pc, #448	; (adr r3, 8013f28 <__ieee754_pow+0x9f0>)
 8013d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6c:	4680      	mov	r8, r0
 8013d6e:	4689      	mov	r9, r1
 8013d70:	4620      	mov	r0, r4
 8013d72:	4629      	mov	r1, r5
 8013d74:	f7ec fc60 	bl	8000638 <__aeabi_dmul>
 8013d78:	4602      	mov	r2, r0
 8013d7a:	460b      	mov	r3, r1
 8013d7c:	4640      	mov	r0, r8
 8013d7e:	4649      	mov	r1, r9
 8013d80:	f7ec faa4 	bl	80002cc <__adddf3>
 8013d84:	4604      	mov	r4, r0
 8013d86:	460d      	mov	r5, r1
 8013d88:	4602      	mov	r2, r0
 8013d8a:	460b      	mov	r3, r1
 8013d8c:	4630      	mov	r0, r6
 8013d8e:	4639      	mov	r1, r7
 8013d90:	f7ec fa9c 	bl	80002cc <__adddf3>
 8013d94:	4632      	mov	r2, r6
 8013d96:	463b      	mov	r3, r7
 8013d98:	4680      	mov	r8, r0
 8013d9a:	4689      	mov	r9, r1
 8013d9c:	f7ec fa94 	bl	80002c8 <__aeabi_dsub>
 8013da0:	4602      	mov	r2, r0
 8013da2:	460b      	mov	r3, r1
 8013da4:	4620      	mov	r0, r4
 8013da6:	4629      	mov	r1, r5
 8013da8:	f7ec fa8e 	bl	80002c8 <__aeabi_dsub>
 8013dac:	4642      	mov	r2, r8
 8013dae:	4606      	mov	r6, r0
 8013db0:	460f      	mov	r7, r1
 8013db2:	464b      	mov	r3, r9
 8013db4:	4640      	mov	r0, r8
 8013db6:	4649      	mov	r1, r9
 8013db8:	f7ec fc3e 	bl	8000638 <__aeabi_dmul>
 8013dbc:	a35c      	add	r3, pc, #368	; (adr r3, 8013f30 <__ieee754_pow+0x9f8>)
 8013dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc2:	4604      	mov	r4, r0
 8013dc4:	460d      	mov	r5, r1
 8013dc6:	f7ec fc37 	bl	8000638 <__aeabi_dmul>
 8013dca:	a35b      	add	r3, pc, #364	; (adr r3, 8013f38 <__ieee754_pow+0xa00>)
 8013dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd0:	f7ec fa7a 	bl	80002c8 <__aeabi_dsub>
 8013dd4:	4622      	mov	r2, r4
 8013dd6:	462b      	mov	r3, r5
 8013dd8:	f7ec fc2e 	bl	8000638 <__aeabi_dmul>
 8013ddc:	a358      	add	r3, pc, #352	; (adr r3, 8013f40 <__ieee754_pow+0xa08>)
 8013dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de2:	f7ec fa73 	bl	80002cc <__adddf3>
 8013de6:	4622      	mov	r2, r4
 8013de8:	462b      	mov	r3, r5
 8013dea:	f7ec fc25 	bl	8000638 <__aeabi_dmul>
 8013dee:	a356      	add	r3, pc, #344	; (adr r3, 8013f48 <__ieee754_pow+0xa10>)
 8013df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df4:	f7ec fa68 	bl	80002c8 <__aeabi_dsub>
 8013df8:	4622      	mov	r2, r4
 8013dfa:	462b      	mov	r3, r5
 8013dfc:	f7ec fc1c 	bl	8000638 <__aeabi_dmul>
 8013e00:	a353      	add	r3, pc, #332	; (adr r3, 8013f50 <__ieee754_pow+0xa18>)
 8013e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e06:	f7ec fa61 	bl	80002cc <__adddf3>
 8013e0a:	4622      	mov	r2, r4
 8013e0c:	462b      	mov	r3, r5
 8013e0e:	f7ec fc13 	bl	8000638 <__aeabi_dmul>
 8013e12:	4602      	mov	r2, r0
 8013e14:	460b      	mov	r3, r1
 8013e16:	4640      	mov	r0, r8
 8013e18:	4649      	mov	r1, r9
 8013e1a:	f7ec fa55 	bl	80002c8 <__aeabi_dsub>
 8013e1e:	4604      	mov	r4, r0
 8013e20:	460d      	mov	r5, r1
 8013e22:	4602      	mov	r2, r0
 8013e24:	460b      	mov	r3, r1
 8013e26:	4640      	mov	r0, r8
 8013e28:	4649      	mov	r1, r9
 8013e2a:	f7ec fc05 	bl	8000638 <__aeabi_dmul>
 8013e2e:	2200      	movs	r2, #0
 8013e30:	ec41 0b19 	vmov	d9, r0, r1
 8013e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013e38:	4620      	mov	r0, r4
 8013e3a:	4629      	mov	r1, r5
 8013e3c:	f7ec fa44 	bl	80002c8 <__aeabi_dsub>
 8013e40:	4602      	mov	r2, r0
 8013e42:	460b      	mov	r3, r1
 8013e44:	ec51 0b19 	vmov	r0, r1, d9
 8013e48:	f7ec fd20 	bl	800088c <__aeabi_ddiv>
 8013e4c:	4632      	mov	r2, r6
 8013e4e:	4604      	mov	r4, r0
 8013e50:	460d      	mov	r5, r1
 8013e52:	463b      	mov	r3, r7
 8013e54:	4640      	mov	r0, r8
 8013e56:	4649      	mov	r1, r9
 8013e58:	f7ec fbee 	bl	8000638 <__aeabi_dmul>
 8013e5c:	4632      	mov	r2, r6
 8013e5e:	463b      	mov	r3, r7
 8013e60:	f7ec fa34 	bl	80002cc <__adddf3>
 8013e64:	4602      	mov	r2, r0
 8013e66:	460b      	mov	r3, r1
 8013e68:	4620      	mov	r0, r4
 8013e6a:	4629      	mov	r1, r5
 8013e6c:	f7ec fa2c 	bl	80002c8 <__aeabi_dsub>
 8013e70:	4642      	mov	r2, r8
 8013e72:	464b      	mov	r3, r9
 8013e74:	f7ec fa28 	bl	80002c8 <__aeabi_dsub>
 8013e78:	460b      	mov	r3, r1
 8013e7a:	4602      	mov	r2, r0
 8013e7c:	493a      	ldr	r1, [pc, #232]	; (8013f68 <__ieee754_pow+0xa30>)
 8013e7e:	2000      	movs	r0, #0
 8013e80:	f7ec fa22 	bl	80002c8 <__aeabi_dsub>
 8013e84:	e9cd 0100 	strd	r0, r1, [sp]
 8013e88:	9b01      	ldr	r3, [sp, #4]
 8013e8a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013e92:	da2f      	bge.n	8013ef4 <__ieee754_pow+0x9bc>
 8013e94:	4650      	mov	r0, sl
 8013e96:	ed9d 0b00 	vldr	d0, [sp]
 8013e9a:	f000 f9c1 	bl	8014220 <scalbn>
 8013e9e:	ec51 0b10 	vmov	r0, r1, d0
 8013ea2:	ec53 2b18 	vmov	r2, r3, d8
 8013ea6:	f7ff bbe0 	b.w	801366a <__ieee754_pow+0x132>
 8013eaa:	4b30      	ldr	r3, [pc, #192]	; (8013f6c <__ieee754_pow+0xa34>)
 8013eac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013eb0:	429e      	cmp	r6, r3
 8013eb2:	f77f af0b 	ble.w	8013ccc <__ieee754_pow+0x794>
 8013eb6:	4b2e      	ldr	r3, [pc, #184]	; (8013f70 <__ieee754_pow+0xa38>)
 8013eb8:	440b      	add	r3, r1
 8013eba:	4303      	orrs	r3, r0
 8013ebc:	d00b      	beq.n	8013ed6 <__ieee754_pow+0x99e>
 8013ebe:	a326      	add	r3, pc, #152	; (adr r3, 8013f58 <__ieee754_pow+0xa20>)
 8013ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec4:	ec51 0b18 	vmov	r0, r1, d8
 8013ec8:	f7ec fbb6 	bl	8000638 <__aeabi_dmul>
 8013ecc:	a322      	add	r3, pc, #136	; (adr r3, 8013f58 <__ieee754_pow+0xa20>)
 8013ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed2:	f7ff bbca 	b.w	801366a <__ieee754_pow+0x132>
 8013ed6:	4622      	mov	r2, r4
 8013ed8:	462b      	mov	r3, r5
 8013eda:	f7ec f9f5 	bl	80002c8 <__aeabi_dsub>
 8013ede:	4642      	mov	r2, r8
 8013ee0:	464b      	mov	r3, r9
 8013ee2:	f7ec fe2f 	bl	8000b44 <__aeabi_dcmpge>
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	f43f aef0 	beq.w	8013ccc <__ieee754_pow+0x794>
 8013eec:	e7e7      	b.n	8013ebe <__ieee754_pow+0x986>
 8013eee:	f04f 0a00 	mov.w	sl, #0
 8013ef2:	e717      	b.n	8013d24 <__ieee754_pow+0x7ec>
 8013ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ef8:	4619      	mov	r1, r3
 8013efa:	e7d2      	b.n	8013ea2 <__ieee754_pow+0x96a>
 8013efc:	491a      	ldr	r1, [pc, #104]	; (8013f68 <__ieee754_pow+0xa30>)
 8013efe:	2000      	movs	r0, #0
 8013f00:	f7ff bb9e 	b.w	8013640 <__ieee754_pow+0x108>
 8013f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f08:	f7ff bb9a 	b.w	8013640 <__ieee754_pow+0x108>
 8013f0c:	9000      	str	r0, [sp, #0]
 8013f0e:	f7ff bb76 	b.w	80135fe <__ieee754_pow+0xc6>
 8013f12:	2100      	movs	r1, #0
 8013f14:	f7ff bb60 	b.w	80135d8 <__ieee754_pow+0xa0>
 8013f18:	00000000 	.word	0x00000000
 8013f1c:	3fe62e43 	.word	0x3fe62e43
 8013f20:	fefa39ef 	.word	0xfefa39ef
 8013f24:	3fe62e42 	.word	0x3fe62e42
 8013f28:	0ca86c39 	.word	0x0ca86c39
 8013f2c:	be205c61 	.word	0xbe205c61
 8013f30:	72bea4d0 	.word	0x72bea4d0
 8013f34:	3e663769 	.word	0x3e663769
 8013f38:	c5d26bf1 	.word	0xc5d26bf1
 8013f3c:	3ebbbd41 	.word	0x3ebbbd41
 8013f40:	af25de2c 	.word	0xaf25de2c
 8013f44:	3f11566a 	.word	0x3f11566a
 8013f48:	16bebd93 	.word	0x16bebd93
 8013f4c:	3f66c16c 	.word	0x3f66c16c
 8013f50:	5555553e 	.word	0x5555553e
 8013f54:	3fc55555 	.word	0x3fc55555
 8013f58:	c2f8f359 	.word	0xc2f8f359
 8013f5c:	01a56e1f 	.word	0x01a56e1f
 8013f60:	3fe00000 	.word	0x3fe00000
 8013f64:	000fffff 	.word	0x000fffff
 8013f68:	3ff00000 	.word	0x3ff00000
 8013f6c:	4090cbff 	.word	0x4090cbff
 8013f70:	3f6f3400 	.word	0x3f6f3400
 8013f74:	652b82fe 	.word	0x652b82fe
 8013f78:	3c971547 	.word	0x3c971547

08013f7c <__ieee754_sqrt>:
 8013f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f80:	ec55 4b10 	vmov	r4, r5, d0
 8013f84:	4e56      	ldr	r6, [pc, #344]	; (80140e0 <__ieee754_sqrt+0x164>)
 8013f86:	43ae      	bics	r6, r5
 8013f88:	ee10 0a10 	vmov	r0, s0
 8013f8c:	ee10 3a10 	vmov	r3, s0
 8013f90:	4629      	mov	r1, r5
 8013f92:	462a      	mov	r2, r5
 8013f94:	d110      	bne.n	8013fb8 <__ieee754_sqrt+0x3c>
 8013f96:	ee10 2a10 	vmov	r2, s0
 8013f9a:	462b      	mov	r3, r5
 8013f9c:	f7ec fb4c 	bl	8000638 <__aeabi_dmul>
 8013fa0:	4602      	mov	r2, r0
 8013fa2:	460b      	mov	r3, r1
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	4629      	mov	r1, r5
 8013fa8:	f7ec f990 	bl	80002cc <__adddf3>
 8013fac:	4604      	mov	r4, r0
 8013fae:	460d      	mov	r5, r1
 8013fb0:	ec45 4b10 	vmov	d0, r4, r5
 8013fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fb8:	2d00      	cmp	r5, #0
 8013fba:	dc10      	bgt.n	8013fde <__ieee754_sqrt+0x62>
 8013fbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013fc0:	4330      	orrs	r0, r6
 8013fc2:	d0f5      	beq.n	8013fb0 <__ieee754_sqrt+0x34>
 8013fc4:	b15d      	cbz	r5, 8013fde <__ieee754_sqrt+0x62>
 8013fc6:	ee10 2a10 	vmov	r2, s0
 8013fca:	462b      	mov	r3, r5
 8013fcc:	ee10 0a10 	vmov	r0, s0
 8013fd0:	f7ec f97a 	bl	80002c8 <__aeabi_dsub>
 8013fd4:	4602      	mov	r2, r0
 8013fd6:	460b      	mov	r3, r1
 8013fd8:	f7ec fc58 	bl	800088c <__aeabi_ddiv>
 8013fdc:	e7e6      	b.n	8013fac <__ieee754_sqrt+0x30>
 8013fde:	1509      	asrs	r1, r1, #20
 8013fe0:	d076      	beq.n	80140d0 <__ieee754_sqrt+0x154>
 8013fe2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013fe6:	07ce      	lsls	r6, r1, #31
 8013fe8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8013fec:	bf5e      	ittt	pl
 8013fee:	0fda      	lsrpl	r2, r3, #31
 8013ff0:	005b      	lslpl	r3, r3, #1
 8013ff2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8013ff6:	0fda      	lsrs	r2, r3, #31
 8013ff8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8013ffc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8014000:	2000      	movs	r0, #0
 8014002:	106d      	asrs	r5, r5, #1
 8014004:	005b      	lsls	r3, r3, #1
 8014006:	f04f 0e16 	mov.w	lr, #22
 801400a:	4684      	mov	ip, r0
 801400c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014010:	eb0c 0401 	add.w	r4, ip, r1
 8014014:	4294      	cmp	r4, r2
 8014016:	bfde      	ittt	le
 8014018:	1b12      	suble	r2, r2, r4
 801401a:	eb04 0c01 	addle.w	ip, r4, r1
 801401e:	1840      	addle	r0, r0, r1
 8014020:	0052      	lsls	r2, r2, #1
 8014022:	f1be 0e01 	subs.w	lr, lr, #1
 8014026:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801402a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801402e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014032:	d1ed      	bne.n	8014010 <__ieee754_sqrt+0x94>
 8014034:	4671      	mov	r1, lr
 8014036:	2720      	movs	r7, #32
 8014038:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801403c:	4562      	cmp	r2, ip
 801403e:	eb04 060e 	add.w	r6, r4, lr
 8014042:	dc02      	bgt.n	801404a <__ieee754_sqrt+0xce>
 8014044:	d113      	bne.n	801406e <__ieee754_sqrt+0xf2>
 8014046:	429e      	cmp	r6, r3
 8014048:	d811      	bhi.n	801406e <__ieee754_sqrt+0xf2>
 801404a:	2e00      	cmp	r6, #0
 801404c:	eb06 0e04 	add.w	lr, r6, r4
 8014050:	da43      	bge.n	80140da <__ieee754_sqrt+0x15e>
 8014052:	f1be 0f00 	cmp.w	lr, #0
 8014056:	db40      	blt.n	80140da <__ieee754_sqrt+0x15e>
 8014058:	f10c 0801 	add.w	r8, ip, #1
 801405c:	eba2 020c 	sub.w	r2, r2, ip
 8014060:	429e      	cmp	r6, r3
 8014062:	bf88      	it	hi
 8014064:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014068:	1b9b      	subs	r3, r3, r6
 801406a:	4421      	add	r1, r4
 801406c:	46c4      	mov	ip, r8
 801406e:	0052      	lsls	r2, r2, #1
 8014070:	3f01      	subs	r7, #1
 8014072:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014076:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801407a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801407e:	d1dd      	bne.n	801403c <__ieee754_sqrt+0xc0>
 8014080:	4313      	orrs	r3, r2
 8014082:	d006      	beq.n	8014092 <__ieee754_sqrt+0x116>
 8014084:	1c4c      	adds	r4, r1, #1
 8014086:	bf13      	iteet	ne
 8014088:	3101      	addne	r1, #1
 801408a:	3001      	addeq	r0, #1
 801408c:	4639      	moveq	r1, r7
 801408e:	f021 0101 	bicne.w	r1, r1, #1
 8014092:	1043      	asrs	r3, r0, #1
 8014094:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014098:	0849      	lsrs	r1, r1, #1
 801409a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801409e:	07c2      	lsls	r2, r0, #31
 80140a0:	bf48      	it	mi
 80140a2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80140a6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80140aa:	460c      	mov	r4, r1
 80140ac:	463d      	mov	r5, r7
 80140ae:	e77f      	b.n	8013fb0 <__ieee754_sqrt+0x34>
 80140b0:	0ada      	lsrs	r2, r3, #11
 80140b2:	3815      	subs	r0, #21
 80140b4:	055b      	lsls	r3, r3, #21
 80140b6:	2a00      	cmp	r2, #0
 80140b8:	d0fa      	beq.n	80140b0 <__ieee754_sqrt+0x134>
 80140ba:	02d7      	lsls	r7, r2, #11
 80140bc:	d50a      	bpl.n	80140d4 <__ieee754_sqrt+0x158>
 80140be:	f1c1 0420 	rsb	r4, r1, #32
 80140c2:	fa23 f404 	lsr.w	r4, r3, r4
 80140c6:	1e4d      	subs	r5, r1, #1
 80140c8:	408b      	lsls	r3, r1
 80140ca:	4322      	orrs	r2, r4
 80140cc:	1b41      	subs	r1, r0, r5
 80140ce:	e788      	b.n	8013fe2 <__ieee754_sqrt+0x66>
 80140d0:	4608      	mov	r0, r1
 80140d2:	e7f0      	b.n	80140b6 <__ieee754_sqrt+0x13a>
 80140d4:	0052      	lsls	r2, r2, #1
 80140d6:	3101      	adds	r1, #1
 80140d8:	e7ef      	b.n	80140ba <__ieee754_sqrt+0x13e>
 80140da:	46e0      	mov	r8, ip
 80140dc:	e7be      	b.n	801405c <__ieee754_sqrt+0xe0>
 80140de:	bf00      	nop
 80140e0:	7ff00000 	.word	0x7ff00000

080140e4 <fabs>:
 80140e4:	ec51 0b10 	vmov	r0, r1, d0
 80140e8:	ee10 2a10 	vmov	r2, s0
 80140ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80140f0:	ec43 2b10 	vmov	d0, r2, r3
 80140f4:	4770      	bx	lr

080140f6 <finite>:
 80140f6:	b082      	sub	sp, #8
 80140f8:	ed8d 0b00 	vstr	d0, [sp]
 80140fc:	9801      	ldr	r0, [sp, #4]
 80140fe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014102:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014106:	0fc0      	lsrs	r0, r0, #31
 8014108:	b002      	add	sp, #8
 801410a:	4770      	bx	lr

0801410c <rint>:
 801410c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801410e:	ec51 0b10 	vmov	r0, r1, d0
 8014112:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014116:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801411a:	2e13      	cmp	r6, #19
 801411c:	ee10 4a10 	vmov	r4, s0
 8014120:	460b      	mov	r3, r1
 8014122:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8014126:	dc58      	bgt.n	80141da <rint+0xce>
 8014128:	2e00      	cmp	r6, #0
 801412a:	da2b      	bge.n	8014184 <rint+0x78>
 801412c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014130:	4302      	orrs	r2, r0
 8014132:	d023      	beq.n	801417c <rint+0x70>
 8014134:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014138:	4302      	orrs	r2, r0
 801413a:	4254      	negs	r4, r2
 801413c:	4314      	orrs	r4, r2
 801413e:	0c4b      	lsrs	r3, r1, #17
 8014140:	0b24      	lsrs	r4, r4, #12
 8014142:	045b      	lsls	r3, r3, #17
 8014144:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014148:	ea44 0103 	orr.w	r1, r4, r3
 801414c:	4b32      	ldr	r3, [pc, #200]	; (8014218 <rint+0x10c>)
 801414e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014152:	e9d3 6700 	ldrd	r6, r7, [r3]
 8014156:	4602      	mov	r2, r0
 8014158:	460b      	mov	r3, r1
 801415a:	4630      	mov	r0, r6
 801415c:	4639      	mov	r1, r7
 801415e:	f7ec f8b5 	bl	80002cc <__adddf3>
 8014162:	e9cd 0100 	strd	r0, r1, [sp]
 8014166:	463b      	mov	r3, r7
 8014168:	e9dd 0100 	ldrd	r0, r1, [sp]
 801416c:	4632      	mov	r2, r6
 801416e:	f7ec f8ab 	bl	80002c8 <__aeabi_dsub>
 8014172:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014176:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801417a:	4639      	mov	r1, r7
 801417c:	ec41 0b10 	vmov	d0, r0, r1
 8014180:	b003      	add	sp, #12
 8014182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014184:	4a25      	ldr	r2, [pc, #148]	; (801421c <rint+0x110>)
 8014186:	4132      	asrs	r2, r6
 8014188:	ea01 0702 	and.w	r7, r1, r2
 801418c:	4307      	orrs	r7, r0
 801418e:	d0f5      	beq.n	801417c <rint+0x70>
 8014190:	0851      	lsrs	r1, r2, #1
 8014192:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8014196:	4314      	orrs	r4, r2
 8014198:	d00c      	beq.n	80141b4 <rint+0xa8>
 801419a:	ea23 0201 	bic.w	r2, r3, r1
 801419e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80141a2:	2e13      	cmp	r6, #19
 80141a4:	fa43 f606 	asr.w	r6, r3, r6
 80141a8:	bf0c      	ite	eq
 80141aa:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80141ae:	2400      	movne	r4, #0
 80141b0:	ea42 0306 	orr.w	r3, r2, r6
 80141b4:	4918      	ldr	r1, [pc, #96]	; (8014218 <rint+0x10c>)
 80141b6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80141ba:	4622      	mov	r2, r4
 80141bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80141c0:	4620      	mov	r0, r4
 80141c2:	4629      	mov	r1, r5
 80141c4:	f7ec f882 	bl	80002cc <__adddf3>
 80141c8:	e9cd 0100 	strd	r0, r1, [sp]
 80141cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80141d0:	4622      	mov	r2, r4
 80141d2:	462b      	mov	r3, r5
 80141d4:	f7ec f878 	bl	80002c8 <__aeabi_dsub>
 80141d8:	e7d0      	b.n	801417c <rint+0x70>
 80141da:	2e33      	cmp	r6, #51	; 0x33
 80141dc:	dd07      	ble.n	80141ee <rint+0xe2>
 80141de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80141e2:	d1cb      	bne.n	801417c <rint+0x70>
 80141e4:	ee10 2a10 	vmov	r2, s0
 80141e8:	f7ec f870 	bl	80002cc <__adddf3>
 80141ec:	e7c6      	b.n	801417c <rint+0x70>
 80141ee:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80141f2:	f04f 36ff 	mov.w	r6, #4294967295
 80141f6:	40d6      	lsrs	r6, r2
 80141f8:	4230      	tst	r0, r6
 80141fa:	d0bf      	beq.n	801417c <rint+0x70>
 80141fc:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8014200:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8014204:	bf1f      	itttt	ne
 8014206:	ea24 0101 	bicne.w	r1, r4, r1
 801420a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801420e:	fa44 f202 	asrne.w	r2, r4, r2
 8014212:	ea41 0402 	orrne.w	r4, r1, r2
 8014216:	e7cd      	b.n	80141b4 <rint+0xa8>
 8014218:	08014c58 	.word	0x08014c58
 801421c:	000fffff 	.word	0x000fffff

08014220 <scalbn>:
 8014220:	b570      	push	{r4, r5, r6, lr}
 8014222:	ec55 4b10 	vmov	r4, r5, d0
 8014226:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801422a:	4606      	mov	r6, r0
 801422c:	462b      	mov	r3, r5
 801422e:	b99a      	cbnz	r2, 8014258 <scalbn+0x38>
 8014230:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014234:	4323      	orrs	r3, r4
 8014236:	d036      	beq.n	80142a6 <scalbn+0x86>
 8014238:	4b39      	ldr	r3, [pc, #228]	; (8014320 <scalbn+0x100>)
 801423a:	4629      	mov	r1, r5
 801423c:	ee10 0a10 	vmov	r0, s0
 8014240:	2200      	movs	r2, #0
 8014242:	f7ec f9f9 	bl	8000638 <__aeabi_dmul>
 8014246:	4b37      	ldr	r3, [pc, #220]	; (8014324 <scalbn+0x104>)
 8014248:	429e      	cmp	r6, r3
 801424a:	4604      	mov	r4, r0
 801424c:	460d      	mov	r5, r1
 801424e:	da10      	bge.n	8014272 <scalbn+0x52>
 8014250:	a32b      	add	r3, pc, #172	; (adr r3, 8014300 <scalbn+0xe0>)
 8014252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014256:	e03a      	b.n	80142ce <scalbn+0xae>
 8014258:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801425c:	428a      	cmp	r2, r1
 801425e:	d10c      	bne.n	801427a <scalbn+0x5a>
 8014260:	ee10 2a10 	vmov	r2, s0
 8014264:	4620      	mov	r0, r4
 8014266:	4629      	mov	r1, r5
 8014268:	f7ec f830 	bl	80002cc <__adddf3>
 801426c:	4604      	mov	r4, r0
 801426e:	460d      	mov	r5, r1
 8014270:	e019      	b.n	80142a6 <scalbn+0x86>
 8014272:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014276:	460b      	mov	r3, r1
 8014278:	3a36      	subs	r2, #54	; 0x36
 801427a:	4432      	add	r2, r6
 801427c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014280:	428a      	cmp	r2, r1
 8014282:	dd08      	ble.n	8014296 <scalbn+0x76>
 8014284:	2d00      	cmp	r5, #0
 8014286:	a120      	add	r1, pc, #128	; (adr r1, 8014308 <scalbn+0xe8>)
 8014288:	e9d1 0100 	ldrd	r0, r1, [r1]
 801428c:	da1c      	bge.n	80142c8 <scalbn+0xa8>
 801428e:	a120      	add	r1, pc, #128	; (adr r1, 8014310 <scalbn+0xf0>)
 8014290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014294:	e018      	b.n	80142c8 <scalbn+0xa8>
 8014296:	2a00      	cmp	r2, #0
 8014298:	dd08      	ble.n	80142ac <scalbn+0x8c>
 801429a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801429e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80142a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80142a6:	ec45 4b10 	vmov	d0, r4, r5
 80142aa:	bd70      	pop	{r4, r5, r6, pc}
 80142ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80142b0:	da19      	bge.n	80142e6 <scalbn+0xc6>
 80142b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80142b6:	429e      	cmp	r6, r3
 80142b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80142bc:	dd0a      	ble.n	80142d4 <scalbn+0xb4>
 80142be:	a112      	add	r1, pc, #72	; (adr r1, 8014308 <scalbn+0xe8>)
 80142c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d1e2      	bne.n	801428e <scalbn+0x6e>
 80142c8:	a30f      	add	r3, pc, #60	; (adr r3, 8014308 <scalbn+0xe8>)
 80142ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ce:	f7ec f9b3 	bl	8000638 <__aeabi_dmul>
 80142d2:	e7cb      	b.n	801426c <scalbn+0x4c>
 80142d4:	a10a      	add	r1, pc, #40	; (adr r1, 8014300 <scalbn+0xe0>)
 80142d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d0b8      	beq.n	8014250 <scalbn+0x30>
 80142de:	a10e      	add	r1, pc, #56	; (adr r1, 8014318 <scalbn+0xf8>)
 80142e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80142e4:	e7b4      	b.n	8014250 <scalbn+0x30>
 80142e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80142ea:	3236      	adds	r2, #54	; 0x36
 80142ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80142f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80142f4:	4620      	mov	r0, r4
 80142f6:	4b0c      	ldr	r3, [pc, #48]	; (8014328 <scalbn+0x108>)
 80142f8:	2200      	movs	r2, #0
 80142fa:	e7e8      	b.n	80142ce <scalbn+0xae>
 80142fc:	f3af 8000 	nop.w
 8014300:	c2f8f359 	.word	0xc2f8f359
 8014304:	01a56e1f 	.word	0x01a56e1f
 8014308:	8800759c 	.word	0x8800759c
 801430c:	7e37e43c 	.word	0x7e37e43c
 8014310:	8800759c 	.word	0x8800759c
 8014314:	fe37e43c 	.word	0xfe37e43c
 8014318:	c2f8f359 	.word	0xc2f8f359
 801431c:	81a56e1f 	.word	0x81a56e1f
 8014320:	43500000 	.word	0x43500000
 8014324:	ffff3cb0 	.word	0xffff3cb0
 8014328:	3c900000 	.word	0x3c900000

0801432c <_init>:
 801432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801432e:	bf00      	nop
 8014330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014332:	bc08      	pop	{r3}
 8014334:	469e      	mov	lr, r3
 8014336:	4770      	bx	lr

08014338 <_fini>:
 8014338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801433a:	bf00      	nop
 801433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801433e:	bc08      	pop	{r3}
 8014340:	469e      	mov	lr, r3
 8014342:	4770      	bx	lr
