
f437_fc_v4.3_megaloop_no_ejection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a24  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001128  08014bd8  08014bd8  00024bd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015d00  08015d00  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08015d00  08015d00  00025d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015d08  08015d08  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015d08  08015d08  00025d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015d0c  08015d0c  00025d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08015d10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          00001828  20000200  20000200  00030200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001a28  20001a28  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003be83  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d6d  00000000  00000000  0006c0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002508  00000000  00000000  00071e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022d0  00000000  00000000  00074328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c7f3  00000000  00000000  000765f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029b81  00000000  00000000  000a2deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4f6f  00000000  00000000  000cc96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c18db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b5c8  00000000  00000000  001c1930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014bbc 	.word	0x08014bbc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	08014bbc 	.word	0x08014bbc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <Max31855_Read_Temp>:
uint32_t sign=0;									  	// Sign bit
uint8_t DATARX[4];                                    	// Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};         	// Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); 	// Low State for SPI Communication
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001018:	482c      	ldr	r0, [pc, #176]	; (80010cc <Max31855_Read_Temp+0xc0>)
 800101a:	f005 fc95 	bl	8006948 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);         	// DATA Transfer
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	2204      	movs	r2, #4
 8001024:	492a      	ldr	r1, [pc, #168]	; (80010d0 <Max31855_Read_Temp+0xc4>)
 8001026:	482b      	ldr	r0, [pc, #172]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 8001028:	f007 feb8 	bl	8008d9c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET);   	// High State for SPI Communication
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001032:	4826      	ldr	r0, [pc, #152]	; (80010cc <Max31855_Read_Temp+0xc0>)
 8001034:	f005 fc88 	bl	8006948 <HAL_GPIO_WritePin>

	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <Max31855_Read_Temp+0xc4>)
 800103a:	78db      	ldrb	r3, [r3, #3]
 800103c:	461a      	mov	r2, r3
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <Max31855_Read_Temp+0xc4>)
 8001040:	789b      	ldrb	r3, [r3, #2]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	431a      	orrs	r2, r3
 8001046:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <Max31855_Read_Temp+0xc4>)
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	041b      	lsls	r3, r3, #16
 800104c:	431a      	orrs	r2, r3
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <Max31855_Read_Temp+0xc4>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	061b      	lsls	r3, r3, #24
 8001054:	4313      	orrs	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]

	Error = v & 0x07;								  	// Error Detection
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <Max31855_Read_Temp+0xcc>)
 8001064:	701a      	strb	r2, [r3, #0]

	if (v & 0x7) {
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <Max31855_Read_Temp+0x68>
		// uh oh, a serious problem!
		return -99999;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <Max31855_Read_Temp+0xd0>)
 8001072:	e024      	b.n	80010be <Max31855_Read_Temp+0xb2>
	}

	if (v & 0x80000000) {
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	da07      	bge.n	800108a <Max31855_Read_Temp+0x7e>
		// Negative value, drop the lower 18 bits and explicitly extend sign bits.
		v = 0xFFFFC000 | ((v >> 18) & 0x00003FFF);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	0c9b      	lsrs	r3, r3, #18
 800107e:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8001082:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e002      	b.n	8001090 <Max31855_Read_Temp+0x84>
	} else {
		// Positive value, just drop the lower 18 bits.
		v >>= 18;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	0c9b      	lsrs	r3, r3, #18
 800108e:	60fb      	str	r3, [r7, #12]
	}

	double centigrade = v;
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f7ff fa47 	bl	8000524 <__aeabi_ui2d>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	e9c7 2300 	strd	r2, r3, [r7]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <Max31855_Read_Temp+0xd4>)
 80010a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010a8:	f7ff fab6 	bl	8000618 <__aeabi_dmul>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	e9c7 2300 	strd	r2, r3, [r7]
	return centigrade;
 80010b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010b8:	f7ff fda6 	bl	8000c08 <__aeabi_d2f>
 80010bc:	4603      	mov	r3, r0
 80010be:	ee07 3a90 	vmov	s15, r3
}
 80010c2:	eeb0 0a67 	vmov.f32	s0, s15
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000
 80010d0:	200004fc 	.word	0x200004fc
 80010d4:	20000500 	.word	0x20000500
 80010d8:	2000021c 	.word	0x2000021c
 80010dc:	c7c34f80 	.word	0xc7c34f80
 80010e0:	3fd00000 	.word	0x3fd00000

080010e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80010ea:	463b      	mov	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <MX_ADC1_Init+0x98>)
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <MX_ADC1_Init+0x9c>)
 80010fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <MX_ADC1_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_ADC1_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_ADC1_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_ADC1_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_ADC1_Init+0x98>)
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_ADC1_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_ADC1_Init+0x98>)
 8001124:	4a17      	ldr	r2, [pc, #92]	; (8001184 <MX_ADC1_Init+0xa0>)
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_ADC1_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_ADC1_Init+0x98>)
 8001130:	2201      	movs	r2, #1
 8001132:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_ADC1_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_ADC1_Init+0x98>)
 800113e:	2201      	movs	r2, #1
 8001140:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001142:	480e      	ldr	r0, [pc, #56]	; (800117c <MX_ADC1_Init+0x98>)
 8001144:	f004 f99c 	bl	8005480 <HAL_ADC_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800114e:	f002 fab1 	bl	80036b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001152:	2306      	movs	r3, #6
 8001154:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001156:	2301      	movs	r3, #1
 8001158:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800115a:	2307      	movs	r3, #7
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <MX_ADC1_Init+0x98>)
 8001164:	f004 fb5a 	bl	800581c <HAL_ADC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800116e:	f002 faa1 	bl	80036b4 <Error_Handler>
  }

}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000558 	.word	0x20000558
 8001180:	40012000 	.word	0x40012000
 8001184:	0f000001 	.word	0x0f000001

08001188 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_ADC_MspInit+0x7c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d127      	bne.n	80011fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_ADC_MspInit+0x80>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <HAL_ADC_MspInit+0x80>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_ADC_MspInit+0x80>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_ADC_MspInit+0x80>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_ADC_MspInit+0x80>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_ADC_MspInit+0x80>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80011e2:	2340      	movs	r3, #64	; 0x40
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_ADC_MspInit+0x84>)
 80011f6:	f005 f9e3 	bl	80065c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40012000 	.word	0x40012000
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_DMA_Init+0x78>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <MX_DMA_Init+0x78>)
 8001220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_DMA_Init+0x78>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_DMA_Init+0x78>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <MX_DMA_Init+0x78>)
 800123c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_DMA_Init+0x78>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	200c      	movs	r0, #12
 8001254:	f004 fdeb 	bl	8005e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001258:	200c      	movs	r0, #12
 800125a:	f004 fe04 	bl	8005e66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	200e      	movs	r0, #14
 8001264:	f004 fde3 	bl	8005e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001268:	200e      	movs	r0, #14
 800126a:	f004 fdfc 	bl	8005e66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	2039      	movs	r0, #57	; 0x39
 8001274:	f004 fddb 	bl	8005e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001278:	2039      	movs	r0, #57	; 0x39
 800127a:	f004 fdf4 	bl	8005e66 <HAL_NVIC_EnableIRQ>

}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08e      	sub	sp, #56	; 0x38
 8001290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
 80012a6:	4bb5      	ldr	r3, [pc, #724]	; (800157c <MX_GPIO_Init+0x2f0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4ab4      	ldr	r2, [pc, #720]	; (800157c <MX_GPIO_Init+0x2f0>)
 80012ac:	f043 0310 	orr.w	r3, r3, #16
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4bb2      	ldr	r3, [pc, #712]	; (800157c <MX_GPIO_Init+0x2f0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	4bae      	ldr	r3, [pc, #696]	; (800157c <MX_GPIO_Init+0x2f0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4aad      	ldr	r2, [pc, #692]	; (800157c <MX_GPIO_Init+0x2f0>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4bab      	ldr	r3, [pc, #684]	; (800157c <MX_GPIO_Init+0x2f0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
 80012de:	4ba7      	ldr	r3, [pc, #668]	; (800157c <MX_GPIO_Init+0x2f0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4aa6      	ldr	r2, [pc, #664]	; (800157c <MX_GPIO_Init+0x2f0>)
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4ba4      	ldr	r3, [pc, #656]	; (800157c <MX_GPIO_Init+0x2f0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	4ba0      	ldr	r3, [pc, #640]	; (800157c <MX_GPIO_Init+0x2f0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a9f      	ldr	r2, [pc, #636]	; (800157c <MX_GPIO_Init+0x2f0>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b9d      	ldr	r3, [pc, #628]	; (800157c <MX_GPIO_Init+0x2f0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b99      	ldr	r3, [pc, #612]	; (800157c <MX_GPIO_Init+0x2f0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a98      	ldr	r2, [pc, #608]	; (800157c <MX_GPIO_Init+0x2f0>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b96      	ldr	r3, [pc, #600]	; (800157c <MX_GPIO_Init+0x2f0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b92      	ldr	r3, [pc, #584]	; (800157c <MX_GPIO_Init+0x2f0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a91      	ldr	r2, [pc, #580]	; (800157c <MX_GPIO_Init+0x2f0>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b8f      	ldr	r3, [pc, #572]	; (800157c <MX_GPIO_Init+0x2f0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b8b      	ldr	r3, [pc, #556]	; (800157c <MX_GPIO_Init+0x2f0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a8a      	ldr	r2, [pc, #552]	; (800157c <MX_GPIO_Init+0x2f0>)
 8001354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b88      	ldr	r3, [pc, #544]	; (800157c <MX_GPIO_Init+0x2f0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b84      	ldr	r3, [pc, #528]	; (800157c <MX_GPIO_Init+0x2f0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a83      	ldr	r2, [pc, #524]	; (800157c <MX_GPIO_Init+0x2f0>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b81      	ldr	r3, [pc, #516]	; (800157c <MX_GPIO_Init+0x2f0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f248 4184 	movw	r1, #33924	; 0x8484
 8001388:	487d      	ldr	r0, [pc, #500]	; (8001580 <MX_GPIO_Init+0x2f4>)
 800138a:	f005 fadd 	bl	8006948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001394:	487b      	ldr	r0, [pc, #492]	; (8001584 <MX_GPIO_Init+0x2f8>)
 8001396:	f005 fad7 	bl	8006948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80013a0:	4879      	ldr	r0, [pc, #484]	; (8001588 <MX_GPIO_Init+0x2fc>)
 80013a2:	f005 fad1 	bl	8006948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2108      	movs	r1, #8
 80013aa:	4878      	ldr	r0, [pc, #480]	; (800158c <MX_GPIO_Init+0x300>)
 80013ac:	f005 facc 	bl	8006948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80013b6:	4873      	ldr	r0, [pc, #460]	; (8001584 <MX_GPIO_Init+0x2f8>)
 80013b8:	f005 fac6 	bl	8006948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 80013bc:	2200      	movs	r2, #0
 80013be:	f645 2126 	movw	r1, #23078	; 0x5a26
 80013c2:	4873      	ldr	r0, [pc, #460]	; (8001590 <MX_GPIO_Init+0x304>)
 80013c4:	f005 fac0 	bl	8006948 <HAL_GPIO_WritePin>
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_NSS_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80013ce:	4871      	ldr	r0, [pc, #452]	; (8001594 <MX_GPIO_Init+0x308>)
 80013d0:	f005 faba 	bl	8006948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 41f9 	mov.w	r1, #31872	; 0x7c80
 80013da:	486f      	ldr	r0, [pc, #444]	; (8001598 <MX_GPIO_Init+0x30c>)
 80013dc:	f005 fab4 	bl	8006948 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|VR_CTRL_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	2170      	movs	r1, #112	; 0x70
 80013e4:	486c      	ldr	r0, [pc, #432]	; (8001598 <MX_GPIO_Init+0x30c>)
 80013e6:	f005 faaf 	bl	8006948 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin;
 80013ea:	f248 4384 	movw	r3, #33924	; 0x8484
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	4619      	mov	r1, r3
 8001402:	485f      	ldr	r0, [pc, #380]	; (8001580 <MX_GPIO_Init+0x2f4>)
 8001404:	f005 f8dc 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001412:	2301      	movs	r3, #1
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141e:	4619      	mov	r1, r3
 8001420:	4858      	ldr	r0, [pc, #352]	; (8001584 <MX_GPIO_Init+0x2f8>)
 8001422:	f005 f8cd 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001426:	2301      	movs	r3, #1
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142a:	4b5c      	ldr	r3, [pc, #368]	; (800159c <MX_GPIO_Init+0x310>)
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4853      	ldr	r0, [pc, #332]	; (8001588 <MX_GPIO_Init+0x2fc>)
 800143a:	f005 f8c1 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin;
 800143e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	484c      	ldr	r0, [pc, #304]	; (8001588 <MX_GPIO_Init+0x2fc>)
 8001458:	f005 f8b2 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDF_Pin;
 800145c:	2308      	movs	r3, #8
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LEDF_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001470:	4619      	mov	r1, r3
 8001472:	4846      	ldr	r0, [pc, #280]	; (800158c <MX_GPIO_Init+0x300>)
 8001474:	f005 f8a4 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001478:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	483e      	ldr	r0, [pc, #248]	; (8001588 <MX_GPIO_Init+0x2fc>)
 800148e:	f005 f897 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8001492:	2302      	movs	r3, #2
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	4619      	mov	r1, r3
 80014a4:	483b      	ldr	r0, [pc, #236]	; (8001594 <MX_GPIO_Init+0x308>)
 80014a6:	f005 f88b 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 80014aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	4831      	ldr	r0, [pc, #196]	; (8001584 <MX_GPIO_Init+0x2f8>)
 80014c0:	f005 f87e 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 80014c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	4829      	ldr	r0, [pc, #164]	; (8001584 <MX_GPIO_Init+0x2f8>)
 80014de:	f005 f86f 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|Rcov_Cont_Main_Pin
 80014e2:	f242 4319 	movw	r3, #9241	; 0x2419
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Cont_Drogue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	4826      	ldr	r0, [pc, #152]	; (8001590 <MX_GPIO_Init+0x304>)
 80014f8:	f005 f862 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 80014fc:	f645 2326 	movw	r3, #23078	; 0x5a26
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	4619      	mov	r1, r3
 8001514:	481e      	ldr	r0, [pc, #120]	; (8001590 <MX_GPIO_Init+0x304>)
 8001516:	f005 f853 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Payload_EN_Pin|IN_XTend_Continuity_Pin;
 800151a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	4814      	ldr	r0, [pc, #80]	; (8001580 <MX_GPIO_Init+0x2f4>)
 8001530:	f005 f846 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_NSS_Pin;
 8001534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153e:	2301      	movs	r3, #1
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SX_NSS_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	4811      	ldr	r0, [pc, #68]	; (8001594 <MX_GPIO_Init+0x308>)
 800154e:	f005 f837 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001552:	f44f 43f9 	mov.w	r3, #31872	; 0x7c80
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|VR_CTRL_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2301      	movs	r3, #1
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	480b      	ldr	r0, [pc, #44]	; (8001598 <MX_GPIO_Init+0x30c>)
 800156c:	f005 f828 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001576:	2300      	movs	r3, #0
 8001578:	e012      	b.n	80015a0 <MX_GPIO_Init+0x314>
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	40021000 	.word	0x40021000
 8001584:	40021400 	.word	0x40021400
 8001588:	40020800 	.word	0x40020800
 800158c:	40020000 	.word	0x40020000
 8001590:	40021800 	.word	0x40021800
 8001594:	40020400 	.word	0x40020400
 8001598:	40020c00 	.word	0x40020c00
 800159c:	10110000 	.word	0x10110000
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	481c      	ldr	r0, [pc, #112]	; (8001620 <MX_GPIO_Init+0x394>)
 80015ae:	f005 f807 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 80015b2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_GPIO_Init+0x398>)
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4818      	ldr	r0, [pc, #96]	; (8001628 <MX_GPIO_Init+0x39c>)
 80015c8:	f004 fffa 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin;
 80015cc:	2370      	movs	r3, #112	; 0x70
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d8:	2302      	movs	r3, #2
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	480f      	ldr	r0, [pc, #60]	; (8001620 <MX_GPIO_Init+0x394>)
 80015e4:	f004 ffec 	bl	80065c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	480a      	ldr	r0, [pc, #40]	; (800162c <MX_GPIO_Init+0x3a0>)
 8001602:	f004 ffdd 	bl	80065c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2006      	movs	r0, #6
 800160c:	f004 fc0f 	bl	8005e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001610:	2006      	movs	r0, #6
 8001612:	f004 fc28 	bl	8005e66 <HAL_NVIC_EnableIRQ>

}
 8001616:	bf00      	nop
 8001618:	3738      	adds	r7, #56	; 0x38
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40020c00 	.word	0x40020c00
 8001624:	10110000 	.word	0x10110000
 8001628:	40021800 	.word	0x40021800
 800162c:	40020400 	.word	0x40020400

08001630 <GPS_ParseBuffer>:
 * 		2. use memcpy to extract string between '$' and '\n' found
 * 		3. parse
 * 				a. if valid gps coordinates are found, stop
 * 				b. else repeat with rest of buffer
 */
char* GPS_ParseBuffer(double *latitude, double *longitude, float *time) {
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 8001636:	af00      	add	r7, sp, #0
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	6018      	str	r0, [r3, #0]
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	6019      	str	r1, [r3, #0]
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	601a      	str	r2, [r3, #0]
	// debugging: print full buffer first
	HAL_UART_Transmit(&huart8, rx_buf, strlen(rx_buf), HAL_MAX_DELAY);
	#endif

	// limits on the DMA buffer
	uint16_t buf_end = GPS_RX_DMA_BUF_LEN + 1; // +1 for null terminator
 8001648:	23b0      	movs	r3, #176	; 0xb0
 800164a:	f8a7 34ce 	strh.w	r3, [r7, #1230]	; 0x4ce
	uint8_t valid_string_found = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7

	// for extracting substrings to be parsed
	char current_substring[200]; // max size of valid NMEA string is 75 for the validate function
	memset(current_substring, 0, 200);
 8001654:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8001658:	22c8      	movs	r2, #200	; 0xc8
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f00d f9c9 	bl	800e9f4 <memset>
	char txbuasdf[1000] = {0};
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	3304      	adds	r3, #4
 800166c:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f00d f9be 	bl	800e9f4 <memset>

	// need to know where we are in the buffer to be able to loop automatically
	char *head_of_parse_buffer = gps_rx_buf;
 8001678:	4b48      	ldr	r3, [pc, #288]	; (800179c <GPS_ParseBuffer+0x16c>)
 800167a:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
	char *dollar;
	char *newline;
	uint8_t loopcount = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 34cd 	strb.w	r3, [r7, #1229]	; 0x4cd

	while (head_of_parse_buffer != NULL) {
 8001684:	e05c      	b.n	8001740 <GPS_ParseBuffer+0x110>

//		sprintf(txbuasdf, "loop start: address head = %p\r\n", head_of_parse_buffer);
//		HAL_UART_Transmit(&huart8, txbuasdf, strlen(txbuasdf), HAL_MAX_DELAY);

		// get index of '$' and '\n'. note: gps_rx_buf MUST be null terminated!
		dollar = strchr(head_of_parse_buffer, '$');
 8001686:	2124      	movs	r1, #36	; 0x24
 8001688:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 800168c:	f00e fa13 	bl	800fab6 <strchr>
 8001690:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8
		newline = strchr(dollar, '\n'); // start after $ sign
 8001694:	210a      	movs	r1, #10
 8001696:	f8d7 04c8 	ldr.w	r0, [r7, #1224]	; 0x4c8
 800169a:	f00e fa0c 	bl	800fab6 <strchr>
 800169e:	f8c7 04c4 	str.w	r0, [r7, #1220]	; 0x4c4

		if (dollar != NULL && newline != NULL) {
 80016a2:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d04e      	beq.n	8001748 <GPS_ParseBuffer+0x118>
 80016aa:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d04a      	beq.n	8001748 <GPS_ParseBuffer+0x118>
			// copy substring into string
//			sprintf(txbuasdf, "lc = %lu\taddresses: dollar = %p\tnewline = %p\tnewline-dollar = %d\r\n", loopcount, dollar, newline, newline-dollar);
//			HAL_UART_Transmit(&huart8, txbuasdf, strlen(txbuasdf), HAL_MAX_DELAY);

			memcpy(current_substring, dollar, (newline - dollar));
 80016b2:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 80016b6:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80016c2:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	; 0x4c8
 80016c6:	4618      	mov	r0, r3
 80016c8:	f00d f986 	bl	800e9d8 <memcpy>
		else {
			break;
		}

		// parse
		if (GPS_validate((char*) current_substring)) {
 80016cc:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 f86b 	bl	80017ac <GPS_validate>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d020      	beq.n	800171e <GPS_ParseBuffer+0xee>
			if (GPS_parse((char*) current_substring)) {
 80016dc:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f8c5 	bl	8001870 <GPS_parse>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d018      	beq.n	800171e <GPS_ParseBuffer+0xee>
				*latitude = GPS.dec_latitude;
 80016ec:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <GPS_ParseBuffer+0x170>)
 80016ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016f2:	f107 010c 	add.w	r1, r7, #12
 80016f6:	6809      	ldr	r1, [r1, #0]
 80016f8:	e9c1 2300 	strd	r2, r3, [r1]
				*longitude = GPS.dec_longitude;
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <GPS_ParseBuffer+0x170>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f107 0108 	add.w	r1, r7, #8
 8001706:	6809      	ldr	r1, [r1, #0]
 8001708:	e9c1 2300 	strd	r2, r3, [r1]
				*time = GPS.utc_time;
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <GPS_ParseBuffer+0x170>)
 800170e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	601a      	str	r2, [r3, #0]
				valid_string_found = 1;
 8001716:	2301      	movs	r3, #1
 8001718:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7

				break; // got valid coordinates, stop parsing
 800171c:	e014      	b.n	8001748 <GPS_ParseBuffer+0x118>
			}
		}

		memset(current_substring, 0, (newline - dollar) + 10);
 800171e:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 8001722:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	330a      	adds	r3, #10
 800172a:	461a      	mov	r2, r3
 800172c:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f00d f95e 	bl	800e9f4 <memset>
		head_of_parse_buffer = newline; // move head of buffer to newline character found
 8001738:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800173c:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
	while (head_of_parse_buffer != NULL) {
 8001740:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d19e      	bne.n	8001686 <GPS_ParseBuffer+0x56>
//		sprintf(txbuasdf, "addresses: newline = %p\thead = %p\r\n", newline, head_of_parse_buffer);
//		HAL_UART_Transmit(&huart8, txbuasdf, strlen(txbuasdf), HAL_MAX_DELAY);
	}


	memset(gps_rx_buf, 0, buf_end);
 8001748:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 800174c:	461a      	mov	r2, r3
 800174e:	2100      	movs	r1, #0
 8001750:	4812      	ldr	r0, [pc, #72]	; (800179c <GPS_ParseBuffer+0x16c>)
 8001752:	f00d f94f 	bl	800e9f4 <memset>

	// return so we can save the parsed string to sd card without including
	// sd card in this file
	if (valid_string_found) {
 8001756:	f897 34d7 	ldrb.w	r3, [r7, #1239]	; 0x4d7
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00a      	beq.n	8001774 <GPS_ParseBuffer+0x144>
		valid_string_found = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7
		strcpy(gps_parsed, current_substring);
 8001764:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8001768:	4619      	mov	r1, r3
 800176a:	480e      	ldr	r0, [pc, #56]	; (80017a4 <GPS_ParseBuffer+0x174>)
 800176c:	f00e f9b0 	bl	800fad0 <strcpy>
		return gps_parsed;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <GPS_ParseBuffer+0x174>)
 8001772:	e00d      	b.n	8001790 <GPS_ParseBuffer+0x160>
	}
	else {
		strcpy(gps_parsed, "\nno valid GPS parsed\n");
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <GPS_ParseBuffer+0x174>)
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <GPS_ParseBuffer+0x178>)
 8001778:	4615      	mov	r5, r2
 800177a:	461c      	mov	r4, r3
 800177c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177e:	6028      	str	r0, [r5, #0]
 8001780:	6069      	str	r1, [r5, #4]
 8001782:	60aa      	str	r2, [r5, #8]
 8001784:	60eb      	str	r3, [r5, #12]
 8001786:	6820      	ldr	r0, [r4, #0]
 8001788:	6128      	str	r0, [r5, #16]
 800178a:	88a3      	ldrh	r3, [r4, #4]
 800178c:	82ab      	strh	r3, [r5, #20]
		return ((char *)"\nno valid GPS parsed\n");
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <GPS_ParseBuffer+0x178>)
	}
}
 8001790:	4618      	mov	r0, r3
 8001792:	f507 679b 	add.w	r7, r7, #1240	; 0x4d8
 8001796:	46bd      	mov	sp, r7
 8001798:	bdb0      	pop	{r4, r5, r7, pc}
 800179a:	bf00      	nop
 800179c:	20000a4c 	.word	0x20000a4c
 80017a0:	200005a0 	.word	0x200005a0
 80017a4:	200008e8 	.word	0x200008e8
 80017a8:	08014bd8 	.word	0x08014bd8

080017ac <GPS_validate>:

int GPS_validate(char *nmeastr){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$'){
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b24      	cmp	r3, #36	; 0x24
 80017c6:	d103      	bne.n	80017d0 <GPS_validate+0x24>
        i++;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
    } else {
        return 0;
    }

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80017ce:	e00c      	b.n	80017ea <GPS_validate+0x3e>
        return 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	e047      	b.n	8001864 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4053      	eors	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        i++;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3301      	adds	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <GPS_validate+0x5c>
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b2a      	cmp	r3, #42	; 0x2a
 8001800:	d002      	beq.n	8001808 <GPS_validate+0x5c>
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b4a      	cmp	r3, #74	; 0x4a
 8001806:	dde5      	ble.n	80017d4 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2b4a      	cmp	r3, #74	; 0x4a
 800180c:	dd01      	ble.n	8001812 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800180e:	2300      	movs	r3, #0
 8001810:	e028      	b.n	8001864 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b2a      	cmp	r3, #42	; 0x2a
 800181c:	d119      	bne.n	8001852 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3302      	adds	r3, #2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800183a:	f107 0308 	add.w	r3, r7, #8
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	490a      	ldr	r1, [pc, #40]	; (800186c <GPS_validate+0xc0>)
 8001842:	4618      	mov	r0, r3
 8001844:	f00e f8a6 	bl	800f994 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001848:	7a3a      	ldrb	r2, [r7, #8]
 800184a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800184c:	429a      	cmp	r2, r3
 800184e:	d108      	bne.n	8001862 <GPS_validate+0xb6>
 8001850:	e001      	b.n	8001856 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001852:	2300      	movs	r3, #0
 8001854:	e006      	b.n	8001864 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001856:	7a7a      	ldrb	r2, [r7, #9]
 8001858:	7b7b      	ldrb	r3, [r7, #13]
 800185a:	429a      	cmp	r2, r3
 800185c:	d101      	bne.n	8001862 <GPS_validate+0xb6>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <GPS_validate+0xb8>
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	08014bf0 	.word	0x08014bf0

08001870 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af08      	add	r7, sp, #32
 8001876:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8001878:	2206      	movs	r2, #6
 800187a:	497d      	ldr	r1, [pc, #500]	; (8001a70 <GPS_parse+0x200>)
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f00e f92f 	bl	800fae0 <strncmp>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d143      	bne.n	8001910 <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%lf,%c,%lf,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001888:	4b7a      	ldr	r3, [pc, #488]	; (8001a74 <GPS_parse+0x204>)
 800188a:	9307      	str	r3, [sp, #28]
 800188c:	4b7a      	ldr	r3, [pc, #488]	; (8001a78 <GPS_parse+0x208>)
 800188e:	9306      	str	r3, [sp, #24]
 8001890:	4b7a      	ldr	r3, [pc, #488]	; (8001a7c <GPS_parse+0x20c>)
 8001892:	9305      	str	r3, [sp, #20]
 8001894:	4b7a      	ldr	r3, [pc, #488]	; (8001a80 <GPS_parse+0x210>)
 8001896:	9304      	str	r3, [sp, #16]
 8001898:	4b7a      	ldr	r3, [pc, #488]	; (8001a84 <GPS_parse+0x214>)
 800189a:	9303      	str	r3, [sp, #12]
 800189c:	4b7a      	ldr	r3, [pc, #488]	; (8001a88 <GPS_parse+0x218>)
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	4b7a      	ldr	r3, [pc, #488]	; (8001a8c <GPS_parse+0x21c>)
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	4b7a      	ldr	r3, [pc, #488]	; (8001a90 <GPS_parse+0x220>)
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	4b7a      	ldr	r3, [pc, #488]	; (8001a94 <GPS_parse+0x224>)
 80018aa:	4a7b      	ldr	r2, [pc, #492]	; (8001a98 <GPS_parse+0x228>)
 80018ac:	497b      	ldr	r1, [pc, #492]	; (8001a9c <GPS_parse+0x22c>)
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f00e f890 	bl	800f9d4 <siscanf>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f340 80d4 	ble.w	8001a64 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80018bc:	4b78      	ldr	r3, [pc, #480]	; (8001aa0 <GPS_parse+0x230>)
 80018be:	ed93 7b08 	vldr	d7, [r3, #32]
 80018c2:	4b77      	ldr	r3, [pc, #476]	; (8001aa0 <GPS_parse+0x230>)
 80018c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80018c8:	4618      	mov	r0, r3
 80018ca:	eeb0 0a47 	vmov.f32	s0, s14
 80018ce:	eef0 0a67 	vmov.f32	s1, s15
 80018d2:	f000 f909 	bl	8001ae8 <GPS_nmea_to_dec>
 80018d6:	eeb0 7a40 	vmov.f32	s14, s0
 80018da:	eef0 7a60 	vmov.f32	s15, s1
 80018de:	4b70      	ldr	r3, [pc, #448]	; (8001aa0 <GPS_parse+0x230>)
 80018e0:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80018e4:	4b6e      	ldr	r3, [pc, #440]	; (8001aa0 <GPS_parse+0x230>)
 80018e6:	ed93 7b06 	vldr	d7, [r3, #24]
 80018ea:	4b6d      	ldr	r3, [pc, #436]	; (8001aa0 <GPS_parse+0x230>)
 80018ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80018f0:	4618      	mov	r0, r3
 80018f2:	eeb0 0a47 	vmov.f32	s0, s14
 80018f6:	eef0 0a67 	vmov.f32	s1, s15
 80018fa:	f000 f8f5 	bl	8001ae8 <GPS_nmea_to_dec>
 80018fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001902:	eef0 7a60 	vmov.f32	s15, s1
 8001906:	4b66      	ldr	r3, [pc, #408]	; (8001aa0 <GPS_parse+0x230>)
 8001908:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 800190c:	2301      	movs	r3, #1
 800190e:	e0aa      	b.n	8001a66 <GPS_parse+0x1f6>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8001910:	2206      	movs	r2, #6
 8001912:	4964      	ldr	r1, [pc, #400]	; (8001aa4 <GPS_parse+0x234>)
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f00e f8e3 	bl	800fae0 <strncmp>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d13f      	bne.n	80019a0 <GPS_parse+0x130>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%lf,%c,%lf,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8001920:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <GPS_parse+0x238>)
 8001922:	9305      	str	r3, [sp, #20]
 8001924:	4b61      	ldr	r3, [pc, #388]	; (8001aac <GPS_parse+0x23c>)
 8001926:	9304      	str	r3, [sp, #16]
 8001928:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <GPS_parse+0x240>)
 800192a:	9303      	str	r3, [sp, #12]
 800192c:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <GPS_parse+0x218>)
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <GPS_parse+0x21c>)
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	4b56      	ldr	r3, [pc, #344]	; (8001a90 <GPS_parse+0x220>)
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	4b56      	ldr	r3, [pc, #344]	; (8001a94 <GPS_parse+0x224>)
 800193a:	4a57      	ldr	r2, [pc, #348]	; (8001a98 <GPS_parse+0x228>)
 800193c:	495d      	ldr	r1, [pc, #372]	; (8001ab4 <GPS_parse+0x244>)
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f00e f848 	bl	800f9d4 <siscanf>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	f340 808c 	ble.w	8001a64 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800194c:	4b54      	ldr	r3, [pc, #336]	; (8001aa0 <GPS_parse+0x230>)
 800194e:	ed93 7b08 	vldr	d7, [r3, #32]
 8001952:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <GPS_parse+0x230>)
 8001954:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001958:	4618      	mov	r0, r3
 800195a:	eeb0 0a47 	vmov.f32	s0, s14
 800195e:	eef0 0a67 	vmov.f32	s1, s15
 8001962:	f000 f8c1 	bl	8001ae8 <GPS_nmea_to_dec>
 8001966:	eeb0 7a40 	vmov.f32	s14, s0
 800196a:	eef0 7a60 	vmov.f32	s15, s1
 800196e:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <GPS_parse+0x230>)
 8001970:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001974:	4b4a      	ldr	r3, [pc, #296]	; (8001aa0 <GPS_parse+0x230>)
 8001976:	ed93 7b06 	vldr	d7, [r3, #24]
 800197a:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <GPS_parse+0x230>)
 800197c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001980:	4618      	mov	r0, r3
 8001982:	eeb0 0a47 	vmov.f32	s0, s14
 8001986:	eef0 0a67 	vmov.f32	s1, s15
 800198a:	f000 f8ad 	bl	8001ae8 <GPS_nmea_to_dec>
 800198e:	eeb0 7a40 	vmov.f32	s14, s0
 8001992:	eef0 7a60 	vmov.f32	s15, s1
 8001996:	4b42      	ldr	r3, [pc, #264]	; (8001aa0 <GPS_parse+0x230>)
 8001998:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 800199c:	2301      	movs	r3, #1
 800199e:	e062      	b.n	8001a66 <GPS_parse+0x1f6>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80019a0:	2206      	movs	r2, #6
 80019a2:	4945      	ldr	r1, [pc, #276]	; (8001ab8 <GPS_parse+0x248>)
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f00e f89b 	bl	800fae0 <strncmp>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d13a      	bne.n	8001a26 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNGLL,%lf,%c,%lf,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80019b0:	4b42      	ldr	r3, [pc, #264]	; (8001abc <GPS_parse+0x24c>)
 80019b2:	9303      	str	r3, [sp, #12]
 80019b4:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <GPS_parse+0x228>)
 80019b6:	9302      	str	r3, [sp, #8]
 80019b8:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <GPS_parse+0x218>)
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <GPS_parse+0x21c>)
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <GPS_parse+0x220>)
 80019c2:	4a34      	ldr	r2, [pc, #208]	; (8001a94 <GPS_parse+0x224>)
 80019c4:	493e      	ldr	r1, [pc, #248]	; (8001ac0 <GPS_parse+0x250>)
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f00e f804 	bl	800f9d4 <siscanf>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dd48      	ble.n	8001a64 <GPS_parse+0x1f4>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <GPS_parse+0x230>)
 80019d4:	ed93 7b08 	vldr	d7, [r3, #32]
 80019d8:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <GPS_parse+0x230>)
 80019da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019de:	4618      	mov	r0, r3
 80019e0:	eeb0 0a47 	vmov.f32	s0, s14
 80019e4:	eef0 0a67 	vmov.f32	s1, s15
 80019e8:	f000 f87e 	bl	8001ae8 <GPS_nmea_to_dec>
 80019ec:	eeb0 7a40 	vmov.f32	s14, s0
 80019f0:	eef0 7a60 	vmov.f32	s15, s1
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <GPS_parse+0x230>)
 80019f6:	ed83 7b02 	vstr	d7, [r3, #8]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80019fa:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <GPS_parse+0x230>)
 80019fc:	ed93 7b06 	vldr	d7, [r3, #24]
 8001a00:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <GPS_parse+0x230>)
 8001a02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a06:	4618      	mov	r0, r3
 8001a08:	eeb0 0a47 	vmov.f32	s0, s14
 8001a0c:	eef0 0a67 	vmov.f32	s1, s15
 8001a10:	f000 f86a 	bl	8001ae8 <GPS_nmea_to_dec>
 8001a14:	eeb0 7a40 	vmov.f32	s14, s0
 8001a18:	eef0 7a60 	vmov.f32	s15, s1
 8001a1c:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <GPS_parse+0x230>)
 8001a1e:	ed83 7b00 	vstr	d7, [r3]
        	return 1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e01f      	b.n	8001a66 <GPS_parse+0x1f6>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8001a26:	2206      	movs	r2, #6
 8001a28:	4926      	ldr	r1, [pc, #152]	; (8001ac4 <GPS_parse+0x254>)
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f00e f858 	bl	800fae0 <strncmp>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d116      	bne.n	8001a64 <GPS_parse+0x1f4>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001a36:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <GPS_parse+0x258>)
 8001a38:	9305      	str	r3, [sp, #20]
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <GPS_parse+0x25c>)
 8001a3c:	9304      	str	r3, [sp, #16]
 8001a3e:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <GPS_parse+0x260>)
 8001a40:	9303      	str	r3, [sp, #12]
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <GPS_parse+0x240>)
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <GPS_parse+0x264>)
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <GPS_parse+0x268>)
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <GPS_parse+0x26c>)
 8001a50:	4a23      	ldr	r2, [pc, #140]	; (8001ae0 <GPS_parse+0x270>)
 8001a52:	4924      	ldr	r1, [pc, #144]	; (8001ae4 <GPS_parse+0x274>)
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f00d ffbd 	bl	800f9d4 <siscanf>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	dd01      	ble.n	8001a64 <GPS_parse+0x1f4>
            return 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e000      	b.n	8001a66 <GPS_parse+0x1f6>
    }
    return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	08014bf8 	.word	0x08014bf8
 8001a74:	200005e0 	.word	0x200005e0
 8001a78:	200005dc 	.word	0x200005dc
 8001a7c:	200005d8 	.word	0x200005d8
 8001a80:	200005d4 	.word	0x200005d4
 8001a84:	200005d0 	.word	0x200005d0
 8001a88:	200005cd 	.word	0x200005cd
 8001a8c:	200005b8 	.word	0x200005b8
 8001a90:	200005cc 	.word	0x200005cc
 8001a94:	200005c0 	.word	0x200005c0
 8001a98:	200005c8 	.word	0x200005c8
 8001a9c:	08014c00 	.word	0x08014c00
 8001aa0:	200005a0 	.word	0x200005a0
 8001aa4:	08014c28 	.word	0x08014c28
 8001aa8:	200005ec 	.word	0x200005ec
 8001aac:	200005e8 	.word	0x200005e8
 8001ab0:	200005e4 	.word	0x200005e4
 8001ab4:	08014c30 	.word	0x08014c30
 8001ab8:	08014c54 	.word	0x08014c54
 8001abc:	200005f0 	.word	0x200005f0
 8001ac0:	08014c5c 	.word	0x08014c5c
 8001ac4:	08014c78 	.word	0x08014c78
 8001ac8:	20000608 	.word	0x20000608
 8001acc:	20000604 	.word	0x20000604
 8001ad0:	20000601 	.word	0x20000601
 8001ad4:	20000600 	.word	0x20000600
 8001ad8:	200005fc 	.word	0x200005fc
 8001adc:	200005f8 	.word	0x200005f8
 8001ae0:	200005f4 	.word	0x200005f4
 8001ae4:	08014c80 	.word	0x08014c80

08001ae8 <GPS_nmea_to_dec>:

double GPS_nmea_to_dec(double deg_coord, char nsew) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	; 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	ed87 0b02 	vstr	d0, [r7, #8]
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
    int degree = (int)(deg_coord/100);
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <GPS_nmea_to_dec+0xac>)
 8001afc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b00:	f7fe feb4 	bl	800086c <__aeabi_ddiv>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff f834 	bl	8000b78 <__aeabi_d2iz>
 8001b10:	4603      	mov	r3, r0
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    double minutes = deg_coord - degree*100;
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	2264      	movs	r2, #100	; 0x64
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd11 	bl	8000544 <__aeabi_i2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b2a:	f7fe fbbd 	bl	80002a8 <__aeabi_dsub>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double dec_deg = minutes / 60;
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <GPS_nmea_to_dec+0xb0>)
 8001b3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b40:	f7fe fe94 	bl	800086c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double decimal = degree + dec_deg;
 8001b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b4e:	f7fe fcf9 	bl	8000544 <__aeabi_i2d>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b5a:	f7fe fba7 	bl	80002ac <__adddf3>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2b53      	cmp	r3, #83	; 0x53
 8001b6a:	d002      	beq.n	8001b72 <GPS_nmea_to_dec+0x8a>
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	2b57      	cmp	r3, #87	; 0x57
 8001b70:	d105      	bne.n	8001b7e <GPS_nmea_to_dec+0x96>
        decimal *= -1;
 8001b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    return decimal;
 8001b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b82:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b86:	eeb0 0a47 	vmov.f32	s0, s14
 8001b8a:	eef0 0a67 	vmov.f32	s1, s15
 8001b8e:	3730      	adds	r7, #48	; 0x30
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40590000 	.word	0x40590000
 8001b98:	404e0000 	.word	0x404e0000

08001b9c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	; (8001c14 <MX_I2C2_Init+0x78>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	; (8001c18 <MX_I2C2_Init+0x7c>)
 8001baa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bbe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bd8:	480d      	ldr	r0, [pc, #52]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bda:	f004 fee7 	bl	80069ac <HAL_I2C_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001be4:	f001 fd66 	bl	80036b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001be8:	2100      	movs	r1, #0
 8001bea:	4809      	ldr	r0, [pc, #36]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bec:	f005 fe9d 	bl	800792a <HAL_I2CEx_ConfigAnalogFilter>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001bf6:	f001 fd5d 	bl	80036b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bfe:	f005 fed0 	bl	80079a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001c08:	f001 fd54 	bl	80036b4 <Error_Handler>
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000664 	.word	0x20000664
 8001c14:	40005800 	.word	0x40005800
 8001c18:	000186a0 	.word	0x000186a0

08001c1c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <MX_I2C3_Init+0x78>)
 8001c24:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c28:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <MX_I2C3_Init+0x7c>)
 8001c2a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c3e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c58:	480d      	ldr	r0, [pc, #52]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c5a:	f004 fea7 	bl	80069ac <HAL_I2C_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c64:	f001 fd26 	bl	80036b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4809      	ldr	r0, [pc, #36]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c6c:	f005 fe5d 	bl	800792a <HAL_I2CEx_ConfigAnalogFilter>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c76:	f001 fd1d 	bl	80036b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4804      	ldr	r0, [pc, #16]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c7e:	f005 fe90 	bl	80079a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c88:	f001 fd14 	bl	80036b4 <Error_Handler>
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000610 	.word	0x20000610
 8001c94:	40005c00 	.word	0x40005c00
 8001c98:	000186a0 	.word	0x000186a0

08001c9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	; 0x30
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a42      	ldr	r2, [pc, #264]	; (8001dc4 <HAL_I2C_MspInit+0x128>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d12d      	bne.n	8001d1a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a40      	ldr	r2, [pc, #256]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce0:	2312      	movs	r3, #18
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cec:	2304      	movs	r3, #4
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4835      	ldr	r0, [pc, #212]	; (8001dcc <HAL_I2C_MspInit+0x130>)
 8001cf8:	f004 fc62 	bl	80065c0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	4a30      	ldr	r2, [pc, #192]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001d06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001d18:	e050      	b.n	8001dbc <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2c      	ldr	r2, [pc, #176]	; (8001dd0 <HAL_I2C_MspInit+0x134>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d14b      	bne.n	8001dbc <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4a26      	ldr	r2, [pc, #152]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6313      	str	r3, [r2, #48]	; 0x30
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d62:	2312      	movs	r3, #18
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d6e:	2304      	movs	r3, #4
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d72:	f107 031c 	add.w	r3, r7, #28
 8001d76:	4619      	mov	r1, r3
 8001d78:	4816      	ldr	r0, [pc, #88]	; (8001dd4 <HAL_I2C_MspInit+0x138>)
 8001d7a:	f004 fc21 	bl	80065c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d84:	2312      	movs	r3, #18
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d90:	2304      	movs	r3, #4
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480f      	ldr	r0, [pc, #60]	; (8001dd8 <HAL_I2C_MspInit+0x13c>)
 8001d9c:	f004 fc10 	bl	80065c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001daa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dae:	6413      	str	r3, [r2, #64]	; 0x40
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_I2C_MspInit+0x12c>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
}
 8001dbc:	bf00      	nop
 8001dbe:	3730      	adds	r7, #48	; 0x30
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40005800 	.word	0x40005800
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40005c00 	.word	0x40005c00
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	40020000 	.word	0x40020000

08001ddc <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001de4:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <lsm6dsl_init+0xc8>)
 8001de6:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <lsm6dsl_init+0xcc>)
 8001dea:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 8001dec:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <lsm6dsl_init+0xd0>)
 8001dee:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001df0:	200a      	movs	r0, #10
 8001df2:	f000 f9e5 	bl	80021c0 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	492d      	ldr	r1, [pc, #180]	; (8001eb0 <lsm6dsl_init+0xd4>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fd07 	bl	8002810 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 8001e02:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <lsm6dsl_init+0xd4>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b6a      	cmp	r3, #106	; 0x6a
 8001e08:	d005      	beq.n	8001e16 <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	4829      	ldr	r0, [pc, #164]	; (8001eb4 <lsm6dsl_init+0xd8>)
 8001e10:	f004 fd9a 	bl	8006948 <HAL_GPIO_WritePin>
		__BKPT();
 8001e14:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fd08 	bl	8002832 <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	4924      	ldr	r1, [pc, #144]	; (8001eb8 <lsm6dsl_init+0xdc>)
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fd28 	bl	800287e <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 8001e2e:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <lsm6dsl_init+0xdc>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f5      	bne.n	8001e22 <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fbf9 	bl	8002634 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	2104      	movs	r1, #4
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 fb81 	bl	8002550 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	2104      	movs	r1, #4
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fbc7 	bl	80025e8 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2103      	movs	r1, #3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fb4f 	bl	8002504 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	2106      	movs	r1, #6
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fb95 	bl	800259c <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	2111      	movs	r1, #17
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 fd19 	bl	80028b0 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	21a8      	movs	r1, #168	; 0xa8
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fd4a 	bl	800291e <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	461c      	mov	r4, r3
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd90      	pop	{r4, r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	080020d9 	.word	0x080020d9
 8001ea8:	08002113 	.word	0x08002113
 8001eac:	20000610 	.word	0x20000610
 8001eb0:	2000022e 	.word	0x2000022e
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	2000022f 	.word	0x2000022f

08001ebc <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 8001ebc:	b590      	push	{r4, r7, lr}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	1d3c      	adds	r4, r7, #4
 8001ec4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ec8:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001eca:	f107 0217 	add.w	r2, r7, #23
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fbd4 	bl	8002680 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d02d      	beq.n	8001f3a <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001ede:	2206      	movs	r2, #6
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4818      	ldr	r0, [pc, #96]	; (8001f44 <get_acceleration+0x88>)
 8001ee4:	f00c fd86 	bl	800e9f4 <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	4916      	ldr	r1, [pc, #88]	; (8001f44 <get_acceleration+0x88>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 fc44 	bl	800277a <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <get_acceleration+0x88>)
 8001ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fad3 	bl	80024a4 <lsm6dsl_from_fs8g_to_mg>
 8001efe:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <get_acceleration+0x88>)
 8001f0a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001f12:	4610      	mov	r0, r2
 8001f14:	f000 fac6 	bl	80024a4 <lsm6dsl_from_fs8g_to_mg>
 8001f18:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 8001f1c:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <get_acceleration+0x88>)
 8001f22:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	f000 fab9 	bl	80024a4 <lsm6dsl_from_fs8g_to_mg>
 8001f32:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 8001f36:	edc4 7a00 	vstr	s15, [r4]
	}

}
 8001f3a:	bf00      	nop
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd90      	pop	{r4, r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000220 	.word	0x20000220

08001f48 <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	1d3c      	adds	r4, r7, #4
 8001f50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f54:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001f56:	f107 0217 	add.w	r2, r7, #23
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fba7 	bl	80026b2 <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d02d      	beq.n	8001fc6 <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001f6a:	2206      	movs	r2, #6
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4818      	ldr	r0, [pc, #96]	; (8001fd0 <get_angvelocity+0x88>)
 8001f70:	f00c fd40 	bl	800e9f4 <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	4916      	ldr	r1, [pc, #88]	; (8001fd0 <get_angvelocity+0x88>)
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fbb3 	bl	80026e4 <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <get_angvelocity+0x88>)
 8001f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 faa5 	bl	80024d4 <lsm6dsl_from_fs2000dps_to_mdps>
 8001f8a:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <get_angvelocity+0x88>)
 8001f96:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f000 fa98 	bl	80024d4 <lsm6dsl_from_fs2000dps_to_mdps>
 8001fa4:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 8001fa8:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <get_angvelocity+0x88>)
 8001fae:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001fb8:	4610      	mov	r0, r2
 8001fba:	f000 fa8b 	bl	80024d4 <lsm6dsl_from_fs2000dps_to_mdps>
 8001fbe:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 8001fc2:	edc4 7a00 	vstr	s15, [r4]
	}
}
 8001fc6:	bf00      	nop
 8001fc8:	371c      	adds	r7, #28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd90      	pop	{r4, r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000228 	.word	0x20000228

08001fd4 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <lps22hh_init+0x94>)
 8001fde:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 8001fe0:	4b22      	ldr	r3, [pc, #136]	; (800206c <lps22hh_init+0x98>)
 8001fe2:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <lps22hh_init+0x9c>)
 8001fe6:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001fe8:	200a      	movs	r0, #10
 8001fea:	f000 f8e9 	bl	80021c0 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 8001fee:	4b21      	ldr	r3, [pc, #132]	; (8002074 <lps22hh_init+0xa0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	491e      	ldr	r1, [pc, #120]	; (8002074 <lps22hh_init+0xa0>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f9d1 	bl	80023a2 <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 8002000:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <lps22hh_init+0xa0>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2bb3      	cmp	r3, #179	; 0xb3
 8002006:	d007      	beq.n	8002018 <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002008:	2201      	movs	r2, #1
 800200a:	2104      	movs	r1, #4
 800200c:	481a      	ldr	r0, [pc, #104]	; (8002078 <lps22hh_init+0xa4>)
 800200e:	f004 fc9b 	bl	8006948 <HAL_GPIO_WritePin>
		__BKPT();
 8002012:	be00      	bkpt	0x0000
		Error_Handler();
 8002014:	f001 fb4e 	bl	80036b4 <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	2101      	movs	r1, #1
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f9d0 	bl	80023c4 <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	4914      	ldr	r1, [pc, #80]	; (800207c <lps22hh_init+0xa8>)
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f9f0 	bl	8002410 <lps22hh_reset_get>
	} while (rst_lps22hh);
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <lps22hh_init+0xa8>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f5      	bne.n	8002024 <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2101      	movs	r1, #1
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f912 	bl	8002268 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_200_Hz);
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	2107      	movs	r1, #7
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f932 	bl	80022b4 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	461c      	mov	r4, r3
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800205c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	0800214d 	.word	0x0800214d
 800206c:	08002187 	.word	0x08002187
 8002070:	20000610 	.word	0x20000610
 8002074:	20000234 	.word	0x20000234
 8002078:	40020800 	.word	0x40020800
 800207c:	20000235 	.word	0x20000235

08002080 <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	1d3c      	adds	r4, r7, #4
 8002088:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800208c:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800208e:	f107 0214 	add.w	r2, r7, #20
 8002092:	1d38      	adds	r0, r7, #4
 8002094:	2301      	movs	r3, #1
 8002096:	2127      	movs	r1, #39	; 0x27
 8002098:	f000 f89d 	bl	80021d6 <lps22hh_read_reg>

	if (reg.status.p_da) {
 800209c:	7d3b      	ldrb	r3, [r7, #20]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d011      	beq.n	80020cc <get_pressure+0x4c>
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <get_pressure+0x54>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	4908      	ldr	r1, [pc, #32]	; (80020d4 <get_pressure+0x54>)
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f94c 	bl	8002350 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <get_pressure+0x54>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 f8bb 	bl	8002238 <lps22hh_from_lsb_to_hpa>
 80020c2:	eef0 7a40 	vmov.f32	s15, s0
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80020cc:	bf00      	nop
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd90      	pop	{r4, r7, pc}
 80020d4:	20000230 	.word	0x20000230

080020d8 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af04      	add	r7, sp, #16
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	461a      	mov	r2, r3
 80020e4:	460b      	mov	r3, r1
 80020e6:	72fb      	strb	r3, [r7, #11]
 80020e8:	4613      	mov	r3, r2
 80020ea:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 80020ec:	7afb      	ldrb	r3, [r7, #11]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	893b      	ldrh	r3, [r7, #8]
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2301      	movs	r3, #1
 8002100:	21d5      	movs	r1, #213	; 0xd5
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f004 fd96 	bl	8006c34 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b088      	sub	sp, #32
 8002116:	af04      	add	r7, sp, #16
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	461a      	mov	r2, r3
 800211e:	460b      	mov	r3, r1
 8002120:	72fb      	strb	r3, [r7, #11]
 8002122:	4613      	mov	r3, r2
 8002124:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 8002126:	7afb      	ldrb	r3, [r7, #11]
 8002128:	b29a      	uxth	r2, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	893b      	ldrh	r3, [r7, #8]
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2301      	movs	r3, #1
 800213a:	21d5      	movs	r1, #213	; 0xd5
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f004 fe73 	bl	8006e28 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af04      	add	r7, sp, #16
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	461a      	mov	r2, r3
 8002158:	460b      	mov	r3, r1
 800215a:	72fb      	strb	r3, [r7, #11]
 800215c:	4613      	mov	r3, r2
 800215e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 8002160:	7afb      	ldrb	r3, [r7, #11]
 8002162:	b29a      	uxth	r2, r3
 8002164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002168:	9302      	str	r3, [sp, #8]
 800216a:	893b      	ldrh	r3, [r7, #8]
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2301      	movs	r3, #1
 8002174:	21b9      	movs	r1, #185	; 0xb9
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f004 fd5c 	bl	8006c34 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b088      	sub	sp, #32
 800218a:	af04      	add	r7, sp, #16
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	461a      	mov	r2, r3
 8002192:	460b      	mov	r3, r1
 8002194:	72fb      	strb	r3, [r7, #11]
 8002196:	4613      	mov	r3, r2
 8002198:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 800219a:	7afb      	ldrb	r3, [r7, #11]
 800219c:	b29a      	uxth	r2, r3
 800219e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a2:	9302      	str	r3, [sp, #8]
 80021a4:	893b      	ldrh	r3, [r7, #8]
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	21b9      	movs	r1, #185	; 0xb9
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f004 fe39 	bl	8006e28 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f003 f935 	bl	8005438 <HAL_Delay>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80021d6:	b590      	push	{r4, r7, lr}
 80021d8:	b087      	sub	sp, #28
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	461a      	mov	r2, r3
 80021e2:	460b      	mov	r3, r1
 80021e4:	72fb      	strb	r3, [r7, #11]
 80021e6:	4613      	mov	r3, r2
 80021e8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685c      	ldr	r4, [r3, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6898      	ldr	r0, [r3, #8]
 80021f2:	893b      	ldrh	r3, [r7, #8]
 80021f4:	7af9      	ldrb	r1, [r7, #11]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	47a0      	blx	r4
 80021fa:	6178      	str	r0, [r7, #20]

  return ret;
 80021fc:	697b      	ldr	r3, [r7, #20]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd90      	pop	{r4, r7, pc}

08002206 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002206:	b590      	push	{r4, r7, lr}
 8002208:	b087      	sub	sp, #28
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	461a      	mov	r2, r3
 8002212:	460b      	mov	r3, r1
 8002214:	72fb      	strb	r3, [r7, #11]
 8002216:	4613      	mov	r3, r2
 8002218:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681c      	ldr	r4, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6898      	ldr	r0, [r3, #8]
 8002222:	893b      	ldrh	r3, [r7, #8]
 8002224:	7af9      	ldrb	r1, [r7, #11]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	47a0      	blx	r4
 800222a:	6178      	str	r0, [r7, #20]

  return ret;
 800222c:	697b      	ldr	r3, [r7, #20]
}
 800222e:	4618      	mov	r0, r3
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	bd90      	pop	{r4, r7, pc}
	...

08002238 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800224a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002264 <lps22hh_from_lsb_to_hpa+0x2c>
 800224e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002252:	eef0 7a66 	vmov.f32	s15, s13
}
 8002256:	eeb0 0a67 	vmov.f32	s0, s15
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	49800000 	.word	0x49800000

08002268 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002274:	f107 0208 	add.w	r2, r7, #8
 8002278:	2301      	movs	r3, #1
 800227a:	2110      	movs	r1, #16
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ffaa 	bl	80021d6 <lps22hh_read_reg>
 8002282:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10f      	bne.n	80022aa <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	b2da      	uxtb	r2, r3
 8002292:	7a3b      	ldrb	r3, [r7, #8]
 8002294:	f362 0341 	bfi	r3, r2, #1, #1
 8002298:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800229a:	f107 0208 	add.w	r2, r7, #8
 800229e:	2301      	movs	r3, #1
 80022a0:	2110      	movs	r1, #16
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffaf 	bl	8002206 <lps22hh_write_reg>
 80022a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80022c0:	f107 0210 	add.w	r2, r7, #16
 80022c4:	2301      	movs	r3, #1
 80022c6:	2110      	movs	r1, #16
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff84 	bl	80021d6 <lps22hh_read_reg>
 80022ce:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d107      	bne.n	80022e6 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80022d6:	f107 020c 	add.w	r2, r7, #12
 80022da:	2301      	movs	r3, #1
 80022dc:	2111      	movs	r1, #17
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ff79 	bl	80021d6 <lps22hh_read_reg>
 80022e4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10f      	bne.n	800230c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	7c3b      	ldrb	r3, [r7, #16]
 80022f6:	f362 1306 	bfi	r3, r2, #4, #3
 80022fa:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80022fc:	f107 0210 	add.w	r2, r7, #16
 8002300:	2301      	movs	r3, #1
 8002302:	2110      	movs	r1, #16
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff7e 	bl	8002206 <lps22hh_write_reg>
 800230a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d119      	bne.n	8002346 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	b2da      	uxtb	r2, r3
 800231c:	7b3b      	ldrb	r3, [r7, #12]
 800231e:	f362 0341 	bfi	r3, r2, #1, #1
 8002322:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	08db      	lsrs	r3, r3, #3
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	b2da      	uxtb	r2, r3
 800232e:	7b3b      	ldrb	r3, [r7, #12]
 8002330:	f362 0300 	bfi	r3, r2, #0, #1
 8002334:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002336:	f107 020c 	add.w	r2, r7, #12
 800233a:	2301      	movs	r3, #1
 800233c:	2111      	movs	r1, #17
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ff61 	bl	8002206 <lps22hh_write_reg>
 8002344:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002346:	697b      	ldr	r3, [r7, #20]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800235a:	f107 0208 	add.w	r2, r7, #8
 800235e:	2303      	movs	r3, #3
 8002360:	2128      	movs	r1, #40	; 0x28
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ff37 	bl	80021d6 <lps22hh_read_reg>
 8002368:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800236a:	7abb      	ldrb	r3, [r7, #10]
 800236c:	461a      	mov	r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	7a7a      	ldrb	r2, [r7, #9]
 800237a:	441a      	add	r2, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	7a3a      	ldrb	r2, [r7, #8]
 8002388:	441a      	add	r2, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	021a      	lsls	r2, r3, #8
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	601a      	str	r2, [r3, #0]

  return ret;
 8002398:	68fb      	ldr	r3, [r7, #12]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80023ac:	2301      	movs	r3, #1
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	210f      	movs	r1, #15
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ff0f 	bl	80021d6 <lps22hh_read_reg>
 80023b8:	60f8      	str	r0, [r7, #12]

  return ret;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80023d0:	f107 0208 	add.w	r2, r7, #8
 80023d4:	2301      	movs	r3, #1
 80023d6:	2111      	movs	r1, #17
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff fefc 	bl	80021d6 <lps22hh_read_reg>
 80023de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10f      	bne.n	8002406 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	7a3b      	ldrb	r3, [r7, #8]
 80023f0:	f362 0382 	bfi	r3, r2, #2, #1
 80023f4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80023f6:	f107 0208 	add.w	r2, r7, #8
 80023fa:	2301      	movs	r3, #1
 80023fc:	2111      	movs	r1, #17
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ff01 	bl	8002206 <lps22hh_write_reg>
 8002404:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800241a:	f107 0208 	add.w	r2, r7, #8
 800241e:	2301      	movs	r3, #1
 8002420:	2111      	movs	r1, #17
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fed7 	bl	80021d6 <lps22hh_read_reg>
 8002428:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 800242a:	7a3b      	ldrb	r3, [r7, #8]
 800242c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	701a      	strb	r2, [r3, #0]

  return ret;
 8002438:	68fb      	ldr	r3, [r7, #12]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002442:	b590      	push	{r4, r7, lr}
 8002444:	b087      	sub	sp, #28
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	461a      	mov	r2, r3
 800244e:	460b      	mov	r3, r1
 8002450:	72fb      	strb	r3, [r7, #11]
 8002452:	4613      	mov	r3, r2
 8002454:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685c      	ldr	r4, [r3, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6898      	ldr	r0, [r3, #8]
 800245e:	893b      	ldrh	r3, [r7, #8]
 8002460:	7af9      	ldrb	r1, [r7, #11]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	47a0      	blx	r4
 8002466:	6178      	str	r0, [r7, #20]

  return ret;
 8002468:	697b      	ldr	r3, [r7, #20]
}
 800246a:	4618      	mov	r0, r3
 800246c:	371c      	adds	r7, #28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd90      	pop	{r4, r7, pc}

08002472 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002472:	b590      	push	{r4, r7, lr}
 8002474:	b087      	sub	sp, #28
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	461a      	mov	r2, r3
 800247e:	460b      	mov	r3, r1
 8002480:	72fb      	strb	r3, [r7, #11]
 8002482:	4613      	mov	r3, r2
 8002484:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681c      	ldr	r4, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6898      	ldr	r0, [r3, #8]
 800248e:	893b      	ldrh	r3, [r7, #8]
 8002490:	7af9      	ldrb	r1, [r7, #11]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	47a0      	blx	r4
 8002496:	6178      	str	r0, [r7, #20]

  return ret;
 8002498:	697b      	ldr	r3, [r7, #20]
}
 800249a:	4618      	mov	r0, r3
 800249c:	371c      	adds	r7, #28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd90      	pop	{r4, r7, pc}
	...

080024a4 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 80024ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ba:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80024d0 <lsm6dsl_from_fs8g_to_mg+0x2c>
 80024be:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80024c2:	eeb0 0a67 	vmov.f32	s0, s15
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	3e79db23 	.word	0x3e79db23

080024d4 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80024de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002500 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 80024ee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80024f2:	eeb0 0a67 	vmov.f32	s0, s15
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	428c0000 	.word	0x428c0000

08002504 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002510:	f107 0208 	add.w	r2, r7, #8
 8002514:	2301      	movs	r3, #1
 8002516:	2110      	movs	r1, #16
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff92 	bl	8002442 <lsm6dsl_read_reg>
 800251e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10f      	bne.n	8002546 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	b2da      	uxtb	r2, r3
 800252e:	7a3b      	ldrb	r3, [r7, #8]
 8002530:	f362 0383 	bfi	r3, r2, #2, #2
 8002534:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002536:	f107 0208 	add.w	r2, r7, #8
 800253a:	2301      	movs	r3, #1
 800253c:	2110      	movs	r1, #16
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff97 	bl	8002472 <lsm6dsl_write_reg>
 8002544:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800255c:	f107 0208 	add.w	r2, r7, #8
 8002560:	2301      	movs	r3, #1
 8002562:	2110      	movs	r1, #16
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff6c 	bl	8002442 <lsm6dsl_read_reg>
 800256a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	b2da      	uxtb	r2, r3
 800257a:	7a3b      	ldrb	r3, [r7, #8]
 800257c:	f362 1307 	bfi	r3, r2, #4, #4
 8002580:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002582:	f107 0208 	add.w	r2, r7, #8
 8002586:	2301      	movs	r3, #1
 8002588:	2110      	movs	r1, #16
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ff71 	bl	8002472 <lsm6dsl_write_reg>
 8002590:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80025a8:	f107 0208 	add.w	r2, r7, #8
 80025ac:	2301      	movs	r3, #1
 80025ae:	2111      	movs	r1, #17
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ff46 	bl	8002442 <lsm6dsl_read_reg>
 80025b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10f      	bne.n	80025de <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	7a3b      	ldrb	r3, [r7, #8]
 80025c8:	f362 0343 	bfi	r3, r2, #1, #3
 80025cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80025ce:	f107 0208 	add.w	r2, r7, #8
 80025d2:	2301      	movs	r3, #1
 80025d4:	2111      	movs	r1, #17
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ff4b 	bl	8002472 <lsm6dsl_write_reg>
 80025dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80025f4:	f107 0208 	add.w	r2, r7, #8
 80025f8:	2301      	movs	r3, #1
 80025fa:	2111      	movs	r1, #17
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff20 	bl	8002442 <lsm6dsl_read_reg>
 8002602:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	b2da      	uxtb	r2, r3
 8002612:	7a3b      	ldrb	r3, [r7, #8]
 8002614:	f362 1307 	bfi	r3, r2, #4, #4
 8002618:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800261a:	f107 0208 	add.w	r2, r7, #8
 800261e:	2301      	movs	r3, #1
 8002620:	2111      	movs	r1, #17
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff25 	bl	8002472 <lsm6dsl_write_reg>
 8002628:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002640:	f107 0208 	add.w	r2, r7, #8
 8002644:	2301      	movs	r3, #1
 8002646:	2112      	movs	r1, #18
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff fefa 	bl	8002442 <lsm6dsl_read_reg>
 800264e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10f      	bne.n	8002676 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	b2da      	uxtb	r2, r3
 800265e:	7a3b      	ldrb	r3, [r7, #8]
 8002660:	f362 1386 	bfi	r3, r2, #6, #1
 8002664:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002666:	f107 0208 	add.w	r2, r7, #8
 800266a:	2301      	movs	r3, #1
 800266c:	2112      	movs	r1, #18
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff feff 	bl	8002472 <lsm6dsl_write_reg>
 8002674:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002676:	68fb      	ldr	r3, [r7, #12]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 800268a:	f107 0208 	add.w	r2, r7, #8
 800268e:	2301      	movs	r3, #1
 8002690:	211e      	movs	r1, #30
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff fed5 	bl	8002442 <lsm6dsl_read_reg>
 8002698:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800269a:	7a3b      	ldrb	r3, [r7, #8]
 800269c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	701a      	strb	r2, [r3, #0]

  return ret;
 80026a8:	68fb      	ldr	r3, [r7, #12]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 80026bc:	f107 0208 	add.w	r2, r7, #8
 80026c0:	2301      	movs	r3, #1
 80026c2:	211e      	movs	r1, #30
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff febc 	bl	8002442 <lsm6dsl_read_reg>
 80026ca:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 80026cc:	7a3b      	ldrb	r3, [r7, #8]
 80026ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	701a      	strb	r2, [r3, #0]

  return ret;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80026ee:	f107 020c 	add.w	r2, r7, #12
 80026f2:	2306      	movs	r3, #6
 80026f4:	2122      	movs	r1, #34	; 0x22
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff fea3 	bl	8002442 <lsm6dsl_read_reg>
 80026fc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80026fe:	7b7b      	ldrb	r3, [r7, #13]
 8002700:	b21a      	sxth	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270c:	b29b      	uxth	r3, r3
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	b29a      	uxth	r2, r3
 8002712:	7b3b      	ldrb	r3, [r7, #12]
 8002714:	b29b      	uxth	r3, r3
 8002716:	4413      	add	r3, r2
 8002718:	b29b      	uxth	r3, r3
 800271a:	b21a      	sxth	r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	3302      	adds	r3, #2
 8002726:	b212      	sxth	r2, r2
 8002728:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	3302      	adds	r3, #2
 800272e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002732:	b29b      	uxth	r3, r3
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	b29a      	uxth	r2, r3
 8002738:	7bbb      	ldrb	r3, [r7, #14]
 800273a:	b29b      	uxth	r3, r3
 800273c:	4413      	add	r3, r2
 800273e:	b29a      	uxth	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	3302      	adds	r3, #2
 8002744:	b212      	sxth	r2, r2
 8002746:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002748:	7c7a      	ldrb	r2, [r7, #17]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	3304      	adds	r3, #4
 800274e:	b212      	sxth	r2, r2
 8002750:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	3304      	adds	r3, #4
 8002756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275a:	b29b      	uxth	r3, r3
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	b29a      	uxth	r2, r3
 8002760:	7c3b      	ldrb	r3, [r7, #16]
 8002762:	b29b      	uxth	r3, r3
 8002764:	4413      	add	r3, r2
 8002766:	b29a      	uxth	r2, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	3304      	adds	r3, #4
 800276c:	b212      	sxth	r2, r2
 800276e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002770:	697b      	ldr	r3, [r7, #20]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8002784:	f107 020c 	add.w	r2, r7, #12
 8002788:	2306      	movs	r3, #6
 800278a:	2128      	movs	r1, #40	; 0x28
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff fe58 	bl	8002442 <lsm6dsl_read_reg>
 8002792:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002794:	7b7b      	ldrb	r3, [r7, #13]
 8002796:	b21a      	sxth	r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	7b3b      	ldrb	r3, [r7, #12]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	b21a      	sxth	r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	3302      	adds	r3, #2
 80027bc:	b212      	sxth	r2, r2
 80027be:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	3302      	adds	r3, #2
 80027c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	7bbb      	ldrb	r3, [r7, #14]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	3302      	adds	r3, #2
 80027da:	b212      	sxth	r2, r2
 80027dc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80027de:	7c7a      	ldrb	r2, [r7, #17]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	3304      	adds	r3, #4
 80027e4:	b212      	sxth	r2, r2
 80027e6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	3304      	adds	r3, #4
 80027ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	7c3b      	ldrb	r3, [r7, #16]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3304      	adds	r3, #4
 8002802:	b212      	sxth	r2, r2
 8002804:	801a      	strh	r2, [r3, #0]

  return ret;
 8002806:	697b      	ldr	r3, [r7, #20]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800281a:	2301      	movs	r3, #1
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	210f      	movs	r1, #15
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fe0e 	bl	8002442 <lsm6dsl_read_reg>
 8002826:	60f8      	str	r0, [r7, #12]

  return ret;
 8002828:	68fb      	ldr	r3, [r7, #12]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800283e:	f107 0208 	add.w	r2, r7, #8
 8002842:	2301      	movs	r3, #1
 8002844:	2112      	movs	r1, #18
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fdfb 	bl	8002442 <lsm6dsl_read_reg>
 800284c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10f      	bne.n	8002874 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	7a3b      	ldrb	r3, [r7, #8]
 800285e:	f362 0300 	bfi	r3, r2, #0, #1
 8002862:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002864:	f107 0208 	add.w	r2, r7, #8
 8002868:	2301      	movs	r3, #1
 800286a:	2112      	movs	r1, #18
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fe00 	bl	8002472 <lsm6dsl_write_reg>
 8002872:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002874:	68fb      	ldr	r3, [r7, #12]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002888:	f107 0208 	add.w	r2, r7, #8
 800288c:	2301      	movs	r3, #1
 800288e:	2112      	movs	r1, #18
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fdd6 	bl	8002442 <lsm6dsl_read_reg>
 8002896:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8002898:	7a3b      	ldrb	r3, [r7, #8]
 800289a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	701a      	strb	r2, [r3, #0]

  return ret;
 80028a6:	68fb      	ldr	r3, [r7, #12]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80028bc:	f107 0208 	add.w	r2, r7, #8
 80028c0:	2301      	movs	r3, #1
 80028c2:	2117      	movs	r1, #23
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff fdbc 	bl	8002442 <lsm6dsl_read_reg>
 80028ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d120      	bne.n	8002914 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	7a3b      	ldrb	r3, [r7, #8]
 80028de:	f362 03c3 	bfi	r3, r2, #3, #1
 80028e2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	7a3b      	ldrb	r3, [r7, #8]
 80028ee:	f362 1346 	bfi	r3, r2, #5, #2
 80028f2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 80028f4:	7a3b      	ldrb	r3, [r7, #8]
 80028f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fa:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 80028fc:	7a3b      	ldrb	r3, [r7, #8]
 80028fe:	f36f 0382 	bfc	r3, #2, #1
 8002902:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8002904:	f107 0208 	add.w	r2, r7, #8
 8002908:	2301      	movs	r3, #1
 800290a:	2117      	movs	r1, #23
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff fdb0 	bl	8002472 <lsm6dsl_write_reg>
 8002912:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002914:	68fb      	ldr	r3, [r7, #12]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800292a:	f107 0208 	add.w	r2, r7, #8
 800292e:	2301      	movs	r3, #1
 8002930:	2116      	movs	r1, #22
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff fd85 	bl	8002442 <lsm6dsl_read_reg>
 8002938:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d157      	bne.n	80029f0 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	b2da      	uxtb	r2, r3
 800294a:	7a3b      	ldrb	r3, [r7, #8]
 800294c:	f362 1305 	bfi	r3, r2, #4, #2
 8002950:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	09db      	lsrs	r3, r3, #7
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	b2da      	uxtb	r2, r3
 800295e:	7a3b      	ldrb	r3, [r7, #8]
 8002960:	f362 1386 	bfi	r3, r2, #6, #1
 8002964:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8002966:	f107 0208 	add.w	r2, r7, #8
 800296a:	2301      	movs	r3, #1
 800296c:	2116      	movs	r1, #22
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff fd7f 	bl	8002472 <lsm6dsl_write_reg>
 8002974:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d139      	bne.n	80029f0 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800297c:	f107 020c 	add.w	r2, r7, #12
 8002980:	2301      	movs	r3, #1
 8002982:	2115      	movs	r1, #21
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fd5c 	bl	8002442 <lsm6dsl_read_reg>
 800298a:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d12e      	bne.n	80029f0 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	b2da      	uxtb	r2, r3
 800299a:	7b3b      	ldrb	r3, [r7, #12]
 800299c:	f362 0301 	bfi	r3, r2, #0, #2
 80029a0:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80029a2:	f107 020c 	add.w	r2, r7, #12
 80029a6:	2301      	movs	r3, #1
 80029a8:	2115      	movs	r1, #21
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fd61 	bl	8002472 <lsm6dsl_write_reg>
 80029b0:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d11b      	bne.n	80029f0 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 80029b8:	f107 0210 	add.w	r2, r7, #16
 80029bc:	2301      	movs	r3, #1
 80029be:	2113      	movs	r1, #19
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fd3e 	bl	8002442 <lsm6dsl_read_reg>
 80029c6:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d110      	bne.n	80029f0 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	08db      	lsrs	r3, r3, #3
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	7c3b      	ldrb	r3, [r7, #16]
 80029da:	f362 0341 	bfi	r3, r2, #1, #1
 80029de:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 80029e0:	f107 0210 	add.w	r2, r7, #16
 80029e4:	2301      	movs	r3, #1
 80029e6:	2113      	movs	r1, #19
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff fd42 	bl	8002472 <lsm6dsl_write_reg>
 80029ee:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 80029f0:	697b      	ldr	r3, [r7, #20]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <radio_tx>:
/* USER CODE BEGIN 0 */

// radio transmission wrapper
// TODO: add reception
#ifdef USING_XTEND
void radio_tx(uint8_t *msg_buffer, uint16_t size) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart3, msg_buffer, size, HAL_MAX_DELAY);
 8002a08:	887a      	ldrh	r2, [r7, #2]
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4806      	ldr	r0, [pc, #24]	; (8002a2c <radio_tx+0x30>)
 8002a12:	f007 fd26 	bl	800a462 <HAL_UART_Transmit>

	#ifdef DEBUG
	HAL_UART_Transmit(&huart8, msg_buffer, size, HAL_MAX_DELAY);
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4804      	ldr	r0, [pc, #16]	; (8002a30 <radio_tx+0x34>)
 8002a20:	f007 fd1f 	bl	800a462 <HAL_UART_Transmit>
	#endif
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	2000145c 	.word	0x2000145c
 8002a30:	200014fc 	.word	0x200014fc

08002a34 <tone>:
	#endif
}
#endif

// helper functions for buzzing
void tone(uint32_t duration, uint32_t repeats) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < repeats; i++) {
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e013      	b.n	8002a6c <tone+0x38>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002a44:	2108      	movs	r1, #8
 8002a46:	480e      	ldr	r0, [pc, #56]	; (8002a80 <tone+0x4c>)
 8002a48:	f006 fdc4 	bl	80095d4 <HAL_TIM_PWM_Start>
		HAL_Delay(duration);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f002 fcf3 	bl	8005438 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002a52:	2108      	movs	r1, #8
 8002a54:	480a      	ldr	r0, [pc, #40]	; (8002a80 <tone+0x4c>)
 8002a56:	f006 fdfb 	bl	8009650 <HAL_TIM_PWM_Stop>
		if (repeats > 1)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d902      	bls.n	8002a66 <tone+0x32>
			HAL_Delay(duration);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f002 fce9 	bl	8005438 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d3e7      	bcc.n	8002a44 <tone+0x10>
	}
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000135c 	.word	0x2000135c

08002a84 <buzz_success>:
void buzz_success() { tone(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS); };
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	2101      	movs	r1, #1
 8002a8a:	2032      	movs	r0, #50	; 0x32
 8002a8c:	f7ff ffd2 	bl	8002a34 <tone>
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <buzz_failure>:
void buzz_failure() { tone(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS); };
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	2101      	movs	r1, #1
 8002a9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a9e:	f7ff ffc9 	bl	8002a34 <tone>
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aac:	b0ad      	sub	sp, #180	; 0xb4
 8002aae:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ab0:	f002 fc50 	bl	8005354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ab4:	f000 fc88 	bl	80033c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ab8:	f7fe fbe8 	bl	800128c <MX_GPIO_Init>
  MX_DMA_Init();
 8002abc:	f7fe fba8 	bl	8001210 <MX_DMA_Init>
  MX_ADC1_Init();
 8002ac0:	f7fe fb10 	bl	80010e4 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002ac4:	f7ff f86a 	bl	8001b9c <MX_I2C2_Init>
  MX_I2C3_Init();
 8002ac8:	f7ff f8a8 	bl	8001c1c <MX_I2C3_Init>
  MX_SPI2_Init();
 8002acc:	f001 f95a 	bl	8003d84 <MX_SPI2_Init>
  MX_SPI4_Init();
 8002ad0:	f001 f98e 	bl	8003df0 <MX_SPI4_Init>
  MX_SPI5_Init();
 8002ad4:	f001 f9c2 	bl	8003e5c <MX_SPI5_Init>
  MX_TIM2_Init();
 8002ad8:	f001 fc22 	bl	8004320 <MX_TIM2_Init>
  MX_UART8_Init();
 8002adc:	f001 fd58 	bl	8004590 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8002ae0:	f001 fd80 	bl	80045e4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002ae4:	f001 fda8 	bl	8004638 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8002ae8:	f008 fc9c 	bl	800b424 <MX_FATFS_Init>
  MX_RTC_Init();
 8002aec:	f000 fdf0 	bl	80036d0 <MX_RTC_Init>
  MX_TIM4_Init();
 8002af0:	f001 fc8c 	bl	800440c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // *** IMPORTANT: DMA Init function must be called before peripheral init! *** //

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, SET);
 8002af4:	2201      	movs	r2, #1
 8002af6:	2140      	movs	r1, #64	; 0x40
 8002af8:	48b5      	ldr	r0, [pc, #724]	; (8002dd0 <main+0x328>)
 8002afa:	f003 ff25 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, SET);
 8002afe:	2201      	movs	r2, #1
 8002b00:	2120      	movs	r1, #32
 8002b02:	48b3      	ldr	r0, [pc, #716]	; (8002dd0 <main+0x328>)
 8002b04:	f003 ff20 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_IO3_GPIO_Port, FLASH_IO3_Pin, SET);
 8002b08:	2201      	movs	r2, #1
 8002b0a:	2110      	movs	r1, #16
 8002b0c:	48b0      	ldr	r0, [pc, #704]	; (8002dd0 <main+0x328>)
 8002b0e:	f003 ff1b 	bl	8006948 <HAL_GPIO_WritePin>

  // set CS for SD card high
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, SET);
 8002b12:	2201      	movs	r2, #1
 8002b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b18:	48ae      	ldr	r0, [pc, #696]	; (8002dd4 <main+0x32c>)
 8002b1a:	f003 ff15 	bl	8006948 <HAL_GPIO_WritePin>

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2102      	movs	r1, #2
 8002b22:	48ad      	ldr	r0, [pc, #692]	; (8002dd8 <main+0x330>)
 8002b24:	f003 ff10 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2104      	movs	r1, #4
 8002b2c:	48aa      	ldr	r0, [pc, #680]	; (8002dd8 <main+0x330>)
 8002b2e:	f003 ff0b 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2108      	movs	r1, #8
 8002b36:	48a8      	ldr	r0, [pc, #672]	; (8002dd8 <main+0x330>)
 8002b38:	f003 ff06 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, RESET);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2108      	movs	r1, #8
 8002b40:	48a6      	ldr	r0, [pc, #664]	; (8002ddc <main+0x334>)
 8002b42:	f003 ff01 	bl	8006948 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, SET);
 8002b46:	2201      	movs	r2, #1
 8002b48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b4c:	48a4      	ldr	r0, [pc, #656]	; (8002de0 <main+0x338>)
 8002b4e:	f003 fefb 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8002b52:	2200      	movs	r2, #0
 8002b54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b58:	48a1      	ldr	r0, [pc, #644]	; (8002de0 <main+0x338>)
 8002b5a:	f003 fef5 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b64:	489e      	ldr	r0, [pc, #632]	; (8002de0 <main+0x338>)
 8002b66:	f003 feef 	bl	8006948 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	489c      	ldr	r0, [pc, #624]	; (8002de0 <main+0x338>)
 8002b70:	f003 feea 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 8002b74:	2200      	movs	r2, #0
 8002b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b7a:	4896      	ldr	r0, [pc, #600]	; (8002dd4 <main+0x32c>)
 8002b7c:	f003 fee4 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8002b80:	2200      	movs	r2, #0
 8002b82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b86:	4893      	ldr	r0, [pc, #588]	; (8002dd4 <main+0x32c>)
 8002b88:	f003 fede 	bl	8006948 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2104      	movs	r1, #4
 8002b90:	4894      	ldr	r0, [pc, #592]	; (8002de4 <main+0x33c>)
 8002b92:	f003 fed9 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	4892      	ldr	r0, [pc, #584]	; (8002de4 <main+0x33c>)
 8002b9c:	f003 fed4 	bl	8006948 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ba6:	488f      	ldr	r0, [pc, #572]	; (8002de4 <main+0x33c>)
 8002ba8:	f003 fece 	bl	8006948 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high (SPI idle CS is high)
  HAL_GPIO_WritePin(TH_CS_GPIO_Port, TH_CS_Pin, SET);
 8002bac:	2201      	movs	r2, #1
 8002bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bb2:	488c      	ldr	r0, [pc, #560]	; (8002de4 <main+0x33c>)
 8002bb4:	f003 fec8 	bl	8006948 <HAL_GPIO_WritePin>

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bbe:	4888      	ldr	r0, [pc, #544]	; (8002de0 <main+0x338>)
 8002bc0:	f003 fec2 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2180      	movs	r1, #128	; 0x80
 8002bc8:	4881      	ldr	r0, [pc, #516]	; (8002dd0 <main+0x328>)
 8002bca:	f003 febd 	bl	8006948 <HAL_GPIO_WritePin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
  Tx_setup();
#endif

  // init i2c sensors and data storage
  dev_ctx_lsm = lsm6dsl_init();
 8002bce:	4c86      	ldr	r4, [pc, #536]	; (8002de8 <main+0x340>)
 8002bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff f901 	bl	8001ddc <lsm6dsl_init>
 8002bda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 8002be6:	f7ff ff4d 	bl	8002a84 <buzz_success>
  HAL_Delay(500);
 8002bea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bee:	f002 fc23 	bl	8005438 <HAL_Delay>

  dev_ctx_lps = lps22hh_init();
 8002bf2:	4c7e      	ldr	r4, [pc, #504]	; (8002dec <main+0x344>)
 8002bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff f9eb 	bl	8001fd4 <lps22hh_init>
 8002bfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 8002c0a:	f7ff ff3b 	bl	8002a84 <buzz_success>
  HAL_Delay(500);
 8002c0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c12:	f002 fc11 	bl	8005438 <HAL_Delay>

  // init FLASH
  if (!W25qxx_Init()) Error_Handler();
 8002c16:	f001 ffb3 	bl	8004b80 <W25qxx_Init>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f083 0301 	eor.w	r3, r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <main+0x182>
 8002c26:	f000 fd45 	bl	80036b4 <Error_Handler>
  buzz_success();
 8002c2a:	f7ff ff2b 	bl	8002a84 <buzz_success>

  // init sd card with dynamic filename
  fres = sd_init_dynamic_filename("FC", sd_file_header, filename);
 8002c2e:	4a70      	ldr	r2, [pc, #448]	; (8002df0 <main+0x348>)
 8002c30:	4970      	ldr	r1, [pc, #448]	; (8002df4 <main+0x34c>)
 8002c32:	4871      	ldr	r0, [pc, #452]	; (8002df8 <main+0x350>)
 8002c34:	f000 fdd4 	bl	80037e0 <sd_init_dynamic_filename>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4b6f      	ldr	r3, [pc, #444]	; (8002dfc <main+0x354>)
 8002c3e:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 8002c40:	4b6e      	ldr	r3, [pc, #440]	; (8002dfc <main+0x354>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <main+0x1a4>
  		Error_Handler();
 8002c48:	f000 fd34 	bl	80036b4 <Error_Handler>
  }

  // check if flash empty and write to sd card if not
  int save_flash = save_flash_to_sd();
 8002c4c:	f000 ffbe 	bl	8003bcc <save_flash_to_sd>
 8002c50:	4603      	mov	r3, r0
 8002c52:	653b      	str	r3, [r7, #80]	; 0x50
  if (save_flash) {
 8002c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <main+0x1b6>
	  buzz_failure();
 8002c5a:	f7ff ff1b 	bl	8002a94 <buzz_failure>
//	  HAL_Delay(1000000);
//	  VR_Stop_Rec();
//	  buzz_success();

  // get ground altitude
  for (uint8_t i = 0; i < 100; i++) {
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002c64:	e010      	b.n	8002c88 <main+0x1e0>
	  alt_ground += getAltitude();
 8002c66:	f000 fc6b 	bl	8003540 <getAltitude>
 8002c6a:	eeb0 7a40 	vmov.f32	s14, s0
 8002c6e:	4b64      	ldr	r3, [pc, #400]	; (8002e00 <main+0x358>)
 8002c70:	edd3 7a00 	vldr	s15, [r3]
 8002c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c78:	4b61      	ldr	r3, [pc, #388]	; (8002e00 <main+0x358>)
 8002c7a:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 100; i++) {
 8002c7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c82:	3301      	adds	r3, #1
 8002c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002c88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c8c:	2b63      	cmp	r3, #99	; 0x63
 8002c8e:	d9ea      	bls.n	8002c66 <main+0x1be>
  }
  alt_ground /= 100.0;
 8002c90:	4b5b      	ldr	r3, [pc, #364]	; (8002e00 <main+0x358>)
 8002c92:	ed93 7a00 	vldr	s14, [r3]
 8002c96:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8002e04 <main+0x35c>
 8002c9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c9e:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <main+0x358>)
 8002ca0:	edc3 7a00 	vstr	s15, [r3]
  alt_current = alt_ground;
 8002ca4:	4b56      	ldr	r3, [pc, #344]	; (8002e00 <main+0x358>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a57      	ldr	r2, [pc, #348]	; (8002e08 <main+0x360>)
 8002caa:	6013      	str	r3, [r2, #0]

  // arming pyro channels
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, SET);
 8002cac:	2201      	movs	r2, #1
 8002cae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cb2:	484b      	ldr	r0, [pc, #300]	; (8002de0 <main+0x338>)
 8002cb4:	f003 fe48 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, SET);
 8002cb8:	2201      	movs	r2, #1
 8002cba:	2102      	movs	r1, #2
 8002cbc:	4848      	ldr	r0, [pc, #288]	; (8002de0 <main+0x338>)
 8002cbe:	f003 fe43 	bl	8006948 <HAL_GPIO_WritePin>

  // initial DMA request for GPS
  HAL_UART_Receive_DMA(&huart6, gps_rx_buf, GPS_RX_DMA_BUF_LEN);
 8002cc2:	22af      	movs	r2, #175	; 0xaf
 8002cc4:	4951      	ldr	r1, [pc, #324]	; (8002e0c <main+0x364>)
 8002cc6:	4852      	ldr	r0, [pc, #328]	; (8002e10 <main+0x368>)
 8002cc8:	f007 fc64 	bl	800a594 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    uint32_t start_tick = HAL_GetTick();
 8002ccc:	f002 fba8 	bl	8005420 <HAL_GetTick>
 8002cd0:	64f8      	str	r0, [r7, #76]	; 0x4c
	    uint32_t end_tick = 0; 	// polled later
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	64bb      	str	r3, [r7, #72]	; 0x48
	    uint32_t loop_duration; // end_tick - start_tick

	    buzz_success();
 8002cd6:	f7ff fed5 	bl	8002a84 <buzz_success>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8002cda:	2201      	movs	r2, #1
 8002cdc:	2102      	movs	r1, #2
 8002cde:	483e      	ldr	r0, [pc, #248]	; (8002dd8 <main+0x330>)
 8002ce0:	f003 fe32 	bl	8006948 <HAL_GPIO_WritePin>

		// -----  GATHER AVIONICS TELEMETRY ----- //
		// lsm6dsl data
		get_acceleration(dev_ctx_lsm, acceleration_mg);
 8002ce4:	4a40      	ldr	r2, [pc, #256]	; (8002de8 <main+0x340>)
 8002ce6:	4b4b      	ldr	r3, [pc, #300]	; (8002e14 <main+0x36c>)
 8002ce8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cea:	f7ff f8e7 	bl	8001ebc <get_acceleration>
		get_angvelocity(dev_ctx_lsm, angular_rate_mdps);
 8002cee:	4a3e      	ldr	r2, [pc, #248]	; (8002de8 <main+0x340>)
 8002cf0:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <main+0x370>)
 8002cf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cf4:	f7ff f928 	bl	8001f48 <get_angvelocity>

		// lps22hh data
		alt_current = getAltitude(); // calls get_pressure();
 8002cf8:	f000 fc22 	bl	8003540 <getAltitude>
 8002cfc:	eef0 7a40 	vmov.f32	s15, s0
 8002d00:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <main+0x360>)
 8002d02:	edc3 7a00 	vstr	s15, [r3]
//		get_temperature(dev_ctx_lps, &temperature_degC);

		// rtc data
		HAL_RTC_GetTime(&hrtc, &stimeget, RTC_FORMAT_BIN);
 8002d06:	2200      	movs	r2, #0
 8002d08:	4944      	ldr	r1, [pc, #272]	; (8002e1c <main+0x374>)
 8002d0a:	4845      	ldr	r0, [pc, #276]	; (8002e20 <main+0x378>)
 8002d0c:	f005 fdfe 	bl	800890c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sdateget, RTC_FORMAT_BIN); // have to call GetDate for the time to be correct
 8002d10:	2200      	movs	r2, #0
 8002d12:	4944      	ldr	r1, [pc, #272]	; (8002e24 <main+0x37c>)
 8002d14:	4842      	ldr	r0, [pc, #264]	; (8002e20 <main+0x378>)
 8002d16:	f005 fefe 	bl	8008b16 <HAL_RTC_GetDate>

		// continuity on pyro channels
		continuity = get_continuity();
 8002d1a:	f000 fc61 	bl	80035e0 <get_continuity>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <main+0x380>)
 8002d24:	701a      	strb	r2, [r3, #0]

		// gps
		if (gps_dma_ready) {
 8002d26:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <main+0x384>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d026      	beq.n	8002d7e <main+0x2d6>
			gps_dma_ready = 0;
 8002d30:	4b3e      	ldr	r3, [pc, #248]	; (8002e2c <main+0x384>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]

			char *gps_parsed = GPS_ParseBuffer(&latitude, &longitude, &time);
 8002d36:	4a3e      	ldr	r2, [pc, #248]	; (8002e30 <main+0x388>)
 8002d38:	493e      	ldr	r1, [pc, #248]	; (8002e34 <main+0x38c>)
 8002d3a:	483f      	ldr	r0, [pc, #252]	; (8002e38 <main+0x390>)
 8002d3c:	f7fe fc78 	bl	8001630 <GPS_ParseBuffer>
 8002d40:	6478      	str	r0, [r7, #68]	; 0x44
			fres = sd_open_file(filename);
 8002d42:	482b      	ldr	r0, [pc, #172]	; (8002df0 <main+0x348>)
 8002d44:	f000 fdca 	bl	80038dc <sd_open_file>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <main+0x354>)
 8002d4e:	701a      	strb	r2, [r3, #0]
			sd_write(&fil, "\nNew GPS\n");
 8002d50:	493a      	ldr	r1, [pc, #232]	; (8002e3c <main+0x394>)
 8002d52:	483b      	ldr	r0, [pc, #236]	; (8002e40 <main+0x398>)
 8002d54:	f000 fdda 	bl	800390c <sd_write>
			f_close(&fil);
 8002d58:	4839      	ldr	r0, [pc, #228]	; (8002e40 <main+0x398>)
 8002d5a:	f00b faa6 	bl	800e2aa <f_close>

			HAL_UART_Transmit(&huart8, gps_parsed, strlen(gps_parsed), HAL_MAX_DELAY);
 8002d5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002d60:	f7fd fa46 	bl	80001f0 <strlen>
 8002d64:	4603      	mov	r3, r0
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d6e:	4835      	ldr	r0, [pc, #212]	; (8002e44 <main+0x39c>)
 8002d70:	f007 fb77 	bl	800a462 <HAL_UART_Transmit>

			// start new DMA request
			HAL_UART_Receive_DMA(&huart6, gps_rx_buf, GPS_RX_DMA_BUF_LEN);
 8002d74:	22af      	movs	r2, #175	; 0xaf
 8002d76:	4925      	ldr	r1, [pc, #148]	; (8002e0c <main+0x364>)
 8002d78:	4825      	ldr	r0, [pc, #148]	; (8002e10 <main+0x368>)
 8002d7a:	f007 fc0b 	bl	800a594 <HAL_UART_Receive_DMA>
		}

//		GPS_Poll(&latitude, &longitude, &time);

		if (latitude != 0) {
 8002d7e:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <main+0x390>)
 8002d80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	f7fd feac 	bl	8000ae8 <__aeabi_dcmpeq>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <main+0x2fa>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8002d96:	2201      	movs	r2, #1
 8002d98:	2104      	movs	r1, #4
 8002d9a:	480f      	ldr	r0, [pc, #60]	; (8002dd8 <main+0x330>)
 8002d9c:	f003 fdd4 	bl	8006948 <HAL_GPIO_WritePin>
 8002da0:	e004      	b.n	8002dac <main+0x304>
		} else {
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2104      	movs	r1, #4
 8002da6:	480c      	ldr	r0, [pc, #48]	; (8002dd8 <main+0x330>)
 8002da8:	f003 fdce 	bl	8006948 <HAL_GPIO_WritePin>
		}

		if (longitude != 0) {
 8002dac:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <main+0x38c>)
 8002dae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	f7fd fe95 	bl	8000ae8 <__aeabi_dcmpeq>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d141      	bne.n	8002e48 <main+0x3a0>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2108      	movs	r1, #8
 8002dc8:	4803      	ldr	r0, [pc, #12]	; (8002dd8 <main+0x330>)
 8002dca:	f003 fdbd 	bl	8006948 <HAL_GPIO_WritePin>
 8002dce:	e040      	b.n	8002e52 <main+0x3aa>
 8002dd0:	40020c00 	.word	0x40020c00
 8002dd4:	40021400 	.word	0x40021400
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40021800 	.word	0x40021800
 8002de4:	40021000 	.word	0x40021000
 8002de8:	20000c18 	.word	0x20000c18
 8002dec:	20000c24 	.word	0x20000c24
 8002df0:	20000378 	.word	0x20000378
 8002df4:	080156fc 	.word	0x080156fc
 8002df8:	08014ca0 	.word	0x08014ca0
 8002dfc:	20000c30 	.word	0x20000c30
 8002e00:	20000388 	.word	0x20000388
 8002e04:	42c80000 	.word	0x42c80000
 8002e08:	2000038c 	.word	0x2000038c
 8002e0c:	20000a4c 	.word	0x20000a4c
 8002e10:	2000153c 	.word	0x2000153c
 8002e14:	20000238 	.word	0x20000238
 8002e18:	20000244 	.word	0x20000244
 8002e1c:	20000264 	.word	0x20000264
 8002e20:	20000e64 	.word	0x20000e64
 8002e24:	20000278 	.word	0x20000278
 8002e28:	20000237 	.word	0x20000237
 8002e2c:	20000254 	.word	0x20000254
 8002e30:	20000b08 	.word	0x20000b08
 8002e34:	20000b00 	.word	0x20000b00
 8002e38:	20000c10 	.word	0x20000c10
 8002e3c:	08014ca4 	.word	0x08014ca4
 8002e40:	20000c34 	.word	0x20000c34
 8002e44:	200014fc 	.word	0x200014fc
		} else {
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2108      	movs	r1, #8
 8002e4c:	489e      	ldr	r0, [pc, #632]	; (80030c8 <main+0x620>)
 8002e4e:	f003 fd7b 	bl	8006948 <HAL_GPIO_WritePin>
		}

		// propulsion data (not needed after apogee)
		if (state < FLIGHT_STATE_PRE_MAIN) {
 8002e52:	4b9e      	ldr	r3, [pc, #632]	; (80030cc <main+0x624>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d83b      	bhi.n	8002ed4 <main+0x42c>
			tank_temperature = Max31855_Read_Temp();
 8002e5c:	f7fe f8d6 	bl	800100c <Max31855_Read_Temp>
 8002e60:	eef0 7a40 	vmov.f32	s15, s0
 8002e64:	4b9a      	ldr	r3, [pc, #616]	; (80030d0 <main+0x628>)
 8002e66:	edc3 7a00 	vstr	s15, [r3]
			tank_pressure = prop_poll_pressure_transducer();
 8002e6a:	f000 fbf1 	bl	8003650 <prop_poll_pressure_transducer>
 8002e6e:	eef0 7a40 	vmov.f32	s15, s0
 8002e72:	4b98      	ldr	r3, [pc, #608]	; (80030d4 <main+0x62c>)
 8002e74:	edc3 7a00 	vstr	s15, [r3]
			valve_state = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port, IN_Prop_ActuatedVent_Feedback_Pin);
 8002e78:	2102      	movs	r1, #2
 8002e7a:	4897      	ldr	r0, [pc, #604]	; (80030d8 <main+0x630>)
 8002e7c:	f003 fd4c 	bl	8006918 <HAL_GPIO_ReadPin>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461a      	mov	r2, r3
 8002e84:	4b95      	ldr	r3, [pc, #596]	; (80030dc <main+0x634>)
 8002e86:	701a      	strb	r2, [r3, #0]

			sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002e88:	4b92      	ldr	r3, [pc, #584]	; (80030d4 <main+0x62c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd fb6b 	bl	8000568 <__aeabi_f2d>
 8002e92:	4604      	mov	r4, r0
 8002e94:	460d      	mov	r5, r1
 8002e96:	4b8e      	ldr	r3, [pc, #568]	; (80030d0 <main+0x628>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fb64 	bl	8000568 <__aeabi_f2d>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	498d      	ldr	r1, [pc, #564]	; (80030dc <main+0x634>)
 8002ea6:	7809      	ldrb	r1, [r1, #0]
 8002ea8:	4608      	mov	r0, r1
					tank_pressure, tank_temperature, valve_state, stimeget.Minutes,
 8002eaa:	498d      	ldr	r1, [pc, #564]	; (80030e0 <main+0x638>)
 8002eac:	7849      	ldrb	r1, [r1, #1]
			sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002eae:	460e      	mov	r6, r1
					stimeget.Seconds, stimeget.SubSeconds);
 8002eb0:	498b      	ldr	r1, [pc, #556]	; (80030e0 <main+0x638>)
 8002eb2:	7889      	ldrb	r1, [r1, #2]
			sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002eb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002eb6:	498a      	ldr	r1, [pc, #552]	; (80030e0 <main+0x638>)
 8002eb8:	6849      	ldr	r1, [r1, #4]
 8002eba:	9105      	str	r1, [sp, #20]
 8002ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ebe:	9104      	str	r1, [sp, #16]
 8002ec0:	9603      	str	r6, [sp, #12]
 8002ec2:	9002      	str	r0, [sp, #8]
 8002ec4:	e9cd 2300 	strd	r2, r3, [sp]
 8002ec8:	4622      	mov	r2, r4
 8002eca:	462b      	mov	r3, r5
 8002ecc:	4985      	ldr	r1, [pc, #532]	; (80030e4 <main+0x63c>)
 8002ece:	4886      	ldr	r0, [pc, #536]	; (80030e8 <main+0x640>)
 8002ed0:	f00c fd60 	bl	800f994 <siprintf>
		// -----  FORMATTING TELEMETRY ----- //

		// avionics message
		sprintf((char*) msg_buffer_av,
				"S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002ed4:	4b85      	ldr	r3, [pc, #532]	; (80030ec <main+0x644>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
		sprintf((char*) msg_buffer_av,
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fb45 	bl	8000568 <__aeabi_f2d>
 8002ede:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002ee2:	4b82      	ldr	r3, [pc, #520]	; (80030ec <main+0x644>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) msg_buffer_av,
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fb3e 	bl	8000568 <__aeabi_f2d>
 8002eec:	e9c7 0108 	strd	r0, r1, [r7, #32]
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002ef0:	4b7e      	ldr	r3, [pc, #504]	; (80030ec <main+0x644>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) msg_buffer_av,
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fb37 	bl	8000568 <__aeabi_f2d>
 8002efa:	e9c7 0106 	strd	r0, r1, [r7, #24]
				angular_rate_mdps[0], angular_rate_mdps[1],
 8002efe:	4b7c      	ldr	r3, [pc, #496]	; (80030f0 <main+0x648>)
 8002f00:	681b      	ldr	r3, [r3, #0]
		sprintf((char*) msg_buffer_av,
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fb30 	bl	8000568 <__aeabi_f2d>
 8002f08:	e9c7 0104 	strd	r0, r1, [r7, #16]
				angular_rate_mdps[0], angular_rate_mdps[1],
 8002f0c:	4b78      	ldr	r3, [pc, #480]	; (80030f0 <main+0x648>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) msg_buffer_av,
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd fb29 	bl	8000568 <__aeabi_f2d>
 8002f16:	e9c7 0102 	strd	r0, r1, [r7, #8]
				angular_rate_mdps[2], pressure_hPa, latitude, longitude,
 8002f1a:	4b75      	ldr	r3, [pc, #468]	; (80030f0 <main+0x648>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) msg_buffer_av,
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fb22 	bl	8000568 <__aeabi_f2d>
 8002f24:	4605      	mov	r5, r0
 8002f26:	460e      	mov	r6, r1
 8002f28:	4b72      	ldr	r3, [pc, #456]	; (80030f4 <main+0x64c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fb1b 	bl	8000568 <__aeabi_f2d>
 8002f32:	4682      	mov	sl, r0
 8002f34:	468b      	mov	fp, r1
 8002f36:	4b70      	ldr	r3, [pc, #448]	; (80030f8 <main+0x650>)
 8002f38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f3c:	4b6f      	ldr	r3, [pc, #444]	; (80030fc <main+0x654>)
 8002f3e:	e9d3 0100 	ldrd	r0, r1, [r3]
				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8002f42:	4b67      	ldr	r3, [pc, #412]	; (80030e0 <main+0x638>)
 8002f44:	785b      	ldrb	r3, [r3, #1]
		sprintf((char*) msg_buffer_av,
 8002f46:	607b      	str	r3, [r7, #4]
				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8002f48:	4b65      	ldr	r3, [pc, #404]	; (80030e0 <main+0x638>)
 8002f4a:	789b      	ldrb	r3, [r3, #2]
		sprintf((char*) msg_buffer_av,
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	4b64      	ldr	r3, [pc, #400]	; (80030e0 <main+0x638>)
 8002f50:	685c      	ldr	r4, [r3, #4]
 8002f52:	4b6b      	ldr	r3, [pc, #428]	; (8003100 <main+0x658>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4b5c      	ldr	r3, [pc, #368]	; (80030cc <main+0x624>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	9314      	str	r3, [sp, #80]	; 0x50
 8002f62:	9213      	str	r2, [sp, #76]	; 0x4c
 8002f64:	9412      	str	r4, [sp, #72]	; 0x48
 8002f66:	683c      	ldr	r4, [r7, #0]
 8002f68:	9411      	str	r4, [sp, #68]	; 0x44
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	9310      	str	r3, [sp, #64]	; 0x40
 8002f6e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002f72:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8002f76:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002f7a:	e9cd 5608 	strd	r5, r6, [sp, #32]
 8002f7e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002f82:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002f86:	ed97 7b04 	vldr	d7, [r7, #16]
 8002f8a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002f8e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002f92:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002f96:	ed97 7b08 	vldr	d7, [r7, #32]
 8002f9a:	ed8d 7b00 	vstr	d7, [sp]
 8002f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fa2:	4958      	ldr	r1, [pc, #352]	; (8003104 <main+0x65c>)
 8002fa4:	4858      	ldr	r0, [pc, #352]	; (8003108 <main+0x660>)
 8002fa6:	f00c fcf5 	bl	800f994 <siprintf>
				continuity, state);

		// save to sd and flash
		fres = sd_open_file(filename);
 8002faa:	4858      	ldr	r0, [pc, #352]	; (800310c <main+0x664>)
 8002fac:	f000 fc96 	bl	80038dc <sd_open_file>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4b56      	ldr	r3, [pc, #344]	; (8003110 <main+0x668>)
 8002fb6:	701a      	strb	r2, [r3, #0]
		sd_write(&fil, msg_buffer_av);
 8002fb8:	4953      	ldr	r1, [pc, #332]	; (8003108 <main+0x660>)
 8002fba:	4856      	ldr	r0, [pc, #344]	; (8003114 <main+0x66c>)
 8002fbc:	f000 fca6 	bl	800390c <sd_write>
		if (state < FLIGHT_STATE_PRE_MAIN) {
 8002fc0:	4b42      	ldr	r3, [pc, #264]	; (80030cc <main+0x624>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d803      	bhi.n	8002fd2 <main+0x52a>
			sd_write(&fil, msg_buffer_pr);
 8002fca:	4947      	ldr	r1, [pc, #284]	; (80030e8 <main+0x640>)
 8002fcc:	4851      	ldr	r0, [pc, #324]	; (8003114 <main+0x66c>)
 8002fce:	f000 fc9d 	bl	800390c <sd_write>
		}
		f_close(&fil);
 8002fd2:	4850      	ldr	r0, [pc, #320]	; (8003114 <main+0x66c>)
 8002fd4:	f00b f969 	bl	800e2aa <f_close>
//			debug_tx_uart(msg_buffer_av);
//			debug_tx_uart(msg_buffer_pr);
		#endif

		// radio transmission
		switch (state) {
 8002fd8:	4b3c      	ldr	r3, [pc, #240]	; (80030cc <main+0x624>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	f200 81ad 	bhi.w	800333e <main+0x896>
 8002fe4:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <main+0x544>)
 8002fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fea:	bf00      	nop
 8002fec:	08003001 	.word	0x08003001
 8002ff0:	080030a3 	.word	0x080030a3
 8002ff4:	080031bb 	.word	0x080031bb
 8002ff8:	0800324b 	.word	0x0800324b
 8002ffc:	0800330f 	.word	0x0800330f
		case FLIGHT_STATE_PAD: // launch pad, waiting. prioritize prop data

			// check current state
			if (alt_current - alt_ground > LAUNCH_ALT_CHANGE_THRESHOLD) { // launched
 8003000:	4b45      	ldr	r3, [pc, #276]	; (8003118 <main+0x670>)
 8003002:	ed93 7a00 	vldr	s14, [r3]
 8003006:	4b45      	ldr	r3, [pc, #276]	; (800311c <main+0x674>)
 8003008:	edd3 7a00 	vldr	s15, [r3]
 800300c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003010:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003120 <main+0x678>
 8003014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301c:	dd10      	ble.n	8003040 <main+0x598>
				state = FLIGHT_STATE_PRE_APOGEE;
 800301e:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <main+0x624>)
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]

//				HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, SET);
				fres = sd_open_file(filename);
 8003024:	4839      	ldr	r0, [pc, #228]	; (800310c <main+0x664>)
 8003026:	f000 fc59 	bl	80038dc <sd_open_file>
 800302a:	4603      	mov	r3, r0
 800302c:	461a      	mov	r2, r3
 800302e:	4b38      	ldr	r3, [pc, #224]	; (8003110 <main+0x668>)
 8003030:	701a      	strb	r2, [r3, #0]
				sd_write(&fil, (uint8_t *)"launched\r\n");
 8003032:	493c      	ldr	r1, [pc, #240]	; (8003124 <main+0x67c>)
 8003034:	4837      	ldr	r0, [pc, #220]	; (8003114 <main+0x66c>)
 8003036:	f000 fc69 	bl	800390c <sd_write>
				f_close(&fil);
 800303a:	4836      	ldr	r0, [pc, #216]	; (8003114 <main+0x66c>)
 800303c:	f00b f935 	bl	800e2aa <f_close>
			}

			// send prop
			radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
 8003040:	4829      	ldr	r0, [pc, #164]	; (80030e8 <main+0x640>)
 8003042:	f7fd f8d5 	bl	80001f0 <strlen>
 8003046:	4603      	mov	r3, r0
 8003048:	b29b      	uxth	r3, r3
 800304a:	4619      	mov	r1, r3
 800304c:	4826      	ldr	r0, [pc, #152]	; (80030e8 <main+0x640>)
 800304e:	f7ff fcd5 	bl	80029fc <radio_tx>

			if (num_radio_transmissions % 1 == 0) { // av at 2 Hz
				// send av
				radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 8003052:	482d      	ldr	r0, [pc, #180]	; (8003108 <main+0x660>)
 8003054:	f7fd f8cc 	bl	80001f0 <strlen>
 8003058:	4603      	mov	r3, r0
 800305a:	b29b      	uxth	r3, r3
 800305c:	4619      	mov	r1, r3
 800305e:	482a      	ldr	r0, [pc, #168]	; (8003108 <main+0x660>)
 8003060:	f7ff fccc 	bl	80029fc <radio_tx>
			}

			num_radio_transmissions++;
 8003064:	4b30      	ldr	r3, [pc, #192]	; (8003128 <main+0x680>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	3301      	adds	r3, #1
 800306a:	b2da      	uxtb	r2, r3
 800306c:	4b2e      	ldr	r3, [pc, #184]	; (8003128 <main+0x680>)
 800306e:	701a      	strb	r2, [r3, #0]
			if (num_radio_transmissions == 10) {
 8003070:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <main+0x680>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b0a      	cmp	r3, #10
 8003076:	d102      	bne.n	800307e <main+0x5d6>
				num_radio_transmissions = 0;
 8003078:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <main+0x680>)
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
			}

			// loop timing calculation
			end_tick = HAL_GetTick();
 800307e:	f002 f9cf 	bl	8005420 <HAL_GetTick>
 8003082:	64b8      	str	r0, [r7, #72]	; 0x48
			loop_duration = end_tick - start_tick;
 8003084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	643b      	str	r3, [r7, #64]	; 0x40
			if (loop_duration < LOOP_DURATION_PAD) { // ticks in ms, hopefully loop runs at 10 Hz
 800308c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308e:	2b63      	cmp	r3, #99	; 0x63
 8003090:	f200 816c 	bhi.w	800336c <main+0x8c4>
				HAL_Delay(LOOP_DURATION_PAD - loop_duration);
 8003094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003096:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800309a:	4618      	mov	r0, r3
 800309c:	f002 f9cc 	bl	8005438 <HAL_Delay>
			} // else just go straight back to top of loop

			break;
 80030a0:	e164      	b.n	800336c <main+0x8c4>

		case FLIGHT_STATE_PRE_APOGEE: // pre-apogee

			// check current state
			if (alt_current > alt_apogee) {
 80030a2:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <main+0x670>)
 80030a4:	ed93 7a00 	vldr	s14, [r3]
 80030a8:	4b20      	ldr	r3, [pc, #128]	; (800312c <main+0x684>)
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b6:	dd3d      	ble.n	8003134 <main+0x68c>
				alt_apogee = alt_current;
 80030b8:	4b17      	ldr	r3, [pc, #92]	; (8003118 <main+0x670>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1b      	ldr	r2, [pc, #108]	; (800312c <main+0x684>)
 80030be:	6013      	str	r3, [r2, #0]
				num_descending_samples = 0;
 80030c0:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <main+0x688>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
 80030c6:	e053      	b.n	8003170 <main+0x6c8>
 80030c8:	40020800 	.word	0x40020800
 80030cc:	20000385 	.word	0x20000385
 80030d0:	20000258 	.word	0x20000258
 80030d4:	2000025c 	.word	0x2000025c
 80030d8:	40020400 	.word	0x40020400
 80030dc:	20000260 	.word	0x20000260
 80030e0:	20000264 	.word	0x20000264
 80030e4:	08014cb0 	.word	0x08014cb0
 80030e8:	20000344 	.word	0x20000344
 80030ec:	20000238 	.word	0x20000238
 80030f0:	20000244 	.word	0x20000244
 80030f4:	20000250 	.word	0x20000250
 80030f8:	20000c10 	.word	0x20000c10
 80030fc:	20000b00 	.word	0x20000b00
 8003100:	20000237 	.word	0x20000237
 8003104:	08014cd8 	.word	0x08014cd8
 8003108:	2000027c 	.word	0x2000027c
 800310c:	20000378 	.word	0x20000378
 8003110:	20000c30 	.word	0x20000c30
 8003114:	20000c34 	.word	0x20000c34
 8003118:	2000038c 	.word	0x2000038c
 800311c:	20000388 	.word	0x20000388
 8003120:	42960000 	.word	0x42960000
 8003124:	08014d34 	.word	0x08014d34
 8003128:	20000386 	.word	0x20000386
 800312c:	20000398 	.word	0x20000398
 8003130:	2000039c 	.word	0x2000039c
			} else {
				num_descending_samples++;
 8003134:	4b94      	ldr	r3, [pc, #592]	; (8003388 <main+0x8e0>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b92      	ldr	r3, [pc, #584]	; (8003388 <main+0x8e0>)
 800313e:	701a      	strb	r2, [r3, #0]

				if (num_descending_samples > APOGEE_NUM_DESCENDING_SAMPLES) {
 8003140:	4b91      	ldr	r3, [pc, #580]	; (8003388 <main+0x8e0>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b1e      	cmp	r3, #30
 8003146:	d913      	bls.n	8003170 <main+0x6c8>
					state = FLIGHT_STATE_PRE_MAIN; // passed apogee
 8003148:	4b90      	ldr	r3, [pc, #576]	; (800338c <main+0x8e4>)
 800314a:	2202      	movs	r2, #2
 800314c:	701a      	strb	r2, [r3, #0]
					num_descending_samples = 0;
 800314e:	4b8e      	ldr	r3, [pc, #568]	; (8003388 <main+0x8e0>)
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]

//					HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, SET);

					fres = sd_open_file(filename);
 8003154:	488e      	ldr	r0, [pc, #568]	; (8003390 <main+0x8e8>)
 8003156:	f000 fbc1 	bl	80038dc <sd_open_file>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	4b8d      	ldr	r3, [pc, #564]	; (8003394 <main+0x8ec>)
 8003160:	701a      	strb	r2, [r3, #0]
					sd_write(&fil, (uint8_t *)"apogee\r\n");
 8003162:	498d      	ldr	r1, [pc, #564]	; (8003398 <main+0x8f0>)
 8003164:	488d      	ldr	r0, [pc, #564]	; (800339c <main+0x8f4>)
 8003166:	f000 fbd1 	bl	800390c <sd_write>
					f_close(&fil);
 800316a:	488c      	ldr	r0, [pc, #560]	; (800339c <main+0x8f4>)
 800316c:	f00b f89d 	bl	800e2aa <f_close>

				}
			}

			// transmit avionics and prop at equal priority
			radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 8003170:	488b      	ldr	r0, [pc, #556]	; (80033a0 <main+0x8f8>)
 8003172:	f7fd f83d 	bl	80001f0 <strlen>
 8003176:	4603      	mov	r3, r0
 8003178:	b29b      	uxth	r3, r3
 800317a:	4619      	mov	r1, r3
 800317c:	4888      	ldr	r0, [pc, #544]	; (80033a0 <main+0x8f8>)
 800317e:	f7ff fc3d 	bl	80029fc <radio_tx>
			radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
 8003182:	4888      	ldr	r0, [pc, #544]	; (80033a4 <main+0x8fc>)
 8003184:	f7fd f834 	bl	80001f0 <strlen>
 8003188:	4603      	mov	r3, r0
 800318a:	b29b      	uxth	r3, r3
 800318c:	4619      	mov	r1, r3
 800318e:	4885      	ldr	r0, [pc, #532]	; (80033a4 <main+0x8fc>)
 8003190:	f7ff fc34 	bl	80029fc <radio_tx>

			// loop timing calculation
			end_tick = HAL_GetTick();
 8003194:	f002 f944 	bl	8005420 <HAL_GetTick>
 8003198:	64b8      	str	r0, [r7, #72]	; 0x48
			loop_duration = end_tick - start_tick;
 800319a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800319c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	643b      	str	r3, [r7, #64]	; 0x40
			if (loop_duration < LOOP_DURATION_PRE_APOGEE) {
 80031a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031a8:	f080 80e2 	bcs.w	8003370 <main+0x8c8>
				HAL_Delay(LOOP_DURATION_PRE_APOGEE - loop_duration);
 80031ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ae:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 80031b2:	4618      	mov	r0, r3
 80031b4:	f002 f940 	bl	8005438 <HAL_Delay>
			} // else just go straight back to top of loop

			break;
 80031b8:	e0da      	b.n	8003370 <main+0x8c8>

		case FLIGHT_STATE_PRE_MAIN: // post-apogee

			// check current state
			if (alt_current < MAIN_DEPLOY_ALTITUDE) {
 80031ba:	4b7b      	ldr	r3, [pc, #492]	; (80033a8 <main+0x900>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80033ac <main+0x904>
 80031c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031cc:	d522      	bpl.n	8003214 <main+0x76c>
				num_descending_samples++;
 80031ce:	4b6e      	ldr	r3, [pc, #440]	; (8003388 <main+0x8e0>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4b6c      	ldr	r3, [pc, #432]	; (8003388 <main+0x8e0>)
 80031d8:	701a      	strb	r2, [r3, #0]

				if (num_descending_samples > MAIN_NUM_DESCENDING_SAMPLES) {
 80031da:	4b6b      	ldr	r3, [pc, #428]	; (8003388 <main+0x8e0>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b0a      	cmp	r3, #10
 80031e0:	d91b      	bls.n	800321a <main+0x772>
					state = FLIGHT_STATE_PRE_LANDED;
 80031e2:	4b6a      	ldr	r3, [pc, #424]	; (800338c <main+0x8e4>)
 80031e4:	2203      	movs	r2, #3
 80031e6:	701a      	strb	r2, [r3, #0]
					alt_prev = alt_current; // in next stage we need to know the previous altitude
 80031e8:	4b6f      	ldr	r3, [pc, #444]	; (80033a8 <main+0x900>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a70      	ldr	r2, [pc, #448]	; (80033b0 <main+0x908>)
 80031ee:	6013      	str	r3, [r2, #0]
					num_descending_samples = 0;
 80031f0:	4b65      	ldr	r3, [pc, #404]	; (8003388 <main+0x8e0>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]

//					HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, SET);
					fres = sd_open_file(filename);
 80031f6:	4866      	ldr	r0, [pc, #408]	; (8003390 <main+0x8e8>)
 80031f8:	f000 fb70 	bl	80038dc <sd_open_file>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	4b64      	ldr	r3, [pc, #400]	; (8003394 <main+0x8ec>)
 8003202:	701a      	strb	r2, [r3, #0]
					sd_write(&fil, (uint8_t *)"main deployed\r\n");
 8003204:	496b      	ldr	r1, [pc, #428]	; (80033b4 <main+0x90c>)
 8003206:	4865      	ldr	r0, [pc, #404]	; (800339c <main+0x8f4>)
 8003208:	f000 fb80 	bl	800390c <sd_write>
					f_close(&fil);
 800320c:	4863      	ldr	r0, [pc, #396]	; (800339c <main+0x8f4>)
 800320e:	f00b f84c 	bl	800e2aa <f_close>
 8003212:	e002      	b.n	800321a <main+0x772>
				}
			} else {
				num_descending_samples = 0;
 8003214:	4b5c      	ldr	r3, [pc, #368]	; (8003388 <main+0x8e0>)
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]
			}

			// transmit avionics only
			radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 800321a:	4861      	ldr	r0, [pc, #388]	; (80033a0 <main+0x8f8>)
 800321c:	f7fc ffe8 	bl	80001f0 <strlen>
 8003220:	4603      	mov	r3, r0
 8003222:	b29b      	uxth	r3, r3
 8003224:	4619      	mov	r1, r3
 8003226:	485e      	ldr	r0, [pc, #376]	; (80033a0 <main+0x8f8>)
 8003228:	f7ff fbe8 	bl	80029fc <radio_tx>

			// loop timing calculation
			loop_duration = end_tick - start_tick;
 800322c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800322e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	643b      	str	r3, [r7, #64]	; 0x40
			if (loop_duration < LOOP_DURATION_PRE_MAIN) {
 8003234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003236:	2bf9      	cmp	r3, #249	; 0xf9
 8003238:	f200 809c 	bhi.w	8003374 <main+0x8cc>
				HAL_Delay(LOOP_DURATION_PRE_MAIN - loop_duration);
 800323c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323e:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8003242:	4618      	mov	r0, r3
 8003244:	f002 f8f8 	bl	8005438 <HAL_Delay>
			} // else just go straight back to top of loop

			break;
 8003248:	e094      	b.n	8003374 <main+0x8cc>

		case FLIGHT_STATE_PRE_LANDED:
			// post main deploy, want to transmit data fast to maximize possibility of getting good GPS coordinates

			// check current state
			alt_diff = alt_current - alt_prev;
 800324a:	4b57      	ldr	r3, [pc, #348]	; (80033a8 <main+0x900>)
 800324c:	ed93 7a00 	vldr	s14, [r3]
 8003250:	4b57      	ldr	r3, [pc, #348]	; (80033b0 <main+0x908>)
 8003252:	edd3 7a00 	vldr	s15, [r3]
 8003256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800325a:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <main+0x910>)
 800325c:	edc3 7a00 	vstr	s15, [r3]
			if (alt_diff < 0) {
 8003260:	4b55      	ldr	r3, [pc, #340]	; (80033b8 <main+0x910>)
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800326a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326e:	d507      	bpl.n	8003280 <main+0x7d8>
				alt_diff *= -1; // absolute value
 8003270:	4b51      	ldr	r3, [pc, #324]	; (80033b8 <main+0x910>)
 8003272:	edd3 7a00 	vldr	s15, [r3]
 8003276:	eef1 7a67 	vneg.f32	s15, s15
 800327a:	4b4f      	ldr	r3, [pc, #316]	; (80033b8 <main+0x910>)
 800327c:	edc3 7a00 	vstr	s15, [r3]
			}

			if (alt_diff < LANDING_ALT_CHANGE_THRESHOLD) {
 8003280:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <main+0x910>)
 8003282:	edd3 7a00 	vldr	s15, [r3]
 8003286:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800328a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003292:	d51e      	bpl.n	80032d2 <main+0x82a>
				num_descending_samples++;
 8003294:	4b3c      	ldr	r3, [pc, #240]	; (8003388 <main+0x8e0>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	3301      	adds	r3, #1
 800329a:	b2da      	uxtb	r2, r3
 800329c:	4b3a      	ldr	r3, [pc, #232]	; (8003388 <main+0x8e0>)
 800329e:	701a      	strb	r2, [r3, #0]

				if (num_descending_samples > LANDING_NUM_DESCENDING_SAMPLES) {
 80032a0:	4b39      	ldr	r3, [pc, #228]	; (8003388 <main+0x8e0>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b14      	cmp	r3, #20
 80032a6:	d917      	bls.n	80032d8 <main+0x830>
					state = FLIGHT_STATE_LANDED;
 80032a8:	4b38      	ldr	r3, [pc, #224]	; (800338c <main+0x8e4>)
 80032aa:	2204      	movs	r2, #4
 80032ac:	701a      	strb	r2, [r3, #0]
					num_descending_samples = 0;
 80032ae:	4b36      	ldr	r3, [pc, #216]	; (8003388 <main+0x8e0>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]

//					HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, SET);
					fres = sd_open_file(filename);
 80032b4:	4836      	ldr	r0, [pc, #216]	; (8003390 <main+0x8e8>)
 80032b6:	f000 fb11 	bl	80038dc <sd_open_file>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	4b35      	ldr	r3, [pc, #212]	; (8003394 <main+0x8ec>)
 80032c0:	701a      	strb	r2, [r3, #0]
					sd_write(&fil, (uint8_t *)"landed\r\n");
 80032c2:	493e      	ldr	r1, [pc, #248]	; (80033bc <main+0x914>)
 80032c4:	4835      	ldr	r0, [pc, #212]	; (800339c <main+0x8f4>)
 80032c6:	f000 fb21 	bl	800390c <sd_write>
					f_close(&fil);
 80032ca:	4834      	ldr	r0, [pc, #208]	; (800339c <main+0x8f4>)
 80032cc:	f00a ffed 	bl	800e2aa <f_close>
 80032d0:	e002      	b.n	80032d8 <main+0x830>
				}
			} else {
				num_descending_samples = 0;
 80032d2:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <main+0x8e0>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
			}

			// transmit avionics only
			radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 80032d8:	4831      	ldr	r0, [pc, #196]	; (80033a0 <main+0x8f8>)
 80032da:	f7fc ff89 	bl	80001f0 <strlen>
 80032de:	4603      	mov	r3, r0
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	4619      	mov	r1, r3
 80032e4:	482e      	ldr	r0, [pc, #184]	; (80033a0 <main+0x8f8>)
 80032e6:	f7ff fb89 	bl	80029fc <radio_tx>

			// loop timing calculation
			loop_duration = end_tick - start_tick;
 80032ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	643b      	str	r3, [r7, #64]	; 0x40
			if (loop_duration < LOOP_DURATION_PRE_LANDED) {
 80032f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f4:	2b63      	cmp	r3, #99	; 0x63
 80032f6:	d805      	bhi.n	8003304 <main+0x85c>
				HAL_Delay(LOOP_DURATION_PRE_LANDED - loop_duration);
 80032f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fa:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80032fe:	4618      	mov	r0, r3
 8003300:	f002 f89a 	bl	8005438 <HAL_Delay>
			} // else just go straight back to top of loop

			alt_prev = alt_current;
 8003304:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <main+0x900>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a29      	ldr	r2, [pc, #164]	; (80033b0 <main+0x908>)
 800330a:	6013      	str	r3, [r2, #0]
			break;
 800330c:	e035      	b.n	800337a <main+0x8d2>

		case FLIGHT_STATE_LANDED: // landed
			// reduce transmission rate to save power. no need to check state anymore

			// transmit avionics only
			radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 800330e:	4824      	ldr	r0, [pc, #144]	; (80033a0 <main+0x8f8>)
 8003310:	f7fc ff6e 	bl	80001f0 <strlen>
 8003314:	4603      	mov	r3, r0
 8003316:	b29b      	uxth	r3, r3
 8003318:	4619      	mov	r1, r3
 800331a:	4821      	ldr	r0, [pc, #132]	; (80033a0 <main+0x8f8>)
 800331c:	f7ff fb6e 	bl	80029fc <radio_tx>

			// loop timing calculation
			loop_duration = end_tick - start_tick;
 8003320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	643b      	str	r3, [r7, #64]	; 0x40
			if (loop_duration < LOOP_DURATION_LANDED) {
 8003328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800332e:	d223      	bcs.n	8003378 <main+0x8d0>
				HAL_Delay(LOOP_DURATION_LANDED - loop_duration);
 8003330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003332:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8003336:	4618      	mov	r0, r3
 8003338:	f002 f87e 	bl	8005438 <HAL_Delay>
//			HAL_GPIO_TogglePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin);
//			HAL_GPIO_TogglePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin);
//			HAL_GPIO_TogglePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin);
//			HAL_GPIO_TogglePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin);

			break;
 800333c:	e01c      	b.n	8003378 <main+0x8d0>
		default:
			VR_Stop_Rec();
 800333e:	f001 fb03 	bl	8004948 <VR_Stop_Rec>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8003342:	2201      	movs	r2, #1
 8003344:	2102      	movs	r1, #2
 8003346:	481e      	ldr	r0, [pc, #120]	; (80033c0 <main+0x918>)
 8003348:	f003 fafe 	bl	8006948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800334c:	2201      	movs	r2, #1
 800334e:	2104      	movs	r1, #4
 8003350:	481b      	ldr	r0, [pc, #108]	; (80033c0 <main+0x918>)
 8003352:	f003 faf9 	bl	8006948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8003356:	2201      	movs	r2, #1
 8003358:	2108      	movs	r1, #8
 800335a:	4819      	ldr	r0, [pc, #100]	; (80033c0 <main+0x918>)
 800335c:	f003 faf4 	bl	8006948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, SET);
 8003360:	2201      	movs	r2, #1
 8003362:	2108      	movs	r1, #8
 8003364:	4817      	ldr	r0, [pc, #92]	; (80033c4 <main+0x91c>)
 8003366:	f003 faef 	bl	8006948 <HAL_GPIO_WritePin>

			while (1); // terminate
 800336a:	e7fe      	b.n	800336a <main+0x8c2>
			break;
 800336c:	bf00      	nop
 800336e:	e004      	b.n	800337a <main+0x8d2>
			break;
 8003370:	bf00      	nop
 8003372:	e002      	b.n	800337a <main+0x8d2>
			break;
 8003374:	bf00      	nop
 8003376:	e000      	b.n	800337a <main+0x8d2>
			break;
 8003378:	bf00      	nop

			break;
		}

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 800337a:	2200      	movs	r2, #0
 800337c:	2102      	movs	r1, #2
 800337e:	4810      	ldr	r0, [pc, #64]	; (80033c0 <main+0x918>)
 8003380:	f003 fae2 	bl	8006948 <HAL_GPIO_WritePin>
  {
 8003384:	e4a2      	b.n	8002ccc <main+0x224>
 8003386:	bf00      	nop
 8003388:	2000039c 	.word	0x2000039c
 800338c:	20000385 	.word	0x20000385
 8003390:	20000378 	.word	0x20000378
 8003394:	20000c30 	.word	0x20000c30
 8003398:	08014d40 	.word	0x08014d40
 800339c:	20000c34 	.word	0x20000c34
 80033a0:	2000027c 	.word	0x2000027c
 80033a4:	20000344 	.word	0x20000344
 80033a8:	2000038c 	.word	0x2000038c
 80033ac:	44bb8000 	.word	0x44bb8000
 80033b0:	20000390 	.word	0x20000390
 80033b4:	08014d4c 	.word	0x08014d4c
 80033b8:	20000394 	.word	0x20000394
 80033bc:	08014d5c 	.word	0x08014d5c
 80033c0:	40020800 	.word	0x40020800
 80033c4:	40020000 	.word	0x40020000

080033c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b0a0      	sub	sp, #128	; 0x80
 80033cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033d2:	2230      	movs	r2, #48	; 0x30
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f00b fb0c 	bl	800e9f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033ec:	f107 030c 	add.w	r3, r7, #12
 80033f0:	2230      	movs	r2, #48	; 0x30
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f00b fafd 	bl	800e9f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <SystemClock_Config+0xfc>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	4a30      	ldr	r2, [pc, #192]	; (80034c4 <SystemClock_Config+0xfc>)
 8003404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003408:	6413      	str	r3, [r2, #64]	; 0x40
 800340a:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <SystemClock_Config+0xfc>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <SystemClock_Config+0x100>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003422:	4a29      	ldr	r2, [pc, #164]	; (80034c8 <SystemClock_Config+0x100>)
 8003424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <SystemClock_Config+0x100>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003436:	2309      	movs	r3, #9
 8003438:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800343a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800343e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003440:	2301      	movs	r3, #1
 8003442:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003444:	2302      	movs	r3, #2
 8003446:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003448:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800344c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800344e:	2308      	movs	r3, #8
 8003450:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003452:	2348      	movs	r3, #72	; 0x48
 8003454:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003456:	2302      	movs	r3, #2
 8003458:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800345a:	2304      	movs	r3, #4
 800345c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800345e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003462:	4618      	mov	r0, r3
 8003464:	f004 fadc 	bl	8007a20 <HAL_RCC_OscConfig>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800346e:	f000 f921 	bl	80036b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003472:	230f      	movs	r3, #15
 8003474:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003476:	2302      	movs	r3, #2
 8003478:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800347a:	2300      	movs	r3, #0
 800347c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800347e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003484:	2300      	movs	r3, #0
 8003486:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003488:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800348c:	2102      	movs	r1, #2
 800348e:	4618      	mov	r0, r3
 8003490:	f004 fd36 	bl	8007f00 <HAL_RCC_ClockConfig>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800349a:	f000 f90b 	bl	80036b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800349e:	2320      	movs	r3, #32
 80034a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80034a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034a8:	f107 030c 	add.w	r3, r7, #12
 80034ac:	4618      	mov	r0, r3
 80034ae:	f004 ff21 	bl	80082f4 <HAL_RCCEx_PeriphCLKConfig>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80034b8:	f000 f8fc 	bl	80036b4 <Error_Handler>
  }
}
 80034bc:	bf00      	nop
 80034be:	3780      	adds	r7, #128	; 0x80
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40007000 	.word	0x40007000

080034cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IN_Button_Pin) {
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d109      	bne.n	80034f0 <HAL_GPIO_EXTI_Callback+0x24>
		button_pressed = 1;
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <HAL_GPIO_EXTI_Callback+0x30>)
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
		state++;
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <HAL_GPIO_EXTI_Callback+0x34>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	3301      	adds	r3, #1
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <HAL_GPIO_EXTI_Callback+0x34>)
 80034ee:	701a      	strb	r2, [r3, #0]
	}
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	20000236 	.word	0x20000236
 8003500:	20000385 	.word	0x20000385

08003504 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a08      	ldr	r2, [pc, #32]	; (8003530 <HAL_UART_RxCpltCallback+0x2c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d106      	bne.n	8003522 <HAL_UART_RxCpltCallback+0x1e>

		// received data from GPS into buffer.
		// insert null termination and parse buffer (total buffer length is GPS_RX_DMA_BUF_LEN + 1)
		gps_rx_buf[GPS_RX_DMA_BUF_LEN] = '\0';
 8003514:	4b07      	ldr	r3, [pc, #28]	; (8003534 <HAL_UART_RxCpltCallback+0x30>)
 8003516:	2200      	movs	r2, #0
 8003518:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		gps_dma_ready = 1;
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_UART_RxCpltCallback+0x34>)
 800351e:	2201      	movs	r2, #1
 8003520:	701a      	strb	r2, [r3, #0]

	}
	else if (huart == &huart3) {

	}
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	2000153c 	.word	0x2000153c
 8003534:	20000a4c 	.word	0x20000a4c
 8003538:	20000254 	.word	0x20000254
 800353c:	00000000 	.word	0x00000000

08003540 <getAltitude>:

float getAltitude(void) {
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
	get_pressure(dev_ctx_lps, &pressure_hPa);
 8003546:	4a22      	ldr	r2, [pc, #136]	; (80035d0 <getAltitude+0x90>)
 8003548:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <getAltitude+0x94>)
 800354a:	ca07      	ldmia	r2, {r0, r1, r2}
 800354c:	f7fe fd98 	bl	8002080 <get_pressure>
	uint32_t altitude = 145442.1609 * (1.0 - pow(pressure_hPa/local_pressure, 0.190266436));
 8003550:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <getAltitude+0x94>)
 8003552:	ed93 7a00 	vldr	s14, [r3]
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <getAltitude+0x98>)
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003560:	ee16 0a90 	vmov	r0, s13
 8003564:	f7fd f800 	bl	8000568 <__aeabi_f2d>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80035c0 <getAltitude+0x80>
 8003570:	ec43 2b10 	vmov	d0, r2, r3
 8003574:	f010 fb7a 	bl	8013c6c <pow>
 8003578:	ec53 2b10 	vmov	r2, r3, d0
 800357c:	f04f 0000 	mov.w	r0, #0
 8003580:	4916      	ldr	r1, [pc, #88]	; (80035dc <getAltitude+0x9c>)
 8003582:	f7fc fe91 	bl	80002a8 <__aeabi_dsub>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	a30e      	add	r3, pc, #56	; (adr r3, 80035c8 <getAltitude+0x88>)
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f7fd f840 	bl	8000618 <__aeabi_dmul>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	f7fd fb12 	bl	8000bc8 <__aeabi_d2uiz>
 80035a4:	4603      	mov	r3, r0
 80035a6:	607b      	str	r3, [r7, #4]
	return altitude;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80035b2:	eeb0 0a67 	vmov.f32	s0, s15
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	f3af 8000 	nop.w
 80035c0:	8c12bfc3 	.word	0x8c12bfc3
 80035c4:	3fc85aa6 	.word	0x3fc85aa6
 80035c8:	4985f06f 	.word	0x4985f06f
 80035cc:	4101c111 	.word	0x4101c111
 80035d0:	20000c24 	.word	0x20000c24
 80035d4:	20000250 	.word	0x20000250
 80035d8:	20000000 	.word	0x20000000
 80035dc:	3ff00000 	.word	0x3ff00000

080035e0 <get_continuity>:

	W25qxx_WriteBlock(msg_buffer, block_address, block_offset, strlen((const char *)msg_buffer));
	flash_write_address += strlen((const char *)msg_buffer);
}

uint8_t get_continuity(void) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
	// read pins
	GPIO_PinState drogue = HAL_GPIO_ReadPin(Rcov_Cont_Drogue_GPIO_Port, Rcov_Cont_Drogue_Pin);
 80035e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035ea:	4817      	ldr	r0, [pc, #92]	; (8003648 <get_continuity+0x68>)
 80035ec:	f003 f994 	bl	8006918 <HAL_GPIO_ReadPin>
 80035f0:	4603      	mov	r3, r0
 80035f2:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState main = HAL_GPIO_ReadPin(Rcov_Cont_Main_GPIO_Port, Rcov_Cont_Main_Pin);
 80035f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035f8:	4813      	ldr	r0, [pc, #76]	; (8003648 <get_continuity+0x68>)
 80035fa:	f003 f98d 	bl	8006918 <HAL_GPIO_ReadPin>
 80035fe:	4603      	mov	r3, r0
 8003600:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState prop_1 = HAL_GPIO_ReadPin(Prop_Cont_1_GPIO_Port, Prop_Cont_1_Pin);
 8003602:	2101      	movs	r1, #1
 8003604:	4810      	ldr	r0, [pc, #64]	; (8003648 <get_continuity+0x68>)
 8003606:	f003 f987 	bl	8006918 <HAL_GPIO_ReadPin>
 800360a:	4603      	mov	r3, r0
 800360c:	717b      	strb	r3, [r7, #5]
	GPIO_PinState prop_2 = HAL_GPIO_ReadPin(Prop_Cont_2_GPIO_Port, Prop_Cont_2_Pin);
 800360e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003612:	480e      	ldr	r0, [pc, #56]	; (800364c <get_continuity+0x6c>)
 8003614:	f003 f980 	bl	8006918 <HAL_GPIO_ReadPin>
 8003618:	4603      	mov	r3, r0
 800361a:	713b      	strb	r3, [r7, #4]

	// assign one-hot encoded result (apparently you can multiply enums?)
	uint8_t continuity = (drogue) + (main * 2) + (prop_1 * 4) + (prop_2 * 8);
 800361c:	793b      	ldrb	r3, [r7, #4]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	b2da      	uxtb	r2, r3
 8003622:	797b      	ldrb	r3, [r7, #5]
 8003624:	4413      	add	r3, r2
 8003626:	b2db      	uxtb	r3, r3
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	b2da      	uxtb	r2, r3
 800362c:	79bb      	ldrb	r3, [r7, #6]
 800362e:	4413      	add	r3, r2
 8003630:	b2db      	uxtb	r3, r3
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	b2da      	uxtb	r2, r3
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	4413      	add	r3, r2
 800363a:	70fb      	strb	r3, [r7, #3]
	return continuity;
 800363c:	78fb      	ldrb	r3, [r7, #3]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40021800 	.word	0x40021800
 800364c:	40021400 	.word	0x40021400

08003650 <prop_poll_pressure_transducer>:

float prop_poll_pressure_transducer(void) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
	// reading adc
	HAL_ADC_Start(&hadc1);
 8003656:	4816      	ldr	r0, [pc, #88]	; (80036b0 <prop_poll_pressure_transducer+0x60>)
 8003658:	f001 ff56 	bl	8005508 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800365c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003660:	4813      	ldr	r0, [pc, #76]	; (80036b0 <prop_poll_pressure_transducer+0x60>)
 8003662:	f002 f84a 	bl	80056fa <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(&hadc1);
 8003666:	4812      	ldr	r0, [pc, #72]	; (80036b0 <prop_poll_pressure_transducer+0x60>)
 8003668:	f002 f8cb 	bl	8005802 <HAL_ADC_GetValue>
 800366c:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 800366e:	4810      	ldr	r0, [pc, #64]	; (80036b0 <prop_poll_pressure_transducer+0x60>)
 8003670:	f002 f810 	bl	8005694 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0); // assuming 12 bits
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7fc ff55 	bl	8000524 <__aeabi_ui2d>
 800367a:	a30b      	add	r3, pc, #44	; (adr r3, 80036a8 <prop_poll_pressure_transducer+0x58>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f7fd f8f4 	bl	800086c <__aeabi_ddiv>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4610      	mov	r0, r2
 800368a:	4619      	mov	r1, r3
 800368c:	f7fd fabc 	bl	8000c08 <__aeabi_d2f>
 8003690:	4603      	mov	r3, r0
 8003692:	603b      	str	r3, [r7, #0]

	// convert using transfer function
	// TODO

	return voltage;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	ee07 3a90 	vmov	s15, r3
}
 800369a:	eeb0 0a67 	vmov.f32	s0, s15
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	f3af 8000 	nop.w
 80036a8:	00000000 	.word	0x00000000
 80036ac:	40affe00 	.word	0x40affe00
 80036b0:	20000558 	.word	0x20000558

080036b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_SET);
 80036b8:	2201      	movs	r2, #1
 80036ba:	2108      	movs	r1, #8
 80036bc:	4803      	ldr	r0, [pc, #12]	; (80036cc <Error_Handler+0x18>)
 80036be:	f003 f943 	bl	8006948 <HAL_GPIO_WritePin>
	buzz_failure();
 80036c2:	f7ff f9e7 	bl	8002a94 <buzz_failure>
	__BKPT();
 80036c6:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 80036c8:	bf00      	nop
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40020000 	.word	0x40020000

080036d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80036e4:	2300      	movs	r3, #0
 80036e6:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036e8:	4b24      	ldr	r3, [pc, #144]	; (800377c <MX_RTC_Init+0xac>)
 80036ea:	4a25      	ldr	r2, [pc, #148]	; (8003780 <MX_RTC_Init+0xb0>)
 80036ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036ee:	4b23      	ldr	r3, [pc, #140]	; (800377c <MX_RTC_Init+0xac>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80036f4:	4b21      	ldr	r3, [pc, #132]	; (800377c <MX_RTC_Init+0xac>)
 80036f6:	227f      	movs	r2, #127	; 0x7f
 80036f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80036fa:	4b20      	ldr	r3, [pc, #128]	; (800377c <MX_RTC_Init+0xac>)
 80036fc:	22ff      	movs	r2, #255	; 0xff
 80036fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003700:	4b1e      	ldr	r3, [pc, #120]	; (800377c <MX_RTC_Init+0xac>)
 8003702:	2200      	movs	r2, #0
 8003704:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <MX_RTC_Init+0xac>)
 8003708:	2200      	movs	r2, #0
 800370a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <MX_RTC_Init+0xac>)
 800370e:	2200      	movs	r2, #0
 8003710:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003712:	481a      	ldr	r0, [pc, #104]	; (800377c <MX_RTC_Init+0xac>)
 8003714:	f004 ffac 	bl	8008670 <HAL_RTC_Init>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800371e:	f7ff ffc9 	bl	80036b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8003722:	2310      	movs	r3, #16
 8003724:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 8003726:	2320      	movs	r3, #32
 8003728:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 800372a:	2330      	movs	r3, #48	; 0x30
 800372c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003736:	1d3b      	adds	r3, r7, #4
 8003738:	2201      	movs	r2, #1
 800373a:	4619      	mov	r1, r3
 800373c:	480f      	ldr	r0, [pc, #60]	; (800377c <MX_RTC_Init+0xac>)
 800373e:	f005 f828 	bl	8008792 <HAL_RTC_SetTime>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003748:	f7ff ffb4 	bl	80036b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800374c:	2301      	movs	r3, #1
 800374e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8003750:	2302      	movs	r3, #2
 8003752:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8003754:	2312      	movs	r3, #18
 8003756:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8003758:	2321      	movs	r3, #33	; 0x21
 800375a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800375c:	463b      	mov	r3, r7
 800375e:	2201      	movs	r2, #1
 8003760:	4619      	mov	r1, r3
 8003762:	4806      	ldr	r0, [pc, #24]	; (800377c <MX_RTC_Init+0xac>)
 8003764:	f005 f930 	bl	80089c8 <HAL_RTC_SetDate>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800376e:	f7ff ffa1 	bl	80036b4 <Error_Handler>
  }

}
 8003772:	bf00      	nop
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000e64 	.word	0x20000e64
 8003780:	40002800 	.word	0x40002800

08003784 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a05      	ldr	r2, [pc, #20]	; (80037a8 <HAL_RTC_MspInit+0x24>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d102      	bne.n	800379c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RTC_MspInit+0x28>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	40002800 	.word	0x40002800
 80037ac:	42470e3c 	.word	0x42470e3c

080037b0 <myprintf>:
extern FRESULT fres;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 80037b0:	b40f      	push	{r0, r1, r2, r3}
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037c6:	4805      	ldr	r0, [pc, #20]	; (80037dc <myprintf+0x2c>)
 80037c8:	f00d f886 	bl	80108d8 <vsniprintf>
  va_end(args);

//  int len = strlen(buffer);
//  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, len, -1);

}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037d6:	b004      	add	sp, #16
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	200003a0 	.word	0x200003a0

080037e0 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 80037ec:	2201      	movs	r2, #1
 80037ee:	4932      	ldr	r1, [pc, #200]	; (80038b8 <sd_init_dynamic_filename+0xd8>)
 80037f0:	4832      	ldr	r0, [pc, #200]	; (80038bc <sd_init_dynamic_filename+0xdc>)
 80037f2:	f00a f963 	bl	800dabc <f_mount>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 80037fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8003804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003808:	4619      	mov	r1, r3
 800380a:	482d      	ldr	r0, [pc, #180]	; (80038c0 <sd_init_dynamic_filename+0xe0>)
 800380c:	f7ff ffd0 	bl	80037b0 <myprintf>
		return fres;
 8003810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003814:	e04b      	b.n	80038ae <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 800381a:	f107 0320 	add.w	r3, r7, #32
 800381e:	461a      	mov	r2, r3
 8003820:	68f9      	ldr	r1, [r7, #12]
 8003822:	4825      	ldr	r0, [pc, #148]	; (80038b8 <sd_init_dynamic_filename+0xd8>)
 8003824:	f000 f89c 	bl	8003960 <scan_files>
 8003828:	4603      	mov	r3, r0
 800382a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	f107 0310 	add.w	r3, r7, #16
 8003836:	4923      	ldr	r1, [pc, #140]	; (80038c4 <sd_init_dynamic_filename+0xe4>)
 8003838:	4618      	mov	r0, r3
 800383a:	f00c f8ab 	bl	800f994 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 800383e:	f107 0310 	add.w	r3, r7, #16
 8003842:	4619      	mov	r1, r3
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f00c f943 	bl	800fad0 <strcpy>
 800384a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800384c:	f107 0310 	add.w	r3, r7, #16
 8003850:	221a      	movs	r2, #26
 8003852:	4619      	mov	r1, r3
 8003854:	481c      	ldr	r0, [pc, #112]	; (80038c8 <sd_init_dynamic_filename+0xe8>)
 8003856:	f00a f977 	bl	800db48 <f_open>
 800385a:	4603      	mov	r3, r0
 800385c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8003860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003864:	2b00      	cmp	r3, #0
 8003866:	d11a      	bne.n	800389e <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8003868:	4818      	ldr	r0, [pc, #96]	; (80038cc <sd_init_dynamic_filename+0xec>)
 800386a:	f7ff ffa1 	bl	80037b0 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 800386e:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <sd_init_dynamic_filename+0xe8>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	4619      	mov	r1, r3
 8003874:	4814      	ldr	r0, [pc, #80]	; (80038c8 <sd_init_dynamic_filename+0xe8>)
 8003876:	f00a fd42 	bl	800e2fe <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 800387a:	4915      	ldr	r1, [pc, #84]	; (80038d0 <sd_init_dynamic_filename+0xf0>)
 800387c:	4815      	ldr	r0, [pc, #84]	; (80038d4 <sd_init_dynamic_filename+0xf4>)
 800387e:	f00c f889 	bl	800f994 <siprintf>
	sd_write(&fil, msg_buffer);
 8003882:	4914      	ldr	r1, [pc, #80]	; (80038d4 <sd_init_dynamic_filename+0xf4>)
 8003884:	4810      	ldr	r0, [pc, #64]	; (80038c8 <sd_init_dynamic_filename+0xe8>)
 8003886:	f000 f841 	bl	800390c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	480e      	ldr	r0, [pc, #56]	; (80038c8 <sd_init_dynamic_filename+0xe8>)
 800388e:	f000 f83d 	bl	800390c <sd_write>
	f_close(&fil);
 8003892:	480d      	ldr	r0, [pc, #52]	; (80038c8 <sd_init_dynamic_filename+0xe8>)
 8003894:	f00a fd09 	bl	800e2aa <f_close>

	return fres;
 8003898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800389c:	e007      	b.n	80038ae <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 800389e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038a2:	4619      	mov	r1, r3
 80038a4:	480c      	ldr	r0, [pc, #48]	; (80038d8 <sd_init_dynamic_filename+0xf8>)
 80038a6:	f7ff ff83 	bl	80037b0 <myprintf>
		return fres;
 80038aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3728      	adds	r7, #40	; 0x28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	08014d68 	.word	0x08014d68
 80038bc:	200006b8 	.word	0x200006b8
 80038c0:	08014d6c 	.word	0x08014d6c
 80038c4:	08014de8 	.word	0x08014de8
 80038c8:	20000c34 	.word	0x20000c34
 80038cc:	08014d84 	.word	0x08014d84
 80038d0:	08014dc8 	.word	0x08014dc8
 80038d4:	20000e84 	.word	0x20000e84
 80038d8:	08014db4 	.word	0x08014db4

080038dc <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 80038e4:	2212      	movs	r2, #18
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4807      	ldr	r0, [pc, #28]	; (8003908 <sd_open_file+0x2c>)
 80038ea:	f00a f92d 	bl	800db48 <f_open>
 80038ee:	4603      	mov	r3, r0
 80038f0:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <sd_open_file+0x2c>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	4619      	mov	r1, r3
 80038f8:	4803      	ldr	r0, [pc, #12]	; (8003908 <sd_open_file+0x2c>)
 80038fa:	f00a fd00 	bl	800e2fe <f_lseek>

	return fres;
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000c34 	.word	0x20000c34

0800390c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8003916:	6838      	ldr	r0, [r7, #0]
 8003918:	f7fc fc6a 	bl	80001f0 <strlen>
 800391c:	4602      	mov	r2, r0
 800391e:	f107 0308 	add.w	r3, r7, #8
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f00a facd 	bl	800dec4 <f_write>
 800392a:	4603      	mov	r3, r0
 800392c:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d107      	bne.n	8003944 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4619      	mov	r1, r3
 8003938:	4807      	ldr	r0, [pc, #28]	; (8003958 <sd_write+0x4c>)
 800393a:	f7ff ff39 	bl	80037b0 <myprintf>
		return bytesWrote;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	b25b      	sxtb	r3, r3
 8003942:	e004      	b.n	800394e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8003944:	4805      	ldr	r0, [pc, #20]	; (800395c <sd_write+0x50>)
 8003946:	f7ff ff33 	bl	80037b0 <myprintf>
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	08014df4 	.word	0x08014df4
 800395c:	08014e18 	.word	0x08014e18

08003960 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8003960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003962:	b099      	sub	sp, #100	; 0x64
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	466b      	mov	r3, sp
 800396e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8003970:	68b8      	ldr	r0, [r7, #8]
 8003972:	f7fc fc3d 	bl	80001f0 <strlen>
 8003976:	4603      	mov	r3, r0
 8003978:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 800397c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8003980:	4623      	mov	r3, r4
 8003982:	3b01      	subs	r3, #1
 8003984:	65bb      	str	r3, [r7, #88]	; 0x58
 8003986:	b2e0      	uxtb	r0, r4
 8003988:	f04f 0100 	mov.w	r1, #0
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	00cb      	lsls	r3, r1, #3
 8003996:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800399a:	00c2      	lsls	r2, r0, #3
 800399c:	b2e0      	uxtb	r0, r4
 800399e:	f04f 0100 	mov.w	r1, #0
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	00cb      	lsls	r3, r1, #3
 80039ac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80039b0:	00c2      	lsls	r2, r0, #3
 80039b2:	4623      	mov	r3, r4
 80039b4:	3307      	adds	r3, #7
 80039b6:	08db      	lsrs	r3, r3, #3
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	ebad 0d03 	sub.w	sp, sp, r3
 80039be:	466b      	mov	r3, sp
 80039c0:	3300      	adds	r3, #0
 80039c2:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 80039c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c6:	4619      	mov	r1, r3
 80039c8:	68b8      	ldr	r0, [r7, #8]
 80039ca:	f000 f9ab 	bl	8003d24 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 80039d8:	f107 0318 	add.w	r3, r7, #24
 80039dc:	68f9      	ldr	r1, [r7, #12]
 80039de:	4618      	mov	r0, r3
 80039e0:	f00a fe96 	bl	800e710 <f_opendir>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 80039ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d16c      	bne.n	8003acc <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80039f2:	f107 0318 	add.w	r3, r7, #24
 80039f6:	4939      	ldr	r1, [pc, #228]	; (8003adc <scan_files+0x17c>)
 80039f8:	4618      	mov	r0, r3
 80039fa:	f00a ff22 	bl	800e842 <f_readdir>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8003a04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d15a      	bne.n	8003ac2 <scan_files+0x162>
 8003a0c:	4b33      	ldr	r3, [pc, #204]	; (8003adc <scan_files+0x17c>)
 8003a0e:	7a5b      	ldrb	r3, [r3, #9]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d056      	beq.n	8003ac2 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8003a14:	4b31      	ldr	r3, [pc, #196]	; (8003adc <scan_files+0x17c>)
 8003a16:	7a1b      	ldrb	r3, [r3, #8]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d14e      	bne.n	8003abe <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8003a20:	466b      	mov	r3, sp
 8003a22:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8003a24:	482e      	ldr	r0, [pc, #184]	; (8003ae0 <scan_files+0x180>)
 8003a26:	f7fc fbe3 	bl	80001f0 <strlen>
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	4623      	mov	r3, r4
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	653b      	str	r3, [r7, #80]	; 0x50
 8003a32:	4620      	mov	r0, r4
 8003a34:	f04f 0100 	mov.w	r1, #0
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	00cb      	lsls	r3, r1, #3
 8003a42:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003a46:	00c2      	lsls	r2, r0, #3
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f04f 0100 	mov.w	r1, #0
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	00cb      	lsls	r3, r1, #3
 8003a58:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003a5c:	00c2      	lsls	r2, r0, #3
 8003a5e:	1de3      	adds	r3, r4, #7
 8003a60:	08db      	lsrs	r3, r3, #3
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	ebad 0d03 	sub.w	sp, sp, r3
 8003a68:	466b      	mov	r3, sp
 8003a6a:	3300      	adds	r3, #0
 8003a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8003a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a70:	4619      	mov	r1, r3
 8003a72:	481b      	ldr	r0, [pc, #108]	; (8003ae0 <scan_files+0x180>)
 8003a74:	f000 f956 	bl	8003d24 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8003a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4817      	ldr	r0, [pc, #92]	; (8003ae0 <scan_files+0x180>)
 8003a82:	f00c f82d 	bl	800fae0 <strncmp>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8003a8c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d112      	bne.n	8003aba <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8003a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a96:	f107 0214 	add.w	r2, r7, #20
 8003a9a:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f820 	bl	8003ae4 <extract_filename_suffix>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d202      	bcs.n	8003aba <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	46b5      	mov	sp, r6
 8003abc:	e799      	b.n	80039f2 <scan_files+0x92>
            	continue; // don't enter directory
 8003abe:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003ac0:	e797      	b.n	80039f2 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8003ac2:	f107 0318 	add.w	r3, r7, #24
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f00a fe95 	bl	800e7f6 <f_closedir>
    }

    return res;
 8003acc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ad0:	46ad      	mov	sp, r5
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3764      	adds	r7, #100	; 0x64
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200004a0 	.word	0x200004a0
 8003ae0:	200004a9 	.word	0x200004a9

08003ae4 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8003ae4:	b5b0      	push	{r4, r5, r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	460b      	mov	r3, r1
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	72fb      	strb	r3, [r7, #11]
 8003af2:	466b      	mov	r3, sp
 8003af4:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7fc fb7a 	bl	80001f0 <strlen>
 8003afc:	4603      	mov	r3, r0
 8003afe:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8003b00:	2308      	movs	r3, #8
 8003b02:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8003b04:	7f7c      	ldrb	r4, [r7, #29]
 8003b06:	4623      	mov	r3, r4
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	b2e0      	uxtb	r0, r4
 8003b0e:	f04f 0100 	mov.w	r1, #0
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	00cb      	lsls	r3, r1, #3
 8003b1c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003b20:	00c2      	lsls	r2, r0, #3
 8003b22:	b2e0      	uxtb	r0, r4
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	00cb      	lsls	r3, r1, #3
 8003b32:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003b36:	00c2      	lsls	r2, r0, #3
 8003b38:	4623      	mov	r3, r4
 8003b3a:	3307      	adds	r3, #7
 8003b3c:	08db      	lsrs	r3, r3, #3
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	ebad 0d03 	sub.w	sp, sp, r3
 8003b44:	466b      	mov	r3, sp
 8003b46:	3300      	adds	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	77fb      	strb	r3, [r7, #31]
 8003b4e:	e014      	b.n	8003b7a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8003b50:	7afb      	ldrb	r3, [r7, #11]
 8003b52:	1e5a      	subs	r2, r3, #1
 8003b54:	7ffb      	ldrb	r3, [r7, #31]
 8003b56:	441a      	add	r2, r3
 8003b58:	7fbb      	ldrb	r3, [r7, #30]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	da11      	bge.n	8003b84 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8003b60:	7afa      	ldrb	r2, [r7, #11]
 8003b62:	7ffb      	ldrb	r3, [r7, #31]
 8003b64:	4413      	add	r3, r2
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	441a      	add	r2, r3
 8003b6c:	7ffb      	ldrb	r3, [r7, #31]
 8003b6e:	7811      	ldrb	r1, [r2, #0]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8003b74:	7ffb      	ldrb	r3, [r7, #31]
 8003b76:	3301      	adds	r3, #1
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	7ffa      	ldrb	r2, [r7, #31]
 8003b7c:	7f7b      	ldrb	r3, [r7, #29]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d3e6      	bcc.n	8003b50 <extract_filename_suffix+0x6c>
 8003b82:	e000      	b.n	8003b86 <extract_filename_suffix+0xa2>
		}
		else break;
 8003b84:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f107 0110 	add.w	r1, r7, #16
 8003b8c:	220a      	movs	r2, #10
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f00c fe6c 	bl	801086c <strtol>
 8003b94:	4603      	mov	r3, r0
 8003b96:	461a      	mov	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d00a      	beq.n	8003bba <extract_filename_suffix+0xd6>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bac:	d005      	beq.n	8003bba <extract_filename_suffix+0xd6>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <extract_filename_suffix+0xda>
	{
		return 1;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <extract_filename_suffix+0xdc>
	}

	return 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	46ad      	mov	sp, r5
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003bcc <save_flash_to_sd>:
 *
 * assumes f_mount has already been run.
 * this function does not close the file system.
 * opens a file "datalog.txt" and closes it when finished.
 */
int8_t save_flash_to_sd(void) {
 8003bcc:	b5b0      	push	{r4, r5, r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	466b      	mov	r3, sp
 8003bd4:	461d      	mov	r5, r3
	// FLASH variables
	uint32_t page_num = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
	uint16_t page_bytes = w25qxx.PageSize; // 256 bytes saved per page
 8003bda:	4b4b      	ldr	r3, [pc, #300]	; (8003d08 <save_flash_to_sd+0x13c>)
 8003bdc:	895b      	ldrh	r3, [r3, #10]
 8003bde:	82fb      	strh	r3, [r7, #22]
	uint8_t readBuf[page_bytes];
 8003be0:	8afc      	ldrh	r4, [r7, #22]
 8003be2:	4623      	mov	r3, r4
 8003be4:	3b01      	subs	r3, #1
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	b2a0      	uxth	r0, r4
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	00cb      	lsls	r3, r1, #3
 8003bf8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003bfc:	00c2      	lsls	r2, r0, #3
 8003bfe:	b2a0      	uxth	r0, r4
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	00cb      	lsls	r3, r1, #3
 8003c0e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003c12:	00c2      	lsls	r2, r0, #3
 8003c14:	4623      	mov	r3, r4
 8003c16:	3307      	adds	r3, #7
 8003c18:	08db      	lsrs	r3, r3, #3
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	ebad 0d03 	sub.w	sp, sp, r3
 8003c20:	466b      	mov	r3, sp
 8003c22:	3300      	adds	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]

	// write to file
	fres = f_open(&fil, "flashlog.txt", FA_WRITE | FA_OPEN_ALWAYS);
 8003c26:	2212      	movs	r2, #18
 8003c28:	4938      	ldr	r1, [pc, #224]	; (8003d0c <save_flash_to_sd+0x140>)
 8003c2a:	4839      	ldr	r0, [pc, #228]	; (8003d10 <save_flash_to_sd+0x144>)
 8003c2c:	f009 ff8c 	bl	800db48 <f_open>
 8003c30:	4603      	mov	r3, r0
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b37      	ldr	r3, [pc, #220]	; (8003d14 <save_flash_to_sd+0x148>)
 8003c36:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8003c38:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <save_flash_to_sd+0x148>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <save_flash_to_sd+0x86>
		myprintf("f_open error (%i)\r\n", fres);
 8003c40:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <save_flash_to_sd+0x148>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	4834      	ldr	r0, [pc, #208]	; (8003d18 <save_flash_to_sd+0x14c>)
 8003c48:	f7ff fdb2 	bl	80037b0 <myprintf>
		return -1;
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c50:	e055      	b.n	8003cfe <save_flash_to_sd+0x132>
	}

	// set pointer to end of file
	f_lseek(&fil, f_size(&fil));
 8003c52:	4b2f      	ldr	r3, [pc, #188]	; (8003d10 <save_flash_to_sd+0x144>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	4619      	mov	r1, r3
 8003c58:	482d      	ldr	r0, [pc, #180]	; (8003d10 <save_flash_to_sd+0x144>)
 8003c5a:	f00a fb50 	bl	800e2fe <f_lseek>

	// print string to indicate new log session
	sprintf((char *)msg_buffer, "\n--- new logging session! ---\r\n");
 8003c5e:	492f      	ldr	r1, [pc, #188]	; (8003d1c <save_flash_to_sd+0x150>)
 8003c60:	482f      	ldr	r0, [pc, #188]	; (8003d20 <save_flash_to_sd+0x154>)
 8003c62:	f00b fe97 	bl	800f994 <siprintf>
	sd_write(&fil, msg_buffer);
 8003c66:	492e      	ldr	r1, [pc, #184]	; (8003d20 <save_flash_to_sd+0x154>)
 8003c68:	4829      	ldr	r0, [pc, #164]	; (8003d10 <save_flash_to_sd+0x144>)
 8003c6a:	f7ff fe4f 	bl	800390c <sd_write>

	for (page_num = 0; page_num < w25qxx.PageCount; page_num++) {
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	e022      	b.n	8003cba <save_flash_to_sd+0xee>

		if (!W25qxx_IsEmptyPage(page_num, 0, page_bytes)) {
 8003c74:	8afb      	ldrh	r3, [r7, #22]
 8003c76:	461a      	mov	r2, r3
 8003c78:	2100      	movs	r1, #0
 8003c7a:	69b8      	ldr	r0, [r7, #24]
 8003c7c:	f001 f95c 	bl	8004f38 <W25qxx_IsEmptyPage>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f083 0301 	eor.w	r3, r3, #1
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01c      	beq.n	8003cc6 <save_flash_to_sd+0xfa>

			// page not empty, read page out of flash
			W25qxx_ReadPage(readBuf, page_num, 0, page_bytes);
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	8afb      	ldrh	r3, [r7, #22]
 8003c90:	2200      	movs	r2, #0
 8003c92:	69b9      	ldr	r1, [r7, #24]
 8003c94:	f001 fa72 	bl	800517c <W25qxx_ReadPage>

			// save to SD
			int8_t status = sd_write(&fil, readBuf);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	481c      	ldr	r0, [pc, #112]	; (8003d10 <save_flash_to_sd+0x144>)
 8003c9e:	f7ff fe35 	bl	800390c <sd_write>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	72fb      	strb	r3, [r7, #11]
			if (status <= 0) {
 8003ca6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	dc02      	bgt.n	8003cb4 <save_flash_to_sd+0xe8>
				return -1; // failed
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	e024      	b.n	8003cfe <save_flash_to_sd+0x132>
	for (page_num = 0; page_num < w25qxx.PageCount; page_num++) {
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <save_flash_to_sd+0x13c>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d3d7      	bcc.n	8003c74 <save_flash_to_sd+0xa8>
 8003cc4:	e000      	b.n	8003cc8 <save_flash_to_sd+0xfc>
			}
		}
		else break; // page empty, no need to continue
 8003cc6:	bf00      	nop
	}

	// close file
	f_close(&fil);
 8003cc8:	4811      	ldr	r0, [pc, #68]	; (8003d10 <save_flash_to_sd+0x144>)
 8003cca:	f00a faee 	bl	800e2aa <f_close>

	if (page_num == 0) { // nothing saved
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <save_flash_to_sd+0x10c>
		return 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e012      	b.n	8003cfe <save_flash_to_sd+0x132>
	}
	else {
		// clear the blocks with data
		uint32_t blocks_to_clear = W25qxx_PageToBlock(page_num);
 8003cd8:	69b8      	ldr	r0, [r7, #24]
 8003cda:	f001 f917 	bl	8004f0c <W25qxx_PageToBlock>
 8003cde:	6078      	str	r0, [r7, #4]
		for (uint32_t block = 0; block <= blocks_to_clear; block++) {
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	e005      	b.n	8003cf2 <save_flash_to_sd+0x126>
			W25qxx_EraseBlock(block);
 8003ce6:	69f8      	ldr	r0, [r7, #28]
 8003ce8:	f001 f89c 	bl	8004e24 <W25qxx_EraseBlock>
		for (uint32_t block = 0; block <= blocks_to_clear; block++) {
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d9f5      	bls.n	8003ce6 <save_flash_to_sd+0x11a>
		}
	}

	return page_num;
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	b25b      	sxtb	r3, r3
 8003cfe:	46ad      	mov	sp, r5
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3720      	adds	r7, #32
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bdb0      	pop	{r4, r5, r7, pc}
 8003d08:	2000157c 	.word	0x2000157c
 8003d0c:	08014e30 	.word	0x08014e30
 8003d10:	20000c34 	.word	0x20000c34
 8003d14:	20000c30 	.word	0x20000c30
 8003d18:	08014db4 	.word	0x08014db4
 8003d1c:	08014e40 	.word	0x08014e40
 8003d20:	20000e84 	.word	0x20000e84

08003d24 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8003d24:	b590      	push	{r4, r7, lr}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73fb      	strb	r3, [r7, #15]
 8003d32:	e019      	b.n	8003d68 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	73bb      	strb	r3, [r7, #14]
 8003d3e:	7bbb      	ldrb	r3, [r7, #14]
 8003d40:	3301      	adds	r3, #1
 8003d42:	4a0f      	ldr	r2, [pc, #60]	; (8003d80 <str2upper+0x5c>)
 8003d44:	4413      	add	r3, r2
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d102      	bne.n	8003d56 <str2upper+0x32>
 8003d50:	7bbb      	ldrb	r3, [r7, #14]
 8003d52:	3b20      	subs	r3, #32
 8003d54:	e000      	b.n	8003d58 <str2upper+0x34>
 8003d56:	7bbb      	ldrb	r3, [r7, #14]
 8003d58:	7bfa      	ldrb	r2, [r7, #15]
 8003d5a:	6839      	ldr	r1, [r7, #0]
 8003d5c:	440a      	add	r2, r1
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	3301      	adds	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
 8003d68:	7bfc      	ldrb	r4, [r7, #15]
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fc fa40 	bl	80001f0 <strlen>
 8003d70:	4603      	mov	r3, r0
 8003d72:	429c      	cmp	r4, r3
 8003d74:	d3de      	bcc.n	8003d34 <str2upper+0x10>
	}
}
 8003d76:	bf00      	nop
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd90      	pop	{r4, r7, pc}
 8003d80:	080157ec 	.word	0x080157ec

08003d84 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003d88:	4b17      	ldr	r3, [pc, #92]	; (8003de8 <MX_SPI2_Init+0x64>)
 8003d8a:	4a18      	ldr	r2, [pc, #96]	; (8003dec <MX_SPI2_Init+0x68>)
 8003d8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d8e:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <MX_SPI2_Init+0x64>)
 8003d90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d96:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <MX_SPI2_Init+0x64>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d9c:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <MX_SPI2_Init+0x64>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003da2:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <MX_SPI2_Init+0x64>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003da8:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <MX_SPI2_Init+0x64>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003dae:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <MX_SPI2_Init+0x64>)
 8003db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003db4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <MX_SPI2_Init+0x64>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <MX_SPI2_Init+0x64>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <MX_SPI2_Init+0x64>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dc8:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <MX_SPI2_Init+0x64>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <MX_SPI2_Init+0x64>)
 8003dd0:	220a      	movs	r2, #10
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003dd4:	4804      	ldr	r0, [pc, #16]	; (8003de8 <MX_SPI2_Init+0x64>)
 8003dd6:	f004 ff7d 	bl	8008cd4 <HAL_SPI_Init>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003de0:	f7ff fc68 	bl	80036b4 <Error_Handler>
  }

}
 8003de4:	bf00      	nop
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	2000126c 	.word	0x2000126c
 8003dec:	40003800 	.word	0x40003800

08003df0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8003df4:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <MX_SPI4_Init+0x64>)
 8003df6:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <MX_SPI4_Init+0x68>)
 8003df8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003dfa:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <MX_SPI4_Init+0x64>)
 8003dfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e00:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003e02:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <MX_SPI4_Init+0x64>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e08:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <MX_SPI4_Init+0x64>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <MX_SPI4_Init+0x64>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e14:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <MX_SPI4_Init+0x64>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003e1a:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <MX_SPI4_Init+0x64>)
 8003e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e20:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003e22:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <MX_SPI4_Init+0x64>)
 8003e24:	2228      	movs	r2, #40	; 0x28
 8003e26:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e28:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <MX_SPI4_Init+0x64>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e2e:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <MX_SPI4_Init+0x64>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e34:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <MX_SPI4_Init+0x64>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <MX_SPI4_Init+0x64>)
 8003e3c:	220a      	movs	r2, #10
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003e40:	4804      	ldr	r0, [pc, #16]	; (8003e54 <MX_SPI4_Init+0x64>)
 8003e42:	f004 ff47 	bl	8008cd4 <HAL_SPI_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003e4c:	f7ff fc32 	bl	80036b4 <Error_Handler>
  }

}
 8003e50:	bf00      	nop
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000500 	.word	0x20000500
 8003e58:	40013400 	.word	0x40013400

08003e5c <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8003e60:	4b17      	ldr	r3, [pc, #92]	; (8003ec0 <MX_SPI5_Init+0x64>)
 8003e62:	4a18      	ldr	r2, [pc, #96]	; (8003ec4 <MX_SPI5_Init+0x68>)
 8003e64:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003e66:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <MX_SPI5_Init+0x64>)
 8003e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e6c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003e6e:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <MX_SPI5_Init+0x64>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e74:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <MX_SPI5_Init+0x64>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e7a:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <MX_SPI5_Init+0x64>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <MX_SPI5_Init+0x64>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <MX_SPI5_Init+0x64>)
 8003e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e8c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <MX_SPI5_Init+0x64>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <MX_SPI5_Init+0x64>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e9a:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <MX_SPI5_Init+0x64>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <MX_SPI5_Init+0x64>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <MX_SPI5_Init+0x64>)
 8003ea8:	220a      	movs	r2, #10
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003eac:	4804      	ldr	r0, [pc, #16]	; (8003ec0 <MX_SPI5_Init+0x64>)
 8003eae:	f004 ff11 	bl	8008cd4 <HAL_SPI_Init>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003eb8:	f7ff fbfc 	bl	80036b4 <Error_Handler>
  }

}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	200012c4 	.word	0x200012c4
 8003ec4:	40015000 	.word	0x40015000

08003ec8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08e      	sub	sp, #56	; 0x38
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
 8003eda:	609a      	str	r2, [r3, #8]
 8003edc:	60da      	str	r2, [r3, #12]
 8003ede:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a4c      	ldr	r2, [pc, #304]	; (8004018 <HAL_SPI_MspInit+0x150>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d12d      	bne.n	8003f46 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	623b      	str	r3, [r7, #32]
 8003eee:	4b4b      	ldr	r3, [pc, #300]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4a4a      	ldr	r2, [pc, #296]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8003efa:	4b48      	ldr	r3, [pc, #288]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	4b44      	ldr	r3, [pc, #272]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	4a43      	ldr	r2, [pc, #268]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003f10:	f043 0302 	orr.w	r3, r3, #2
 8003f14:	6313      	str	r3, [r2, #48]	; 0x30
 8003f16:	4b41      	ldr	r3, [pc, #260]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003f22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f30:	2303      	movs	r3, #3
 8003f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f34:	2305      	movs	r3, #5
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4838      	ldr	r0, [pc, #224]	; (8004020 <HAL_SPI_MspInit+0x158>)
 8003f40:	f002 fb3e 	bl	80065c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003f44:	e064      	b.n	8004010 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a36      	ldr	r2, [pc, #216]	; (8004024 <HAL_SPI_MspInit+0x15c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d12d      	bne.n	8003fac <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003f50:	2300      	movs	r3, #0
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	4b31      	ldr	r3, [pc, #196]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	4a30      	ldr	r2, [pc, #192]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003f5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f5e:	6453      	str	r3, [r2, #68]	; 0x44
 8003f60:	4b2e      	ldr	r3, [pc, #184]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	4b2a      	ldr	r3, [pc, #168]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	4a29      	ldr	r2, [pc, #164]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003f76:	f043 0310 	orr.w	r3, r3, #16
 8003f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7c:	4b27      	ldr	r3, [pc, #156]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003f88:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f96:	2303      	movs	r3, #3
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003f9a:	2305      	movs	r3, #5
 8003f9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4820      	ldr	r0, [pc, #128]	; (8004028 <HAL_SPI_MspInit+0x160>)
 8003fa6:	f002 fb0b 	bl	80065c0 <HAL_GPIO_Init>
}
 8003faa:	e031      	b.n	8004010 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1e      	ldr	r2, [pc, #120]	; (800402c <HAL_SPI_MspInit+0x164>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d12c      	bne.n	8004010 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	4b18      	ldr	r3, [pc, #96]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	4a17      	ldr	r2, [pc, #92]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fc6:	4b15      	ldr	r3, [pc, #84]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	4b11      	ldr	r3, [pc, #68]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	4a10      	ldr	r2, [pc, #64]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003fdc:	f043 0320 	orr.w	r3, r3, #32
 8003fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	; (800401c <HAL_SPI_MspInit+0x154>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003fee:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004000:	2305      	movs	r3, #5
 8004002:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004008:	4619      	mov	r1, r3
 800400a:	4809      	ldr	r0, [pc, #36]	; (8004030 <HAL_SPI_MspInit+0x168>)
 800400c:	f002 fad8 	bl	80065c0 <HAL_GPIO_Init>
}
 8004010:	bf00      	nop
 8004012:	3738      	adds	r7, #56	; 0x38
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40003800 	.word	0x40003800
 800401c:	40023800 	.word	0x40023800
 8004020:	40020400 	.word	0x40020400
 8004024:	40013400 	.word	0x40013400
 8004028:	40021000 	.word	0x40021000
 800402c:	40015000 	.word	0x40015000
 8004030:	40021400 	.word	0x40021400

08004034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <HAL_MspInit+0x4c>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	4a0f      	ldr	r2, [pc, #60]	; (8004080 <HAL_MspInit+0x4c>)
 8004044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004048:	6453      	str	r3, [r2, #68]	; 0x44
 800404a:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <HAL_MspInit+0x4c>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_MspInit+0x4c>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	4a08      	ldr	r2, [pc, #32]	; (8004080 <HAL_MspInit+0x4c>)
 8004060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004064:	6413      	str	r3, [r2, #64]	; 0x40
 8004066:	4b06      	ldr	r3, [pc, #24]	; (8004080 <HAL_MspInit+0x4c>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800

08004084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004096:	e7fe      	b.n	8004096 <HardFault_Handler+0x4>

08004098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800409c:	e7fe      	b.n	800409c <MemManage_Handler+0x4>

0800409e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040a2:	e7fe      	b.n	80040a2 <BusFault_Handler+0x4>

080040a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040a8:	e7fe      	b.n	80040a8 <UsageFault_Handler+0x4>

080040aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040c6:	b480      	push	{r7}
 80040c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040ca:	bf00      	nop
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040d8:	f001 f98e 	bl	80053f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040dc:	bf00      	nop
 80040de:	bd80      	pop	{r7, pc}

080040e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80040e4:	2001      	movs	r0, #1
 80040e6:	f002 fc49 	bl	800697c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80040f4:	4802      	ldr	r0, [pc, #8]	; (8004100 <DMA1_Stream1_IRQHandler+0x10>)
 80040f6:	f001 fff9 	bl	80060ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	200013fc 	.word	0x200013fc

08004104 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004108:	4802      	ldr	r0, [pc, #8]	; (8004114 <DMA1_Stream3_IRQHandler+0x10>)
 800410a:	f001 ffef 	bl	80060ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	2000149c 	.word	0x2000149c

08004118 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800411c:	4802      	ldr	r0, [pc, #8]	; (8004128 <TIM4_IRQHandler+0x10>)
 800411e:	f005 faef 	bl	8009700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	2000131c 	.word	0x2000131c

0800412c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004130:	4802      	ldr	r0, [pc, #8]	; (800413c <USART3_IRQHandler+0x10>)
 8004132:	f006 faaf 	bl	800a694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	2000145c 	.word	0x2000145c

08004140 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004144:	4802      	ldr	r0, [pc, #8]	; (8004150 <DMA2_Stream1_IRQHandler+0x10>)
 8004146:	f001 ffd1 	bl	80060ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	2000139c 	.word	0x2000139c

08004154 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004158:	4802      	ldr	r0, [pc, #8]	; (8004164 <USART6_IRQHandler+0x10>)
 800415a:	f006 fa9b 	bl	800a694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	2000153c 	.word	0x2000153c

08004168 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
	return 1;
 800416c:	2301      	movs	r3, #1
}
 800416e:	4618      	mov	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <_kill>:

int _kill(int pid, int sig)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004182:	f00a fbf7 	bl	800e974 <__errno>
 8004186:	4603      	mov	r3, r0
 8004188:	2216      	movs	r2, #22
 800418a:	601a      	str	r2, [r3, #0]
	return -1;
 800418c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <_exit>:

void _exit (int status)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041a0:	f04f 31ff 	mov.w	r1, #4294967295
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ffe7 	bl	8004178 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041aa:	e7fe      	b.n	80041aa <_exit+0x12>

080041ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	e00a      	b.n	80041d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041be:	f3af 8000 	nop.w
 80041c2:	4601      	mov	r1, r0
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	60ba      	str	r2, [r7, #8]
 80041ca:	b2ca      	uxtb	r2, r1
 80041cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	3301      	adds	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	dbf0      	blt.n	80041be <_read+0x12>
	}

return len;
 80041dc:	687b      	ldr	r3, [r7, #4]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b086      	sub	sp, #24
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	e009      	b.n	800420c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	60ba      	str	r2, [r7, #8]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	3301      	adds	r3, #1
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	dbf1      	blt.n	80041f8 <_write+0x12>
	}
	return len;
 8004214:	687b      	ldr	r3, [r7, #4]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <_close>:

int _close(int file)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
	return -1;
 8004226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004246:	605a      	str	r2, [r3, #4]
	return 0;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <_isatty>:

int _isatty(int file)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
	return 1;
 800425e:	2301      	movs	r3, #1
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
	return 0;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004290:	4a14      	ldr	r2, [pc, #80]	; (80042e4 <_sbrk+0x5c>)
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <_sbrk+0x60>)
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800429c:	4b13      	ldr	r3, [pc, #76]	; (80042ec <_sbrk+0x64>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042a4:	4b11      	ldr	r3, [pc, #68]	; (80042ec <_sbrk+0x64>)
 80042a6:	4a12      	ldr	r2, [pc, #72]	; (80042f0 <_sbrk+0x68>)
 80042a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042aa:	4b10      	ldr	r3, [pc, #64]	; (80042ec <_sbrk+0x64>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d207      	bcs.n	80042c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042b8:	f00a fb5c 	bl	800e974 <__errno>
 80042bc:	4603      	mov	r3, r0
 80042be:	220c      	movs	r2, #12
 80042c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042c2:	f04f 33ff 	mov.w	r3, #4294967295
 80042c6:	e009      	b.n	80042dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042c8:	4b08      	ldr	r3, [pc, #32]	; (80042ec <_sbrk+0x64>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042ce:	4b07      	ldr	r3, [pc, #28]	; (80042ec <_sbrk+0x64>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4413      	add	r3, r2
 80042d6:	4a05      	ldr	r2, [pc, #20]	; (80042ec <_sbrk+0x64>)
 80042d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042da:	68fb      	ldr	r3, [r7, #12]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20030000 	.word	0x20030000
 80042e8:	00000400 	.word	0x00000400
 80042ec:	200004b8 	.word	0x200004b8
 80042f0:	20001a28 	.word	0x20001a28

080042f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042f8:	4b08      	ldr	r3, [pc, #32]	; (800431c <SystemInit+0x28>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	4a07      	ldr	r2, [pc, #28]	; (800431c <SystemInit+0x28>)
 8004300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004308:	4b04      	ldr	r3, [pc, #16]	; (800431c <SystemInit+0x28>)
 800430a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800430e:	609a      	str	r2, [r3, #8]
#endif
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08e      	sub	sp, #56	; 0x38
 8004324:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	609a      	str	r2, [r3, #8]
 8004332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004334:	f107 0320 	add.w	r3, r7, #32
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800433e:	1d3b      	adds	r3, r7, #4
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	60da      	str	r2, [r3, #12]
 800434a:	611a      	str	r2, [r3, #16]
 800434c:	615a      	str	r2, [r3, #20]
 800434e:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8004350:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <MX_TIM2_Init+0xe8>)
 8004352:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004356:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8004358:	4b2b      	ldr	r3, [pc, #172]	; (8004408 <MX_TIM2_Init+0xe8>)
 800435a:	2259      	movs	r2, #89	; 0x59
 800435c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800435e:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <MX_TIM2_Init+0xe8>)
 8004360:	2200      	movs	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8004364:	4b28      	ldr	r3, [pc, #160]	; (8004408 <MX_TIM2_Init+0xe8>)
 8004366:	f240 128f 	movw	r2, #399	; 0x18f
 800436a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800436c:	4b26      	ldr	r3, [pc, #152]	; (8004408 <MX_TIM2_Init+0xe8>)
 800436e:	2200      	movs	r2, #0
 8004370:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004372:	4b25      	ldr	r3, [pc, #148]	; (8004408 <MX_TIM2_Init+0xe8>)
 8004374:	2200      	movs	r2, #0
 8004376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004378:	4823      	ldr	r0, [pc, #140]	; (8004408 <MX_TIM2_Init+0xe8>)
 800437a:	f005 f8cb 	bl	8009514 <HAL_TIM_Base_Init>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004384:	f7ff f996 	bl	80036b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800438c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800438e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004392:	4619      	mov	r1, r3
 8004394:	481c      	ldr	r0, [pc, #112]	; (8004408 <MX_TIM2_Init+0xe8>)
 8004396:	f005 fb81 	bl	8009a9c <HAL_TIM_ConfigClockSource>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80043a0:	f7ff f988 	bl	80036b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80043a4:	4818      	ldr	r0, [pc, #96]	; (8004408 <MX_TIM2_Init+0xe8>)
 80043a6:	f005 f8e0 	bl	800956a <HAL_TIM_PWM_Init>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80043b0:	f7ff f980 	bl	80036b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80043b4:	2320      	movs	r3, #32
 80043b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80043bc:	f107 0320 	add.w	r3, r7, #32
 80043c0:	4619      	mov	r1, r3
 80043c2:	4811      	ldr	r0, [pc, #68]	; (8004408 <MX_TIM2_Init+0xe8>)
 80043c4:	f005 ff70 	bl	800a2a8 <HAL_TIMEx_MasterConfigSynchronization>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80043ce:	f7ff f971 	bl	80036b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043d2:	2360      	movs	r3, #96	; 0x60
 80043d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80043d6:	2364      	movs	r3, #100	; 0x64
 80043d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80043e2:	1d3b      	adds	r3, r7, #4
 80043e4:	2208      	movs	r2, #8
 80043e6:	4619      	mov	r1, r3
 80043e8:	4807      	ldr	r0, [pc, #28]	; (8004408 <MX_TIM2_Init+0xe8>)
 80043ea:	f005 fa91 	bl	8009910 <HAL_TIM_PWM_ConfigChannel>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80043f4:	f7ff f95e 	bl	80036b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80043f8:	4803      	ldr	r0, [pc, #12]	; (8004408 <MX_TIM2_Init+0xe8>)
 80043fa:	f000 f891 	bl	8004520 <HAL_TIM_MspPostInit>

}
 80043fe:	bf00      	nop
 8004400:	3738      	adds	r7, #56	; 0x38
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	2000135c 	.word	0x2000135c

0800440c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004412:	f107 0308 	add.w	r3, r7, #8
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	609a      	str	r2, [r3, #8]
 800441e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004420:	463b      	mov	r3, r7
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8004428:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <MX_TIM4_Init+0x94>)
 800442a:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <MX_TIM4_Init+0x98>)
 800442c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000-1;
 800442e:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <MX_TIM4_Init+0x94>)
 8004430:	f242 3227 	movw	r2, #8999	; 0x2327
 8004434:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004436:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <MX_TIM4_Init+0x94>)
 8004438:	2200      	movs	r2, #0
 800443a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800443c:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <MX_TIM4_Init+0x94>)
 800443e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004442:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004444:	4b16      	ldr	r3, [pc, #88]	; (80044a0 <MX_TIM4_Init+0x94>)
 8004446:	2200      	movs	r2, #0
 8004448:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800444a:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <MX_TIM4_Init+0x94>)
 800444c:	2200      	movs	r2, #0
 800444e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004450:	4813      	ldr	r0, [pc, #76]	; (80044a0 <MX_TIM4_Init+0x94>)
 8004452:	f005 f85f 	bl	8009514 <HAL_TIM_Base_Init>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800445c:	f7ff f92a 	bl	80036b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004464:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004466:	f107 0308 	add.w	r3, r7, #8
 800446a:	4619      	mov	r1, r3
 800446c:	480c      	ldr	r0, [pc, #48]	; (80044a0 <MX_TIM4_Init+0x94>)
 800446e:	f005 fb15 	bl	8009a9c <HAL_TIM_ConfigClockSource>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004478:	f7ff f91c 	bl	80036b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800447c:	2320      	movs	r3, #32
 800447e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004480:	2300      	movs	r3, #0
 8004482:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004484:	463b      	mov	r3, r7
 8004486:	4619      	mov	r1, r3
 8004488:	4805      	ldr	r0, [pc, #20]	; (80044a0 <MX_TIM4_Init+0x94>)
 800448a:	f005 ff0d 	bl	800a2a8 <HAL_TIMEx_MasterConfigSynchronization>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004494:	f7ff f90e 	bl	80036b4 <Error_Handler>
  }

}
 8004498:	bf00      	nop
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	2000131c 	.word	0x2000131c
 80044a4:	40000800 	.word	0x40000800

080044a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	4b16      	ldr	r3, [pc, #88]	; (8004518 <HAL_TIM_Base_MspInit+0x70>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	4a15      	ldr	r2, [pc, #84]	; (8004518 <HAL_TIM_Base_MspInit+0x70>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ca:	4b13      	ldr	r3, [pc, #76]	; (8004518 <HAL_TIM_Base_MspInit+0x70>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80044d6:	e01a      	b.n	800450e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a0f      	ldr	r2, [pc, #60]	; (800451c <HAL_TIM_Base_MspInit+0x74>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d115      	bne.n	800450e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <HAL_TIM_Base_MspInit+0x70>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	4a0b      	ldr	r2, [pc, #44]	; (8004518 <HAL_TIM_Base_MspInit+0x70>)
 80044ec:	f043 0304 	orr.w	r3, r3, #4
 80044f0:	6413      	str	r3, [r2, #64]	; 0x40
 80044f2:	4b09      	ldr	r3, [pc, #36]	; (8004518 <HAL_TIM_Base_MspInit+0x70>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80044fe:	2200      	movs	r2, #0
 8004500:	2100      	movs	r1, #0
 8004502:	201e      	movs	r0, #30
 8004504:	f001 fc93 	bl	8005e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004508:	201e      	movs	r0, #30
 800450a:	f001 fcac 	bl	8005e66 <HAL_NVIC_EnableIRQ>
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800
 800451c:	40000800 	.word	0x40000800

08004520 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004528:	f107 030c 	add.w	r3, r7, #12
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004540:	d11d      	bne.n	800457e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	4b10      	ldr	r3, [pc, #64]	; (8004588 <HAL_TIM_MspPostInit+0x68>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	4a0f      	ldr	r2, [pc, #60]	; (8004588 <HAL_TIM_MspPostInit+0x68>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	6313      	str	r3, [r2, #48]	; 0x30
 8004552:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <HAL_TIM_MspPostInit+0x68>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800455e:	2304      	movs	r3, #4
 8004560:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004562:	2302      	movs	r3, #2
 8004564:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800456e:	2301      	movs	r3, #1
 8004570:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8004572:	f107 030c 	add.w	r3, r7, #12
 8004576:	4619      	mov	r1, r3
 8004578:	4804      	ldr	r0, [pc, #16]	; (800458c <HAL_TIM_MspPostInit+0x6c>)
 800457a:	f002 f821 	bl	80065c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800457e:	bf00      	nop
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800
 800458c:	40020000 	.word	0x40020000

08004590 <MX_UART8_Init>:
DMA_HandleTypeDef hdma_usart3_tx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8004594:	4b11      	ldr	r3, [pc, #68]	; (80045dc <MX_UART8_Init+0x4c>)
 8004596:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <MX_UART8_Init+0x50>)
 8004598:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 800459a:	4b10      	ldr	r3, [pc, #64]	; (80045dc <MX_UART8_Init+0x4c>)
 800459c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80045a0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80045a2:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <MX_UART8_Init+0x4c>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <MX_UART8_Init+0x4c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <MX_UART8_Init+0x4c>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <MX_UART8_Init+0x4c>)
 80045b6:	220c      	movs	r2, #12
 80045b8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ba:	4b08      	ldr	r3, [pc, #32]	; (80045dc <MX_UART8_Init+0x4c>)
 80045bc:	2200      	movs	r2, #0
 80045be:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <MX_UART8_Init+0x4c>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80045c6:	4805      	ldr	r0, [pc, #20]	; (80045dc <MX_UART8_Init+0x4c>)
 80045c8:	f005 fefe 	bl	800a3c8 <HAL_UART_Init>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80045d2:	f7ff f86f 	bl	80036b4 <Error_Handler>
  }

}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200014fc 	.word	0x200014fc
 80045e0:	40007c00 	.word	0x40007c00

080045e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80045e8:	4b11      	ldr	r3, [pc, #68]	; (8004630 <MX_USART3_UART_Init+0x4c>)
 80045ea:	4a12      	ldr	r2, [pc, #72]	; (8004634 <MX_USART3_UART_Init+0x50>)
 80045ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80045ee:	4b10      	ldr	r3, [pc, #64]	; (8004630 <MX_USART3_UART_Init+0x4c>)
 80045f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80045f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80045f6:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <MX_USART3_UART_Init+0x4c>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <MX_USART3_UART_Init+0x4c>)
 80045fe:	2200      	movs	r2, #0
 8004600:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <MX_USART3_UART_Init+0x4c>)
 8004604:	2200      	movs	r2, #0
 8004606:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004608:	4b09      	ldr	r3, [pc, #36]	; (8004630 <MX_USART3_UART_Init+0x4c>)
 800460a:	220c      	movs	r2, #12
 800460c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800460e:	4b08      	ldr	r3, [pc, #32]	; (8004630 <MX_USART3_UART_Init+0x4c>)
 8004610:	2200      	movs	r2, #0
 8004612:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <MX_USART3_UART_Init+0x4c>)
 8004616:	2200      	movs	r2, #0
 8004618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800461a:	4805      	ldr	r0, [pc, #20]	; (8004630 <MX_USART3_UART_Init+0x4c>)
 800461c:	f005 fed4 	bl	800a3c8 <HAL_UART_Init>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004626:	f7ff f845 	bl	80036b4 <Error_Handler>
  }

}
 800462a:	bf00      	nop
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	2000145c 	.word	0x2000145c
 8004634:	40004800 	.word	0x40004800

08004638 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800463c:	4b11      	ldr	r3, [pc, #68]	; (8004684 <MX_USART6_UART_Init+0x4c>)
 800463e:	4a12      	ldr	r2, [pc, #72]	; (8004688 <MX_USART6_UART_Init+0x50>)
 8004640:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004642:	4b10      	ldr	r3, [pc, #64]	; (8004684 <MX_USART6_UART_Init+0x4c>)
 8004644:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004648:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800464a:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <MX_USART6_UART_Init+0x4c>)
 800464c:	2200      	movs	r2, #0
 800464e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <MX_USART6_UART_Init+0x4c>)
 8004652:	2200      	movs	r2, #0
 8004654:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <MX_USART6_UART_Init+0x4c>)
 8004658:	2200      	movs	r2, #0
 800465a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <MX_USART6_UART_Init+0x4c>)
 800465e:	220c      	movs	r2, #12
 8004660:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <MX_USART6_UART_Init+0x4c>)
 8004664:	2200      	movs	r2, #0
 8004666:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <MX_USART6_UART_Init+0x4c>)
 800466a:	2200      	movs	r2, #0
 800466c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800466e:	4805      	ldr	r0, [pc, #20]	; (8004684 <MX_USART6_UART_Init+0x4c>)
 8004670:	f005 feaa 	bl	800a3c8 <HAL_UART_Init>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800467a:	f7ff f81b 	bl	80036b4 <Error_Handler>
  }

}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	2000153c 	.word	0x2000153c
 8004688:	40011400 	.word	0x40011400

0800468c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08e      	sub	sp, #56	; 0x38
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	60da      	str	r2, [r3, #12]
 80046a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a9a      	ldr	r2, [pc, #616]	; (8004914 <HAL_UART_MspInit+0x288>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d12c      	bne.n	8004708 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	623b      	str	r3, [r7, #32]
 80046b2:	4b99      	ldr	r3, [pc, #612]	; (8004918 <HAL_UART_MspInit+0x28c>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	4a98      	ldr	r2, [pc, #608]	; (8004918 <HAL_UART_MspInit+0x28c>)
 80046b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046bc:	6413      	str	r3, [r2, #64]	; 0x40
 80046be:	4b96      	ldr	r3, [pc, #600]	; (8004918 <HAL_UART_MspInit+0x28c>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046c6:	623b      	str	r3, [r7, #32]
 80046c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80046ca:	2300      	movs	r3, #0
 80046cc:	61fb      	str	r3, [r7, #28]
 80046ce:	4b92      	ldr	r3, [pc, #584]	; (8004918 <HAL_UART_MspInit+0x28c>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	4a91      	ldr	r2, [pc, #580]	; (8004918 <HAL_UART_MspInit+0x28c>)
 80046d4:	f043 0310 	orr.w	r3, r3, #16
 80046d8:	6313      	str	r3, [r2, #48]	; 0x30
 80046da:	4b8f      	ldr	r3, [pc, #572]	; (8004918 <HAL_UART_MspInit+0x28c>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 80046e6:	2303      	movs	r3, #3
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ea:	2302      	movs	r3, #2
 80046ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046ee:	2301      	movs	r3, #1
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f2:	2303      	movs	r3, #3
 80046f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80046f6:	2308      	movs	r3, #8
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046fe:	4619      	mov	r1, r3
 8004700:	4886      	ldr	r0, [pc, #536]	; (800491c <HAL_UART_MspInit+0x290>)
 8004702:	f001 ff5d 	bl	80065c0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004706:	e101      	b.n	800490c <HAL_UART_MspInit+0x280>
  else if(uartHandle->Instance==USART3)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a84      	ldr	r2, [pc, #528]	; (8004920 <HAL_UART_MspInit+0x294>)
 800470e:	4293      	cmp	r3, r2
 8004710:	f040 8094 	bne.w	800483c <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004714:	2300      	movs	r3, #0
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	4b7f      	ldr	r3, [pc, #508]	; (8004918 <HAL_UART_MspInit+0x28c>)
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	4a7e      	ldr	r2, [pc, #504]	; (8004918 <HAL_UART_MspInit+0x28c>)
 800471e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004722:	6413      	str	r3, [r2, #64]	; 0x40
 8004724:	4b7c      	ldr	r3, [pc, #496]	; (8004918 <HAL_UART_MspInit+0x28c>)
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	4b78      	ldr	r3, [pc, #480]	; (8004918 <HAL_UART_MspInit+0x28c>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	4a77      	ldr	r2, [pc, #476]	; (8004918 <HAL_UART_MspInit+0x28c>)
 800473a:	f043 0308 	orr.w	r3, r3, #8
 800473e:	6313      	str	r3, [r2, #48]	; 0x30
 8004740:	4b75      	ldr	r3, [pc, #468]	; (8004918 <HAL_UART_MspInit+0x28c>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 800474c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004752:	2302      	movs	r3, #2
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004756:	2300      	movs	r3, #0
 8004758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800475a:	2303      	movs	r3, #3
 800475c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800475e:	2307      	movs	r3, #7
 8004760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004766:	4619      	mov	r1, r3
 8004768:	486e      	ldr	r0, [pc, #440]	; (8004924 <HAL_UART_MspInit+0x298>)
 800476a:	f001 ff29 	bl	80065c0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800476e:	4b6e      	ldr	r3, [pc, #440]	; (8004928 <HAL_UART_MspInit+0x29c>)
 8004770:	4a6e      	ldr	r2, [pc, #440]	; (800492c <HAL_UART_MspInit+0x2a0>)
 8004772:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004774:	4b6c      	ldr	r3, [pc, #432]	; (8004928 <HAL_UART_MspInit+0x29c>)
 8004776:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800477a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800477c:	4b6a      	ldr	r3, [pc, #424]	; (8004928 <HAL_UART_MspInit+0x29c>)
 800477e:	2200      	movs	r2, #0
 8004780:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004782:	4b69      	ldr	r3, [pc, #420]	; (8004928 <HAL_UART_MspInit+0x29c>)
 8004784:	2200      	movs	r2, #0
 8004786:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004788:	4b67      	ldr	r3, [pc, #412]	; (8004928 <HAL_UART_MspInit+0x29c>)
 800478a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800478e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004790:	4b65      	ldr	r3, [pc, #404]	; (8004928 <HAL_UART_MspInit+0x29c>)
 8004792:	2200      	movs	r2, #0
 8004794:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004796:	4b64      	ldr	r3, [pc, #400]	; (8004928 <HAL_UART_MspInit+0x29c>)
 8004798:	2200      	movs	r2, #0
 800479a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800479c:	4b62      	ldr	r3, [pc, #392]	; (8004928 <HAL_UART_MspInit+0x29c>)
 800479e:	2200      	movs	r2, #0
 80047a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80047a2:	4b61      	ldr	r3, [pc, #388]	; (8004928 <HAL_UART_MspInit+0x29c>)
 80047a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80047a8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047aa:	4b5f      	ldr	r3, [pc, #380]	; (8004928 <HAL_UART_MspInit+0x29c>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80047b0:	485d      	ldr	r0, [pc, #372]	; (8004928 <HAL_UART_MspInit+0x29c>)
 80047b2:	f001 fb73 	bl	8005e9c <HAL_DMA_Init>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_UART_MspInit+0x134>
      Error_Handler();
 80047bc:	f7fe ff7a 	bl	80036b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a59      	ldr	r2, [pc, #356]	; (8004928 <HAL_UART_MspInit+0x29c>)
 80047c4:	635a      	str	r2, [r3, #52]	; 0x34
 80047c6:	4a58      	ldr	r2, [pc, #352]	; (8004928 <HAL_UART_MspInit+0x29c>)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80047cc:	4b58      	ldr	r3, [pc, #352]	; (8004930 <HAL_UART_MspInit+0x2a4>)
 80047ce:	4a59      	ldr	r2, [pc, #356]	; (8004934 <HAL_UART_MspInit+0x2a8>)
 80047d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80047d2:	4b57      	ldr	r3, [pc, #348]	; (8004930 <HAL_UART_MspInit+0x2a4>)
 80047d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047d8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047da:	4b55      	ldr	r3, [pc, #340]	; (8004930 <HAL_UART_MspInit+0x2a4>)
 80047dc:	2240      	movs	r2, #64	; 0x40
 80047de:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047e0:	4b53      	ldr	r3, [pc, #332]	; (8004930 <HAL_UART_MspInit+0x2a4>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047e6:	4b52      	ldr	r3, [pc, #328]	; (8004930 <HAL_UART_MspInit+0x2a4>)
 80047e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047ee:	4b50      	ldr	r3, [pc, #320]	; (8004930 <HAL_UART_MspInit+0x2a4>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047f4:	4b4e      	ldr	r3, [pc, #312]	; (8004930 <HAL_UART_MspInit+0x2a4>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80047fa:	4b4d      	ldr	r3, [pc, #308]	; (8004930 <HAL_UART_MspInit+0x2a4>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004800:	4b4b      	ldr	r3, [pc, #300]	; (8004930 <HAL_UART_MspInit+0x2a4>)
 8004802:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004806:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004808:	4b49      	ldr	r3, [pc, #292]	; (8004930 <HAL_UART_MspInit+0x2a4>)
 800480a:	2200      	movs	r2, #0
 800480c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800480e:	4848      	ldr	r0, [pc, #288]	; (8004930 <HAL_UART_MspInit+0x2a4>)
 8004810:	f001 fb44 	bl	8005e9c <HAL_DMA_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_UART_MspInit+0x192>
      Error_Handler();
 800481a:	f7fe ff4b 	bl	80036b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a43      	ldr	r2, [pc, #268]	; (8004930 <HAL_UART_MspInit+0x2a4>)
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
 8004824:	4a42      	ldr	r2, [pc, #264]	; (8004930 <HAL_UART_MspInit+0x2a4>)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800482a:	2200      	movs	r2, #0
 800482c:	2100      	movs	r1, #0
 800482e:	2027      	movs	r0, #39	; 0x27
 8004830:	f001 fafd 	bl	8005e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004834:	2027      	movs	r0, #39	; 0x27
 8004836:	f001 fb16 	bl	8005e66 <HAL_NVIC_EnableIRQ>
}
 800483a:	e067      	b.n	800490c <HAL_UART_MspInit+0x280>
  else if(uartHandle->Instance==USART6)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a3d      	ldr	r2, [pc, #244]	; (8004938 <HAL_UART_MspInit+0x2ac>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d162      	bne.n	800490c <HAL_UART_MspInit+0x280>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	4b33      	ldr	r3, [pc, #204]	; (8004918 <HAL_UART_MspInit+0x28c>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	4a32      	ldr	r2, [pc, #200]	; (8004918 <HAL_UART_MspInit+0x28c>)
 8004850:	f043 0320 	orr.w	r3, r3, #32
 8004854:	6453      	str	r3, [r2, #68]	; 0x44
 8004856:	4b30      	ldr	r3, [pc, #192]	; (8004918 <HAL_UART_MspInit+0x28c>)
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	4b2c      	ldr	r3, [pc, #176]	; (8004918 <HAL_UART_MspInit+0x28c>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	4a2b      	ldr	r2, [pc, #172]	; (8004918 <HAL_UART_MspInit+0x28c>)
 800486c:	f043 0304 	orr.w	r3, r3, #4
 8004870:	6313      	str	r3, [r2, #48]	; 0x30
 8004872:	4b29      	ldr	r3, [pc, #164]	; (8004918 <HAL_UART_MspInit+0x28c>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 800487e:	23c0      	movs	r3, #192	; 0xc0
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004882:	2302      	movs	r3, #2
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	2300      	movs	r3, #0
 8004888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800488a:	2303      	movs	r3, #3
 800488c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800488e:	2308      	movs	r3, #8
 8004890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004896:	4619      	mov	r1, r3
 8004898:	4828      	ldr	r0, [pc, #160]	; (800493c <HAL_UART_MspInit+0x2b0>)
 800489a:	f001 fe91 	bl	80065c0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800489e:	4b28      	ldr	r3, [pc, #160]	; (8004940 <HAL_UART_MspInit+0x2b4>)
 80048a0:	4a28      	ldr	r2, [pc, #160]	; (8004944 <HAL_UART_MspInit+0x2b8>)
 80048a2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80048a4:	4b26      	ldr	r3, [pc, #152]	; (8004940 <HAL_UART_MspInit+0x2b4>)
 80048a6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80048aa:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048ac:	4b24      	ldr	r3, [pc, #144]	; (8004940 <HAL_UART_MspInit+0x2b4>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048b2:	4b23      	ldr	r3, [pc, #140]	; (8004940 <HAL_UART_MspInit+0x2b4>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048b8:	4b21      	ldr	r3, [pc, #132]	; (8004940 <HAL_UART_MspInit+0x2b4>)
 80048ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048be:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048c0:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <HAL_UART_MspInit+0x2b4>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048c6:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <HAL_UART_MspInit+0x2b4>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80048cc:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <HAL_UART_MspInit+0x2b4>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80048d2:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <HAL_UART_MspInit+0x2b4>)
 80048d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80048d8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048da:	4b19      	ldr	r3, [pc, #100]	; (8004940 <HAL_UART_MspInit+0x2b4>)
 80048dc:	2200      	movs	r2, #0
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80048e0:	4817      	ldr	r0, [pc, #92]	; (8004940 <HAL_UART_MspInit+0x2b4>)
 80048e2:	f001 fadb 	bl	8005e9c <HAL_DMA_Init>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_UART_MspInit+0x264>
      Error_Handler();
 80048ec:	f7fe fee2 	bl	80036b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a13      	ldr	r2, [pc, #76]	; (8004940 <HAL_UART_MspInit+0x2b4>)
 80048f4:	635a      	str	r2, [r3, #52]	; 0x34
 80048f6:	4a12      	ldr	r2, [pc, #72]	; (8004940 <HAL_UART_MspInit+0x2b4>)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80048fc:	2200      	movs	r2, #0
 80048fe:	2100      	movs	r1, #0
 8004900:	2047      	movs	r0, #71	; 0x47
 8004902:	f001 fa94 	bl	8005e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004906:	2047      	movs	r0, #71	; 0x47
 8004908:	f001 faad 	bl	8005e66 <HAL_NVIC_EnableIRQ>
}
 800490c:	bf00      	nop
 800490e:	3738      	adds	r7, #56	; 0x38
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40007c00 	.word	0x40007c00
 8004918:	40023800 	.word	0x40023800
 800491c:	40021000 	.word	0x40021000
 8004920:	40004800 	.word	0x40004800
 8004924:	40020c00 	.word	0x40020c00
 8004928:	200013fc 	.word	0x200013fc
 800492c:	40026028 	.word	0x40026028
 8004930:	2000149c 	.word	0x2000149c
 8004934:	40026058 	.word	0x40026058
 8004938:	40011400 	.word	0x40011400
 800493c:	40020800 	.word	0x40020800
 8004940:	2000139c 	.word	0x2000139c
 8004944:	40026428 	.word	0x40026428

08004948 <VR_Stop_Rec>:
	HAL_Delay(400);
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);

}

void VR_Stop_Rec() {
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
 800494c:	2201      	movs	r2, #1
 800494e:	2180      	movs	r1, #128	; 0x80
 8004950:	4806      	ldr	r0, [pc, #24]	; (800496c <VR_Stop_Rec+0x24>)
 8004952:	f001 fff9 	bl	8006948 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8004956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800495a:	f000 fd6d 	bl	8005438 <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 800495e:	2200      	movs	r2, #0
 8004960:	2180      	movs	r1, #128	; 0x80
 8004962:	4802      	ldr	r0, [pc, #8]	; (800496c <VR_Stop_Rec+0x24>)
 8004964:	f001 fff0 	bl	8006948 <HAL_GPIO_WritePin>
}
 8004968:	bf00      	nop
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40020c00 	.word	0x40020c00

08004970 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af02      	add	r7, sp, #8
 8004976:	4603      	mov	r3, r0
 8004978:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800497a:	f107 020f 	add.w	r2, r7, #15
 800497e:	1df9      	adds	r1, r7, #7
 8004980:	2364      	movs	r3, #100	; 0x64
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	2301      	movs	r3, #1
 8004986:	4804      	ldr	r0, [pc, #16]	; (8004998 <W25qxx_Spi+0x28>)
 8004988:	f004 fb11 	bl	8008fae <HAL_SPI_TransmitReceive>
	return ret;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	200012c4 	.word	0x200012c4

0800499c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	2300      	movs	r3, #0
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	2300      	movs	r3, #0
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	2300      	movs	r3, #0
 80049b0:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80049b2:	2200      	movs	r2, #0
 80049b4:	2140      	movs	r1, #64	; 0x40
 80049b6:	4813      	ldr	r0, [pc, #76]	; (8004a04 <W25qxx_ReadID+0x68>)
 80049b8:	f001 ffc6 	bl	8006948 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80049bc:	209f      	movs	r0, #159	; 0x9f
 80049be:	f7ff ffd7 	bl	8004970 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80049c2:	20a5      	movs	r0, #165	; 0xa5
 80049c4:	f7ff ffd4 	bl	8004970 <W25qxx_Spi>
 80049c8:	4603      	mov	r3, r0
 80049ca:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80049cc:	20a5      	movs	r0, #165	; 0xa5
 80049ce:	f7ff ffcf 	bl	8004970 <W25qxx_Spi>
 80049d2:	4603      	mov	r3, r0
 80049d4:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80049d6:	20a5      	movs	r0, #165	; 0xa5
 80049d8:	f7ff ffca 	bl	8004970 <W25qxx_Spi>
 80049dc:	4603      	mov	r3, r0
 80049de:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80049e0:	2201      	movs	r2, #1
 80049e2:	2140      	movs	r1, #64	; 0x40
 80049e4:	4807      	ldr	r0, [pc, #28]	; (8004a04 <W25qxx_ReadID+0x68>)
 80049e6:	f001 ffaf 	bl	8006948 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	041a      	lsls	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	4313      	orrs	r3, r2
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
	return Temp;
 80049fa:	68fb      	ldr	r3, [r7, #12]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40020c00 	.word	0x40020c00

08004a08 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2140      	movs	r1, #64	; 0x40
 8004a12:	4816      	ldr	r0, [pc, #88]	; (8004a6c <W25qxx_ReadUniqID+0x64>)
 8004a14:	f001 ff98 	bl	8006948 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004a18:	204b      	movs	r0, #75	; 0x4b
 8004a1a:	f7ff ffa9 	bl	8004970 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	71fb      	strb	r3, [r7, #7]
 8004a22:	e005      	b.n	8004a30 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a24:	20a5      	movs	r0, #165	; 0xa5
 8004a26:	f7ff ffa3 	bl	8004970 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	71fb      	strb	r3, [r7, #7]
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d9f6      	bls.n	8004a24 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8004a36:	2300      	movs	r3, #0
 8004a38:	71bb      	strb	r3, [r7, #6]
 8004a3a:	e00b      	b.n	8004a54 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a3c:	79bc      	ldrb	r4, [r7, #6]
 8004a3e:	20a5      	movs	r0, #165	; 0xa5
 8004a40:	f7ff ff96 	bl	8004970 <W25qxx_Spi>
 8004a44:	4603      	mov	r3, r0
 8004a46:	461a      	mov	r2, r3
 8004a48:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <W25qxx_ReadUniqID+0x68>)
 8004a4a:	4423      	add	r3, r4
 8004a4c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8004a4e:	79bb      	ldrb	r3, [r7, #6]
 8004a50:	3301      	adds	r3, #1
 8004a52:	71bb      	strb	r3, [r7, #6]
 8004a54:	79bb      	ldrb	r3, [r7, #6]
 8004a56:	2b07      	cmp	r3, #7
 8004a58:	d9f0      	bls.n	8004a3c <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	2140      	movs	r1, #64	; 0x40
 8004a5e:	4803      	ldr	r0, [pc, #12]	; (8004a6c <W25qxx_ReadUniqID+0x64>)
 8004a60:	f001 ff72 	bl	8006948 <HAL_GPIO_WritePin>
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd90      	pop	{r4, r7, pc}
 8004a6c:	40020c00 	.word	0x40020c00
 8004a70:	2000157c 	.word	0x2000157c

08004a74 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2140      	movs	r1, #64	; 0x40
 8004a7c:	4807      	ldr	r0, [pc, #28]	; (8004a9c <W25qxx_WriteEnable+0x28>)
 8004a7e:	f001 ff63 	bl	8006948 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8004a82:	2006      	movs	r0, #6
 8004a84:	f7ff ff74 	bl	8004970 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a88:	2201      	movs	r2, #1
 8004a8a:	2140      	movs	r1, #64	; 0x40
 8004a8c:	4803      	ldr	r0, [pc, #12]	; (8004a9c <W25qxx_WriteEnable+0x28>)
 8004a8e:	f001 ff5b 	bl	8006948 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8004a92:	2001      	movs	r0, #1
 8004a94:	f000 fcd0 	bl	8005438 <HAL_Delay>
}
 8004a98:	bf00      	nop
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40020c00 	.word	0x40020c00

08004aa0 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2140      	movs	r1, #64	; 0x40
 8004ab2:	481c      	ldr	r0, [pc, #112]	; (8004b24 <W25qxx_ReadStatusRegister+0x84>)
 8004ab4:	f001 ff48 	bl	8006948 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d10c      	bne.n	8004ad8 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004abe:	2005      	movs	r0, #5
 8004ac0:	f7ff ff56 	bl	8004970 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004ac4:	20a5      	movs	r0, #165	; 0xa5
 8004ac6:	f7ff ff53 	bl	8004970 <W25qxx_Spi>
 8004aca:	4603      	mov	r3, r0
 8004acc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8004ace:	4a16      	ldr	r2, [pc, #88]	; (8004b28 <W25qxx_ReadStatusRegister+0x88>)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004ad6:	e01b      	b.n	8004b10 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d10c      	bne.n	8004af8 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8004ade:	2035      	movs	r0, #53	; 0x35
 8004ae0:	f7ff ff46 	bl	8004970 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004ae4:	20a5      	movs	r0, #165	; 0xa5
 8004ae6:	f7ff ff43 	bl	8004970 <W25qxx_Spi>
 8004aea:	4603      	mov	r3, r0
 8004aec:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004aee:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <W25qxx_ReadStatusRegister+0x88>)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004af6:	e00b      	b.n	8004b10 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004af8:	2015      	movs	r0, #21
 8004afa:	f7ff ff39 	bl	8004970 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004afe:	20a5      	movs	r0, #165	; 0xa5
 8004b00:	f7ff ff36 	bl	8004970 <W25qxx_Spi>
 8004b04:	4603      	mov	r3, r0
 8004b06:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004b08:	4a07      	ldr	r2, [pc, #28]	; (8004b28 <W25qxx_ReadStatusRegister+0x88>)
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004b10:	2201      	movs	r2, #1
 8004b12:	2140      	movs	r1, #64	; 0x40
 8004b14:	4803      	ldr	r0, [pc, #12]	; (8004b24 <W25qxx_ReadStatusRegister+0x84>)
 8004b16:	f001 ff17 	bl	8006948 <HAL_GPIO_WritePin>
	return status;
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40020c00 	.word	0x40020c00
 8004b28:	2000157c 	.word	0x2000157c

08004b2c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004b30:	2001      	movs	r0, #1
 8004b32:	f000 fc81 	bl	8005438 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004b36:	2200      	movs	r2, #0
 8004b38:	2140      	movs	r1, #64	; 0x40
 8004b3a:	480f      	ldr	r0, [pc, #60]	; (8004b78 <W25qxx_WaitForWriteEnd+0x4c>)
 8004b3c:	f001 ff04 	bl	8006948 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004b40:	2005      	movs	r0, #5
 8004b42:	f7ff ff15 	bl	8004970 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004b46:	20a5      	movs	r0, #165	; 0xa5
 8004b48:	f7ff ff12 	bl	8004970 <W25qxx_Spi>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <W25qxx_WaitForWriteEnd+0x50>)
 8004b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8004b56:	2001      	movs	r0, #1
 8004b58:	f000 fc6e 	bl	8005438 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004b5c:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <W25qxx_WaitForWriteEnd+0x50>)
 8004b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1ed      	bne.n	8004b46 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	2140      	movs	r1, #64	; 0x40
 8004b6e:	4802      	ldr	r0, [pc, #8]	; (8004b78 <W25qxx_WaitForWriteEnd+0x4c>)
 8004b70:	f001 feea 	bl	8006948 <HAL_GPIO_WritePin>
}
 8004b74:	bf00      	nop
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40020c00 	.word	0x40020c00
 8004b7c:	2000157c 	.word	0x2000157c

08004b80 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8004b86:	4b90      	ldr	r3, [pc, #576]	; (8004dc8 <W25qxx_Init+0x248>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004b8e:	e002      	b.n	8004b96 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004b90:	2001      	movs	r0, #1
 8004b92:	f000 fc51 	bl	8005438 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8004b96:	f000 fc43 	bl	8005420 <HAL_GetTick>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b63      	cmp	r3, #99	; 0x63
 8004b9e:	d9f7      	bls.n	8004b90 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	2140      	movs	r1, #64	; 0x40
 8004ba4:	4889      	ldr	r0, [pc, #548]	; (8004dcc <W25qxx_Init+0x24c>)
 8004ba6:	f001 fecf 	bl	8006948 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004baa:	2064      	movs	r0, #100	; 0x64
 8004bac:	f000 fc44 	bl	8005438 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8004bb0:	4887      	ldr	r0, [pc, #540]	; (8004dd0 <W25qxx_Init+0x250>)
 8004bb2:	f00a fed1 	bl	800f958 <puts>
#endif
	id = W25qxx_ReadID();
 8004bb6:	f7ff fef1 	bl	800499c <W25qxx_ReadID>
 8004bba:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4885      	ldr	r0, [pc, #532]	; (8004dd4 <W25qxx_Init+0x254>)
 8004bc0:	f00a fe44 	bl	800f84c <iprintf>
#endif
	switch (id & 0x000000FF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	3b11      	subs	r3, #17
 8004bca:	2b0f      	cmp	r3, #15
 8004bcc:	f200 808b 	bhi.w	8004ce6 <W25qxx_Init+0x166>
 8004bd0:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <W25qxx_Init+0x58>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004cd3 	.word	0x08004cd3
 8004bdc:	08004cbf 	.word	0x08004cbf
 8004be0:	08004cab 	.word	0x08004cab
 8004be4:	08004c97 	.word	0x08004c97
 8004be8:	08004c83 	.word	0x08004c83
 8004bec:	08004c6f 	.word	0x08004c6f
 8004bf0:	08004c5b 	.word	0x08004c5b
 8004bf4:	08004c45 	.word	0x08004c45
 8004bf8:	08004c2f 	.word	0x08004c2f
 8004bfc:	08004ce7 	.word	0x08004ce7
 8004c00:	08004ce7 	.word	0x08004ce7
 8004c04:	08004ce7 	.word	0x08004ce7
 8004c08:	08004ce7 	.word	0x08004ce7
 8004c0c:	08004ce7 	.word	0x08004ce7
 8004c10:	08004ce7 	.word	0x08004ce7
 8004c14:	08004c19 	.word	0x08004c19
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004c18:	4b6b      	ldr	r3, [pc, #428]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c1a:	220a      	movs	r2, #10
 8004c1c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004c1e:	4b6a      	ldr	r3, [pc, #424]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c24:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8004c26:	486c      	ldr	r0, [pc, #432]	; (8004dd8 <W25qxx_Init+0x258>)
 8004c28:	f00a fe96 	bl	800f958 <puts>
#endif
		break;
 8004c2c:	e064      	b.n	8004cf8 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004c2e:	4b66      	ldr	r3, [pc, #408]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c30:	2209      	movs	r2, #9
 8004c32:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004c34:	4b64      	ldr	r3, [pc, #400]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c3a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8004c3c:	4867      	ldr	r0, [pc, #412]	; (8004ddc <W25qxx_Init+0x25c>)
 8004c3e:	f00a fe8b 	bl	800f958 <puts>
#endif
		break;
 8004c42:	e059      	b.n	8004cf8 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004c44:	4b60      	ldr	r3, [pc, #384]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c46:	2208      	movs	r2, #8
 8004c48:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004c4a:	4b5f      	ldr	r3, [pc, #380]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c50:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8004c52:	4863      	ldr	r0, [pc, #396]	; (8004de0 <W25qxx_Init+0x260>)
 8004c54:	f00a fe80 	bl	800f958 <puts>
#endif
		break;
 8004c58:	e04e      	b.n	8004cf8 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004c5a:	4b5b      	ldr	r3, [pc, #364]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c5c:	2207      	movs	r2, #7
 8004c5e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004c60:	4b59      	ldr	r3, [pc, #356]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c62:	2280      	movs	r2, #128	; 0x80
 8004c64:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8004c66:	485f      	ldr	r0, [pc, #380]	; (8004de4 <W25qxx_Init+0x264>)
 8004c68:	f00a fe76 	bl	800f958 <puts>
#endif
		break;
 8004c6c:	e044      	b.n	8004cf8 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004c6e:	4b56      	ldr	r3, [pc, #344]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c70:	2206      	movs	r2, #6
 8004c72:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004c74:	4b54      	ldr	r3, [pc, #336]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c76:	2240      	movs	r2, #64	; 0x40
 8004c78:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8004c7a:	485b      	ldr	r0, [pc, #364]	; (8004de8 <W25qxx_Init+0x268>)
 8004c7c:	f00a fe6c 	bl	800f958 <puts>
#endif
		break;
 8004c80:	e03a      	b.n	8004cf8 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004c82:	4b51      	ldr	r3, [pc, #324]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c84:	2205      	movs	r2, #5
 8004c86:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004c88:	4b4f      	ldr	r3, [pc, #316]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8004c8e:	4857      	ldr	r0, [pc, #348]	; (8004dec <W25qxx_Init+0x26c>)
 8004c90:	f00a fe62 	bl	800f958 <puts>
#endif
		break;
 8004c94:	e030      	b.n	8004cf8 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004c96:	4b4c      	ldr	r3, [pc, #304]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c98:	2204      	movs	r2, #4
 8004c9a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004c9c:	4b4a      	ldr	r3, [pc, #296]	; (8004dc8 <W25qxx_Init+0x248>)
 8004c9e:	2210      	movs	r2, #16
 8004ca0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8004ca2:	4853      	ldr	r0, [pc, #332]	; (8004df0 <W25qxx_Init+0x270>)
 8004ca4:	f00a fe58 	bl	800f958 <puts>
#endif
		break;
 8004ca8:	e026      	b.n	8004cf8 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004caa:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <W25qxx_Init+0x248>)
 8004cac:	2203      	movs	r2, #3
 8004cae:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004cb0:	4b45      	ldr	r3, [pc, #276]	; (8004dc8 <W25qxx_Init+0x248>)
 8004cb2:	2208      	movs	r2, #8
 8004cb4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8004cb6:	484f      	ldr	r0, [pc, #316]	; (8004df4 <W25qxx_Init+0x274>)
 8004cb8:	f00a fe4e 	bl	800f958 <puts>
#endif
		break;
 8004cbc:	e01c      	b.n	8004cf8 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004cbe:	4b42      	ldr	r3, [pc, #264]	; (8004dc8 <W25qxx_Init+0x248>)
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004cc4:	4b40      	ldr	r3, [pc, #256]	; (8004dc8 <W25qxx_Init+0x248>)
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8004cca:	484b      	ldr	r0, [pc, #300]	; (8004df8 <W25qxx_Init+0x278>)
 8004ccc:	f00a fe44 	bl	800f958 <puts>
#endif
		break;
 8004cd0:	e012      	b.n	8004cf8 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004cd2:	4b3d      	ldr	r3, [pc, #244]	; (8004dc8 <W25qxx_Init+0x248>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004cd8:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <W25qxx_Init+0x248>)
 8004cda:	2202      	movs	r2, #2
 8004cdc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8004cde:	4847      	ldr	r0, [pc, #284]	; (8004dfc <W25qxx_Init+0x27c>)
 8004ce0:	f00a fe3a 	bl	800f958 <puts>
#endif
		break;
 8004ce4:	e008      	b.n	8004cf8 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8004ce6:	4846      	ldr	r0, [pc, #280]	; (8004e00 <W25qxx_Init+0x280>)
 8004ce8:	f00a fe36 	bl	800f958 <puts>
#endif
		w25qxx.Lock = 0;
 8004cec:	4b36      	ldr	r3, [pc, #216]	; (8004dc8 <W25qxx_Init+0x248>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	e063      	b.n	8004dc0 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8004cf8:	4b33      	ldr	r3, [pc, #204]	; (8004dc8 <W25qxx_Init+0x248>)
 8004cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cfe:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004d00:	4b31      	ldr	r3, [pc, #196]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d06:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004d08:	4b2f      	ldr	r3, [pc, #188]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	4a2e      	ldr	r2, [pc, #184]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d10:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004d12:	4b2d      	ldr	r3, [pc, #180]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	4a2c      	ldr	r2, [pc, #176]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d18:	6912      	ldr	r2, [r2, #16]
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	4a2a      	ldr	r2, [pc, #168]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d20:	8952      	ldrh	r2, [r2, #10]
 8004d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d26:	4a28      	ldr	r2, [pc, #160]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d28:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004d2a:	4b27      	ldr	r3, [pc, #156]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	4a25      	ldr	r2, [pc, #148]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d32:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004d34:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	4a23      	ldr	r2, [pc, #140]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d3a:	6912      	ldr	r2, [r2, #16]
 8004d3c:	fb02 f303 	mul.w	r3, r2, r3
 8004d40:	0a9b      	lsrs	r3, r3, #10
 8004d42:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d44:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004d46:	f7ff fe5f 	bl	8004a08 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	f7ff fea8 	bl	8004aa0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004d50:	2002      	movs	r0, #2
 8004d52:	f7ff fea5 	bl	8004aa0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004d56:	2003      	movs	r0, #3
 8004d58:	f7ff fea2 	bl	8004aa0 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8004d5c:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d5e:	895b      	ldrh	r3, [r3, #10]
 8004d60:	4619      	mov	r1, r3
 8004d62:	4828      	ldr	r0, [pc, #160]	; (8004e04 <W25qxx_Init+0x284>)
 8004d64:	f00a fd72 	bl	800f84c <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8004d68:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4826      	ldr	r0, [pc, #152]	; (8004e08 <W25qxx_Init+0x288>)
 8004d70:	f00a fd6c 	bl	800f84c <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8004d74:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4824      	ldr	r0, [pc, #144]	; (8004e0c <W25qxx_Init+0x28c>)
 8004d7c:	f00a fd66 	bl	800f84c <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8004d80:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	4619      	mov	r1, r3
 8004d86:	4822      	ldr	r0, [pc, #136]	; (8004e10 <W25qxx_Init+0x290>)
 8004d88:	f00a fd60 	bl	800f84c <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8004d8c:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	4619      	mov	r1, r3
 8004d92:	4820      	ldr	r0, [pc, #128]	; (8004e14 <W25qxx_Init+0x294>)
 8004d94:	f00a fd5a 	bl	800f84c <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <W25qxx_Init+0x248>)
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	481e      	ldr	r0, [pc, #120]	; (8004e18 <W25qxx_Init+0x298>)
 8004da0:	f00a fd54 	bl	800f84c <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8004da4:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <W25qxx_Init+0x248>)
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	4619      	mov	r1, r3
 8004daa:	481c      	ldr	r0, [pc, #112]	; (8004e1c <W25qxx_Init+0x29c>)
 8004dac:	f00a fd4e 	bl	800f84c <iprintf>
	printf("w25qxx Init Done\r\n");
 8004db0:	481b      	ldr	r0, [pc, #108]	; (8004e20 <W25qxx_Init+0x2a0>)
 8004db2:	f00a fdd1 	bl	800f958 <puts>
#endif
	w25qxx.Lock = 0;
 8004db6:	4b04      	ldr	r3, [pc, #16]	; (8004dc8 <W25qxx_Init+0x248>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004dbe:	2301      	movs	r3, #1
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	2000157c 	.word	0x2000157c
 8004dcc:	40020c00 	.word	0x40020c00
 8004dd0:	08014e60 	.word	0x08014e60
 8004dd4:	08014e78 	.word	0x08014e78
 8004dd8:	08014e8c 	.word	0x08014e8c
 8004ddc:	08014ea4 	.word	0x08014ea4
 8004de0:	08014ebc 	.word	0x08014ebc
 8004de4:	08014ed4 	.word	0x08014ed4
 8004de8:	08014eec 	.word	0x08014eec
 8004dec:	08014f04 	.word	0x08014f04
 8004df0:	08014f1c 	.word	0x08014f1c
 8004df4:	08014f34 	.word	0x08014f34
 8004df8:	08014f4c 	.word	0x08014f4c
 8004dfc:	08014f64 	.word	0x08014f64
 8004e00:	08014f7c 	.word	0x08014f7c
 8004e04:	08014f90 	.word	0x08014f90
 8004e08:	08014fb0 	.word	0x08014fb0
 8004e0c:	08014fc8 	.word	0x08014fc8
 8004e10:	08014fe8 	.word	0x08014fe8
 8004e14:	08015004 	.word	0x08015004
 8004e18:	08015024 	.word	0x08015024
 8004e1c:	08015040 	.word	0x08015040
 8004e20:	08015060 	.word	0x08015060

08004e24 <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004e2c:	e002      	b.n	8004e34 <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8004e2e:	2001      	movs	r0, #1
 8004e30:	f000 fb02 	bl	8005438 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004e34:	4b31      	ldr	r3, [pc, #196]	; (8004efc <W25qxx_EraseBlock+0xd8>)
 8004e36:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d0f7      	beq.n	8004e2e <W25qxx_EraseBlock+0xa>
	w25qxx.Lock = 1;
 8004e3e:	4b2f      	ldr	r3, [pc, #188]	; (8004efc <W25qxx_EraseBlock+0xd8>)
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock %d Begin...\r\n", BlockAddr);
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	482d      	ldr	r0, [pc, #180]	; (8004f00 <W25qxx_EraseBlock+0xdc>)
 8004e4a:	f00a fcff 	bl	800f84c <iprintf>
	W25qxx_Delay(100);
 8004e4e:	2064      	movs	r0, #100	; 0x64
 8004e50:	f000 faf2 	bl	8005438 <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 8004e54:	f000 fae4 	bl	8005420 <HAL_GetTick>
 8004e58:	60f8      	str	r0, [r7, #12]
#endif
	W25qxx_WaitForWriteEnd();
 8004e5a:	f7ff fe67 	bl	8004b2c <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize * 16;
 8004e5e:	4b27      	ldr	r3, [pc, #156]	; (8004efc <W25qxx_EraseBlock+0xd8>)
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	fb02 f303 	mul.w	r3, r2, r3
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004e6c:	f7ff fe02 	bl	8004a74 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004e70:	2200      	movs	r2, #0
 8004e72:	2140      	movs	r1, #64	; 0x40
 8004e74:	4823      	ldr	r0, [pc, #140]	; (8004f04 <W25qxx_EraseBlock+0xe0>)
 8004e76:	f001 fd67 	bl	8006948 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004e7a:	4b20      	ldr	r3, [pc, #128]	; (8004efc <W25qxx_EraseBlock+0xd8>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d909      	bls.n	8004e96 <W25qxx_EraseBlock+0x72>
	{
		W25qxx_Spi(0xDC);
 8004e82:	20dc      	movs	r0, #220	; 0xdc
 8004e84:	f7ff fd74 	bl	8004970 <W25qxx_Spi>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	0e1b      	lsrs	r3, r3, #24
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fd6e 	bl	8004970 <W25qxx_Spi>
 8004e94:	e002      	b.n	8004e9c <W25qxx_EraseBlock+0x78>
	}
	else
	{
		W25qxx_Spi(0xD8);
 8004e96:	20d8      	movs	r0, #216	; 0xd8
 8004e98:	f7ff fd6a 	bl	8004970 <W25qxx_Spi>
	}
	W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	0c1b      	lsrs	r3, r3, #16
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff fd64 	bl	8004970 <W25qxx_Spi>
	W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fd5e 	bl	8004970 <W25qxx_Spi>
	W25qxx_Spi(BlockAddr & 0xFF);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fd59 	bl	8004970 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	2140      	movs	r1, #64	; 0x40
 8004ec2:	4810      	ldr	r0, [pc, #64]	; (8004f04 <W25qxx_EraseBlock+0xe0>)
 8004ec4:	f001 fd40 	bl	8006948 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004ec8:	f7ff fe30 	bl	8004b2c <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004ecc:	f000 faa8 	bl	8005420 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	480b      	ldr	r0, [pc, #44]	; (8004f08 <W25qxx_EraseBlock+0xe4>)
 8004eda:	f00a fcb7 	bl	800f84c <iprintf>
	W25qxx_Delay(100);
 8004ede:	2064      	movs	r0, #100	; 0x64
 8004ee0:	f000 faaa 	bl	8005438 <HAL_Delay>
#endif
	W25qxx_Delay(1);
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	f000 faa7 	bl	8005438 <HAL_Delay>
	w25qxx.Lock = 0;
 8004eea:	4b04      	ldr	r3, [pc, #16]	; (8004efc <W25qxx_EraseBlock+0xd8>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	2000157c 	.word	0x2000157c
 8004f00:	08015104 	.word	0x08015104
 8004f04:	40020c00 	.word	0x40020c00
 8004f08:	08015124 	.word	0x08015124

08004f0c <W25qxx_PageToBlock>:
{
	return ((PageAddress * w25qxx.PageSize) / w25qxx.SectorSize);
}
//###################################################################################################################
uint32_t W25qxx_PageToBlock(uint32_t PageAddress)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
	return ((PageAddress * w25qxx.PageSize) / w25qxx.BlockSize);
 8004f14:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <W25qxx_PageToBlock+0x28>)
 8004f16:	895b      	ldrh	r3, [r3, #10]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	fb03 f202 	mul.w	r2, r3, r2
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <W25qxx_PageToBlock+0x28>)
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	2000157c 	.word	0x2000157c

08004f38 <W25qxx_IsEmptyPage>:
{
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
}
//###################################################################################################################
bool W25qxx_IsEmptyPage(uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_PageSize)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b090      	sub	sp, #64	; 0x40
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 8004f44:	e002      	b.n	8004f4c <W25qxx_IsEmptyPage+0x14>
		W25qxx_Delay(1);
 8004f46:	2001      	movs	r0, #1
 8004f48:	f000 fa76 	bl	8005438 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004f4c:	4b85      	ldr	r3, [pc, #532]	; (8005164 <W25qxx_IsEmptyPage+0x22c>)
 8004f4e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d0f7      	beq.n	8004f46 <W25qxx_IsEmptyPage+0xe>
	w25qxx.Lock = 1;
 8004f56:	4b83      	ldr	r3, [pc, #524]	; (8005164 <W25qxx_IsEmptyPage+0x22c>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToCheck_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToCheck_up_to_PageSize == 0))
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4413      	add	r3, r2
 8004f64:	4a7f      	ldr	r2, [pc, #508]	; (8005164 <W25qxx_IsEmptyPage+0x22c>)
 8004f66:	8952      	ldrh	r2, [r2, #10]
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d802      	bhi.n	8004f72 <W25qxx_IsEmptyPage+0x3a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d105      	bne.n	8004f7e <W25qxx_IsEmptyPage+0x46>
		NumByteToCheck_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004f72:	4b7c      	ldr	r3, [pc, #496]	; (8005164 <W25qxx_IsEmptyPage+0x22c>)
 8004f74:	895b      	ldrh	r3, [r3, #10]
 8004f76:	461a      	mov	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	607b      	str	r3, [r7, #4]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckPage:%d, Offset:%d, Bytes:%d begin...\r\n", Page_Address, OffsetInByte, NumByteToCheck_up_to_PageSize);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	68f9      	ldr	r1, [r7, #12]
 8004f84:	4878      	ldr	r0, [pc, #480]	; (8005168 <W25qxx_IsEmptyPage+0x230>)
 8004f86:	f00a fc61 	bl	800f84c <iprintf>
	W25qxx_Delay(100);
 8004f8a:	2064      	movs	r0, #100	; 0x64
 8004f8c:	f000 fa54 	bl	8005438 <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 8004f90:	f000 fa46 	bl	8005420 <HAL_GetTick>
 8004f94:	6378      	str	r0, [r7, #52]	; 0x34
#endif
	uint8_t pBuffer[32];
	uint32_t WorkAddress;
	uint32_t i;
	for (i = OffsetInByte; i < w25qxx.PageSize; i += sizeof(pBuffer))
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f9a:	e057      	b.n	800504c <W25qxx_IsEmptyPage+0x114>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2140      	movs	r1, #64	; 0x40
 8004fa0:	4872      	ldr	r0, [pc, #456]	; (800516c <W25qxx_IsEmptyPage+0x234>)
 8004fa2:	f001 fcd1 	bl	8006948 <HAL_GPIO_WritePin>
		WorkAddress = (i + Page_Address * w25qxx.PageSize);
 8004fa6:	4b6f      	ldr	r3, [pc, #444]	; (8005164 <W25qxx_IsEmptyPage+0x22c>)
 8004fa8:	895b      	ldrh	r3, [r3, #10]
 8004faa:	461a      	mov	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	fb03 f302 	mul.w	r3, r3, r2
 8004fb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fb4:	4413      	add	r3, r2
 8004fb6:	633b      	str	r3, [r7, #48]	; 0x30
		if (w25qxx.ID >= W25Q256)
 8004fb8:	4b6a      	ldr	r3, [pc, #424]	; (8005164 <W25qxx_IsEmptyPage+0x22c>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d909      	bls.n	8004fd4 <W25qxx_IsEmptyPage+0x9c>
		{
			W25qxx_Spi(0x0C);
 8004fc0:	200c      	movs	r0, #12
 8004fc2:	f7ff fcd5 	bl	8004970 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	0e1b      	lsrs	r3, r3, #24
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fccf 	bl	8004970 <W25qxx_Spi>
 8004fd2:	e002      	b.n	8004fda <W25qxx_IsEmptyPage+0xa2>
		}
		else
		{
			W25qxx_Spi(0x0B);
 8004fd4:	200b      	movs	r0, #11
 8004fd6:	f7ff fccb 	bl	8004970 <W25qxx_Spi>
		}
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	0c1b      	lsrs	r3, r3, #16
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff fcc5 	bl	8004970 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	0a1b      	lsrs	r3, r3, #8
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff fcbf 	bl	8004970 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff fcba 	bl	8004970 <W25qxx_Spi>
		W25qxx_Spi(0);
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f7ff fcb7 	bl	8004970 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, sizeof(pBuffer), 100);
 8005002:	f107 0110 	add.w	r1, r7, #16
 8005006:	2364      	movs	r3, #100	; 0x64
 8005008:	2220      	movs	r2, #32
 800500a:	4859      	ldr	r0, [pc, #356]	; (8005170 <W25qxx_IsEmptyPage+0x238>)
 800500c:	f003 fec6 	bl	8008d9c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005010:	2201      	movs	r2, #1
 8005012:	2140      	movs	r1, #64	; 0x40
 8005014:	4855      	ldr	r0, [pc, #340]	; (800516c <W25qxx_IsEmptyPage+0x234>)
 8005016:	f001 fc97 	bl	8006948 <HAL_GPIO_WritePin>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 800501a:	2300      	movs	r3, #0
 800501c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005020:	e00d      	b.n	800503e <W25qxx_IsEmptyPage+0x106>
		{
			if (pBuffer[x] != 0xFF)
 8005022:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005026:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800502a:	4413      	add	r3, r2
 800502c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8005030:	2bff      	cmp	r3, #255	; 0xff
 8005032:	d17e      	bne.n	8005132 <W25qxx_IsEmptyPage+0x1fa>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 8005034:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005038:	3301      	adds	r3, #1
 800503a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800503e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005042:	2b1f      	cmp	r3, #31
 8005044:	d9ed      	bls.n	8005022 <W25qxx_IsEmptyPage+0xea>
	for (i = OffsetInByte; i < w25qxx.PageSize; i += sizeof(pBuffer))
 8005046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005048:	3320      	adds	r3, #32
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800504c:	4b45      	ldr	r3, [pc, #276]	; (8005164 <W25qxx_IsEmptyPage+0x22c>)
 800504e:	895b      	ldrh	r3, [r3, #10]
 8005050:	461a      	mov	r2, r3
 8005052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005054:	4293      	cmp	r3, r2
 8005056:	d3a1      	bcc.n	8004f9c <W25qxx_IsEmptyPage+0x64>
				goto NOT_EMPTY;
		}
	}
	if ((w25qxx.PageSize + OffsetInByte) % sizeof(pBuffer) != 0)
 8005058:	4b42      	ldr	r3, [pc, #264]	; (8005164 <W25qxx_IsEmptyPage+0x22c>)
 800505a:	895b      	ldrh	r3, [r3, #10]
 800505c:	461a      	mov	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4413      	add	r3, r2
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2b00      	cmp	r3, #0
 8005068:	d051      	beq.n	800510e <W25qxx_IsEmptyPage+0x1d6>
	{
		i -= sizeof(pBuffer);
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	3b20      	subs	r3, #32
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (; i < w25qxx.PageSize; i++)
 8005070:	e047      	b.n	8005102 <W25qxx_IsEmptyPage+0x1ca>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005072:	2200      	movs	r2, #0
 8005074:	2140      	movs	r1, #64	; 0x40
 8005076:	483d      	ldr	r0, [pc, #244]	; (800516c <W25qxx_IsEmptyPage+0x234>)
 8005078:	f001 fc66 	bl	8006948 <HAL_GPIO_WritePin>
			WorkAddress = (i + Page_Address * w25qxx.PageSize);
 800507c:	4b39      	ldr	r3, [pc, #228]	; (8005164 <W25qxx_IsEmptyPage+0x22c>)
 800507e:	895b      	ldrh	r3, [r3, #10]
 8005080:	461a      	mov	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	fb03 f302 	mul.w	r3, r3, r2
 8005088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800508a:	4413      	add	r3, r2
 800508c:	633b      	str	r3, [r7, #48]	; 0x30
			W25qxx_Spi(0x0B);
 800508e:	200b      	movs	r0, #11
 8005090:	f7ff fc6e 	bl	8004970 <W25qxx_Spi>
			if (w25qxx.ID >= W25Q256)
 8005094:	4b33      	ldr	r3, [pc, #204]	; (8005164 <W25qxx_IsEmptyPage+0x22c>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d909      	bls.n	80050b0 <W25qxx_IsEmptyPage+0x178>
			{
				W25qxx_Spi(0x0C);
 800509c:	200c      	movs	r0, #12
 800509e:	f7ff fc67 	bl	8004970 <W25qxx_Spi>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	0e1b      	lsrs	r3, r3, #24
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fc61 	bl	8004970 <W25qxx_Spi>
 80050ae:	e002      	b.n	80050b6 <W25qxx_IsEmptyPage+0x17e>
			}
			else
			{
				W25qxx_Spi(0x0B);
 80050b0:	200b      	movs	r0, #11
 80050b2:	f7ff fc5d 	bl	8004970 <W25qxx_Spi>
			}
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	0c1b      	lsrs	r3, r3, #16
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fc57 	bl	8004970 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	0a1b      	lsrs	r3, r3, #8
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fc51 	bl	8004970 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fc4c 	bl	8004970 <W25qxx_Spi>
			W25qxx_Spi(0);
 80050d8:	2000      	movs	r0, #0
 80050da:	f7ff fc49 	bl	8004970 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, 1, 100);
 80050de:	f107 0110 	add.w	r1, r7, #16
 80050e2:	2364      	movs	r3, #100	; 0x64
 80050e4:	2201      	movs	r2, #1
 80050e6:	4822      	ldr	r0, [pc, #136]	; (8005170 <W25qxx_IsEmptyPage+0x238>)
 80050e8:	f003 fe58 	bl	8008d9c <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80050ec:	2201      	movs	r2, #1
 80050ee:	2140      	movs	r1, #64	; 0x40
 80050f0:	481e      	ldr	r0, [pc, #120]	; (800516c <W25qxx_IsEmptyPage+0x234>)
 80050f2:	f001 fc29 	bl	8006948 <HAL_GPIO_WritePin>
			if (pBuffer[0] != 0xFF)
 80050f6:	7c3b      	ldrb	r3, [r7, #16]
 80050f8:	2bff      	cmp	r3, #255	; 0xff
 80050fa:	d11c      	bne.n	8005136 <W25qxx_IsEmptyPage+0x1fe>
		for (; i < w25qxx.PageSize; i++)
 80050fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fe:	3301      	adds	r3, #1
 8005100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005102:	4b18      	ldr	r3, [pc, #96]	; (8005164 <W25qxx_IsEmptyPage+0x22c>)
 8005104:	895b      	ldrh	r3, [r3, #10]
 8005106:	461a      	mov	r2, r3
 8005108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510a:	4293      	cmp	r3, r2
 800510c:	d3b1      	bcc.n	8005072 <W25qxx_IsEmptyPage+0x13a>
				goto NOT_EMPTY;
		}
	}
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckPage is Empty in %d ms\r\n", HAL_GetTick() - StartTime);
 800510e:	f000 f987 	bl	8005420 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	4619      	mov	r1, r3
 800511a:	4816      	ldr	r0, [pc, #88]	; (8005174 <W25qxx_IsEmptyPage+0x23c>)
 800511c:	f00a fb96 	bl	800f84c <iprintf>
	W25qxx_Delay(100);
 8005120:	2064      	movs	r0, #100	; 0x64
 8005122:	f000 f989 	bl	8005438 <HAL_Delay>
#endif
	w25qxx.Lock = 0;
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <W25qxx_IsEmptyPage+0x22c>)
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800512e:	2301      	movs	r3, #1
 8005130:	e013      	b.n	800515a <W25qxx_IsEmptyPage+0x222>
				goto NOT_EMPTY;
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <W25qxx_IsEmptyPage+0x200>
				goto NOT_EMPTY;
 8005136:	bf00      	nop
NOT_EMPTY:
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckPage is Not Empty in %d ms\r\n", HAL_GetTick() - StartTime);
 8005138:	f000 f972 	bl	8005420 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	4619      	mov	r1, r3
 8005144:	480c      	ldr	r0, [pc, #48]	; (8005178 <W25qxx_IsEmptyPage+0x240>)
 8005146:	f00a fb81 	bl	800f84c <iprintf>
	W25qxx_Delay(100);
 800514a:	2064      	movs	r0, #100	; 0x64
 800514c:	f000 f974 	bl	8005438 <HAL_Delay>
#endif
	w25qxx.Lock = 0;
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <W25qxx_IsEmptyPage+0x22c>)
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3740      	adds	r7, #64	; 0x40
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	2000157c 	.word	0x2000157c
 8005168:	0801514c 	.word	0x0801514c
 800516c:	40020c00 	.word	0x40020c00
 8005170:	200012c4 	.word	0x200012c4
 8005174:	08015180 	.word	0x08015180
 8005178:	080151a8 	.word	0x080151a8

0800517c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800518a:	e002      	b.n	8005192 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800518c:	2001      	movs	r0, #1
 800518e:	f000 f953 	bl	8005438 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8005192:	4b54      	ldr	r3, [pc, #336]	; (80052e4 <W25qxx_ReadPage+0x168>)
 8005194:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005198:	2b01      	cmp	r3, #1
 800519a:	d0f7      	beq.n	800518c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800519c:	4b51      	ldr	r3, [pc, #324]	; (80052e4 <W25qxx_ReadPage+0x168>)
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80051a4:	4b4f      	ldr	r3, [pc, #316]	; (80052e4 <W25qxx_ReadPage+0x168>)
 80051a6:	895b      	ldrh	r3, [r3, #10]
 80051a8:	461a      	mov	r2, r3
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d802      	bhi.n	80051b6 <W25qxx_ReadPage+0x3a>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d102      	bne.n	80051bc <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80051b6:	4b4b      	ldr	r3, [pc, #300]	; (80052e4 <W25qxx_ReadPage+0x168>)
 80051b8:	895b      	ldrh	r3, [r3, #10]
 80051ba:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	4413      	add	r3, r2
 80051c2:	4a48      	ldr	r2, [pc, #288]	; (80052e4 <W25qxx_ReadPage+0x168>)
 80051c4:	8952      	ldrh	r2, [r2, #10]
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d905      	bls.n	80051d6 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80051ca:	4b46      	ldr	r3, [pc, #280]	; (80052e4 <W25qxx_ReadPage+0x168>)
 80051cc:	895b      	ldrh	r3, [r3, #10]
 80051ce:	461a      	mov	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	4842      	ldr	r0, [pc, #264]	; (80052e8 <W25qxx_ReadPage+0x16c>)
 80051de:	f00a fb35 	bl	800f84c <iprintf>
	W25qxx_Delay(100);
 80051e2:	2064      	movs	r0, #100	; 0x64
 80051e4:	f000 f928 	bl	8005438 <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 80051e8:	f000 f91a 	bl	8005420 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80051ee:	4b3d      	ldr	r3, [pc, #244]	; (80052e4 <W25qxx_ReadPage+0x168>)
 80051f0:	895b      	ldrh	r3, [r3, #10]
 80051f2:	461a      	mov	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	fb03 f302 	mul.w	r3, r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4413      	add	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005200:	2200      	movs	r2, #0
 8005202:	2140      	movs	r1, #64	; 0x40
 8005204:	4839      	ldr	r0, [pc, #228]	; (80052ec <W25qxx_ReadPage+0x170>)
 8005206:	f001 fb9f 	bl	8006948 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800520a:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <W25qxx_ReadPage+0x168>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b08      	cmp	r3, #8
 8005210:	d909      	bls.n	8005226 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8005212:	200c      	movs	r0, #12
 8005214:	f7ff fbac 	bl	8004970 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	0e1b      	lsrs	r3, r3, #24
 800521c:	b2db      	uxtb	r3, r3
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff fba6 	bl	8004970 <W25qxx_Spi>
 8005224:	e002      	b.n	800522c <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8005226:	200b      	movs	r0, #11
 8005228:	f7ff fba2 	bl	8004970 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	0c1b      	lsrs	r3, r3, #16
 8005230:	b2db      	uxtb	r3, r3
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff fb9c 	bl	8004970 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	0a1b      	lsrs	r3, r3, #8
 800523c:	b2db      	uxtb	r3, r3
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff fb96 	bl	8004970 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fb91 	bl	8004970 <W25qxx_Spi>
	W25qxx_Spi(0);
 800524e:	2000      	movs	r0, #0
 8005250:	f7ff fb8e 	bl	8004970 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	b29a      	uxth	r2, r3
 8005258:	2364      	movs	r3, #100	; 0x64
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	4824      	ldr	r0, [pc, #144]	; (80052f0 <W25qxx_ReadPage+0x174>)
 800525e:	f003 fd9d 	bl	8008d9c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005262:	2201      	movs	r2, #1
 8005264:	2140      	movs	r1, #64	; 0x40
 8005266:	4821      	ldr	r0, [pc, #132]	; (80052ec <W25qxx_ReadPage+0x170>)
 8005268:	f001 fb6e 	bl	8006948 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800526c:	f000 f8d8 	bl	8005420 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	e018      	b.n	80052b0 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	2b00      	cmp	r3, #0
 8005286:	d108      	bne.n	800529a <W25qxx_ReadPage+0x11e>
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d905      	bls.n	800529a <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 800528e:	4819      	ldr	r0, [pc, #100]	; (80052f4 <W25qxx_ReadPage+0x178>)
 8005290:	f00a fb62 	bl	800f958 <puts>
			W25qxx_Delay(10);
 8005294:	200a      	movs	r0, #10
 8005296:	f000 f8cf 	bl	8005438 <HAL_Delay>
		}
		printf("0x%02X,", pBuffer[i]);
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	4619      	mov	r1, r3
 80052a4:	4814      	ldr	r0, [pc, #80]	; (80052f8 <W25qxx_ReadPage+0x17c>)
 80052a6:	f00a fad1 	bl	800f84c <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	3301      	adds	r3, #1
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d3e2      	bcc.n	800527e <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 80052b8:	480e      	ldr	r0, [pc, #56]	; (80052f4 <W25qxx_ReadPage+0x178>)
 80052ba:	f00a fb4d 	bl	800f958 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 80052be:	6939      	ldr	r1, [r7, #16]
 80052c0:	480e      	ldr	r0, [pc, #56]	; (80052fc <W25qxx_ReadPage+0x180>)
 80052c2:	f00a fac3 	bl	800f84c <iprintf>
	W25qxx_Delay(100);
 80052c6:	2064      	movs	r0, #100	; 0x64
 80052c8:	f000 f8b6 	bl	8005438 <HAL_Delay>
#endif
	W25qxx_Delay(1);
 80052cc:	2001      	movs	r0, #1
 80052ce:	f000 f8b3 	bl	8005438 <HAL_Delay>
	w25qxx.Lock = 0;
 80052d2:	4b04      	ldr	r3, [pc, #16]	; (80052e4 <W25qxx_ReadPage+0x168>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80052da:	bf00      	nop
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	2000157c 	.word	0x2000157c
 80052e8:	08015558 	.word	0x08015558
 80052ec:	40020c00 	.word	0x40020c00
 80052f0:	200012c4 	.word	0x200012c4
 80052f4:	0801537c 	.word	0x0801537c
 80052f8:	08015380 	.word	0x08015380
 80052fc:	08015594 	.word	0x08015594

08005300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005338 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005304:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005306:	e003      	b.n	8005310 <LoopCopyDataInit>

08005308 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005308:	4b0c      	ldr	r3, [pc, #48]	; (800533c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800530a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800530c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800530e:	3104      	adds	r1, #4

08005310 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005310:	480b      	ldr	r0, [pc, #44]	; (8005340 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005312:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005314:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005316:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005318:	d3f6      	bcc.n	8005308 <CopyDataInit>
  ldr  r2, =_sbss
 800531a:	4a0b      	ldr	r2, [pc, #44]	; (8005348 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800531c:	e002      	b.n	8005324 <LoopFillZerobss>

0800531e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800531e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005320:	f842 3b04 	str.w	r3, [r2], #4

08005324 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005324:	4b09      	ldr	r3, [pc, #36]	; (800534c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005326:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005328:	d3f9      	bcc.n	800531e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800532a:	f7fe ffe3 	bl	80042f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800532e:	f009 fb27 	bl	800e980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005332:	f7fd fbb9 	bl	8002aa8 <main>
  bx  lr    
 8005336:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005338:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800533c:	08015d10 	.word	0x08015d10
  ldr  r0, =_sdata
 8005340:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005344:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8005348:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 800534c:	20001a28 	.word	0x20001a28

08005350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005350:	e7fe      	b.n	8005350 <ADC_IRQHandler>
	...

08005354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005358:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <HAL_Init+0x40>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a0d      	ldr	r2, [pc, #52]	; (8005394 <HAL_Init+0x40>)
 800535e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005362:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005364:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <HAL_Init+0x40>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a0a      	ldr	r2, [pc, #40]	; (8005394 <HAL_Init+0x40>)
 800536a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800536e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005370:	4b08      	ldr	r3, [pc, #32]	; (8005394 <HAL_Init+0x40>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a07      	ldr	r2, [pc, #28]	; (8005394 <HAL_Init+0x40>)
 8005376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800537c:	2003      	movs	r0, #3
 800537e:	f000 fd4b 	bl	8005e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005382:	2000      	movs	r0, #0
 8005384:	f000 f808 	bl	8005398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005388:	f7fe fe54 	bl	8004034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40023c00 	.word	0x40023c00

08005398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053a0:	4b12      	ldr	r3, [pc, #72]	; (80053ec <HAL_InitTick+0x54>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <HAL_InitTick+0x58>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	4619      	mov	r1, r3
 80053aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80053b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fd63 	bl	8005e82 <HAL_SYSTICK_Config>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e00e      	b.n	80053e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b0f      	cmp	r3, #15
 80053ca:	d80a      	bhi.n	80053e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053cc:	2200      	movs	r2, #0
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	f04f 30ff 	mov.w	r0, #4294967295
 80053d4:	f000 fd2b 	bl	8005e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053d8:	4a06      	ldr	r2, [pc, #24]	; (80053f4 <HAL_InitTick+0x5c>)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e000      	b.n	80053e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000004 	.word	0x20000004
 80053f0:	2000000c 	.word	0x2000000c
 80053f4:	20000008 	.word	0x20000008

080053f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053fc:	4b06      	ldr	r3, [pc, #24]	; (8005418 <HAL_IncTick+0x20>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <HAL_IncTick+0x24>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4413      	add	r3, r2
 8005408:	4a04      	ldr	r2, [pc, #16]	; (800541c <HAL_IncTick+0x24>)
 800540a:	6013      	str	r3, [r2, #0]
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	2000000c 	.word	0x2000000c
 800541c:	200015a4 	.word	0x200015a4

08005420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  return uwTick;
 8005424:	4b03      	ldr	r3, [pc, #12]	; (8005434 <HAL_GetTick+0x14>)
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	200015a4 	.word	0x200015a4

08005438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005440:	f7ff ffee 	bl	8005420 <HAL_GetTick>
 8005444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d005      	beq.n	800545e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <HAL_Delay+0x44>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800545e:	bf00      	nop
 8005460:	f7ff ffde 	bl	8005420 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	429a      	cmp	r2, r3
 800546e:	d8f7      	bhi.n	8005460 <HAL_Delay+0x28>
  {
  }
}
 8005470:	bf00      	nop
 8005472:	bf00      	nop
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	2000000c 	.word	0x2000000c

08005480 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e033      	b.n	80054fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fb fe72 	bl	8001188 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d118      	bne.n	80054f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80054c6:	f023 0302 	bic.w	r3, r3, #2
 80054ca:	f043 0202 	orr.w	r2, r3, #2
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fad4 	bl	8005a80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	f023 0303 	bic.w	r3, r3, #3
 80054e6:	f043 0201 	orr.w	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40
 80054ee:	e001      	b.n	80054f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_ADC_Start+0x1a>
 800551e:	2302      	movs	r3, #2
 8005520:	e0a5      	b.n	800566e <HAL_ADC_Start+0x166>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b01      	cmp	r3, #1
 8005536:	d018      	beq.n	800556a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005548:	4b4c      	ldr	r3, [pc, #304]	; (800567c <HAL_ADC_Start+0x174>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a4c      	ldr	r2, [pc, #304]	; (8005680 <HAL_ADC_Start+0x178>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	0c9a      	lsrs	r2, r3, #18
 8005554:	4613      	mov	r3, r2
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	4413      	add	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800555c:	e002      	b.n	8005564 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	3b01      	subs	r3, #1
 8005562:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f9      	bne.n	800555e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b01      	cmp	r3, #1
 8005576:	d179      	bne.n	800566c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b6:	d106      	bne.n	80055c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055bc:	f023 0206 	bic.w	r2, r3, #6
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	645a      	str	r2, [r3, #68]	; 0x44
 80055c4:	e002      	b.n	80055cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055d4:	4b2b      	ldr	r3, [pc, #172]	; (8005684 <HAL_ADC_Start+0x17c>)
 80055d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80055e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d12a      	bne.n	8005644 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a25      	ldr	r2, [pc, #148]	; (8005688 <HAL_ADC_Start+0x180>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d015      	beq.n	8005624 <HAL_ADC_Start+0x11c>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a23      	ldr	r2, [pc, #140]	; (800568c <HAL_ADC_Start+0x184>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d105      	bne.n	800560e <HAL_ADC_Start+0x106>
 8005602:	4b20      	ldr	r3, [pc, #128]	; (8005684 <HAL_ADC_Start+0x17c>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f003 031f 	and.w	r3, r3, #31
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <HAL_ADC_Start+0x188>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d129      	bne.n	800566c <HAL_ADC_Start+0x164>
 8005618:	4b1a      	ldr	r3, [pc, #104]	; (8005684 <HAL_ADC_Start+0x17c>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b00      	cmp	r3, #0
 8005622:	d123      	bne.n	800566c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d11c      	bne.n	800566c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005640:	609a      	str	r2, [r3, #8]
 8005642:	e013      	b.n	800566c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a0f      	ldr	r2, [pc, #60]	; (8005688 <HAL_ADC_Start+0x180>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d10e      	bne.n	800566c <HAL_ADC_Start+0x164>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d107      	bne.n	800566c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800566a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000004 	.word	0x20000004
 8005680:	431bde83 	.word	0x431bde83
 8005684:	40012300 	.word	0x40012300
 8005688:	40012000 	.word	0x40012000
 800568c:	40012100 	.word	0x40012100
 8005690:	40012200 	.word	0x40012200

08005694 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_ADC_Stop+0x16>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e021      	b.n	80056ee <HAL_ADC_Stop+0x5a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0201 	bic.w	r2, r2, #1
 80056c0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d109      	bne.n	80056e4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056d8:	f023 0301 	bic.w	r3, r3, #1
 80056dc:	f043 0201 	orr.w	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005716:	d113      	bne.n	8005740 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005726:	d10b      	bne.n	8005740 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	f043 0220 	orr.w	r2, r3, #32
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e05c      	b.n	80057fa <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005740:	f7ff fe6e 	bl	8005420 <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005746:	e01a      	b.n	800577e <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574e:	d016      	beq.n	800577e <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <HAL_ADC_PollForConversion+0x6c>
 8005756:	f7ff fe63 	bl	8005420 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d20b      	bcs.n	800577e <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f043 0204 	orr.w	r2, r3, #4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e03d      	b.n	80057fa <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b02      	cmp	r3, #2
 800578a:	d1dd      	bne.n	8005748 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0212 	mvn.w	r2, #18
 8005794:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d123      	bne.n	80057f8 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d11f      	bne.n	80057f8 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d006      	beq.n	80057d4 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d111      	bne.n	80057f8 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d105      	bne.n	80057f8 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	f043 0201 	orr.w	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_ADC_ConfigChannel+0x1c>
 8005834:	2302      	movs	r3, #2
 8005836:	e113      	b.n	8005a60 <HAL_ADC_ConfigChannel+0x244>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b09      	cmp	r3, #9
 8005846:	d925      	bls.n	8005894 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68d9      	ldr	r1, [r3, #12]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	4613      	mov	r3, r2
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	4413      	add	r3, r2
 800585c:	3b1e      	subs	r3, #30
 800585e:	2207      	movs	r2, #7
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	43da      	mvns	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	400a      	ands	r2, r1
 800586c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68d9      	ldr	r1, [r3, #12]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	b29b      	uxth	r3, r3
 800587e:	4618      	mov	r0, r3
 8005880:	4603      	mov	r3, r0
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	4403      	add	r3, r0
 8005886:	3b1e      	subs	r3, #30
 8005888:	409a      	lsls	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	e022      	b.n	80058da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6919      	ldr	r1, [r3, #16]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	4613      	mov	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	4413      	add	r3, r2
 80058a8:	2207      	movs	r2, #7
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	43da      	mvns	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	400a      	ands	r2, r1
 80058b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6919      	ldr	r1, [r3, #16]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	4618      	mov	r0, r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	4403      	add	r3, r0
 80058d0:	409a      	lsls	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b06      	cmp	r3, #6
 80058e0:	d824      	bhi.n	800592c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	3b05      	subs	r3, #5
 80058f4:	221f      	movs	r2, #31
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43da      	mvns	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	400a      	ands	r2, r1
 8005902:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	4618      	mov	r0, r3
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	3b05      	subs	r3, #5
 800591e:	fa00 f203 	lsl.w	r2, r0, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	635a      	str	r2, [r3, #52]	; 0x34
 800592a:	e04c      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b0c      	cmp	r3, #12
 8005932:	d824      	bhi.n	800597e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	3b23      	subs	r3, #35	; 0x23
 8005946:	221f      	movs	r2, #31
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	43da      	mvns	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	400a      	ands	r2, r1
 8005954:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	4618      	mov	r0, r3
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	3b23      	subs	r3, #35	; 0x23
 8005970:	fa00 f203 	lsl.w	r2, r0, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
 800597c:	e023      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	3b41      	subs	r3, #65	; 0x41
 8005990:	221f      	movs	r2, #31
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	43da      	mvns	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	400a      	ands	r2, r1
 800599e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	4618      	mov	r0, r3
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	3b41      	subs	r3, #65	; 0x41
 80059ba:	fa00 f203 	lsl.w	r2, r0, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059c6:	4b29      	ldr	r3, [pc, #164]	; (8005a6c <HAL_ADC_ConfigChannel+0x250>)
 80059c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a28      	ldr	r2, [pc, #160]	; (8005a70 <HAL_ADC_ConfigChannel+0x254>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d10f      	bne.n	80059f4 <HAL_ADC_ConfigChannel+0x1d8>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b12      	cmp	r3, #18
 80059da:	d10b      	bne.n	80059f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1d      	ldr	r2, [pc, #116]	; (8005a70 <HAL_ADC_ConfigChannel+0x254>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d12b      	bne.n	8005a56 <HAL_ADC_ConfigChannel+0x23a>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1c      	ldr	r2, [pc, #112]	; (8005a74 <HAL_ADC_ConfigChannel+0x258>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <HAL_ADC_ConfigChannel+0x1f4>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b11      	cmp	r3, #17
 8005a0e:	d122      	bne.n	8005a56 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a11      	ldr	r2, [pc, #68]	; (8005a74 <HAL_ADC_ConfigChannel+0x258>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d111      	bne.n	8005a56 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005a32:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <HAL_ADC_ConfigChannel+0x25c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a11      	ldr	r2, [pc, #68]	; (8005a7c <HAL_ADC_ConfigChannel+0x260>)
 8005a38:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3c:	0c9a      	lsrs	r2, r3, #18
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005a48:	e002      	b.n	8005a50 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f9      	bne.n	8005a4a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	40012300 	.word	0x40012300
 8005a70:	40012000 	.word	0x40012000
 8005a74:	10000012 	.word	0x10000012
 8005a78:	20000004 	.word	0x20000004
 8005a7c:	431bde83 	.word	0x431bde83

08005a80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a88:	4b79      	ldr	r3, [pc, #484]	; (8005c70 <ADC_Init+0x1f0>)
 8005a8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6859      	ldr	r1, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	021a      	lsls	r2, r3, #8
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005ad8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6859      	ldr	r1, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6899      	ldr	r1, [r3, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	4a58      	ldr	r2, [pc, #352]	; (8005c74 <ADC_Init+0x1f4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d022      	beq.n	8005b5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6899      	ldr	r1, [r3, #8]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6899      	ldr	r1, [r3, #8]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	609a      	str	r2, [r3, #8]
 8005b5c:	e00f      	b.n	8005b7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0202 	bic.w	r2, r2, #2
 8005b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6899      	ldr	r1, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	7e1b      	ldrb	r3, [r3, #24]
 8005b98:	005a      	lsls	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01b      	beq.n	8005be4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005bca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6859      	ldr	r1, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	035a      	lsls	r2, r3, #13
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
 8005be2:	e007      	b.n	8005bf4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005c02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	051a      	lsls	r2, r3, #20
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6899      	ldr	r1, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c36:	025a      	lsls	r2, r3, #9
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6899      	ldr	r1, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	029a      	lsls	r2, r3, #10
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	609a      	str	r2, [r3, #8]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	40012300 	.word	0x40012300
 8005c74:	0f000001 	.word	0x0f000001

08005c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c88:	4b0c      	ldr	r3, [pc, #48]	; (8005cbc <__NVIC_SetPriorityGrouping+0x44>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c94:	4013      	ands	r3, r2
 8005c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005caa:	4a04      	ldr	r2, [pc, #16]	; (8005cbc <__NVIC_SetPriorityGrouping+0x44>)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	60d3      	str	r3, [r2, #12]
}
 8005cb0:	bf00      	nop
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	e000ed00 	.word	0xe000ed00

08005cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cc4:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	0a1b      	lsrs	r3, r3, #8
 8005cca:	f003 0307 	and.w	r3, r3, #7
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	e000ed00 	.word	0xe000ed00

08005cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	db0b      	blt.n	8005d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	f003 021f 	and.w	r2, r3, #31
 8005cf4:	4907      	ldr	r1, [pc, #28]	; (8005d14 <__NVIC_EnableIRQ+0x38>)
 8005cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	2001      	movs	r0, #1
 8005cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8005d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	e000e100 	.word	0xe000e100

08005d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	6039      	str	r1, [r7, #0]
 8005d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	db0a      	blt.n	8005d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	490c      	ldr	r1, [pc, #48]	; (8005d64 <__NVIC_SetPriority+0x4c>)
 8005d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d36:	0112      	lsls	r2, r2, #4
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	440b      	add	r3, r1
 8005d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d40:	e00a      	b.n	8005d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	4908      	ldr	r1, [pc, #32]	; (8005d68 <__NVIC_SetPriority+0x50>)
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	3b04      	subs	r3, #4
 8005d50:	0112      	lsls	r2, r2, #4
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	440b      	add	r3, r1
 8005d56:	761a      	strb	r2, [r3, #24]
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	e000e100 	.word	0xe000e100
 8005d68:	e000ed00 	.word	0xe000ed00

08005d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b089      	sub	sp, #36	; 0x24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f1c3 0307 	rsb	r3, r3, #7
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	bf28      	it	cs
 8005d8a:	2304      	movcs	r3, #4
 8005d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	3304      	adds	r3, #4
 8005d92:	2b06      	cmp	r3, #6
 8005d94:	d902      	bls.n	8005d9c <NVIC_EncodePriority+0x30>
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	3b03      	subs	r3, #3
 8005d9a:	e000      	b.n	8005d9e <NVIC_EncodePriority+0x32>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da0:	f04f 32ff 	mov.w	r2, #4294967295
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43da      	mvns	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	401a      	ands	r2, r3
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005db4:	f04f 31ff 	mov.w	r1, #4294967295
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbe:	43d9      	mvns	r1, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dc4:	4313      	orrs	r3, r2
         );
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3724      	adds	r7, #36	; 0x24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
	...

08005dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005de4:	d301      	bcc.n	8005dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005de6:	2301      	movs	r3, #1
 8005de8:	e00f      	b.n	8005e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dea:	4a0a      	ldr	r2, [pc, #40]	; (8005e14 <SysTick_Config+0x40>)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005df2:	210f      	movs	r1, #15
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	f7ff ff8e 	bl	8005d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <SysTick_Config+0x40>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e02:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <SysTick_Config+0x40>)
 8005e04:	2207      	movs	r2, #7
 8005e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	e000e010 	.word	0xe000e010

08005e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff ff29 	bl	8005c78 <__NVIC_SetPriorityGrouping>
}
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b086      	sub	sp, #24
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	4603      	mov	r3, r0
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	607a      	str	r2, [r7, #4]
 8005e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e40:	f7ff ff3e 	bl	8005cc0 <__NVIC_GetPriorityGrouping>
 8005e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	6978      	ldr	r0, [r7, #20]
 8005e4c:	f7ff ff8e 	bl	8005d6c <NVIC_EncodePriority>
 8005e50:	4602      	mov	r2, r0
 8005e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e56:	4611      	mov	r1, r2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff ff5d 	bl	8005d18 <__NVIC_SetPriority>
}
 8005e5e:	bf00      	nop
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b082      	sub	sp, #8
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff ff31 	bl	8005cdc <__NVIC_EnableIRQ>
}
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b082      	sub	sp, #8
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff ffa2 	bl	8005dd4 <SysTick_Config>
 8005e90:	4603      	mov	r3, r0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ea8:	f7ff faba 	bl	8005420 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e099      	b.n	8005fec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0201 	bic.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ed8:	e00f      	b.n	8005efa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eda:	f7ff faa1 	bl	8005420 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b05      	cmp	r3, #5
 8005ee6:	d908      	bls.n	8005efa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e078      	b.n	8005fec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e8      	bne.n	8005eda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	4b38      	ldr	r3, [pc, #224]	; (8005ff4 <HAL_DMA_Init+0x158>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d107      	bne.n	8005f64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f023 0307 	bic.w	r3, r3, #7
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d117      	bne.n	8005fbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00e      	beq.n	8005fbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fa91 	bl	80064c8 <DMA_CheckFifoParam>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2240      	movs	r2, #64	; 0x40
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e016      	b.n	8005fec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fa48 	bl	800645c <DMA_CalcBaseAndBitshift>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd4:	223f      	movs	r2, #63	; 0x3f
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	f010803f 	.word	0xf010803f

08005ff8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_DMA_Start_IT+0x26>
 800601a:	2302      	movs	r3, #2
 800601c:	e040      	b.n	80060a0 <HAL_DMA_Start_IT+0xa8>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b01      	cmp	r3, #1
 8006030:	d12f      	bne.n	8006092 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2202      	movs	r2, #2
 8006036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f9da 	bl	8006400 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006050:	223f      	movs	r2, #63	; 0x3f
 8006052:	409a      	lsls	r2, r3
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0216 	orr.w	r2, r2, #22
 8006066:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0208 	orr.w	r2, r2, #8
 800607e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e005      	b.n	800609e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800609a:	2302      	movs	r3, #2
 800609c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800609e:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d004      	beq.n	80060c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2280      	movs	r2, #128	; 0x80
 80060c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e00c      	b.n	80060e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2205      	movs	r2, #5
 80060ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0201 	bic.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060f8:	4b92      	ldr	r3, [pc, #584]	; (8006344 <HAL_DMA_IRQHandler+0x258>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a92      	ldr	r2, [pc, #584]	; (8006348 <HAL_DMA_IRQHandler+0x25c>)
 80060fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006102:	0a9b      	lsrs	r3, r3, #10
 8006104:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006116:	2208      	movs	r2, #8
 8006118:	409a      	lsls	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4013      	ands	r3, r2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d01a      	beq.n	8006158 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d013      	beq.n	8006158 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0204 	bic.w	r2, r2, #4
 800613e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006144:	2208      	movs	r2, #8
 8006146:	409a      	lsls	r2, r3
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006150:	f043 0201 	orr.w	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615c:	2201      	movs	r2, #1
 800615e:	409a      	lsls	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4013      	ands	r3, r2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d012      	beq.n	800618e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617a:	2201      	movs	r2, #1
 800617c:	409a      	lsls	r2, r3
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006186:	f043 0202 	orr.w	r2, r3, #2
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006192:	2204      	movs	r2, #4
 8006194:	409a      	lsls	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	4013      	ands	r3, r2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d012      	beq.n	80061c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00b      	beq.n	80061c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b0:	2204      	movs	r2, #4
 80061b2:	409a      	lsls	r2, r3
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061bc:	f043 0204 	orr.w	r2, r3, #4
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c8:	2210      	movs	r2, #16
 80061ca:	409a      	lsls	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d043      	beq.n	800625c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d03c      	beq.n	800625c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e6:	2210      	movs	r2, #16
 80061e8:	409a      	lsls	r2, r3
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d018      	beq.n	800622e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d108      	bne.n	800621c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	d024      	beq.n	800625c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3
 800621a:	e01f      	b.n	800625c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01b      	beq.n	800625c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	4798      	blx	r3
 800622c:	e016      	b.n	800625c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006238:	2b00      	cmp	r3, #0
 800623a:	d107      	bne.n	800624c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0208 	bic.w	r2, r2, #8
 800624a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006260:	2220      	movs	r2, #32
 8006262:	409a      	lsls	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4013      	ands	r3, r2
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 808e 	beq.w	800638a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 8086 	beq.w	800638a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006282:	2220      	movs	r2, #32
 8006284:	409a      	lsls	r2, r3
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b05      	cmp	r3, #5
 8006294:	d136      	bne.n	8006304 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0216 	bic.w	r2, r2, #22
 80062a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695a      	ldr	r2, [r3, #20]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d103      	bne.n	80062c6 <HAL_DMA_IRQHandler+0x1da>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0208 	bic.w	r2, r2, #8
 80062d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062da:	223f      	movs	r2, #63	; 0x3f
 80062dc:	409a      	lsls	r2, r3
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d07d      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
        }
        return;
 8006302:	e078      	b.n	80063f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01c      	beq.n	800634c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d108      	bne.n	8006332 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006324:	2b00      	cmp	r3, #0
 8006326:	d030      	beq.n	800638a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4798      	blx	r3
 8006330:	e02b      	b.n	800638a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006336:	2b00      	cmp	r3, #0
 8006338:	d027      	beq.n	800638a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
 8006342:	e022      	b.n	800638a <HAL_DMA_IRQHandler+0x29e>
 8006344:	20000004 	.word	0x20000004
 8006348:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10f      	bne.n	800637a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0210 	bic.w	r2, r2, #16
 8006368:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638e:	2b00      	cmp	r3, #0
 8006390:	d032      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d022      	beq.n	80063e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2205      	movs	r2, #5
 80063a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0201 	bic.w	r2, r2, #1
 80063b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	3301      	adds	r3, #1
 80063ba:	60bb      	str	r3, [r7, #8]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d307      	bcc.n	80063d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f2      	bne.n	80063b6 <HAL_DMA_IRQHandler+0x2ca>
 80063d0:	e000      	b.n	80063d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80063d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4798      	blx	r3
 80063f4:	e000      	b.n	80063f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80063f6:	bf00      	nop
    }
  }
}
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop

08006400 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800641c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	2b40      	cmp	r3, #64	; 0x40
 800642c:	d108      	bne.n	8006440 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800643e:	e007      	b.n	8006450 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	60da      	str	r2, [r3, #12]
}
 8006450:	bf00      	nop
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	b2db      	uxtb	r3, r3
 800646a:	3b10      	subs	r3, #16
 800646c:	4a14      	ldr	r2, [pc, #80]	; (80064c0 <DMA_CalcBaseAndBitshift+0x64>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	091b      	lsrs	r3, r3, #4
 8006474:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006476:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <DMA_CalcBaseAndBitshift+0x68>)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b03      	cmp	r3, #3
 8006488:	d909      	bls.n	800649e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	1d1a      	adds	r2, r3, #4
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	659a      	str	r2, [r3, #88]	; 0x58
 800649c:	e007      	b.n	80064ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80064a6:	f023 0303 	bic.w	r3, r3, #3
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	aaaaaaab 	.word	0xaaaaaaab
 80064c4:	08015764 	.word	0x08015764

080064c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d11f      	bne.n	8006522 <DMA_CheckFifoParam+0x5a>
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d856      	bhi.n	8006596 <DMA_CheckFifoParam+0xce>
 80064e8:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <DMA_CheckFifoParam+0x28>)
 80064ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ee:	bf00      	nop
 80064f0:	08006501 	.word	0x08006501
 80064f4:	08006513 	.word	0x08006513
 80064f8:	08006501 	.word	0x08006501
 80064fc:	08006597 	.word	0x08006597
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d046      	beq.n	800659a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006510:	e043      	b.n	800659a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800651a:	d140      	bne.n	800659e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006520:	e03d      	b.n	800659e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800652a:	d121      	bne.n	8006570 <DMA_CheckFifoParam+0xa8>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b03      	cmp	r3, #3
 8006530:	d837      	bhi.n	80065a2 <DMA_CheckFifoParam+0xda>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <DMA_CheckFifoParam+0x70>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	08006549 	.word	0x08006549
 800653c:	0800654f 	.word	0x0800654f
 8006540:	08006549 	.word	0x08006549
 8006544:	08006561 	.word	0x08006561
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	73fb      	strb	r3, [r7, #15]
      break;
 800654c:	e030      	b.n	80065b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d025      	beq.n	80065a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800655e:	e022      	b.n	80065a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006568:	d11f      	bne.n	80065aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800656e:	e01c      	b.n	80065aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d903      	bls.n	800657e <DMA_CheckFifoParam+0xb6>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b03      	cmp	r3, #3
 800657a:	d003      	beq.n	8006584 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800657c:	e018      	b.n	80065b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	73fb      	strb	r3, [r7, #15]
      break;
 8006582:	e015      	b.n	80065b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00e      	beq.n	80065ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	73fb      	strb	r3, [r7, #15]
      break;
 8006594:	e00b      	b.n	80065ae <DMA_CheckFifoParam+0xe6>
      break;
 8006596:	bf00      	nop
 8006598:	e00a      	b.n	80065b0 <DMA_CheckFifoParam+0xe8>
      break;
 800659a:	bf00      	nop
 800659c:	e008      	b.n	80065b0 <DMA_CheckFifoParam+0xe8>
      break;
 800659e:	bf00      	nop
 80065a0:	e006      	b.n	80065b0 <DMA_CheckFifoParam+0xe8>
      break;
 80065a2:	bf00      	nop
 80065a4:	e004      	b.n	80065b0 <DMA_CheckFifoParam+0xe8>
      break;
 80065a6:	bf00      	nop
 80065a8:	e002      	b.n	80065b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80065aa:	bf00      	nop
 80065ac:	e000      	b.n	80065b0 <DMA_CheckFifoParam+0xe8>
      break;
 80065ae:	bf00      	nop
    }
  } 
  
  return status; 
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop

080065c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b089      	sub	sp, #36	; 0x24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	e177      	b.n	80068cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065dc:	2201      	movs	r2, #1
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	fa02 f303 	lsl.w	r3, r2, r3
 80065e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4013      	ands	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	f040 8166 	bne.w	80068c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d00b      	beq.n	800661a <HAL_GPIO_Init+0x5a>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b02      	cmp	r3, #2
 8006608:	d007      	beq.n	800661a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800660e:	2b11      	cmp	r3, #17
 8006610:	d003      	beq.n	800661a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2b12      	cmp	r3, #18
 8006618:	d130      	bne.n	800667c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	2203      	movs	r2, #3
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	43db      	mvns	r3, r3
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	4013      	ands	r3, r2
 8006630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	fa02 f303 	lsl.w	r3, r2, r3
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	4313      	orrs	r3, r2
 8006642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006650:	2201      	movs	r2, #1
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	43db      	mvns	r3, r3
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	4013      	ands	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	091b      	lsrs	r3, r3, #4
 8006666:	f003 0201 	and.w	r2, r3, #1
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	4313      	orrs	r3, r2
 8006674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	2203      	movs	r2, #3
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	43db      	mvns	r3, r3
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4013      	ands	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d003      	beq.n	80066bc <HAL_GPIO_Init+0xfc>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b12      	cmp	r3, #18
 80066ba:	d123      	bne.n	8006704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	08da      	lsrs	r2, r3, #3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3208      	adds	r2, #8
 80066c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	220f      	movs	r2, #15
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	43db      	mvns	r3, r3
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	4013      	ands	r3, r2
 80066de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	08da      	lsrs	r2, r3, #3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3208      	adds	r2, #8
 80066fe:	69b9      	ldr	r1, [r7, #24]
 8006700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	2203      	movs	r2, #3
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	43db      	mvns	r3, r3
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	4013      	ands	r3, r2
 800671a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f003 0203 	and.w	r2, r3, #3
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	4313      	orrs	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 80c0 	beq.w	80068c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	4b66      	ldr	r3, [pc, #408]	; (80068e4 <HAL_GPIO_Init+0x324>)
 800674c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674e:	4a65      	ldr	r2, [pc, #404]	; (80068e4 <HAL_GPIO_Init+0x324>)
 8006750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006754:	6453      	str	r3, [r2, #68]	; 0x44
 8006756:	4b63      	ldr	r3, [pc, #396]	; (80068e4 <HAL_GPIO_Init+0x324>)
 8006758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006762:	4a61      	ldr	r2, [pc, #388]	; (80068e8 <HAL_GPIO_Init+0x328>)
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	089b      	lsrs	r3, r3, #2
 8006768:	3302      	adds	r3, #2
 800676a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800676e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	220f      	movs	r2, #15
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	43db      	mvns	r3, r3
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	4013      	ands	r3, r2
 8006784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a58      	ldr	r2, [pc, #352]	; (80068ec <HAL_GPIO_Init+0x32c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d037      	beq.n	80067fe <HAL_GPIO_Init+0x23e>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a57      	ldr	r2, [pc, #348]	; (80068f0 <HAL_GPIO_Init+0x330>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d031      	beq.n	80067fa <HAL_GPIO_Init+0x23a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a56      	ldr	r2, [pc, #344]	; (80068f4 <HAL_GPIO_Init+0x334>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d02b      	beq.n	80067f6 <HAL_GPIO_Init+0x236>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a55      	ldr	r2, [pc, #340]	; (80068f8 <HAL_GPIO_Init+0x338>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d025      	beq.n	80067f2 <HAL_GPIO_Init+0x232>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a54      	ldr	r2, [pc, #336]	; (80068fc <HAL_GPIO_Init+0x33c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d01f      	beq.n	80067ee <HAL_GPIO_Init+0x22e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a53      	ldr	r2, [pc, #332]	; (8006900 <HAL_GPIO_Init+0x340>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d019      	beq.n	80067ea <HAL_GPIO_Init+0x22a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a52      	ldr	r2, [pc, #328]	; (8006904 <HAL_GPIO_Init+0x344>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <HAL_GPIO_Init+0x226>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a51      	ldr	r2, [pc, #324]	; (8006908 <HAL_GPIO_Init+0x348>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00d      	beq.n	80067e2 <HAL_GPIO_Init+0x222>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a50      	ldr	r2, [pc, #320]	; (800690c <HAL_GPIO_Init+0x34c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d007      	beq.n	80067de <HAL_GPIO_Init+0x21e>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a4f      	ldr	r2, [pc, #316]	; (8006910 <HAL_GPIO_Init+0x350>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d101      	bne.n	80067da <HAL_GPIO_Init+0x21a>
 80067d6:	2309      	movs	r3, #9
 80067d8:	e012      	b.n	8006800 <HAL_GPIO_Init+0x240>
 80067da:	230a      	movs	r3, #10
 80067dc:	e010      	b.n	8006800 <HAL_GPIO_Init+0x240>
 80067de:	2308      	movs	r3, #8
 80067e0:	e00e      	b.n	8006800 <HAL_GPIO_Init+0x240>
 80067e2:	2307      	movs	r3, #7
 80067e4:	e00c      	b.n	8006800 <HAL_GPIO_Init+0x240>
 80067e6:	2306      	movs	r3, #6
 80067e8:	e00a      	b.n	8006800 <HAL_GPIO_Init+0x240>
 80067ea:	2305      	movs	r3, #5
 80067ec:	e008      	b.n	8006800 <HAL_GPIO_Init+0x240>
 80067ee:	2304      	movs	r3, #4
 80067f0:	e006      	b.n	8006800 <HAL_GPIO_Init+0x240>
 80067f2:	2303      	movs	r3, #3
 80067f4:	e004      	b.n	8006800 <HAL_GPIO_Init+0x240>
 80067f6:	2302      	movs	r3, #2
 80067f8:	e002      	b.n	8006800 <HAL_GPIO_Init+0x240>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e000      	b.n	8006800 <HAL_GPIO_Init+0x240>
 80067fe:	2300      	movs	r3, #0
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	f002 0203 	and.w	r2, r2, #3
 8006806:	0092      	lsls	r2, r2, #2
 8006808:	4093      	lsls	r3, r2
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	4313      	orrs	r3, r2
 800680e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006810:	4935      	ldr	r1, [pc, #212]	; (80068e8 <HAL_GPIO_Init+0x328>)
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	089b      	lsrs	r3, r3, #2
 8006816:	3302      	adds	r3, #2
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800681e:	4b3d      	ldr	r3, [pc, #244]	; (8006914 <HAL_GPIO_Init+0x354>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	43db      	mvns	r3, r3
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	4013      	ands	r3, r2
 800682c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006842:	4a34      	ldr	r2, [pc, #208]	; (8006914 <HAL_GPIO_Init+0x354>)
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006848:	4b32      	ldr	r3, [pc, #200]	; (8006914 <HAL_GPIO_Init+0x354>)
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	43db      	mvns	r3, r3
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	4013      	ands	r3, r2
 8006856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800686c:	4a29      	ldr	r2, [pc, #164]	; (8006914 <HAL_GPIO_Init+0x354>)
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006872:	4b28      	ldr	r3, [pc, #160]	; (8006914 <HAL_GPIO_Init+0x354>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	43db      	mvns	r3, r3
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	4013      	ands	r3, r2
 8006880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006896:	4a1f      	ldr	r2, [pc, #124]	; (8006914 <HAL_GPIO_Init+0x354>)
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800689c:	4b1d      	ldr	r3, [pc, #116]	; (8006914 <HAL_GPIO_Init+0x354>)
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	43db      	mvns	r3, r3
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	4013      	ands	r3, r2
 80068aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	4313      	orrs	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068c0:	4a14      	ldr	r2, [pc, #80]	; (8006914 <HAL_GPIO_Init+0x354>)
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	3301      	adds	r3, #1
 80068ca:	61fb      	str	r3, [r7, #28]
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	2b0f      	cmp	r3, #15
 80068d0:	f67f ae84 	bls.w	80065dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop
 80068d8:	3724      	adds	r7, #36	; 0x24
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40023800 	.word	0x40023800
 80068e8:	40013800 	.word	0x40013800
 80068ec:	40020000 	.word	0x40020000
 80068f0:	40020400 	.word	0x40020400
 80068f4:	40020800 	.word	0x40020800
 80068f8:	40020c00 	.word	0x40020c00
 80068fc:	40021000 	.word	0x40021000
 8006900:	40021400 	.word	0x40021400
 8006904:	40021800 	.word	0x40021800
 8006908:	40021c00 	.word	0x40021c00
 800690c:	40022000 	.word	0x40022000
 8006910:	40022400 	.word	0x40022400
 8006914:	40013c00 	.word	0x40013c00

08006918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	887b      	ldrh	r3, [r7, #2]
 800692a:	4013      	ands	r3, r2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006930:	2301      	movs	r3, #1
 8006932:	73fb      	strb	r3, [r7, #15]
 8006934:	e001      	b.n	800693a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	807b      	strh	r3, [r7, #2]
 8006954:	4613      	mov	r3, r2
 8006956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006958:	787b      	ldrb	r3, [r7, #1]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800695e:	887a      	ldrh	r2, [r7, #2]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006964:	e003      	b.n	800696e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006966:	887b      	ldrh	r3, [r7, #2]
 8006968:	041a      	lsls	r2, r3, #16
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	619a      	str	r2, [r3, #24]
}
 800696e:	bf00      	nop
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
	...

0800697c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	4603      	mov	r3, r0
 8006984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006986:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006988:	695a      	ldr	r2, [r3, #20]
 800698a:	88fb      	ldrh	r3, [r7, #6]
 800698c:	4013      	ands	r3, r2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d006      	beq.n	80069a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006992:	4a05      	ldr	r2, [pc, #20]	; (80069a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006994:	88fb      	ldrh	r3, [r7, #6]
 8006996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006998:	88fb      	ldrh	r3, [r7, #6]
 800699a:	4618      	mov	r0, r3
 800699c:	f7fc fd96 	bl	80034cc <HAL_GPIO_EXTI_Callback>
  }
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	40013c00 	.word	0x40013c00

080069ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e12b      	b.n	8006c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fb f962 	bl	8001c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2224      	movs	r2, #36	; 0x24
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0201 	bic.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a10:	f001 fc48 	bl	80082a4 <HAL_RCC_GetPCLK1Freq>
 8006a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	4a81      	ldr	r2, [pc, #516]	; (8006c20 <HAL_I2C_Init+0x274>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d807      	bhi.n	8006a30 <HAL_I2C_Init+0x84>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4a80      	ldr	r2, [pc, #512]	; (8006c24 <HAL_I2C_Init+0x278>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	bf94      	ite	ls
 8006a28:	2301      	movls	r3, #1
 8006a2a:	2300      	movhi	r3, #0
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	e006      	b.n	8006a3e <HAL_I2C_Init+0x92>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4a7d      	ldr	r2, [pc, #500]	; (8006c28 <HAL_I2C_Init+0x27c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	bf94      	ite	ls
 8006a38:	2301      	movls	r3, #1
 8006a3a:	2300      	movhi	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e0e7      	b.n	8006c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a78      	ldr	r2, [pc, #480]	; (8006c2c <HAL_I2C_Init+0x280>)
 8006a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4e:	0c9b      	lsrs	r3, r3, #18
 8006a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	4a6a      	ldr	r2, [pc, #424]	; (8006c20 <HAL_I2C_Init+0x274>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d802      	bhi.n	8006a80 <HAL_I2C_Init+0xd4>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	e009      	b.n	8006a94 <HAL_I2C_Init+0xe8>
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a86:	fb02 f303 	mul.w	r3, r2, r3
 8006a8a:	4a69      	ldr	r2, [pc, #420]	; (8006c30 <HAL_I2C_Init+0x284>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	099b      	lsrs	r3, r3, #6
 8006a92:	3301      	adds	r3, #1
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006aa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	495c      	ldr	r1, [pc, #368]	; (8006c20 <HAL_I2C_Init+0x274>)
 8006ab0:	428b      	cmp	r3, r1
 8006ab2:	d819      	bhi.n	8006ae8 <HAL_I2C_Init+0x13c>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	1e59      	subs	r1, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ac2:	1c59      	adds	r1, r3, #1
 8006ac4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006ac8:	400b      	ands	r3, r1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <HAL_I2C_Init+0x138>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	1e59      	subs	r1, r3, #1
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006adc:	3301      	adds	r3, #1
 8006ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ae2:	e051      	b.n	8006b88 <HAL_I2C_Init+0x1dc>
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	e04f      	b.n	8006b88 <HAL_I2C_Init+0x1dc>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d111      	bne.n	8006b14 <HAL_I2C_Init+0x168>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	1e58      	subs	r0, r3, #1
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6859      	ldr	r1, [r3, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	440b      	add	r3, r1
 8006afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b02:	3301      	adds	r3, #1
 8006b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bf0c      	ite	eq
 8006b0c:	2301      	moveq	r3, #1
 8006b0e:	2300      	movne	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	e012      	b.n	8006b3a <HAL_I2C_Init+0x18e>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	1e58      	subs	r0, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6859      	ldr	r1, [r3, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	0099      	lsls	r1, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bf0c      	ite	eq
 8006b34:	2301      	moveq	r3, #1
 8006b36:	2300      	movne	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_I2C_Init+0x196>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e022      	b.n	8006b88 <HAL_I2C_Init+0x1dc>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10e      	bne.n	8006b68 <HAL_I2C_Init+0x1bc>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	1e58      	subs	r0, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6859      	ldr	r1, [r3, #4]
 8006b52:	460b      	mov	r3, r1
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	440b      	add	r3, r1
 8006b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b66:	e00f      	b.n	8006b88 <HAL_I2C_Init+0x1dc>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	1e58      	subs	r0, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6859      	ldr	r1, [r3, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	0099      	lsls	r1, r3, #2
 8006b78:	440b      	add	r3, r1
 8006b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b7e:	3301      	adds	r3, #1
 8006b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	6809      	ldr	r1, [r1, #0]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69da      	ldr	r2, [r3, #28]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006bb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6911      	ldr	r1, [r2, #16]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	68d2      	ldr	r2, [r2, #12]
 8006bc2:	4311      	orrs	r1, r2
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6812      	ldr	r2, [r2, #0]
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695a      	ldr	r2, [r3, #20]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0201 	orr.w	r2, r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	000186a0 	.word	0x000186a0
 8006c24:	001e847f 	.word	0x001e847f
 8006c28:	003d08ff 	.word	0x003d08ff
 8006c2c:	431bde83 	.word	0x431bde83
 8006c30:	10624dd3 	.word	0x10624dd3

08006c34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	4611      	mov	r1, r2
 8006c40:	461a      	mov	r2, r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	817b      	strh	r3, [r7, #10]
 8006c46:	460b      	mov	r3, r1
 8006c48:	813b      	strh	r3, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c4e:	f7fe fbe7 	bl	8005420 <HAL_GetTick>
 8006c52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	f040 80d9 	bne.w	8006e14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	2319      	movs	r3, #25
 8006c68:	2201      	movs	r2, #1
 8006c6a:	496d      	ldr	r1, [pc, #436]	; (8006e20 <HAL_I2C_Mem_Write+0x1ec>)
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 fc7f 	bl	8007570 <I2C_WaitOnFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e0cc      	b.n	8006e16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <HAL_I2C_Mem_Write+0x56>
 8006c86:	2302      	movs	r3, #2
 8006c88:	e0c5      	b.n	8006e16 <HAL_I2C_Mem_Write+0x1e2>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d007      	beq.n	8006cb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2221      	movs	r2, #33	; 0x21
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2240      	movs	r2, #64	; 0x40
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a3a      	ldr	r2, [r7, #32]
 8006cda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4a4d      	ldr	r2, [pc, #308]	; (8006e24 <HAL_I2C_Mem_Write+0x1f0>)
 8006cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cf2:	88f8      	ldrh	r0, [r7, #6]
 8006cf4:	893a      	ldrh	r2, [r7, #8]
 8006cf6:	8979      	ldrh	r1, [r7, #10]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	9301      	str	r3, [sp, #4]
 8006cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	4603      	mov	r3, r0
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 fab6 	bl	8007274 <I2C_RequestMemoryWrite>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d052      	beq.n	8006db4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e081      	b.n	8006e16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 fd00 	bl	800771c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00d      	beq.n	8006d3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d107      	bne.n	8006d3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e06b      	b.n	8006e16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	781a      	ldrb	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d11b      	bne.n	8006db4 <HAL_I2C_Mem_Write+0x180>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d017      	beq.n	8006db4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	781a      	ldrb	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1aa      	bne.n	8006d12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 fcec 	bl	800779e <I2C_WaitOnBTFFlagUntilTimeout>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00d      	beq.n	8006de8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d107      	bne.n	8006de4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006de2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e016      	b.n	8006e16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	e000      	b.n	8006e16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006e14:	2302      	movs	r3, #2
  }
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	00100002 	.word	0x00100002
 8006e24:	ffff0000 	.word	0xffff0000

08006e28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08c      	sub	sp, #48	; 0x30
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	4608      	mov	r0, r1
 8006e32:	4611      	mov	r1, r2
 8006e34:	461a      	mov	r2, r3
 8006e36:	4603      	mov	r3, r0
 8006e38:	817b      	strh	r3, [r7, #10]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	813b      	strh	r3, [r7, #8]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e42:	f7fe faed 	bl	8005420 <HAL_GetTick>
 8006e46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	f040 8208 	bne.w	8007266 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	2319      	movs	r3, #25
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	497b      	ldr	r1, [pc, #492]	; (800704c <HAL_I2C_Mem_Read+0x224>)
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 fb85 	bl	8007570 <I2C_WaitOnFlagUntilTimeout>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e1fb      	b.n	8007268 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d101      	bne.n	8006e7e <HAL_I2C_Mem_Read+0x56>
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e1f4      	b.n	8007268 <HAL_I2C_Mem_Read+0x440>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d007      	beq.n	8006ea4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0201 	orr.w	r2, r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006eb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2222      	movs	r2, #34	; 0x22
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2240      	movs	r2, #64	; 0x40
 8006ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ece:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4a5b      	ldr	r2, [pc, #364]	; (8007050 <HAL_I2C_Mem_Read+0x228>)
 8006ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ee6:	88f8      	ldrh	r0, [r7, #6]
 8006ee8:	893a      	ldrh	r2, [r7, #8]
 8006eea:	8979      	ldrh	r1, [r7, #10]
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 fa52 	bl	80073a0 <I2C_RequestMemoryRead>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e1b0      	b.n	8007268 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d113      	bne.n	8006f36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f0e:	2300      	movs	r3, #0
 8006f10:	623b      	str	r3, [r7, #32]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	623b      	str	r3, [r7, #32]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	623b      	str	r3, [r7, #32]
 8006f22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e184      	b.n	8007240 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d11b      	bne.n	8006f76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61fb      	str	r3, [r7, #28]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	61fb      	str	r3, [r7, #28]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	61fb      	str	r3, [r7, #28]
 8006f62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	e164      	b.n	8007240 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d11b      	bne.n	8006fb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61bb      	str	r3, [r7, #24]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	61bb      	str	r3, [r7, #24]
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	e144      	b.n	8007240 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006fcc:	e138      	b.n	8007240 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	f200 80f1 	bhi.w	80071ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d123      	bne.n	8007028 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fc1b 	bl	8007820 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e139      	b.n	8007268 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691a      	ldr	r2, [r3, #16]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007010:	3b01      	subs	r3, #1
 8007012:	b29a      	uxth	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701c:	b29b      	uxth	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007026:	e10b      	b.n	8007240 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800702c:	2b02      	cmp	r3, #2
 800702e:	d14e      	bne.n	80070ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	2200      	movs	r2, #0
 8007038:	4906      	ldr	r1, [pc, #24]	; (8007054 <HAL_I2C_Mem_Read+0x22c>)
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fa98 	bl	8007570 <I2C_WaitOnFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d008      	beq.n	8007058 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e10e      	b.n	8007268 <HAL_I2C_Mem_Read+0x440>
 800704a:	bf00      	nop
 800704c:	00100002 	.word	0x00100002
 8007050:	ffff0000 	.word	0xffff0000
 8007054:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007066:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691a      	ldr	r2, [r3, #16]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007084:	3b01      	subs	r3, #1
 8007086:	b29a      	uxth	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b6:	3b01      	subs	r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070cc:	e0b8      	b.n	8007240 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	2200      	movs	r2, #0
 80070d6:	4966      	ldr	r1, [pc, #408]	; (8007270 <HAL_I2C_Mem_Read+0x448>)
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 fa49 	bl	8007570 <I2C_WaitOnFlagUntilTimeout>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e0bf      	b.n	8007268 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691a      	ldr	r2, [r3, #16]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007114:	3b01      	subs	r3, #1
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007120:	b29b      	uxth	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007130:	2200      	movs	r2, #0
 8007132:	494f      	ldr	r1, [pc, #316]	; (8007270 <HAL_I2C_Mem_Read+0x448>)
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fa1b 	bl	8007570 <I2C_WaitOnFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e091      	b.n	8007268 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691a      	ldr	r2, [r3, #16]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	b2d2      	uxtb	r2, r2
 8007160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007170:	3b01      	subs	r3, #1
 8007172:	b29a      	uxth	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	b2d2      	uxtb	r2, r2
 8007192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a2:	3b01      	subs	r3, #1
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	3b01      	subs	r3, #1
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80071b8:	e042      	b.n	8007240 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fb2e 	bl	8007820 <I2C_WaitOnRXNEFlagUntilTimeout>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e04c      	b.n	8007268 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	b2d2      	uxtb	r2, r2
 80071da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b04      	cmp	r3, #4
 800720c:	d118      	bne.n	8007240 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800722a:	3b01      	subs	r3, #1
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007236:	b29b      	uxth	r3, r3
 8007238:	3b01      	subs	r3, #1
 800723a:	b29a      	uxth	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007244:	2b00      	cmp	r3, #0
 8007246:	f47f aec2 	bne.w	8006fce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2220      	movs	r2, #32
 800724e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	e000      	b.n	8007268 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007266:	2302      	movs	r3, #2
  }
}
 8007268:	4618      	mov	r0, r3
 800726a:	3728      	adds	r7, #40	; 0x28
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	00010004 	.word	0x00010004

08007274 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af02      	add	r7, sp, #8
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	4608      	mov	r0, r1
 800727e:	4611      	mov	r1, r2
 8007280:	461a      	mov	r2, r3
 8007282:	4603      	mov	r3, r0
 8007284:	817b      	strh	r3, [r7, #10]
 8007286:	460b      	mov	r3, r1
 8007288:	813b      	strh	r3, [r7, #8]
 800728a:	4613      	mov	r3, r2
 800728c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800729c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 f960 	bl	8007570 <I2C_WaitOnFlagUntilTimeout>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00d      	beq.n	80072d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c4:	d103      	bne.n	80072ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e05f      	b.n	8007392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072d2:	897b      	ldrh	r3, [r7, #10]
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	461a      	mov	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	6a3a      	ldr	r2, [r7, #32]
 80072e6:	492d      	ldr	r1, [pc, #180]	; (800739c <I2C_RequestMemoryWrite+0x128>)
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f998 	bl	800761e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e04c      	b.n	8007392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800730e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007310:	6a39      	ldr	r1, [r7, #32]
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 fa02 	bl	800771c <I2C_WaitOnTXEFlagUntilTimeout>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00d      	beq.n	800733a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	2b04      	cmp	r3, #4
 8007324:	d107      	bne.n	8007336 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007334:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e02b      	b.n	8007392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800733a:	88fb      	ldrh	r3, [r7, #6]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d105      	bne.n	800734c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007340:	893b      	ldrh	r3, [r7, #8]
 8007342:	b2da      	uxtb	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	611a      	str	r2, [r3, #16]
 800734a:	e021      	b.n	8007390 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800734c:	893b      	ldrh	r3, [r7, #8]
 800734e:	0a1b      	lsrs	r3, r3, #8
 8007350:	b29b      	uxth	r3, r3
 8007352:	b2da      	uxtb	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800735a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735c:	6a39      	ldr	r1, [r7, #32]
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 f9dc 	bl	800771c <I2C_WaitOnTXEFlagUntilTimeout>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00d      	beq.n	8007386 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	2b04      	cmp	r3, #4
 8007370:	d107      	bne.n	8007382 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007380:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e005      	b.n	8007392 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007386:	893b      	ldrh	r3, [r7, #8]
 8007388:	b2da      	uxtb	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	00010002 	.word	0x00010002

080073a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b088      	sub	sp, #32
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	4608      	mov	r0, r1
 80073aa:	4611      	mov	r1, r2
 80073ac:	461a      	mov	r2, r3
 80073ae:	4603      	mov	r3, r0
 80073b0:	817b      	strh	r3, [r7, #10]
 80073b2:	460b      	mov	r3, r1
 80073b4:	813b      	strh	r3, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 f8c2 	bl	8007570 <I2C_WaitOnFlagUntilTimeout>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00d      	beq.n	800740e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007400:	d103      	bne.n	800740a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007408:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e0aa      	b.n	8007564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800740e:	897b      	ldrh	r3, [r7, #10]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	461a      	mov	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800741c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	6a3a      	ldr	r2, [r7, #32]
 8007422:	4952      	ldr	r1, [pc, #328]	; (800756c <I2C_RequestMemoryRead+0x1cc>)
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 f8fa 	bl	800761e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e097      	b.n	8007564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007434:	2300      	movs	r3, #0
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800744a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744c:	6a39      	ldr	r1, [r7, #32]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 f964 	bl	800771c <I2C_WaitOnTXEFlagUntilTimeout>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00d      	beq.n	8007476 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	2b04      	cmp	r3, #4
 8007460:	d107      	bne.n	8007472 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007470:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e076      	b.n	8007564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d105      	bne.n	8007488 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800747c:	893b      	ldrh	r3, [r7, #8]
 800747e:	b2da      	uxtb	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	611a      	str	r2, [r3, #16]
 8007486:	e021      	b.n	80074cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007488:	893b      	ldrh	r3, [r7, #8]
 800748a:	0a1b      	lsrs	r3, r3, #8
 800748c:	b29b      	uxth	r3, r3
 800748e:	b2da      	uxtb	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007498:	6a39      	ldr	r1, [r7, #32]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 f93e 	bl	800771c <I2C_WaitOnTXEFlagUntilTimeout>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00d      	beq.n	80074c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	d107      	bne.n	80074be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e050      	b.n	8007564 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074c2:	893b      	ldrh	r3, [r7, #8]
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ce:	6a39      	ldr	r1, [r7, #32]
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 f923 	bl	800771c <I2C_WaitOnTXEFlagUntilTimeout>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00d      	beq.n	80074f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d107      	bne.n	80074f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e035      	b.n	8007564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007506:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	2200      	movs	r2, #0
 8007510:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 f82b 	bl	8007570 <I2C_WaitOnFlagUntilTimeout>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00d      	beq.n	800753c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800752e:	d103      	bne.n	8007538 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007536:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e013      	b.n	8007564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800753c:	897b      	ldrh	r3, [r7, #10]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	f043 0301 	orr.w	r3, r3, #1
 8007544:	b2da      	uxtb	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	6a3a      	ldr	r2, [r7, #32]
 8007550:	4906      	ldr	r1, [pc, #24]	; (800756c <I2C_RequestMemoryRead+0x1cc>)
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 f863 	bl	800761e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e000      	b.n	8007564 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	00010002 	.word	0x00010002

08007570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	4613      	mov	r3, r2
 800757e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007580:	e025      	b.n	80075ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007588:	d021      	beq.n	80075ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800758a:	f7fd ff49 	bl	8005420 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d302      	bcc.n	80075a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d116      	bne.n	80075ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ba:	f043 0220 	orr.w	r2, r3, #32
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e023      	b.n	8007616 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	0c1b      	lsrs	r3, r3, #16
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d10d      	bne.n	80075f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	43da      	mvns	r2, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4013      	ands	r3, r2
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bf0c      	ite	eq
 80075ea:	2301      	moveq	r3, #1
 80075ec:	2300      	movne	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	461a      	mov	r2, r3
 80075f2:	e00c      	b.n	800760e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	43da      	mvns	r2, r3
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4013      	ands	r3, r2
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	bf0c      	ite	eq
 8007606:	2301      	moveq	r3, #1
 8007608:	2300      	movne	r3, #0
 800760a:	b2db      	uxtb	r3, r3
 800760c:	461a      	mov	r2, r3
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	429a      	cmp	r2, r3
 8007612:	d0b6      	beq.n	8007582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
 800762a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800762c:	e051      	b.n	80076d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800763c:	d123      	bne.n	8007686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800764c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007656:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2220      	movs	r2, #32
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	f043 0204 	orr.w	r2, r3, #4
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e046      	b.n	8007714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768c:	d021      	beq.n	80076d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800768e:	f7fd fec7 	bl	8005420 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	429a      	cmp	r2, r3
 800769c:	d302      	bcc.n	80076a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d116      	bne.n	80076d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	f043 0220 	orr.w	r2, r3, #32
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e020      	b.n	8007714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	0c1b      	lsrs	r3, r3, #16
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d10c      	bne.n	80076f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	43da      	mvns	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	4013      	ands	r3, r2
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bf14      	ite	ne
 80076ee:	2301      	movne	r3, #1
 80076f0:	2300      	moveq	r3, #0
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	e00b      	b.n	800770e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	43da      	mvns	r2, r3
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	4013      	ands	r3, r2
 8007702:	b29b      	uxth	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	bf14      	ite	ne
 8007708:	2301      	movne	r3, #1
 800770a:	2300      	moveq	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d18d      	bne.n	800762e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007728:	e02d      	b.n	8007786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 f8ce 	bl	80078cc <I2C_IsAcknowledgeFailed>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e02d      	b.n	8007796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007740:	d021      	beq.n	8007786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007742:	f7fd fe6d 	bl	8005420 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	429a      	cmp	r2, r3
 8007750:	d302      	bcc.n	8007758 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d116      	bne.n	8007786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2220      	movs	r2, #32
 8007762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	f043 0220 	orr.w	r2, r3, #32
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e007      	b.n	8007796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007790:	2b80      	cmp	r3, #128	; 0x80
 8007792:	d1ca      	bne.n	800772a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077aa:	e02d      	b.n	8007808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f88d 	bl	80078cc <I2C_IsAcknowledgeFailed>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e02d      	b.n	8007818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c2:	d021      	beq.n	8007808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077c4:	f7fd fe2c 	bl	8005420 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d302      	bcc.n	80077da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d116      	bne.n	8007808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f4:	f043 0220 	orr.w	r2, r3, #32
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e007      	b.n	8007818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	f003 0304 	and.w	r3, r3, #4
 8007812:	2b04      	cmp	r3, #4
 8007814:	d1ca      	bne.n	80077ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800782c:	e042      	b.n	80078b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	f003 0310 	and.w	r3, r3, #16
 8007838:	2b10      	cmp	r3, #16
 800783a:	d119      	bne.n	8007870 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f06f 0210 	mvn.w	r2, #16
 8007844:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e029      	b.n	80078c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007870:	f7fd fdd6 	bl	8005420 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	429a      	cmp	r2, r3
 800787e:	d302      	bcc.n	8007886 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d116      	bne.n	80078b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a0:	f043 0220 	orr.w	r2, r3, #32
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e007      	b.n	80078c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078be:	2b40      	cmp	r3, #64	; 0x40
 80078c0:	d1b5      	bne.n	800782e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e2:	d11b      	bne.n	800791c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	f043 0204 	orr.w	r2, r3, #4
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b20      	cmp	r3, #32
 800793e:	d129      	bne.n	8007994 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2224      	movs	r2, #36	; 0x24
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0201 	bic.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 0210 	bic.w	r2, r2, #16
 8007966:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f042 0201 	orr.w	r2, r2, #1
 8007986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	e000      	b.n	8007996 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007994:	2302      	movs	r3, #2
  }
}
 8007996:	4618      	mov	r0, r3
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b085      	sub	sp, #20
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	d12a      	bne.n	8007a12 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2224      	movs	r2, #36	; 0x24
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0201 	bic.w	r2, r2, #1
 80079d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80079dc:	89fb      	ldrh	r3, [r7, #14]
 80079de:	f023 030f 	bic.w	r3, r3, #15
 80079e2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	89fb      	ldrh	r3, [r7, #14]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	89fa      	ldrh	r2, [r7, #14]
 80079f4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0201 	orr.w	r2, r2, #1
 8007a04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e000      	b.n	8007a14 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007a12:	2302      	movs	r3, #2
  }
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e25b      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d075      	beq.n	8007b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a3e:	4ba3      	ldr	r3, [pc, #652]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f003 030c 	and.w	r3, r3, #12
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d00c      	beq.n	8007a64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a4a:	4ba0      	ldr	r3, [pc, #640]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a52:	2b08      	cmp	r3, #8
 8007a54:	d112      	bne.n	8007a7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a56:	4b9d      	ldr	r3, [pc, #628]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a62:	d10b      	bne.n	8007a7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a64:	4b99      	ldr	r3, [pc, #612]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d05b      	beq.n	8007b28 <HAL_RCC_OscConfig+0x108>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d157      	bne.n	8007b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e236      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a84:	d106      	bne.n	8007a94 <HAL_RCC_OscConfig+0x74>
 8007a86:	4b91      	ldr	r3, [pc, #580]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a90      	ldr	r2, [pc, #576]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a90:	6013      	str	r3, [r2, #0]
 8007a92:	e01d      	b.n	8007ad0 <HAL_RCC_OscConfig+0xb0>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a9c:	d10c      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x98>
 8007a9e:	4b8b      	ldr	r3, [pc, #556]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a8a      	ldr	r2, [pc, #552]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	4b88      	ldr	r3, [pc, #544]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a87      	ldr	r2, [pc, #540]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	e00b      	b.n	8007ad0 <HAL_RCC_OscConfig+0xb0>
 8007ab8:	4b84      	ldr	r3, [pc, #528]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a83      	ldr	r2, [pc, #524]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	4b81      	ldr	r3, [pc, #516]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a80      	ldr	r2, [pc, #512]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d013      	beq.n	8007b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad8:	f7fd fca2 	bl	8005420 <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ade:	e008      	b.n	8007af2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ae0:	f7fd fc9e 	bl	8005420 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	2b64      	cmp	r3, #100	; 0x64
 8007aec:	d901      	bls.n	8007af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e1fb      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007af2:	4b76      	ldr	r3, [pc, #472]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0f0      	beq.n	8007ae0 <HAL_RCC_OscConfig+0xc0>
 8007afe:	e014      	b.n	8007b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b00:	f7fd fc8e 	bl	8005420 <HAL_GetTick>
 8007b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b06:	e008      	b.n	8007b1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b08:	f7fd fc8a 	bl	8005420 <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	2b64      	cmp	r3, #100	; 0x64
 8007b14:	d901      	bls.n	8007b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e1e7      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b1a:	4b6c      	ldr	r3, [pc, #432]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1f0      	bne.n	8007b08 <HAL_RCC_OscConfig+0xe8>
 8007b26:	e000      	b.n	8007b2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d063      	beq.n	8007bfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b36:	4b65      	ldr	r3, [pc, #404]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f003 030c 	and.w	r3, r3, #12
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00b      	beq.n	8007b5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b42:	4b62      	ldr	r3, [pc, #392]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b4a:	2b08      	cmp	r3, #8
 8007b4c:	d11c      	bne.n	8007b88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b4e:	4b5f      	ldr	r3, [pc, #380]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d116      	bne.n	8007b88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b5a:	4b5c      	ldr	r3, [pc, #368]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <HAL_RCC_OscConfig+0x152>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d001      	beq.n	8007b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e1bb      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b72:	4b56      	ldr	r3, [pc, #344]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	4952      	ldr	r1, [pc, #328]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b86:	e03a      	b.n	8007bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d020      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b90:	4b4f      	ldr	r3, [pc, #316]	; (8007cd0 <HAL_RCC_OscConfig+0x2b0>)
 8007b92:	2201      	movs	r2, #1
 8007b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b96:	f7fd fc43 	bl	8005420 <HAL_GetTick>
 8007b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b9c:	e008      	b.n	8007bb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b9e:	f7fd fc3f 	bl	8005420 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d901      	bls.n	8007bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e19c      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bb0:	4b46      	ldr	r3, [pc, #280]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0f0      	beq.n	8007b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bbc:	4b43      	ldr	r3, [pc, #268]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	4940      	ldr	r1, [pc, #256]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	600b      	str	r3, [r1, #0]
 8007bd0:	e015      	b.n	8007bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bd2:	4b3f      	ldr	r3, [pc, #252]	; (8007cd0 <HAL_RCC_OscConfig+0x2b0>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd8:	f7fd fc22 	bl	8005420 <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bde:	e008      	b.n	8007bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007be0:	f7fd fc1e 	bl	8005420 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e17b      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bf2:	4b36      	ldr	r3, [pc, #216]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1f0      	bne.n	8007be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0308 	and.w	r3, r3, #8
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d030      	beq.n	8007c6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d016      	beq.n	8007c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c12:	4b30      	ldr	r3, [pc, #192]	; (8007cd4 <HAL_RCC_OscConfig+0x2b4>)
 8007c14:	2201      	movs	r2, #1
 8007c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c18:	f7fd fc02 	bl	8005420 <HAL_GetTick>
 8007c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c1e:	e008      	b.n	8007c32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c20:	f7fd fbfe 	bl	8005420 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d901      	bls.n	8007c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e15b      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c32:	4b26      	ldr	r3, [pc, #152]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0f0      	beq.n	8007c20 <HAL_RCC_OscConfig+0x200>
 8007c3e:	e015      	b.n	8007c6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c40:	4b24      	ldr	r3, [pc, #144]	; (8007cd4 <HAL_RCC_OscConfig+0x2b4>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c46:	f7fd fbeb 	bl	8005420 <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c4c:	e008      	b.n	8007c60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c4e:	f7fd fbe7 	bl	8005420 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e144      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c60:	4b1a      	ldr	r3, [pc, #104]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1f0      	bne.n	8007c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0304 	and.w	r3, r3, #4
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 80a0 	beq.w	8007dba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c7e:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10f      	bne.n	8007caa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60bb      	str	r3, [r7, #8]
 8007c8e:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c92:	4a0e      	ldr	r2, [pc, #56]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c98:	6413      	str	r3, [r2, #64]	; 0x40
 8007c9a:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <HAL_RCC_OscConfig+0x2ac>)
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca2:	60bb      	str	r3, [r7, #8]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007caa:	4b0b      	ldr	r3, [pc, #44]	; (8007cd8 <HAL_RCC_OscConfig+0x2b8>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d121      	bne.n	8007cfa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cb6:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <HAL_RCC_OscConfig+0x2b8>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a07      	ldr	r2, [pc, #28]	; (8007cd8 <HAL_RCC_OscConfig+0x2b8>)
 8007cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cc2:	f7fd fbad 	bl	8005420 <HAL_GetTick>
 8007cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cc8:	e011      	b.n	8007cee <HAL_RCC_OscConfig+0x2ce>
 8007cca:	bf00      	nop
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	42470000 	.word	0x42470000
 8007cd4:	42470e80 	.word	0x42470e80
 8007cd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cdc:	f7fd fba0 	bl	8005420 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e0fd      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cee:	4b81      	ldr	r3, [pc, #516]	; (8007ef4 <HAL_RCC_OscConfig+0x4d4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0f0      	beq.n	8007cdc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d106      	bne.n	8007d10 <HAL_RCC_OscConfig+0x2f0>
 8007d02:	4b7d      	ldr	r3, [pc, #500]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d06:	4a7c      	ldr	r2, [pc, #496]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007d08:	f043 0301 	orr.w	r3, r3, #1
 8007d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d0e:	e01c      	b.n	8007d4a <HAL_RCC_OscConfig+0x32a>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	2b05      	cmp	r3, #5
 8007d16:	d10c      	bne.n	8007d32 <HAL_RCC_OscConfig+0x312>
 8007d18:	4b77      	ldr	r3, [pc, #476]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1c:	4a76      	ldr	r2, [pc, #472]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007d1e:	f043 0304 	orr.w	r3, r3, #4
 8007d22:	6713      	str	r3, [r2, #112]	; 0x70
 8007d24:	4b74      	ldr	r3, [pc, #464]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d28:	4a73      	ldr	r2, [pc, #460]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007d2a:	f043 0301 	orr.w	r3, r3, #1
 8007d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d30:	e00b      	b.n	8007d4a <HAL_RCC_OscConfig+0x32a>
 8007d32:	4b71      	ldr	r3, [pc, #452]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d36:	4a70      	ldr	r2, [pc, #448]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007d38:	f023 0301 	bic.w	r3, r3, #1
 8007d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d3e:	4b6e      	ldr	r3, [pc, #440]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d42:	4a6d      	ldr	r2, [pc, #436]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007d44:	f023 0304 	bic.w	r3, r3, #4
 8007d48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d015      	beq.n	8007d7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d52:	f7fd fb65 	bl	8005420 <HAL_GetTick>
 8007d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d58:	e00a      	b.n	8007d70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d5a:	f7fd fb61 	bl	8005420 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d901      	bls.n	8007d70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e0bc      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d70:	4b61      	ldr	r3, [pc, #388]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0ee      	beq.n	8007d5a <HAL_RCC_OscConfig+0x33a>
 8007d7c:	e014      	b.n	8007da8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d7e:	f7fd fb4f 	bl	8005420 <HAL_GetTick>
 8007d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d84:	e00a      	b.n	8007d9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d86:	f7fd fb4b 	bl	8005420 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d901      	bls.n	8007d9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e0a6      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d9c:	4b56      	ldr	r3, [pc, #344]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1ee      	bne.n	8007d86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d105      	bne.n	8007dba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dae:	4b52      	ldr	r3, [pc, #328]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	4a51      	ldr	r2, [pc, #324]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007db8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 8092 	beq.w	8007ee8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007dc4:	4b4c      	ldr	r3, [pc, #304]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 030c 	and.w	r3, r3, #12
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d05c      	beq.n	8007e8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d141      	bne.n	8007e5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dd8:	4b48      	ldr	r3, [pc, #288]	; (8007efc <HAL_RCC_OscConfig+0x4dc>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dde:	f7fd fb1f 	bl	8005420 <HAL_GetTick>
 8007de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007de4:	e008      	b.n	8007df8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007de6:	f7fd fb1b 	bl	8005420 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d901      	bls.n	8007df8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e078      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007df8:	4b3f      	ldr	r3, [pc, #252]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1f0      	bne.n	8007de6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	69da      	ldr	r2, [r3, #28]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	019b      	lsls	r3, r3, #6
 8007e14:	431a      	orrs	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1a:	085b      	lsrs	r3, r3, #1
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	041b      	lsls	r3, r3, #16
 8007e20:	431a      	orrs	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e26:	061b      	lsls	r3, r3, #24
 8007e28:	4933      	ldr	r1, [pc, #204]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e2e:	4b33      	ldr	r3, [pc, #204]	; (8007efc <HAL_RCC_OscConfig+0x4dc>)
 8007e30:	2201      	movs	r2, #1
 8007e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e34:	f7fd faf4 	bl	8005420 <HAL_GetTick>
 8007e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e3a:	e008      	b.n	8007e4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e3c:	f7fd faf0 	bl	8005420 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e04d      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e4e:	4b2a      	ldr	r3, [pc, #168]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0f0      	beq.n	8007e3c <HAL_RCC_OscConfig+0x41c>
 8007e5a:	e045      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e5c:	4b27      	ldr	r3, [pc, #156]	; (8007efc <HAL_RCC_OscConfig+0x4dc>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e62:	f7fd fadd 	bl	8005420 <HAL_GetTick>
 8007e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e68:	e008      	b.n	8007e7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e6a:	f7fd fad9 	bl	8005420 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d901      	bls.n	8007e7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e036      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e7c:	4b1e      	ldr	r3, [pc, #120]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1f0      	bne.n	8007e6a <HAL_RCC_OscConfig+0x44a>
 8007e88:	e02e      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e029      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e96:	4b18      	ldr	r3, [pc, #96]	; (8007ef8 <HAL_RCC_OscConfig+0x4d8>)
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d11c      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d115      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d10d      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d106      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d001      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e000      	b.n	8007eea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	40007000 	.word	0x40007000
 8007ef8:	40023800 	.word	0x40023800
 8007efc:	42470060 	.word	0x42470060

08007f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e0cc      	b.n	80080ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f14:	4b68      	ldr	r3, [pc, #416]	; (80080b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d90c      	bls.n	8007f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f22:	4b65      	ldr	r3, [pc, #404]	; (80080b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f2a:	4b63      	ldr	r3, [pc, #396]	; (80080b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 030f 	and.w	r3, r3, #15
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d001      	beq.n	8007f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e0b8      	b.n	80080ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d020      	beq.n	8007f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0304 	and.w	r3, r3, #4
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f54:	4b59      	ldr	r3, [pc, #356]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	4a58      	ldr	r2, [pc, #352]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8007f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0308 	and.w	r3, r3, #8
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d005      	beq.n	8007f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f6c:	4b53      	ldr	r3, [pc, #332]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	4a52      	ldr	r2, [pc, #328]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8007f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f78:	4b50      	ldr	r3, [pc, #320]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	494d      	ldr	r1, [pc, #308]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d044      	beq.n	8008020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d107      	bne.n	8007fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f9e:	4b47      	ldr	r3, [pc, #284]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d119      	bne.n	8007fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e07f      	b.n	80080ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d003      	beq.n	8007fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d107      	bne.n	8007fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fbe:	4b3f      	ldr	r3, [pc, #252]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d109      	bne.n	8007fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e06f      	b.n	80080ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fce:	4b3b      	ldr	r3, [pc, #236]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e067      	b.n	80080ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fde:	4b37      	ldr	r3, [pc, #220]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f023 0203 	bic.w	r2, r3, #3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	4934      	ldr	r1, [pc, #208]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ff0:	f7fd fa16 	bl	8005420 <HAL_GetTick>
 8007ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ff6:	e00a      	b.n	800800e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ff8:	f7fd fa12 	bl	8005420 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	f241 3288 	movw	r2, #5000	; 0x1388
 8008006:	4293      	cmp	r3, r2
 8008008:	d901      	bls.n	800800e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e04f      	b.n	80080ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800800e:	4b2b      	ldr	r3, [pc, #172]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 020c 	and.w	r2, r3, #12
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	429a      	cmp	r2, r3
 800801e:	d1eb      	bne.n	8007ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008020:	4b25      	ldr	r3, [pc, #148]	; (80080b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 030f 	and.w	r3, r3, #15
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d20c      	bcs.n	8008048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800802e:	4b22      	ldr	r3, [pc, #136]	; (80080b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	b2d2      	uxtb	r2, r2
 8008034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008036:	4b20      	ldr	r3, [pc, #128]	; (80080b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d001      	beq.n	8008048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e032      	b.n	80080ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d008      	beq.n	8008066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008054:	4b19      	ldr	r3, [pc, #100]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	4916      	ldr	r1, [pc, #88]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8008062:	4313      	orrs	r3, r2
 8008064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0308 	and.w	r3, r3, #8
 800806e:	2b00      	cmp	r3, #0
 8008070:	d009      	beq.n	8008086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008072:	4b12      	ldr	r3, [pc, #72]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	00db      	lsls	r3, r3, #3
 8008080:	490e      	ldr	r1, [pc, #56]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 8008082:	4313      	orrs	r3, r2
 8008084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008086:	f000 f821 	bl	80080cc <HAL_RCC_GetSysClockFreq>
 800808a:	4602      	mov	r2, r0
 800808c:	4b0b      	ldr	r3, [pc, #44]	; (80080bc <HAL_RCC_ClockConfig+0x1bc>)
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	091b      	lsrs	r3, r3, #4
 8008092:	f003 030f 	and.w	r3, r3, #15
 8008096:	490a      	ldr	r1, [pc, #40]	; (80080c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008098:	5ccb      	ldrb	r3, [r1, r3]
 800809a:	fa22 f303 	lsr.w	r3, r2, r3
 800809e:	4a09      	ldr	r2, [pc, #36]	; (80080c4 <HAL_RCC_ClockConfig+0x1c4>)
 80080a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80080a2:	4b09      	ldr	r3, [pc, #36]	; (80080c8 <HAL_RCC_ClockConfig+0x1c8>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fd f976 	bl	8005398 <HAL_InitTick>

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	40023c00 	.word	0x40023c00
 80080bc:	40023800 	.word	0x40023800
 80080c0:	0801574c 	.word	0x0801574c
 80080c4:	20000004 	.word	0x20000004
 80080c8:	20000008 	.word	0x20000008

080080cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	607b      	str	r3, [r7, #4]
 80080d8:	2300      	movs	r3, #0
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	2300      	movs	r3, #0
 80080de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080e4:	4b67      	ldr	r3, [pc, #412]	; (8008284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f003 030c 	and.w	r3, r3, #12
 80080ec:	2b08      	cmp	r3, #8
 80080ee:	d00d      	beq.n	800810c <HAL_RCC_GetSysClockFreq+0x40>
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	f200 80bd 	bhi.w	8008270 <HAL_RCC_GetSysClockFreq+0x1a4>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <HAL_RCC_GetSysClockFreq+0x34>
 80080fa:	2b04      	cmp	r3, #4
 80080fc:	d003      	beq.n	8008106 <HAL_RCC_GetSysClockFreq+0x3a>
 80080fe:	e0b7      	b.n	8008270 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008100:	4b61      	ldr	r3, [pc, #388]	; (8008288 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008102:	60bb      	str	r3, [r7, #8]
       break;
 8008104:	e0b7      	b.n	8008276 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008106:	4b60      	ldr	r3, [pc, #384]	; (8008288 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008108:	60bb      	str	r3, [r7, #8]
      break;
 800810a:	e0b4      	b.n	8008276 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800810c:	4b5d      	ldr	r3, [pc, #372]	; (8008284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008114:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008116:	4b5b      	ldr	r3, [pc, #364]	; (8008284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d04d      	beq.n	80081be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008122:	4b58      	ldr	r3, [pc, #352]	; (8008284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	099b      	lsrs	r3, r3, #6
 8008128:	461a      	mov	r2, r3
 800812a:	f04f 0300 	mov.w	r3, #0
 800812e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008132:	f04f 0100 	mov.w	r1, #0
 8008136:	ea02 0800 	and.w	r8, r2, r0
 800813a:	ea03 0901 	and.w	r9, r3, r1
 800813e:	4640      	mov	r0, r8
 8008140:	4649      	mov	r1, r9
 8008142:	f04f 0200 	mov.w	r2, #0
 8008146:	f04f 0300 	mov.w	r3, #0
 800814a:	014b      	lsls	r3, r1, #5
 800814c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008150:	0142      	lsls	r2, r0, #5
 8008152:	4610      	mov	r0, r2
 8008154:	4619      	mov	r1, r3
 8008156:	ebb0 0008 	subs.w	r0, r0, r8
 800815a:	eb61 0109 	sbc.w	r1, r1, r9
 800815e:	f04f 0200 	mov.w	r2, #0
 8008162:	f04f 0300 	mov.w	r3, #0
 8008166:	018b      	lsls	r3, r1, #6
 8008168:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800816c:	0182      	lsls	r2, r0, #6
 800816e:	1a12      	subs	r2, r2, r0
 8008170:	eb63 0301 	sbc.w	r3, r3, r1
 8008174:	f04f 0000 	mov.w	r0, #0
 8008178:	f04f 0100 	mov.w	r1, #0
 800817c:	00d9      	lsls	r1, r3, #3
 800817e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008182:	00d0      	lsls	r0, r2, #3
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	eb12 0208 	adds.w	r2, r2, r8
 800818c:	eb43 0309 	adc.w	r3, r3, r9
 8008190:	f04f 0000 	mov.w	r0, #0
 8008194:	f04f 0100 	mov.w	r1, #0
 8008198:	0299      	lsls	r1, r3, #10
 800819a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800819e:	0290      	lsls	r0, r2, #10
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4610      	mov	r0, r2
 80081a6:	4619      	mov	r1, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	461a      	mov	r2, r3
 80081ac:	f04f 0300 	mov.w	r3, #0
 80081b0:	f7f8 fd7a 	bl	8000ca8 <__aeabi_uldivmod>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	4613      	mov	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	e04a      	b.n	8008254 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081be:	4b31      	ldr	r3, [pc, #196]	; (8008284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	099b      	lsrs	r3, r3, #6
 80081c4:	461a      	mov	r2, r3
 80081c6:	f04f 0300 	mov.w	r3, #0
 80081ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80081ce:	f04f 0100 	mov.w	r1, #0
 80081d2:	ea02 0400 	and.w	r4, r2, r0
 80081d6:	ea03 0501 	and.w	r5, r3, r1
 80081da:	4620      	mov	r0, r4
 80081dc:	4629      	mov	r1, r5
 80081de:	f04f 0200 	mov.w	r2, #0
 80081e2:	f04f 0300 	mov.w	r3, #0
 80081e6:	014b      	lsls	r3, r1, #5
 80081e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80081ec:	0142      	lsls	r2, r0, #5
 80081ee:	4610      	mov	r0, r2
 80081f0:	4619      	mov	r1, r3
 80081f2:	1b00      	subs	r0, r0, r4
 80081f4:	eb61 0105 	sbc.w	r1, r1, r5
 80081f8:	f04f 0200 	mov.w	r2, #0
 80081fc:	f04f 0300 	mov.w	r3, #0
 8008200:	018b      	lsls	r3, r1, #6
 8008202:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008206:	0182      	lsls	r2, r0, #6
 8008208:	1a12      	subs	r2, r2, r0
 800820a:	eb63 0301 	sbc.w	r3, r3, r1
 800820e:	f04f 0000 	mov.w	r0, #0
 8008212:	f04f 0100 	mov.w	r1, #0
 8008216:	00d9      	lsls	r1, r3, #3
 8008218:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800821c:	00d0      	lsls	r0, r2, #3
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	1912      	adds	r2, r2, r4
 8008224:	eb45 0303 	adc.w	r3, r5, r3
 8008228:	f04f 0000 	mov.w	r0, #0
 800822c:	f04f 0100 	mov.w	r1, #0
 8008230:	0299      	lsls	r1, r3, #10
 8008232:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008236:	0290      	lsls	r0, r2, #10
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4610      	mov	r0, r2
 800823e:	4619      	mov	r1, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	461a      	mov	r2, r3
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	f7f8 fd2e 	bl	8000ca8 <__aeabi_uldivmod>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4613      	mov	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008254:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	0c1b      	lsrs	r3, r3, #16
 800825a:	f003 0303 	and.w	r3, r3, #3
 800825e:	3301      	adds	r3, #1
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	fbb2 f3f3 	udiv	r3, r2, r3
 800826c:	60bb      	str	r3, [r7, #8]
      break;
 800826e:	e002      	b.n	8008276 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008272:	60bb      	str	r3, [r7, #8]
      break;
 8008274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008276:	68bb      	ldr	r3, [r7, #8]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008282:	bf00      	nop
 8008284:	40023800 	.word	0x40023800
 8008288:	00f42400 	.word	0x00f42400

0800828c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008290:	4b03      	ldr	r3, [pc, #12]	; (80082a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008292:	681b      	ldr	r3, [r3, #0]
}
 8008294:	4618      	mov	r0, r3
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	20000004 	.word	0x20000004

080082a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80082a8:	f7ff fff0 	bl	800828c <HAL_RCC_GetHCLKFreq>
 80082ac:	4602      	mov	r2, r0
 80082ae:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	0a9b      	lsrs	r3, r3, #10
 80082b4:	f003 0307 	and.w	r3, r3, #7
 80082b8:	4903      	ldr	r1, [pc, #12]	; (80082c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082ba:	5ccb      	ldrb	r3, [r1, r3]
 80082bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	40023800 	.word	0x40023800
 80082c8:	0801575c 	.word	0x0801575c

080082cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80082d0:	f7ff ffdc 	bl	800828c <HAL_RCC_GetHCLKFreq>
 80082d4:	4602      	mov	r2, r0
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	0b5b      	lsrs	r3, r3, #13
 80082dc:	f003 0307 	and.w	r3, r3, #7
 80082e0:	4903      	ldr	r1, [pc, #12]	; (80082f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082e2:	5ccb      	ldrb	r3, [r1, r3]
 80082e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	40023800 	.word	0x40023800
 80082f0:	0801575c 	.word	0x0801575c

080082f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008300:	2300      	movs	r3, #0
 8008302:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10b      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008318:	2b00      	cmp	r3, #0
 800831a:	d105      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008324:	2b00      	cmp	r3, #0
 8008326:	d075      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008328:	4bad      	ldr	r3, [pc, #692]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800832a:	2200      	movs	r2, #0
 800832c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800832e:	f7fd f877 	bl	8005420 <HAL_GetTick>
 8008332:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008334:	e008      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008336:	f7fd f873 	bl	8005420 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d901      	bls.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e18b      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008348:	4ba6      	ldr	r3, [pc, #664]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f0      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d009      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	019a      	lsls	r2, r3, #6
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	071b      	lsls	r3, r3, #28
 800836c:	499d      	ldr	r1, [pc, #628]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800836e:	4313      	orrs	r3, r2
 8008370:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01f      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008380:	4b98      	ldr	r3, [pc, #608]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008386:	0f1b      	lsrs	r3, r3, #28
 8008388:	f003 0307 	and.w	r3, r3, #7
 800838c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	019a      	lsls	r2, r3, #6
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	061b      	lsls	r3, r3, #24
 800839a:	431a      	orrs	r2, r3
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	071b      	lsls	r3, r3, #28
 80083a0:	4990      	ldr	r1, [pc, #576]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80083a8:	4b8e      	ldr	r3, [pc, #568]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ae:	f023 021f 	bic.w	r2, r3, #31
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	498a      	ldr	r1, [pc, #552]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00d      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	019a      	lsls	r2, r3, #6
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	061b      	lsls	r3, r3, #24
 80083d8:	431a      	orrs	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	071b      	lsls	r3, r3, #28
 80083e0:	4980      	ldr	r1, [pc, #512]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80083e8:	4b7d      	ldr	r3, [pc, #500]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80083ea:	2201      	movs	r2, #1
 80083ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083ee:	f7fd f817 	bl	8005420 <HAL_GetTick>
 80083f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083f4:	e008      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80083f6:	f7fd f813 	bl	8005420 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d901      	bls.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e12b      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008408:	4b76      	ldr	r3, [pc, #472]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0f0      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0304 	and.w	r3, r3, #4
 800841c:	2b00      	cmp	r3, #0
 800841e:	d105      	bne.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008428:	2b00      	cmp	r3, #0
 800842a:	d079      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800842c:	4b6e      	ldr	r3, [pc, #440]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800842e:	2200      	movs	r2, #0
 8008430:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008432:	f7fc fff5 	bl	8005420 <HAL_GetTick>
 8008436:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008438:	e008      	b.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800843a:	f7fc fff1 	bl	8005420 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	2b02      	cmp	r3, #2
 8008446:	d901      	bls.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e109      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800844c:	4b65      	ldr	r3, [pc, #404]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008458:	d0ef      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d020      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008466:	4b5f      	ldr	r3, [pc, #380]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800846c:	0f1b      	lsrs	r3, r3, #28
 800846e:	f003 0307 	and.w	r3, r3, #7
 8008472:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	019a      	lsls	r2, r3, #6
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	061b      	lsls	r3, r3, #24
 8008480:	431a      	orrs	r2, r3
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	071b      	lsls	r3, r3, #28
 8008486:	4957      	ldr	r1, [pc, #348]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008488:	4313      	orrs	r3, r2
 800848a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800848e:	4b55      	ldr	r3, [pc, #340]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008494:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	3b01      	subs	r3, #1
 800849e:	021b      	lsls	r3, r3, #8
 80084a0:	4950      	ldr	r1, [pc, #320]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0308 	and.w	r3, r3, #8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01e      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80084b4:	4b4b      	ldr	r3, [pc, #300]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ba:	0e1b      	lsrs	r3, r3, #24
 80084bc:	f003 030f 	and.w	r3, r3, #15
 80084c0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	019a      	lsls	r2, r3, #6
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	061b      	lsls	r3, r3, #24
 80084cc:	431a      	orrs	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	071b      	lsls	r3, r3, #28
 80084d4:	4943      	ldr	r1, [pc, #268]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80084dc:	4b41      	ldr	r3, [pc, #260]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	493e      	ldr	r1, [pc, #248]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80084f2:	4b3d      	ldr	r3, [pc, #244]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084f4:	2201      	movs	r2, #1
 80084f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084f8:	f7fc ff92 	bl	8005420 <HAL_GetTick>
 80084fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084fe:	e008      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008500:	f7fc ff8e 	bl	8005420 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d901      	bls.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e0a6      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008512:	4b34      	ldr	r3, [pc, #208]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800851a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800851e:	d1ef      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0320 	and.w	r3, r3, #32
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 808d 	beq.w	8008648 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	4b2c      	ldr	r3, [pc, #176]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	4a2b      	ldr	r2, [pc, #172]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800853c:	6413      	str	r3, [r2, #64]	; 0x40
 800853e:	4b29      	ldr	r3, [pc, #164]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800854a:	4b28      	ldr	r3, [pc, #160]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a27      	ldr	r2, [pc, #156]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008554:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008556:	f7fc ff63 	bl	8005420 <HAL_GetTick>
 800855a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800855c:	e008      	b.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800855e:	f7fc ff5f 	bl	8005420 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	2b02      	cmp	r3, #2
 800856a:	d901      	bls.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e077      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008570:	4b1e      	ldr	r3, [pc, #120]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008578:	2b00      	cmp	r3, #0
 800857a:	d0f0      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800857c:	4b19      	ldr	r3, [pc, #100]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800857e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008584:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d039      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	429a      	cmp	r2, r3
 8008598:	d032      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800859a:	4b12      	ldr	r3, [pc, #72]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800859c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085a2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085a4:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80085a6:	2201      	movs	r2, #1
 80085a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085aa:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80085b0:	4a0c      	ldr	r2, [pc, #48]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80085b6:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d11e      	bne.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80085c2:	f7fc ff2d 	bl	8005420 <HAL_GetTick>
 80085c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085c8:	e014      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085ca:	f7fc ff29 	bl	8005420 <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d8:	4293      	cmp	r3, r2
 80085da:	d90b      	bls.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e03f      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80085e0:	42470068 	.word	0x42470068
 80085e4:	40023800 	.word	0x40023800
 80085e8:	42470070 	.word	0x42470070
 80085ec:	40007000 	.word	0x40007000
 80085f0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085f4:	4b1c      	ldr	r3, [pc, #112]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0e4      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800860c:	d10d      	bne.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800860e:	4b16      	ldr	r3, [pc, #88]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800861e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008622:	4911      	ldr	r1, [pc, #68]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008624:	4313      	orrs	r3, r2
 8008626:	608b      	str	r3, [r1, #8]
 8008628:	e005      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800862a:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	4a0e      	ldr	r2, [pc, #56]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008630:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008634:	6093      	str	r3, [r2, #8]
 8008636:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008638:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008642:	4909      	ldr	r1, [pc, #36]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008644:	4313      	orrs	r3, r2
 8008646:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b00      	cmp	r3, #0
 8008652:	d004      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800865a:	4b04      	ldr	r3, [pc, #16]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800865c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	40023800 	.word	0x40023800
 800866c:	424711e0 	.word	0x424711e0

08008670 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e083      	b.n	800878a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	7f5b      	ldrb	r3, [r3, #29]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b00      	cmp	r3, #0
 800868a:	d105      	bne.n	8008698 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7fb f876 	bl	8003784 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	22ca      	movs	r2, #202	; 0xca
 80086a4:	625a      	str	r2, [r3, #36]	; 0x24
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2253      	movs	r2, #83	; 0x53
 80086ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 faa8 	bl	8008c04 <RTC_EnterInitMode>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d008      	beq.n	80086cc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	22ff      	movs	r2, #255	; 0xff
 80086c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2204      	movs	r2, #4
 80086c6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e05e      	b.n	800878a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	6812      	ldr	r2, [r2, #0]
 80086d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80086da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086de:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6899      	ldr	r1, [r3, #8]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	431a      	orrs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	68d2      	ldr	r2, [r2, #12]
 8008706:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6919      	ldr	r1, [r3, #16]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	041a      	lsls	r2, r3, #16
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800872a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10e      	bne.n	8008758 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fa3a 	bl	8008bb4 <HAL_RTC_WaitForSynchro>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d008      	beq.n	8008758 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	22ff      	movs	r2, #255	; 0xff
 800874c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2204      	movs	r2, #4
 8008752:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e018      	b.n	800878a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008766:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	699a      	ldr	r2, [r3, #24]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	22ff      	movs	r2, #255	; 0xff
 8008780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008788:	2300      	movs	r3, #0
  }
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008792:	b590      	push	{r4, r7, lr}
 8008794:	b087      	sub	sp, #28
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	7f1b      	ldrb	r3, [r3, #28]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d101      	bne.n	80087ae <HAL_RTC_SetTime+0x1c>
 80087aa:	2302      	movs	r3, #2
 80087ac:	e0aa      	b.n	8008904 <HAL_RTC_SetTime+0x172>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2201      	movs	r2, #1
 80087b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2202      	movs	r2, #2
 80087b8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d126      	bne.n	800880e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d102      	bne.n	80087d4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2200      	movs	r2, #0
 80087d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f000 fa3f 	bl	8008c5c <RTC_ByteToBcd2>
 80087de:	4603      	mov	r3, r0
 80087e0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fa38 	bl	8008c5c <RTC_ByteToBcd2>
 80087ec:	4603      	mov	r3, r0
 80087ee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80087f0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	789b      	ldrb	r3, [r3, #2]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fa30 	bl	8008c5c <RTC_ByteToBcd2>
 80087fc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80087fe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	78db      	ldrb	r3, [r3, #3]
 8008806:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008808:	4313      	orrs	r3, r2
 800880a:	617b      	str	r3, [r7, #20]
 800880c:	e018      	b.n	8008840 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2200      	movs	r2, #0
 8008820:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	785b      	ldrb	r3, [r3, #1]
 800882c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800882e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008834:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	78db      	ldrb	r3, [r3, #3]
 800883a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800883c:	4313      	orrs	r3, r2
 800883e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	22ca      	movs	r2, #202	; 0xca
 8008846:	625a      	str	r2, [r3, #36]	; 0x24
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2253      	movs	r2, #83	; 0x53
 800884e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 f9d7 	bl	8008c04 <RTC_EnterInitMode>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	22ff      	movs	r2, #255	; 0xff
 8008862:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2204      	movs	r2, #4
 8008868:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e047      	b.n	8008904 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800887e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008882:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689a      	ldr	r2, [r3, #8]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008892:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6899      	ldr	r1, [r3, #8]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	431a      	orrs	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68da      	ldr	r2, [r3, #12]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088ba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f003 0320 	and.w	r3, r3, #32
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d111      	bne.n	80088ee <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 f972 	bl	8008bb4 <HAL_RTC_WaitForSynchro>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00b      	beq.n	80088ee <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	22ff      	movs	r2, #255	; 0xff
 80088dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2204      	movs	r2, #4
 80088e2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e00a      	b.n	8008904 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	22ff      	movs	r2, #255	; 0xff
 80088f4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2201      	movs	r2, #1
 80088fa:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008902:	2300      	movs	r3, #0
  }
}
 8008904:	4618      	mov	r0, r3
 8008906:	371c      	adds	r7, #28
 8008908:	46bd      	mov	sp, r7
 800890a:	bd90      	pop	{r4, r7, pc}

0800890c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800893e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008942:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	0c1b      	lsrs	r3, r3, #16
 8008948:	b2db      	uxtb	r3, r3
 800894a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800894e:	b2da      	uxtb	r2, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	0a1b      	lsrs	r3, r3, #8
 8008958:	b2db      	uxtb	r3, r3
 800895a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800895e:	b2da      	uxtb	r2, r3
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800896c:	b2da      	uxtb	r2, r3
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	0c1b      	lsrs	r3, r3, #16
 8008976:	b2db      	uxtb	r3, r3
 8008978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897c:	b2da      	uxtb	r2, r3
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d11a      	bne.n	80089be <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	4618      	mov	r0, r3
 800898e:	f000 f983 	bl	8008c98 <RTC_Bcd2ToByte>
 8008992:	4603      	mov	r3, r0
 8008994:	461a      	mov	r2, r3
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	785b      	ldrb	r3, [r3, #1]
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 f97a 	bl	8008c98 <RTC_Bcd2ToByte>
 80089a4:	4603      	mov	r3, r0
 80089a6:	461a      	mov	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	789b      	ldrb	r3, [r3, #2]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 f971 	bl	8008c98 <RTC_Bcd2ToByte>
 80089b6:	4603      	mov	r3, r0
 80089b8:	461a      	mov	r2, r3
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80089c8:	b590      	push	{r4, r7, lr}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	7f1b      	ldrb	r3, [r3, #28]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d101      	bne.n	80089e4 <HAL_RTC_SetDate+0x1c>
 80089e0:	2302      	movs	r3, #2
 80089e2:	e094      	b.n	8008b0e <HAL_RTC_SetDate+0x146>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2201      	movs	r2, #1
 80089e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2202      	movs	r2, #2
 80089ee:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10e      	bne.n	8008a14 <HAL_RTC_SetDate+0x4c>
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	785b      	ldrb	r3, [r3, #1]
 80089fa:	f003 0310 	and.w	r3, r3, #16
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d008      	beq.n	8008a14 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	785b      	ldrb	r3, [r3, #1]
 8008a06:	f023 0310 	bic.w	r3, r3, #16
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	330a      	adds	r3, #10
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d11c      	bne.n	8008a54 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	78db      	ldrb	r3, [r3, #3]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f91c 	bl	8008c5c <RTC_ByteToBcd2>
 8008a24:	4603      	mov	r3, r0
 8008a26:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	785b      	ldrb	r3, [r3, #1]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 f915 	bl	8008c5c <RTC_ByteToBcd2>
 8008a32:	4603      	mov	r3, r0
 8008a34:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008a36:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	789b      	ldrb	r3, [r3, #2]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 f90d 	bl	8008c5c <RTC_ByteToBcd2>
 8008a42:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008a44:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	617b      	str	r3, [r7, #20]
 8008a52:	e00e      	b.n	8008a72 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	78db      	ldrb	r3, [r3, #3]
 8008a58:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008a60:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008a66:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	22ca      	movs	r2, #202	; 0xca
 8008a78:	625a      	str	r2, [r3, #36]	; 0x24
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2253      	movs	r2, #83	; 0x53
 8008a80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 f8be 	bl	8008c04 <RTC_EnterInitMode>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00b      	beq.n	8008aa6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	22ff      	movs	r2, #255	; 0xff
 8008a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2204      	movs	r2, #4
 8008a9a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e033      	b.n	8008b0e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008ab0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ab4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68da      	ldr	r2, [r3, #12]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ac4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f003 0320 	and.w	r3, r3, #32
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d111      	bne.n	8008af8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f000 f86d 	bl	8008bb4 <HAL_RTC_WaitForSynchro>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	22ff      	movs	r2, #255	; 0xff
 8008ae6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2204      	movs	r2, #4
 8008aec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e00a      	b.n	8008b0e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	22ff      	movs	r2, #255	; 0xff
 8008afe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2201      	movs	r2, #1
 8008b04:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
  }
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	371c      	adds	r7, #28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd90      	pop	{r4, r7, pc}

08008b16 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b086      	sub	sp, #24
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b34:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	0c1b      	lsrs	r3, r3, #16
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	0a1b      	lsrs	r3, r3, #8
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	f003 031f 	and.w	r3, r3, #31
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	0b5b      	lsrs	r3, r3, #13
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	f003 0307 	and.w	r3, r3, #7
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d11a      	bne.n	8008baa <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	78db      	ldrb	r3, [r3, #3]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 f88d 	bl	8008c98 <RTC_Bcd2ToByte>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	461a      	mov	r2, r3
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	785b      	ldrb	r3, [r3, #1]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f884 	bl	8008c98 <RTC_Bcd2ToByte>
 8008b90:	4603      	mov	r3, r0
 8008b92:	461a      	mov	r2, r3
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	789b      	ldrb	r3, [r3, #2]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 f87b 	bl	8008c98 <RTC_Bcd2ToByte>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3718      	adds	r7, #24
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008bce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008bd0:	f7fc fc26 	bl	8005420 <HAL_GetTick>
 8008bd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008bd6:	e009      	b.n	8008bec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008bd8:	f7fc fc22 	bl	8005420 <HAL_GetTick>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008be6:	d901      	bls.n	8008bec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e007      	b.n	8008bfc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	f003 0320 	and.w	r3, r3, #32
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0ee      	beq.n	8008bd8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d119      	bne.n	8008c52 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f04f 32ff 	mov.w	r2, #4294967295
 8008c26:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c28:	f7fc fbfa 	bl	8005420 <HAL_GetTick>
 8008c2c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c2e:	e009      	b.n	8008c44 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c30:	f7fc fbf6 	bl	8005420 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c3e:	d901      	bls.n	8008c44 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e007      	b.n	8008c54 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0ee      	beq.n	8008c30 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	4603      	mov	r3, r0
 8008c64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008c6a:	e005      	b.n	8008c78 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	3b0a      	subs	r3, #10
 8008c76:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008c78:	79fb      	ldrb	r3, [r7, #7]
 8008c7a:	2b09      	cmp	r3, #9
 8008c7c:	d8f6      	bhi.n	8008c6c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	011b      	lsls	r3, r3, #4
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	79fb      	ldrb	r3, [r7, #7]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	b2db      	uxtb	r3, r3
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008ca6:	79fb      	ldrb	r3, [r7, #7]
 8008ca8:	091b      	lsrs	r3, r3, #4
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	461a      	mov	r2, r3
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	f003 030f 	and.w	r3, r3, #15
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	4413      	add	r3, r2
 8008cc6:	b2db      	uxtb	r3, r3
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e056      	b.n	8008d94 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d106      	bne.n	8008d06 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7fb f8e1 	bl	8003ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2202      	movs	r2, #2
 8008d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	431a      	orrs	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	431a      	orrs	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	431a      	orrs	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d42:	431a      	orrs	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	ea42 0103 	orr.w	r1, r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	0c1b      	lsrs	r3, r3, #16
 8008d64:	f003 0104 	and.w	r1, r3, #4
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	430a      	orrs	r2, r1
 8008d72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69da      	ldr	r2, [r3, #28]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	603b      	str	r3, [r7, #0]
 8008da8:	4613      	mov	r3, r2
 8008daa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008db8:	d112      	bne.n	8008de0 <HAL_SPI_Receive+0x44>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10e      	bne.n	8008de0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2204      	movs	r2, #4
 8008dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008dca:	88fa      	ldrh	r2, [r7, #6]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	68b9      	ldr	r1, [r7, #8]
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 f8e9 	bl	8008fae <HAL_SPI_TransmitReceive>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	e0e2      	b.n	8008fa6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d101      	bne.n	8008dee <HAL_SPI_Receive+0x52>
 8008dea:	2302      	movs	r3, #2
 8008dec:	e0db      	b.n	8008fa6 <HAL_SPI_Receive+0x20a>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008df6:	f7fc fb13 	bl	8005420 <HAL_GetTick>
 8008dfa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d002      	beq.n	8008e0e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008e08:	2302      	movs	r3, #2
 8008e0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e0c:	e0c2      	b.n	8008f94 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <HAL_SPI_Receive+0x7e>
 8008e14:	88fb      	ldrh	r3, [r7, #6]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e1e:	e0b9      	b.n	8008f94 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2204      	movs	r2, #4
 8008e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	88fa      	ldrh	r2, [r7, #6]
 8008e38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	88fa      	ldrh	r2, [r7, #6]
 8008e3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e66:	d107      	bne.n	8008e78 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e76:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e82:	2b40      	cmp	r3, #64	; 0x40
 8008e84:	d007      	beq.n	8008e96 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e94:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d162      	bne.n	8008f64 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008e9e:	e02e      	b.n	8008efe <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d115      	bne.n	8008eda <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f103 020c 	add.w	r2, r3, #12
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eba:	7812      	ldrb	r2, [r2, #0]
 8008ebc:	b2d2      	uxtb	r2, r2
 8008ebe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ed8:	e011      	b.n	8008efe <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eda:	f7fc faa1 	bl	8005420 <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d803      	bhi.n	8008ef2 <HAL_SPI_Receive+0x156>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef0:	d102      	bne.n	8008ef8 <HAL_SPI_Receive+0x15c>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008efc:	e04a      	b.n	8008f94 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1cb      	bne.n	8008ea0 <HAL_SPI_Receive+0x104>
 8008f08:	e031      	b.n	8008f6e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d113      	bne.n	8008f40 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68da      	ldr	r2, [r3, #12]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f22:	b292      	uxth	r2, r2
 8008f24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	1c9a      	adds	r2, r3, #2
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	3b01      	subs	r3, #1
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f3e:	e011      	b.n	8008f64 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f40:	f7fc fa6e 	bl	8005420 <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d803      	bhi.n	8008f58 <HAL_SPI_Receive+0x1bc>
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f56:	d102      	bne.n	8008f5e <HAL_SPI_Receive+0x1c2>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d102      	bne.n	8008f64 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008f62:	e017      	b.n	8008f94 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1cd      	bne.n	8008f0a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 fa27 	bl	80093c6 <SPI_EndRxTransaction>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2220      	movs	r2, #32
 8008f82:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	75fb      	strb	r3, [r7, #23]
 8008f90:	e000      	b.n	8008f94 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008f92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b08c      	sub	sp, #48	; 0x30
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
 8008fba:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d101      	bne.n	8008fd4 <HAL_SPI_TransmitReceive+0x26>
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e18a      	b.n	80092ea <HAL_SPI_TransmitReceive+0x33c>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fdc:	f7fc fa20 	bl	8005420 <HAL_GetTick>
 8008fe0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008ff2:	887b      	ldrh	r3, [r7, #2]
 8008ff4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ff6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d00f      	beq.n	800901e <HAL_SPI_TransmitReceive+0x70>
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009004:	d107      	bne.n	8009016 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d103      	bne.n	8009016 <HAL_SPI_TransmitReceive+0x68>
 800900e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009012:	2b04      	cmp	r3, #4
 8009014:	d003      	beq.n	800901e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009016:	2302      	movs	r3, #2
 8009018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800901c:	e15b      	b.n	80092d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d005      	beq.n	8009030 <HAL_SPI_TransmitReceive+0x82>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <HAL_SPI_TransmitReceive+0x82>
 800902a:	887b      	ldrh	r3, [r7, #2]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d103      	bne.n	8009038 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009036:	e14e      	b.n	80092d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b04      	cmp	r3, #4
 8009042:	d003      	beq.n	800904c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2205      	movs	r2, #5
 8009048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	887a      	ldrh	r2, [r7, #2]
 800905c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	887a      	ldrh	r2, [r7, #2]
 8009062:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	887a      	ldrh	r2, [r7, #2]
 800906e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	887a      	ldrh	r2, [r7, #2]
 8009074:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908c:	2b40      	cmp	r3, #64	; 0x40
 800908e:	d007      	beq.n	80090a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800909e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090a8:	d178      	bne.n	800919c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <HAL_SPI_TransmitReceive+0x10a>
 80090b2:	8b7b      	ldrh	r3, [r7, #26]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d166      	bne.n	8009186 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090bc:	881a      	ldrh	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c8:	1c9a      	adds	r2, r3, #2
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	3b01      	subs	r3, #1
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090dc:	e053      	b.n	8009186 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d11b      	bne.n	8009124 <HAL_SPI_TransmitReceive+0x176>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d016      	beq.n	8009124 <HAL_SPI_TransmitReceive+0x176>
 80090f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d113      	bne.n	8009124 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009100:	881a      	ldrh	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910c:	1c9a      	adds	r2, r3, #2
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009116:	b29b      	uxth	r3, r3
 8009118:	3b01      	subs	r3, #1
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b01      	cmp	r3, #1
 8009130:	d119      	bne.n	8009166 <HAL_SPI_TransmitReceive+0x1b8>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009136:	b29b      	uxth	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d014      	beq.n	8009166 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009146:	b292      	uxth	r2, r2
 8009148:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914e:	1c9a      	adds	r2, r3, #2
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009158:	b29b      	uxth	r3, r3
 800915a:	3b01      	subs	r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009162:	2301      	movs	r3, #1
 8009164:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009166:	f7fc f95b 	bl	8005420 <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009172:	429a      	cmp	r2, r3
 8009174:	d807      	bhi.n	8009186 <HAL_SPI_TransmitReceive+0x1d8>
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917c:	d003      	beq.n	8009186 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009184:	e0a7      	b.n	80092d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800918a:	b29b      	uxth	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1a6      	bne.n	80090de <HAL_SPI_TransmitReceive+0x130>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009194:	b29b      	uxth	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1a1      	bne.n	80090de <HAL_SPI_TransmitReceive+0x130>
 800919a:	e07c      	b.n	8009296 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <HAL_SPI_TransmitReceive+0x1fc>
 80091a4:	8b7b      	ldrh	r3, [r7, #26]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d16b      	bne.n	8009282 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	330c      	adds	r3, #12
 80091b4:	7812      	ldrb	r2, [r2, #0]
 80091b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091bc:	1c5a      	adds	r2, r3, #1
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	3b01      	subs	r3, #1
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091d0:	e057      	b.n	8009282 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f003 0302 	and.w	r3, r3, #2
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d11c      	bne.n	800921a <HAL_SPI_TransmitReceive+0x26c>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d017      	beq.n	800921a <HAL_SPI_TransmitReceive+0x26c>
 80091ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d114      	bne.n	800921a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	330c      	adds	r3, #12
 80091fa:	7812      	ldrb	r2, [r2, #0]
 80091fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800920c:	b29b      	uxth	r3, r3
 800920e:	3b01      	subs	r3, #1
 8009210:	b29a      	uxth	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009216:	2300      	movs	r3, #0
 8009218:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f003 0301 	and.w	r3, r3, #1
 8009224:	2b01      	cmp	r3, #1
 8009226:	d119      	bne.n	800925c <HAL_SPI_TransmitReceive+0x2ae>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800922c:	b29b      	uxth	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d014      	beq.n	800925c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923c:	b2d2      	uxtb	r2, r2
 800923e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800924e:	b29b      	uxth	r3, r3
 8009250:	3b01      	subs	r3, #1
 8009252:	b29a      	uxth	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009258:	2301      	movs	r3, #1
 800925a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800925c:	f7fc f8e0 	bl	8005420 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009268:	429a      	cmp	r2, r3
 800926a:	d803      	bhi.n	8009274 <HAL_SPI_TransmitReceive+0x2c6>
 800926c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009272:	d102      	bne.n	800927a <HAL_SPI_TransmitReceive+0x2cc>
 8009274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009276:	2b00      	cmp	r3, #0
 8009278:	d103      	bne.n	8009282 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009280:	e029      	b.n	80092d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009286:	b29b      	uxth	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1a2      	bne.n	80091d2 <HAL_SPI_TransmitReceive+0x224>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009290:	b29b      	uxth	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d19d      	bne.n	80091d2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009298:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f000 f8f8 	bl	8009490 <SPI_EndRxTxTransaction>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d006      	beq.n	80092b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2220      	movs	r2, #32
 80092b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80092b2:	e010      	b.n	80092d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10b      	bne.n	80092d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	e000      	b.n	80092d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80092d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80092e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3730      	adds	r7, #48	; 0x30
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	60f8      	str	r0, [r7, #12]
 80092fa:	60b9      	str	r1, [r7, #8]
 80092fc:	603b      	str	r3, [r7, #0]
 80092fe:	4613      	mov	r3, r2
 8009300:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009302:	e04c      	b.n	800939e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930a:	d048      	beq.n	800939e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800930c:	f7fc f888 	bl	8005420 <HAL_GetTick>
 8009310:	4602      	mov	r2, r0
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d902      	bls.n	8009322 <SPI_WaitFlagStateUntilTimeout+0x30>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d13d      	bne.n	800939e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009330:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800933a:	d111      	bne.n	8009360 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009344:	d004      	beq.n	8009350 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800934e:	d107      	bne.n	8009360 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800935e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009368:	d10f      	bne.n	800938a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009378:	601a      	str	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009388:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e00f      	b.n	80093be <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	689a      	ldr	r2, [r3, #8]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	4013      	ands	r3, r2
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	bf0c      	ite	eq
 80093ae:	2301      	moveq	r3, #1
 80093b0:	2300      	movne	r3, #0
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	461a      	mov	r2, r3
 80093b6:	79fb      	ldrb	r3, [r7, #7]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d1a3      	bne.n	8009304 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b086      	sub	sp, #24
 80093ca:	af02      	add	r7, sp, #8
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	60b9      	str	r1, [r7, #8]
 80093d0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093da:	d111      	bne.n	8009400 <SPI_EndRxTransaction+0x3a>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093e4:	d004      	beq.n	80093f0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ee:	d107      	bne.n	8009400 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093fe:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009408:	d12a      	bne.n	8009460 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009412:	d012      	beq.n	800943a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2200      	movs	r2, #0
 800941c:	2180      	movs	r1, #128	; 0x80
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f7ff ff67 	bl	80092f2 <SPI_WaitFlagStateUntilTimeout>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d02d      	beq.n	8009486 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942e:	f043 0220 	orr.w	r2, r3, #32
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e026      	b.n	8009488 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2200      	movs	r2, #0
 8009442:	2101      	movs	r1, #1
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f7ff ff54 	bl	80092f2 <SPI_WaitFlagStateUntilTimeout>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01a      	beq.n	8009486 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009454:	f043 0220 	orr.w	r2, r3, #32
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e013      	b.n	8009488 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	2200      	movs	r2, #0
 8009468:	2101      	movs	r1, #1
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f7ff ff41 	bl	80092f2 <SPI_WaitFlagStateUntilTimeout>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d007      	beq.n	8009486 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800947a:	f043 0220 	orr.w	r2, r3, #32
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e000      	b.n	8009488 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	af02      	add	r7, sp, #8
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800949c:	4b1b      	ldr	r3, [pc, #108]	; (800950c <SPI_EndRxTxTransaction+0x7c>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a1b      	ldr	r2, [pc, #108]	; (8009510 <SPI_EndRxTxTransaction+0x80>)
 80094a2:	fba2 2303 	umull	r2, r3, r2, r3
 80094a6:	0d5b      	lsrs	r3, r3, #21
 80094a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094ac:	fb02 f303 	mul.w	r3, r2, r3
 80094b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094ba:	d112      	bne.n	80094e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2200      	movs	r2, #0
 80094c4:	2180      	movs	r1, #128	; 0x80
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff ff13 	bl	80092f2 <SPI_WaitFlagStateUntilTimeout>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d016      	beq.n	8009500 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d6:	f043 0220 	orr.w	r2, r3, #32
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e00f      	b.n	8009502 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00a      	beq.n	80094fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f8:	2b80      	cmp	r3, #128	; 0x80
 80094fa:	d0f2      	beq.n	80094e2 <SPI_EndRxTxTransaction+0x52>
 80094fc:	e000      	b.n	8009500 <SPI_EndRxTxTransaction+0x70>
        break;
 80094fe:	bf00      	nop
  }

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3718      	adds	r7, #24
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	20000004 	.word	0x20000004
 8009510:	165e9f81 	.word	0x165e9f81

08009514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e01d      	b.n	8009562 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d106      	bne.n	8009540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7fa ffb4 	bl	80044a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2202      	movs	r2, #2
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3304      	adds	r3, #4
 8009550:	4619      	mov	r1, r3
 8009552:	4610      	mov	r0, r2
 8009554:	f000 fb98 	bl	8009c88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e01d      	b.n	80095b8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b00      	cmp	r3, #0
 8009586:	d106      	bne.n	8009596 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f815 	bl	80095c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2202      	movs	r2, #2
 800959a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	3304      	adds	r3, #4
 80095a6:	4619      	mov	r1, r3
 80095a8:	4610      	mov	r0, r2
 80095aa:	f000 fb6d 	bl	8009c88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2201      	movs	r2, #1
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 fe38 	bl	800a25c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a15      	ldr	r2, [pc, #84]	; (8009648 <HAL_TIM_PWM_Start+0x74>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d004      	beq.n	8009600 <HAL_TIM_PWM_Start+0x2c>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a14      	ldr	r2, [pc, #80]	; (800964c <HAL_TIM_PWM_Start+0x78>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d101      	bne.n	8009604 <HAL_TIM_PWM_Start+0x30>
 8009600:	2301      	movs	r3, #1
 8009602:	e000      	b.n	8009606 <HAL_TIM_PWM_Start+0x32>
 8009604:	2300      	movs	r3, #0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d007      	beq.n	800961a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009618:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	f003 0307 	and.w	r3, r3, #7
 8009624:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b06      	cmp	r3, #6
 800962a:	d007      	beq.n	800963c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f042 0201 	orr.w	r2, r2, #1
 800963a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	40010000 	.word	0x40010000
 800964c:	40010400 	.word	0x40010400

08009650 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2200      	movs	r2, #0
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	4618      	mov	r0, r3
 8009664:	f000 fdfa 	bl	800a25c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a22      	ldr	r2, [pc, #136]	; (80096f8 <HAL_TIM_PWM_Stop+0xa8>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d004      	beq.n	800967c <HAL_TIM_PWM_Stop+0x2c>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a21      	ldr	r2, [pc, #132]	; (80096fc <HAL_TIM_PWM_Stop+0xac>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d101      	bne.n	8009680 <HAL_TIM_PWM_Stop+0x30>
 800967c:	2301      	movs	r3, #1
 800967e:	e000      	b.n	8009682 <HAL_TIM_PWM_Stop+0x32>
 8009680:	2300      	movs	r3, #0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d017      	beq.n	80096b6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6a1a      	ldr	r2, [r3, #32]
 800968c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009690:	4013      	ands	r3, r2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10f      	bne.n	80096b6 <HAL_TIM_PWM_Stop+0x66>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6a1a      	ldr	r2, [r3, #32]
 800969c:	f240 4344 	movw	r3, #1092	; 0x444
 80096a0:	4013      	ands	r3, r2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d107      	bne.n	80096b6 <HAL_TIM_PWM_Stop+0x66>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	6a1a      	ldr	r2, [r3, #32]
 80096bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80096c0:	4013      	ands	r3, r2
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10f      	bne.n	80096e6 <HAL_TIM_PWM_Stop+0x96>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6a1a      	ldr	r2, [r3, #32]
 80096cc:	f240 4344 	movw	r3, #1092	; 0x444
 80096d0:	4013      	ands	r3, r2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d107      	bne.n	80096e6 <HAL_TIM_PWM_Stop+0x96>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f022 0201 	bic.w	r2, r2, #1
 80096e4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	40010000 	.word	0x40010000
 80096fc:	40010400 	.word	0x40010400

08009700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b02      	cmp	r3, #2
 8009714:	d122      	bne.n	800975c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f003 0302 	and.w	r3, r3, #2
 8009720:	2b02      	cmp	r3, #2
 8009722:	d11b      	bne.n	800975c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f06f 0202 	mvn.w	r2, #2
 800972c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fa82 	bl	8009c4c <HAL_TIM_IC_CaptureCallback>
 8009748:	e005      	b.n	8009756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fa74 	bl	8009c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fa85 	bl	8009c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	f003 0304 	and.w	r3, r3, #4
 8009766:	2b04      	cmp	r3, #4
 8009768:	d122      	bne.n	80097b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	f003 0304 	and.w	r3, r3, #4
 8009774:	2b04      	cmp	r3, #4
 8009776:	d11b      	bne.n	80097b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f06f 0204 	mvn.w	r2, #4
 8009780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2202      	movs	r2, #2
 8009786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fa58 	bl	8009c4c <HAL_TIM_IC_CaptureCallback>
 800979c:	e005      	b.n	80097aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fa4a 	bl	8009c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fa5b 	bl	8009c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	f003 0308 	and.w	r3, r3, #8
 80097ba:	2b08      	cmp	r3, #8
 80097bc:	d122      	bne.n	8009804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	f003 0308 	and.w	r3, r3, #8
 80097c8:	2b08      	cmp	r3, #8
 80097ca:	d11b      	bne.n	8009804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f06f 0208 	mvn.w	r2, #8
 80097d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2204      	movs	r2, #4
 80097da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	f003 0303 	and.w	r3, r3, #3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fa2e 	bl	8009c4c <HAL_TIM_IC_CaptureCallback>
 80097f0:	e005      	b.n	80097fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fa20 	bl	8009c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fa31 	bl	8009c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	2b10      	cmp	r3, #16
 8009810:	d122      	bne.n	8009858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f003 0310 	and.w	r3, r3, #16
 800981c:	2b10      	cmp	r3, #16
 800981e:	d11b      	bne.n	8009858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f06f 0210 	mvn.w	r2, #16
 8009828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2208      	movs	r2, #8
 800982e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa04 	bl	8009c4c <HAL_TIM_IC_CaptureCallback>
 8009844:	e005      	b.n	8009852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f9f6 	bl	8009c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fa07 	bl	8009c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b01      	cmp	r3, #1
 8009864:	d10e      	bne.n	8009884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b01      	cmp	r3, #1
 8009872:	d107      	bne.n	8009884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f06f 0201 	mvn.w	r2, #1
 800987c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f9d0 	bl	8009c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800988e:	2b80      	cmp	r3, #128	; 0x80
 8009890:	d10e      	bne.n	80098b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989c:	2b80      	cmp	r3, #128	; 0x80
 800989e:	d107      	bne.n	80098b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fd82 	bl	800a3b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ba:	2b40      	cmp	r3, #64	; 0x40
 80098bc:	d10e      	bne.n	80098dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c8:	2b40      	cmp	r3, #64	; 0x40
 80098ca:	d107      	bne.n	80098dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80098d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f9cc 	bl	8009c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	f003 0320 	and.w	r3, r3, #32
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	d10e      	bne.n	8009908 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f003 0320 	and.w	r3, r3, #32
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	d107      	bne.n	8009908 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f06f 0220 	mvn.w	r2, #32
 8009900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fd4c 	bl	800a3a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009908:	bf00      	nop
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009926:	2302      	movs	r3, #2
 8009928:	e0b4      	b.n	8009a94 <HAL_TIM_PWM_ConfigChannel+0x184>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2202      	movs	r2, #2
 8009936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b0c      	cmp	r3, #12
 800993e:	f200 809f 	bhi.w	8009a80 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009942:	a201      	add	r2, pc, #4	; (adr r2, 8009948 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009948:	0800997d 	.word	0x0800997d
 800994c:	08009a81 	.word	0x08009a81
 8009950:	08009a81 	.word	0x08009a81
 8009954:	08009a81 	.word	0x08009a81
 8009958:	080099bd 	.word	0x080099bd
 800995c:	08009a81 	.word	0x08009a81
 8009960:	08009a81 	.word	0x08009a81
 8009964:	08009a81 	.word	0x08009a81
 8009968:	080099ff 	.word	0x080099ff
 800996c:	08009a81 	.word	0x08009a81
 8009970:	08009a81 	.word	0x08009a81
 8009974:	08009a81 	.word	0x08009a81
 8009978:	08009a3f 	.word	0x08009a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68b9      	ldr	r1, [r7, #8]
 8009982:	4618      	mov	r0, r3
 8009984:	f000 fa20 	bl	8009dc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	699a      	ldr	r2, [r3, #24]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f042 0208 	orr.w	r2, r2, #8
 8009996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699a      	ldr	r2, [r3, #24]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f022 0204 	bic.w	r2, r2, #4
 80099a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6999      	ldr	r1, [r3, #24]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	691a      	ldr	r2, [r3, #16]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	619a      	str	r2, [r3, #24]
      break;
 80099ba:	e062      	b.n	8009a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68b9      	ldr	r1, [r7, #8]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fa70 	bl	8009ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	699a      	ldr	r2, [r3, #24]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	699a      	ldr	r2, [r3, #24]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6999      	ldr	r1, [r3, #24]
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	021a      	lsls	r2, r3, #8
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	430a      	orrs	r2, r1
 80099fa:	619a      	str	r2, [r3, #24]
      break;
 80099fc:	e041      	b.n	8009a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68b9      	ldr	r1, [r7, #8]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fac5 	bl	8009f94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	69da      	ldr	r2, [r3, #28]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f042 0208 	orr.w	r2, r2, #8
 8009a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	69da      	ldr	r2, [r3, #28]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f022 0204 	bic.w	r2, r2, #4
 8009a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	69d9      	ldr	r1, [r3, #28]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	691a      	ldr	r2, [r3, #16]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	430a      	orrs	r2, r1
 8009a3a:	61da      	str	r2, [r3, #28]
      break;
 8009a3c:	e021      	b.n	8009a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68b9      	ldr	r1, [r7, #8]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 fb19 	bl	800a07c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	69da      	ldr	r2, [r3, #28]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	69da      	ldr	r2, [r3, #28]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	69d9      	ldr	r1, [r3, #28]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	021a      	lsls	r2, r3, #8
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	61da      	str	r2, [r3, #28]
      break;
 8009a7e:	e000      	b.n	8009a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009a80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d101      	bne.n	8009ab4 <HAL_TIM_ConfigClockSource+0x18>
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	e0b3      	b.n	8009c1c <HAL_TIM_ConfigClockSource+0x180>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ada:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aec:	d03e      	beq.n	8009b6c <HAL_TIM_ConfigClockSource+0xd0>
 8009aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009af2:	f200 8087 	bhi.w	8009c04 <HAL_TIM_ConfigClockSource+0x168>
 8009af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009afa:	f000 8085 	beq.w	8009c08 <HAL_TIM_ConfigClockSource+0x16c>
 8009afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b02:	d87f      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x168>
 8009b04:	2b70      	cmp	r3, #112	; 0x70
 8009b06:	d01a      	beq.n	8009b3e <HAL_TIM_ConfigClockSource+0xa2>
 8009b08:	2b70      	cmp	r3, #112	; 0x70
 8009b0a:	d87b      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x168>
 8009b0c:	2b60      	cmp	r3, #96	; 0x60
 8009b0e:	d050      	beq.n	8009bb2 <HAL_TIM_ConfigClockSource+0x116>
 8009b10:	2b60      	cmp	r3, #96	; 0x60
 8009b12:	d877      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x168>
 8009b14:	2b50      	cmp	r3, #80	; 0x50
 8009b16:	d03c      	beq.n	8009b92 <HAL_TIM_ConfigClockSource+0xf6>
 8009b18:	2b50      	cmp	r3, #80	; 0x50
 8009b1a:	d873      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x168>
 8009b1c:	2b40      	cmp	r3, #64	; 0x40
 8009b1e:	d058      	beq.n	8009bd2 <HAL_TIM_ConfigClockSource+0x136>
 8009b20:	2b40      	cmp	r3, #64	; 0x40
 8009b22:	d86f      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x168>
 8009b24:	2b30      	cmp	r3, #48	; 0x30
 8009b26:	d064      	beq.n	8009bf2 <HAL_TIM_ConfigClockSource+0x156>
 8009b28:	2b30      	cmp	r3, #48	; 0x30
 8009b2a:	d86b      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x168>
 8009b2c:	2b20      	cmp	r3, #32
 8009b2e:	d060      	beq.n	8009bf2 <HAL_TIM_ConfigClockSource+0x156>
 8009b30:	2b20      	cmp	r3, #32
 8009b32:	d867      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x168>
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d05c      	beq.n	8009bf2 <HAL_TIM_ConfigClockSource+0x156>
 8009b38:	2b10      	cmp	r3, #16
 8009b3a:	d05a      	beq.n	8009bf2 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009b3c:	e062      	b.n	8009c04 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6818      	ldr	r0, [r3, #0]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	6899      	ldr	r1, [r3, #8]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	685a      	ldr	r2, [r3, #4]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	f000 fb65 	bl	800a21c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	609a      	str	r2, [r3, #8]
      break;
 8009b6a:	e04e      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	6899      	ldr	r1, [r3, #8]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	f000 fb4e 	bl	800a21c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689a      	ldr	r2, [r3, #8]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b8e:	609a      	str	r2, [r3, #8]
      break;
 8009b90:	e03b      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6818      	ldr	r0, [r3, #0]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	6859      	ldr	r1, [r3, #4]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f000 fac2 	bl	800a128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2150      	movs	r1, #80	; 0x50
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 fb1b 	bl	800a1e6 <TIM_ITRx_SetConfig>
      break;
 8009bb0:	e02b      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	6859      	ldr	r1, [r3, #4]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	f000 fae1 	bl	800a186 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2160      	movs	r1, #96	; 0x60
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 fb0b 	bl	800a1e6 <TIM_ITRx_SetConfig>
      break;
 8009bd0:	e01b      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	6859      	ldr	r1, [r3, #4]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	461a      	mov	r2, r3
 8009be0:	f000 faa2 	bl	800a128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2140      	movs	r1, #64	; 0x40
 8009bea:	4618      	mov	r0, r3
 8009bec:	f000 fafb 	bl	800a1e6 <TIM_ITRx_SetConfig>
      break;
 8009bf0:	e00b      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	f000 faf2 	bl	800a1e6 <TIM_ITRx_SetConfig>
      break;
 8009c02:	e002      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009c04:	bf00      	nop
 8009c06:	e000      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009c08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a40      	ldr	r2, [pc, #256]	; (8009d9c <TIM_Base_SetConfig+0x114>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d013      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ca6:	d00f      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a3d      	ldr	r2, [pc, #244]	; (8009da0 <TIM_Base_SetConfig+0x118>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d00b      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a3c      	ldr	r2, [pc, #240]	; (8009da4 <TIM_Base_SetConfig+0x11c>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d007      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a3b      	ldr	r2, [pc, #236]	; (8009da8 <TIM_Base_SetConfig+0x120>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d003      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a3a      	ldr	r2, [pc, #232]	; (8009dac <TIM_Base_SetConfig+0x124>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d108      	bne.n	8009cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a2f      	ldr	r2, [pc, #188]	; (8009d9c <TIM_Base_SetConfig+0x114>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d02b      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce8:	d027      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a2c      	ldr	r2, [pc, #176]	; (8009da0 <TIM_Base_SetConfig+0x118>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d023      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a2b      	ldr	r2, [pc, #172]	; (8009da4 <TIM_Base_SetConfig+0x11c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d01f      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a2a      	ldr	r2, [pc, #168]	; (8009da8 <TIM_Base_SetConfig+0x120>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d01b      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a29      	ldr	r2, [pc, #164]	; (8009dac <TIM_Base_SetConfig+0x124>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d017      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a28      	ldr	r2, [pc, #160]	; (8009db0 <TIM_Base_SetConfig+0x128>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d013      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a27      	ldr	r2, [pc, #156]	; (8009db4 <TIM_Base_SetConfig+0x12c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d00f      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a26      	ldr	r2, [pc, #152]	; (8009db8 <TIM_Base_SetConfig+0x130>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d00b      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a25      	ldr	r2, [pc, #148]	; (8009dbc <TIM_Base_SetConfig+0x134>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d007      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a24      	ldr	r2, [pc, #144]	; (8009dc0 <TIM_Base_SetConfig+0x138>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d003      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a23      	ldr	r2, [pc, #140]	; (8009dc4 <TIM_Base_SetConfig+0x13c>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d108      	bne.n	8009d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	689a      	ldr	r2, [r3, #8]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a0a      	ldr	r2, [pc, #40]	; (8009d9c <TIM_Base_SetConfig+0x114>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d003      	beq.n	8009d80 <TIM_Base_SetConfig+0xf8>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a0c      	ldr	r2, [pc, #48]	; (8009dac <TIM_Base_SetConfig+0x124>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d103      	bne.n	8009d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	691a      	ldr	r2, [r3, #16]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	615a      	str	r2, [r3, #20]
}
 8009d8e:	bf00      	nop
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	40010000 	.word	0x40010000
 8009da0:	40000400 	.word	0x40000400
 8009da4:	40000800 	.word	0x40000800
 8009da8:	40000c00 	.word	0x40000c00
 8009dac:	40010400 	.word	0x40010400
 8009db0:	40014000 	.word	0x40014000
 8009db4:	40014400 	.word	0x40014400
 8009db8:	40014800 	.word	0x40014800
 8009dbc:	40001800 	.word	0x40001800
 8009dc0:	40001c00 	.word	0x40001c00
 8009dc4:	40002000 	.word	0x40002000

08009dc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b087      	sub	sp, #28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	f023 0201 	bic.w	r2, r3, #1
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f023 0303 	bic.w	r3, r3, #3
 8009dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f023 0302 	bic.w	r3, r3, #2
 8009e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a20      	ldr	r2, [pc, #128]	; (8009ea0 <TIM_OC1_SetConfig+0xd8>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d003      	beq.n	8009e2c <TIM_OC1_SetConfig+0x64>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a1f      	ldr	r2, [pc, #124]	; (8009ea4 <TIM_OC1_SetConfig+0xdc>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d10c      	bne.n	8009e46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f023 0308 	bic.w	r3, r3, #8
 8009e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	f023 0304 	bic.w	r3, r3, #4
 8009e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a15      	ldr	r2, [pc, #84]	; (8009ea0 <TIM_OC1_SetConfig+0xd8>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d003      	beq.n	8009e56 <TIM_OC1_SetConfig+0x8e>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a14      	ldr	r2, [pc, #80]	; (8009ea4 <TIM_OC1_SetConfig+0xdc>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d111      	bne.n	8009e7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	693a      	ldr	r2, [r7, #16]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	621a      	str	r2, [r3, #32]
}
 8009e94:	bf00      	nop
 8009e96:	371c      	adds	r7, #28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	40010000 	.word	0x40010000
 8009ea4:	40010400 	.word	0x40010400

08009ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	f023 0210 	bic.w	r2, r3, #16
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	699b      	ldr	r3, [r3, #24]
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	021b      	lsls	r3, r3, #8
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f023 0320 	bic.w	r3, r3, #32
 8009ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	011b      	lsls	r3, r3, #4
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a22      	ldr	r2, [pc, #136]	; (8009f8c <TIM_OC2_SetConfig+0xe4>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d003      	beq.n	8009f10 <TIM_OC2_SetConfig+0x68>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a21      	ldr	r2, [pc, #132]	; (8009f90 <TIM_OC2_SetConfig+0xe8>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d10d      	bne.n	8009f2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	011b      	lsls	r3, r3, #4
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a17      	ldr	r2, [pc, #92]	; (8009f8c <TIM_OC2_SetConfig+0xe4>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d003      	beq.n	8009f3c <TIM_OC2_SetConfig+0x94>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a16      	ldr	r2, [pc, #88]	; (8009f90 <TIM_OC2_SetConfig+0xe8>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d113      	bne.n	8009f64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	621a      	str	r2, [r3, #32]
}
 8009f7e:	bf00      	nop
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	40010000 	.word	0x40010000
 8009f90:	40010400 	.word	0x40010400

08009f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	69db      	ldr	r3, [r3, #28]
 8009fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f023 0303 	bic.w	r3, r3, #3
 8009fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	021b      	lsls	r3, r3, #8
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a21      	ldr	r2, [pc, #132]	; (800a074 <TIM_OC3_SetConfig+0xe0>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d003      	beq.n	8009ffa <TIM_OC3_SetConfig+0x66>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a20      	ldr	r2, [pc, #128]	; (800a078 <TIM_OC3_SetConfig+0xe4>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d10d      	bne.n	800a016 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	021b      	lsls	r3, r3, #8
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a16      	ldr	r2, [pc, #88]	; (800a074 <TIM_OC3_SetConfig+0xe0>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d003      	beq.n	800a026 <TIM_OC3_SetConfig+0x92>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a15      	ldr	r2, [pc, #84]	; (800a078 <TIM_OC3_SetConfig+0xe4>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d113      	bne.n	800a04e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a02c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	4313      	orrs	r3, r2
 800a040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	011b      	lsls	r3, r3, #4
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	697a      	ldr	r2, [r7, #20]
 800a066:	621a      	str	r2, [r3, #32]
}
 800a068:	bf00      	nop
 800a06a:	371c      	adds	r7, #28
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	40010000 	.word	0x40010000
 800a078:	40010400 	.word	0x40010400

0800a07c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	69db      	ldr	r3, [r3, #28]
 800a0a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	021b      	lsls	r3, r3, #8
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	031b      	lsls	r3, r3, #12
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a12      	ldr	r2, [pc, #72]	; (800a120 <TIM_OC4_SetConfig+0xa4>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d003      	beq.n	800a0e4 <TIM_OC4_SetConfig+0x68>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a11      	ldr	r2, [pc, #68]	; (800a124 <TIM_OC4_SetConfig+0xa8>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d109      	bne.n	800a0f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	019b      	lsls	r3, r3, #6
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	621a      	str	r2, [r3, #32]
}
 800a112:	bf00      	nop
 800a114:	371c      	adds	r7, #28
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	40010000 	.word	0x40010000
 800a124:	40010400 	.word	0x40010400

0800a128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a128:	b480      	push	{r7}
 800a12a:	b087      	sub	sp, #28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6a1b      	ldr	r3, [r3, #32]
 800a138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	f023 0201 	bic.w	r2, r3, #1
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	011b      	lsls	r3, r3, #4
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f023 030a 	bic.w	r3, r3, #10
 800a164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	621a      	str	r2, [r3, #32]
}
 800a17a:	bf00      	nop
 800a17c:	371c      	adds	r7, #28
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a186:	b480      	push	{r7}
 800a188:	b087      	sub	sp, #28
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	60f8      	str	r0, [r7, #12]
 800a18e:	60b9      	str	r1, [r7, #8]
 800a190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	f023 0210 	bic.w	r2, r3, #16
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	031b      	lsls	r3, r3, #12
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	011b      	lsls	r3, r3, #4
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	621a      	str	r2, [r3, #32]
}
 800a1da:	bf00      	nop
 800a1dc:	371c      	adds	r7, #28
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b085      	sub	sp, #20
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4313      	orrs	r3, r2
 800a204:	f043 0307 	orr.w	r3, r3, #7
 800a208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	609a      	str	r2, [r3, #8]
}
 800a210:	bf00      	nop
 800a212:	3714      	adds	r7, #20
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a236:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	021a      	lsls	r2, r3, #8
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	431a      	orrs	r2, r3
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	4313      	orrs	r3, r2
 800a244:	697a      	ldr	r2, [r7, #20]
 800a246:	4313      	orrs	r3, r2
 800a248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	609a      	str	r2, [r3, #8]
}
 800a250:	bf00      	nop
 800a252:	371c      	adds	r7, #28
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f003 031f 	and.w	r3, r3, #31
 800a26e:	2201      	movs	r2, #1
 800a270:	fa02 f303 	lsl.w	r3, r2, r3
 800a274:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6a1a      	ldr	r2, [r3, #32]
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	43db      	mvns	r3, r3
 800a27e:	401a      	ands	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6a1a      	ldr	r2, [r3, #32]
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	f003 031f 	and.w	r3, r3, #31
 800a28e:	6879      	ldr	r1, [r7, #4]
 800a290:	fa01 f303 	lsl.w	r3, r1, r3
 800a294:	431a      	orrs	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	621a      	str	r2, [r3, #32]
}
 800a29a:	bf00      	nop
 800a29c:	371c      	adds	r7, #28
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
	...

0800a2a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d101      	bne.n	800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2bc:	2302      	movs	r3, #2
 800a2be:	e05a      	b.n	800a376 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a21      	ldr	r2, [pc, #132]	; (800a384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d022      	beq.n	800a34a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a30c:	d01d      	beq.n	800a34a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a1d      	ldr	r2, [pc, #116]	; (800a388 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d018      	beq.n	800a34a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a1b      	ldr	r2, [pc, #108]	; (800a38c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d013      	beq.n	800a34a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a1a      	ldr	r2, [pc, #104]	; (800a390 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d00e      	beq.n	800a34a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a18      	ldr	r2, [pc, #96]	; (800a394 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d009      	beq.n	800a34a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a17      	ldr	r2, [pc, #92]	; (800a398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d004      	beq.n	800a34a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a15      	ldr	r2, [pc, #84]	; (800a39c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d10c      	bne.n	800a364 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	4313      	orrs	r3, r2
 800a35a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	40010000 	.word	0x40010000
 800a388:	40000400 	.word	0x40000400
 800a38c:	40000800 	.word	0x40000800
 800a390:	40000c00 	.word	0x40000c00
 800a394:	40010400 	.word	0x40010400
 800a398:	40014000 	.word	0x40014000
 800a39c:	40001800 	.word	0x40001800

0800a3a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e03f      	b.n	800a45a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d106      	bne.n	800a3f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7fa f94c 	bl	800468c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2224      	movs	r2, #36	; 0x24
 800a3f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68da      	ldr	r2, [r3, #12]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a40a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 fc6d 	bl	800acec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	691a      	ldr	r2, [r3, #16]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	695a      	ldr	r2, [r3, #20]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68da      	ldr	r2, [r3, #12]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2220      	movs	r2, #32
 800a44c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2220      	movs	r2, #32
 800a454:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b088      	sub	sp, #32
 800a466:	af02      	add	r7, sp, #8
 800a468:	60f8      	str	r0, [r7, #12]
 800a46a:	60b9      	str	r1, [r7, #8]
 800a46c:	603b      	str	r3, [r7, #0]
 800a46e:	4613      	mov	r3, r2
 800a470:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a472:	2300      	movs	r3, #0
 800a474:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b20      	cmp	r3, #32
 800a480:	f040 8083 	bne.w	800a58a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d002      	beq.n	800a490 <HAL_UART_Transmit+0x2e>
 800a48a:	88fb      	ldrh	r3, [r7, #6]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e07b      	b.n	800a58c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d101      	bne.n	800a4a2 <HAL_UART_Transmit+0x40>
 800a49e:	2302      	movs	r3, #2
 800a4a0:	e074      	b.n	800a58c <HAL_UART_Transmit+0x12a>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2221      	movs	r2, #33	; 0x21
 800a4b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a4b8:	f7fa ffb2 	bl	8005420 <HAL_GetTick>
 800a4bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	88fa      	ldrh	r2, [r7, #6]
 800a4c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	88fa      	ldrh	r2, [r7, #6]
 800a4c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a4d2:	e042      	b.n	800a55a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ea:	d122      	bne.n	800a532 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2180      	movs	r1, #128	; 0x80
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f000 fa76 	bl	800a9e8 <UART_WaitOnFlagUntilTimeout>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a502:	2303      	movs	r3, #3
 800a504:	e042      	b.n	800a58c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	461a      	mov	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a518:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d103      	bne.n	800a52a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	3302      	adds	r3, #2
 800a526:	60bb      	str	r3, [r7, #8]
 800a528:	e017      	b.n	800a55a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	3301      	adds	r3, #1
 800a52e:	60bb      	str	r3, [r7, #8]
 800a530:	e013      	b.n	800a55a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2200      	movs	r2, #0
 800a53a:	2180      	movs	r1, #128	; 0x80
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f000 fa53 	bl	800a9e8 <UART_WaitOnFlagUntilTimeout>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e01f      	b.n	800a58c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	1c5a      	adds	r2, r3, #1
 800a550:	60ba      	str	r2, [r7, #8]
 800a552:	781a      	ldrb	r2, [r3, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a55e:	b29b      	uxth	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1b7      	bne.n	800a4d4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	2200      	movs	r2, #0
 800a56c:	2140      	movs	r1, #64	; 0x40
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 fa3a 	bl	800a9e8 <UART_WaitOnFlagUntilTimeout>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a57a:	2303      	movs	r3, #3
 800a57c:	e006      	b.n	800a58c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2220      	movs	r2, #32
 800a582:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	e000      	b.n	800a58c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a58a:	2302      	movs	r3, #2
  }
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3718      	adds	r7, #24
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	2b20      	cmp	r3, #32
 800a5ac:	d166      	bne.n	800a67c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <HAL_UART_Receive_DMA+0x26>
 800a5b4:	88fb      	ldrh	r3, [r7, #6]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d101      	bne.n	800a5be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e05f      	b.n	800a67e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d101      	bne.n	800a5cc <HAL_UART_Receive_DMA+0x38>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e058      	b.n	800a67e <HAL_UART_Receive_DMA+0xea>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	88fa      	ldrh	r2, [r7, #6]
 800a5de:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2222      	movs	r2, #34	; 0x22
 800a5ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f2:	4a25      	ldr	r2, [pc, #148]	; (800a688 <HAL_UART_Receive_DMA+0xf4>)
 800a5f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5fa:	4a24      	ldr	r2, [pc, #144]	; (800a68c <HAL_UART_Receive_DMA+0xf8>)
 800a5fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a602:	4a23      	ldr	r2, [pc, #140]	; (800a690 <HAL_UART_Receive_DMA+0xfc>)
 800a604:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a60a:	2200      	movs	r2, #0
 800a60c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800a60e:	f107 0308 	add.w	r3, r7, #8
 800a612:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3304      	adds	r3, #4
 800a61e:	4619      	mov	r1, r3
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	88fb      	ldrh	r3, [r7, #6]
 800a626:	f7fb fce7 	bl	8005ff8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a62a:	2300      	movs	r3, #0
 800a62c:	613b      	str	r3, [r7, #16]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	613b      	str	r3, [r7, #16]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	613b      	str	r3, [r7, #16]
 800a63e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68da      	ldr	r2, [r3, #12]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a656:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	695a      	ldr	r2, [r3, #20]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f042 0201 	orr.w	r2, r2, #1
 800a666:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	695a      	ldr	r2, [r3, #20]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a676:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	e000      	b.n	800a67e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a67c:	2302      	movs	r3, #2
  }
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3718      	adds	r7, #24
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	0800a8d1 	.word	0x0800a8d1
 800a68c:	0800a939 	.word	0x0800a939
 800a690:	0800a955 	.word	0x0800a955

0800a694 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b088      	sub	sp, #32
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	f003 030f 	and.w	r3, r3, #15
 800a6c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10d      	bne.n	800a6e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	f003 0320 	and.w	r3, r3, #32
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d008      	beq.n	800a6e6 <HAL_UART_IRQHandler+0x52>
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fa82 	bl	800abe8 <UART_Receive_IT>
      return;
 800a6e4:	e0d0      	b.n	800a888 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	f000 80b0 	beq.w	800a84e <HAL_UART_IRQHandler+0x1ba>
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f003 0301 	and.w	r3, r3, #1
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d105      	bne.n	800a704 <HAL_UART_IRQHandler+0x70>
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 80a5 	beq.w	800a84e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00a      	beq.n	800a724 <HAL_UART_IRQHandler+0x90>
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a714:	2b00      	cmp	r3, #0
 800a716:	d005      	beq.n	800a724 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a71c:	f043 0201 	orr.w	r2, r3, #1
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	f003 0304 	and.w	r3, r3, #4
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00a      	beq.n	800a744 <HAL_UART_IRQHandler+0xb0>
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	d005      	beq.n	800a744 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a73c:	f043 0202 	orr.w	r2, r3, #2
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00a      	beq.n	800a764 <HAL_UART_IRQHandler+0xd0>
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b00      	cmp	r3, #0
 800a756:	d005      	beq.n	800a764 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a75c:	f043 0204 	orr.w	r2, r3, #4
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	f003 0308 	and.w	r3, r3, #8
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00f      	beq.n	800a78e <HAL_UART_IRQHandler+0xfa>
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	f003 0320 	and.w	r3, r3, #32
 800a774:	2b00      	cmp	r3, #0
 800a776:	d104      	bne.n	800a782 <HAL_UART_IRQHandler+0xee>
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d005      	beq.n	800a78e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a786:	f043 0208 	orr.w	r2, r3, #8
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a792:	2b00      	cmp	r3, #0
 800a794:	d077      	beq.n	800a886 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	f003 0320 	and.w	r3, r3, #32
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d007      	beq.n	800a7b0 <HAL_UART_IRQHandler+0x11c>
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	f003 0320 	and.w	r3, r3, #32
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d002      	beq.n	800a7b0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fa1c 	bl	800abe8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ba:	2b40      	cmp	r3, #64	; 0x40
 800a7bc:	bf0c      	ite	eq
 800a7be:	2301      	moveq	r3, #1
 800a7c0:	2300      	movne	r3, #0
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ca:	f003 0308 	and.w	r3, r3, #8
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d102      	bne.n	800a7d8 <HAL_UART_IRQHandler+0x144>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d031      	beq.n	800a83c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f965 	bl	800aaa8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e8:	2b40      	cmp	r3, #64	; 0x40
 800a7ea:	d123      	bne.n	800a834 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	695a      	ldr	r2, [r3, #20]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7fa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a800:	2b00      	cmp	r3, #0
 800a802:	d013      	beq.n	800a82c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a808:	4a21      	ldr	r2, [pc, #132]	; (800a890 <HAL_UART_IRQHandler+0x1fc>)
 800a80a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a810:	4618      	mov	r0, r3
 800a812:	f7fb fc49 	bl	80060a8 <HAL_DMA_Abort_IT>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d016      	beq.n	800a84a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a826:	4610      	mov	r0, r2
 800a828:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a82a:	e00e      	b.n	800a84a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f845 	bl	800a8bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a832:	e00a      	b.n	800a84a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f841 	bl	800a8bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a83a:	e006      	b.n	800a84a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f83d 	bl	800a8bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a848:	e01d      	b.n	800a886 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a84a:	bf00      	nop
    return;
 800a84c:	e01b      	b.n	800a886 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a854:	2b00      	cmp	r3, #0
 800a856:	d008      	beq.n	800a86a <HAL_UART_IRQHandler+0x1d6>
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f952 	bl	800ab0c <UART_Transmit_IT>
    return;
 800a868:	e00e      	b.n	800a888 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a870:	2b00      	cmp	r3, #0
 800a872:	d009      	beq.n	800a888 <HAL_UART_IRQHandler+0x1f4>
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d004      	beq.n	800a888 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f99a 	bl	800abb8 <UART_EndTransmit_IT>
    return;
 800a884:	e000      	b.n	800a888 <HAL_UART_IRQHandler+0x1f4>
    return;
 800a886:	bf00      	nop
  }
}
 800a888:	3720      	adds	r7, #32
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	0800aae5 	.word	0x0800aae5

0800a894 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8dc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d11e      	bne.n	800a92a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68da      	ldr	r2, [r3, #12]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a900:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	695a      	ldr	r2, [r3, #20]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f022 0201 	bic.w	r2, r2, #1
 800a910:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	695a      	ldr	r2, [r3, #20]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a920:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2220      	movs	r2, #32
 800a926:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7f8 fdea 	bl	8003504 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a930:	bf00      	nop
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a944:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7ff ffae 	bl	800a8a8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a94c:	bf00      	nop
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a95c:	2300      	movs	r3, #0
 800a95e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a964:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a970:	2b80      	cmp	r3, #128	; 0x80
 800a972:	bf0c      	ite	eq
 800a974:	2301      	moveq	r3, #1
 800a976:	2300      	movne	r3, #0
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b21      	cmp	r3, #33	; 0x21
 800a986:	d108      	bne.n	800a99a <UART_DMAError+0x46>
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d005      	beq.n	800a99a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	2200      	movs	r2, #0
 800a992:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a994:	68b8      	ldr	r0, [r7, #8]
 800a996:	f000 f871 	bl	800aa7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	695b      	ldr	r3, [r3, #20]
 800a9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a4:	2b40      	cmp	r3, #64	; 0x40
 800a9a6:	bf0c      	ite	eq
 800a9a8:	2301      	moveq	r3, #1
 800a9aa:	2300      	movne	r3, #0
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	2b22      	cmp	r3, #34	; 0x22
 800a9ba:	d108      	bne.n	800a9ce <UART_DMAError+0x7a>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d005      	beq.n	800a9ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a9c8:	68b8      	ldr	r0, [r7, #8]
 800a9ca:	f000 f86d 	bl	800aaa8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9d2:	f043 0210 	orr.w	r2, r3, #16
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9da:	68b8      	ldr	r0, [r7, #8]
 800a9dc:	f7ff ff6e 	bl	800a8bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9e0:	bf00      	nop
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	603b      	str	r3, [r7, #0]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9f8:	e02c      	b.n	800aa54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa00:	d028      	beq.n	800aa54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d007      	beq.n	800aa18 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa08:	f7fa fd0a 	bl	8005420 <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	69ba      	ldr	r2, [r7, #24]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d21d      	bcs.n	800aa54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68da      	ldr	r2, [r3, #12]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aa26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	695a      	ldr	r2, [r3, #20]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 0201 	bic.w	r2, r2, #1
 800aa36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800aa50:	2303      	movs	r3, #3
 800aa52:	e00f      	b.n	800aa74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	bf0c      	ite	eq
 800aa64:	2301      	moveq	r3, #1
 800aa66:	2300      	movne	r3, #0
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d0c3      	beq.n	800a9fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68da      	ldr	r2, [r3, #12]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800aa92:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2220      	movs	r2, #32
 800aa98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68da      	ldr	r2, [r3, #12]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aabe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	695a      	ldr	r2, [r3, #20]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f022 0201 	bic.w	r2, r2, #1
 800aace:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2220      	movs	r2, #32
 800aad4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f7ff fedc 	bl	800a8bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab04:	bf00      	nop
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b21      	cmp	r3, #33	; 0x21
 800ab1e:	d144      	bne.n	800abaa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab28:	d11a      	bne.n	800ab60 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	461a      	mov	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab3e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d105      	bne.n	800ab54 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	1c9a      	adds	r2, r3, #2
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	621a      	str	r2, [r3, #32]
 800ab52:	e00e      	b.n	800ab72 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a1b      	ldr	r3, [r3, #32]
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	621a      	str	r2, [r3, #32]
 800ab5e:	e008      	b.n	800ab72 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a1b      	ldr	r3, [r3, #32]
 800ab64:	1c59      	adds	r1, r3, #1
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	6211      	str	r1, [r2, #32]
 800ab6a:	781a      	ldrb	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10f      	bne.n	800aba6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68da      	ldr	r2, [r3, #12]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68da      	ldr	r2, [r3, #12]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aba4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	e000      	b.n	800abac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800abaa:	2302      	movs	r3, #2
  }
}
 800abac:	4618      	mov	r0, r3
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68da      	ldr	r2, [r3, #12]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2220      	movs	r2, #32
 800abd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7ff fe5b 	bl	800a894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b22      	cmp	r3, #34	; 0x22
 800abfa:	d171      	bne.n	800ace0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac04:	d123      	bne.n	800ac4e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10e      	bne.n	800ac32 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2a:	1c9a      	adds	r2, r3, #2
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	629a      	str	r2, [r3, #40]	; 0x28
 800ac30:	e029      	b.n	800ac86 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac46:	1c5a      	adds	r2, r3, #1
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	629a      	str	r2, [r3, #40]	; 0x28
 800ac4c:	e01b      	b.n	800ac86 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10a      	bne.n	800ac6c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	6858      	ldr	r0, [r3, #4]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac60:	1c59      	adds	r1, r3, #1
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	6291      	str	r1, [r2, #40]	; 0x28
 800ac66:	b2c2      	uxtb	r2, r0
 800ac68:	701a      	strb	r2, [r3, #0]
 800ac6a:	e00c      	b.n	800ac86 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac78:	1c58      	adds	r0, r3, #1
 800ac7a:	6879      	ldr	r1, [r7, #4]
 800ac7c:	6288      	str	r0, [r1, #40]	; 0x28
 800ac7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ac82:	b2d2      	uxtb	r2, r2
 800ac84:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	3b01      	subs	r3, #1
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	4619      	mov	r1, r3
 800ac94:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d120      	bne.n	800acdc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68da      	ldr	r2, [r3, #12]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f022 0220 	bic.w	r2, r2, #32
 800aca8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68da      	ldr	r2, [r3, #12]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800acb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	695a      	ldr	r2, [r3, #20]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f022 0201 	bic.w	r2, r2, #1
 800acc8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2220      	movs	r2, #32
 800acce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7f8 fc16 	bl	8003504 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	e002      	b.n	800ace2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	e000      	b.n	800ace2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ace0:	2302      	movs	r3, #2
  }
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	b0bd      	sub	sp, #244	; 0xf4
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ad04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad08:	68d9      	ldr	r1, [r3, #12]
 800ad0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	ea40 0301 	orr.w	r3, r0, r1
 800ad14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ad16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad1a:	689a      	ldr	r2, [r3, #8]
 800ad1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	431a      	orrs	r2, r3
 800ad24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	431a      	orrs	r2, r3
 800ad2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad30:	69db      	ldr	r3, [r3, #28]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800ad38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ad44:	f021 010c 	bic.w	r1, r1, #12
 800ad48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad52:	430b      	orrs	r3, r1
 800ad54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	695b      	ldr	r3, [r3, #20]
 800ad5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ad62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad66:	6999      	ldr	r1, [r3, #24]
 800ad68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	ea40 0301 	orr.w	r3, r0, r1
 800ad72:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad7e:	f040 81a5 	bne.w	800b0cc <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ad82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	4bcd      	ldr	r3, [pc, #820]	; (800b0c0 <UART_SetConfig+0x3d4>)
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d006      	beq.n	800ad9c <UART_SetConfig+0xb0>
 800ad8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	4bcb      	ldr	r3, [pc, #812]	; (800b0c4 <UART_SetConfig+0x3d8>)
 800ad96:	429a      	cmp	r2, r3
 800ad98:	f040 80cb 	bne.w	800af32 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ad9c:	f7fd fa96 	bl	80082cc <HAL_RCC_GetPCLK2Freq>
 800ada0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ada4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ada8:	461c      	mov	r4, r3
 800adaa:	f04f 0500 	mov.w	r5, #0
 800adae:	4622      	mov	r2, r4
 800adb0:	462b      	mov	r3, r5
 800adb2:	1891      	adds	r1, r2, r2
 800adb4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800adb8:	415b      	adcs	r3, r3
 800adba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800adbe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800adc2:	1912      	adds	r2, r2, r4
 800adc4:	eb45 0303 	adc.w	r3, r5, r3
 800adc8:	f04f 0000 	mov.w	r0, #0
 800adcc:	f04f 0100 	mov.w	r1, #0
 800add0:	00d9      	lsls	r1, r3, #3
 800add2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800add6:	00d0      	lsls	r0, r2, #3
 800add8:	4602      	mov	r2, r0
 800adda:	460b      	mov	r3, r1
 800addc:	1911      	adds	r1, r2, r4
 800adde:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800ade2:	416b      	adcs	r3, r5
 800ade4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ade8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	461a      	mov	r2, r3
 800adf0:	f04f 0300 	mov.w	r3, #0
 800adf4:	1891      	adds	r1, r2, r2
 800adf6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800adfa:	415b      	adcs	r3, r3
 800adfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae00:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800ae04:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800ae08:	f7f5 ff4e 	bl	8000ca8 <__aeabi_uldivmod>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	4bad      	ldr	r3, [pc, #692]	; (800b0c8 <UART_SetConfig+0x3dc>)
 800ae12:	fba3 2302 	umull	r2, r3, r3, r2
 800ae16:	095b      	lsrs	r3, r3, #5
 800ae18:	011e      	lsls	r6, r3, #4
 800ae1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae1e:	461c      	mov	r4, r3
 800ae20:	f04f 0500 	mov.w	r5, #0
 800ae24:	4622      	mov	r2, r4
 800ae26:	462b      	mov	r3, r5
 800ae28:	1891      	adds	r1, r2, r2
 800ae2a:	67b9      	str	r1, [r7, #120]	; 0x78
 800ae2c:	415b      	adcs	r3, r3
 800ae2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ae30:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800ae34:	1912      	adds	r2, r2, r4
 800ae36:	eb45 0303 	adc.w	r3, r5, r3
 800ae3a:	f04f 0000 	mov.w	r0, #0
 800ae3e:	f04f 0100 	mov.w	r1, #0
 800ae42:	00d9      	lsls	r1, r3, #3
 800ae44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ae48:	00d0      	lsls	r0, r2, #3
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	1911      	adds	r1, r2, r4
 800ae50:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800ae54:	416b      	adcs	r3, r5
 800ae56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	461a      	mov	r2, r3
 800ae62:	f04f 0300 	mov.w	r3, #0
 800ae66:	1891      	adds	r1, r2, r2
 800ae68:	6739      	str	r1, [r7, #112]	; 0x70
 800ae6a:	415b      	adcs	r3, r3
 800ae6c:	677b      	str	r3, [r7, #116]	; 0x74
 800ae6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800ae72:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800ae76:	f7f5 ff17 	bl	8000ca8 <__aeabi_uldivmod>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4b92      	ldr	r3, [pc, #584]	; (800b0c8 <UART_SetConfig+0x3dc>)
 800ae80:	fba3 1302 	umull	r1, r3, r3, r2
 800ae84:	095b      	lsrs	r3, r3, #5
 800ae86:	2164      	movs	r1, #100	; 0x64
 800ae88:	fb01 f303 	mul.w	r3, r1, r3
 800ae8c:	1ad3      	subs	r3, r2, r3
 800ae8e:	00db      	lsls	r3, r3, #3
 800ae90:	3332      	adds	r3, #50	; 0x32
 800ae92:	4a8d      	ldr	r2, [pc, #564]	; (800b0c8 <UART_SetConfig+0x3dc>)
 800ae94:	fba2 2303 	umull	r2, r3, r2, r3
 800ae98:	095b      	lsrs	r3, r3, #5
 800ae9a:	005b      	lsls	r3, r3, #1
 800ae9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aea0:	441e      	add	r6, r3
 800aea2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aea6:	4618      	mov	r0, r3
 800aea8:	f04f 0100 	mov.w	r1, #0
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	1894      	adds	r4, r2, r2
 800aeb2:	66bc      	str	r4, [r7, #104]	; 0x68
 800aeb4:	415b      	adcs	r3, r3
 800aeb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aeb8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800aebc:	1812      	adds	r2, r2, r0
 800aebe:	eb41 0303 	adc.w	r3, r1, r3
 800aec2:	f04f 0400 	mov.w	r4, #0
 800aec6:	f04f 0500 	mov.w	r5, #0
 800aeca:	00dd      	lsls	r5, r3, #3
 800aecc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aed0:	00d4      	lsls	r4, r2, #3
 800aed2:	4622      	mov	r2, r4
 800aed4:	462b      	mov	r3, r5
 800aed6:	1814      	adds	r4, r2, r0
 800aed8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800aedc:	414b      	adcs	r3, r1
 800aede:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	461a      	mov	r2, r3
 800aeea:	f04f 0300 	mov.w	r3, #0
 800aeee:	1891      	adds	r1, r2, r2
 800aef0:	6639      	str	r1, [r7, #96]	; 0x60
 800aef2:	415b      	adcs	r3, r3
 800aef4:	667b      	str	r3, [r7, #100]	; 0x64
 800aef6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800aefa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aefe:	f7f5 fed3 	bl	8000ca8 <__aeabi_uldivmod>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	4b70      	ldr	r3, [pc, #448]	; (800b0c8 <UART_SetConfig+0x3dc>)
 800af08:	fba3 1302 	umull	r1, r3, r3, r2
 800af0c:	095b      	lsrs	r3, r3, #5
 800af0e:	2164      	movs	r1, #100	; 0x64
 800af10:	fb01 f303 	mul.w	r3, r1, r3
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	00db      	lsls	r3, r3, #3
 800af18:	3332      	adds	r3, #50	; 0x32
 800af1a:	4a6b      	ldr	r2, [pc, #428]	; (800b0c8 <UART_SetConfig+0x3dc>)
 800af1c:	fba2 2303 	umull	r2, r3, r2, r3
 800af20:	095b      	lsrs	r3, r3, #5
 800af22:	f003 0207 	and.w	r2, r3, #7
 800af26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4432      	add	r2, r6
 800af2e:	609a      	str	r2, [r3, #8]
 800af30:	e26d      	b.n	800b40e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af32:	f7fd f9b7 	bl	80082a4 <HAL_RCC_GetPCLK1Freq>
 800af36:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af3e:	461c      	mov	r4, r3
 800af40:	f04f 0500 	mov.w	r5, #0
 800af44:	4622      	mov	r2, r4
 800af46:	462b      	mov	r3, r5
 800af48:	1891      	adds	r1, r2, r2
 800af4a:	65b9      	str	r1, [r7, #88]	; 0x58
 800af4c:	415b      	adcs	r3, r3
 800af4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800af54:	1912      	adds	r2, r2, r4
 800af56:	eb45 0303 	adc.w	r3, r5, r3
 800af5a:	f04f 0000 	mov.w	r0, #0
 800af5e:	f04f 0100 	mov.w	r1, #0
 800af62:	00d9      	lsls	r1, r3, #3
 800af64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af68:	00d0      	lsls	r0, r2, #3
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	1911      	adds	r1, r2, r4
 800af70:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800af74:	416b      	adcs	r3, r5
 800af76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	461a      	mov	r2, r3
 800af82:	f04f 0300 	mov.w	r3, #0
 800af86:	1891      	adds	r1, r2, r2
 800af88:	6539      	str	r1, [r7, #80]	; 0x50
 800af8a:	415b      	adcs	r3, r3
 800af8c:	657b      	str	r3, [r7, #84]	; 0x54
 800af8e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800af92:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800af96:	f7f5 fe87 	bl	8000ca8 <__aeabi_uldivmod>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	4b4a      	ldr	r3, [pc, #296]	; (800b0c8 <UART_SetConfig+0x3dc>)
 800afa0:	fba3 2302 	umull	r2, r3, r3, r2
 800afa4:	095b      	lsrs	r3, r3, #5
 800afa6:	011e      	lsls	r6, r3, #4
 800afa8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800afac:	461c      	mov	r4, r3
 800afae:	f04f 0500 	mov.w	r5, #0
 800afb2:	4622      	mov	r2, r4
 800afb4:	462b      	mov	r3, r5
 800afb6:	1891      	adds	r1, r2, r2
 800afb8:	64b9      	str	r1, [r7, #72]	; 0x48
 800afba:	415b      	adcs	r3, r3
 800afbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800afc2:	1912      	adds	r2, r2, r4
 800afc4:	eb45 0303 	adc.w	r3, r5, r3
 800afc8:	f04f 0000 	mov.w	r0, #0
 800afcc:	f04f 0100 	mov.w	r1, #0
 800afd0:	00d9      	lsls	r1, r3, #3
 800afd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800afd6:	00d0      	lsls	r0, r2, #3
 800afd8:	4602      	mov	r2, r0
 800afda:	460b      	mov	r3, r1
 800afdc:	1911      	adds	r1, r2, r4
 800afde:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800afe2:	416b      	adcs	r3, r5
 800afe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800afe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	461a      	mov	r2, r3
 800aff0:	f04f 0300 	mov.w	r3, #0
 800aff4:	1891      	adds	r1, r2, r2
 800aff6:	6439      	str	r1, [r7, #64]	; 0x40
 800aff8:	415b      	adcs	r3, r3
 800affa:	647b      	str	r3, [r7, #68]	; 0x44
 800affc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b000:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800b004:	f7f5 fe50 	bl	8000ca8 <__aeabi_uldivmod>
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	4b2e      	ldr	r3, [pc, #184]	; (800b0c8 <UART_SetConfig+0x3dc>)
 800b00e:	fba3 1302 	umull	r1, r3, r3, r2
 800b012:	095b      	lsrs	r3, r3, #5
 800b014:	2164      	movs	r1, #100	; 0x64
 800b016:	fb01 f303 	mul.w	r3, r1, r3
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	3332      	adds	r3, #50	; 0x32
 800b020:	4a29      	ldr	r2, [pc, #164]	; (800b0c8 <UART_SetConfig+0x3dc>)
 800b022:	fba2 2303 	umull	r2, r3, r2, r3
 800b026:	095b      	lsrs	r3, r3, #5
 800b028:	005b      	lsls	r3, r3, #1
 800b02a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b02e:	441e      	add	r6, r3
 800b030:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b034:	4618      	mov	r0, r3
 800b036:	f04f 0100 	mov.w	r1, #0
 800b03a:	4602      	mov	r2, r0
 800b03c:	460b      	mov	r3, r1
 800b03e:	1894      	adds	r4, r2, r2
 800b040:	63bc      	str	r4, [r7, #56]	; 0x38
 800b042:	415b      	adcs	r3, r3
 800b044:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b046:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b04a:	1812      	adds	r2, r2, r0
 800b04c:	eb41 0303 	adc.w	r3, r1, r3
 800b050:	f04f 0400 	mov.w	r4, #0
 800b054:	f04f 0500 	mov.w	r5, #0
 800b058:	00dd      	lsls	r5, r3, #3
 800b05a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b05e:	00d4      	lsls	r4, r2, #3
 800b060:	4622      	mov	r2, r4
 800b062:	462b      	mov	r3, r5
 800b064:	1814      	adds	r4, r2, r0
 800b066:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800b06a:	414b      	adcs	r3, r1
 800b06c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	461a      	mov	r2, r3
 800b078:	f04f 0300 	mov.w	r3, #0
 800b07c:	1891      	adds	r1, r2, r2
 800b07e:	6339      	str	r1, [r7, #48]	; 0x30
 800b080:	415b      	adcs	r3, r3
 800b082:	637b      	str	r3, [r7, #52]	; 0x34
 800b084:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b088:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b08c:	f7f5 fe0c 	bl	8000ca8 <__aeabi_uldivmod>
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <UART_SetConfig+0x3dc>)
 800b096:	fba3 1302 	umull	r1, r3, r3, r2
 800b09a:	095b      	lsrs	r3, r3, #5
 800b09c:	2164      	movs	r1, #100	; 0x64
 800b09e:	fb01 f303 	mul.w	r3, r1, r3
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	00db      	lsls	r3, r3, #3
 800b0a6:	3332      	adds	r3, #50	; 0x32
 800b0a8:	4a07      	ldr	r2, [pc, #28]	; (800b0c8 <UART_SetConfig+0x3dc>)
 800b0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ae:	095b      	lsrs	r3, r3, #5
 800b0b0:	f003 0207 	and.w	r2, r3, #7
 800b0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4432      	add	r2, r6
 800b0bc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b0be:	e1a6      	b.n	800b40e <UART_SetConfig+0x722>
 800b0c0:	40011000 	.word	0x40011000
 800b0c4:	40011400 	.word	0x40011400
 800b0c8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b0cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	4bd1      	ldr	r3, [pc, #836]	; (800b418 <UART_SetConfig+0x72c>)
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d006      	beq.n	800b0e6 <UART_SetConfig+0x3fa>
 800b0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	4bcf      	ldr	r3, [pc, #828]	; (800b41c <UART_SetConfig+0x730>)
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	f040 80ca 	bne.w	800b27a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b0e6:	f7fd f8f1 	bl	80082cc <HAL_RCC_GetPCLK2Freq>
 800b0ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b0ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0f2:	461c      	mov	r4, r3
 800b0f4:	f04f 0500 	mov.w	r5, #0
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	462b      	mov	r3, r5
 800b0fc:	1891      	adds	r1, r2, r2
 800b0fe:	62b9      	str	r1, [r7, #40]	; 0x28
 800b100:	415b      	adcs	r3, r3
 800b102:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b104:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b108:	1912      	adds	r2, r2, r4
 800b10a:	eb45 0303 	adc.w	r3, r5, r3
 800b10e:	f04f 0000 	mov.w	r0, #0
 800b112:	f04f 0100 	mov.w	r1, #0
 800b116:	00d9      	lsls	r1, r3, #3
 800b118:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b11c:	00d0      	lsls	r0, r2, #3
 800b11e:	4602      	mov	r2, r0
 800b120:	460b      	mov	r3, r1
 800b122:	eb12 0a04 	adds.w	sl, r2, r4
 800b126:	eb43 0b05 	adc.w	fp, r3, r5
 800b12a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	4618      	mov	r0, r3
 800b132:	f04f 0100 	mov.w	r1, #0
 800b136:	f04f 0200 	mov.w	r2, #0
 800b13a:	f04f 0300 	mov.w	r3, #0
 800b13e:	008b      	lsls	r3, r1, #2
 800b140:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b144:	0082      	lsls	r2, r0, #2
 800b146:	4650      	mov	r0, sl
 800b148:	4659      	mov	r1, fp
 800b14a:	f7f5 fdad 	bl	8000ca8 <__aeabi_uldivmod>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4bb3      	ldr	r3, [pc, #716]	; (800b420 <UART_SetConfig+0x734>)
 800b154:	fba3 2302 	umull	r2, r3, r3, r2
 800b158:	095b      	lsrs	r3, r3, #5
 800b15a:	011e      	lsls	r6, r3, #4
 800b15c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b160:	4618      	mov	r0, r3
 800b162:	f04f 0100 	mov.w	r1, #0
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	1894      	adds	r4, r2, r2
 800b16c:	623c      	str	r4, [r7, #32]
 800b16e:	415b      	adcs	r3, r3
 800b170:	627b      	str	r3, [r7, #36]	; 0x24
 800b172:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b176:	1812      	adds	r2, r2, r0
 800b178:	eb41 0303 	adc.w	r3, r1, r3
 800b17c:	f04f 0400 	mov.w	r4, #0
 800b180:	f04f 0500 	mov.w	r5, #0
 800b184:	00dd      	lsls	r5, r3, #3
 800b186:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b18a:	00d4      	lsls	r4, r2, #3
 800b18c:	4622      	mov	r2, r4
 800b18e:	462b      	mov	r3, r5
 800b190:	1814      	adds	r4, r2, r0
 800b192:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800b196:	414b      	adcs	r3, r1
 800b198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f04f 0100 	mov.w	r1, #0
 800b1a8:	f04f 0200 	mov.w	r2, #0
 800b1ac:	f04f 0300 	mov.w	r3, #0
 800b1b0:	008b      	lsls	r3, r1, #2
 800b1b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b1b6:	0082      	lsls	r2, r0, #2
 800b1b8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800b1bc:	f7f5 fd74 	bl	8000ca8 <__aeabi_uldivmod>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4b96      	ldr	r3, [pc, #600]	; (800b420 <UART_SetConfig+0x734>)
 800b1c6:	fba3 1302 	umull	r1, r3, r3, r2
 800b1ca:	095b      	lsrs	r3, r3, #5
 800b1cc:	2164      	movs	r1, #100	; 0x64
 800b1ce:	fb01 f303 	mul.w	r3, r1, r3
 800b1d2:	1ad3      	subs	r3, r2, r3
 800b1d4:	011b      	lsls	r3, r3, #4
 800b1d6:	3332      	adds	r3, #50	; 0x32
 800b1d8:	4a91      	ldr	r2, [pc, #580]	; (800b420 <UART_SetConfig+0x734>)
 800b1da:	fba2 2303 	umull	r2, r3, r2, r3
 800b1de:	095b      	lsrs	r3, r3, #5
 800b1e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1e4:	441e      	add	r6, r3
 800b1e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f04f 0100 	mov.w	r1, #0
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	1894      	adds	r4, r2, r2
 800b1f6:	61bc      	str	r4, [r7, #24]
 800b1f8:	415b      	adcs	r3, r3
 800b1fa:	61fb      	str	r3, [r7, #28]
 800b1fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b200:	1812      	adds	r2, r2, r0
 800b202:	eb41 0303 	adc.w	r3, r1, r3
 800b206:	f04f 0400 	mov.w	r4, #0
 800b20a:	f04f 0500 	mov.w	r5, #0
 800b20e:	00dd      	lsls	r5, r3, #3
 800b210:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b214:	00d4      	lsls	r4, r2, #3
 800b216:	4622      	mov	r2, r4
 800b218:	462b      	mov	r3, r5
 800b21a:	1814      	adds	r4, r2, r0
 800b21c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800b220:	414b      	adcs	r3, r1
 800b222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f04f 0100 	mov.w	r1, #0
 800b232:	f04f 0200 	mov.w	r2, #0
 800b236:	f04f 0300 	mov.w	r3, #0
 800b23a:	008b      	lsls	r3, r1, #2
 800b23c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b240:	0082      	lsls	r2, r0, #2
 800b242:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800b246:	f7f5 fd2f 	bl	8000ca8 <__aeabi_uldivmod>
 800b24a:	4602      	mov	r2, r0
 800b24c:	460b      	mov	r3, r1
 800b24e:	4b74      	ldr	r3, [pc, #464]	; (800b420 <UART_SetConfig+0x734>)
 800b250:	fba3 1302 	umull	r1, r3, r3, r2
 800b254:	095b      	lsrs	r3, r3, #5
 800b256:	2164      	movs	r1, #100	; 0x64
 800b258:	fb01 f303 	mul.w	r3, r1, r3
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	011b      	lsls	r3, r3, #4
 800b260:	3332      	adds	r3, #50	; 0x32
 800b262:	4a6f      	ldr	r2, [pc, #444]	; (800b420 <UART_SetConfig+0x734>)
 800b264:	fba2 2303 	umull	r2, r3, r2, r3
 800b268:	095b      	lsrs	r3, r3, #5
 800b26a:	f003 020f 	and.w	r2, r3, #15
 800b26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4432      	add	r2, r6
 800b276:	609a      	str	r2, [r3, #8]
 800b278:	e0c9      	b.n	800b40e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b27a:	f7fd f813 	bl	80082a4 <HAL_RCC_GetPCLK1Freq>
 800b27e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b282:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b286:	461c      	mov	r4, r3
 800b288:	f04f 0500 	mov.w	r5, #0
 800b28c:	4622      	mov	r2, r4
 800b28e:	462b      	mov	r3, r5
 800b290:	1891      	adds	r1, r2, r2
 800b292:	6139      	str	r1, [r7, #16]
 800b294:	415b      	adcs	r3, r3
 800b296:	617b      	str	r3, [r7, #20]
 800b298:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b29c:	1912      	adds	r2, r2, r4
 800b29e:	eb45 0303 	adc.w	r3, r5, r3
 800b2a2:	f04f 0000 	mov.w	r0, #0
 800b2a6:	f04f 0100 	mov.w	r1, #0
 800b2aa:	00d9      	lsls	r1, r3, #3
 800b2ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b2b0:	00d0      	lsls	r0, r2, #3
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	eb12 0804 	adds.w	r8, r2, r4
 800b2ba:	eb43 0905 	adc.w	r9, r3, r5
 800b2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f04f 0100 	mov.w	r1, #0
 800b2ca:	f04f 0200 	mov.w	r2, #0
 800b2ce:	f04f 0300 	mov.w	r3, #0
 800b2d2:	008b      	lsls	r3, r1, #2
 800b2d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b2d8:	0082      	lsls	r2, r0, #2
 800b2da:	4640      	mov	r0, r8
 800b2dc:	4649      	mov	r1, r9
 800b2de:	f7f5 fce3 	bl	8000ca8 <__aeabi_uldivmod>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4b4e      	ldr	r3, [pc, #312]	; (800b420 <UART_SetConfig+0x734>)
 800b2e8:	fba3 2302 	umull	r2, r3, r3, r2
 800b2ec:	095b      	lsrs	r3, r3, #5
 800b2ee:	011e      	lsls	r6, r3, #4
 800b2f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f04f 0100 	mov.w	r1, #0
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	1894      	adds	r4, r2, r2
 800b300:	60bc      	str	r4, [r7, #8]
 800b302:	415b      	adcs	r3, r3
 800b304:	60fb      	str	r3, [r7, #12]
 800b306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b30a:	1812      	adds	r2, r2, r0
 800b30c:	eb41 0303 	adc.w	r3, r1, r3
 800b310:	f04f 0400 	mov.w	r4, #0
 800b314:	f04f 0500 	mov.w	r5, #0
 800b318:	00dd      	lsls	r5, r3, #3
 800b31a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b31e:	00d4      	lsls	r4, r2, #3
 800b320:	4622      	mov	r2, r4
 800b322:	462b      	mov	r3, r5
 800b324:	1814      	adds	r4, r2, r0
 800b326:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800b32a:	414b      	adcs	r3, r1
 800b32c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	4618      	mov	r0, r3
 800b338:	f04f 0100 	mov.w	r1, #0
 800b33c:	f04f 0200 	mov.w	r2, #0
 800b340:	f04f 0300 	mov.w	r3, #0
 800b344:	008b      	lsls	r3, r1, #2
 800b346:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b34a:	0082      	lsls	r2, r0, #2
 800b34c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b350:	f7f5 fcaa 	bl	8000ca8 <__aeabi_uldivmod>
 800b354:	4602      	mov	r2, r0
 800b356:	460b      	mov	r3, r1
 800b358:	4b31      	ldr	r3, [pc, #196]	; (800b420 <UART_SetConfig+0x734>)
 800b35a:	fba3 1302 	umull	r1, r3, r3, r2
 800b35e:	095b      	lsrs	r3, r3, #5
 800b360:	2164      	movs	r1, #100	; 0x64
 800b362:	fb01 f303 	mul.w	r3, r1, r3
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	011b      	lsls	r3, r3, #4
 800b36a:	3332      	adds	r3, #50	; 0x32
 800b36c:	4a2c      	ldr	r2, [pc, #176]	; (800b420 <UART_SetConfig+0x734>)
 800b36e:	fba2 2303 	umull	r2, r3, r2, r3
 800b372:	095b      	lsrs	r3, r3, #5
 800b374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b378:	441e      	add	r6, r3
 800b37a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b37e:	4618      	mov	r0, r3
 800b380:	f04f 0100 	mov.w	r1, #0
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	1894      	adds	r4, r2, r2
 800b38a:	603c      	str	r4, [r7, #0]
 800b38c:	415b      	adcs	r3, r3
 800b38e:	607b      	str	r3, [r7, #4]
 800b390:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b394:	1812      	adds	r2, r2, r0
 800b396:	eb41 0303 	adc.w	r3, r1, r3
 800b39a:	f04f 0400 	mov.w	r4, #0
 800b39e:	f04f 0500 	mov.w	r5, #0
 800b3a2:	00dd      	lsls	r5, r3, #3
 800b3a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b3a8:	00d4      	lsls	r4, r2, #3
 800b3aa:	4622      	mov	r2, r4
 800b3ac:	462b      	mov	r3, r5
 800b3ae:	1814      	adds	r4, r2, r0
 800b3b0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800b3b4:	414b      	adcs	r3, r1
 800b3b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b3ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f04f 0100 	mov.w	r1, #0
 800b3c6:	f04f 0200 	mov.w	r2, #0
 800b3ca:	f04f 0300 	mov.w	r3, #0
 800b3ce:	008b      	lsls	r3, r1, #2
 800b3d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b3d4:	0082      	lsls	r2, r0, #2
 800b3d6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800b3da:	f7f5 fc65 	bl	8000ca8 <__aeabi_uldivmod>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	4b0f      	ldr	r3, [pc, #60]	; (800b420 <UART_SetConfig+0x734>)
 800b3e4:	fba3 1302 	umull	r1, r3, r3, r2
 800b3e8:	095b      	lsrs	r3, r3, #5
 800b3ea:	2164      	movs	r1, #100	; 0x64
 800b3ec:	fb01 f303 	mul.w	r3, r1, r3
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	011b      	lsls	r3, r3, #4
 800b3f4:	3332      	adds	r3, #50	; 0x32
 800b3f6:	4a0a      	ldr	r2, [pc, #40]	; (800b420 <UART_SetConfig+0x734>)
 800b3f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3fc:	095b      	lsrs	r3, r3, #5
 800b3fe:	f003 020f 	and.w	r2, r3, #15
 800b402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4432      	add	r2, r6
 800b40a:	609a      	str	r2, [r3, #8]
}
 800b40c:	e7ff      	b.n	800b40e <UART_SetConfig+0x722>
 800b40e:	bf00      	nop
 800b410:	37f4      	adds	r7, #244	; 0xf4
 800b412:	46bd      	mov	sp, r7
 800b414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b418:	40011000 	.word	0x40011000
 800b41c:	40011400 	.word	0x40011400
 800b420:	51eb851f 	.word	0x51eb851f

0800b424 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b428:	4904      	ldr	r1, [pc, #16]	; (800b43c <MX_FATFS_Init+0x18>)
 800b42a:	4805      	ldr	r0, [pc, #20]	; (800b440 <MX_FATFS_Init+0x1c>)
 800b42c:	f003 fa92 	bl	800e954 <FATFS_LinkDriver>
 800b430:	4603      	mov	r3, r0
 800b432:	461a      	mov	r2, r3
 800b434:	4b03      	ldr	r3, [pc, #12]	; (800b444 <MX_FATFS_Init+0x20>)
 800b436:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b438:	bf00      	nop
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	200015a8 	.word	0x200015a8
 800b440:	20000010 	.word	0x20000010
 800b444:	200015ac 	.word	0x200015ac

0800b448 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b448:	b480      	push	{r7}
 800b44a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b44c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b44e:	4618      	mov	r0, r3
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	4603      	mov	r3, r0
 800b460:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800b462:	79fb      	ldrb	r3, [r7, #7]
 800b464:	4618      	mov	r0, r3
 800b466:	f000 f9dd 	bl	800b824 <USER_SPI_initialize>
 800b46a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	4603      	mov	r3, r0
 800b47c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800b47e:	79fb      	ldrb	r3, [r7, #7]
 800b480:	4618      	mov	r0, r3
 800b482:	f000 fab9 	bl	800b9f8 <USER_SPI_status>
 800b486:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	60b9      	str	r1, [r7, #8]
 800b498:	607a      	str	r2, [r7, #4]
 800b49a:	603b      	str	r3, [r7, #0]
 800b49c:	4603      	mov	r3, r0
 800b49e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800b4a0:	7bf8      	ldrb	r0, [r7, #15]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	68b9      	ldr	r1, [r7, #8]
 800b4a8:	f000 fabc 	bl	800ba24 <USER_SPI_read>
 800b4ac:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b084      	sub	sp, #16
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	603b      	str	r3, [r7, #0]
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800b4c6:	7bf8      	ldrb	r0, [r7, #15]
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	68b9      	ldr	r1, [r7, #8]
 800b4ce:	f000 fb0f 	bl	800baf0 <USER_SPI_write>
 800b4d2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	603a      	str	r2, [r7, #0]
 800b4e6:	71fb      	strb	r3, [r7, #7]
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800b4ec:	79b9      	ldrb	r1, [r7, #6]
 800b4ee:	79fb      	ldrb	r3, [r7, #7]
 800b4f0:	683a      	ldr	r2, [r7, #0]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 fb78 	bl	800bbe8 <USER_SPI_ioctl>
 800b4f8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
	...

0800b504 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800b50c:	f7f9 ff88 	bl	8005420 <HAL_GetTick>
 800b510:	4603      	mov	r3, r0
 800b512:	4a04      	ldr	r2, [pc, #16]	; (800b524 <SPI_Timer_On+0x20>)
 800b514:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800b516:	4a04      	ldr	r2, [pc, #16]	; (800b528 <SPI_Timer_On+0x24>)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6013      	str	r3, [r2, #0]
}
 800b51c:	bf00      	nop
 800b51e:	3708      	adds	r7, #8
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	20001a10 	.word	0x20001a10
 800b528:	20001a14 	.word	0x20001a14

0800b52c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800b52c:	b580      	push	{r7, lr}
 800b52e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800b530:	f7f9 ff76 	bl	8005420 <HAL_GetTick>
 800b534:	4602      	mov	r2, r0
 800b536:	4b06      	ldr	r3, [pc, #24]	; (800b550 <SPI_Timer_Status+0x24>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	1ad2      	subs	r2, r2, r3
 800b53c:	4b05      	ldr	r3, [pc, #20]	; (800b554 <SPI_Timer_Status+0x28>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	429a      	cmp	r2, r3
 800b542:	bf34      	ite	cc
 800b544:	2301      	movcc	r3, #1
 800b546:	2300      	movcs	r3, #0
 800b548:	b2db      	uxtb	r3, r3
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	20001a10 	.word	0x20001a10
 800b554:	20001a14 	.word	0x20001a14

0800b558 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af02      	add	r7, sp, #8
 800b55e:	4603      	mov	r3, r0
 800b560:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800b562:	f107 020f 	add.w	r2, r7, #15
 800b566:	1df9      	adds	r1, r7, #7
 800b568:	2332      	movs	r3, #50	; 0x32
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	2301      	movs	r3, #1
 800b56e:	4804      	ldr	r0, [pc, #16]	; (800b580 <xchg_spi+0x28>)
 800b570:	f7fd fd1d 	bl	8008fae <HAL_SPI_TransmitReceive>
    return rxDat;
 800b574:	7bfb      	ldrb	r3, [r7, #15]
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	200012c4 	.word	0x200012c4

0800b584 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800b584:	b590      	push	{r4, r7, lr}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800b58e:	2300      	movs	r3, #0
 800b590:	60fb      	str	r3, [r7, #12]
 800b592:	e00a      	b.n	800b5aa <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	18d4      	adds	r4, r2, r3
 800b59a:	20ff      	movs	r0, #255	; 0xff
 800b59c:	f7ff ffdc 	bl	800b558 <xchg_spi>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	60fb      	str	r3, [r7, #12]
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d3f0      	bcc.n	800b594 <rcvr_spi_multi+0x10>
	}
}
 800b5b2:	bf00      	nop
 800b5b4:	bf00      	nop
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd90      	pop	{r4, r7, pc}

0800b5bc <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	60fb      	str	r3, [r7, #12]
 800b5ca:	e009      	b.n	800b5e0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff ffbf 	bl	800b558 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	60fb      	str	r3, [r7, #12]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d3f1      	bcc.n	800b5cc <xmit_spi_multi+0x10>
	}
}
 800b5e8:	bf00      	nop
 800b5ea:	bf00      	nop
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b086      	sub	sp, #24
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800b5fa:	f7f9 ff11 	bl	8005420 <HAL_GetTick>
 800b5fe:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800b604:	20ff      	movs	r0, #255	; 0xff
 800b606:	f7ff ffa7 	bl	800b558 <xchg_spi>
 800b60a:	4603      	mov	r3, r0
 800b60c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	2bff      	cmp	r3, #255	; 0xff
 800b612:	d007      	beq.n	800b624 <wait_ready+0x32>
 800b614:	f7f9 ff04 	bl	8005420 <HAL_GetTick>
 800b618:	4602      	mov	r2, r0
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	1ad3      	subs	r3, r2, r3
 800b61e:	693a      	ldr	r2, [r7, #16]
 800b620:	429a      	cmp	r2, r3
 800b622:	d8ef      	bhi.n	800b604 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800b624:	7bfb      	ldrb	r3, [r7, #15]
 800b626:	2bff      	cmp	r3, #255	; 0xff
 800b628:	bf0c      	ite	eq
 800b62a:	2301      	moveq	r3, #1
 800b62c:	2300      	movne	r3, #0
 800b62e:	b2db      	uxtb	r3, r3
}
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800b63c:	2201      	movs	r2, #1
 800b63e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b642:	4804      	ldr	r0, [pc, #16]	; (800b654 <despiselect+0x1c>)
 800b644:	f7fb f980 	bl	8006948 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800b648:	20ff      	movs	r0, #255	; 0xff
 800b64a:	f7ff ff85 	bl	800b558 <xchg_spi>

}
 800b64e:	bf00      	nop
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	40021400 	.word	0x40021400

0800b658 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800b65c:	2200      	movs	r2, #0
 800b65e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b662:	480a      	ldr	r0, [pc, #40]	; (800b68c <spiselect+0x34>)
 800b664:	f7fb f970 	bl	8006948 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800b668:	20ff      	movs	r0, #255	; 0xff
 800b66a:	f7ff ff75 	bl	800b558 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800b66e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b672:	f7ff ffbe 	bl	800b5f2 <wait_ready>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <spiselect+0x28>
 800b67c:	2301      	movs	r3, #1
 800b67e:	e002      	b.n	800b686 <spiselect+0x2e>

	despiselect();
 800b680:	f7ff ffda 	bl	800b638 <despiselect>
	return 0;	/* Timeout */
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	40021400 	.word	0x40021400

0800b690 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800b69a:	20c8      	movs	r0, #200	; 0xc8
 800b69c:	f7ff ff32 	bl	800b504 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800b6a0:	20ff      	movs	r0, #255	; 0xff
 800b6a2:	f7ff ff59 	bl	800b558 <xchg_spi>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800b6aa:	7bfb      	ldrb	r3, [r7, #15]
 800b6ac:	2bff      	cmp	r3, #255	; 0xff
 800b6ae:	d104      	bne.n	800b6ba <rcvr_datablock+0x2a>
 800b6b0:	f7ff ff3c 	bl	800b52c <SPI_Timer_Status>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1f2      	bne.n	800b6a0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	2bfe      	cmp	r3, #254	; 0xfe
 800b6be:	d001      	beq.n	800b6c4 <rcvr_datablock+0x34>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	e00a      	b.n	800b6da <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f7ff ff5c 	bl	800b584 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b6cc:	20ff      	movs	r0, #255	; 0xff
 800b6ce:	f7ff ff43 	bl	800b558 <xchg_spi>
 800b6d2:	20ff      	movs	r0, #255	; 0xff
 800b6d4:	f7ff ff40 	bl	800b558 <xchg_spi>

	return 1;						/* Function succeeded */
 800b6d8:	2301      	movs	r3, #1
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b084      	sub	sp, #16
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b6ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b6f2:	f7ff ff7e 	bl	800b5f2 <wait_ready>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d101      	bne.n	800b700 <xmit_datablock+0x1e>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	e01e      	b.n	800b73e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800b700:	78fb      	ldrb	r3, [r7, #3]
 800b702:	4618      	mov	r0, r3
 800b704:	f7ff ff28 	bl	800b558 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b708:	78fb      	ldrb	r3, [r7, #3]
 800b70a:	2bfd      	cmp	r3, #253	; 0xfd
 800b70c:	d016      	beq.n	800b73c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800b70e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7ff ff52 	bl	800b5bc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b718:	20ff      	movs	r0, #255	; 0xff
 800b71a:	f7ff ff1d 	bl	800b558 <xchg_spi>
 800b71e:	20ff      	movs	r0, #255	; 0xff
 800b720:	f7ff ff1a 	bl	800b558 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b724:	20ff      	movs	r0, #255	; 0xff
 800b726:	f7ff ff17 	bl	800b558 <xchg_spi>
 800b72a:	4603      	mov	r3, r0
 800b72c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
 800b730:	f003 031f 	and.w	r3, r3, #31
 800b734:	2b05      	cmp	r3, #5
 800b736:	d001      	beq.n	800b73c <xmit_datablock+0x5a>
 800b738:	2300      	movs	r3, #0
 800b73a:	e000      	b.n	800b73e <xmit_datablock+0x5c>
	}
	return 1;
 800b73c:	2301      	movs	r3, #1
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	4603      	mov	r3, r0
 800b74e:	6039      	str	r1, [r7, #0]
 800b750:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800b752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b756:	2b00      	cmp	r3, #0
 800b758:	da0e      	bge.n	800b778 <send_cmd+0x32>
		cmd &= 0x7F;
 800b75a:	79fb      	ldrb	r3, [r7, #7]
 800b75c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b760:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800b762:	2100      	movs	r1, #0
 800b764:	2037      	movs	r0, #55	; 0x37
 800b766:	f7ff ffee 	bl	800b746 <send_cmd>
 800b76a:	4603      	mov	r3, r0
 800b76c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800b76e:	7bbb      	ldrb	r3, [r7, #14]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d901      	bls.n	800b778 <send_cmd+0x32>
 800b774:	7bbb      	ldrb	r3, [r7, #14]
 800b776:	e051      	b.n	800b81c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800b778:	79fb      	ldrb	r3, [r7, #7]
 800b77a:	2b0c      	cmp	r3, #12
 800b77c:	d008      	beq.n	800b790 <send_cmd+0x4a>
		despiselect();
 800b77e:	f7ff ff5b 	bl	800b638 <despiselect>
		if (!spiselect()) return 0xFF;
 800b782:	f7ff ff69 	bl	800b658 <spiselect>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d101      	bne.n	800b790 <send_cmd+0x4a>
 800b78c:	23ff      	movs	r3, #255	; 0xff
 800b78e:	e045      	b.n	800b81c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800b790:	79fb      	ldrb	r3, [r7, #7]
 800b792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b796:	b2db      	uxtb	r3, r3
 800b798:	4618      	mov	r0, r3
 800b79a:	f7ff fedd 	bl	800b558 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	0e1b      	lsrs	r3, r3, #24
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff fed7 	bl	800b558 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	0c1b      	lsrs	r3, r3, #16
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7ff fed1 	bl	800b558 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	0a1b      	lsrs	r3, r3, #8
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7ff fecb 	bl	800b558 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff fec6 	bl	800b558 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800b7d0:	79fb      	ldrb	r3, [r7, #7]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <send_cmd+0x94>
 800b7d6:	2395      	movs	r3, #149	; 0x95
 800b7d8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	2b08      	cmp	r3, #8
 800b7de:	d101      	bne.n	800b7e4 <send_cmd+0x9e>
 800b7e0:	2387      	movs	r3, #135	; 0x87
 800b7e2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7ff feb6 	bl	800b558 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800b7ec:	79fb      	ldrb	r3, [r7, #7]
 800b7ee:	2b0c      	cmp	r3, #12
 800b7f0:	d102      	bne.n	800b7f8 <send_cmd+0xb2>
 800b7f2:	20ff      	movs	r0, #255	; 0xff
 800b7f4:	f7ff feb0 	bl	800b558 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800b7f8:	230a      	movs	r3, #10
 800b7fa:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800b7fc:	20ff      	movs	r0, #255	; 0xff
 800b7fe:	f7ff feab 	bl	800b558 <xchg_spi>
 800b802:	4603      	mov	r3, r0
 800b804:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800b806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	da05      	bge.n	800b81a <send_cmd+0xd4>
 800b80e:	7bfb      	ldrb	r3, [r7, #15]
 800b810:	3b01      	subs	r3, #1
 800b812:	73fb      	strb	r3, [r7, #15]
 800b814:	7bfb      	ldrb	r3, [r7, #15]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1f0      	bne.n	800b7fc <send_cmd+0xb6>

	return res;							/* Return received response */
 800b81a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b824:	b590      	push	{r4, r7, lr}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	4603      	mov	r3, r0
 800b82c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800b82e:	79fb      	ldrb	r3, [r7, #7]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d001      	beq.n	800b838 <USER_SPI_initialize+0x14>
 800b834:	2301      	movs	r3, #1
 800b836:	e0d4      	b.n	800b9e2 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800b838:	4b6c      	ldr	r3, [pc, #432]	; (800b9ec <USER_SPI_initialize+0x1c8>)
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	f003 0302 	and.w	r3, r3, #2
 800b842:	2b00      	cmp	r3, #0
 800b844:	d003      	beq.n	800b84e <USER_SPI_initialize+0x2a>
 800b846:	4b69      	ldr	r3, [pc, #420]	; (800b9ec <USER_SPI_initialize+0x1c8>)
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	e0c9      	b.n	800b9e2 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800b84e:	4b68      	ldr	r3, [pc, #416]	; (800b9f0 <USER_SPI_initialize+0x1cc>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	4b66      	ldr	r3, [pc, #408]	; (800b9f0 <USER_SPI_initialize+0x1cc>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800b85c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800b85e:	230a      	movs	r3, #10
 800b860:	73fb      	strb	r3, [r7, #15]
 800b862:	e005      	b.n	800b870 <USER_SPI_initialize+0x4c>
 800b864:	20ff      	movs	r0, #255	; 0xff
 800b866:	f7ff fe77 	bl	800b558 <xchg_spi>
 800b86a:	7bfb      	ldrb	r3, [r7, #15]
 800b86c:	3b01      	subs	r3, #1
 800b86e:	73fb      	strb	r3, [r7, #15]
 800b870:	7bfb      	ldrb	r3, [r7, #15]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1f6      	bne.n	800b864 <USER_SPI_initialize+0x40>

	ty = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800b87a:	2100      	movs	r1, #0
 800b87c:	2000      	movs	r0, #0
 800b87e:	f7ff ff62 	bl	800b746 <send_cmd>
 800b882:	4603      	mov	r3, r0
 800b884:	2b01      	cmp	r3, #1
 800b886:	f040 808b 	bne.w	800b9a0 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800b88a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b88e:	f7ff fe39 	bl	800b504 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800b892:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b896:	2008      	movs	r0, #8
 800b898:	f7ff ff55 	bl	800b746 <send_cmd>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d151      	bne.n	800b946 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	73fb      	strb	r3, [r7, #15]
 800b8a6:	e00d      	b.n	800b8c4 <USER_SPI_initialize+0xa0>
 800b8a8:	7bfc      	ldrb	r4, [r7, #15]
 800b8aa:	20ff      	movs	r0, #255	; 0xff
 800b8ac:	f7ff fe54 	bl	800b558 <xchg_spi>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	f107 0310 	add.w	r3, r7, #16
 800b8b8:	4423      	add	r3, r4
 800b8ba:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b8be:	7bfb      	ldrb	r3, [r7, #15]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	73fb      	strb	r3, [r7, #15]
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
 800b8c6:	2b03      	cmp	r3, #3
 800b8c8:	d9ee      	bls.n	800b8a8 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800b8ca:	7abb      	ldrb	r3, [r7, #10]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d167      	bne.n	800b9a0 <USER_SPI_initialize+0x17c>
 800b8d0:	7afb      	ldrb	r3, [r7, #11]
 800b8d2:	2baa      	cmp	r3, #170	; 0xaa
 800b8d4:	d164      	bne.n	800b9a0 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800b8d6:	bf00      	nop
 800b8d8:	f7ff fe28 	bl	800b52c <SPI_Timer_Status>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d007      	beq.n	800b8f2 <USER_SPI_initialize+0xce>
 800b8e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b8e6:	20a9      	movs	r0, #169	; 0xa9
 800b8e8:	f7ff ff2d 	bl	800b746 <send_cmd>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1f2      	bne.n	800b8d8 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800b8f2:	f7ff fe1b 	bl	800b52c <SPI_Timer_Status>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d051      	beq.n	800b9a0 <USER_SPI_initialize+0x17c>
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	203a      	movs	r0, #58	; 0x3a
 800b900:	f7ff ff21 	bl	800b746 <send_cmd>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d14a      	bne.n	800b9a0 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800b90a:	2300      	movs	r3, #0
 800b90c:	73fb      	strb	r3, [r7, #15]
 800b90e:	e00d      	b.n	800b92c <USER_SPI_initialize+0x108>
 800b910:	7bfc      	ldrb	r4, [r7, #15]
 800b912:	20ff      	movs	r0, #255	; 0xff
 800b914:	f7ff fe20 	bl	800b558 <xchg_spi>
 800b918:	4603      	mov	r3, r0
 800b91a:	461a      	mov	r2, r3
 800b91c:	f107 0310 	add.w	r3, r7, #16
 800b920:	4423      	add	r3, r4
 800b922:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b926:	7bfb      	ldrb	r3, [r7, #15]
 800b928:	3301      	adds	r3, #1
 800b92a:	73fb      	strb	r3, [r7, #15]
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
 800b92e:	2b03      	cmp	r3, #3
 800b930:	d9ee      	bls.n	800b910 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800b932:	7a3b      	ldrb	r3, [r7, #8]
 800b934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d001      	beq.n	800b940 <USER_SPI_initialize+0x11c>
 800b93c:	230c      	movs	r3, #12
 800b93e:	e000      	b.n	800b942 <USER_SPI_initialize+0x11e>
 800b940:	2304      	movs	r3, #4
 800b942:	737b      	strb	r3, [r7, #13]
 800b944:	e02c      	b.n	800b9a0 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800b946:	2100      	movs	r1, #0
 800b948:	20a9      	movs	r0, #169	; 0xa9
 800b94a:	f7ff fefc 	bl	800b746 <send_cmd>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b01      	cmp	r3, #1
 800b952:	d804      	bhi.n	800b95e <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800b954:	2302      	movs	r3, #2
 800b956:	737b      	strb	r3, [r7, #13]
 800b958:	23a9      	movs	r3, #169	; 0xa9
 800b95a:	73bb      	strb	r3, [r7, #14]
 800b95c:	e003      	b.n	800b966 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800b95e:	2301      	movs	r3, #1
 800b960:	737b      	strb	r3, [r7, #13]
 800b962:	2301      	movs	r3, #1
 800b964:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800b966:	bf00      	nop
 800b968:	f7ff fde0 	bl	800b52c <SPI_Timer_Status>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d007      	beq.n	800b982 <USER_SPI_initialize+0x15e>
 800b972:	7bbb      	ldrb	r3, [r7, #14]
 800b974:	2100      	movs	r1, #0
 800b976:	4618      	mov	r0, r3
 800b978:	f7ff fee5 	bl	800b746 <send_cmd>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1f2      	bne.n	800b968 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800b982:	f7ff fdd3 	bl	800b52c <SPI_Timer_Status>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d007      	beq.n	800b99c <USER_SPI_initialize+0x178>
 800b98c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b990:	2010      	movs	r0, #16
 800b992:	f7ff fed8 	bl	800b746 <send_cmd>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <USER_SPI_initialize+0x17c>
				ty = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800b9a0:	4a14      	ldr	r2, [pc, #80]	; (800b9f4 <USER_SPI_initialize+0x1d0>)
 800b9a2:	7b7b      	ldrb	r3, [r7, #13]
 800b9a4:	7013      	strb	r3, [r2, #0]
	despiselect();
 800b9a6:	f7ff fe47 	bl	800b638 <despiselect>

	if (ty) {			/* OK */
 800b9aa:	7b7b      	ldrb	r3, [r7, #13]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d012      	beq.n	800b9d6 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800b9b0:	4b0f      	ldr	r3, [pc, #60]	; (800b9f0 <USER_SPI_initialize+0x1cc>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b9ba:	4b0d      	ldr	r3, [pc, #52]	; (800b9f0 <USER_SPI_initialize+0x1cc>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f042 0220 	orr.w	r2, r2, #32
 800b9c2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b9c4:	4b09      	ldr	r3, [pc, #36]	; (800b9ec <USER_SPI_initialize+0x1c8>)
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	f023 0301 	bic.w	r3, r3, #1
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	4b06      	ldr	r3, [pc, #24]	; (800b9ec <USER_SPI_initialize+0x1c8>)
 800b9d2:	701a      	strb	r2, [r3, #0]
 800b9d4:	e002      	b.n	800b9dc <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800b9d6:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <USER_SPI_initialize+0x1c8>)
 800b9d8:	2201      	movs	r2, #1
 800b9da:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800b9dc:	4b03      	ldr	r3, [pc, #12]	; (800b9ec <USER_SPI_initialize+0x1c8>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	b2db      	uxtb	r3, r3
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3714      	adds	r7, #20
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd90      	pop	{r4, r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	20000024 	.word	0x20000024
 800b9f0:	200012c4 	.word	0x200012c4
 800b9f4:	200004bc 	.word	0x200004bc

0800b9f8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	4603      	mov	r3, r0
 800ba00:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d001      	beq.n	800ba0c <USER_SPI_status+0x14>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	e002      	b.n	800ba12 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800ba0c:	4b04      	ldr	r3, [pc, #16]	; (800ba20 <USER_SPI_status+0x28>)
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	b2db      	uxtb	r3, r3
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	20000024 	.word	0x20000024

0800ba24 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60b9      	str	r1, [r7, #8]
 800ba2c:	607a      	str	r2, [r7, #4]
 800ba2e:	603b      	str	r3, [r7, #0]
 800ba30:	4603      	mov	r3, r0
 800ba32:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800ba34:	7bfb      	ldrb	r3, [r7, #15]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d102      	bne.n	800ba40 <USER_SPI_read+0x1c>
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d101      	bne.n	800ba44 <USER_SPI_read+0x20>
 800ba40:	2304      	movs	r3, #4
 800ba42:	e04d      	b.n	800bae0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ba44:	4b28      	ldr	r3, [pc, #160]	; (800bae8 <USER_SPI_read+0xc4>)
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d001      	beq.n	800ba56 <USER_SPI_read+0x32>
 800ba52:	2303      	movs	r3, #3
 800ba54:	e044      	b.n	800bae0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800ba56:	4b25      	ldr	r3, [pc, #148]	; (800baec <USER_SPI_read+0xc8>)
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	f003 0308 	and.w	r3, r3, #8
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d102      	bne.n	800ba68 <USER_SPI_read+0x44>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	025b      	lsls	r3, r3, #9
 800ba66:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d111      	bne.n	800ba92 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800ba6e:	6879      	ldr	r1, [r7, #4]
 800ba70:	2011      	movs	r0, #17
 800ba72:	f7ff fe68 	bl	800b746 <send_cmd>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d129      	bne.n	800bad0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800ba7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba80:	68b8      	ldr	r0, [r7, #8]
 800ba82:	f7ff fe05 	bl	800b690 <rcvr_datablock>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d021      	beq.n	800bad0 <USER_SPI_read+0xac>
			count = 0;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	e01e      	b.n	800bad0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800ba92:	6879      	ldr	r1, [r7, #4]
 800ba94:	2012      	movs	r0, #18
 800ba96:	f7ff fe56 	bl	800b746 <send_cmd>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d117      	bne.n	800bad0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800baa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800baa4:	68b8      	ldr	r0, [r7, #8]
 800baa6:	f7ff fdf3 	bl	800b690 <rcvr_datablock>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00a      	beq.n	800bac6 <USER_SPI_read+0xa2>
				buff += 512;
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bab6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	3b01      	subs	r3, #1
 800babc:	603b      	str	r3, [r7, #0]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1ed      	bne.n	800baa0 <USER_SPI_read+0x7c>
 800bac4:	e000      	b.n	800bac8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800bac6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800bac8:	2100      	movs	r1, #0
 800baca:	200c      	movs	r0, #12
 800bacc:	f7ff fe3b 	bl	800b746 <send_cmd>
		}
	}
	despiselect();
 800bad0:	f7ff fdb2 	bl	800b638 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	bf14      	ite	ne
 800bada:	2301      	movne	r3, #1
 800badc:	2300      	moveq	r3, #0
 800bade:	b2db      	uxtb	r3, r3
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	20000024 	.word	0x20000024
 800baec:	200004bc 	.word	0x200004bc

0800baf0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	607a      	str	r2, [r7, #4]
 800bafa:	603b      	str	r3, [r7, #0]
 800bafc:	4603      	mov	r3, r0
 800bafe:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d102      	bne.n	800bb0c <USER_SPI_write+0x1c>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d101      	bne.n	800bb10 <USER_SPI_write+0x20>
 800bb0c:	2304      	movs	r3, #4
 800bb0e:	e063      	b.n	800bbd8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800bb10:	4b33      	ldr	r3, [pc, #204]	; (800bbe0 <USER_SPI_write+0xf0>)
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <USER_SPI_write+0x32>
 800bb1e:	2303      	movs	r3, #3
 800bb20:	e05a      	b.n	800bbd8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800bb22:	4b2f      	ldr	r3, [pc, #188]	; (800bbe0 <USER_SPI_write+0xf0>)
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	f003 0304 	and.w	r3, r3, #4
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <USER_SPI_write+0x44>
 800bb30:	2302      	movs	r3, #2
 800bb32:	e051      	b.n	800bbd8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800bb34:	4b2b      	ldr	r3, [pc, #172]	; (800bbe4 <USER_SPI_write+0xf4>)
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	f003 0308 	and.w	r3, r3, #8
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d102      	bne.n	800bb46 <USER_SPI_write+0x56>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	025b      	lsls	r3, r3, #9
 800bb44:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d110      	bne.n	800bb6e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800bb4c:	6879      	ldr	r1, [r7, #4]
 800bb4e:	2018      	movs	r0, #24
 800bb50:	f7ff fdf9 	bl	800b746 <send_cmd>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d136      	bne.n	800bbc8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800bb5a:	21fe      	movs	r1, #254	; 0xfe
 800bb5c:	68b8      	ldr	r0, [r7, #8]
 800bb5e:	f7ff fdc0 	bl	800b6e2 <xmit_datablock>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d02f      	beq.n	800bbc8 <USER_SPI_write+0xd8>
			count = 0;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	603b      	str	r3, [r7, #0]
 800bb6c:	e02c      	b.n	800bbc8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800bb6e:	4b1d      	ldr	r3, [pc, #116]	; (800bbe4 <USER_SPI_write+0xf4>)
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	f003 0306 	and.w	r3, r3, #6
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d003      	beq.n	800bb82 <USER_SPI_write+0x92>
 800bb7a:	6839      	ldr	r1, [r7, #0]
 800bb7c:	2097      	movs	r0, #151	; 0x97
 800bb7e:	f7ff fde2 	bl	800b746 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800bb82:	6879      	ldr	r1, [r7, #4]
 800bb84:	2019      	movs	r0, #25
 800bb86:	f7ff fdde 	bl	800b746 <send_cmd>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d11b      	bne.n	800bbc8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800bb90:	21fc      	movs	r1, #252	; 0xfc
 800bb92:	68b8      	ldr	r0, [r7, #8]
 800bb94:	f7ff fda5 	bl	800b6e2 <xmit_datablock>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00a      	beq.n	800bbb4 <USER_SPI_write+0xc4>
				buff += 512;
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bba4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	603b      	str	r3, [r7, #0]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1ee      	bne.n	800bb90 <USER_SPI_write+0xa0>
 800bbb2:	e000      	b.n	800bbb6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800bbb4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800bbb6:	21fd      	movs	r1, #253	; 0xfd
 800bbb8:	2000      	movs	r0, #0
 800bbba:	f7ff fd92 	bl	800b6e2 <xmit_datablock>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d101      	bne.n	800bbc8 <USER_SPI_write+0xd8>
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800bbc8:	f7ff fd36 	bl	800b638 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	bf14      	ite	ne
 800bbd2:	2301      	movne	r3, #1
 800bbd4:	2300      	moveq	r3, #0
 800bbd6:	b2db      	uxtb	r3, r3
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3710      	adds	r7, #16
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	20000024 	.word	0x20000024
 800bbe4:	200004bc 	.word	0x200004bc

0800bbe8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08c      	sub	sp, #48	; 0x30
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	603a      	str	r2, [r7, #0]
 800bbf2:	71fb      	strb	r3, [r7, #7]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800bbf8:	79fb      	ldrb	r3, [r7, #7]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d001      	beq.n	800bc02 <USER_SPI_ioctl+0x1a>
 800bbfe:	2304      	movs	r3, #4
 800bc00:	e15a      	b.n	800beb8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800bc02:	4baf      	ldr	r3, [pc, #700]	; (800bec0 <USER_SPI_ioctl+0x2d8>)
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	f003 0301 	and.w	r3, r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d001      	beq.n	800bc14 <USER_SPI_ioctl+0x2c>
 800bc10:	2303      	movs	r3, #3
 800bc12:	e151      	b.n	800beb8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800bc1a:	79bb      	ldrb	r3, [r7, #6]
 800bc1c:	2b04      	cmp	r3, #4
 800bc1e:	f200 8136 	bhi.w	800be8e <USER_SPI_ioctl+0x2a6>
 800bc22:	a201      	add	r2, pc, #4	; (adr r2, 800bc28 <USER_SPI_ioctl+0x40>)
 800bc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc28:	0800bc3d 	.word	0x0800bc3d
 800bc2c:	0800bc51 	.word	0x0800bc51
 800bc30:	0800be8f 	.word	0x0800be8f
 800bc34:	0800bcfd 	.word	0x0800bcfd
 800bc38:	0800bdf3 	.word	0x0800bdf3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800bc3c:	f7ff fd0c 	bl	800b658 <spiselect>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 8127 	beq.w	800be96 <USER_SPI_ioctl+0x2ae>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800bc4e:	e122      	b.n	800be96 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800bc50:	2100      	movs	r1, #0
 800bc52:	2009      	movs	r0, #9
 800bc54:	f7ff fd77 	bl	800b746 <send_cmd>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f040 811d 	bne.w	800be9a <USER_SPI_ioctl+0x2b2>
 800bc60:	f107 030c 	add.w	r3, r7, #12
 800bc64:	2110      	movs	r1, #16
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7ff fd12 	bl	800b690 <rcvr_datablock>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f000 8113 	beq.w	800be9a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800bc74:	7b3b      	ldrb	r3, [r7, #12]
 800bc76:	099b      	lsrs	r3, r3, #6
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d111      	bne.n	800bca2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800bc7e:	7d7b      	ldrb	r3, [r7, #21]
 800bc80:	461a      	mov	r2, r3
 800bc82:	7d3b      	ldrb	r3, [r7, #20]
 800bc84:	021b      	lsls	r3, r3, #8
 800bc86:	4413      	add	r3, r2
 800bc88:	461a      	mov	r2, r3
 800bc8a:	7cfb      	ldrb	r3, [r7, #19]
 800bc8c:	041b      	lsls	r3, r3, #16
 800bc8e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800bc92:	4413      	add	r3, r2
 800bc94:	3301      	adds	r3, #1
 800bc96:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	029a      	lsls	r2, r3, #10
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	601a      	str	r2, [r3, #0]
 800bca0:	e028      	b.n	800bcf4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800bca2:	7c7b      	ldrb	r3, [r7, #17]
 800bca4:	f003 030f 	and.w	r3, r3, #15
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	7dbb      	ldrb	r3, [r7, #22]
 800bcac:	09db      	lsrs	r3, r3, #7
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	4413      	add	r3, r2
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	7d7b      	ldrb	r3, [r7, #21]
 800bcb6:	005b      	lsls	r3, r3, #1
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	f003 0306 	and.w	r3, r3, #6
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	4413      	add	r3, r2
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	3302      	adds	r3, #2
 800bcc6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800bcca:	7d3b      	ldrb	r3, [r7, #20]
 800bccc:	099b      	lsrs	r3, r3, #6
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	7cfb      	ldrb	r3, [r7, #19]
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	441a      	add	r2, r3
 800bcd8:	7cbb      	ldrb	r3, [r7, #18]
 800bcda:	029b      	lsls	r3, r3, #10
 800bcdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bce0:	4413      	add	r3, r2
 800bce2:	3301      	adds	r3, #1
 800bce4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800bce6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bcea:	3b09      	subs	r3, #9
 800bcec:	69fa      	ldr	r2, [r7, #28]
 800bcee:	409a      	lsls	r2, r3
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800bcfa:	e0ce      	b.n	800be9a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800bcfc:	4b71      	ldr	r3, [pc, #452]	; (800bec4 <USER_SPI_ioctl+0x2dc>)
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	f003 0304 	and.w	r3, r3, #4
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d031      	beq.n	800bd6c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800bd08:	2100      	movs	r1, #0
 800bd0a:	208d      	movs	r0, #141	; 0x8d
 800bd0c:	f7ff fd1b 	bl	800b746 <send_cmd>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f040 80c3 	bne.w	800be9e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800bd18:	20ff      	movs	r0, #255	; 0xff
 800bd1a:	f7ff fc1d 	bl	800b558 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800bd1e:	f107 030c 	add.w	r3, r7, #12
 800bd22:	2110      	movs	r1, #16
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff fcb3 	bl	800b690 <rcvr_datablock>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	f000 80b6 	beq.w	800be9e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800bd32:	2330      	movs	r3, #48	; 0x30
 800bd34:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800bd38:	e007      	b.n	800bd4a <USER_SPI_ioctl+0x162>
 800bd3a:	20ff      	movs	r0, #255	; 0xff
 800bd3c:	f7ff fc0c 	bl	800b558 <xchg_spi>
 800bd40:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bd44:	3b01      	subs	r3, #1
 800bd46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800bd4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d1f3      	bne.n	800bd3a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800bd52:	7dbb      	ldrb	r3, [r7, #22]
 800bd54:	091b      	lsrs	r3, r3, #4
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	461a      	mov	r2, r3
 800bd5a:	2310      	movs	r3, #16
 800bd5c:	fa03 f202 	lsl.w	r2, r3, r2
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800bd64:	2300      	movs	r3, #0
 800bd66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800bd6a:	e098      	b.n	800be9e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	2009      	movs	r0, #9
 800bd70:	f7ff fce9 	bl	800b746 <send_cmd>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f040 8091 	bne.w	800be9e <USER_SPI_ioctl+0x2b6>
 800bd7c:	f107 030c 	add.w	r3, r7, #12
 800bd80:	2110      	movs	r1, #16
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff fc84 	bl	800b690 <rcvr_datablock>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f000 8087 	beq.w	800be9e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800bd90:	4b4c      	ldr	r3, [pc, #304]	; (800bec4 <USER_SPI_ioctl+0x2dc>)
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	f003 0302 	and.w	r3, r3, #2
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d012      	beq.n	800bdc2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800bd9c:	7dbb      	ldrb	r3, [r7, #22]
 800bd9e:	005b      	lsls	r3, r3, #1
 800bda0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800bda4:	7dfa      	ldrb	r2, [r7, #23]
 800bda6:	09d2      	lsrs	r2, r2, #7
 800bda8:	b2d2      	uxtb	r2, r2
 800bdaa:	4413      	add	r3, r2
 800bdac:	1c5a      	adds	r2, r3, #1
 800bdae:	7e7b      	ldrb	r3, [r7, #25]
 800bdb0:	099b      	lsrs	r3, r3, #6
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdba:	461a      	mov	r2, r3
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	601a      	str	r2, [r3, #0]
 800bdc0:	e013      	b.n	800bdea <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800bdc2:	7dbb      	ldrb	r3, [r7, #22]
 800bdc4:	109b      	asrs	r3, r3, #2
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	f003 031f 	and.w	r3, r3, #31
 800bdcc:	3301      	adds	r3, #1
 800bdce:	7dfa      	ldrb	r2, [r7, #23]
 800bdd0:	00d2      	lsls	r2, r2, #3
 800bdd2:	f002 0218 	and.w	r2, r2, #24
 800bdd6:	7df9      	ldrb	r1, [r7, #23]
 800bdd8:	0949      	lsrs	r1, r1, #5
 800bdda:	b2c9      	uxtb	r1, r1
 800bddc:	440a      	add	r2, r1
 800bdde:	3201      	adds	r2, #1
 800bde0:	fb02 f303 	mul.w	r3, r2, r3
 800bde4:	461a      	mov	r2, r3
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800bdf0:	e055      	b.n	800be9e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800bdf2:	4b34      	ldr	r3, [pc, #208]	; (800bec4 <USER_SPI_ioctl+0x2dc>)
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	f003 0306 	and.w	r3, r3, #6
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d051      	beq.n	800bea2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800bdfe:	f107 020c 	add.w	r2, r7, #12
 800be02:	79fb      	ldrb	r3, [r7, #7]
 800be04:	210b      	movs	r1, #11
 800be06:	4618      	mov	r0, r3
 800be08:	f7ff feee 	bl	800bbe8 <USER_SPI_ioctl>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d149      	bne.n	800bea6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800be12:	7b3b      	ldrb	r3, [r7, #12]
 800be14:	099b      	lsrs	r3, r3, #6
 800be16:	b2db      	uxtb	r3, r3
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d104      	bne.n	800be26 <USER_SPI_ioctl+0x23e>
 800be1c:	7dbb      	ldrb	r3, [r7, #22]
 800be1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be22:	2b00      	cmp	r3, #0
 800be24:	d041      	beq.n	800beaa <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	623b      	str	r3, [r7, #32]
 800be2a:	6a3b      	ldr	r3, [r7, #32]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800be30:	6a3b      	ldr	r3, [r7, #32]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800be36:	4b23      	ldr	r3, [pc, #140]	; (800bec4 <USER_SPI_ioctl+0x2dc>)
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	f003 0308 	and.w	r3, r3, #8
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d105      	bne.n	800be4e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	025b      	lsls	r3, r3, #9
 800be46:	62bb      	str	r3, [r7, #40]	; 0x28
 800be48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4a:	025b      	lsls	r3, r3, #9
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800be4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be50:	2020      	movs	r0, #32
 800be52:	f7ff fc78 	bl	800b746 <send_cmd>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d128      	bne.n	800beae <USER_SPI_ioctl+0x2c6>
 800be5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be5e:	2021      	movs	r0, #33	; 0x21
 800be60:	f7ff fc71 	bl	800b746 <send_cmd>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d121      	bne.n	800beae <USER_SPI_ioctl+0x2c6>
 800be6a:	2100      	movs	r1, #0
 800be6c:	2026      	movs	r0, #38	; 0x26
 800be6e:	f7ff fc6a 	bl	800b746 <send_cmd>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d11a      	bne.n	800beae <USER_SPI_ioctl+0x2c6>
 800be78:	f247 5030 	movw	r0, #30000	; 0x7530
 800be7c:	f7ff fbb9 	bl	800b5f2 <wait_ready>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d013      	beq.n	800beae <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800be86:	2300      	movs	r3, #0
 800be88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800be8c:	e00f      	b.n	800beae <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800be8e:	2304      	movs	r3, #4
 800be90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800be94:	e00c      	b.n	800beb0 <USER_SPI_ioctl+0x2c8>
		break;
 800be96:	bf00      	nop
 800be98:	e00a      	b.n	800beb0 <USER_SPI_ioctl+0x2c8>
		break;
 800be9a:	bf00      	nop
 800be9c:	e008      	b.n	800beb0 <USER_SPI_ioctl+0x2c8>
		break;
 800be9e:	bf00      	nop
 800bea0:	e006      	b.n	800beb0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800bea2:	bf00      	nop
 800bea4:	e004      	b.n	800beb0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800bea6:	bf00      	nop
 800bea8:	e002      	b.n	800beb0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800beaa:	bf00      	nop
 800beac:	e000      	b.n	800beb0 <USER_SPI_ioctl+0x2c8>
		break;
 800beae:	bf00      	nop
	}

	despiselect();
 800beb0:	f7ff fbc2 	bl	800b638 <despiselect>

	return res;
 800beb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3730      	adds	r7, #48	; 0x30
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	20000024 	.word	0x20000024
 800bec4:	200004bc 	.word	0x200004bc

0800bec8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	4603      	mov	r3, r0
 800bed0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bed2:	79fb      	ldrb	r3, [r7, #7]
 800bed4:	4a08      	ldr	r2, [pc, #32]	; (800bef8 <disk_status+0x30>)
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	79fa      	ldrb	r2, [r7, #7]
 800bee0:	4905      	ldr	r1, [pc, #20]	; (800bef8 <disk_status+0x30>)
 800bee2:	440a      	add	r2, r1
 800bee4:	7a12      	ldrb	r2, [r2, #8]
 800bee6:	4610      	mov	r0, r2
 800bee8:	4798      	blx	r3
 800beea:	4603      	mov	r3, r0
 800beec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800beee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3710      	adds	r7, #16
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	200004e8 	.word	0x200004e8

0800befc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bf0a:	79fb      	ldrb	r3, [r7, #7]
 800bf0c:	4a0d      	ldr	r2, [pc, #52]	; (800bf44 <disk_initialize+0x48>)
 800bf0e:	5cd3      	ldrb	r3, [r2, r3]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d111      	bne.n	800bf38 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bf14:	79fb      	ldrb	r3, [r7, #7]
 800bf16:	4a0b      	ldr	r2, [pc, #44]	; (800bf44 <disk_initialize+0x48>)
 800bf18:	2101      	movs	r1, #1
 800bf1a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bf1c:	79fb      	ldrb	r3, [r7, #7]
 800bf1e:	4a09      	ldr	r2, [pc, #36]	; (800bf44 <disk_initialize+0x48>)
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	79fa      	ldrb	r2, [r7, #7]
 800bf2a:	4906      	ldr	r1, [pc, #24]	; (800bf44 <disk_initialize+0x48>)
 800bf2c:	440a      	add	r2, r1
 800bf2e:	7a12      	ldrb	r2, [r2, #8]
 800bf30:	4610      	mov	r0, r2
 800bf32:	4798      	blx	r3
 800bf34:	4603      	mov	r3, r0
 800bf36:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bf38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	200004e8 	.word	0x200004e8

0800bf48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bf48:	b590      	push	{r4, r7, lr}
 800bf4a:	b087      	sub	sp, #28
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60b9      	str	r1, [r7, #8]
 800bf50:	607a      	str	r2, [r7, #4]
 800bf52:	603b      	str	r3, [r7, #0]
 800bf54:	4603      	mov	r3, r0
 800bf56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bf58:	7bfb      	ldrb	r3, [r7, #15]
 800bf5a:	4a0a      	ldr	r2, [pc, #40]	; (800bf84 <disk_read+0x3c>)
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	689c      	ldr	r4, [r3, #8]
 800bf64:	7bfb      	ldrb	r3, [r7, #15]
 800bf66:	4a07      	ldr	r2, [pc, #28]	; (800bf84 <disk_read+0x3c>)
 800bf68:	4413      	add	r3, r2
 800bf6a:	7a18      	ldrb	r0, [r3, #8]
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	68b9      	ldr	r1, [r7, #8]
 800bf72:	47a0      	blx	r4
 800bf74:	4603      	mov	r3, r0
 800bf76:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf78:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	371c      	adds	r7, #28
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd90      	pop	{r4, r7, pc}
 800bf82:	bf00      	nop
 800bf84:	200004e8 	.word	0x200004e8

0800bf88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bf88:	b590      	push	{r4, r7, lr}
 800bf8a:	b087      	sub	sp, #28
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	60b9      	str	r1, [r7, #8]
 800bf90:	607a      	str	r2, [r7, #4]
 800bf92:	603b      	str	r3, [r7, #0]
 800bf94:	4603      	mov	r3, r0
 800bf96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
 800bf9a:	4a0a      	ldr	r2, [pc, #40]	; (800bfc4 <disk_write+0x3c>)
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	68dc      	ldr	r4, [r3, #12]
 800bfa4:	7bfb      	ldrb	r3, [r7, #15]
 800bfa6:	4a07      	ldr	r2, [pc, #28]	; (800bfc4 <disk_write+0x3c>)
 800bfa8:	4413      	add	r3, r2
 800bfaa:	7a18      	ldrb	r0, [r3, #8]
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	68b9      	ldr	r1, [r7, #8]
 800bfb2:	47a0      	blx	r4
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	75fb      	strb	r3, [r7, #23]
  return res;
 800bfb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	371c      	adds	r7, #28
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd90      	pop	{r4, r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	200004e8 	.word	0x200004e8

0800bfc8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	4603      	mov	r3, r0
 800bfd0:	603a      	str	r2, [r7, #0]
 800bfd2:	71fb      	strb	r3, [r7, #7]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bfd8:	79fb      	ldrb	r3, [r7, #7]
 800bfda:	4a09      	ldr	r2, [pc, #36]	; (800c000 <disk_ioctl+0x38>)
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	4413      	add	r3, r2
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	79fa      	ldrb	r2, [r7, #7]
 800bfe6:	4906      	ldr	r1, [pc, #24]	; (800c000 <disk_ioctl+0x38>)
 800bfe8:	440a      	add	r2, r1
 800bfea:	7a10      	ldrb	r0, [r2, #8]
 800bfec:	79b9      	ldrb	r1, [r7, #6]
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	4798      	blx	r3
 800bff2:	4603      	mov	r3, r0
 800bff4:	73fb      	strb	r3, [r7, #15]
  return res;
 800bff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	200004e8 	.word	0x200004e8

0800c004 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3301      	adds	r3, #1
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c014:	89fb      	ldrh	r3, [r7, #14]
 800c016:	021b      	lsls	r3, r3, #8
 800c018:	b21a      	sxth	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	b21b      	sxth	r3, r3
 800c020:	4313      	orrs	r3, r2
 800c022:	b21b      	sxth	r3, r3
 800c024:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c026:	89fb      	ldrh	r3, [r7, #14]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3714      	adds	r7, #20
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	3303      	adds	r3, #3
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	021b      	lsls	r3, r3, #8
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	3202      	adds	r2, #2
 800c04c:	7812      	ldrb	r2, [r2, #0]
 800c04e:	4313      	orrs	r3, r2
 800c050:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	021b      	lsls	r3, r3, #8
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	3201      	adds	r2, #1
 800c05a:	7812      	ldrb	r2, [r2, #0]
 800c05c:	4313      	orrs	r3, r2
 800c05e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	021b      	lsls	r3, r3, #8
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	7812      	ldrb	r2, [r2, #0]
 800c068:	4313      	orrs	r3, r2
 800c06a:	60fb      	str	r3, [r7, #12]
	return rv;
 800c06c:	68fb      	ldr	r3, [r7, #12]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3714      	adds	r7, #20
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr

0800c07a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c07a:	b480      	push	{r7}
 800c07c:	b083      	sub	sp, #12
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
 800c082:	460b      	mov	r3, r1
 800c084:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	1c5a      	adds	r2, r3, #1
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	887a      	ldrh	r2, [r7, #2]
 800c08e:	b2d2      	uxtb	r2, r2
 800c090:	701a      	strb	r2, [r3, #0]
 800c092:	887b      	ldrh	r3, [r7, #2]
 800c094:	0a1b      	lsrs	r3, r3, #8
 800c096:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	607a      	str	r2, [r7, #4]
 800c09e:	887a      	ldrh	r2, [r7, #2]
 800c0a0:	b2d2      	uxtb	r2, r2
 800c0a2:	701a      	strb	r2, [r3, #0]
}
 800c0a4:	bf00      	nop
 800c0a6:	370c      	adds	r7, #12
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	1c5a      	adds	r2, r3, #1
 800c0be:	607a      	str	r2, [r7, #4]
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	b2d2      	uxtb	r2, r2
 800c0c4:	701a      	strb	r2, [r3, #0]
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	0a1b      	lsrs	r3, r3, #8
 800c0ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	1c5a      	adds	r2, r3, #1
 800c0d0:	607a      	str	r2, [r7, #4]
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	b2d2      	uxtb	r2, r2
 800c0d6:	701a      	strb	r2, [r3, #0]
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	0a1b      	lsrs	r3, r3, #8
 800c0dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	1c5a      	adds	r2, r3, #1
 800c0e2:	607a      	str	r2, [r7, #4]
 800c0e4:	683a      	ldr	r2, [r7, #0]
 800c0e6:	b2d2      	uxtb	r2, r2
 800c0e8:	701a      	strb	r2, [r3, #0]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	0a1b      	lsrs	r3, r3, #8
 800c0ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	1c5a      	adds	r2, r3, #1
 800c0f4:	607a      	str	r2, [r7, #4]
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	b2d2      	uxtb	r2, r2
 800c0fa:	701a      	strb	r2, [r3, #0]
}
 800c0fc:	bf00      	nop
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c108:	b480      	push	{r7}
 800c10a:	b087      	sub	sp, #28
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00d      	beq.n	800c13e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	1c53      	adds	r3, r2, #1
 800c126:	613b      	str	r3, [r7, #16]
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	1c59      	adds	r1, r3, #1
 800c12c:	6179      	str	r1, [r7, #20]
 800c12e:	7812      	ldrb	r2, [r2, #0]
 800c130:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	3b01      	subs	r3, #1
 800c136:	607b      	str	r3, [r7, #4]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1f1      	bne.n	800c122 <mem_cpy+0x1a>
	}
}
 800c13e:	bf00      	nop
 800c140:	371c      	adds	r7, #28
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c14a:	b480      	push	{r7}
 800c14c:	b087      	sub	sp, #28
 800c14e:	af00      	add	r7, sp, #0
 800c150:	60f8      	str	r0, [r7, #12]
 800c152:	60b9      	str	r1, [r7, #8]
 800c154:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	1c5a      	adds	r2, r3, #1
 800c15e:	617a      	str	r2, [r7, #20]
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	b2d2      	uxtb	r2, r2
 800c164:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	3b01      	subs	r3, #1
 800c16a:	607b      	str	r3, [r7, #4]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1f3      	bne.n	800c15a <mem_set+0x10>
}
 800c172:	bf00      	nop
 800c174:	bf00      	nop
 800c176:	371c      	adds	r7, #28
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c180:	b480      	push	{r7}
 800c182:	b089      	sub	sp, #36	; 0x24
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	61fb      	str	r3, [r7, #28]
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c194:	2300      	movs	r3, #0
 800c196:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	1c5a      	adds	r2, r3, #1
 800c19c:	61fa      	str	r2, [r7, #28]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	61ba      	str	r2, [r7, #24]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	1acb      	subs	r3, r1, r3
 800c1ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	3b01      	subs	r3, #1
 800c1b2:	607b      	str	r3, [r7, #4]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d002      	beq.n	800c1c0 <mem_cmp+0x40>
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d0eb      	beq.n	800c198 <mem_cmp+0x18>

	return r;
 800c1c0:	697b      	ldr	r3, [r7, #20]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3724      	adds	r7, #36	; 0x24
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c1ce:	b480      	push	{r7}
 800c1d0:	b083      	sub	sp, #12
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
 800c1d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c1d8:	e002      	b.n	800c1e0 <chk_chr+0x12>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	607b      	str	r3, [r7, #4]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d005      	beq.n	800c1f4 <chk_chr+0x26>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d1f2      	bne.n	800c1da <chk_chr+0xc>
	return *str;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c20e:	2300      	movs	r3, #0
 800c210:	60bb      	str	r3, [r7, #8]
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	60fb      	str	r3, [r7, #12]
 800c216:	e029      	b.n	800c26c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c218:	4a27      	ldr	r2, [pc, #156]	; (800c2b8 <chk_lock+0xb4>)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	011b      	lsls	r3, r3, #4
 800c21e:	4413      	add	r3, r2
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d01d      	beq.n	800c262 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c226:	4a24      	ldr	r2, [pc, #144]	; (800c2b8 <chk_lock+0xb4>)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	011b      	lsls	r3, r3, #4
 800c22c:	4413      	add	r3, r2
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	429a      	cmp	r2, r3
 800c236:	d116      	bne.n	800c266 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c238:	4a1f      	ldr	r2, [pc, #124]	; (800c2b8 <chk_lock+0xb4>)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	011b      	lsls	r3, r3, #4
 800c23e:	4413      	add	r3, r2
 800c240:	3304      	adds	r3, #4
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c248:	429a      	cmp	r2, r3
 800c24a:	d10c      	bne.n	800c266 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c24c:	4a1a      	ldr	r2, [pc, #104]	; (800c2b8 <chk_lock+0xb4>)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	011b      	lsls	r3, r3, #4
 800c252:	4413      	add	r3, r2
 800c254:	3308      	adds	r3, #8
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d102      	bne.n	800c266 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c260:	e007      	b.n	800c272 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c262:	2301      	movs	r3, #1
 800c264:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3301      	adds	r3, #1
 800c26a:	60fb      	str	r3, [r7, #12]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d9d2      	bls.n	800c218 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2b02      	cmp	r3, #2
 800c276:	d109      	bne.n	800c28c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d102      	bne.n	800c284 <chk_lock+0x80>
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	2b02      	cmp	r3, #2
 800c282:	d101      	bne.n	800c288 <chk_lock+0x84>
 800c284:	2300      	movs	r3, #0
 800c286:	e010      	b.n	800c2aa <chk_lock+0xa6>
 800c288:	2312      	movs	r3, #18
 800c28a:	e00e      	b.n	800c2aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d108      	bne.n	800c2a4 <chk_lock+0xa0>
 800c292:	4a09      	ldr	r2, [pc, #36]	; (800c2b8 <chk_lock+0xb4>)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	011b      	lsls	r3, r3, #4
 800c298:	4413      	add	r3, r2
 800c29a:	330c      	adds	r3, #12
 800c29c:	881b      	ldrh	r3, [r3, #0]
 800c29e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2a2:	d101      	bne.n	800c2a8 <chk_lock+0xa4>
 800c2a4:	2310      	movs	r3, #16
 800c2a6:	e000      	b.n	800c2aa <chk_lock+0xa6>
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3714      	adds	r7, #20
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	200004c8 	.word	0x200004c8

0800c2bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	607b      	str	r3, [r7, #4]
 800c2c6:	e002      	b.n	800c2ce <enq_lock+0x12>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	607b      	str	r3, [r7, #4]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d806      	bhi.n	800c2e2 <enq_lock+0x26>
 800c2d4:	4a09      	ldr	r2, [pc, #36]	; (800c2fc <enq_lock+0x40>)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	011b      	lsls	r3, r3, #4
 800c2da:	4413      	add	r3, r2
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1f2      	bne.n	800c2c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	bf14      	ite	ne
 800c2e8:	2301      	movne	r3, #1
 800c2ea:	2300      	moveq	r3, #0
 800c2ec:	b2db      	uxtb	r3, r3
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	370c      	adds	r7, #12
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	200004c8 	.word	0x200004c8

0800c300 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c30a:	2300      	movs	r3, #0
 800c30c:	60fb      	str	r3, [r7, #12]
 800c30e:	e01f      	b.n	800c350 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c310:	4a41      	ldr	r2, [pc, #260]	; (800c418 <inc_lock+0x118>)
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	011b      	lsls	r3, r3, #4
 800c316:	4413      	add	r3, r2
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d113      	bne.n	800c34a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c322:	4a3d      	ldr	r2, [pc, #244]	; (800c418 <inc_lock+0x118>)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	011b      	lsls	r3, r3, #4
 800c328:	4413      	add	r3, r2
 800c32a:	3304      	adds	r3, #4
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c332:	429a      	cmp	r2, r3
 800c334:	d109      	bne.n	800c34a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c336:	4a38      	ldr	r2, [pc, #224]	; (800c418 <inc_lock+0x118>)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	011b      	lsls	r3, r3, #4
 800c33c:	4413      	add	r3, r2
 800c33e:	3308      	adds	r3, #8
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c346:	429a      	cmp	r2, r3
 800c348:	d006      	beq.n	800c358 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	3301      	adds	r3, #1
 800c34e:	60fb      	str	r3, [r7, #12]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d9dc      	bls.n	800c310 <inc_lock+0x10>
 800c356:	e000      	b.n	800c35a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c358:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	d132      	bne.n	800c3c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c360:	2300      	movs	r3, #0
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	e002      	b.n	800c36c <inc_lock+0x6c>
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3301      	adds	r3, #1
 800c36a:	60fb      	str	r3, [r7, #12]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d806      	bhi.n	800c380 <inc_lock+0x80>
 800c372:	4a29      	ldr	r2, [pc, #164]	; (800c418 <inc_lock+0x118>)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	011b      	lsls	r3, r3, #4
 800c378:	4413      	add	r3, r2
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1f2      	bne.n	800c366 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2b02      	cmp	r3, #2
 800c384:	d101      	bne.n	800c38a <inc_lock+0x8a>
 800c386:	2300      	movs	r3, #0
 800c388:	e040      	b.n	800c40c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	4922      	ldr	r1, [pc, #136]	; (800c418 <inc_lock+0x118>)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	011b      	lsls	r3, r3, #4
 800c394:	440b      	add	r3, r1
 800c396:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	689a      	ldr	r2, [r3, #8]
 800c39c:	491e      	ldr	r1, [pc, #120]	; (800c418 <inc_lock+0x118>)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	011b      	lsls	r3, r3, #4
 800c3a2:	440b      	add	r3, r1
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	695a      	ldr	r2, [r3, #20]
 800c3ac:	491a      	ldr	r1, [pc, #104]	; (800c418 <inc_lock+0x118>)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	011b      	lsls	r3, r3, #4
 800c3b2:	440b      	add	r3, r1
 800c3b4:	3308      	adds	r3, #8
 800c3b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c3b8:	4a17      	ldr	r2, [pc, #92]	; (800c418 <inc_lock+0x118>)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	011b      	lsls	r3, r3, #4
 800c3be:	4413      	add	r3, r2
 800c3c0:	330c      	adds	r3, #12
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d009      	beq.n	800c3e0 <inc_lock+0xe0>
 800c3cc:	4a12      	ldr	r2, [pc, #72]	; (800c418 <inc_lock+0x118>)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	011b      	lsls	r3, r3, #4
 800c3d2:	4413      	add	r3, r2
 800c3d4:	330c      	adds	r3, #12
 800c3d6:	881b      	ldrh	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <inc_lock+0xe0>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	e015      	b.n	800c40c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d108      	bne.n	800c3f8 <inc_lock+0xf8>
 800c3e6:	4a0c      	ldr	r2, [pc, #48]	; (800c418 <inc_lock+0x118>)
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	011b      	lsls	r3, r3, #4
 800c3ec:	4413      	add	r3, r2
 800c3ee:	330c      	adds	r3, #12
 800c3f0:	881b      	ldrh	r3, [r3, #0]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	b29a      	uxth	r2, r3
 800c3f6:	e001      	b.n	800c3fc <inc_lock+0xfc>
 800c3f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3fc:	4906      	ldr	r1, [pc, #24]	; (800c418 <inc_lock+0x118>)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	011b      	lsls	r3, r3, #4
 800c402:	440b      	add	r3, r1
 800c404:	330c      	adds	r3, #12
 800c406:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	3301      	adds	r3, #1
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3714      	adds	r7, #20
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	200004c8 	.word	0x200004c8

0800c41c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	3b01      	subs	r3, #1
 800c428:	607b      	str	r3, [r7, #4]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d825      	bhi.n	800c47c <dec_lock+0x60>
		n = Files[i].ctr;
 800c430:	4a17      	ldr	r2, [pc, #92]	; (800c490 <dec_lock+0x74>)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	011b      	lsls	r3, r3, #4
 800c436:	4413      	add	r3, r2
 800c438:	330c      	adds	r3, #12
 800c43a:	881b      	ldrh	r3, [r3, #0]
 800c43c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c43e:	89fb      	ldrh	r3, [r7, #14]
 800c440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c444:	d101      	bne.n	800c44a <dec_lock+0x2e>
 800c446:	2300      	movs	r3, #0
 800c448:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c44a:	89fb      	ldrh	r3, [r7, #14]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d002      	beq.n	800c456 <dec_lock+0x3a>
 800c450:	89fb      	ldrh	r3, [r7, #14]
 800c452:	3b01      	subs	r3, #1
 800c454:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c456:	4a0e      	ldr	r2, [pc, #56]	; (800c490 <dec_lock+0x74>)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	011b      	lsls	r3, r3, #4
 800c45c:	4413      	add	r3, r2
 800c45e:	330c      	adds	r3, #12
 800c460:	89fa      	ldrh	r2, [r7, #14]
 800c462:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c464:	89fb      	ldrh	r3, [r7, #14]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d105      	bne.n	800c476 <dec_lock+0x5a>
 800c46a:	4a09      	ldr	r2, [pc, #36]	; (800c490 <dec_lock+0x74>)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	011b      	lsls	r3, r3, #4
 800c470:	4413      	add	r3, r2
 800c472:	2200      	movs	r2, #0
 800c474:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c476:	2300      	movs	r3, #0
 800c478:	737b      	strb	r3, [r7, #13]
 800c47a:	e001      	b.n	800c480 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c47c:	2302      	movs	r3, #2
 800c47e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c480:	7b7b      	ldrb	r3, [r7, #13]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	200004c8 	.word	0x200004c8

0800c494 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c49c:	2300      	movs	r3, #0
 800c49e:	60fb      	str	r3, [r7, #12]
 800c4a0:	e010      	b.n	800c4c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c4a2:	4a0d      	ldr	r2, [pc, #52]	; (800c4d8 <clear_lock+0x44>)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	011b      	lsls	r3, r3, #4
 800c4a8:	4413      	add	r3, r2
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d105      	bne.n	800c4be <clear_lock+0x2a>
 800c4b2:	4a09      	ldr	r2, [pc, #36]	; (800c4d8 <clear_lock+0x44>)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	011b      	lsls	r3, r3, #4
 800c4b8:	4413      	add	r3, r2
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	60fb      	str	r3, [r7, #12]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d9eb      	bls.n	800c4a2 <clear_lock+0xe>
	}
}
 800c4ca:	bf00      	nop
 800c4cc:	bf00      	nop
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	200004c8 	.word	0x200004c8

0800c4dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	78db      	ldrb	r3, [r3, #3]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d034      	beq.n	800c55a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	7858      	ldrb	r0, [r3, #1]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c500:	2301      	movs	r3, #1
 800c502:	697a      	ldr	r2, [r7, #20]
 800c504:	f7ff fd40 	bl	800bf88 <disk_write>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c50e:	2301      	movs	r3, #1
 800c510:	73fb      	strb	r3, [r7, #15]
 800c512:	e022      	b.n	800c55a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a1b      	ldr	r3, [r3, #32]
 800c51e:	697a      	ldr	r2, [r7, #20]
 800c520:	1ad2      	subs	r2, r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	699b      	ldr	r3, [r3, #24]
 800c526:	429a      	cmp	r2, r3
 800c528:	d217      	bcs.n	800c55a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	789b      	ldrb	r3, [r3, #2]
 800c52e:	613b      	str	r3, [r7, #16]
 800c530:	e010      	b.n	800c554 <sync_window+0x78>
					wsect += fs->fsize;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	699b      	ldr	r3, [r3, #24]
 800c536:	697a      	ldr	r2, [r7, #20]
 800c538:	4413      	add	r3, r2
 800c53a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	7858      	ldrb	r0, [r3, #1]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c546:	2301      	movs	r3, #1
 800c548:	697a      	ldr	r2, [r7, #20]
 800c54a:	f7ff fd1d 	bl	800bf88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	3b01      	subs	r3, #1
 800c552:	613b      	str	r3, [r7, #16]
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	2b01      	cmp	r3, #1
 800c558:	d8eb      	bhi.n	800c532 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3718      	adds	r7, #24
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c56e:	2300      	movs	r3, #0
 800c570:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c576:	683a      	ldr	r2, [r7, #0]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d01b      	beq.n	800c5b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff ffad 	bl	800c4dc <sync_window>
 800c582:	4603      	mov	r3, r0
 800c584:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c586:	7bfb      	ldrb	r3, [r7, #15]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d113      	bne.n	800c5b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	7858      	ldrb	r0, [r3, #1]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c596:	2301      	movs	r3, #1
 800c598:	683a      	ldr	r2, [r7, #0]
 800c59a:	f7ff fcd5 	bl	800bf48 <disk_read>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d004      	beq.n	800c5ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
	...

0800c5c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7ff ff87 	bl	800c4dc <sync_window>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c5d2:	7bfb      	ldrb	r3, [r7, #15]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d158      	bne.n	800c68a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	2b03      	cmp	r3, #3
 800c5de:	d148      	bne.n	800c672 <sync_fs+0xb2>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	791b      	ldrb	r3, [r3, #4]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d144      	bne.n	800c672 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	3330      	adds	r3, #48	; 0x30
 800c5ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7ff fda9 	bl	800c14a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	3330      	adds	r3, #48	; 0x30
 800c5fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c600:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c604:	4618      	mov	r0, r3
 800c606:	f7ff fd38 	bl	800c07a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	3330      	adds	r3, #48	; 0x30
 800c60e:	4921      	ldr	r1, [pc, #132]	; (800c694 <sync_fs+0xd4>)
 800c610:	4618      	mov	r0, r3
 800c612:	f7ff fd4d 	bl	800c0b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	3330      	adds	r3, #48	; 0x30
 800c61a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c61e:	491e      	ldr	r1, [pc, #120]	; (800c698 <sync_fs+0xd8>)
 800c620:	4618      	mov	r0, r3
 800c622:	f7ff fd45 	bl	800c0b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	3330      	adds	r3, #48	; 0x30
 800c62a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	691b      	ldr	r3, [r3, #16]
 800c632:	4619      	mov	r1, r3
 800c634:	4610      	mov	r0, r2
 800c636:	f7ff fd3b 	bl	800c0b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	3330      	adds	r3, #48	; 0x30
 800c63e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	4619      	mov	r1, r3
 800c648:	4610      	mov	r0, r2
 800c64a:	f7ff fd31 	bl	800c0b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	69db      	ldr	r3, [r3, #28]
 800c652:	1c5a      	adds	r2, r3, #1
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	7858      	ldrb	r0, [r3, #1]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c666:	2301      	movs	r3, #1
 800c668:	f7ff fc8e 	bl	800bf88 <disk_write>
			fs->fsi_flag = 0;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	785b      	ldrb	r3, [r3, #1]
 800c676:	2200      	movs	r2, #0
 800c678:	2100      	movs	r1, #0
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7ff fca4 	bl	800bfc8 <disk_ioctl>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d001      	beq.n	800c68a <sync_fs+0xca>
 800c686:	2301      	movs	r3, #1
 800c688:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3710      	adds	r7, #16
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	41615252 	.word	0x41615252
 800c698:	61417272 	.word	0x61417272

0800c69c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	3b02      	subs	r3, #2
 800c6aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	695b      	ldr	r3, [r3, #20]
 800c6b0:	3b02      	subs	r3, #2
 800c6b2:	683a      	ldr	r2, [r7, #0]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d301      	bcc.n	800c6bc <clust2sect+0x20>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	e008      	b.n	800c6ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	895b      	ldrh	r3, [r3, #10]
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	fb03 f202 	mul.w	r2, r3, r2
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6cc:	4413      	add	r3, r2
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	370c      	adds	r7, #12
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr

0800c6da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b086      	sub	sp, #24
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d904      	bls.n	800c6fa <get_fat+0x20>
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	695b      	ldr	r3, [r3, #20]
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d302      	bcc.n	800c700 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	617b      	str	r3, [r7, #20]
 800c6fe:	e08f      	b.n	800c820 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c700:	f04f 33ff 	mov.w	r3, #4294967295
 800c704:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	2b03      	cmp	r3, #3
 800c70c:	d062      	beq.n	800c7d4 <get_fat+0xfa>
 800c70e:	2b03      	cmp	r3, #3
 800c710:	dc7c      	bgt.n	800c80c <get_fat+0x132>
 800c712:	2b01      	cmp	r3, #1
 800c714:	d002      	beq.n	800c71c <get_fat+0x42>
 800c716:	2b02      	cmp	r3, #2
 800c718:	d042      	beq.n	800c7a0 <get_fat+0xc6>
 800c71a:	e077      	b.n	800c80c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	60fb      	str	r3, [r7, #12]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	085b      	lsrs	r3, r3, #1
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	4413      	add	r3, r2
 800c728:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	6a1a      	ldr	r2, [r3, #32]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	0a5b      	lsrs	r3, r3, #9
 800c732:	4413      	add	r3, r2
 800c734:	4619      	mov	r1, r3
 800c736:	6938      	ldr	r0, [r7, #16]
 800c738:	f7ff ff14 	bl	800c564 <move_window>
 800c73c:	4603      	mov	r3, r0
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d167      	bne.n	800c812 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	1c5a      	adds	r2, r3, #1
 800c746:	60fa      	str	r2, [r7, #12]
 800c748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	4413      	add	r3, r2
 800c750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c754:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	6a1a      	ldr	r2, [r3, #32]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	0a5b      	lsrs	r3, r3, #9
 800c75e:	4413      	add	r3, r2
 800c760:	4619      	mov	r1, r3
 800c762:	6938      	ldr	r0, [r7, #16]
 800c764:	f7ff fefe 	bl	800c564 <move_window>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d153      	bne.n	800c816 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c774:	693a      	ldr	r2, [r7, #16]
 800c776:	4413      	add	r3, r2
 800c778:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c77c:	021b      	lsls	r3, r3, #8
 800c77e:	461a      	mov	r2, r3
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	4313      	orrs	r3, r2
 800c784:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	f003 0301 	and.w	r3, r3, #1
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <get_fat+0xbc>
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	091b      	lsrs	r3, r3, #4
 800c794:	e002      	b.n	800c79c <get_fat+0xc2>
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c79c:	617b      	str	r3, [r7, #20]
			break;
 800c79e:	e03f      	b.n	800c820 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	6a1a      	ldr	r2, [r3, #32]
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	0a1b      	lsrs	r3, r3, #8
 800c7a8:	4413      	add	r3, r2
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6938      	ldr	r0, [r7, #16]
 800c7ae:	f7ff fed9 	bl	800c564 <move_window>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d130      	bne.n	800c81a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	005b      	lsls	r3, r3, #1
 800c7c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c7c6:	4413      	add	r3, r2
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f7ff fc1b 	bl	800c004 <ld_word>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	617b      	str	r3, [r7, #20]
			break;
 800c7d2:	e025      	b.n	800c820 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	6a1a      	ldr	r2, [r3, #32]
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	09db      	lsrs	r3, r3, #7
 800c7dc:	4413      	add	r3, r2
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6938      	ldr	r0, [r7, #16]
 800c7e2:	f7ff febf 	bl	800c564 <move_window>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d118      	bne.n	800c81e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c7fa:	4413      	add	r3, r2
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7ff fc19 	bl	800c034 <ld_dword>
 800c802:	4603      	mov	r3, r0
 800c804:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c808:	617b      	str	r3, [r7, #20]
			break;
 800c80a:	e009      	b.n	800c820 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c80c:	2301      	movs	r3, #1
 800c80e:	617b      	str	r3, [r7, #20]
 800c810:	e006      	b.n	800c820 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c812:	bf00      	nop
 800c814:	e004      	b.n	800c820 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c816:	bf00      	nop
 800c818:	e002      	b.n	800c820 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c81a:	bf00      	nop
 800c81c:	e000      	b.n	800c820 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c81e:	bf00      	nop
		}
	}

	return val;
 800c820:	697b      	ldr	r3, [r7, #20]
}
 800c822:	4618      	mov	r0, r3
 800c824:	3718      	adds	r7, #24
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c82a:	b590      	push	{r4, r7, lr}
 800c82c:	b089      	sub	sp, #36	; 0x24
 800c82e:	af00      	add	r7, sp, #0
 800c830:	60f8      	str	r0, [r7, #12]
 800c832:	60b9      	str	r1, [r7, #8]
 800c834:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c836:	2302      	movs	r3, #2
 800c838:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	f240 80d2 	bls.w	800c9e6 <put_fat+0x1bc>
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	695b      	ldr	r3, [r3, #20]
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	429a      	cmp	r2, r3
 800c84a:	f080 80cc 	bcs.w	800c9e6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	2b03      	cmp	r3, #3
 800c854:	f000 8096 	beq.w	800c984 <put_fat+0x15a>
 800c858:	2b03      	cmp	r3, #3
 800c85a:	f300 80cd 	bgt.w	800c9f8 <put_fat+0x1ce>
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d002      	beq.n	800c868 <put_fat+0x3e>
 800c862:	2b02      	cmp	r3, #2
 800c864:	d06e      	beq.n	800c944 <put_fat+0x11a>
 800c866:	e0c7      	b.n	800c9f8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	61bb      	str	r3, [r7, #24]
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	085b      	lsrs	r3, r3, #1
 800c870:	69ba      	ldr	r2, [r7, #24]
 800c872:	4413      	add	r3, r2
 800c874:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6a1a      	ldr	r2, [r3, #32]
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	0a5b      	lsrs	r3, r3, #9
 800c87e:	4413      	add	r3, r2
 800c880:	4619      	mov	r1, r3
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f7ff fe6e 	bl	800c564 <move_window>
 800c888:	4603      	mov	r3, r0
 800c88a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c88c:	7ffb      	ldrb	r3, [r7, #31]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f040 80ab 	bne.w	800c9ea <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	1c59      	adds	r1, r3, #1
 800c89e:	61b9      	str	r1, [r7, #24]
 800c8a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8a4:	4413      	add	r3, r2
 800c8a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00d      	beq.n	800c8ce <put_fat+0xa4>
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	b25b      	sxtb	r3, r3
 800c8b8:	f003 030f 	and.w	r3, r3, #15
 800c8bc:	b25a      	sxtb	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	011b      	lsls	r3, r3, #4
 800c8c4:	b25b      	sxtb	r3, r3
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	b25b      	sxtb	r3, r3
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	e001      	b.n	800c8d2 <put_fat+0xa8>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	697a      	ldr	r2, [r7, #20]
 800c8d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6a1a      	ldr	r2, [r3, #32]
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	0a5b      	lsrs	r3, r3, #9
 800c8e4:	4413      	add	r3, r2
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	68f8      	ldr	r0, [r7, #12]
 800c8ea:	f7ff fe3b 	bl	800c564 <move_window>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8f2:	7ffb      	ldrb	r3, [r7, #31]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d17a      	bne.n	800c9ee <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c904:	4413      	add	r3, r2
 800c906:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	f003 0301 	and.w	r3, r3, #1
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d003      	beq.n	800c91a <put_fat+0xf0>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	091b      	lsrs	r3, r3, #4
 800c916:	b2db      	uxtb	r3, r3
 800c918:	e00e      	b.n	800c938 <put_fat+0x10e>
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	b25b      	sxtb	r3, r3
 800c920:	f023 030f 	bic.w	r3, r3, #15
 800c924:	b25a      	sxtb	r2, r3
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	0a1b      	lsrs	r3, r3, #8
 800c92a:	b25b      	sxtb	r3, r3
 800c92c:	f003 030f 	and.w	r3, r3, #15
 800c930:	b25b      	sxtb	r3, r3
 800c932:	4313      	orrs	r3, r2
 800c934:	b25b      	sxtb	r3, r3
 800c936:	b2db      	uxtb	r3, r3
 800c938:	697a      	ldr	r2, [r7, #20]
 800c93a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2201      	movs	r2, #1
 800c940:	70da      	strb	r2, [r3, #3]
			break;
 800c942:	e059      	b.n	800c9f8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6a1a      	ldr	r2, [r3, #32]
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	0a1b      	lsrs	r3, r3, #8
 800c94c:	4413      	add	r3, r2
 800c94e:	4619      	mov	r1, r3
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f7ff fe07 	bl	800c564 <move_window>
 800c956:	4603      	mov	r3, r0
 800c958:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c95a:	7ffb      	ldrb	r3, [r7, #31]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d148      	bne.n	800c9f2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c96e:	4413      	add	r3, r2
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	b292      	uxth	r2, r2
 800c974:	4611      	mov	r1, r2
 800c976:	4618      	mov	r0, r3
 800c978:	f7ff fb7f 	bl	800c07a <st_word>
			fs->wflag = 1;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2201      	movs	r2, #1
 800c980:	70da      	strb	r2, [r3, #3]
			break;
 800c982:	e039      	b.n	800c9f8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6a1a      	ldr	r2, [r3, #32]
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	09db      	lsrs	r3, r3, #7
 800c98c:	4413      	add	r3, r2
 800c98e:	4619      	mov	r1, r3
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f7ff fde7 	bl	800c564 <move_window>
 800c996:	4603      	mov	r3, r0
 800c998:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c99a:	7ffb      	ldrb	r3, [r7, #31]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d12a      	bne.n	800c9f6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c9b4:	4413      	add	r3, r2
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7ff fb3c 	bl	800c034 <ld_dword>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c9c2:	4323      	orrs	r3, r4
 800c9c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c9d4:	4413      	add	r3, r2
 800c9d6:	6879      	ldr	r1, [r7, #4]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7ff fb69 	bl	800c0b0 <st_dword>
			fs->wflag = 1;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	70da      	strb	r2, [r3, #3]
			break;
 800c9e4:	e008      	b.n	800c9f8 <put_fat+0x1ce>
		}
	}
 800c9e6:	bf00      	nop
 800c9e8:	e006      	b.n	800c9f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c9ea:	bf00      	nop
 800c9ec:	e004      	b.n	800c9f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c9ee:	bf00      	nop
 800c9f0:	e002      	b.n	800c9f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c9f2:	bf00      	nop
 800c9f4:	e000      	b.n	800c9f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c9f6:	bf00      	nop
	return res;
 800c9f8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3724      	adds	r7, #36	; 0x24
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd90      	pop	{r4, r7, pc}

0800ca02 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b088      	sub	sp, #32
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	60f8      	str	r0, [r7, #12]
 800ca0a:	60b9      	str	r1, [r7, #8]
 800ca0c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d904      	bls.n	800ca28 <remove_chain+0x26>
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	695b      	ldr	r3, [r3, #20]
 800ca22:	68ba      	ldr	r2, [r7, #8]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d301      	bcc.n	800ca2c <remove_chain+0x2a>
 800ca28:	2302      	movs	r3, #2
 800ca2a:	e04b      	b.n	800cac4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00c      	beq.n	800ca4c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ca32:	f04f 32ff 	mov.w	r2, #4294967295
 800ca36:	6879      	ldr	r1, [r7, #4]
 800ca38:	69b8      	ldr	r0, [r7, #24]
 800ca3a:	f7ff fef6 	bl	800c82a <put_fat>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ca42:	7ffb      	ldrb	r3, [r7, #31]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d001      	beq.n	800ca4c <remove_chain+0x4a>
 800ca48:	7ffb      	ldrb	r3, [r7, #31]
 800ca4a:	e03b      	b.n	800cac4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ca4c:	68b9      	ldr	r1, [r7, #8]
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f7ff fe43 	bl	800c6da <get_fat>
 800ca54:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d031      	beq.n	800cac0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d101      	bne.n	800ca66 <remove_chain+0x64>
 800ca62:	2302      	movs	r3, #2
 800ca64:	e02e      	b.n	800cac4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6c:	d101      	bne.n	800ca72 <remove_chain+0x70>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e028      	b.n	800cac4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ca72:	2200      	movs	r2, #0
 800ca74:	68b9      	ldr	r1, [r7, #8]
 800ca76:	69b8      	ldr	r0, [r7, #24]
 800ca78:	f7ff fed7 	bl	800c82a <put_fat>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ca80:	7ffb      	ldrb	r3, [r7, #31]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <remove_chain+0x88>
 800ca86:	7ffb      	ldrb	r3, [r7, #31]
 800ca88:	e01c      	b.n	800cac4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	691a      	ldr	r2, [r3, #16]
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	695b      	ldr	r3, [r3, #20]
 800ca92:	3b02      	subs	r3, #2
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d20b      	bcs.n	800cab0 <remove_chain+0xae>
			fs->free_clst++;
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	691b      	ldr	r3, [r3, #16]
 800ca9c:	1c5a      	adds	r2, r3, #1
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	791b      	ldrb	r3, [r3, #4]
 800caa6:	f043 0301 	orr.w	r3, r3, #1
 800caaa:	b2da      	uxtb	r2, r3
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	695b      	ldr	r3, [r3, #20]
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d3c6      	bcc.n	800ca4c <remove_chain+0x4a>
 800cabe:	e000      	b.n	800cac2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cac0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cac2:	2300      	movs	r3, #0
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3720      	adds	r7, #32
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b088      	sub	sp, #32
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d10d      	bne.n	800cafe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cae8:	69bb      	ldr	r3, [r7, #24]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d004      	beq.n	800caf8 <create_chain+0x2c>
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	695b      	ldr	r3, [r3, #20]
 800caf2:	69ba      	ldr	r2, [r7, #24]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d31b      	bcc.n	800cb30 <create_chain+0x64>
 800caf8:	2301      	movs	r3, #1
 800cafa:	61bb      	str	r3, [r7, #24]
 800cafc:	e018      	b.n	800cb30 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cafe:	6839      	ldr	r1, [r7, #0]
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7ff fdea 	bl	800c6da <get_fat>
 800cb06:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d801      	bhi.n	800cb12 <create_chain+0x46>
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e070      	b.n	800cbf4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb18:	d101      	bne.n	800cb1e <create_chain+0x52>
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	e06a      	b.n	800cbf4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	695b      	ldr	r3, [r3, #20]
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d201      	bcs.n	800cb2c <create_chain+0x60>
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	e063      	b.n	800cbf4 <create_chain+0x128>
		scl = clst;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	3301      	adds	r3, #1
 800cb38:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	695b      	ldr	r3, [r3, #20]
 800cb3e:	69fa      	ldr	r2, [r7, #28]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d307      	bcc.n	800cb54 <create_chain+0x88>
				ncl = 2;
 800cb44:	2302      	movs	r3, #2
 800cb46:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cb48:	69fa      	ldr	r2, [r7, #28]
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d901      	bls.n	800cb54 <create_chain+0x88>
 800cb50:	2300      	movs	r3, #0
 800cb52:	e04f      	b.n	800cbf4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cb54:	69f9      	ldr	r1, [r7, #28]
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f7ff fdbf 	bl	800c6da <get_fat>
 800cb5c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00e      	beq.n	800cb82 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d003      	beq.n	800cb72 <create_chain+0xa6>
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb70:	d101      	bne.n	800cb76 <create_chain+0xaa>
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	e03e      	b.n	800cbf4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cb76:	69fa      	ldr	r2, [r7, #28]
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d1da      	bne.n	800cb34 <create_chain+0x68>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	e038      	b.n	800cbf4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cb82:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cb84:	f04f 32ff 	mov.w	r2, #4294967295
 800cb88:	69f9      	ldr	r1, [r7, #28]
 800cb8a:	6938      	ldr	r0, [r7, #16]
 800cb8c:	f7ff fe4d 	bl	800c82a <put_fat>
 800cb90:	4603      	mov	r3, r0
 800cb92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cb94:	7dfb      	ldrb	r3, [r7, #23]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d109      	bne.n	800cbae <create_chain+0xe2>
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d006      	beq.n	800cbae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cba0:	69fa      	ldr	r2, [r7, #28]
 800cba2:	6839      	ldr	r1, [r7, #0]
 800cba4:	6938      	ldr	r0, [r7, #16]
 800cba6:	f7ff fe40 	bl	800c82a <put_fat>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cbae:	7dfb      	ldrb	r3, [r7, #23]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d116      	bne.n	800cbe2 <create_chain+0x116>
		fs->last_clst = ncl;
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	69fa      	ldr	r2, [r7, #28]
 800cbb8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	691a      	ldr	r2, [r3, #16]
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	695b      	ldr	r3, [r3, #20]
 800cbc2:	3b02      	subs	r3, #2
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d804      	bhi.n	800cbd2 <create_chain+0x106>
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	1e5a      	subs	r2, r3, #1
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	791b      	ldrb	r3, [r3, #4]
 800cbd6:	f043 0301 	orr.w	r3, r3, #1
 800cbda:	b2da      	uxtb	r2, r3
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	711a      	strb	r2, [r3, #4]
 800cbe0:	e007      	b.n	800cbf2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cbe2:	7dfb      	ldrb	r3, [r7, #23]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d102      	bne.n	800cbee <create_chain+0x122>
 800cbe8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbec:	e000      	b.n	800cbf0 <create_chain+0x124>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cbf2:	69fb      	ldr	r3, [r7, #28]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3720      	adds	r7, #32
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b087      	sub	sp, #28
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc10:	3304      	adds	r3, #4
 800cc12:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	0a5b      	lsrs	r3, r3, #9
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	8952      	ldrh	r2, [r2, #10]
 800cc1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc20:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	1d1a      	adds	r2, r3, #4
 800cc26:	613a      	str	r2, [r7, #16]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d101      	bne.n	800cc36 <clmt_clust+0x3a>
 800cc32:	2300      	movs	r3, #0
 800cc34:	e010      	b.n	800cc58 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cc36:	697a      	ldr	r2, [r7, #20]
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d307      	bcc.n	800cc4e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cc3e:	697a      	ldr	r2, [r7, #20]
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	1ad3      	subs	r3, r2, r3
 800cc44:	617b      	str	r3, [r7, #20]
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	3304      	adds	r3, #4
 800cc4a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc4c:	e7e9      	b.n	800cc22 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cc4e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	4413      	add	r3, r2
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	371c      	adds	r7, #28
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b086      	sub	sp, #24
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc7a:	d204      	bcs.n	800cc86 <dir_sdi+0x22>
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	f003 031f 	and.w	r3, r3, #31
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <dir_sdi+0x26>
		return FR_INT_ERR;
 800cc86:	2302      	movs	r3, #2
 800cc88:	e063      	b.n	800cd52 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d106      	bne.n	800ccaa <dir_sdi+0x46>
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	d902      	bls.n	800ccaa <dir_sdi+0x46>
		clst = fs->dirbase;
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10c      	bne.n	800ccca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	095b      	lsrs	r3, r3, #5
 800ccb4:	693a      	ldr	r2, [r7, #16]
 800ccb6:	8912      	ldrh	r2, [r2, #8]
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d301      	bcc.n	800ccc0 <dir_sdi+0x5c>
 800ccbc:	2302      	movs	r3, #2
 800ccbe:	e048      	b.n	800cd52 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	61da      	str	r2, [r3, #28]
 800ccc8:	e029      	b.n	800cd1e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	895b      	ldrh	r3, [r3, #10]
 800ccce:	025b      	lsls	r3, r3, #9
 800ccd0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ccd2:	e019      	b.n	800cd08 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6979      	ldr	r1, [r7, #20]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7ff fcfe 	bl	800c6da <get_fat>
 800ccde:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce6:	d101      	bne.n	800ccec <dir_sdi+0x88>
 800cce8:	2301      	movs	r3, #1
 800ccea:	e032      	b.n	800cd52 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d904      	bls.n	800ccfc <dir_sdi+0x98>
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	695b      	ldr	r3, [r3, #20]
 800ccf6:	697a      	ldr	r2, [r7, #20]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d301      	bcc.n	800cd00 <dir_sdi+0x9c>
 800ccfc:	2302      	movs	r3, #2
 800ccfe:	e028      	b.n	800cd52 <dir_sdi+0xee>
			ofs -= csz;
 800cd00:	683a      	ldr	r2, [r7, #0]
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d2e1      	bcs.n	800ccd4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cd10:	6979      	ldr	r1, [r7, #20]
 800cd12:	6938      	ldr	r0, [r7, #16]
 800cd14:	f7ff fcc2 	bl	800c69c <clust2sect>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	697a      	ldr	r2, [r7, #20]
 800cd22:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	69db      	ldr	r3, [r3, #28]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d101      	bne.n	800cd30 <dir_sdi+0xcc>
 800cd2c:	2302      	movs	r3, #2
 800cd2e:	e010      	b.n	800cd52 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	69da      	ldr	r2, [r3, #28]
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	0a5b      	lsrs	r3, r3, #9
 800cd38:	441a      	add	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd4a:	441a      	add	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3718      	adds	r7, #24
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b086      	sub	sp, #24
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
 800cd62:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	695b      	ldr	r3, [r3, #20]
 800cd6e:	3320      	adds	r3, #32
 800cd70:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	69db      	ldr	r3, [r3, #28]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d003      	beq.n	800cd82 <dir_next+0x28>
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd80:	d301      	bcc.n	800cd86 <dir_next+0x2c>
 800cd82:	2304      	movs	r3, #4
 800cd84:	e0aa      	b.n	800cedc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f040 8098 	bne.w	800cec2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	69db      	ldr	r3, [r3, #28]
 800cd96:	1c5a      	adds	r2, r3, #1
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	699b      	ldr	r3, [r3, #24]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10b      	bne.n	800cdbc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	095b      	lsrs	r3, r3, #5
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	8912      	ldrh	r2, [r2, #8]
 800cdac:	4293      	cmp	r3, r2
 800cdae:	f0c0 8088 	bcc.w	800cec2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	61da      	str	r2, [r3, #28]
 800cdb8:	2304      	movs	r3, #4
 800cdba:	e08f      	b.n	800cedc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	0a5b      	lsrs	r3, r3, #9
 800cdc0:	68fa      	ldr	r2, [r7, #12]
 800cdc2:	8952      	ldrh	r2, [r2, #10]
 800cdc4:	3a01      	subs	r2, #1
 800cdc6:	4013      	ands	r3, r2
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d17a      	bne.n	800cec2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	699b      	ldr	r3, [r3, #24]
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	4610      	mov	r0, r2
 800cdd6:	f7ff fc80 	bl	800c6da <get_fat>
 800cdda:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d801      	bhi.n	800cde6 <dir_next+0x8c>
 800cde2:	2302      	movs	r3, #2
 800cde4:	e07a      	b.n	800cedc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdec:	d101      	bne.n	800cdf2 <dir_next+0x98>
 800cdee:	2301      	movs	r3, #1
 800cdf0:	e074      	b.n	800cedc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	697a      	ldr	r2, [r7, #20]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d358      	bcc.n	800ceae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d104      	bne.n	800ce0c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	61da      	str	r2, [r3, #28]
 800ce08:	2304      	movs	r3, #4
 800ce0a:	e067      	b.n	800cedc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	699b      	ldr	r3, [r3, #24]
 800ce12:	4619      	mov	r1, r3
 800ce14:	4610      	mov	r0, r2
 800ce16:	f7ff fe59 	bl	800cacc <create_chain>
 800ce1a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d101      	bne.n	800ce26 <dir_next+0xcc>
 800ce22:	2307      	movs	r3, #7
 800ce24:	e05a      	b.n	800cedc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d101      	bne.n	800ce30 <dir_next+0xd6>
 800ce2c:	2302      	movs	r3, #2
 800ce2e:	e055      	b.n	800cedc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce36:	d101      	bne.n	800ce3c <dir_next+0xe2>
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e04f      	b.n	800cedc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ce3c:	68f8      	ldr	r0, [r7, #12]
 800ce3e:	f7ff fb4d 	bl	800c4dc <sync_window>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d001      	beq.n	800ce4c <dir_next+0xf2>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e047      	b.n	800cedc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	3330      	adds	r3, #48	; 0x30
 800ce50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce54:	2100      	movs	r1, #0
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7ff f977 	bl	800c14a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	613b      	str	r3, [r7, #16]
 800ce60:	6979      	ldr	r1, [r7, #20]
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f7ff fc1a 	bl	800c69c <clust2sect>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ce6e:	e012      	b.n	800ce96 <dir_next+0x13c>
						fs->wflag = 1;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2201      	movs	r2, #1
 800ce74:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ce76:	68f8      	ldr	r0, [r7, #12]
 800ce78:	f7ff fb30 	bl	800c4dc <sync_window>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <dir_next+0x12c>
 800ce82:	2301      	movs	r3, #1
 800ce84:	e02a      	b.n	800cedc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	613b      	str	r3, [r7, #16]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce90:	1c5a      	adds	r2, r3, #1
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	62da      	str	r2, [r3, #44]	; 0x2c
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	895b      	ldrh	r3, [r3, #10]
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d3e6      	bcc.n	800ce70 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	1ad2      	subs	r2, r2, r3
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	697a      	ldr	r2, [r7, #20]
 800ceb2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ceb4:	6979      	ldr	r1, [r7, #20]
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f7ff fbf0 	bl	800c69c <clust2sect>
 800cebc:	4602      	mov	r2, r0
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ced4:	441a      	add	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3718      	adds	r7, #24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b086      	sub	sp, #24
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cef4:	2100      	movs	r1, #0
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff feb4 	bl	800cc64 <dir_sdi>
 800cefc:	4603      	mov	r3, r0
 800cefe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cf00:	7dfb      	ldrb	r3, [r7, #23]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d12b      	bne.n	800cf5e <dir_alloc+0x7a>
		n = 0;
 800cf06:	2300      	movs	r3, #0
 800cf08:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	69db      	ldr	r3, [r3, #28]
 800cf0e:	4619      	mov	r1, r3
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f7ff fb27 	bl	800c564 <move_window>
 800cf16:	4603      	mov	r3, r0
 800cf18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cf1a:	7dfb      	ldrb	r3, [r7, #23]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d11d      	bne.n	800cf5c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6a1b      	ldr	r3, [r3, #32]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	2be5      	cmp	r3, #229	; 0xe5
 800cf28:	d004      	beq.n	800cf34 <dir_alloc+0x50>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6a1b      	ldr	r3, [r3, #32]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d107      	bne.n	800cf44 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	3301      	adds	r3, #1
 800cf38:	613b      	str	r3, [r7, #16]
 800cf3a:	693a      	ldr	r2, [r7, #16]
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d102      	bne.n	800cf48 <dir_alloc+0x64>
 800cf42:	e00c      	b.n	800cf5e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cf44:	2300      	movs	r3, #0
 800cf46:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cf48:	2101      	movs	r1, #1
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f7ff ff05 	bl	800cd5a <dir_next>
 800cf50:	4603      	mov	r3, r0
 800cf52:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cf54:	7dfb      	ldrb	r3, [r7, #23]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d0d7      	beq.n	800cf0a <dir_alloc+0x26>
 800cf5a:	e000      	b.n	800cf5e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cf5c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cf5e:	7dfb      	ldrb	r3, [r7, #23]
 800cf60:	2b04      	cmp	r3, #4
 800cf62:	d101      	bne.n	800cf68 <dir_alloc+0x84>
 800cf64:	2307      	movs	r3, #7
 800cf66:	75fb      	strb	r3, [r7, #23]
	return res;
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3718      	adds	r7, #24
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	331a      	adds	r3, #26
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7ff f83f 	bl	800c004 <ld_word>
 800cf86:	4603      	mov	r3, r0
 800cf88:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	2b03      	cmp	r3, #3
 800cf90:	d109      	bne.n	800cfa6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	3314      	adds	r3, #20
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7ff f834 	bl	800c004 <ld_word>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	041b      	lsls	r3, r3, #16
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	60b9      	str	r1, [r7, #8]
 800cfba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	331a      	adds	r3, #26
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	b292      	uxth	r2, r2
 800cfc4:	4611      	mov	r1, r2
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7ff f857 	bl	800c07a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	2b03      	cmp	r3, #3
 800cfd2:	d109      	bne.n	800cfe8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	f103 0214 	add.w	r2, r3, #20
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	0c1b      	lsrs	r3, r3, #16
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	4610      	mov	r0, r2
 800cfe4:	f7ff f849 	bl	800c07a <st_word>
	}
}
 800cfe8:	bf00      	nop
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b086      	sub	sp, #24
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cffa:	2304      	movs	r3, #4
 800cffc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800d004:	e03c      	b.n	800d080 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	69db      	ldr	r3, [r3, #28]
 800d00a:	4619      	mov	r1, r3
 800d00c:	6938      	ldr	r0, [r7, #16]
 800d00e:	f7ff faa9 	bl	800c564 <move_window>
 800d012:	4603      	mov	r3, r0
 800d014:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d016:	7dfb      	ldrb	r3, [r7, #23]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d136      	bne.n	800d08a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6a1b      	ldr	r3, [r3, #32]
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800d024:	7bfb      	ldrb	r3, [r7, #15]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d102      	bne.n	800d030 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d02a:	2304      	movs	r3, #4
 800d02c:	75fb      	strb	r3, [r7, #23]
 800d02e:	e031      	b.n	800d094 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6a1b      	ldr	r3, [r3, #32]
 800d034:	330b      	adds	r3, #11
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d03c:	73bb      	strb	r3, [r7, #14]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	7bba      	ldrb	r2, [r7, #14]
 800d042:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	2be5      	cmp	r3, #229	; 0xe5
 800d048:	d011      	beq.n	800d06e <dir_read+0x7e>
 800d04a:	7bfb      	ldrb	r3, [r7, #15]
 800d04c:	2b2e      	cmp	r3, #46	; 0x2e
 800d04e:	d00e      	beq.n	800d06e <dir_read+0x7e>
 800d050:	7bbb      	ldrb	r3, [r7, #14]
 800d052:	2b0f      	cmp	r3, #15
 800d054:	d00b      	beq.n	800d06e <dir_read+0x7e>
 800d056:	7bbb      	ldrb	r3, [r7, #14]
 800d058:	f023 0320 	bic.w	r3, r3, #32
 800d05c:	2b08      	cmp	r3, #8
 800d05e:	bf0c      	ite	eq
 800d060:	2301      	moveq	r3, #1
 800d062:	2300      	movne	r3, #0
 800d064:	b2db      	uxtb	r3, r3
 800d066:	461a      	mov	r2, r3
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d00f      	beq.n	800d08e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d06e:	2100      	movs	r1, #0
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7ff fe72 	bl	800cd5a <dir_next>
 800d076:	4603      	mov	r3, r0
 800d078:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d07a:	7dfb      	ldrb	r3, [r7, #23]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d108      	bne.n	800d092 <dir_read+0xa2>
	while (dp->sect) {
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	69db      	ldr	r3, [r3, #28]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1be      	bne.n	800d006 <dir_read+0x16>
 800d088:	e004      	b.n	800d094 <dir_read+0xa4>
		if (res != FR_OK) break;
 800d08a:	bf00      	nop
 800d08c:	e002      	b.n	800d094 <dir_read+0xa4>
				break;
 800d08e:	bf00      	nop
 800d090:	e000      	b.n	800d094 <dir_read+0xa4>
		if (res != FR_OK) break;
 800d092:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d094:	7dfb      	ldrb	r3, [r7, #23]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d002      	beq.n	800d0a0 <dir_read+0xb0>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2200      	movs	r2, #0
 800d09e:	61da      	str	r2, [r3, #28]
	return res;
 800d0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3718      	adds	r7, #24
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b086      	sub	sp, #24
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7ff fdd2 	bl	800cc64 <dir_sdi>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d0c4:	7dfb      	ldrb	r3, [r7, #23]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d001      	beq.n	800d0ce <dir_find+0x24>
 800d0ca:	7dfb      	ldrb	r3, [r7, #23]
 800d0cc:	e03e      	b.n	800d14c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	69db      	ldr	r3, [r3, #28]
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	6938      	ldr	r0, [r7, #16]
 800d0d6:	f7ff fa45 	bl	800c564 <move_window>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d0de:	7dfb      	ldrb	r3, [r7, #23]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d12f      	bne.n	800d144 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6a1b      	ldr	r3, [r3, #32]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d102      	bne.n	800d0f8 <dir_find+0x4e>
 800d0f2:	2304      	movs	r3, #4
 800d0f4:	75fb      	strb	r3, [r7, #23]
 800d0f6:	e028      	b.n	800d14a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a1b      	ldr	r3, [r3, #32]
 800d0fc:	330b      	adds	r3, #11
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d104:	b2da      	uxtb	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a1b      	ldr	r3, [r3, #32]
 800d10e:	330b      	adds	r3, #11
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	f003 0308 	and.w	r3, r3, #8
 800d116:	2b00      	cmp	r3, #0
 800d118:	d10a      	bne.n	800d130 <dir_find+0x86>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a18      	ldr	r0, [r3, #32]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	3324      	adds	r3, #36	; 0x24
 800d122:	220b      	movs	r2, #11
 800d124:	4619      	mov	r1, r3
 800d126:	f7ff f82b 	bl	800c180 <mem_cmp>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00b      	beq.n	800d148 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d130:	2100      	movs	r1, #0
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7ff fe11 	bl	800cd5a <dir_next>
 800d138:	4603      	mov	r3, r0
 800d13a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d13c:	7dfb      	ldrb	r3, [r7, #23]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d0c5      	beq.n	800d0ce <dir_find+0x24>
 800d142:	e002      	b.n	800d14a <dir_find+0xa0>
		if (res != FR_OK) break;
 800d144:	bf00      	nop
 800d146:	e000      	b.n	800d14a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d148:	bf00      	nop

	return res;
 800d14a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3718      	adds	r7, #24
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d162:	2101      	movs	r1, #1
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7ff febd 	bl	800cee4 <dir_alloc>
 800d16a:	4603      	mov	r3, r0
 800d16c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d16e:	7bfb      	ldrb	r3, [r7, #15]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d11c      	bne.n	800d1ae <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	69db      	ldr	r3, [r3, #28]
 800d178:	4619      	mov	r1, r3
 800d17a:	68b8      	ldr	r0, [r7, #8]
 800d17c:	f7ff f9f2 	bl	800c564 <move_window>
 800d180:	4603      	mov	r3, r0
 800d182:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d111      	bne.n	800d1ae <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	2220      	movs	r2, #32
 800d190:	2100      	movs	r1, #0
 800d192:	4618      	mov	r0, r3
 800d194:	f7fe ffd9 	bl	800c14a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6a18      	ldr	r0, [r3, #32]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	3324      	adds	r3, #36	; 0x24
 800d1a0:	220b      	movs	r2, #11
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	f7fe ffb0 	bl	800c108 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b086      	sub	sp, #24
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	69db      	ldr	r3, [r3, #28]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d04e      	beq.n	800d26e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	613b      	str	r3, [r7, #16]
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800d1d8:	e021      	b.n	800d21e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6a1a      	ldr	r2, [r3, #32]
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	1c59      	adds	r1, r3, #1
 800d1e2:	6179      	str	r1, [r7, #20]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d1ea:	7bfb      	ldrb	r3, [r7, #15]
 800d1ec:	2b20      	cmp	r3, #32
 800d1ee:	d100      	bne.n	800d1f2 <get_fileinfo+0x3a>
 800d1f0:	e015      	b.n	800d21e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d1f2:	7bfb      	ldrb	r3, [r7, #15]
 800d1f4:	2b05      	cmp	r3, #5
 800d1f6:	d101      	bne.n	800d1fc <get_fileinfo+0x44>
 800d1f8:	23e5      	movs	r3, #229	; 0xe5
 800d1fa:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	2b09      	cmp	r3, #9
 800d200:	d106      	bne.n	800d210 <get_fileinfo+0x58>
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	1c5a      	adds	r2, r3, #1
 800d206:	613a      	str	r2, [r7, #16]
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	4413      	add	r3, r2
 800d20c:	222e      	movs	r2, #46	; 0x2e
 800d20e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	1c5a      	adds	r2, r3, #1
 800d214:	613a      	str	r2, [r7, #16]
 800d216:	683a      	ldr	r2, [r7, #0]
 800d218:	4413      	add	r3, r2
 800d21a:	7bfa      	ldrb	r2, [r7, #15]
 800d21c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	2b0a      	cmp	r3, #10
 800d222:	d9da      	bls.n	800d1da <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800d224:	683a      	ldr	r2, [r7, #0]
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	4413      	add	r3, r2
 800d22a:	3309      	adds	r3, #9
 800d22c:	2200      	movs	r2, #0
 800d22e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6a1b      	ldr	r3, [r3, #32]
 800d234:	7ada      	ldrb	r2, [r3, #11]
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6a1b      	ldr	r3, [r3, #32]
 800d23e:	331c      	adds	r3, #28
 800d240:	4618      	mov	r0, r3
 800d242:	f7fe fef7 	bl	800c034 <ld_dword>
 800d246:	4602      	mov	r2, r0
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6a1b      	ldr	r3, [r3, #32]
 800d250:	3316      	adds	r3, #22
 800d252:	4618      	mov	r0, r3
 800d254:	f7fe feee 	bl	800c034 <ld_dword>
 800d258:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	80da      	strh	r2, [r3, #6]
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	0c1b      	lsrs	r3, r3, #16
 800d266:	b29a      	uxth	r2, r3
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	809a      	strh	r2, [r3, #4]
 800d26c:	e000      	b.n	800d270 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d26e:	bf00      	nop
}
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
	...

0800d278 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b088      	sub	sp, #32
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	60fb      	str	r3, [r7, #12]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	3324      	adds	r3, #36	; 0x24
 800d28c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d28e:	220b      	movs	r2, #11
 800d290:	2120      	movs	r1, #32
 800d292:	68b8      	ldr	r0, [r7, #8]
 800d294:	f7fe ff59 	bl	800c14a <mem_set>
	si = i = 0; ni = 8;
 800d298:	2300      	movs	r3, #0
 800d29a:	613b      	str	r3, [r7, #16]
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	61fb      	str	r3, [r7, #28]
 800d2a0:	2308      	movs	r3, #8
 800d2a2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	1c5a      	adds	r2, r3, #1
 800d2a8:	61fa      	str	r2, [r7, #28]
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d2b2:	7efb      	ldrb	r3, [r7, #27]
 800d2b4:	2b20      	cmp	r3, #32
 800d2b6:	d94e      	bls.n	800d356 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d2b8:	7efb      	ldrb	r3, [r7, #27]
 800d2ba:	2b2f      	cmp	r3, #47	; 0x2f
 800d2bc:	d006      	beq.n	800d2cc <create_name+0x54>
 800d2be:	7efb      	ldrb	r3, [r7, #27]
 800d2c0:	2b5c      	cmp	r3, #92	; 0x5c
 800d2c2:	d110      	bne.n	800d2e6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d2c4:	e002      	b.n	800d2cc <create_name+0x54>
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	61fb      	str	r3, [r7, #28]
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	2b2f      	cmp	r3, #47	; 0x2f
 800d2d6:	d0f6      	beq.n	800d2c6 <create_name+0x4e>
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	4413      	add	r3, r2
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	2b5c      	cmp	r3, #92	; 0x5c
 800d2e2:	d0f0      	beq.n	800d2c6 <create_name+0x4e>
			break;
 800d2e4:	e038      	b.n	800d358 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d2e6:	7efb      	ldrb	r3, [r7, #27]
 800d2e8:	2b2e      	cmp	r3, #46	; 0x2e
 800d2ea:	d003      	beq.n	800d2f4 <create_name+0x7c>
 800d2ec:	693a      	ldr	r2, [r7, #16]
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d30c      	bcc.n	800d30e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	2b0b      	cmp	r3, #11
 800d2f8:	d002      	beq.n	800d300 <create_name+0x88>
 800d2fa:	7efb      	ldrb	r3, [r7, #27]
 800d2fc:	2b2e      	cmp	r3, #46	; 0x2e
 800d2fe:	d001      	beq.n	800d304 <create_name+0x8c>
 800d300:	2306      	movs	r3, #6
 800d302:	e044      	b.n	800d38e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d304:	2308      	movs	r3, #8
 800d306:	613b      	str	r3, [r7, #16]
 800d308:	230b      	movs	r3, #11
 800d30a:	617b      	str	r3, [r7, #20]
			continue;
 800d30c:	e022      	b.n	800d354 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d30e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d312:	2b00      	cmp	r3, #0
 800d314:	da04      	bge.n	800d320 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d316:	7efb      	ldrb	r3, [r7, #27]
 800d318:	3b80      	subs	r3, #128	; 0x80
 800d31a:	4a1f      	ldr	r2, [pc, #124]	; (800d398 <create_name+0x120>)
 800d31c:	5cd3      	ldrb	r3, [r2, r3]
 800d31e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d320:	7efb      	ldrb	r3, [r7, #27]
 800d322:	4619      	mov	r1, r3
 800d324:	481d      	ldr	r0, [pc, #116]	; (800d39c <create_name+0x124>)
 800d326:	f7fe ff52 	bl	800c1ce <chk_chr>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d001      	beq.n	800d334 <create_name+0xbc>
 800d330:	2306      	movs	r3, #6
 800d332:	e02c      	b.n	800d38e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d334:	7efb      	ldrb	r3, [r7, #27]
 800d336:	2b60      	cmp	r3, #96	; 0x60
 800d338:	d905      	bls.n	800d346 <create_name+0xce>
 800d33a:	7efb      	ldrb	r3, [r7, #27]
 800d33c:	2b7a      	cmp	r3, #122	; 0x7a
 800d33e:	d802      	bhi.n	800d346 <create_name+0xce>
 800d340:	7efb      	ldrb	r3, [r7, #27]
 800d342:	3b20      	subs	r3, #32
 800d344:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	1c5a      	adds	r2, r3, #1
 800d34a:	613a      	str	r2, [r7, #16]
 800d34c:	68ba      	ldr	r2, [r7, #8]
 800d34e:	4413      	add	r3, r2
 800d350:	7efa      	ldrb	r2, [r7, #27]
 800d352:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d354:	e7a6      	b.n	800d2a4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d356:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	441a      	add	r2, r3
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d101      	bne.n	800d36c <create_name+0xf4>
 800d368:	2306      	movs	r3, #6
 800d36a:	e010      	b.n	800d38e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	2be5      	cmp	r3, #229	; 0xe5
 800d372:	d102      	bne.n	800d37a <create_name+0x102>
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2205      	movs	r2, #5
 800d378:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d37a:	7efb      	ldrb	r3, [r7, #27]
 800d37c:	2b20      	cmp	r3, #32
 800d37e:	d801      	bhi.n	800d384 <create_name+0x10c>
 800d380:	2204      	movs	r2, #4
 800d382:	e000      	b.n	800d386 <create_name+0x10e>
 800d384:	2200      	movs	r2, #0
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	330b      	adds	r3, #11
 800d38a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d38c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3720      	adds	r7, #32
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	0801576c 	.word	0x0801576c
 800d39c:	080156ac 	.word	0x080156ac

0800d3a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d3b4:	e002      	b.n	800d3bc <follow_path+0x1c>
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	603b      	str	r3, [r7, #0]
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	2b2f      	cmp	r3, #47	; 0x2f
 800d3c2:	d0f8      	beq.n	800d3b6 <follow_path+0x16>
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	2b5c      	cmp	r3, #92	; 0x5c
 800d3ca:	d0f4      	beq.n	800d3b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	2b1f      	cmp	r3, #31
 800d3d8:	d80a      	bhi.n	800d3f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2280      	movs	r2, #128	; 0x80
 800d3de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f7ff fc3d 	bl	800cc64 <dir_sdi>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	75fb      	strb	r3, [r7, #23]
 800d3ee:	e043      	b.n	800d478 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d3f0:	463b      	mov	r3, r7
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f7ff ff3f 	bl	800d278 <create_name>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d3fe:	7dfb      	ldrb	r3, [r7, #23]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d134      	bne.n	800d46e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f7ff fe50 	bl	800d0aa <dir_find>
 800d40a:	4603      	mov	r3, r0
 800d40c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d414:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d416:	7dfb      	ldrb	r3, [r7, #23]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00a      	beq.n	800d432 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d41c:	7dfb      	ldrb	r3, [r7, #23]
 800d41e:	2b04      	cmp	r3, #4
 800d420:	d127      	bne.n	800d472 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d422:	7afb      	ldrb	r3, [r7, #11]
 800d424:	f003 0304 	and.w	r3, r3, #4
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d122      	bne.n	800d472 <follow_path+0xd2>
 800d42c:	2305      	movs	r3, #5
 800d42e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d430:	e01f      	b.n	800d472 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d432:	7afb      	ldrb	r3, [r7, #11]
 800d434:	f003 0304 	and.w	r3, r3, #4
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d11c      	bne.n	800d476 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	799b      	ldrb	r3, [r3, #6]
 800d440:	f003 0310 	and.w	r3, r3, #16
 800d444:	2b00      	cmp	r3, #0
 800d446:	d102      	bne.n	800d44e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d448:	2305      	movs	r3, #5
 800d44a:	75fb      	strb	r3, [r7, #23]
 800d44c:	e014      	b.n	800d478 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	695b      	ldr	r3, [r3, #20]
 800d458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d45c:	4413      	add	r3, r2
 800d45e:	4619      	mov	r1, r3
 800d460:	68f8      	ldr	r0, [r7, #12]
 800d462:	f7ff fd86 	bl	800cf72 <ld_clust>
 800d466:	4602      	mov	r2, r0
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d46c:	e7c0      	b.n	800d3f0 <follow_path+0x50>
			if (res != FR_OK) break;
 800d46e:	bf00      	nop
 800d470:	e002      	b.n	800d478 <follow_path+0xd8>
				break;
 800d472:	bf00      	nop
 800d474:	e000      	b.n	800d478 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d476:	bf00      	nop
			}
		}
	}

	return res;
 800d478:	7dfb      	ldrb	r3, [r7, #23]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3718      	adds	r7, #24
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d482:	b480      	push	{r7}
 800d484:	b087      	sub	sp, #28
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d48a:	f04f 33ff 	mov.w	r3, #4294967295
 800d48e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d031      	beq.n	800d4fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	617b      	str	r3, [r7, #20]
 800d49e:	e002      	b.n	800d4a6 <get_ldnumber+0x24>
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	617b      	str	r3, [r7, #20]
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	2b20      	cmp	r3, #32
 800d4ac:	d903      	bls.n	800d4b6 <get_ldnumber+0x34>
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	2b3a      	cmp	r3, #58	; 0x3a
 800d4b4:	d1f4      	bne.n	800d4a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	2b3a      	cmp	r3, #58	; 0x3a
 800d4bc:	d11c      	bne.n	800d4f8 <get_ldnumber+0x76>
			tp = *path;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	60fa      	str	r2, [r7, #12]
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	3b30      	subs	r3, #48	; 0x30
 800d4ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	2b09      	cmp	r3, #9
 800d4d4:	d80e      	bhi.n	800d4f4 <get_ldnumber+0x72>
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d10a      	bne.n	800d4f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d107      	bne.n	800d4f4 <get_ldnumber+0x72>
					vol = (int)i;
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	617b      	str	r3, [r7, #20]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	697a      	ldr	r2, [r7, #20]
 800d4f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	e002      	b.n	800d4fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d4fc:	693b      	ldr	r3, [r7, #16]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	371c      	adds	r7, #28
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr
	...

0800d50c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	70da      	strb	r2, [r3, #3]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f04f 32ff 	mov.w	r2, #4294967295
 800d522:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d524:	6839      	ldr	r1, [r7, #0]
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f7ff f81c 	bl	800c564 <move_window>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <check_fs+0x2a>
 800d532:	2304      	movs	r3, #4
 800d534:	e038      	b.n	800d5a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	3330      	adds	r3, #48	; 0x30
 800d53a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fe fd60 	bl	800c004 <ld_word>
 800d544:	4603      	mov	r3, r0
 800d546:	461a      	mov	r2, r3
 800d548:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d001      	beq.n	800d554 <check_fs+0x48>
 800d550:	2303      	movs	r3, #3
 800d552:	e029      	b.n	800d5a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d55a:	2be9      	cmp	r3, #233	; 0xe9
 800d55c:	d009      	beq.n	800d572 <check_fs+0x66>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d564:	2beb      	cmp	r3, #235	; 0xeb
 800d566:	d11e      	bne.n	800d5a6 <check_fs+0x9a>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d56e:	2b90      	cmp	r3, #144	; 0x90
 800d570:	d119      	bne.n	800d5a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	3330      	adds	r3, #48	; 0x30
 800d576:	3336      	adds	r3, #54	; 0x36
 800d578:	4618      	mov	r0, r3
 800d57a:	f7fe fd5b 	bl	800c034 <ld_dword>
 800d57e:	4603      	mov	r3, r0
 800d580:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d584:	4a0a      	ldr	r2, [pc, #40]	; (800d5b0 <check_fs+0xa4>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d101      	bne.n	800d58e <check_fs+0x82>
 800d58a:	2300      	movs	r3, #0
 800d58c:	e00c      	b.n	800d5a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	3330      	adds	r3, #48	; 0x30
 800d592:	3352      	adds	r3, #82	; 0x52
 800d594:	4618      	mov	r0, r3
 800d596:	f7fe fd4d 	bl	800c034 <ld_dword>
 800d59a:	4603      	mov	r3, r0
 800d59c:	4a05      	ldr	r2, [pc, #20]	; (800d5b4 <check_fs+0xa8>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d101      	bne.n	800d5a6 <check_fs+0x9a>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	e000      	b.n	800d5a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d5a6:	2302      	movs	r3, #2
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	00544146 	.word	0x00544146
 800d5b4:	33544146 	.word	0x33544146

0800d5b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b096      	sub	sp, #88	; 0x58
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d5cc:	68f8      	ldr	r0, [r7, #12]
 800d5ce:	f7ff ff58 	bl	800d482 <get_ldnumber>
 800d5d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	da01      	bge.n	800d5de <find_volume+0x26>
 800d5da:	230b      	movs	r3, #11
 800d5dc:	e22e      	b.n	800da3c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d5de:	4aa8      	ldr	r2, [pc, #672]	; (800d880 <find_volume+0x2c8>)
 800d5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d101      	bne.n	800d5f2 <find_volume+0x3a>
 800d5ee:	230c      	movs	r3, #12
 800d5f0:	e224      	b.n	800da3c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d5f8:	79fb      	ldrb	r3, [r7, #7]
 800d5fa:	f023 0301 	bic.w	r3, r3, #1
 800d5fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d01a      	beq.n	800d63e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60a:	785b      	ldrb	r3, [r3, #1]
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fe fc5b 	bl	800bec8 <disk_status>
 800d612:	4603      	mov	r3, r0
 800d614:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d61c:	f003 0301 	and.w	r3, r3, #1
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10c      	bne.n	800d63e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d624:	79fb      	ldrb	r3, [r7, #7]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d007      	beq.n	800d63a <find_volume+0x82>
 800d62a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d62e:	f003 0304 	and.w	r3, r3, #4
 800d632:	2b00      	cmp	r3, #0
 800d634:	d001      	beq.n	800d63a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d636:	230a      	movs	r3, #10
 800d638:	e200      	b.n	800da3c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800d63a:	2300      	movs	r3, #0
 800d63c:	e1fe      	b.n	800da3c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d640:	2200      	movs	r2, #0
 800d642:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d646:	b2da      	uxtb	r2, r3
 800d648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64e:	785b      	ldrb	r3, [r3, #1]
 800d650:	4618      	mov	r0, r3
 800d652:	f7fe fc53 	bl	800befc <disk_initialize>
 800d656:	4603      	mov	r3, r0
 800d658:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d65c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d660:	f003 0301 	and.w	r3, r3, #1
 800d664:	2b00      	cmp	r3, #0
 800d666:	d001      	beq.n	800d66c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d668:	2303      	movs	r3, #3
 800d66a:	e1e7      	b.n	800da3c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d66c:	79fb      	ldrb	r3, [r7, #7]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d007      	beq.n	800d682 <find_volume+0xca>
 800d672:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d676:	f003 0304 	and.w	r3, r3, #4
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d001      	beq.n	800d682 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d67e:	230a      	movs	r3, #10
 800d680:	e1dc      	b.n	800da3c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d686:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d688:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d68a:	f7ff ff3f 	bl	800d50c <check_fs>
 800d68e:	4603      	mov	r3, r0
 800d690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d694:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d14b      	bne.n	800d734 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d69c:	2300      	movs	r3, #0
 800d69e:	643b      	str	r3, [r7, #64]	; 0x40
 800d6a0:	e01f      	b.n	800d6e2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d6a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6aa:	011b      	lsls	r3, r3, #4
 800d6ac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d6b0:	4413      	add	r3, r2
 800d6b2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b6:	3304      	adds	r3, #4
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d006      	beq.n	800d6cc <find_volume+0x114>
 800d6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c0:	3308      	adds	r3, #8
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7fe fcb6 	bl	800c034 <ld_dword>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	e000      	b.n	800d6ce <find_volume+0x116>
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d6d6:	440b      	add	r3, r1
 800d6d8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d6dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6de:	3301      	adds	r3, #1
 800d6e0:	643b      	str	r3, [r7, #64]	; 0x40
 800d6e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6e4:	2b03      	cmp	r3, #3
 800d6e6:	d9dc      	bls.n	800d6a2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d002      	beq.n	800d6f8 <find_volume+0x140>
 800d6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d700:	4413      	add	r3, r2
 800d702:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d706:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d005      	beq.n	800d71a <find_volume+0x162>
 800d70e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d710:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d712:	f7ff fefb 	bl	800d50c <check_fs>
 800d716:	4603      	mov	r3, r0
 800d718:	e000      	b.n	800d71c <find_volume+0x164>
 800d71a:	2303      	movs	r3, #3
 800d71c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d720:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d724:	2b01      	cmp	r3, #1
 800d726:	d905      	bls.n	800d734 <find_volume+0x17c>
 800d728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d72a:	3301      	adds	r3, #1
 800d72c:	643b      	str	r3, [r7, #64]	; 0x40
 800d72e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d730:	2b03      	cmp	r3, #3
 800d732:	d9e1      	bls.n	800d6f8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d734:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d738:	2b04      	cmp	r3, #4
 800d73a:	d101      	bne.n	800d740 <find_volume+0x188>
 800d73c:	2301      	movs	r3, #1
 800d73e:	e17d      	b.n	800da3c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d740:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d744:	2b01      	cmp	r3, #1
 800d746:	d901      	bls.n	800d74c <find_volume+0x194>
 800d748:	230d      	movs	r3, #13
 800d74a:	e177      	b.n	800da3c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74e:	3330      	adds	r3, #48	; 0x30
 800d750:	330b      	adds	r3, #11
 800d752:	4618      	mov	r0, r3
 800d754:	f7fe fc56 	bl	800c004 <ld_word>
 800d758:	4603      	mov	r3, r0
 800d75a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d75e:	d001      	beq.n	800d764 <find_volume+0x1ac>
 800d760:	230d      	movs	r3, #13
 800d762:	e16b      	b.n	800da3c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d766:	3330      	adds	r3, #48	; 0x30
 800d768:	3316      	adds	r3, #22
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fe fc4a 	bl	800c004 <ld_word>
 800d770:	4603      	mov	r3, r0
 800d772:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d776:	2b00      	cmp	r3, #0
 800d778:	d106      	bne.n	800d788 <find_volume+0x1d0>
 800d77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77c:	3330      	adds	r3, #48	; 0x30
 800d77e:	3324      	adds	r3, #36	; 0x24
 800d780:	4618      	mov	r0, r3
 800d782:	f7fe fc57 	bl	800c034 <ld_dword>
 800d786:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d78c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d790:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d796:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79a:	789b      	ldrb	r3, [r3, #2]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d005      	beq.n	800d7ac <find_volume+0x1f4>
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a2:	789b      	ldrb	r3, [r3, #2]
 800d7a4:	2b02      	cmp	r3, #2
 800d7a6:	d001      	beq.n	800d7ac <find_volume+0x1f4>
 800d7a8:	230d      	movs	r3, #13
 800d7aa:	e147      	b.n	800da3c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ae:	789b      	ldrb	r3, [r3, #2]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7b4:	fb02 f303 	mul.w	r3, r2, r3
 800d7b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c8:	895b      	ldrh	r3, [r3, #10]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d008      	beq.n	800d7e0 <find_volume+0x228>
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d0:	895b      	ldrh	r3, [r3, #10]
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d6:	895b      	ldrh	r3, [r3, #10]
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	4013      	ands	r3, r2
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d001      	beq.n	800d7e4 <find_volume+0x22c>
 800d7e0:	230d      	movs	r3, #13
 800d7e2:	e12b      	b.n	800da3c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e6:	3330      	adds	r3, #48	; 0x30
 800d7e8:	3311      	adds	r3, #17
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fe fc0a 	bl	800c004 <ld_word>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fa:	891b      	ldrh	r3, [r3, #8]
 800d7fc:	f003 030f 	and.w	r3, r3, #15
 800d800:	b29b      	uxth	r3, r3
 800d802:	2b00      	cmp	r3, #0
 800d804:	d001      	beq.n	800d80a <find_volume+0x252>
 800d806:	230d      	movs	r3, #13
 800d808:	e118      	b.n	800da3c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80c:	3330      	adds	r3, #48	; 0x30
 800d80e:	3313      	adds	r3, #19
 800d810:	4618      	mov	r0, r3
 800d812:	f7fe fbf7 	bl	800c004 <ld_word>
 800d816:	4603      	mov	r3, r0
 800d818:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d81a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d106      	bne.n	800d82e <find_volume+0x276>
 800d820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d822:	3330      	adds	r3, #48	; 0x30
 800d824:	3320      	adds	r3, #32
 800d826:	4618      	mov	r0, r3
 800d828:	f7fe fc04 	bl	800c034 <ld_dword>
 800d82c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d830:	3330      	adds	r3, #48	; 0x30
 800d832:	330e      	adds	r3, #14
 800d834:	4618      	mov	r0, r3
 800d836:	f7fe fbe5 	bl	800c004 <ld_word>
 800d83a:	4603      	mov	r3, r0
 800d83c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d83e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d840:	2b00      	cmp	r3, #0
 800d842:	d101      	bne.n	800d848 <find_volume+0x290>
 800d844:	230d      	movs	r3, #13
 800d846:	e0f9      	b.n	800da3c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d848:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d84c:	4413      	add	r3, r2
 800d84e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d850:	8912      	ldrh	r2, [r2, #8]
 800d852:	0912      	lsrs	r2, r2, #4
 800d854:	b292      	uxth	r2, r2
 800d856:	4413      	add	r3, r2
 800d858:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d85a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85e:	429a      	cmp	r2, r3
 800d860:	d201      	bcs.n	800d866 <find_volume+0x2ae>
 800d862:	230d      	movs	r3, #13
 800d864:	e0ea      	b.n	800da3c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d86e:	8952      	ldrh	r2, [r2, #10]
 800d870:	fbb3 f3f2 	udiv	r3, r3, r2
 800d874:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d103      	bne.n	800d884 <find_volume+0x2cc>
 800d87c:	230d      	movs	r3, #13
 800d87e:	e0dd      	b.n	800da3c <find_volume+0x484>
 800d880:	200004c0 	.word	0x200004c0
		fmt = FS_FAT32;
 800d884:	2303      	movs	r3, #3
 800d886:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d890:	4293      	cmp	r3, r2
 800d892:	d802      	bhi.n	800d89a <find_volume+0x2e2>
 800d894:	2302      	movs	r3, #2
 800d896:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d802      	bhi.n	800d8aa <find_volume+0x2f2>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ac:	1c9a      	adds	r2, r3, #2
 800d8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8b6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d8b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d8ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8bc:	441a      	add	r2, r3
 800d8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d8c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c6:	441a      	add	r2, r3
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ca:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d8cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d8d0:	2b03      	cmp	r3, #3
 800d8d2:	d11e      	bne.n	800d912 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d6:	3330      	adds	r3, #48	; 0x30
 800d8d8:	332a      	adds	r3, #42	; 0x2a
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fe fb92 	bl	800c004 <ld_word>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d001      	beq.n	800d8ea <find_volume+0x332>
 800d8e6:	230d      	movs	r3, #13
 800d8e8:	e0a8      	b.n	800da3c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ec:	891b      	ldrh	r3, [r3, #8]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d001      	beq.n	800d8f6 <find_volume+0x33e>
 800d8f2:	230d      	movs	r3, #13
 800d8f4:	e0a2      	b.n	800da3c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f8:	3330      	adds	r3, #48	; 0x30
 800d8fa:	332c      	adds	r3, #44	; 0x2c
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fe fb99 	bl	800c034 <ld_dword>
 800d902:	4602      	mov	r2, r0
 800d904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d906:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90a:	695b      	ldr	r3, [r3, #20]
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	647b      	str	r3, [r7, #68]	; 0x44
 800d910:	e01f      	b.n	800d952 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d914:	891b      	ldrh	r3, [r3, #8]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d101      	bne.n	800d91e <find_volume+0x366>
 800d91a:	230d      	movs	r3, #13
 800d91c:	e08e      	b.n	800da3c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d920:	6a1a      	ldr	r2, [r3, #32]
 800d922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d924:	441a      	add	r2, r3
 800d926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d928:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d92a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d92e:	2b02      	cmp	r3, #2
 800d930:	d103      	bne.n	800d93a <find_volume+0x382>
 800d932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	005b      	lsls	r3, r3, #1
 800d938:	e00a      	b.n	800d950 <find_volume+0x398>
 800d93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93c:	695a      	ldr	r2, [r3, #20]
 800d93e:	4613      	mov	r3, r2
 800d940:	005b      	lsls	r3, r3, #1
 800d942:	4413      	add	r3, r2
 800d944:	085a      	lsrs	r2, r3, #1
 800d946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d948:	695b      	ldr	r3, [r3, #20]
 800d94a:	f003 0301 	and.w	r3, r3, #1
 800d94e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d950:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d954:	699a      	ldr	r2, [r3, #24]
 800d956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d958:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d95c:	0a5b      	lsrs	r3, r3, #9
 800d95e:	429a      	cmp	r2, r3
 800d960:	d201      	bcs.n	800d966 <find_volume+0x3ae>
 800d962:	230d      	movs	r3, #13
 800d964:	e06a      	b.n	800da3c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d968:	f04f 32ff 	mov.w	r2, #4294967295
 800d96c:	611a      	str	r2, [r3, #16]
 800d96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d970:	691a      	ldr	r2, [r3, #16]
 800d972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d974:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d978:	2280      	movs	r2, #128	; 0x80
 800d97a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d97c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d980:	2b03      	cmp	r3, #3
 800d982:	d149      	bne.n	800da18 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d986:	3330      	adds	r3, #48	; 0x30
 800d988:	3330      	adds	r3, #48	; 0x30
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fe fb3a 	bl	800c004 <ld_word>
 800d990:	4603      	mov	r3, r0
 800d992:	2b01      	cmp	r3, #1
 800d994:	d140      	bne.n	800da18 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d998:	3301      	adds	r3, #1
 800d99a:	4619      	mov	r1, r3
 800d99c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d99e:	f7fe fde1 	bl	800c564 <move_window>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d137      	bne.n	800da18 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b0:	3330      	adds	r3, #48	; 0x30
 800d9b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fe fb24 	bl	800c004 <ld_word>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	461a      	mov	r2, r3
 800d9c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d127      	bne.n	800da18 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ca:	3330      	adds	r3, #48	; 0x30
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7fe fb31 	bl	800c034 <ld_dword>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	4a1b      	ldr	r2, [pc, #108]	; (800da44 <find_volume+0x48c>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d11e      	bne.n	800da18 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9dc:	3330      	adds	r3, #48	; 0x30
 800d9de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7fe fb26 	bl	800c034 <ld_dword>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	4a17      	ldr	r2, [pc, #92]	; (800da48 <find_volume+0x490>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d113      	bne.n	800da18 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f2:	3330      	adds	r3, #48	; 0x30
 800d9f4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7fe fb1b 	bl	800c034 <ld_dword>
 800d9fe:	4602      	mov	r2, r0
 800da00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da02:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800da04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da06:	3330      	adds	r3, #48	; 0x30
 800da08:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7fe fb11 	bl	800c034 <ld_dword>
 800da12:	4602      	mov	r2, r0
 800da14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da16:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800da18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800da1e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800da20:	4b0a      	ldr	r3, [pc, #40]	; (800da4c <find_volume+0x494>)
 800da22:	881b      	ldrh	r3, [r3, #0]
 800da24:	3301      	adds	r3, #1
 800da26:	b29a      	uxth	r2, r3
 800da28:	4b08      	ldr	r3, [pc, #32]	; (800da4c <find_volume+0x494>)
 800da2a:	801a      	strh	r2, [r3, #0]
 800da2c:	4b07      	ldr	r3, [pc, #28]	; (800da4c <find_volume+0x494>)
 800da2e:	881a      	ldrh	r2, [r3, #0]
 800da30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da32:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800da34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da36:	f7fe fd2d 	bl	800c494 <clear_lock>
#endif
	return FR_OK;
 800da3a:	2300      	movs	r3, #0
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3758      	adds	r7, #88	; 0x58
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	41615252 	.word	0x41615252
 800da48:	61417272 	.word	0x61417272
 800da4c:	200004c4 	.word	0x200004c4

0800da50 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800da5a:	2309      	movs	r3, #9
 800da5c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d01c      	beq.n	800da9e <validate+0x4e>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d018      	beq.n	800da9e <validate+0x4e>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d013      	beq.n	800da9e <validate+0x4e>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	889a      	ldrh	r2, [r3, #4]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	88db      	ldrh	r3, [r3, #6]
 800da80:	429a      	cmp	r2, r3
 800da82:	d10c      	bne.n	800da9e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	785b      	ldrb	r3, [r3, #1]
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7fe fa1c 	bl	800bec8 <disk_status>
 800da90:	4603      	mov	r3, r0
 800da92:	f003 0301 	and.w	r3, r3, #1
 800da96:	2b00      	cmp	r3, #0
 800da98:	d101      	bne.n	800da9e <validate+0x4e>
			res = FR_OK;
 800da9a:	2300      	movs	r3, #0
 800da9c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800da9e:	7bfb      	ldrb	r3, [r7, #15]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d102      	bne.n	800daaa <validate+0x5a>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	e000      	b.n	800daac <validate+0x5c>
 800daaa:	2300      	movs	r3, #0
 800daac:	683a      	ldr	r2, [r7, #0]
 800daae:	6013      	str	r3, [r2, #0]
	return res;
 800dab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
	...

0800dabc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b088      	sub	sp, #32
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	60b9      	str	r1, [r7, #8]
 800dac6:	4613      	mov	r3, r2
 800dac8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dace:	f107 0310 	add.w	r3, r7, #16
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff fcd5 	bl	800d482 <get_ldnumber>
 800dad8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	da01      	bge.n	800dae4 <f_mount+0x28>
 800dae0:	230b      	movs	r3, #11
 800dae2:	e02b      	b.n	800db3c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dae4:	4a17      	ldr	r2, [pc, #92]	; (800db44 <f_mount+0x88>)
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d005      	beq.n	800db00 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800daf4:	69b8      	ldr	r0, [r7, #24]
 800daf6:	f7fe fccd 	bl	800c494 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	2200      	movs	r2, #0
 800dafe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d002      	beq.n	800db0c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2200      	movs	r2, #0
 800db0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	490d      	ldr	r1, [pc, #52]	; (800db44 <f_mount+0x88>)
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d002      	beq.n	800db22 <f_mount+0x66>
 800db1c:	79fb      	ldrb	r3, [r7, #7]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d001      	beq.n	800db26 <f_mount+0x6a>
 800db22:	2300      	movs	r3, #0
 800db24:	e00a      	b.n	800db3c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800db26:	f107 010c 	add.w	r1, r7, #12
 800db2a:	f107 0308 	add.w	r3, r7, #8
 800db2e:	2200      	movs	r2, #0
 800db30:	4618      	mov	r0, r3
 800db32:	f7ff fd41 	bl	800d5b8 <find_volume>
 800db36:	4603      	mov	r3, r0
 800db38:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3720      	adds	r7, #32
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	200004c0 	.word	0x200004c0

0800db48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b098      	sub	sp, #96	; 0x60
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	60b9      	str	r1, [r7, #8]
 800db52:	4613      	mov	r3, r2
 800db54:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d101      	bne.n	800db60 <f_open+0x18>
 800db5c:	2309      	movs	r3, #9
 800db5e:	e1ad      	b.n	800debc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800db60:	79fb      	ldrb	r3, [r7, #7]
 800db62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db66:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800db68:	79fa      	ldrb	r2, [r7, #7]
 800db6a:	f107 0110 	add.w	r1, r7, #16
 800db6e:	f107 0308 	add.w	r3, r7, #8
 800db72:	4618      	mov	r0, r3
 800db74:	f7ff fd20 	bl	800d5b8 <find_volume>
 800db78:	4603      	mov	r3, r0
 800db7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800db7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db82:	2b00      	cmp	r3, #0
 800db84:	f040 8191 	bne.w	800deaa <f_open+0x362>
		dj.obj.fs = fs;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800db8c:	68ba      	ldr	r2, [r7, #8]
 800db8e:	f107 0314 	add.w	r3, r7, #20
 800db92:	4611      	mov	r1, r2
 800db94:	4618      	mov	r0, r3
 800db96:	f7ff fc03 	bl	800d3a0 <follow_path>
 800db9a:	4603      	mov	r3, r0
 800db9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dba0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d11a      	bne.n	800dbde <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dba8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dbac:	b25b      	sxtb	r3, r3
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	da03      	bge.n	800dbba <f_open+0x72>
				res = FR_INVALID_NAME;
 800dbb2:	2306      	movs	r3, #6
 800dbb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dbb8:	e011      	b.n	800dbde <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbba:	79fb      	ldrb	r3, [r7, #7]
 800dbbc:	f023 0301 	bic.w	r3, r3, #1
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	bf14      	ite	ne
 800dbc4:	2301      	movne	r3, #1
 800dbc6:	2300      	moveq	r3, #0
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	461a      	mov	r2, r3
 800dbcc:	f107 0314 	add.w	r3, r7, #20
 800dbd0:	4611      	mov	r1, r2
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fe fb16 	bl	800c204 <chk_lock>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dbde:	79fb      	ldrb	r3, [r7, #7]
 800dbe0:	f003 031c 	and.w	r3, r3, #28
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d07f      	beq.n	800dce8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dbe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d017      	beq.n	800dc20 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dbf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbf4:	2b04      	cmp	r3, #4
 800dbf6:	d10e      	bne.n	800dc16 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dbf8:	f7fe fb60 	bl	800c2bc <enq_lock>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d006      	beq.n	800dc10 <f_open+0xc8>
 800dc02:	f107 0314 	add.w	r3, r7, #20
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7ff faa4 	bl	800d154 <dir_register>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	e000      	b.n	800dc12 <f_open+0xca>
 800dc10:	2312      	movs	r3, #18
 800dc12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dc16:	79fb      	ldrb	r3, [r7, #7]
 800dc18:	f043 0308 	orr.w	r3, r3, #8
 800dc1c:	71fb      	strb	r3, [r7, #7]
 800dc1e:	e010      	b.n	800dc42 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dc20:	7ebb      	ldrb	r3, [r7, #26]
 800dc22:	f003 0311 	and.w	r3, r3, #17
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d003      	beq.n	800dc32 <f_open+0xea>
					res = FR_DENIED;
 800dc2a:	2307      	movs	r3, #7
 800dc2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dc30:	e007      	b.n	800dc42 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dc32:	79fb      	ldrb	r3, [r7, #7]
 800dc34:	f003 0304 	and.w	r3, r3, #4
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d002      	beq.n	800dc42 <f_open+0xfa>
 800dc3c:	2308      	movs	r3, #8
 800dc3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dc42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d168      	bne.n	800dd1c <f_open+0x1d4>
 800dc4a:	79fb      	ldrb	r3, [r7, #7]
 800dc4c:	f003 0308 	and.w	r3, r3, #8
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d063      	beq.n	800dd1c <f_open+0x1d4>
				dw = GET_FATTIME();
 800dc54:	f7fd fbf8 	bl	800b448 <get_fattime>
 800dc58:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dc5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc5c:	330e      	adds	r3, #14
 800dc5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7fe fa25 	bl	800c0b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dc66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc68:	3316      	adds	r3, #22
 800dc6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7fe fa1f 	bl	800c0b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc74:	330b      	adds	r3, #11
 800dc76:	2220      	movs	r2, #32
 800dc78:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc7e:	4611      	mov	r1, r2
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7ff f976 	bl	800cf72 <ld_clust>
 800dc86:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7ff f98e 	bl	800cfb0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc96:	331c      	adds	r3, #28
 800dc98:	2100      	movs	r1, #0
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7fe fa08 	bl	800c0b0 <st_dword>
					fs->wflag = 1;
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	2201      	movs	r2, #1
 800dca4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d037      	beq.n	800dd1c <f_open+0x1d4>
						dw = fs->winsect;
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800dcb2:	f107 0314 	add.w	r3, r7, #20
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fe fea1 	bl	800ca02 <remove_chain>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800dcc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d126      	bne.n	800dd1c <f_open+0x1d4>
							res = move_window(fs, dw);
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fe fc46 	bl	800c564 <move_window>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dce2:	3a01      	subs	r2, #1
 800dce4:	60da      	str	r2, [r3, #12]
 800dce6:	e019      	b.n	800dd1c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dce8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d115      	bne.n	800dd1c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dcf0:	7ebb      	ldrb	r3, [r7, #26]
 800dcf2:	f003 0310 	and.w	r3, r3, #16
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d003      	beq.n	800dd02 <f_open+0x1ba>
					res = FR_NO_FILE;
 800dcfa:	2304      	movs	r3, #4
 800dcfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dd00:	e00c      	b.n	800dd1c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dd02:	79fb      	ldrb	r3, [r7, #7]
 800dd04:	f003 0302 	and.w	r3, r3, #2
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d007      	beq.n	800dd1c <f_open+0x1d4>
 800dd0c:	7ebb      	ldrb	r3, [r7, #26]
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d002      	beq.n	800dd1c <f_open+0x1d4>
						res = FR_DENIED;
 800dd16:	2307      	movs	r3, #7
 800dd18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dd1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d128      	bne.n	800dd76 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dd24:	79fb      	ldrb	r3, [r7, #7]
 800dd26:	f003 0308 	and.w	r3, r3, #8
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d003      	beq.n	800dd36 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dd2e:	79fb      	ldrb	r3, [r7, #7]
 800dd30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd34:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dd3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dd44:	79fb      	ldrb	r3, [r7, #7]
 800dd46:	f023 0301 	bic.w	r3, r3, #1
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	bf14      	ite	ne
 800dd4e:	2301      	movne	r3, #1
 800dd50:	2300      	moveq	r3, #0
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	461a      	mov	r2, r3
 800dd56:	f107 0314 	add.w	r3, r7, #20
 800dd5a:	4611      	mov	r1, r2
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7fe facf 	bl	800c300 <inc_lock>
 800dd62:	4602      	mov	r2, r0
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	691b      	ldr	r3, [r3, #16]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d102      	bne.n	800dd76 <f_open+0x22e>
 800dd70:	2302      	movs	r3, #2
 800dd72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dd76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f040 8095 	bne.w	800deaa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd84:	4611      	mov	r1, r2
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7ff f8f3 	bl	800cf72 <ld_clust>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dd92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd94:	331c      	adds	r3, #28
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fe f94c 	bl	800c034 <ld_dword>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2200      	movs	r2, #0
 800dda6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dda8:	693a      	ldr	r2, [r7, #16]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	88da      	ldrh	r2, [r3, #6]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	79fa      	ldrb	r2, [r7, #7]
 800ddba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	3330      	adds	r3, #48	; 0x30
 800ddd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7fe f9b6 	bl	800c14a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ddde:	79fb      	ldrb	r3, [r7, #7]
 800dde0:	f003 0320 	and.w	r3, r3, #32
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d060      	beq.n	800deaa <f_open+0x362>
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d05c      	beq.n	800deaa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	68da      	ldr	r2, [r3, #12]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	895b      	ldrh	r3, [r3, #10]
 800ddfc:	025b      	lsls	r3, r3, #9
 800ddfe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	689b      	ldr	r3, [r3, #8]
 800de04:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	657b      	str	r3, [r7, #84]	; 0x54
 800de0c:	e016      	b.n	800de3c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de12:	4618      	mov	r0, r3
 800de14:	f7fe fc61 	bl	800c6da <get_fat>
 800de18:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800de1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d802      	bhi.n	800de26 <f_open+0x2de>
 800de20:	2302      	movs	r3, #2
 800de22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800de26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2c:	d102      	bne.n	800de34 <f_open+0x2ec>
 800de2e:	2301      	movs	r3, #1
 800de30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de38:	1ad3      	subs	r3, r2, r3
 800de3a:	657b      	str	r3, [r7, #84]	; 0x54
 800de3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de40:	2b00      	cmp	r3, #0
 800de42:	d103      	bne.n	800de4c <f_open+0x304>
 800de44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de48:	429a      	cmp	r2, r3
 800de4a:	d8e0      	bhi.n	800de0e <f_open+0x2c6>
				}
				fp->clust = clst;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de50:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800de52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de56:	2b00      	cmp	r3, #0
 800de58:	d127      	bne.n	800deaa <f_open+0x362>
 800de5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de60:	2b00      	cmp	r3, #0
 800de62:	d022      	beq.n	800deaa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de68:	4618      	mov	r0, r3
 800de6a:	f7fe fc17 	bl	800c69c <clust2sect>
 800de6e:	6478      	str	r0, [r7, #68]	; 0x44
 800de70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de72:	2b00      	cmp	r3, #0
 800de74:	d103      	bne.n	800de7e <f_open+0x336>
						res = FR_INT_ERR;
 800de76:	2302      	movs	r3, #2
 800de78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800de7c:	e015      	b.n	800deaa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800de7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de80:	0a5a      	lsrs	r2, r3, #9
 800de82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de84:	441a      	add	r2, r3
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	7858      	ldrb	r0, [r3, #1]
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6a1a      	ldr	r2, [r3, #32]
 800de98:	2301      	movs	r3, #1
 800de9a:	f7fe f855 	bl	800bf48 <disk_read>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d002      	beq.n	800deaa <f_open+0x362>
 800dea4:	2301      	movs	r3, #1
 800dea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800deaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d002      	beq.n	800deb8 <f_open+0x370>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2200      	movs	r2, #0
 800deb6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800deb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800debc:	4618      	mov	r0, r3
 800debe:	3760      	adds	r7, #96	; 0x60
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b08c      	sub	sp, #48	; 0x30
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
 800ded0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	2200      	movs	r2, #0
 800deda:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f107 0210 	add.w	r2, r7, #16
 800dee2:	4611      	mov	r1, r2
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7ff fdb3 	bl	800da50 <validate>
 800deea:	4603      	mov	r3, r0
 800deec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800def0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800def4:	2b00      	cmp	r3, #0
 800def6:	d107      	bne.n	800df08 <f_write+0x44>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	7d5b      	ldrb	r3, [r3, #21]
 800defc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800df00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <f_write+0x4a>
 800df08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df0c:	e14b      	b.n	800e1a6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	7d1b      	ldrb	r3, [r3, #20]
 800df12:	f003 0302 	and.w	r3, r3, #2
 800df16:	2b00      	cmp	r3, #0
 800df18:	d101      	bne.n	800df1e <f_write+0x5a>
 800df1a:	2307      	movs	r3, #7
 800df1c:	e143      	b.n	800e1a6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	699a      	ldr	r2, [r3, #24]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	441a      	add	r2, r3
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	699b      	ldr	r3, [r3, #24]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	f080 812d 	bcs.w	800e18a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	699b      	ldr	r3, [r3, #24]
 800df34:	43db      	mvns	r3, r3
 800df36:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800df38:	e127      	b.n	800e18a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	699b      	ldr	r3, [r3, #24]
 800df3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df42:	2b00      	cmp	r3, #0
 800df44:	f040 80e3 	bne.w	800e10e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	699b      	ldr	r3, [r3, #24]
 800df4c:	0a5b      	lsrs	r3, r3, #9
 800df4e:	693a      	ldr	r2, [r7, #16]
 800df50:	8952      	ldrh	r2, [r2, #10]
 800df52:	3a01      	subs	r2, #1
 800df54:	4013      	ands	r3, r2
 800df56:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d143      	bne.n	800dfe6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	699b      	ldr	r3, [r3, #24]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d10c      	bne.n	800df80 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800df6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d11a      	bne.n	800dfa8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2100      	movs	r1, #0
 800df76:	4618      	mov	r0, r3
 800df78:	f7fe fda8 	bl	800cacc <create_chain>
 800df7c:	62b8      	str	r0, [r7, #40]	; 0x28
 800df7e:	e013      	b.n	800dfa8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df84:	2b00      	cmp	r3, #0
 800df86:	d007      	beq.n	800df98 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	699b      	ldr	r3, [r3, #24]
 800df8c:	4619      	mov	r1, r3
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	f7fe fe34 	bl	800cbfc <clmt_clust>
 800df94:	62b8      	str	r0, [r7, #40]	; 0x28
 800df96:	e007      	b.n	800dfa8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	69db      	ldr	r3, [r3, #28]
 800df9e:	4619      	mov	r1, r3
 800dfa0:	4610      	mov	r0, r2
 800dfa2:	f7fe fd93 	bl	800cacc <create_chain>
 800dfa6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	f000 80f2 	beq.w	800e194 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d104      	bne.n	800dfc0 <f_write+0xfc>
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2202      	movs	r2, #2
 800dfba:	755a      	strb	r2, [r3, #21]
 800dfbc:	2302      	movs	r3, #2
 800dfbe:	e0f2      	b.n	800e1a6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc6:	d104      	bne.n	800dfd2 <f_write+0x10e>
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	755a      	strb	r2, [r3, #21]
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e0e9      	b.n	800e1a6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfd6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d102      	bne.n	800dfe6 <f_write+0x122>
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfe4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	7d1b      	ldrb	r3, [r3, #20]
 800dfea:	b25b      	sxtb	r3, r3
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	da18      	bge.n	800e022 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	7858      	ldrb	r0, [r3, #1]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6a1a      	ldr	r2, [r3, #32]
 800dffe:	2301      	movs	r3, #1
 800e000:	f7fd ffc2 	bl	800bf88 <disk_write>
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d004      	beq.n	800e014 <f_write+0x150>
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2201      	movs	r2, #1
 800e00e:	755a      	strb	r2, [r3, #21]
 800e010:	2301      	movs	r3, #1
 800e012:	e0c8      	b.n	800e1a6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	7d1b      	ldrb	r3, [r3, #20]
 800e018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e01c:	b2da      	uxtb	r2, r3
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e022:	693a      	ldr	r2, [r7, #16]
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	69db      	ldr	r3, [r3, #28]
 800e028:	4619      	mov	r1, r3
 800e02a:	4610      	mov	r0, r2
 800e02c:	f7fe fb36 	bl	800c69c <clust2sect>
 800e030:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d104      	bne.n	800e042 <f_write+0x17e>
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2202      	movs	r2, #2
 800e03c:	755a      	strb	r2, [r3, #21]
 800e03e:	2302      	movs	r3, #2
 800e040:	e0b1      	b.n	800e1a6 <f_write+0x2e2>
			sect += csect;
 800e042:	697a      	ldr	r2, [r7, #20]
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	4413      	add	r3, r2
 800e048:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	0a5b      	lsrs	r3, r3, #9
 800e04e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d03c      	beq.n	800e0d0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e056:	69ba      	ldr	r2, [r7, #24]
 800e058:	6a3b      	ldr	r3, [r7, #32]
 800e05a:	4413      	add	r3, r2
 800e05c:	693a      	ldr	r2, [r7, #16]
 800e05e:	8952      	ldrh	r2, [r2, #10]
 800e060:	4293      	cmp	r3, r2
 800e062:	d905      	bls.n	800e070 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	895b      	ldrh	r3, [r3, #10]
 800e068:	461a      	mov	r2, r3
 800e06a:	69bb      	ldr	r3, [r7, #24]
 800e06c:	1ad3      	subs	r3, r2, r3
 800e06e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	7858      	ldrb	r0, [r3, #1]
 800e074:	6a3b      	ldr	r3, [r7, #32]
 800e076:	697a      	ldr	r2, [r7, #20]
 800e078:	69f9      	ldr	r1, [r7, #28]
 800e07a:	f7fd ff85 	bl	800bf88 <disk_write>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d004      	beq.n	800e08e <f_write+0x1ca>
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2201      	movs	r2, #1
 800e088:	755a      	strb	r2, [r3, #21]
 800e08a:	2301      	movs	r3, #1
 800e08c:	e08b      	b.n	800e1a6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6a1a      	ldr	r2, [r3, #32]
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	1ad3      	subs	r3, r2, r3
 800e096:	6a3a      	ldr	r2, [r7, #32]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d915      	bls.n	800e0c8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6a1a      	ldr	r2, [r3, #32]
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	1ad3      	subs	r3, r2, r3
 800e0aa:	025b      	lsls	r3, r3, #9
 800e0ac:	69fa      	ldr	r2, [r7, #28]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	f7fe f827 	bl	800c108 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	7d1b      	ldrb	r3, [r3, #20]
 800e0be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0c2:	b2da      	uxtb	r2, r3
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e0c8:	6a3b      	ldr	r3, [r7, #32]
 800e0ca:	025b      	lsls	r3, r3, #9
 800e0cc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e0ce:	e03f      	b.n	800e150 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6a1b      	ldr	r3, [r3, #32]
 800e0d4:	697a      	ldr	r2, [r7, #20]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d016      	beq.n	800e108 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	699a      	ldr	r2, [r3, #24]
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d210      	bcs.n	800e108 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	7858      	ldrb	r0, [r3, #1]
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	697a      	ldr	r2, [r7, #20]
 800e0f4:	f7fd ff28 	bl	800bf48 <disk_read>
 800e0f8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d004      	beq.n	800e108 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2201      	movs	r2, #1
 800e102:	755a      	strb	r2, [r3, #21]
 800e104:	2301      	movs	r3, #1
 800e106:	e04e      	b.n	800e1a6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	699b      	ldr	r3, [r3, #24]
 800e112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e116:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e11a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	429a      	cmp	r2, r3
 800e122:	d901      	bls.n	800e128 <f_write+0x264>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	699b      	ldr	r3, [r3, #24]
 800e132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e136:	4413      	add	r3, r2
 800e138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e13a:	69f9      	ldr	r1, [r7, #28]
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7fd ffe3 	bl	800c108 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	7d1b      	ldrb	r3, [r3, #20]
 800e146:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e150:	69fa      	ldr	r2, [r7, #28]
 800e152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e154:	4413      	add	r3, r2
 800e156:	61fb      	str	r3, [r7, #28]
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	699a      	ldr	r2, [r3, #24]
 800e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15e:	441a      	add	r2, r3
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	619a      	str	r2, [r3, #24]
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	68da      	ldr	r2, [r3, #12]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	699b      	ldr	r3, [r3, #24]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	bf38      	it	cc
 800e170:	461a      	movcc	r2, r3
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	60da      	str	r2, [r3, #12]
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17c:	441a      	add	r2, r3
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	601a      	str	r2, [r3, #0]
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e186:	1ad3      	subs	r3, r2, r3
 800e188:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	f47f aed4 	bne.w	800df3a <f_write+0x76>
 800e192:	e000      	b.n	800e196 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e194:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	7d1b      	ldrb	r3, [r3, #20]
 800e19a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e19e:	b2da      	uxtb	r2, r3
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3730      	adds	r7, #48	; 0x30
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}

0800e1ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b086      	sub	sp, #24
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f107 0208 	add.w	r2, r7, #8
 800e1bc:	4611      	mov	r1, r2
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7ff fc46 	bl	800da50 <validate>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e1c8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d168      	bne.n	800e2a0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	7d1b      	ldrb	r3, [r3, #20]
 800e1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d062      	beq.n	800e2a0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	7d1b      	ldrb	r3, [r3, #20]
 800e1de:	b25b      	sxtb	r3, r3
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	da15      	bge.n	800e210 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	7858      	ldrb	r0, [r3, #1]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6a1a      	ldr	r2, [r3, #32]
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	f7fd fec8 	bl	800bf88 <disk_write>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d001      	beq.n	800e202 <f_sync+0x54>
 800e1fe:	2301      	movs	r3, #1
 800e200:	e04f      	b.n	800e2a2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	7d1b      	ldrb	r3, [r3, #20]
 800e206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e20a:	b2da      	uxtb	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e210:	f7fd f91a 	bl	800b448 <get_fattime>
 800e214:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e216:	68ba      	ldr	r2, [r7, #8]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e21c:	4619      	mov	r1, r3
 800e21e:	4610      	mov	r0, r2
 800e220:	f7fe f9a0 	bl	800c564 <move_window>
 800e224:	4603      	mov	r3, r0
 800e226:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e228:	7dfb      	ldrb	r3, [r7, #23]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d138      	bne.n	800e2a0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e232:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	330b      	adds	r3, #11
 800e238:	781a      	ldrb	r2, [r3, #0]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	330b      	adds	r3, #11
 800e23e:	f042 0220 	orr.w	r2, r2, #32
 800e242:	b2d2      	uxtb	r2, r2
 800e244:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6818      	ldr	r0, [r3, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	689b      	ldr	r3, [r3, #8]
 800e24e:	461a      	mov	r2, r3
 800e250:	68f9      	ldr	r1, [r7, #12]
 800e252:	f7fe fead 	bl	800cfb0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f103 021c 	add.w	r2, r3, #28
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	4619      	mov	r1, r3
 800e262:	4610      	mov	r0, r2
 800e264:	f7fd ff24 	bl	800c0b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	3316      	adds	r3, #22
 800e26c:	6939      	ldr	r1, [r7, #16]
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fd ff1e 	bl	800c0b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	3312      	adds	r3, #18
 800e278:	2100      	movs	r1, #0
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fd fefd 	bl	800c07a <st_word>
					fs->wflag = 1;
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2201      	movs	r2, #1
 800e284:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fe f999 	bl	800c5c0 <sync_fs>
 800e28e:	4603      	mov	r3, r0
 800e290:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	7d1b      	ldrb	r3, [r3, #20]
 800e296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e29a:	b2da      	uxtb	r2, r3
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e2a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3718      	adds	r7, #24
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b084      	sub	sp, #16
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f7ff ff7b 	bl	800e1ae <f_sync>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e2bc:	7bfb      	ldrb	r3, [r7, #15]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d118      	bne.n	800e2f4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f107 0208 	add.w	r2, r7, #8
 800e2c8:	4611      	mov	r1, r2
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7ff fbc0 	bl	800da50 <validate>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e2d4:	7bfb      	ldrb	r3, [r7, #15]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d10c      	bne.n	800e2f4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	691b      	ldr	r3, [r3, #16]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7fe f89c 	bl	800c41c <dec_lock>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e2e8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d102      	bne.n	800e2f4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3710      	adds	r7, #16
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b090      	sub	sp, #64	; 0x40
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
 800e306:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f107 0208 	add.w	r2, r7, #8
 800e30e:	4611      	mov	r1, r2
 800e310:	4618      	mov	r0, r3
 800e312:	f7ff fb9d 	bl	800da50 <validate>
 800e316:	4603      	mov	r3, r0
 800e318:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e31c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e320:	2b00      	cmp	r3, #0
 800e322:	d103      	bne.n	800e32c <f_lseek+0x2e>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	7d5b      	ldrb	r3, [r3, #21]
 800e328:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e32c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <f_lseek+0x3c>
 800e334:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e338:	e1e6      	b.n	800e708 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f000 80d1 	beq.w	800e4e6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34a:	d15a      	bne.n	800e402 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e350:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e354:	1d1a      	adds	r2, r3, #4
 800e356:	627a      	str	r2, [r7, #36]	; 0x24
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	617b      	str	r3, [r7, #20]
 800e35c:	2302      	movs	r3, #2
 800e35e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	689b      	ldr	r3, [r3, #8]
 800e364:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d03a      	beq.n	800e3e2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36e:	613b      	str	r3, [r7, #16]
 800e370:	2300      	movs	r3, #0
 800e372:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e376:	3302      	adds	r3, #2
 800e378:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37c:	60fb      	str	r3, [r7, #12]
 800e37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e380:	3301      	adds	r3, #1
 800e382:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e388:	4618      	mov	r0, r3
 800e38a:	f7fe f9a6 	bl	800c6da <get_fat>
 800e38e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e392:	2b01      	cmp	r3, #1
 800e394:	d804      	bhi.n	800e3a0 <f_lseek+0xa2>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2202      	movs	r2, #2
 800e39a:	755a      	strb	r2, [r3, #21]
 800e39c:	2302      	movs	r3, #2
 800e39e:	e1b3      	b.n	800e708 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a6:	d104      	bne.n	800e3b2 <f_lseek+0xb4>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	755a      	strb	r2, [r3, #21]
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	e1aa      	b.n	800e708 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d0de      	beq.n	800e37a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e3bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d809      	bhi.n	800e3d8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c6:	1d1a      	adds	r2, r3, #4
 800e3c8:	627a      	str	r2, [r7, #36]	; 0x24
 800e3ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3cc:	601a      	str	r2, [r3, #0]
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d0:	1d1a      	adds	r2, r3, #4
 800e3d2:	627a      	str	r2, [r7, #36]	; 0x24
 800e3d4:	693a      	ldr	r2, [r7, #16]
 800e3d6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	695b      	ldr	r3, [r3, #20]
 800e3dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d3c4      	bcc.n	800e36c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3e8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e3ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d803      	bhi.n	800e3fa <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	601a      	str	r2, [r3, #0]
 800e3f8:	e184      	b.n	800e704 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e3fa:	2311      	movs	r3, #17
 800e3fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e400:	e180      	b.n	800e704 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	429a      	cmp	r2, r3
 800e40a:	d902      	bls.n	800e412 <f_lseek+0x114>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	683a      	ldr	r2, [r7, #0]
 800e416:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	f000 8172 	beq.w	800e704 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	3b01      	subs	r3, #1
 800e424:	4619      	mov	r1, r3
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7fe fbe8 	bl	800cbfc <clmt_clust>
 800e42c:	4602      	mov	r2, r0
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e432:	68ba      	ldr	r2, [r7, #8]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	69db      	ldr	r3, [r3, #28]
 800e438:	4619      	mov	r1, r3
 800e43a:	4610      	mov	r0, r2
 800e43c:	f7fe f92e 	bl	800c69c <clust2sect>
 800e440:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d104      	bne.n	800e452 <f_lseek+0x154>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2202      	movs	r2, #2
 800e44c:	755a      	strb	r2, [r3, #21]
 800e44e:	2302      	movs	r3, #2
 800e450:	e15a      	b.n	800e708 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	3b01      	subs	r3, #1
 800e456:	0a5b      	lsrs	r3, r3, #9
 800e458:	68ba      	ldr	r2, [r7, #8]
 800e45a:	8952      	ldrh	r2, [r2, #10]
 800e45c:	3a01      	subs	r2, #1
 800e45e:	4013      	ands	r3, r2
 800e460:	69ba      	ldr	r2, [r7, #24]
 800e462:	4413      	add	r3, r2
 800e464:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	699b      	ldr	r3, [r3, #24]
 800e46a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e46e:	2b00      	cmp	r3, #0
 800e470:	f000 8148 	beq.w	800e704 <f_lseek+0x406>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6a1b      	ldr	r3, [r3, #32]
 800e478:	69ba      	ldr	r2, [r7, #24]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	f000 8142 	beq.w	800e704 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	7d1b      	ldrb	r3, [r3, #20]
 800e484:	b25b      	sxtb	r3, r3
 800e486:	2b00      	cmp	r3, #0
 800e488:	da18      	bge.n	800e4bc <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	7858      	ldrb	r0, [r3, #1]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6a1a      	ldr	r2, [r3, #32]
 800e498:	2301      	movs	r3, #1
 800e49a:	f7fd fd75 	bl	800bf88 <disk_write>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d004      	beq.n	800e4ae <f_lseek+0x1b0>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	755a      	strb	r2, [r3, #21]
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e12c      	b.n	800e708 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	7d1b      	ldrb	r3, [r3, #20]
 800e4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4b6:	b2da      	uxtb	r2, r3
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	7858      	ldrb	r0, [r3, #1]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	69ba      	ldr	r2, [r7, #24]
 800e4ca:	f7fd fd3d 	bl	800bf48 <disk_read>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d004      	beq.n	800e4de <f_lseek+0x1e0>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	755a      	strb	r2, [r3, #21]
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e114      	b.n	800e708 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	69ba      	ldr	r2, [r7, #24]
 800e4e2:	621a      	str	r2, [r3, #32]
 800e4e4:	e10e      	b.n	800e704 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	683a      	ldr	r2, [r7, #0]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d908      	bls.n	800e502 <f_lseek+0x204>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	7d1b      	ldrb	r3, [r3, #20]
 800e4f4:	f003 0302 	and.w	r3, r3, #2
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d102      	bne.n	800e502 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	699b      	ldr	r3, [r3, #24]
 800e506:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e508:	2300      	movs	r3, #0
 800e50a:	637b      	str	r3, [r7, #52]	; 0x34
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e510:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	f000 80a7 	beq.w	800e668 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	895b      	ldrh	r3, [r3, #10]
 800e51e:	025b      	lsls	r3, r3, #9
 800e520:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e522:	6a3b      	ldr	r3, [r7, #32]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d01b      	beq.n	800e560 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	1e5a      	subs	r2, r3, #1
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	fbb2 f2f3 	udiv	r2, r2, r3
 800e532:	6a3b      	ldr	r3, [r7, #32]
 800e534:	1e59      	subs	r1, r3, #1
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d30f      	bcc.n	800e560 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e540:	6a3b      	ldr	r3, [r7, #32]
 800e542:	1e5a      	subs	r2, r3, #1
 800e544:	69fb      	ldr	r3, [r7, #28]
 800e546:	425b      	negs	r3, r3
 800e548:	401a      	ands	r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	699b      	ldr	r3, [r3, #24]
 800e552:	683a      	ldr	r2, [r7, #0]
 800e554:	1ad3      	subs	r3, r2, r3
 800e556:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	69db      	ldr	r3, [r3, #28]
 800e55c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e55e:	e022      	b.n	800e5a6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	689b      	ldr	r3, [r3, #8]
 800e564:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d119      	bne.n	800e5a0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2100      	movs	r1, #0
 800e570:	4618      	mov	r0, r3
 800e572:	f7fe faab 	bl	800cacc <create_chain>
 800e576:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d104      	bne.n	800e588 <f_lseek+0x28a>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2202      	movs	r2, #2
 800e582:	755a      	strb	r2, [r3, #21]
 800e584:	2302      	movs	r3, #2
 800e586:	e0bf      	b.n	800e708 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e58e:	d104      	bne.n	800e59a <f_lseek+0x29c>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	755a      	strb	r2, [r3, #21]
 800e596:	2301      	movs	r3, #1
 800e598:	e0b6      	b.n	800e708 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e59e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5a4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d05d      	beq.n	800e668 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e5ac:	e03a      	b.n	800e624 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	1ad3      	subs	r3, r2, r3
 800e5b4:	603b      	str	r3, [r7, #0]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	699a      	ldr	r2, [r3, #24]
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	441a      	add	r2, r3
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	7d1b      	ldrb	r3, [r3, #20]
 800e5c6:	f003 0302 	and.w	r3, r3, #2
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00b      	beq.n	800e5e6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fe fa7a 	bl	800cacc <create_chain>
 800e5d8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d108      	bne.n	800e5f2 <f_lseek+0x2f4>
							ofs = 0; break;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	603b      	str	r3, [r7, #0]
 800e5e4:	e022      	b.n	800e62c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fe f875 	bl	800c6da <get_fat>
 800e5f0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5f8:	d104      	bne.n	800e604 <f_lseek+0x306>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	755a      	strb	r2, [r3, #21]
 800e600:	2301      	movs	r3, #1
 800e602:	e081      	b.n	800e708 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e606:	2b01      	cmp	r3, #1
 800e608:	d904      	bls.n	800e614 <f_lseek+0x316>
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	695b      	ldr	r3, [r3, #20]
 800e60e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e610:	429a      	cmp	r2, r3
 800e612:	d304      	bcc.n	800e61e <f_lseek+0x320>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2202      	movs	r2, #2
 800e618:	755a      	strb	r2, [r3, #21]
 800e61a:	2302      	movs	r3, #2
 800e61c:	e074      	b.n	800e708 <f_lseek+0x40a>
					fp->clust = clst;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e622:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e624:	683a      	ldr	r2, [r7, #0]
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d8c0      	bhi.n	800e5ae <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	699a      	ldr	r2, [r3, #24]
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	441a      	add	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d012      	beq.n	800e668 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e646:	4618      	mov	r0, r3
 800e648:	f7fe f828 	bl	800c69c <clust2sect>
 800e64c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e650:	2b00      	cmp	r3, #0
 800e652:	d104      	bne.n	800e65e <f_lseek+0x360>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2202      	movs	r2, #2
 800e658:	755a      	strb	r2, [r3, #21]
 800e65a:	2302      	movs	r3, #2
 800e65c:	e054      	b.n	800e708 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	0a5b      	lsrs	r3, r3, #9
 800e662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e664:	4413      	add	r3, r2
 800e666:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	699a      	ldr	r2, [r3, #24]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	429a      	cmp	r2, r3
 800e672:	d90a      	bls.n	800e68a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	699a      	ldr	r2, [r3, #24]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	7d1b      	ldrb	r3, [r3, #20]
 800e680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e684:	b2da      	uxtb	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	699b      	ldr	r3, [r3, #24]
 800e68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e692:	2b00      	cmp	r3, #0
 800e694:	d036      	beq.n	800e704 <f_lseek+0x406>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6a1b      	ldr	r3, [r3, #32]
 800e69a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d031      	beq.n	800e704 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	7d1b      	ldrb	r3, [r3, #20]
 800e6a4:	b25b      	sxtb	r3, r3
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	da18      	bge.n	800e6dc <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	7858      	ldrb	r0, [r3, #1]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6a1a      	ldr	r2, [r3, #32]
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	f7fd fc65 	bl	800bf88 <disk_write>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d004      	beq.n	800e6ce <f_lseek+0x3d0>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	755a      	strb	r2, [r3, #21]
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	e01c      	b.n	800e708 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	7d1b      	ldrb	r3, [r3, #20]
 800e6d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6d6:	b2da      	uxtb	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	7858      	ldrb	r0, [r3, #1]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6ea:	f7fd fc2d 	bl	800bf48 <disk_read>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d004      	beq.n	800e6fe <f_lseek+0x400>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	755a      	strb	r2, [r3, #21]
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e004      	b.n	800e708 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e702:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e704:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3740      	adds	r7, #64	; 0x40
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b086      	sub	sp, #24
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d101      	bne.n	800e724 <f_opendir+0x14>
 800e720:	2309      	movs	r3, #9
 800e722:	e064      	b.n	800e7ee <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e728:	f107 010c 	add.w	r1, r7, #12
 800e72c:	463b      	mov	r3, r7
 800e72e:	2200      	movs	r2, #0
 800e730:	4618      	mov	r0, r3
 800e732:	f7fe ff41 	bl	800d5b8 <find_volume>
 800e736:	4603      	mov	r3, r0
 800e738:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e73a:	7dfb      	ldrb	r3, [r7, #23]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d14f      	bne.n	800e7e0 <f_opendir+0xd0>
		obj->fs = fs;
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	4619      	mov	r1, r3
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f7fe fe28 	bl	800d3a0 <follow_path>
 800e750:	4603      	mov	r3, r0
 800e752:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e754:	7dfb      	ldrb	r3, [r7, #23]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d13d      	bne.n	800e7d6 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e760:	b25b      	sxtb	r3, r3
 800e762:	2b00      	cmp	r3, #0
 800e764:	db12      	blt.n	800e78c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	799b      	ldrb	r3, [r3, #6]
 800e76a:	f003 0310 	and.w	r3, r3, #16
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d00a      	beq.n	800e788 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6a1b      	ldr	r3, [r3, #32]
 800e778:	4619      	mov	r1, r3
 800e77a:	4610      	mov	r0, r2
 800e77c:	f7fe fbf9 	bl	800cf72 <ld_clust>
 800e780:	4602      	mov	r2, r0
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	609a      	str	r2, [r3, #8]
 800e786:	e001      	b.n	800e78c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e788:	2305      	movs	r3, #5
 800e78a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e78c:	7dfb      	ldrb	r3, [r7, #23]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d121      	bne.n	800e7d6 <f_opendir+0xc6>
				obj->id = fs->id;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	88da      	ldrh	r2, [r3, #6]
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e79a:	2100      	movs	r1, #0
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f7fe fa61 	bl	800cc64 <dir_sdi>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e7a6:	7dfb      	ldrb	r3, [r7, #23]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d114      	bne.n	800e7d6 <f_opendir+0xc6>
					if (obj->sclust) {
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d00d      	beq.n	800e7d0 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e7b4:	2100      	movs	r1, #0
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7fd fda2 	bl	800c300 <inc_lock>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	691b      	ldr	r3, [r3, #16]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d105      	bne.n	800e7d6 <f_opendir+0xc6>
 800e7ca:	2312      	movs	r3, #18
 800e7cc:	75fb      	strb	r3, [r7, #23]
 800e7ce:	e002      	b.n	800e7d6 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e7d6:	7dfb      	ldrb	r3, [r7, #23]
 800e7d8:	2b04      	cmp	r3, #4
 800e7da:	d101      	bne.n	800e7e0 <f_opendir+0xd0>
 800e7dc:	2305      	movs	r3, #5
 800e7de:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e7e0:	7dfb      	ldrb	r3, [r7, #23]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d002      	beq.n	800e7ec <f_opendir+0xdc>
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3718      	adds	r7, #24
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}

0800e7f6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b084      	sub	sp, #16
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f107 0208 	add.w	r2, r7, #8
 800e804:	4611      	mov	r1, r2
 800e806:	4618      	mov	r0, r3
 800e808:	f7ff f922 	bl	800da50 <validate>
 800e80c:	4603      	mov	r3, r0
 800e80e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e810:	7bfb      	ldrb	r3, [r7, #15]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d110      	bne.n	800e838 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	691b      	ldr	r3, [r3, #16]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d006      	beq.n	800e82c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	691b      	ldr	r3, [r3, #16]
 800e822:	4618      	mov	r0, r3
 800e824:	f7fd fdfa 	bl	800c41c <dec_lock>
 800e828:	4603      	mov	r3, r0
 800e82a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e82c:	7bfb      	ldrb	r3, [r7, #15]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d102      	bne.n	800e838 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2200      	movs	r2, #0
 800e836:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e838:	7bfb      	ldrb	r3, [r7, #15]
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}

0800e842 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e842:	b580      	push	{r7, lr}
 800e844:	b084      	sub	sp, #16
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
 800e84a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f107 0208 	add.w	r2, r7, #8
 800e852:	4611      	mov	r1, r2
 800e854:	4618      	mov	r0, r3
 800e856:	f7ff f8fb 	bl	800da50 <validate>
 800e85a:	4603      	mov	r3, r0
 800e85c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e85e:	7bfb      	ldrb	r3, [r7, #15]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d126      	bne.n	800e8b2 <f_readdir+0x70>
		if (!fno) {
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d106      	bne.n	800e878 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e86a:	2100      	movs	r1, #0
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f7fe f9f9 	bl	800cc64 <dir_sdi>
 800e872:	4603      	mov	r3, r0
 800e874:	73fb      	strb	r3, [r7, #15]
 800e876:	e01c      	b.n	800e8b2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e878:	2100      	movs	r1, #0
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f7fe fbb8 	bl	800cff0 <dir_read>
 800e880:	4603      	mov	r3, r0
 800e882:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e884:	7bfb      	ldrb	r3, [r7, #15]
 800e886:	2b04      	cmp	r3, #4
 800e888:	d101      	bne.n	800e88e <f_readdir+0x4c>
 800e88a:	2300      	movs	r3, #0
 800e88c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e88e:	7bfb      	ldrb	r3, [r7, #15]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10e      	bne.n	800e8b2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e894:	6839      	ldr	r1, [r7, #0]
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7fe fc8e 	bl	800d1b8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e89c:	2100      	movs	r1, #0
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f7fe fa5b 	bl	800cd5a <dir_next>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e8a8:	7bfb      	ldrb	r3, [r7, #15]
 800e8aa:	2b04      	cmp	r3, #4
 800e8ac:	d101      	bne.n	800e8b2 <f_readdir+0x70>
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3710      	adds	r7, #16
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b087      	sub	sp, #28
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	4613      	mov	r3, r2
 800e8c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e8d2:	4b1f      	ldr	r3, [pc, #124]	; (800e950 <FATFS_LinkDriverEx+0x94>)
 800e8d4:	7a5b      	ldrb	r3, [r3, #9]
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d131      	bne.n	800e940 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e8dc:	4b1c      	ldr	r3, [pc, #112]	; (800e950 <FATFS_LinkDriverEx+0x94>)
 800e8de:	7a5b      	ldrb	r3, [r3, #9]
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	4b1a      	ldr	r3, [pc, #104]	; (800e950 <FATFS_LinkDriverEx+0x94>)
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e8ea:	4b19      	ldr	r3, [pc, #100]	; (800e950 <FATFS_LinkDriverEx+0x94>)
 800e8ec:	7a5b      	ldrb	r3, [r3, #9]
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	4a17      	ldr	r2, [pc, #92]	; (800e950 <FATFS_LinkDriverEx+0x94>)
 800e8f2:	009b      	lsls	r3, r3, #2
 800e8f4:	4413      	add	r3, r2
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e8fa:	4b15      	ldr	r3, [pc, #84]	; (800e950 <FATFS_LinkDriverEx+0x94>)
 800e8fc:	7a5b      	ldrb	r3, [r3, #9]
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	461a      	mov	r2, r3
 800e902:	4b13      	ldr	r3, [pc, #76]	; (800e950 <FATFS_LinkDriverEx+0x94>)
 800e904:	4413      	add	r3, r2
 800e906:	79fa      	ldrb	r2, [r7, #7]
 800e908:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e90a:	4b11      	ldr	r3, [pc, #68]	; (800e950 <FATFS_LinkDriverEx+0x94>)
 800e90c:	7a5b      	ldrb	r3, [r3, #9]
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	1c5a      	adds	r2, r3, #1
 800e912:	b2d1      	uxtb	r1, r2
 800e914:	4a0e      	ldr	r2, [pc, #56]	; (800e950 <FATFS_LinkDriverEx+0x94>)
 800e916:	7251      	strb	r1, [r2, #9]
 800e918:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e91a:	7dbb      	ldrb	r3, [r7, #22]
 800e91c:	3330      	adds	r3, #48	; 0x30
 800e91e:	b2da      	uxtb	r2, r3
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	3301      	adds	r3, #1
 800e928:	223a      	movs	r2, #58	; 0x3a
 800e92a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	3302      	adds	r3, #2
 800e930:	222f      	movs	r2, #47	; 0x2f
 800e932:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	3303      	adds	r3, #3
 800e938:	2200      	movs	r2, #0
 800e93a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e93c:	2300      	movs	r3, #0
 800e93e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e940:	7dfb      	ldrb	r3, [r7, #23]
}
 800e942:	4618      	mov	r0, r3
 800e944:	371c      	adds	r7, #28
 800e946:	46bd      	mov	sp, r7
 800e948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94c:	4770      	bx	lr
 800e94e:	bf00      	nop
 800e950:	200004e8 	.word	0x200004e8

0800e954 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e95e:	2200      	movs	r2, #0
 800e960:	6839      	ldr	r1, [r7, #0]
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7ff ffaa 	bl	800e8bc <FATFS_LinkDriverEx>
 800e968:	4603      	mov	r3, r0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3708      	adds	r7, #8
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
	...

0800e974 <__errno>:
 800e974:	4b01      	ldr	r3, [pc, #4]	; (800e97c <__errno+0x8>)
 800e976:	6818      	ldr	r0, [r3, #0]
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop
 800e97c:	20000028 	.word	0x20000028

0800e980 <__libc_init_array>:
 800e980:	b570      	push	{r4, r5, r6, lr}
 800e982:	4d0d      	ldr	r5, [pc, #52]	; (800e9b8 <__libc_init_array+0x38>)
 800e984:	4c0d      	ldr	r4, [pc, #52]	; (800e9bc <__libc_init_array+0x3c>)
 800e986:	1b64      	subs	r4, r4, r5
 800e988:	10a4      	asrs	r4, r4, #2
 800e98a:	2600      	movs	r6, #0
 800e98c:	42a6      	cmp	r6, r4
 800e98e:	d109      	bne.n	800e9a4 <__libc_init_array+0x24>
 800e990:	4d0b      	ldr	r5, [pc, #44]	; (800e9c0 <__libc_init_array+0x40>)
 800e992:	4c0c      	ldr	r4, [pc, #48]	; (800e9c4 <__libc_init_array+0x44>)
 800e994:	f006 f912 	bl	8014bbc <_init>
 800e998:	1b64      	subs	r4, r4, r5
 800e99a:	10a4      	asrs	r4, r4, #2
 800e99c:	2600      	movs	r6, #0
 800e99e:	42a6      	cmp	r6, r4
 800e9a0:	d105      	bne.n	800e9ae <__libc_init_array+0x2e>
 800e9a2:	bd70      	pop	{r4, r5, r6, pc}
 800e9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9a8:	4798      	blx	r3
 800e9aa:	3601      	adds	r6, #1
 800e9ac:	e7ee      	b.n	800e98c <__libc_init_array+0xc>
 800e9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9b2:	4798      	blx	r3
 800e9b4:	3601      	adds	r6, #1
 800e9b6:	e7f2      	b.n	800e99e <__libc_init_array+0x1e>
 800e9b8:	08015d08 	.word	0x08015d08
 800e9bc:	08015d08 	.word	0x08015d08
 800e9c0:	08015d08 	.word	0x08015d08
 800e9c4:	08015d0c 	.word	0x08015d0c

0800e9c8 <malloc>:
 800e9c8:	4b02      	ldr	r3, [pc, #8]	; (800e9d4 <malloc+0xc>)
 800e9ca:	4601      	mov	r1, r0
 800e9cc:	6818      	ldr	r0, [r3, #0]
 800e9ce:	f000 b869 	b.w	800eaa4 <_malloc_r>
 800e9d2:	bf00      	nop
 800e9d4:	20000028 	.word	0x20000028

0800e9d8 <memcpy>:
 800e9d8:	440a      	add	r2, r1
 800e9da:	4291      	cmp	r1, r2
 800e9dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9e0:	d100      	bne.n	800e9e4 <memcpy+0xc>
 800e9e2:	4770      	bx	lr
 800e9e4:	b510      	push	{r4, lr}
 800e9e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9ee:	4291      	cmp	r1, r2
 800e9f0:	d1f9      	bne.n	800e9e6 <memcpy+0xe>
 800e9f2:	bd10      	pop	{r4, pc}

0800e9f4 <memset>:
 800e9f4:	4402      	add	r2, r0
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d100      	bne.n	800e9fe <memset+0xa>
 800e9fc:	4770      	bx	lr
 800e9fe:	f803 1b01 	strb.w	r1, [r3], #1
 800ea02:	e7f9      	b.n	800e9f8 <memset+0x4>

0800ea04 <_free_r>:
 800ea04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea06:	2900      	cmp	r1, #0
 800ea08:	d048      	beq.n	800ea9c <_free_r+0x98>
 800ea0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea0e:	9001      	str	r0, [sp, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f1a1 0404 	sub.w	r4, r1, #4
 800ea16:	bfb8      	it	lt
 800ea18:	18e4      	addlt	r4, r4, r3
 800ea1a:	f003 fc7b 	bl	8012314 <__malloc_lock>
 800ea1e:	4a20      	ldr	r2, [pc, #128]	; (800eaa0 <_free_r+0x9c>)
 800ea20:	9801      	ldr	r0, [sp, #4]
 800ea22:	6813      	ldr	r3, [r2, #0]
 800ea24:	4615      	mov	r5, r2
 800ea26:	b933      	cbnz	r3, 800ea36 <_free_r+0x32>
 800ea28:	6063      	str	r3, [r4, #4]
 800ea2a:	6014      	str	r4, [r2, #0]
 800ea2c:	b003      	add	sp, #12
 800ea2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea32:	f003 bc75 	b.w	8012320 <__malloc_unlock>
 800ea36:	42a3      	cmp	r3, r4
 800ea38:	d90b      	bls.n	800ea52 <_free_r+0x4e>
 800ea3a:	6821      	ldr	r1, [r4, #0]
 800ea3c:	1862      	adds	r2, r4, r1
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	bf04      	itt	eq
 800ea42:	681a      	ldreq	r2, [r3, #0]
 800ea44:	685b      	ldreq	r3, [r3, #4]
 800ea46:	6063      	str	r3, [r4, #4]
 800ea48:	bf04      	itt	eq
 800ea4a:	1852      	addeq	r2, r2, r1
 800ea4c:	6022      	streq	r2, [r4, #0]
 800ea4e:	602c      	str	r4, [r5, #0]
 800ea50:	e7ec      	b.n	800ea2c <_free_r+0x28>
 800ea52:	461a      	mov	r2, r3
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	b10b      	cbz	r3, 800ea5c <_free_r+0x58>
 800ea58:	42a3      	cmp	r3, r4
 800ea5a:	d9fa      	bls.n	800ea52 <_free_r+0x4e>
 800ea5c:	6811      	ldr	r1, [r2, #0]
 800ea5e:	1855      	adds	r5, r2, r1
 800ea60:	42a5      	cmp	r5, r4
 800ea62:	d10b      	bne.n	800ea7c <_free_r+0x78>
 800ea64:	6824      	ldr	r4, [r4, #0]
 800ea66:	4421      	add	r1, r4
 800ea68:	1854      	adds	r4, r2, r1
 800ea6a:	42a3      	cmp	r3, r4
 800ea6c:	6011      	str	r1, [r2, #0]
 800ea6e:	d1dd      	bne.n	800ea2c <_free_r+0x28>
 800ea70:	681c      	ldr	r4, [r3, #0]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	6053      	str	r3, [r2, #4]
 800ea76:	4421      	add	r1, r4
 800ea78:	6011      	str	r1, [r2, #0]
 800ea7a:	e7d7      	b.n	800ea2c <_free_r+0x28>
 800ea7c:	d902      	bls.n	800ea84 <_free_r+0x80>
 800ea7e:	230c      	movs	r3, #12
 800ea80:	6003      	str	r3, [r0, #0]
 800ea82:	e7d3      	b.n	800ea2c <_free_r+0x28>
 800ea84:	6825      	ldr	r5, [r4, #0]
 800ea86:	1961      	adds	r1, r4, r5
 800ea88:	428b      	cmp	r3, r1
 800ea8a:	bf04      	itt	eq
 800ea8c:	6819      	ldreq	r1, [r3, #0]
 800ea8e:	685b      	ldreq	r3, [r3, #4]
 800ea90:	6063      	str	r3, [r4, #4]
 800ea92:	bf04      	itt	eq
 800ea94:	1949      	addeq	r1, r1, r5
 800ea96:	6021      	streq	r1, [r4, #0]
 800ea98:	6054      	str	r4, [r2, #4]
 800ea9a:	e7c7      	b.n	800ea2c <_free_r+0x28>
 800ea9c:	b003      	add	sp, #12
 800ea9e:	bd30      	pop	{r4, r5, pc}
 800eaa0:	200004f4 	.word	0x200004f4

0800eaa4 <_malloc_r>:
 800eaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaa6:	1ccd      	adds	r5, r1, #3
 800eaa8:	f025 0503 	bic.w	r5, r5, #3
 800eaac:	3508      	adds	r5, #8
 800eaae:	2d0c      	cmp	r5, #12
 800eab0:	bf38      	it	cc
 800eab2:	250c      	movcc	r5, #12
 800eab4:	2d00      	cmp	r5, #0
 800eab6:	4606      	mov	r6, r0
 800eab8:	db01      	blt.n	800eabe <_malloc_r+0x1a>
 800eaba:	42a9      	cmp	r1, r5
 800eabc:	d903      	bls.n	800eac6 <_malloc_r+0x22>
 800eabe:	230c      	movs	r3, #12
 800eac0:	6033      	str	r3, [r6, #0]
 800eac2:	2000      	movs	r0, #0
 800eac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eac6:	f003 fc25 	bl	8012314 <__malloc_lock>
 800eaca:	4921      	ldr	r1, [pc, #132]	; (800eb50 <_malloc_r+0xac>)
 800eacc:	680a      	ldr	r2, [r1, #0]
 800eace:	4614      	mov	r4, r2
 800ead0:	b99c      	cbnz	r4, 800eafa <_malloc_r+0x56>
 800ead2:	4f20      	ldr	r7, [pc, #128]	; (800eb54 <_malloc_r+0xb0>)
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	b923      	cbnz	r3, 800eae2 <_malloc_r+0x3e>
 800ead8:	4621      	mov	r1, r4
 800eada:	4630      	mov	r0, r6
 800eadc:	f000 ff44 	bl	800f968 <_sbrk_r>
 800eae0:	6038      	str	r0, [r7, #0]
 800eae2:	4629      	mov	r1, r5
 800eae4:	4630      	mov	r0, r6
 800eae6:	f000 ff3f 	bl	800f968 <_sbrk_r>
 800eaea:	1c43      	adds	r3, r0, #1
 800eaec:	d123      	bne.n	800eb36 <_malloc_r+0x92>
 800eaee:	230c      	movs	r3, #12
 800eaf0:	6033      	str	r3, [r6, #0]
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	f003 fc14 	bl	8012320 <__malloc_unlock>
 800eaf8:	e7e3      	b.n	800eac2 <_malloc_r+0x1e>
 800eafa:	6823      	ldr	r3, [r4, #0]
 800eafc:	1b5b      	subs	r3, r3, r5
 800eafe:	d417      	bmi.n	800eb30 <_malloc_r+0x8c>
 800eb00:	2b0b      	cmp	r3, #11
 800eb02:	d903      	bls.n	800eb0c <_malloc_r+0x68>
 800eb04:	6023      	str	r3, [r4, #0]
 800eb06:	441c      	add	r4, r3
 800eb08:	6025      	str	r5, [r4, #0]
 800eb0a:	e004      	b.n	800eb16 <_malloc_r+0x72>
 800eb0c:	6863      	ldr	r3, [r4, #4]
 800eb0e:	42a2      	cmp	r2, r4
 800eb10:	bf0c      	ite	eq
 800eb12:	600b      	streq	r3, [r1, #0]
 800eb14:	6053      	strne	r3, [r2, #4]
 800eb16:	4630      	mov	r0, r6
 800eb18:	f003 fc02 	bl	8012320 <__malloc_unlock>
 800eb1c:	f104 000b 	add.w	r0, r4, #11
 800eb20:	1d23      	adds	r3, r4, #4
 800eb22:	f020 0007 	bic.w	r0, r0, #7
 800eb26:	1ac2      	subs	r2, r0, r3
 800eb28:	d0cc      	beq.n	800eac4 <_malloc_r+0x20>
 800eb2a:	1a1b      	subs	r3, r3, r0
 800eb2c:	50a3      	str	r3, [r4, r2]
 800eb2e:	e7c9      	b.n	800eac4 <_malloc_r+0x20>
 800eb30:	4622      	mov	r2, r4
 800eb32:	6864      	ldr	r4, [r4, #4]
 800eb34:	e7cc      	b.n	800ead0 <_malloc_r+0x2c>
 800eb36:	1cc4      	adds	r4, r0, #3
 800eb38:	f024 0403 	bic.w	r4, r4, #3
 800eb3c:	42a0      	cmp	r0, r4
 800eb3e:	d0e3      	beq.n	800eb08 <_malloc_r+0x64>
 800eb40:	1a21      	subs	r1, r4, r0
 800eb42:	4630      	mov	r0, r6
 800eb44:	f000 ff10 	bl	800f968 <_sbrk_r>
 800eb48:	3001      	adds	r0, #1
 800eb4a:	d1dd      	bne.n	800eb08 <_malloc_r+0x64>
 800eb4c:	e7cf      	b.n	800eaee <_malloc_r+0x4a>
 800eb4e:	bf00      	nop
 800eb50:	200004f4 	.word	0x200004f4
 800eb54:	200004f8 	.word	0x200004f8

0800eb58 <__cvt>:
 800eb58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb5c:	ec55 4b10 	vmov	r4, r5, d0
 800eb60:	2d00      	cmp	r5, #0
 800eb62:	460e      	mov	r6, r1
 800eb64:	4619      	mov	r1, r3
 800eb66:	462b      	mov	r3, r5
 800eb68:	bfbb      	ittet	lt
 800eb6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800eb6e:	461d      	movlt	r5, r3
 800eb70:	2300      	movge	r3, #0
 800eb72:	232d      	movlt	r3, #45	; 0x2d
 800eb74:	700b      	strb	r3, [r1, #0]
 800eb76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800eb7c:	4691      	mov	r9, r2
 800eb7e:	f023 0820 	bic.w	r8, r3, #32
 800eb82:	bfbc      	itt	lt
 800eb84:	4622      	movlt	r2, r4
 800eb86:	4614      	movlt	r4, r2
 800eb88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eb8c:	d005      	beq.n	800eb9a <__cvt+0x42>
 800eb8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800eb92:	d100      	bne.n	800eb96 <__cvt+0x3e>
 800eb94:	3601      	adds	r6, #1
 800eb96:	2102      	movs	r1, #2
 800eb98:	e000      	b.n	800eb9c <__cvt+0x44>
 800eb9a:	2103      	movs	r1, #3
 800eb9c:	ab03      	add	r3, sp, #12
 800eb9e:	9301      	str	r3, [sp, #4]
 800eba0:	ab02      	add	r3, sp, #8
 800eba2:	9300      	str	r3, [sp, #0]
 800eba4:	ec45 4b10 	vmov	d0, r4, r5
 800eba8:	4653      	mov	r3, sl
 800ebaa:	4632      	mov	r2, r6
 800ebac:	f002 f810 	bl	8010bd0 <_dtoa_r>
 800ebb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ebb4:	4607      	mov	r7, r0
 800ebb6:	d102      	bne.n	800ebbe <__cvt+0x66>
 800ebb8:	f019 0f01 	tst.w	r9, #1
 800ebbc:	d022      	beq.n	800ec04 <__cvt+0xac>
 800ebbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ebc2:	eb07 0906 	add.w	r9, r7, r6
 800ebc6:	d110      	bne.n	800ebea <__cvt+0x92>
 800ebc8:	783b      	ldrb	r3, [r7, #0]
 800ebca:	2b30      	cmp	r3, #48	; 0x30
 800ebcc:	d10a      	bne.n	800ebe4 <__cvt+0x8c>
 800ebce:	2200      	movs	r2, #0
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	4629      	mov	r1, r5
 800ebd6:	f7f1 ff87 	bl	8000ae8 <__aeabi_dcmpeq>
 800ebda:	b918      	cbnz	r0, 800ebe4 <__cvt+0x8c>
 800ebdc:	f1c6 0601 	rsb	r6, r6, #1
 800ebe0:	f8ca 6000 	str.w	r6, [sl]
 800ebe4:	f8da 3000 	ldr.w	r3, [sl]
 800ebe8:	4499      	add	r9, r3
 800ebea:	2200      	movs	r2, #0
 800ebec:	2300      	movs	r3, #0
 800ebee:	4620      	mov	r0, r4
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	f7f1 ff79 	bl	8000ae8 <__aeabi_dcmpeq>
 800ebf6:	b108      	cbz	r0, 800ebfc <__cvt+0xa4>
 800ebf8:	f8cd 900c 	str.w	r9, [sp, #12]
 800ebfc:	2230      	movs	r2, #48	; 0x30
 800ebfe:	9b03      	ldr	r3, [sp, #12]
 800ec00:	454b      	cmp	r3, r9
 800ec02:	d307      	bcc.n	800ec14 <__cvt+0xbc>
 800ec04:	9b03      	ldr	r3, [sp, #12]
 800ec06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec08:	1bdb      	subs	r3, r3, r7
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	6013      	str	r3, [r2, #0]
 800ec0e:	b004      	add	sp, #16
 800ec10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec14:	1c59      	adds	r1, r3, #1
 800ec16:	9103      	str	r1, [sp, #12]
 800ec18:	701a      	strb	r2, [r3, #0]
 800ec1a:	e7f0      	b.n	800ebfe <__cvt+0xa6>

0800ec1c <__exponent>:
 800ec1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2900      	cmp	r1, #0
 800ec22:	bfb8      	it	lt
 800ec24:	4249      	neglt	r1, r1
 800ec26:	f803 2b02 	strb.w	r2, [r3], #2
 800ec2a:	bfb4      	ite	lt
 800ec2c:	222d      	movlt	r2, #45	; 0x2d
 800ec2e:	222b      	movge	r2, #43	; 0x2b
 800ec30:	2909      	cmp	r1, #9
 800ec32:	7042      	strb	r2, [r0, #1]
 800ec34:	dd2a      	ble.n	800ec8c <__exponent+0x70>
 800ec36:	f10d 0407 	add.w	r4, sp, #7
 800ec3a:	46a4      	mov	ip, r4
 800ec3c:	270a      	movs	r7, #10
 800ec3e:	46a6      	mov	lr, r4
 800ec40:	460a      	mov	r2, r1
 800ec42:	fb91 f6f7 	sdiv	r6, r1, r7
 800ec46:	fb07 1516 	mls	r5, r7, r6, r1
 800ec4a:	3530      	adds	r5, #48	; 0x30
 800ec4c:	2a63      	cmp	r2, #99	; 0x63
 800ec4e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ec52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ec56:	4631      	mov	r1, r6
 800ec58:	dcf1      	bgt.n	800ec3e <__exponent+0x22>
 800ec5a:	3130      	adds	r1, #48	; 0x30
 800ec5c:	f1ae 0502 	sub.w	r5, lr, #2
 800ec60:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ec64:	1c44      	adds	r4, r0, #1
 800ec66:	4629      	mov	r1, r5
 800ec68:	4561      	cmp	r1, ip
 800ec6a:	d30a      	bcc.n	800ec82 <__exponent+0x66>
 800ec6c:	f10d 0209 	add.w	r2, sp, #9
 800ec70:	eba2 020e 	sub.w	r2, r2, lr
 800ec74:	4565      	cmp	r5, ip
 800ec76:	bf88      	it	hi
 800ec78:	2200      	movhi	r2, #0
 800ec7a:	4413      	add	r3, r2
 800ec7c:	1a18      	subs	r0, r3, r0
 800ec7e:	b003      	add	sp, #12
 800ec80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec86:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ec8a:	e7ed      	b.n	800ec68 <__exponent+0x4c>
 800ec8c:	2330      	movs	r3, #48	; 0x30
 800ec8e:	3130      	adds	r1, #48	; 0x30
 800ec90:	7083      	strb	r3, [r0, #2]
 800ec92:	70c1      	strb	r1, [r0, #3]
 800ec94:	1d03      	adds	r3, r0, #4
 800ec96:	e7f1      	b.n	800ec7c <__exponent+0x60>

0800ec98 <_printf_float>:
 800ec98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec9c:	ed2d 8b02 	vpush	{d8}
 800eca0:	b08d      	sub	sp, #52	; 0x34
 800eca2:	460c      	mov	r4, r1
 800eca4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eca8:	4616      	mov	r6, r2
 800ecaa:	461f      	mov	r7, r3
 800ecac:	4605      	mov	r5, r0
 800ecae:	f003 faa1 	bl	80121f4 <_localeconv_r>
 800ecb2:	f8d0 a000 	ldr.w	sl, [r0]
 800ecb6:	4650      	mov	r0, sl
 800ecb8:	f7f1 fa9a 	bl	80001f0 <strlen>
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	930a      	str	r3, [sp, #40]	; 0x28
 800ecc0:	6823      	ldr	r3, [r4, #0]
 800ecc2:	9305      	str	r3, [sp, #20]
 800ecc4:	f8d8 3000 	ldr.w	r3, [r8]
 800ecc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eccc:	3307      	adds	r3, #7
 800ecce:	f023 0307 	bic.w	r3, r3, #7
 800ecd2:	f103 0208 	add.w	r2, r3, #8
 800ecd6:	f8c8 2000 	str.w	r2, [r8]
 800ecda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ece2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ece6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ecea:	9307      	str	r3, [sp, #28]
 800ecec:	f8cd 8018 	str.w	r8, [sp, #24]
 800ecf0:	ee08 0a10 	vmov	s16, r0
 800ecf4:	4b9f      	ldr	r3, [pc, #636]	; (800ef74 <_printf_float+0x2dc>)
 800ecf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ecfa:	f04f 32ff 	mov.w	r2, #4294967295
 800ecfe:	f7f1 ff25 	bl	8000b4c <__aeabi_dcmpun>
 800ed02:	bb88      	cbnz	r0, 800ed68 <_printf_float+0xd0>
 800ed04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed08:	4b9a      	ldr	r3, [pc, #616]	; (800ef74 <_printf_float+0x2dc>)
 800ed0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed0e:	f7f1 feff 	bl	8000b10 <__aeabi_dcmple>
 800ed12:	bb48      	cbnz	r0, 800ed68 <_printf_float+0xd0>
 800ed14:	2200      	movs	r2, #0
 800ed16:	2300      	movs	r3, #0
 800ed18:	4640      	mov	r0, r8
 800ed1a:	4649      	mov	r1, r9
 800ed1c:	f7f1 feee 	bl	8000afc <__aeabi_dcmplt>
 800ed20:	b110      	cbz	r0, 800ed28 <_printf_float+0x90>
 800ed22:	232d      	movs	r3, #45	; 0x2d
 800ed24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed28:	4b93      	ldr	r3, [pc, #588]	; (800ef78 <_printf_float+0x2e0>)
 800ed2a:	4894      	ldr	r0, [pc, #592]	; (800ef7c <_printf_float+0x2e4>)
 800ed2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ed30:	bf94      	ite	ls
 800ed32:	4698      	movls	r8, r3
 800ed34:	4680      	movhi	r8, r0
 800ed36:	2303      	movs	r3, #3
 800ed38:	6123      	str	r3, [r4, #16]
 800ed3a:	9b05      	ldr	r3, [sp, #20]
 800ed3c:	f023 0204 	bic.w	r2, r3, #4
 800ed40:	6022      	str	r2, [r4, #0]
 800ed42:	f04f 0900 	mov.w	r9, #0
 800ed46:	9700      	str	r7, [sp, #0]
 800ed48:	4633      	mov	r3, r6
 800ed4a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ed4c:	4621      	mov	r1, r4
 800ed4e:	4628      	mov	r0, r5
 800ed50:	f000 f9d8 	bl	800f104 <_printf_common>
 800ed54:	3001      	adds	r0, #1
 800ed56:	f040 8090 	bne.w	800ee7a <_printf_float+0x1e2>
 800ed5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed5e:	b00d      	add	sp, #52	; 0x34
 800ed60:	ecbd 8b02 	vpop	{d8}
 800ed64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed68:	4642      	mov	r2, r8
 800ed6a:	464b      	mov	r3, r9
 800ed6c:	4640      	mov	r0, r8
 800ed6e:	4649      	mov	r1, r9
 800ed70:	f7f1 feec 	bl	8000b4c <__aeabi_dcmpun>
 800ed74:	b140      	cbz	r0, 800ed88 <_printf_float+0xf0>
 800ed76:	464b      	mov	r3, r9
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	bfbc      	itt	lt
 800ed7c:	232d      	movlt	r3, #45	; 0x2d
 800ed7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ed82:	487f      	ldr	r0, [pc, #508]	; (800ef80 <_printf_float+0x2e8>)
 800ed84:	4b7f      	ldr	r3, [pc, #508]	; (800ef84 <_printf_float+0x2ec>)
 800ed86:	e7d1      	b.n	800ed2c <_printf_float+0x94>
 800ed88:	6863      	ldr	r3, [r4, #4]
 800ed8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ed8e:	9206      	str	r2, [sp, #24]
 800ed90:	1c5a      	adds	r2, r3, #1
 800ed92:	d13f      	bne.n	800ee14 <_printf_float+0x17c>
 800ed94:	2306      	movs	r3, #6
 800ed96:	6063      	str	r3, [r4, #4]
 800ed98:	9b05      	ldr	r3, [sp, #20]
 800ed9a:	6861      	ldr	r1, [r4, #4]
 800ed9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eda0:	2300      	movs	r3, #0
 800eda2:	9303      	str	r3, [sp, #12]
 800eda4:	ab0a      	add	r3, sp, #40	; 0x28
 800eda6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800edaa:	ab09      	add	r3, sp, #36	; 0x24
 800edac:	ec49 8b10 	vmov	d0, r8, r9
 800edb0:	9300      	str	r3, [sp, #0]
 800edb2:	6022      	str	r2, [r4, #0]
 800edb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800edb8:	4628      	mov	r0, r5
 800edba:	f7ff fecd 	bl	800eb58 <__cvt>
 800edbe:	9b06      	ldr	r3, [sp, #24]
 800edc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800edc2:	2b47      	cmp	r3, #71	; 0x47
 800edc4:	4680      	mov	r8, r0
 800edc6:	d108      	bne.n	800edda <_printf_float+0x142>
 800edc8:	1cc8      	adds	r0, r1, #3
 800edca:	db02      	blt.n	800edd2 <_printf_float+0x13a>
 800edcc:	6863      	ldr	r3, [r4, #4]
 800edce:	4299      	cmp	r1, r3
 800edd0:	dd41      	ble.n	800ee56 <_printf_float+0x1be>
 800edd2:	f1ab 0b02 	sub.w	fp, fp, #2
 800edd6:	fa5f fb8b 	uxtb.w	fp, fp
 800edda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800edde:	d820      	bhi.n	800ee22 <_printf_float+0x18a>
 800ede0:	3901      	subs	r1, #1
 800ede2:	465a      	mov	r2, fp
 800ede4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ede8:	9109      	str	r1, [sp, #36]	; 0x24
 800edea:	f7ff ff17 	bl	800ec1c <__exponent>
 800edee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edf0:	1813      	adds	r3, r2, r0
 800edf2:	2a01      	cmp	r2, #1
 800edf4:	4681      	mov	r9, r0
 800edf6:	6123      	str	r3, [r4, #16]
 800edf8:	dc02      	bgt.n	800ee00 <_printf_float+0x168>
 800edfa:	6822      	ldr	r2, [r4, #0]
 800edfc:	07d2      	lsls	r2, r2, #31
 800edfe:	d501      	bpl.n	800ee04 <_printf_float+0x16c>
 800ee00:	3301      	adds	r3, #1
 800ee02:	6123      	str	r3, [r4, #16]
 800ee04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d09c      	beq.n	800ed46 <_printf_float+0xae>
 800ee0c:	232d      	movs	r3, #45	; 0x2d
 800ee0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee12:	e798      	b.n	800ed46 <_printf_float+0xae>
 800ee14:	9a06      	ldr	r2, [sp, #24]
 800ee16:	2a47      	cmp	r2, #71	; 0x47
 800ee18:	d1be      	bne.n	800ed98 <_printf_float+0x100>
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d1bc      	bne.n	800ed98 <_printf_float+0x100>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	e7b9      	b.n	800ed96 <_printf_float+0xfe>
 800ee22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ee26:	d118      	bne.n	800ee5a <_printf_float+0x1c2>
 800ee28:	2900      	cmp	r1, #0
 800ee2a:	6863      	ldr	r3, [r4, #4]
 800ee2c:	dd0b      	ble.n	800ee46 <_printf_float+0x1ae>
 800ee2e:	6121      	str	r1, [r4, #16]
 800ee30:	b913      	cbnz	r3, 800ee38 <_printf_float+0x1a0>
 800ee32:	6822      	ldr	r2, [r4, #0]
 800ee34:	07d0      	lsls	r0, r2, #31
 800ee36:	d502      	bpl.n	800ee3e <_printf_float+0x1a6>
 800ee38:	3301      	adds	r3, #1
 800ee3a:	440b      	add	r3, r1
 800ee3c:	6123      	str	r3, [r4, #16]
 800ee3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ee40:	f04f 0900 	mov.w	r9, #0
 800ee44:	e7de      	b.n	800ee04 <_printf_float+0x16c>
 800ee46:	b913      	cbnz	r3, 800ee4e <_printf_float+0x1b6>
 800ee48:	6822      	ldr	r2, [r4, #0]
 800ee4a:	07d2      	lsls	r2, r2, #31
 800ee4c:	d501      	bpl.n	800ee52 <_printf_float+0x1ba>
 800ee4e:	3302      	adds	r3, #2
 800ee50:	e7f4      	b.n	800ee3c <_printf_float+0x1a4>
 800ee52:	2301      	movs	r3, #1
 800ee54:	e7f2      	b.n	800ee3c <_printf_float+0x1a4>
 800ee56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ee5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee5c:	4299      	cmp	r1, r3
 800ee5e:	db05      	blt.n	800ee6c <_printf_float+0x1d4>
 800ee60:	6823      	ldr	r3, [r4, #0]
 800ee62:	6121      	str	r1, [r4, #16]
 800ee64:	07d8      	lsls	r0, r3, #31
 800ee66:	d5ea      	bpl.n	800ee3e <_printf_float+0x1a6>
 800ee68:	1c4b      	adds	r3, r1, #1
 800ee6a:	e7e7      	b.n	800ee3c <_printf_float+0x1a4>
 800ee6c:	2900      	cmp	r1, #0
 800ee6e:	bfd4      	ite	le
 800ee70:	f1c1 0202 	rsble	r2, r1, #2
 800ee74:	2201      	movgt	r2, #1
 800ee76:	4413      	add	r3, r2
 800ee78:	e7e0      	b.n	800ee3c <_printf_float+0x1a4>
 800ee7a:	6823      	ldr	r3, [r4, #0]
 800ee7c:	055a      	lsls	r2, r3, #21
 800ee7e:	d407      	bmi.n	800ee90 <_printf_float+0x1f8>
 800ee80:	6923      	ldr	r3, [r4, #16]
 800ee82:	4642      	mov	r2, r8
 800ee84:	4631      	mov	r1, r6
 800ee86:	4628      	mov	r0, r5
 800ee88:	47b8      	blx	r7
 800ee8a:	3001      	adds	r0, #1
 800ee8c:	d12c      	bne.n	800eee8 <_printf_float+0x250>
 800ee8e:	e764      	b.n	800ed5a <_printf_float+0xc2>
 800ee90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ee94:	f240 80e0 	bls.w	800f058 <_printf_float+0x3c0>
 800ee98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	2300      	movs	r3, #0
 800eea0:	f7f1 fe22 	bl	8000ae8 <__aeabi_dcmpeq>
 800eea4:	2800      	cmp	r0, #0
 800eea6:	d034      	beq.n	800ef12 <_printf_float+0x27a>
 800eea8:	4a37      	ldr	r2, [pc, #220]	; (800ef88 <_printf_float+0x2f0>)
 800eeaa:	2301      	movs	r3, #1
 800eeac:	4631      	mov	r1, r6
 800eeae:	4628      	mov	r0, r5
 800eeb0:	47b8      	blx	r7
 800eeb2:	3001      	adds	r0, #1
 800eeb4:	f43f af51 	beq.w	800ed5a <_printf_float+0xc2>
 800eeb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eebc:	429a      	cmp	r2, r3
 800eebe:	db02      	blt.n	800eec6 <_printf_float+0x22e>
 800eec0:	6823      	ldr	r3, [r4, #0]
 800eec2:	07d8      	lsls	r0, r3, #31
 800eec4:	d510      	bpl.n	800eee8 <_printf_float+0x250>
 800eec6:	ee18 3a10 	vmov	r3, s16
 800eeca:	4652      	mov	r2, sl
 800eecc:	4631      	mov	r1, r6
 800eece:	4628      	mov	r0, r5
 800eed0:	47b8      	blx	r7
 800eed2:	3001      	adds	r0, #1
 800eed4:	f43f af41 	beq.w	800ed5a <_printf_float+0xc2>
 800eed8:	f04f 0800 	mov.w	r8, #0
 800eedc:	f104 091a 	add.w	r9, r4, #26
 800eee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eee2:	3b01      	subs	r3, #1
 800eee4:	4543      	cmp	r3, r8
 800eee6:	dc09      	bgt.n	800eefc <_printf_float+0x264>
 800eee8:	6823      	ldr	r3, [r4, #0]
 800eeea:	079b      	lsls	r3, r3, #30
 800eeec:	f100 8105 	bmi.w	800f0fa <_printf_float+0x462>
 800eef0:	68e0      	ldr	r0, [r4, #12]
 800eef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eef4:	4298      	cmp	r0, r3
 800eef6:	bfb8      	it	lt
 800eef8:	4618      	movlt	r0, r3
 800eefa:	e730      	b.n	800ed5e <_printf_float+0xc6>
 800eefc:	2301      	movs	r3, #1
 800eefe:	464a      	mov	r2, r9
 800ef00:	4631      	mov	r1, r6
 800ef02:	4628      	mov	r0, r5
 800ef04:	47b8      	blx	r7
 800ef06:	3001      	adds	r0, #1
 800ef08:	f43f af27 	beq.w	800ed5a <_printf_float+0xc2>
 800ef0c:	f108 0801 	add.w	r8, r8, #1
 800ef10:	e7e6      	b.n	800eee0 <_printf_float+0x248>
 800ef12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	dc39      	bgt.n	800ef8c <_printf_float+0x2f4>
 800ef18:	4a1b      	ldr	r2, [pc, #108]	; (800ef88 <_printf_float+0x2f0>)
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	4631      	mov	r1, r6
 800ef1e:	4628      	mov	r0, r5
 800ef20:	47b8      	blx	r7
 800ef22:	3001      	adds	r0, #1
 800ef24:	f43f af19 	beq.w	800ed5a <_printf_float+0xc2>
 800ef28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef2c:	4313      	orrs	r3, r2
 800ef2e:	d102      	bne.n	800ef36 <_printf_float+0x29e>
 800ef30:	6823      	ldr	r3, [r4, #0]
 800ef32:	07d9      	lsls	r1, r3, #31
 800ef34:	d5d8      	bpl.n	800eee8 <_printf_float+0x250>
 800ef36:	ee18 3a10 	vmov	r3, s16
 800ef3a:	4652      	mov	r2, sl
 800ef3c:	4631      	mov	r1, r6
 800ef3e:	4628      	mov	r0, r5
 800ef40:	47b8      	blx	r7
 800ef42:	3001      	adds	r0, #1
 800ef44:	f43f af09 	beq.w	800ed5a <_printf_float+0xc2>
 800ef48:	f04f 0900 	mov.w	r9, #0
 800ef4c:	f104 0a1a 	add.w	sl, r4, #26
 800ef50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef52:	425b      	negs	r3, r3
 800ef54:	454b      	cmp	r3, r9
 800ef56:	dc01      	bgt.n	800ef5c <_printf_float+0x2c4>
 800ef58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef5a:	e792      	b.n	800ee82 <_printf_float+0x1ea>
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	4652      	mov	r2, sl
 800ef60:	4631      	mov	r1, r6
 800ef62:	4628      	mov	r0, r5
 800ef64:	47b8      	blx	r7
 800ef66:	3001      	adds	r0, #1
 800ef68:	f43f aef7 	beq.w	800ed5a <_printf_float+0xc2>
 800ef6c:	f109 0901 	add.w	r9, r9, #1
 800ef70:	e7ee      	b.n	800ef50 <_printf_float+0x2b8>
 800ef72:	bf00      	nop
 800ef74:	7fefffff 	.word	0x7fefffff
 800ef78:	080158f4 	.word	0x080158f4
 800ef7c:	080158f8 	.word	0x080158f8
 800ef80:	08015900 	.word	0x08015900
 800ef84:	080158fc 	.word	0x080158fc
 800ef88:	08015c69 	.word	0x08015c69
 800ef8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ef90:	429a      	cmp	r2, r3
 800ef92:	bfa8      	it	ge
 800ef94:	461a      	movge	r2, r3
 800ef96:	2a00      	cmp	r2, #0
 800ef98:	4691      	mov	r9, r2
 800ef9a:	dc37      	bgt.n	800f00c <_printf_float+0x374>
 800ef9c:	f04f 0b00 	mov.w	fp, #0
 800efa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800efa4:	f104 021a 	add.w	r2, r4, #26
 800efa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800efaa:	9305      	str	r3, [sp, #20]
 800efac:	eba3 0309 	sub.w	r3, r3, r9
 800efb0:	455b      	cmp	r3, fp
 800efb2:	dc33      	bgt.n	800f01c <_printf_float+0x384>
 800efb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800efb8:	429a      	cmp	r2, r3
 800efba:	db3b      	blt.n	800f034 <_printf_float+0x39c>
 800efbc:	6823      	ldr	r3, [r4, #0]
 800efbe:	07da      	lsls	r2, r3, #31
 800efc0:	d438      	bmi.n	800f034 <_printf_float+0x39c>
 800efc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efc4:	9b05      	ldr	r3, [sp, #20]
 800efc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800efc8:	1ad3      	subs	r3, r2, r3
 800efca:	eba2 0901 	sub.w	r9, r2, r1
 800efce:	4599      	cmp	r9, r3
 800efd0:	bfa8      	it	ge
 800efd2:	4699      	movge	r9, r3
 800efd4:	f1b9 0f00 	cmp.w	r9, #0
 800efd8:	dc35      	bgt.n	800f046 <_printf_float+0x3ae>
 800efda:	f04f 0800 	mov.w	r8, #0
 800efde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800efe2:	f104 0a1a 	add.w	sl, r4, #26
 800efe6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800efea:	1a9b      	subs	r3, r3, r2
 800efec:	eba3 0309 	sub.w	r3, r3, r9
 800eff0:	4543      	cmp	r3, r8
 800eff2:	f77f af79 	ble.w	800eee8 <_printf_float+0x250>
 800eff6:	2301      	movs	r3, #1
 800eff8:	4652      	mov	r2, sl
 800effa:	4631      	mov	r1, r6
 800effc:	4628      	mov	r0, r5
 800effe:	47b8      	blx	r7
 800f000:	3001      	adds	r0, #1
 800f002:	f43f aeaa 	beq.w	800ed5a <_printf_float+0xc2>
 800f006:	f108 0801 	add.w	r8, r8, #1
 800f00a:	e7ec      	b.n	800efe6 <_printf_float+0x34e>
 800f00c:	4613      	mov	r3, r2
 800f00e:	4631      	mov	r1, r6
 800f010:	4642      	mov	r2, r8
 800f012:	4628      	mov	r0, r5
 800f014:	47b8      	blx	r7
 800f016:	3001      	adds	r0, #1
 800f018:	d1c0      	bne.n	800ef9c <_printf_float+0x304>
 800f01a:	e69e      	b.n	800ed5a <_printf_float+0xc2>
 800f01c:	2301      	movs	r3, #1
 800f01e:	4631      	mov	r1, r6
 800f020:	4628      	mov	r0, r5
 800f022:	9205      	str	r2, [sp, #20]
 800f024:	47b8      	blx	r7
 800f026:	3001      	adds	r0, #1
 800f028:	f43f ae97 	beq.w	800ed5a <_printf_float+0xc2>
 800f02c:	9a05      	ldr	r2, [sp, #20]
 800f02e:	f10b 0b01 	add.w	fp, fp, #1
 800f032:	e7b9      	b.n	800efa8 <_printf_float+0x310>
 800f034:	ee18 3a10 	vmov	r3, s16
 800f038:	4652      	mov	r2, sl
 800f03a:	4631      	mov	r1, r6
 800f03c:	4628      	mov	r0, r5
 800f03e:	47b8      	blx	r7
 800f040:	3001      	adds	r0, #1
 800f042:	d1be      	bne.n	800efc2 <_printf_float+0x32a>
 800f044:	e689      	b.n	800ed5a <_printf_float+0xc2>
 800f046:	9a05      	ldr	r2, [sp, #20]
 800f048:	464b      	mov	r3, r9
 800f04a:	4442      	add	r2, r8
 800f04c:	4631      	mov	r1, r6
 800f04e:	4628      	mov	r0, r5
 800f050:	47b8      	blx	r7
 800f052:	3001      	adds	r0, #1
 800f054:	d1c1      	bne.n	800efda <_printf_float+0x342>
 800f056:	e680      	b.n	800ed5a <_printf_float+0xc2>
 800f058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f05a:	2a01      	cmp	r2, #1
 800f05c:	dc01      	bgt.n	800f062 <_printf_float+0x3ca>
 800f05e:	07db      	lsls	r3, r3, #31
 800f060:	d538      	bpl.n	800f0d4 <_printf_float+0x43c>
 800f062:	2301      	movs	r3, #1
 800f064:	4642      	mov	r2, r8
 800f066:	4631      	mov	r1, r6
 800f068:	4628      	mov	r0, r5
 800f06a:	47b8      	blx	r7
 800f06c:	3001      	adds	r0, #1
 800f06e:	f43f ae74 	beq.w	800ed5a <_printf_float+0xc2>
 800f072:	ee18 3a10 	vmov	r3, s16
 800f076:	4652      	mov	r2, sl
 800f078:	4631      	mov	r1, r6
 800f07a:	4628      	mov	r0, r5
 800f07c:	47b8      	blx	r7
 800f07e:	3001      	adds	r0, #1
 800f080:	f43f ae6b 	beq.w	800ed5a <_printf_float+0xc2>
 800f084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f088:	2200      	movs	r2, #0
 800f08a:	2300      	movs	r3, #0
 800f08c:	f7f1 fd2c 	bl	8000ae8 <__aeabi_dcmpeq>
 800f090:	b9d8      	cbnz	r0, 800f0ca <_printf_float+0x432>
 800f092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f094:	f108 0201 	add.w	r2, r8, #1
 800f098:	3b01      	subs	r3, #1
 800f09a:	4631      	mov	r1, r6
 800f09c:	4628      	mov	r0, r5
 800f09e:	47b8      	blx	r7
 800f0a0:	3001      	adds	r0, #1
 800f0a2:	d10e      	bne.n	800f0c2 <_printf_float+0x42a>
 800f0a4:	e659      	b.n	800ed5a <_printf_float+0xc2>
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	4652      	mov	r2, sl
 800f0aa:	4631      	mov	r1, r6
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	47b8      	blx	r7
 800f0b0:	3001      	adds	r0, #1
 800f0b2:	f43f ae52 	beq.w	800ed5a <_printf_float+0xc2>
 800f0b6:	f108 0801 	add.w	r8, r8, #1
 800f0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0bc:	3b01      	subs	r3, #1
 800f0be:	4543      	cmp	r3, r8
 800f0c0:	dcf1      	bgt.n	800f0a6 <_printf_float+0x40e>
 800f0c2:	464b      	mov	r3, r9
 800f0c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f0c8:	e6dc      	b.n	800ee84 <_printf_float+0x1ec>
 800f0ca:	f04f 0800 	mov.w	r8, #0
 800f0ce:	f104 0a1a 	add.w	sl, r4, #26
 800f0d2:	e7f2      	b.n	800f0ba <_printf_float+0x422>
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	4642      	mov	r2, r8
 800f0d8:	e7df      	b.n	800f09a <_printf_float+0x402>
 800f0da:	2301      	movs	r3, #1
 800f0dc:	464a      	mov	r2, r9
 800f0de:	4631      	mov	r1, r6
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	47b8      	blx	r7
 800f0e4:	3001      	adds	r0, #1
 800f0e6:	f43f ae38 	beq.w	800ed5a <_printf_float+0xc2>
 800f0ea:	f108 0801 	add.w	r8, r8, #1
 800f0ee:	68e3      	ldr	r3, [r4, #12]
 800f0f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f0f2:	1a5b      	subs	r3, r3, r1
 800f0f4:	4543      	cmp	r3, r8
 800f0f6:	dcf0      	bgt.n	800f0da <_printf_float+0x442>
 800f0f8:	e6fa      	b.n	800eef0 <_printf_float+0x258>
 800f0fa:	f04f 0800 	mov.w	r8, #0
 800f0fe:	f104 0919 	add.w	r9, r4, #25
 800f102:	e7f4      	b.n	800f0ee <_printf_float+0x456>

0800f104 <_printf_common>:
 800f104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f108:	4616      	mov	r6, r2
 800f10a:	4699      	mov	r9, r3
 800f10c:	688a      	ldr	r2, [r1, #8]
 800f10e:	690b      	ldr	r3, [r1, #16]
 800f110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f114:	4293      	cmp	r3, r2
 800f116:	bfb8      	it	lt
 800f118:	4613      	movlt	r3, r2
 800f11a:	6033      	str	r3, [r6, #0]
 800f11c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f120:	4607      	mov	r7, r0
 800f122:	460c      	mov	r4, r1
 800f124:	b10a      	cbz	r2, 800f12a <_printf_common+0x26>
 800f126:	3301      	adds	r3, #1
 800f128:	6033      	str	r3, [r6, #0]
 800f12a:	6823      	ldr	r3, [r4, #0]
 800f12c:	0699      	lsls	r1, r3, #26
 800f12e:	bf42      	ittt	mi
 800f130:	6833      	ldrmi	r3, [r6, #0]
 800f132:	3302      	addmi	r3, #2
 800f134:	6033      	strmi	r3, [r6, #0]
 800f136:	6825      	ldr	r5, [r4, #0]
 800f138:	f015 0506 	ands.w	r5, r5, #6
 800f13c:	d106      	bne.n	800f14c <_printf_common+0x48>
 800f13e:	f104 0a19 	add.w	sl, r4, #25
 800f142:	68e3      	ldr	r3, [r4, #12]
 800f144:	6832      	ldr	r2, [r6, #0]
 800f146:	1a9b      	subs	r3, r3, r2
 800f148:	42ab      	cmp	r3, r5
 800f14a:	dc26      	bgt.n	800f19a <_printf_common+0x96>
 800f14c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f150:	1e13      	subs	r3, r2, #0
 800f152:	6822      	ldr	r2, [r4, #0]
 800f154:	bf18      	it	ne
 800f156:	2301      	movne	r3, #1
 800f158:	0692      	lsls	r2, r2, #26
 800f15a:	d42b      	bmi.n	800f1b4 <_printf_common+0xb0>
 800f15c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f160:	4649      	mov	r1, r9
 800f162:	4638      	mov	r0, r7
 800f164:	47c0      	blx	r8
 800f166:	3001      	adds	r0, #1
 800f168:	d01e      	beq.n	800f1a8 <_printf_common+0xa4>
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	68e5      	ldr	r5, [r4, #12]
 800f16e:	6832      	ldr	r2, [r6, #0]
 800f170:	f003 0306 	and.w	r3, r3, #6
 800f174:	2b04      	cmp	r3, #4
 800f176:	bf08      	it	eq
 800f178:	1aad      	subeq	r5, r5, r2
 800f17a:	68a3      	ldr	r3, [r4, #8]
 800f17c:	6922      	ldr	r2, [r4, #16]
 800f17e:	bf0c      	ite	eq
 800f180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f184:	2500      	movne	r5, #0
 800f186:	4293      	cmp	r3, r2
 800f188:	bfc4      	itt	gt
 800f18a:	1a9b      	subgt	r3, r3, r2
 800f18c:	18ed      	addgt	r5, r5, r3
 800f18e:	2600      	movs	r6, #0
 800f190:	341a      	adds	r4, #26
 800f192:	42b5      	cmp	r5, r6
 800f194:	d11a      	bne.n	800f1cc <_printf_common+0xc8>
 800f196:	2000      	movs	r0, #0
 800f198:	e008      	b.n	800f1ac <_printf_common+0xa8>
 800f19a:	2301      	movs	r3, #1
 800f19c:	4652      	mov	r2, sl
 800f19e:	4649      	mov	r1, r9
 800f1a0:	4638      	mov	r0, r7
 800f1a2:	47c0      	blx	r8
 800f1a4:	3001      	adds	r0, #1
 800f1a6:	d103      	bne.n	800f1b0 <_printf_common+0xac>
 800f1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1b0:	3501      	adds	r5, #1
 800f1b2:	e7c6      	b.n	800f142 <_printf_common+0x3e>
 800f1b4:	18e1      	adds	r1, r4, r3
 800f1b6:	1c5a      	adds	r2, r3, #1
 800f1b8:	2030      	movs	r0, #48	; 0x30
 800f1ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f1be:	4422      	add	r2, r4
 800f1c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f1c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f1c8:	3302      	adds	r3, #2
 800f1ca:	e7c7      	b.n	800f15c <_printf_common+0x58>
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	4622      	mov	r2, r4
 800f1d0:	4649      	mov	r1, r9
 800f1d2:	4638      	mov	r0, r7
 800f1d4:	47c0      	blx	r8
 800f1d6:	3001      	adds	r0, #1
 800f1d8:	d0e6      	beq.n	800f1a8 <_printf_common+0xa4>
 800f1da:	3601      	adds	r6, #1
 800f1dc:	e7d9      	b.n	800f192 <_printf_common+0x8e>
	...

0800f1e0 <_printf_i>:
 800f1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e4:	460c      	mov	r4, r1
 800f1e6:	4691      	mov	r9, r2
 800f1e8:	7e27      	ldrb	r7, [r4, #24]
 800f1ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f1ec:	2f78      	cmp	r7, #120	; 0x78
 800f1ee:	4680      	mov	r8, r0
 800f1f0:	469a      	mov	sl, r3
 800f1f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f1f6:	d807      	bhi.n	800f208 <_printf_i+0x28>
 800f1f8:	2f62      	cmp	r7, #98	; 0x62
 800f1fa:	d80a      	bhi.n	800f212 <_printf_i+0x32>
 800f1fc:	2f00      	cmp	r7, #0
 800f1fe:	f000 80d8 	beq.w	800f3b2 <_printf_i+0x1d2>
 800f202:	2f58      	cmp	r7, #88	; 0x58
 800f204:	f000 80a3 	beq.w	800f34e <_printf_i+0x16e>
 800f208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f20c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f210:	e03a      	b.n	800f288 <_printf_i+0xa8>
 800f212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f216:	2b15      	cmp	r3, #21
 800f218:	d8f6      	bhi.n	800f208 <_printf_i+0x28>
 800f21a:	a001      	add	r0, pc, #4	; (adr r0, 800f220 <_printf_i+0x40>)
 800f21c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f220:	0800f279 	.word	0x0800f279
 800f224:	0800f28d 	.word	0x0800f28d
 800f228:	0800f209 	.word	0x0800f209
 800f22c:	0800f209 	.word	0x0800f209
 800f230:	0800f209 	.word	0x0800f209
 800f234:	0800f209 	.word	0x0800f209
 800f238:	0800f28d 	.word	0x0800f28d
 800f23c:	0800f209 	.word	0x0800f209
 800f240:	0800f209 	.word	0x0800f209
 800f244:	0800f209 	.word	0x0800f209
 800f248:	0800f209 	.word	0x0800f209
 800f24c:	0800f399 	.word	0x0800f399
 800f250:	0800f2bd 	.word	0x0800f2bd
 800f254:	0800f37b 	.word	0x0800f37b
 800f258:	0800f209 	.word	0x0800f209
 800f25c:	0800f209 	.word	0x0800f209
 800f260:	0800f3bb 	.word	0x0800f3bb
 800f264:	0800f209 	.word	0x0800f209
 800f268:	0800f2bd 	.word	0x0800f2bd
 800f26c:	0800f209 	.word	0x0800f209
 800f270:	0800f209 	.word	0x0800f209
 800f274:	0800f383 	.word	0x0800f383
 800f278:	680b      	ldr	r3, [r1, #0]
 800f27a:	1d1a      	adds	r2, r3, #4
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	600a      	str	r2, [r1, #0]
 800f280:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f288:	2301      	movs	r3, #1
 800f28a:	e0a3      	b.n	800f3d4 <_printf_i+0x1f4>
 800f28c:	6825      	ldr	r5, [r4, #0]
 800f28e:	6808      	ldr	r0, [r1, #0]
 800f290:	062e      	lsls	r6, r5, #24
 800f292:	f100 0304 	add.w	r3, r0, #4
 800f296:	d50a      	bpl.n	800f2ae <_printf_i+0xce>
 800f298:	6805      	ldr	r5, [r0, #0]
 800f29a:	600b      	str	r3, [r1, #0]
 800f29c:	2d00      	cmp	r5, #0
 800f29e:	da03      	bge.n	800f2a8 <_printf_i+0xc8>
 800f2a0:	232d      	movs	r3, #45	; 0x2d
 800f2a2:	426d      	negs	r5, r5
 800f2a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2a8:	485e      	ldr	r0, [pc, #376]	; (800f424 <_printf_i+0x244>)
 800f2aa:	230a      	movs	r3, #10
 800f2ac:	e019      	b.n	800f2e2 <_printf_i+0x102>
 800f2ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f2b2:	6805      	ldr	r5, [r0, #0]
 800f2b4:	600b      	str	r3, [r1, #0]
 800f2b6:	bf18      	it	ne
 800f2b8:	b22d      	sxthne	r5, r5
 800f2ba:	e7ef      	b.n	800f29c <_printf_i+0xbc>
 800f2bc:	680b      	ldr	r3, [r1, #0]
 800f2be:	6825      	ldr	r5, [r4, #0]
 800f2c0:	1d18      	adds	r0, r3, #4
 800f2c2:	6008      	str	r0, [r1, #0]
 800f2c4:	0628      	lsls	r0, r5, #24
 800f2c6:	d501      	bpl.n	800f2cc <_printf_i+0xec>
 800f2c8:	681d      	ldr	r5, [r3, #0]
 800f2ca:	e002      	b.n	800f2d2 <_printf_i+0xf2>
 800f2cc:	0669      	lsls	r1, r5, #25
 800f2ce:	d5fb      	bpl.n	800f2c8 <_printf_i+0xe8>
 800f2d0:	881d      	ldrh	r5, [r3, #0]
 800f2d2:	4854      	ldr	r0, [pc, #336]	; (800f424 <_printf_i+0x244>)
 800f2d4:	2f6f      	cmp	r7, #111	; 0x6f
 800f2d6:	bf0c      	ite	eq
 800f2d8:	2308      	moveq	r3, #8
 800f2da:	230a      	movne	r3, #10
 800f2dc:	2100      	movs	r1, #0
 800f2de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f2e2:	6866      	ldr	r6, [r4, #4]
 800f2e4:	60a6      	str	r6, [r4, #8]
 800f2e6:	2e00      	cmp	r6, #0
 800f2e8:	bfa2      	ittt	ge
 800f2ea:	6821      	ldrge	r1, [r4, #0]
 800f2ec:	f021 0104 	bicge.w	r1, r1, #4
 800f2f0:	6021      	strge	r1, [r4, #0]
 800f2f2:	b90d      	cbnz	r5, 800f2f8 <_printf_i+0x118>
 800f2f4:	2e00      	cmp	r6, #0
 800f2f6:	d04d      	beq.n	800f394 <_printf_i+0x1b4>
 800f2f8:	4616      	mov	r6, r2
 800f2fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800f2fe:	fb03 5711 	mls	r7, r3, r1, r5
 800f302:	5dc7      	ldrb	r7, [r0, r7]
 800f304:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f308:	462f      	mov	r7, r5
 800f30a:	42bb      	cmp	r3, r7
 800f30c:	460d      	mov	r5, r1
 800f30e:	d9f4      	bls.n	800f2fa <_printf_i+0x11a>
 800f310:	2b08      	cmp	r3, #8
 800f312:	d10b      	bne.n	800f32c <_printf_i+0x14c>
 800f314:	6823      	ldr	r3, [r4, #0]
 800f316:	07df      	lsls	r7, r3, #31
 800f318:	d508      	bpl.n	800f32c <_printf_i+0x14c>
 800f31a:	6923      	ldr	r3, [r4, #16]
 800f31c:	6861      	ldr	r1, [r4, #4]
 800f31e:	4299      	cmp	r1, r3
 800f320:	bfde      	ittt	le
 800f322:	2330      	movle	r3, #48	; 0x30
 800f324:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f328:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f32c:	1b92      	subs	r2, r2, r6
 800f32e:	6122      	str	r2, [r4, #16]
 800f330:	f8cd a000 	str.w	sl, [sp]
 800f334:	464b      	mov	r3, r9
 800f336:	aa03      	add	r2, sp, #12
 800f338:	4621      	mov	r1, r4
 800f33a:	4640      	mov	r0, r8
 800f33c:	f7ff fee2 	bl	800f104 <_printf_common>
 800f340:	3001      	adds	r0, #1
 800f342:	d14c      	bne.n	800f3de <_printf_i+0x1fe>
 800f344:	f04f 30ff 	mov.w	r0, #4294967295
 800f348:	b004      	add	sp, #16
 800f34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f34e:	4835      	ldr	r0, [pc, #212]	; (800f424 <_printf_i+0x244>)
 800f350:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f354:	6823      	ldr	r3, [r4, #0]
 800f356:	680e      	ldr	r6, [r1, #0]
 800f358:	061f      	lsls	r7, r3, #24
 800f35a:	f856 5b04 	ldr.w	r5, [r6], #4
 800f35e:	600e      	str	r6, [r1, #0]
 800f360:	d514      	bpl.n	800f38c <_printf_i+0x1ac>
 800f362:	07d9      	lsls	r1, r3, #31
 800f364:	bf44      	itt	mi
 800f366:	f043 0320 	orrmi.w	r3, r3, #32
 800f36a:	6023      	strmi	r3, [r4, #0]
 800f36c:	b91d      	cbnz	r5, 800f376 <_printf_i+0x196>
 800f36e:	6823      	ldr	r3, [r4, #0]
 800f370:	f023 0320 	bic.w	r3, r3, #32
 800f374:	6023      	str	r3, [r4, #0]
 800f376:	2310      	movs	r3, #16
 800f378:	e7b0      	b.n	800f2dc <_printf_i+0xfc>
 800f37a:	6823      	ldr	r3, [r4, #0]
 800f37c:	f043 0320 	orr.w	r3, r3, #32
 800f380:	6023      	str	r3, [r4, #0]
 800f382:	2378      	movs	r3, #120	; 0x78
 800f384:	4828      	ldr	r0, [pc, #160]	; (800f428 <_printf_i+0x248>)
 800f386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f38a:	e7e3      	b.n	800f354 <_printf_i+0x174>
 800f38c:	065e      	lsls	r6, r3, #25
 800f38e:	bf48      	it	mi
 800f390:	b2ad      	uxthmi	r5, r5
 800f392:	e7e6      	b.n	800f362 <_printf_i+0x182>
 800f394:	4616      	mov	r6, r2
 800f396:	e7bb      	b.n	800f310 <_printf_i+0x130>
 800f398:	680b      	ldr	r3, [r1, #0]
 800f39a:	6826      	ldr	r6, [r4, #0]
 800f39c:	6960      	ldr	r0, [r4, #20]
 800f39e:	1d1d      	adds	r5, r3, #4
 800f3a0:	600d      	str	r5, [r1, #0]
 800f3a2:	0635      	lsls	r5, r6, #24
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	d501      	bpl.n	800f3ac <_printf_i+0x1cc>
 800f3a8:	6018      	str	r0, [r3, #0]
 800f3aa:	e002      	b.n	800f3b2 <_printf_i+0x1d2>
 800f3ac:	0671      	lsls	r1, r6, #25
 800f3ae:	d5fb      	bpl.n	800f3a8 <_printf_i+0x1c8>
 800f3b0:	8018      	strh	r0, [r3, #0]
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	6123      	str	r3, [r4, #16]
 800f3b6:	4616      	mov	r6, r2
 800f3b8:	e7ba      	b.n	800f330 <_printf_i+0x150>
 800f3ba:	680b      	ldr	r3, [r1, #0]
 800f3bc:	1d1a      	adds	r2, r3, #4
 800f3be:	600a      	str	r2, [r1, #0]
 800f3c0:	681e      	ldr	r6, [r3, #0]
 800f3c2:	6862      	ldr	r2, [r4, #4]
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	4630      	mov	r0, r6
 800f3c8:	f7f0 ff1a 	bl	8000200 <memchr>
 800f3cc:	b108      	cbz	r0, 800f3d2 <_printf_i+0x1f2>
 800f3ce:	1b80      	subs	r0, r0, r6
 800f3d0:	6060      	str	r0, [r4, #4]
 800f3d2:	6863      	ldr	r3, [r4, #4]
 800f3d4:	6123      	str	r3, [r4, #16]
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3dc:	e7a8      	b.n	800f330 <_printf_i+0x150>
 800f3de:	6923      	ldr	r3, [r4, #16]
 800f3e0:	4632      	mov	r2, r6
 800f3e2:	4649      	mov	r1, r9
 800f3e4:	4640      	mov	r0, r8
 800f3e6:	47d0      	blx	sl
 800f3e8:	3001      	adds	r0, #1
 800f3ea:	d0ab      	beq.n	800f344 <_printf_i+0x164>
 800f3ec:	6823      	ldr	r3, [r4, #0]
 800f3ee:	079b      	lsls	r3, r3, #30
 800f3f0:	d413      	bmi.n	800f41a <_printf_i+0x23a>
 800f3f2:	68e0      	ldr	r0, [r4, #12]
 800f3f4:	9b03      	ldr	r3, [sp, #12]
 800f3f6:	4298      	cmp	r0, r3
 800f3f8:	bfb8      	it	lt
 800f3fa:	4618      	movlt	r0, r3
 800f3fc:	e7a4      	b.n	800f348 <_printf_i+0x168>
 800f3fe:	2301      	movs	r3, #1
 800f400:	4632      	mov	r2, r6
 800f402:	4649      	mov	r1, r9
 800f404:	4640      	mov	r0, r8
 800f406:	47d0      	blx	sl
 800f408:	3001      	adds	r0, #1
 800f40a:	d09b      	beq.n	800f344 <_printf_i+0x164>
 800f40c:	3501      	adds	r5, #1
 800f40e:	68e3      	ldr	r3, [r4, #12]
 800f410:	9903      	ldr	r1, [sp, #12]
 800f412:	1a5b      	subs	r3, r3, r1
 800f414:	42ab      	cmp	r3, r5
 800f416:	dcf2      	bgt.n	800f3fe <_printf_i+0x21e>
 800f418:	e7eb      	b.n	800f3f2 <_printf_i+0x212>
 800f41a:	2500      	movs	r5, #0
 800f41c:	f104 0619 	add.w	r6, r4, #25
 800f420:	e7f5      	b.n	800f40e <_printf_i+0x22e>
 800f422:	bf00      	nop
 800f424:	08015904 	.word	0x08015904
 800f428:	08015915 	.word	0x08015915

0800f42c <_scanf_float>:
 800f42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f430:	b087      	sub	sp, #28
 800f432:	4617      	mov	r7, r2
 800f434:	9303      	str	r3, [sp, #12]
 800f436:	688b      	ldr	r3, [r1, #8]
 800f438:	1e5a      	subs	r2, r3, #1
 800f43a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f43e:	bf83      	ittte	hi
 800f440:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f444:	195b      	addhi	r3, r3, r5
 800f446:	9302      	strhi	r3, [sp, #8]
 800f448:	2300      	movls	r3, #0
 800f44a:	bf86      	itte	hi
 800f44c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f450:	608b      	strhi	r3, [r1, #8]
 800f452:	9302      	strls	r3, [sp, #8]
 800f454:	680b      	ldr	r3, [r1, #0]
 800f456:	468b      	mov	fp, r1
 800f458:	2500      	movs	r5, #0
 800f45a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f45e:	f84b 3b1c 	str.w	r3, [fp], #28
 800f462:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f466:	4680      	mov	r8, r0
 800f468:	460c      	mov	r4, r1
 800f46a:	465e      	mov	r6, fp
 800f46c:	46aa      	mov	sl, r5
 800f46e:	46a9      	mov	r9, r5
 800f470:	9501      	str	r5, [sp, #4]
 800f472:	68a2      	ldr	r2, [r4, #8]
 800f474:	b152      	cbz	r2, 800f48c <_scanf_float+0x60>
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	2b4e      	cmp	r3, #78	; 0x4e
 800f47c:	d864      	bhi.n	800f548 <_scanf_float+0x11c>
 800f47e:	2b40      	cmp	r3, #64	; 0x40
 800f480:	d83c      	bhi.n	800f4fc <_scanf_float+0xd0>
 800f482:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f486:	b2c8      	uxtb	r0, r1
 800f488:	280e      	cmp	r0, #14
 800f48a:	d93a      	bls.n	800f502 <_scanf_float+0xd6>
 800f48c:	f1b9 0f00 	cmp.w	r9, #0
 800f490:	d003      	beq.n	800f49a <_scanf_float+0x6e>
 800f492:	6823      	ldr	r3, [r4, #0]
 800f494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f498:	6023      	str	r3, [r4, #0]
 800f49a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f49e:	f1ba 0f01 	cmp.w	sl, #1
 800f4a2:	f200 8113 	bhi.w	800f6cc <_scanf_float+0x2a0>
 800f4a6:	455e      	cmp	r6, fp
 800f4a8:	f200 8105 	bhi.w	800f6b6 <_scanf_float+0x28a>
 800f4ac:	2501      	movs	r5, #1
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	b007      	add	sp, #28
 800f4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f4ba:	2a0d      	cmp	r2, #13
 800f4bc:	d8e6      	bhi.n	800f48c <_scanf_float+0x60>
 800f4be:	a101      	add	r1, pc, #4	; (adr r1, 800f4c4 <_scanf_float+0x98>)
 800f4c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f4c4:	0800f603 	.word	0x0800f603
 800f4c8:	0800f48d 	.word	0x0800f48d
 800f4cc:	0800f48d 	.word	0x0800f48d
 800f4d0:	0800f48d 	.word	0x0800f48d
 800f4d4:	0800f663 	.word	0x0800f663
 800f4d8:	0800f63b 	.word	0x0800f63b
 800f4dc:	0800f48d 	.word	0x0800f48d
 800f4e0:	0800f48d 	.word	0x0800f48d
 800f4e4:	0800f611 	.word	0x0800f611
 800f4e8:	0800f48d 	.word	0x0800f48d
 800f4ec:	0800f48d 	.word	0x0800f48d
 800f4f0:	0800f48d 	.word	0x0800f48d
 800f4f4:	0800f48d 	.word	0x0800f48d
 800f4f8:	0800f5c9 	.word	0x0800f5c9
 800f4fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f500:	e7db      	b.n	800f4ba <_scanf_float+0x8e>
 800f502:	290e      	cmp	r1, #14
 800f504:	d8c2      	bhi.n	800f48c <_scanf_float+0x60>
 800f506:	a001      	add	r0, pc, #4	; (adr r0, 800f50c <_scanf_float+0xe0>)
 800f508:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f50c:	0800f5bb 	.word	0x0800f5bb
 800f510:	0800f48d 	.word	0x0800f48d
 800f514:	0800f5bb 	.word	0x0800f5bb
 800f518:	0800f64f 	.word	0x0800f64f
 800f51c:	0800f48d 	.word	0x0800f48d
 800f520:	0800f569 	.word	0x0800f569
 800f524:	0800f5a5 	.word	0x0800f5a5
 800f528:	0800f5a5 	.word	0x0800f5a5
 800f52c:	0800f5a5 	.word	0x0800f5a5
 800f530:	0800f5a5 	.word	0x0800f5a5
 800f534:	0800f5a5 	.word	0x0800f5a5
 800f538:	0800f5a5 	.word	0x0800f5a5
 800f53c:	0800f5a5 	.word	0x0800f5a5
 800f540:	0800f5a5 	.word	0x0800f5a5
 800f544:	0800f5a5 	.word	0x0800f5a5
 800f548:	2b6e      	cmp	r3, #110	; 0x6e
 800f54a:	d809      	bhi.n	800f560 <_scanf_float+0x134>
 800f54c:	2b60      	cmp	r3, #96	; 0x60
 800f54e:	d8b2      	bhi.n	800f4b6 <_scanf_float+0x8a>
 800f550:	2b54      	cmp	r3, #84	; 0x54
 800f552:	d077      	beq.n	800f644 <_scanf_float+0x218>
 800f554:	2b59      	cmp	r3, #89	; 0x59
 800f556:	d199      	bne.n	800f48c <_scanf_float+0x60>
 800f558:	2d07      	cmp	r5, #7
 800f55a:	d197      	bne.n	800f48c <_scanf_float+0x60>
 800f55c:	2508      	movs	r5, #8
 800f55e:	e029      	b.n	800f5b4 <_scanf_float+0x188>
 800f560:	2b74      	cmp	r3, #116	; 0x74
 800f562:	d06f      	beq.n	800f644 <_scanf_float+0x218>
 800f564:	2b79      	cmp	r3, #121	; 0x79
 800f566:	e7f6      	b.n	800f556 <_scanf_float+0x12a>
 800f568:	6821      	ldr	r1, [r4, #0]
 800f56a:	05c8      	lsls	r0, r1, #23
 800f56c:	d51a      	bpl.n	800f5a4 <_scanf_float+0x178>
 800f56e:	9b02      	ldr	r3, [sp, #8]
 800f570:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f574:	6021      	str	r1, [r4, #0]
 800f576:	f109 0901 	add.w	r9, r9, #1
 800f57a:	b11b      	cbz	r3, 800f584 <_scanf_float+0x158>
 800f57c:	3b01      	subs	r3, #1
 800f57e:	3201      	adds	r2, #1
 800f580:	9302      	str	r3, [sp, #8]
 800f582:	60a2      	str	r2, [r4, #8]
 800f584:	68a3      	ldr	r3, [r4, #8]
 800f586:	3b01      	subs	r3, #1
 800f588:	60a3      	str	r3, [r4, #8]
 800f58a:	6923      	ldr	r3, [r4, #16]
 800f58c:	3301      	adds	r3, #1
 800f58e:	6123      	str	r3, [r4, #16]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	3b01      	subs	r3, #1
 800f594:	2b00      	cmp	r3, #0
 800f596:	607b      	str	r3, [r7, #4]
 800f598:	f340 8084 	ble.w	800f6a4 <_scanf_float+0x278>
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	603b      	str	r3, [r7, #0]
 800f5a2:	e766      	b.n	800f472 <_scanf_float+0x46>
 800f5a4:	eb1a 0f05 	cmn.w	sl, r5
 800f5a8:	f47f af70 	bne.w	800f48c <_scanf_float+0x60>
 800f5ac:	6822      	ldr	r2, [r4, #0]
 800f5ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f5b2:	6022      	str	r2, [r4, #0]
 800f5b4:	f806 3b01 	strb.w	r3, [r6], #1
 800f5b8:	e7e4      	b.n	800f584 <_scanf_float+0x158>
 800f5ba:	6822      	ldr	r2, [r4, #0]
 800f5bc:	0610      	lsls	r0, r2, #24
 800f5be:	f57f af65 	bpl.w	800f48c <_scanf_float+0x60>
 800f5c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f5c6:	e7f4      	b.n	800f5b2 <_scanf_float+0x186>
 800f5c8:	f1ba 0f00 	cmp.w	sl, #0
 800f5cc:	d10e      	bne.n	800f5ec <_scanf_float+0x1c0>
 800f5ce:	f1b9 0f00 	cmp.w	r9, #0
 800f5d2:	d10e      	bne.n	800f5f2 <_scanf_float+0x1c6>
 800f5d4:	6822      	ldr	r2, [r4, #0]
 800f5d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f5da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f5de:	d108      	bne.n	800f5f2 <_scanf_float+0x1c6>
 800f5e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f5e4:	6022      	str	r2, [r4, #0]
 800f5e6:	f04f 0a01 	mov.w	sl, #1
 800f5ea:	e7e3      	b.n	800f5b4 <_scanf_float+0x188>
 800f5ec:	f1ba 0f02 	cmp.w	sl, #2
 800f5f0:	d055      	beq.n	800f69e <_scanf_float+0x272>
 800f5f2:	2d01      	cmp	r5, #1
 800f5f4:	d002      	beq.n	800f5fc <_scanf_float+0x1d0>
 800f5f6:	2d04      	cmp	r5, #4
 800f5f8:	f47f af48 	bne.w	800f48c <_scanf_float+0x60>
 800f5fc:	3501      	adds	r5, #1
 800f5fe:	b2ed      	uxtb	r5, r5
 800f600:	e7d8      	b.n	800f5b4 <_scanf_float+0x188>
 800f602:	f1ba 0f01 	cmp.w	sl, #1
 800f606:	f47f af41 	bne.w	800f48c <_scanf_float+0x60>
 800f60a:	f04f 0a02 	mov.w	sl, #2
 800f60e:	e7d1      	b.n	800f5b4 <_scanf_float+0x188>
 800f610:	b97d      	cbnz	r5, 800f632 <_scanf_float+0x206>
 800f612:	f1b9 0f00 	cmp.w	r9, #0
 800f616:	f47f af3c 	bne.w	800f492 <_scanf_float+0x66>
 800f61a:	6822      	ldr	r2, [r4, #0]
 800f61c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f620:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f624:	f47f af39 	bne.w	800f49a <_scanf_float+0x6e>
 800f628:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f62c:	6022      	str	r2, [r4, #0]
 800f62e:	2501      	movs	r5, #1
 800f630:	e7c0      	b.n	800f5b4 <_scanf_float+0x188>
 800f632:	2d03      	cmp	r5, #3
 800f634:	d0e2      	beq.n	800f5fc <_scanf_float+0x1d0>
 800f636:	2d05      	cmp	r5, #5
 800f638:	e7de      	b.n	800f5f8 <_scanf_float+0x1cc>
 800f63a:	2d02      	cmp	r5, #2
 800f63c:	f47f af26 	bne.w	800f48c <_scanf_float+0x60>
 800f640:	2503      	movs	r5, #3
 800f642:	e7b7      	b.n	800f5b4 <_scanf_float+0x188>
 800f644:	2d06      	cmp	r5, #6
 800f646:	f47f af21 	bne.w	800f48c <_scanf_float+0x60>
 800f64a:	2507      	movs	r5, #7
 800f64c:	e7b2      	b.n	800f5b4 <_scanf_float+0x188>
 800f64e:	6822      	ldr	r2, [r4, #0]
 800f650:	0591      	lsls	r1, r2, #22
 800f652:	f57f af1b 	bpl.w	800f48c <_scanf_float+0x60>
 800f656:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f65a:	6022      	str	r2, [r4, #0]
 800f65c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f660:	e7a8      	b.n	800f5b4 <_scanf_float+0x188>
 800f662:	6822      	ldr	r2, [r4, #0]
 800f664:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f668:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f66c:	d006      	beq.n	800f67c <_scanf_float+0x250>
 800f66e:	0550      	lsls	r0, r2, #21
 800f670:	f57f af0c 	bpl.w	800f48c <_scanf_float+0x60>
 800f674:	f1b9 0f00 	cmp.w	r9, #0
 800f678:	f43f af0f 	beq.w	800f49a <_scanf_float+0x6e>
 800f67c:	0591      	lsls	r1, r2, #22
 800f67e:	bf58      	it	pl
 800f680:	9901      	ldrpl	r1, [sp, #4]
 800f682:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f686:	bf58      	it	pl
 800f688:	eba9 0101 	subpl.w	r1, r9, r1
 800f68c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f690:	bf58      	it	pl
 800f692:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f696:	6022      	str	r2, [r4, #0]
 800f698:	f04f 0900 	mov.w	r9, #0
 800f69c:	e78a      	b.n	800f5b4 <_scanf_float+0x188>
 800f69e:	f04f 0a03 	mov.w	sl, #3
 800f6a2:	e787      	b.n	800f5b4 <_scanf_float+0x188>
 800f6a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f6a8:	4639      	mov	r1, r7
 800f6aa:	4640      	mov	r0, r8
 800f6ac:	4798      	blx	r3
 800f6ae:	2800      	cmp	r0, #0
 800f6b0:	f43f aedf 	beq.w	800f472 <_scanf_float+0x46>
 800f6b4:	e6ea      	b.n	800f48c <_scanf_float+0x60>
 800f6b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f6ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f6be:	463a      	mov	r2, r7
 800f6c0:	4640      	mov	r0, r8
 800f6c2:	4798      	blx	r3
 800f6c4:	6923      	ldr	r3, [r4, #16]
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	6123      	str	r3, [r4, #16]
 800f6ca:	e6ec      	b.n	800f4a6 <_scanf_float+0x7a>
 800f6cc:	1e6b      	subs	r3, r5, #1
 800f6ce:	2b06      	cmp	r3, #6
 800f6d0:	d825      	bhi.n	800f71e <_scanf_float+0x2f2>
 800f6d2:	2d02      	cmp	r5, #2
 800f6d4:	d836      	bhi.n	800f744 <_scanf_float+0x318>
 800f6d6:	455e      	cmp	r6, fp
 800f6d8:	f67f aee8 	bls.w	800f4ac <_scanf_float+0x80>
 800f6dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f6e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f6e4:	463a      	mov	r2, r7
 800f6e6:	4640      	mov	r0, r8
 800f6e8:	4798      	blx	r3
 800f6ea:	6923      	ldr	r3, [r4, #16]
 800f6ec:	3b01      	subs	r3, #1
 800f6ee:	6123      	str	r3, [r4, #16]
 800f6f0:	e7f1      	b.n	800f6d6 <_scanf_float+0x2aa>
 800f6f2:	9802      	ldr	r0, [sp, #8]
 800f6f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f6f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f6fc:	9002      	str	r0, [sp, #8]
 800f6fe:	463a      	mov	r2, r7
 800f700:	4640      	mov	r0, r8
 800f702:	4798      	blx	r3
 800f704:	6923      	ldr	r3, [r4, #16]
 800f706:	3b01      	subs	r3, #1
 800f708:	6123      	str	r3, [r4, #16]
 800f70a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f70e:	fa5f fa8a 	uxtb.w	sl, sl
 800f712:	f1ba 0f02 	cmp.w	sl, #2
 800f716:	d1ec      	bne.n	800f6f2 <_scanf_float+0x2c6>
 800f718:	3d03      	subs	r5, #3
 800f71a:	b2ed      	uxtb	r5, r5
 800f71c:	1b76      	subs	r6, r6, r5
 800f71e:	6823      	ldr	r3, [r4, #0]
 800f720:	05da      	lsls	r2, r3, #23
 800f722:	d52f      	bpl.n	800f784 <_scanf_float+0x358>
 800f724:	055b      	lsls	r3, r3, #21
 800f726:	d510      	bpl.n	800f74a <_scanf_float+0x31e>
 800f728:	455e      	cmp	r6, fp
 800f72a:	f67f aebf 	bls.w	800f4ac <_scanf_float+0x80>
 800f72e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f732:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f736:	463a      	mov	r2, r7
 800f738:	4640      	mov	r0, r8
 800f73a:	4798      	blx	r3
 800f73c:	6923      	ldr	r3, [r4, #16]
 800f73e:	3b01      	subs	r3, #1
 800f740:	6123      	str	r3, [r4, #16]
 800f742:	e7f1      	b.n	800f728 <_scanf_float+0x2fc>
 800f744:	46aa      	mov	sl, r5
 800f746:	9602      	str	r6, [sp, #8]
 800f748:	e7df      	b.n	800f70a <_scanf_float+0x2de>
 800f74a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f74e:	6923      	ldr	r3, [r4, #16]
 800f750:	2965      	cmp	r1, #101	; 0x65
 800f752:	f103 33ff 	add.w	r3, r3, #4294967295
 800f756:	f106 35ff 	add.w	r5, r6, #4294967295
 800f75a:	6123      	str	r3, [r4, #16]
 800f75c:	d00c      	beq.n	800f778 <_scanf_float+0x34c>
 800f75e:	2945      	cmp	r1, #69	; 0x45
 800f760:	d00a      	beq.n	800f778 <_scanf_float+0x34c>
 800f762:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f766:	463a      	mov	r2, r7
 800f768:	4640      	mov	r0, r8
 800f76a:	4798      	blx	r3
 800f76c:	6923      	ldr	r3, [r4, #16]
 800f76e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f772:	3b01      	subs	r3, #1
 800f774:	1eb5      	subs	r5, r6, #2
 800f776:	6123      	str	r3, [r4, #16]
 800f778:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f77c:	463a      	mov	r2, r7
 800f77e:	4640      	mov	r0, r8
 800f780:	4798      	blx	r3
 800f782:	462e      	mov	r6, r5
 800f784:	6825      	ldr	r5, [r4, #0]
 800f786:	f015 0510 	ands.w	r5, r5, #16
 800f78a:	d158      	bne.n	800f83e <_scanf_float+0x412>
 800f78c:	7035      	strb	r5, [r6, #0]
 800f78e:	6823      	ldr	r3, [r4, #0]
 800f790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f798:	d11c      	bne.n	800f7d4 <_scanf_float+0x3a8>
 800f79a:	9b01      	ldr	r3, [sp, #4]
 800f79c:	454b      	cmp	r3, r9
 800f79e:	eba3 0209 	sub.w	r2, r3, r9
 800f7a2:	d124      	bne.n	800f7ee <_scanf_float+0x3c2>
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	4659      	mov	r1, fp
 800f7a8:	4640      	mov	r0, r8
 800f7aa:	f000 ffd3 	bl	8010754 <_strtod_r>
 800f7ae:	9b03      	ldr	r3, [sp, #12]
 800f7b0:	6821      	ldr	r1, [r4, #0]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f011 0f02 	tst.w	r1, #2
 800f7b8:	ec57 6b10 	vmov	r6, r7, d0
 800f7bc:	f103 0204 	add.w	r2, r3, #4
 800f7c0:	d020      	beq.n	800f804 <_scanf_float+0x3d8>
 800f7c2:	9903      	ldr	r1, [sp, #12]
 800f7c4:	600a      	str	r2, [r1, #0]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	e9c3 6700 	strd	r6, r7, [r3]
 800f7cc:	68e3      	ldr	r3, [r4, #12]
 800f7ce:	3301      	adds	r3, #1
 800f7d0:	60e3      	str	r3, [r4, #12]
 800f7d2:	e66c      	b.n	800f4ae <_scanf_float+0x82>
 800f7d4:	9b04      	ldr	r3, [sp, #16]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d0e4      	beq.n	800f7a4 <_scanf_float+0x378>
 800f7da:	9905      	ldr	r1, [sp, #20]
 800f7dc:	230a      	movs	r3, #10
 800f7de:	462a      	mov	r2, r5
 800f7e0:	3101      	adds	r1, #1
 800f7e2:	4640      	mov	r0, r8
 800f7e4:	f001 f840 	bl	8010868 <_strtol_r>
 800f7e8:	9b04      	ldr	r3, [sp, #16]
 800f7ea:	9e05      	ldr	r6, [sp, #20]
 800f7ec:	1ac2      	subs	r2, r0, r3
 800f7ee:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f7f2:	429e      	cmp	r6, r3
 800f7f4:	bf28      	it	cs
 800f7f6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f7fa:	4912      	ldr	r1, [pc, #72]	; (800f844 <_scanf_float+0x418>)
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	f000 f8c9 	bl	800f994 <siprintf>
 800f802:	e7cf      	b.n	800f7a4 <_scanf_float+0x378>
 800f804:	f011 0f04 	tst.w	r1, #4
 800f808:	9903      	ldr	r1, [sp, #12]
 800f80a:	600a      	str	r2, [r1, #0]
 800f80c:	d1db      	bne.n	800f7c6 <_scanf_float+0x39a>
 800f80e:	f8d3 8000 	ldr.w	r8, [r3]
 800f812:	ee10 2a10 	vmov	r2, s0
 800f816:	ee10 0a10 	vmov	r0, s0
 800f81a:	463b      	mov	r3, r7
 800f81c:	4639      	mov	r1, r7
 800f81e:	f7f1 f995 	bl	8000b4c <__aeabi_dcmpun>
 800f822:	b128      	cbz	r0, 800f830 <_scanf_float+0x404>
 800f824:	4808      	ldr	r0, [pc, #32]	; (800f848 <_scanf_float+0x41c>)
 800f826:	f000 f8af 	bl	800f988 <nanf>
 800f82a:	ed88 0a00 	vstr	s0, [r8]
 800f82e:	e7cd      	b.n	800f7cc <_scanf_float+0x3a0>
 800f830:	4630      	mov	r0, r6
 800f832:	4639      	mov	r1, r7
 800f834:	f7f1 f9e8 	bl	8000c08 <__aeabi_d2f>
 800f838:	f8c8 0000 	str.w	r0, [r8]
 800f83c:	e7c6      	b.n	800f7cc <_scanf_float+0x3a0>
 800f83e:	2500      	movs	r5, #0
 800f840:	e635      	b.n	800f4ae <_scanf_float+0x82>
 800f842:	bf00      	nop
 800f844:	08015926 	.word	0x08015926
 800f848:	08015cbb 	.word	0x08015cbb

0800f84c <iprintf>:
 800f84c:	b40f      	push	{r0, r1, r2, r3}
 800f84e:	4b0a      	ldr	r3, [pc, #40]	; (800f878 <iprintf+0x2c>)
 800f850:	b513      	push	{r0, r1, r4, lr}
 800f852:	681c      	ldr	r4, [r3, #0]
 800f854:	b124      	cbz	r4, 800f860 <iprintf+0x14>
 800f856:	69a3      	ldr	r3, [r4, #24]
 800f858:	b913      	cbnz	r3, 800f860 <iprintf+0x14>
 800f85a:	4620      	mov	r0, r4
 800f85c:	f002 f8be 	bl	80119dc <__sinit>
 800f860:	ab05      	add	r3, sp, #20
 800f862:	9a04      	ldr	r2, [sp, #16]
 800f864:	68a1      	ldr	r1, [r4, #8]
 800f866:	9301      	str	r3, [sp, #4]
 800f868:	4620      	mov	r0, r4
 800f86a:	f003 fd81 	bl	8013370 <_vfiprintf_r>
 800f86e:	b002      	add	sp, #8
 800f870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f874:	b004      	add	sp, #16
 800f876:	4770      	bx	lr
 800f878:	20000028 	.word	0x20000028

0800f87c <_puts_r>:
 800f87c:	b570      	push	{r4, r5, r6, lr}
 800f87e:	460e      	mov	r6, r1
 800f880:	4605      	mov	r5, r0
 800f882:	b118      	cbz	r0, 800f88c <_puts_r+0x10>
 800f884:	6983      	ldr	r3, [r0, #24]
 800f886:	b90b      	cbnz	r3, 800f88c <_puts_r+0x10>
 800f888:	f002 f8a8 	bl	80119dc <__sinit>
 800f88c:	69ab      	ldr	r3, [r5, #24]
 800f88e:	68ac      	ldr	r4, [r5, #8]
 800f890:	b913      	cbnz	r3, 800f898 <_puts_r+0x1c>
 800f892:	4628      	mov	r0, r5
 800f894:	f002 f8a2 	bl	80119dc <__sinit>
 800f898:	4b2c      	ldr	r3, [pc, #176]	; (800f94c <_puts_r+0xd0>)
 800f89a:	429c      	cmp	r4, r3
 800f89c:	d120      	bne.n	800f8e0 <_puts_r+0x64>
 800f89e:	686c      	ldr	r4, [r5, #4]
 800f8a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8a2:	07db      	lsls	r3, r3, #31
 800f8a4:	d405      	bmi.n	800f8b2 <_puts_r+0x36>
 800f8a6:	89a3      	ldrh	r3, [r4, #12]
 800f8a8:	0598      	lsls	r0, r3, #22
 800f8aa:	d402      	bmi.n	800f8b2 <_puts_r+0x36>
 800f8ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8ae:	f002 fca6 	bl	80121fe <__retarget_lock_acquire_recursive>
 800f8b2:	89a3      	ldrh	r3, [r4, #12]
 800f8b4:	0719      	lsls	r1, r3, #28
 800f8b6:	d51d      	bpl.n	800f8f4 <_puts_r+0x78>
 800f8b8:	6923      	ldr	r3, [r4, #16]
 800f8ba:	b1db      	cbz	r3, 800f8f4 <_puts_r+0x78>
 800f8bc:	3e01      	subs	r6, #1
 800f8be:	68a3      	ldr	r3, [r4, #8]
 800f8c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f8c4:	3b01      	subs	r3, #1
 800f8c6:	60a3      	str	r3, [r4, #8]
 800f8c8:	bb39      	cbnz	r1, 800f91a <_puts_r+0x9e>
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	da38      	bge.n	800f940 <_puts_r+0xc4>
 800f8ce:	4622      	mov	r2, r4
 800f8d0:	210a      	movs	r1, #10
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f001 f80e 	bl	80108f4 <__swbuf_r>
 800f8d8:	3001      	adds	r0, #1
 800f8da:	d011      	beq.n	800f900 <_puts_r+0x84>
 800f8dc:	250a      	movs	r5, #10
 800f8de:	e011      	b.n	800f904 <_puts_r+0x88>
 800f8e0:	4b1b      	ldr	r3, [pc, #108]	; (800f950 <_puts_r+0xd4>)
 800f8e2:	429c      	cmp	r4, r3
 800f8e4:	d101      	bne.n	800f8ea <_puts_r+0x6e>
 800f8e6:	68ac      	ldr	r4, [r5, #8]
 800f8e8:	e7da      	b.n	800f8a0 <_puts_r+0x24>
 800f8ea:	4b1a      	ldr	r3, [pc, #104]	; (800f954 <_puts_r+0xd8>)
 800f8ec:	429c      	cmp	r4, r3
 800f8ee:	bf08      	it	eq
 800f8f0:	68ec      	ldreq	r4, [r5, #12]
 800f8f2:	e7d5      	b.n	800f8a0 <_puts_r+0x24>
 800f8f4:	4621      	mov	r1, r4
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	f001 f860 	bl	80109bc <__swsetup_r>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	d0dd      	beq.n	800f8bc <_puts_r+0x40>
 800f900:	f04f 35ff 	mov.w	r5, #4294967295
 800f904:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f906:	07da      	lsls	r2, r3, #31
 800f908:	d405      	bmi.n	800f916 <_puts_r+0x9a>
 800f90a:	89a3      	ldrh	r3, [r4, #12]
 800f90c:	059b      	lsls	r3, r3, #22
 800f90e:	d402      	bmi.n	800f916 <_puts_r+0x9a>
 800f910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f912:	f002 fc75 	bl	8012200 <__retarget_lock_release_recursive>
 800f916:	4628      	mov	r0, r5
 800f918:	bd70      	pop	{r4, r5, r6, pc}
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	da04      	bge.n	800f928 <_puts_r+0xac>
 800f91e:	69a2      	ldr	r2, [r4, #24]
 800f920:	429a      	cmp	r2, r3
 800f922:	dc06      	bgt.n	800f932 <_puts_r+0xb6>
 800f924:	290a      	cmp	r1, #10
 800f926:	d004      	beq.n	800f932 <_puts_r+0xb6>
 800f928:	6823      	ldr	r3, [r4, #0]
 800f92a:	1c5a      	adds	r2, r3, #1
 800f92c:	6022      	str	r2, [r4, #0]
 800f92e:	7019      	strb	r1, [r3, #0]
 800f930:	e7c5      	b.n	800f8be <_puts_r+0x42>
 800f932:	4622      	mov	r2, r4
 800f934:	4628      	mov	r0, r5
 800f936:	f000 ffdd 	bl	80108f4 <__swbuf_r>
 800f93a:	3001      	adds	r0, #1
 800f93c:	d1bf      	bne.n	800f8be <_puts_r+0x42>
 800f93e:	e7df      	b.n	800f900 <_puts_r+0x84>
 800f940:	6823      	ldr	r3, [r4, #0]
 800f942:	250a      	movs	r5, #10
 800f944:	1c5a      	adds	r2, r3, #1
 800f946:	6022      	str	r2, [r4, #0]
 800f948:	701d      	strb	r5, [r3, #0]
 800f94a:	e7db      	b.n	800f904 <_puts_r+0x88>
 800f94c:	08015a34 	.word	0x08015a34
 800f950:	08015a54 	.word	0x08015a54
 800f954:	08015a14 	.word	0x08015a14

0800f958 <puts>:
 800f958:	4b02      	ldr	r3, [pc, #8]	; (800f964 <puts+0xc>)
 800f95a:	4601      	mov	r1, r0
 800f95c:	6818      	ldr	r0, [r3, #0]
 800f95e:	f7ff bf8d 	b.w	800f87c <_puts_r>
 800f962:	bf00      	nop
 800f964:	20000028 	.word	0x20000028

0800f968 <_sbrk_r>:
 800f968:	b538      	push	{r3, r4, r5, lr}
 800f96a:	4d06      	ldr	r5, [pc, #24]	; (800f984 <_sbrk_r+0x1c>)
 800f96c:	2300      	movs	r3, #0
 800f96e:	4604      	mov	r4, r0
 800f970:	4608      	mov	r0, r1
 800f972:	602b      	str	r3, [r5, #0]
 800f974:	f7f4 fc88 	bl	8004288 <_sbrk>
 800f978:	1c43      	adds	r3, r0, #1
 800f97a:	d102      	bne.n	800f982 <_sbrk_r+0x1a>
 800f97c:	682b      	ldr	r3, [r5, #0]
 800f97e:	b103      	cbz	r3, 800f982 <_sbrk_r+0x1a>
 800f980:	6023      	str	r3, [r4, #0]
 800f982:	bd38      	pop	{r3, r4, r5, pc}
 800f984:	20001a24 	.word	0x20001a24

0800f988 <nanf>:
 800f988:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f990 <nanf+0x8>
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop
 800f990:	7fc00000 	.word	0x7fc00000

0800f994 <siprintf>:
 800f994:	b40e      	push	{r1, r2, r3}
 800f996:	b500      	push	{lr}
 800f998:	b09c      	sub	sp, #112	; 0x70
 800f99a:	ab1d      	add	r3, sp, #116	; 0x74
 800f99c:	9002      	str	r0, [sp, #8]
 800f99e:	9006      	str	r0, [sp, #24]
 800f9a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f9a4:	4809      	ldr	r0, [pc, #36]	; (800f9cc <siprintf+0x38>)
 800f9a6:	9107      	str	r1, [sp, #28]
 800f9a8:	9104      	str	r1, [sp, #16]
 800f9aa:	4909      	ldr	r1, [pc, #36]	; (800f9d0 <siprintf+0x3c>)
 800f9ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9b0:	9105      	str	r1, [sp, #20]
 800f9b2:	6800      	ldr	r0, [r0, #0]
 800f9b4:	9301      	str	r3, [sp, #4]
 800f9b6:	a902      	add	r1, sp, #8
 800f9b8:	f003 f9de 	bl	8012d78 <_svfiprintf_r>
 800f9bc:	9b02      	ldr	r3, [sp, #8]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	701a      	strb	r2, [r3, #0]
 800f9c2:	b01c      	add	sp, #112	; 0x70
 800f9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9c8:	b003      	add	sp, #12
 800f9ca:	4770      	bx	lr
 800f9cc:	20000028 	.word	0x20000028
 800f9d0:	ffff0208 	.word	0xffff0208

0800f9d4 <siscanf>:
 800f9d4:	b40e      	push	{r1, r2, r3}
 800f9d6:	b510      	push	{r4, lr}
 800f9d8:	b09f      	sub	sp, #124	; 0x7c
 800f9da:	ac21      	add	r4, sp, #132	; 0x84
 800f9dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f9e0:	f854 2b04 	ldr.w	r2, [r4], #4
 800f9e4:	9201      	str	r2, [sp, #4]
 800f9e6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f9ea:	9004      	str	r0, [sp, #16]
 800f9ec:	9008      	str	r0, [sp, #32]
 800f9ee:	f7f0 fbff 	bl	80001f0 <strlen>
 800f9f2:	4b0c      	ldr	r3, [pc, #48]	; (800fa24 <siscanf+0x50>)
 800f9f4:	9005      	str	r0, [sp, #20]
 800f9f6:	9009      	str	r0, [sp, #36]	; 0x24
 800f9f8:	930d      	str	r3, [sp, #52]	; 0x34
 800f9fa:	480b      	ldr	r0, [pc, #44]	; (800fa28 <siscanf+0x54>)
 800f9fc:	9a01      	ldr	r2, [sp, #4]
 800f9fe:	6800      	ldr	r0, [r0, #0]
 800fa00:	9403      	str	r4, [sp, #12]
 800fa02:	2300      	movs	r3, #0
 800fa04:	9311      	str	r3, [sp, #68]	; 0x44
 800fa06:	9316      	str	r3, [sp, #88]	; 0x58
 800fa08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fa10:	a904      	add	r1, sp, #16
 800fa12:	4623      	mov	r3, r4
 800fa14:	f003 fb0a 	bl	801302c <__ssvfiscanf_r>
 800fa18:	b01f      	add	sp, #124	; 0x7c
 800fa1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa1e:	b003      	add	sp, #12
 800fa20:	4770      	bx	lr
 800fa22:	bf00      	nop
 800fa24:	0800fa4f 	.word	0x0800fa4f
 800fa28:	20000028 	.word	0x20000028

0800fa2c <__sread>:
 800fa2c:	b510      	push	{r4, lr}
 800fa2e:	460c      	mov	r4, r1
 800fa30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa34:	f003 ff18 	bl	8013868 <_read_r>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	bfab      	itete	ge
 800fa3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa3e:	89a3      	ldrhlt	r3, [r4, #12]
 800fa40:	181b      	addge	r3, r3, r0
 800fa42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa46:	bfac      	ite	ge
 800fa48:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa4a:	81a3      	strhlt	r3, [r4, #12]
 800fa4c:	bd10      	pop	{r4, pc}

0800fa4e <__seofread>:
 800fa4e:	2000      	movs	r0, #0
 800fa50:	4770      	bx	lr

0800fa52 <__swrite>:
 800fa52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa56:	461f      	mov	r7, r3
 800fa58:	898b      	ldrh	r3, [r1, #12]
 800fa5a:	05db      	lsls	r3, r3, #23
 800fa5c:	4605      	mov	r5, r0
 800fa5e:	460c      	mov	r4, r1
 800fa60:	4616      	mov	r6, r2
 800fa62:	d505      	bpl.n	800fa70 <__swrite+0x1e>
 800fa64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa68:	2302      	movs	r3, #2
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	f002 fbca 	bl	8012204 <_lseek_r>
 800fa70:	89a3      	ldrh	r3, [r4, #12]
 800fa72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa7a:	81a3      	strh	r3, [r4, #12]
 800fa7c:	4632      	mov	r2, r6
 800fa7e:	463b      	mov	r3, r7
 800fa80:	4628      	mov	r0, r5
 800fa82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa86:	f000 bf87 	b.w	8010998 <_write_r>

0800fa8a <__sseek>:
 800fa8a:	b510      	push	{r4, lr}
 800fa8c:	460c      	mov	r4, r1
 800fa8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa92:	f002 fbb7 	bl	8012204 <_lseek_r>
 800fa96:	1c43      	adds	r3, r0, #1
 800fa98:	89a3      	ldrh	r3, [r4, #12]
 800fa9a:	bf15      	itete	ne
 800fa9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fa9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800faa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800faa6:	81a3      	strheq	r3, [r4, #12]
 800faa8:	bf18      	it	ne
 800faaa:	81a3      	strhne	r3, [r4, #12]
 800faac:	bd10      	pop	{r4, pc}

0800faae <__sclose>:
 800faae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fab2:	f000 bff1 	b.w	8010a98 <_close_r>

0800fab6 <strchr>:
 800fab6:	b2c9      	uxtb	r1, r1
 800fab8:	4603      	mov	r3, r0
 800faba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fabe:	b11a      	cbz	r2, 800fac8 <strchr+0x12>
 800fac0:	428a      	cmp	r2, r1
 800fac2:	d1f9      	bne.n	800fab8 <strchr+0x2>
 800fac4:	4618      	mov	r0, r3
 800fac6:	4770      	bx	lr
 800fac8:	2900      	cmp	r1, #0
 800faca:	bf18      	it	ne
 800facc:	2300      	movne	r3, #0
 800face:	e7f9      	b.n	800fac4 <strchr+0xe>

0800fad0 <strcpy>:
 800fad0:	4603      	mov	r3, r0
 800fad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fad6:	f803 2b01 	strb.w	r2, [r3], #1
 800fada:	2a00      	cmp	r2, #0
 800fadc:	d1f9      	bne.n	800fad2 <strcpy+0x2>
 800fade:	4770      	bx	lr

0800fae0 <strncmp>:
 800fae0:	b510      	push	{r4, lr}
 800fae2:	b16a      	cbz	r2, 800fb00 <strncmp+0x20>
 800fae4:	3901      	subs	r1, #1
 800fae6:	1884      	adds	r4, r0, r2
 800fae8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800faec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d103      	bne.n	800fafc <strncmp+0x1c>
 800faf4:	42a0      	cmp	r0, r4
 800faf6:	d001      	beq.n	800fafc <strncmp+0x1c>
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d1f5      	bne.n	800fae8 <strncmp+0x8>
 800fafc:	1a98      	subs	r0, r3, r2
 800fafe:	bd10      	pop	{r4, pc}
 800fb00:	4610      	mov	r0, r2
 800fb02:	e7fc      	b.n	800fafe <strncmp+0x1e>

0800fb04 <sulp>:
 800fb04:	b570      	push	{r4, r5, r6, lr}
 800fb06:	4604      	mov	r4, r0
 800fb08:	460d      	mov	r5, r1
 800fb0a:	ec45 4b10 	vmov	d0, r4, r5
 800fb0e:	4616      	mov	r6, r2
 800fb10:	f002 ff78 	bl	8012a04 <__ulp>
 800fb14:	ec51 0b10 	vmov	r0, r1, d0
 800fb18:	b17e      	cbz	r6, 800fb3a <sulp+0x36>
 800fb1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fb1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	dd09      	ble.n	800fb3a <sulp+0x36>
 800fb26:	051b      	lsls	r3, r3, #20
 800fb28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fb2c:	2400      	movs	r4, #0
 800fb2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fb32:	4622      	mov	r2, r4
 800fb34:	462b      	mov	r3, r5
 800fb36:	f7f0 fd6f 	bl	8000618 <__aeabi_dmul>
 800fb3a:	bd70      	pop	{r4, r5, r6, pc}
 800fb3c:	0000      	movs	r0, r0
	...

0800fb40 <_strtod_l>:
 800fb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb44:	b0a3      	sub	sp, #140	; 0x8c
 800fb46:	461f      	mov	r7, r3
 800fb48:	2300      	movs	r3, #0
 800fb4a:	931e      	str	r3, [sp, #120]	; 0x78
 800fb4c:	4ba4      	ldr	r3, [pc, #656]	; (800fde0 <_strtod_l+0x2a0>)
 800fb4e:	9219      	str	r2, [sp, #100]	; 0x64
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	9307      	str	r3, [sp, #28]
 800fb54:	4604      	mov	r4, r0
 800fb56:	4618      	mov	r0, r3
 800fb58:	4688      	mov	r8, r1
 800fb5a:	f7f0 fb49 	bl	80001f0 <strlen>
 800fb5e:	f04f 0a00 	mov.w	sl, #0
 800fb62:	4605      	mov	r5, r0
 800fb64:	f04f 0b00 	mov.w	fp, #0
 800fb68:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fb6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb6e:	781a      	ldrb	r2, [r3, #0]
 800fb70:	2a2b      	cmp	r2, #43	; 0x2b
 800fb72:	d04c      	beq.n	800fc0e <_strtod_l+0xce>
 800fb74:	d839      	bhi.n	800fbea <_strtod_l+0xaa>
 800fb76:	2a0d      	cmp	r2, #13
 800fb78:	d832      	bhi.n	800fbe0 <_strtod_l+0xa0>
 800fb7a:	2a08      	cmp	r2, #8
 800fb7c:	d832      	bhi.n	800fbe4 <_strtod_l+0xa4>
 800fb7e:	2a00      	cmp	r2, #0
 800fb80:	d03c      	beq.n	800fbfc <_strtod_l+0xbc>
 800fb82:	2300      	movs	r3, #0
 800fb84:	930e      	str	r3, [sp, #56]	; 0x38
 800fb86:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fb88:	7833      	ldrb	r3, [r6, #0]
 800fb8a:	2b30      	cmp	r3, #48	; 0x30
 800fb8c:	f040 80b4 	bne.w	800fcf8 <_strtod_l+0x1b8>
 800fb90:	7873      	ldrb	r3, [r6, #1]
 800fb92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fb96:	2b58      	cmp	r3, #88	; 0x58
 800fb98:	d16c      	bne.n	800fc74 <_strtod_l+0x134>
 800fb9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb9c:	9301      	str	r3, [sp, #4]
 800fb9e:	ab1e      	add	r3, sp, #120	; 0x78
 800fba0:	9702      	str	r7, [sp, #8]
 800fba2:	9300      	str	r3, [sp, #0]
 800fba4:	4a8f      	ldr	r2, [pc, #572]	; (800fde4 <_strtod_l+0x2a4>)
 800fba6:	ab1f      	add	r3, sp, #124	; 0x7c
 800fba8:	a91d      	add	r1, sp, #116	; 0x74
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f002 f81a 	bl	8011be4 <__gethex>
 800fbb0:	f010 0707 	ands.w	r7, r0, #7
 800fbb4:	4605      	mov	r5, r0
 800fbb6:	d005      	beq.n	800fbc4 <_strtod_l+0x84>
 800fbb8:	2f06      	cmp	r7, #6
 800fbba:	d12a      	bne.n	800fc12 <_strtod_l+0xd2>
 800fbbc:	3601      	adds	r6, #1
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	961d      	str	r6, [sp, #116]	; 0x74
 800fbc2:	930e      	str	r3, [sp, #56]	; 0x38
 800fbc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	f040 8596 	bne.w	80106f8 <_strtod_l+0xbb8>
 800fbcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbce:	b1db      	cbz	r3, 800fc08 <_strtod_l+0xc8>
 800fbd0:	4652      	mov	r2, sl
 800fbd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fbd6:	ec43 2b10 	vmov	d0, r2, r3
 800fbda:	b023      	add	sp, #140	; 0x8c
 800fbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe0:	2a20      	cmp	r2, #32
 800fbe2:	d1ce      	bne.n	800fb82 <_strtod_l+0x42>
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	931d      	str	r3, [sp, #116]	; 0x74
 800fbe8:	e7c0      	b.n	800fb6c <_strtod_l+0x2c>
 800fbea:	2a2d      	cmp	r2, #45	; 0x2d
 800fbec:	d1c9      	bne.n	800fb82 <_strtod_l+0x42>
 800fbee:	2201      	movs	r2, #1
 800fbf0:	920e      	str	r2, [sp, #56]	; 0x38
 800fbf2:	1c5a      	adds	r2, r3, #1
 800fbf4:	921d      	str	r2, [sp, #116]	; 0x74
 800fbf6:	785b      	ldrb	r3, [r3, #1]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d1c4      	bne.n	800fb86 <_strtod_l+0x46>
 800fbfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fbfe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	f040 8576 	bne.w	80106f4 <_strtod_l+0xbb4>
 800fc08:	4652      	mov	r2, sl
 800fc0a:	465b      	mov	r3, fp
 800fc0c:	e7e3      	b.n	800fbd6 <_strtod_l+0x96>
 800fc0e:	2200      	movs	r2, #0
 800fc10:	e7ee      	b.n	800fbf0 <_strtod_l+0xb0>
 800fc12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fc14:	b13a      	cbz	r2, 800fc26 <_strtod_l+0xe6>
 800fc16:	2135      	movs	r1, #53	; 0x35
 800fc18:	a820      	add	r0, sp, #128	; 0x80
 800fc1a:	f002 fffe 	bl	8012c1a <__copybits>
 800fc1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fc20:	4620      	mov	r0, r4
 800fc22:	f002 fbc3 	bl	80123ac <_Bfree>
 800fc26:	3f01      	subs	r7, #1
 800fc28:	2f05      	cmp	r7, #5
 800fc2a:	d807      	bhi.n	800fc3c <_strtod_l+0xfc>
 800fc2c:	e8df f007 	tbb	[pc, r7]
 800fc30:	1d180b0e 	.word	0x1d180b0e
 800fc34:	030e      	.short	0x030e
 800fc36:	f04f 0b00 	mov.w	fp, #0
 800fc3a:	46da      	mov	sl, fp
 800fc3c:	0728      	lsls	r0, r5, #28
 800fc3e:	d5c1      	bpl.n	800fbc4 <_strtod_l+0x84>
 800fc40:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fc44:	e7be      	b.n	800fbc4 <_strtod_l+0x84>
 800fc46:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800fc4a:	e7f7      	b.n	800fc3c <_strtod_l+0xfc>
 800fc4c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800fc50:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800fc52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fc56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fc5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fc5e:	e7ed      	b.n	800fc3c <_strtod_l+0xfc>
 800fc60:	f8df b184 	ldr.w	fp, [pc, #388]	; 800fde8 <_strtod_l+0x2a8>
 800fc64:	f04f 0a00 	mov.w	sl, #0
 800fc68:	e7e8      	b.n	800fc3c <_strtod_l+0xfc>
 800fc6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fc6e:	f04f 3aff 	mov.w	sl, #4294967295
 800fc72:	e7e3      	b.n	800fc3c <_strtod_l+0xfc>
 800fc74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc76:	1c5a      	adds	r2, r3, #1
 800fc78:	921d      	str	r2, [sp, #116]	; 0x74
 800fc7a:	785b      	ldrb	r3, [r3, #1]
 800fc7c:	2b30      	cmp	r3, #48	; 0x30
 800fc7e:	d0f9      	beq.n	800fc74 <_strtod_l+0x134>
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d09f      	beq.n	800fbc4 <_strtod_l+0x84>
 800fc84:	2301      	movs	r3, #1
 800fc86:	f04f 0900 	mov.w	r9, #0
 800fc8a:	9304      	str	r3, [sp, #16]
 800fc8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc8e:	930a      	str	r3, [sp, #40]	; 0x28
 800fc90:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fc94:	464f      	mov	r7, r9
 800fc96:	220a      	movs	r2, #10
 800fc98:	981d      	ldr	r0, [sp, #116]	; 0x74
 800fc9a:	7806      	ldrb	r6, [r0, #0]
 800fc9c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fca0:	b2d9      	uxtb	r1, r3
 800fca2:	2909      	cmp	r1, #9
 800fca4:	d92a      	bls.n	800fcfc <_strtod_l+0x1bc>
 800fca6:	9907      	ldr	r1, [sp, #28]
 800fca8:	462a      	mov	r2, r5
 800fcaa:	f7ff ff19 	bl	800fae0 <strncmp>
 800fcae:	b398      	cbz	r0, 800fd18 <_strtod_l+0x1d8>
 800fcb0:	2000      	movs	r0, #0
 800fcb2:	4633      	mov	r3, r6
 800fcb4:	463d      	mov	r5, r7
 800fcb6:	9007      	str	r0, [sp, #28]
 800fcb8:	4602      	mov	r2, r0
 800fcba:	2b65      	cmp	r3, #101	; 0x65
 800fcbc:	d001      	beq.n	800fcc2 <_strtod_l+0x182>
 800fcbe:	2b45      	cmp	r3, #69	; 0x45
 800fcc0:	d118      	bne.n	800fcf4 <_strtod_l+0x1b4>
 800fcc2:	b91d      	cbnz	r5, 800fccc <_strtod_l+0x18c>
 800fcc4:	9b04      	ldr	r3, [sp, #16]
 800fcc6:	4303      	orrs	r3, r0
 800fcc8:	d098      	beq.n	800fbfc <_strtod_l+0xbc>
 800fcca:	2500      	movs	r5, #0
 800fccc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800fcd0:	f108 0301 	add.w	r3, r8, #1
 800fcd4:	931d      	str	r3, [sp, #116]	; 0x74
 800fcd6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fcda:	2b2b      	cmp	r3, #43	; 0x2b
 800fcdc:	d075      	beq.n	800fdca <_strtod_l+0x28a>
 800fcde:	2b2d      	cmp	r3, #45	; 0x2d
 800fce0:	d07b      	beq.n	800fdda <_strtod_l+0x29a>
 800fce2:	f04f 0c00 	mov.w	ip, #0
 800fce6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fcea:	2909      	cmp	r1, #9
 800fcec:	f240 8082 	bls.w	800fdf4 <_strtod_l+0x2b4>
 800fcf0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fcf4:	2600      	movs	r6, #0
 800fcf6:	e09d      	b.n	800fe34 <_strtod_l+0x2f4>
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	e7c4      	b.n	800fc86 <_strtod_l+0x146>
 800fcfc:	2f08      	cmp	r7, #8
 800fcfe:	bfd8      	it	le
 800fd00:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fd02:	f100 0001 	add.w	r0, r0, #1
 800fd06:	bfda      	itte	le
 800fd08:	fb02 3301 	mlale	r3, r2, r1, r3
 800fd0c:	9309      	strle	r3, [sp, #36]	; 0x24
 800fd0e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fd12:	3701      	adds	r7, #1
 800fd14:	901d      	str	r0, [sp, #116]	; 0x74
 800fd16:	e7bf      	b.n	800fc98 <_strtod_l+0x158>
 800fd18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd1a:	195a      	adds	r2, r3, r5
 800fd1c:	921d      	str	r2, [sp, #116]	; 0x74
 800fd1e:	5d5b      	ldrb	r3, [r3, r5]
 800fd20:	2f00      	cmp	r7, #0
 800fd22:	d037      	beq.n	800fd94 <_strtod_l+0x254>
 800fd24:	9007      	str	r0, [sp, #28]
 800fd26:	463d      	mov	r5, r7
 800fd28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800fd2c:	2a09      	cmp	r2, #9
 800fd2e:	d912      	bls.n	800fd56 <_strtod_l+0x216>
 800fd30:	2201      	movs	r2, #1
 800fd32:	e7c2      	b.n	800fcba <_strtod_l+0x17a>
 800fd34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd36:	1c5a      	adds	r2, r3, #1
 800fd38:	921d      	str	r2, [sp, #116]	; 0x74
 800fd3a:	785b      	ldrb	r3, [r3, #1]
 800fd3c:	3001      	adds	r0, #1
 800fd3e:	2b30      	cmp	r3, #48	; 0x30
 800fd40:	d0f8      	beq.n	800fd34 <_strtod_l+0x1f4>
 800fd42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800fd46:	2a08      	cmp	r2, #8
 800fd48:	f200 84db 	bhi.w	8010702 <_strtod_l+0xbc2>
 800fd4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fd4e:	9007      	str	r0, [sp, #28]
 800fd50:	2000      	movs	r0, #0
 800fd52:	920a      	str	r2, [sp, #40]	; 0x28
 800fd54:	4605      	mov	r5, r0
 800fd56:	3b30      	subs	r3, #48	; 0x30
 800fd58:	f100 0201 	add.w	r2, r0, #1
 800fd5c:	d014      	beq.n	800fd88 <_strtod_l+0x248>
 800fd5e:	9907      	ldr	r1, [sp, #28]
 800fd60:	4411      	add	r1, r2
 800fd62:	9107      	str	r1, [sp, #28]
 800fd64:	462a      	mov	r2, r5
 800fd66:	eb00 0e05 	add.w	lr, r0, r5
 800fd6a:	210a      	movs	r1, #10
 800fd6c:	4572      	cmp	r2, lr
 800fd6e:	d113      	bne.n	800fd98 <_strtod_l+0x258>
 800fd70:	182a      	adds	r2, r5, r0
 800fd72:	2a08      	cmp	r2, #8
 800fd74:	f105 0501 	add.w	r5, r5, #1
 800fd78:	4405      	add	r5, r0
 800fd7a:	dc1c      	bgt.n	800fdb6 <_strtod_l+0x276>
 800fd7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd7e:	220a      	movs	r2, #10
 800fd80:	fb02 3301 	mla	r3, r2, r1, r3
 800fd84:	9309      	str	r3, [sp, #36]	; 0x24
 800fd86:	2200      	movs	r2, #0
 800fd88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd8a:	1c59      	adds	r1, r3, #1
 800fd8c:	911d      	str	r1, [sp, #116]	; 0x74
 800fd8e:	785b      	ldrb	r3, [r3, #1]
 800fd90:	4610      	mov	r0, r2
 800fd92:	e7c9      	b.n	800fd28 <_strtod_l+0x1e8>
 800fd94:	4638      	mov	r0, r7
 800fd96:	e7d2      	b.n	800fd3e <_strtod_l+0x1fe>
 800fd98:	2a08      	cmp	r2, #8
 800fd9a:	dc04      	bgt.n	800fda6 <_strtod_l+0x266>
 800fd9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fd9e:	434e      	muls	r6, r1
 800fda0:	9609      	str	r6, [sp, #36]	; 0x24
 800fda2:	3201      	adds	r2, #1
 800fda4:	e7e2      	b.n	800fd6c <_strtod_l+0x22c>
 800fda6:	f102 0c01 	add.w	ip, r2, #1
 800fdaa:	f1bc 0f10 	cmp.w	ip, #16
 800fdae:	bfd8      	it	le
 800fdb0:	fb01 f909 	mulle.w	r9, r1, r9
 800fdb4:	e7f5      	b.n	800fda2 <_strtod_l+0x262>
 800fdb6:	2d10      	cmp	r5, #16
 800fdb8:	bfdc      	itt	le
 800fdba:	220a      	movle	r2, #10
 800fdbc:	fb02 3909 	mlale	r9, r2, r9, r3
 800fdc0:	e7e1      	b.n	800fd86 <_strtod_l+0x246>
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	9307      	str	r3, [sp, #28]
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	e77c      	b.n	800fcc4 <_strtod_l+0x184>
 800fdca:	f04f 0c00 	mov.w	ip, #0
 800fdce:	f108 0302 	add.w	r3, r8, #2
 800fdd2:	931d      	str	r3, [sp, #116]	; 0x74
 800fdd4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fdd8:	e785      	b.n	800fce6 <_strtod_l+0x1a6>
 800fdda:	f04f 0c01 	mov.w	ip, #1
 800fdde:	e7f6      	b.n	800fdce <_strtod_l+0x28e>
 800fde0:	08015ae0 	.word	0x08015ae0
 800fde4:	0801592c 	.word	0x0801592c
 800fde8:	7ff00000 	.word	0x7ff00000
 800fdec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fdee:	1c59      	adds	r1, r3, #1
 800fdf0:	911d      	str	r1, [sp, #116]	; 0x74
 800fdf2:	785b      	ldrb	r3, [r3, #1]
 800fdf4:	2b30      	cmp	r3, #48	; 0x30
 800fdf6:	d0f9      	beq.n	800fdec <_strtod_l+0x2ac>
 800fdf8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800fdfc:	2908      	cmp	r1, #8
 800fdfe:	f63f af79 	bhi.w	800fcf4 <_strtod_l+0x1b4>
 800fe02:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fe06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fe08:	9308      	str	r3, [sp, #32]
 800fe0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fe0c:	1c59      	adds	r1, r3, #1
 800fe0e:	911d      	str	r1, [sp, #116]	; 0x74
 800fe10:	785b      	ldrb	r3, [r3, #1]
 800fe12:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800fe16:	2e09      	cmp	r6, #9
 800fe18:	d937      	bls.n	800fe8a <_strtod_l+0x34a>
 800fe1a:	9e08      	ldr	r6, [sp, #32]
 800fe1c:	1b89      	subs	r1, r1, r6
 800fe1e:	2908      	cmp	r1, #8
 800fe20:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fe24:	dc02      	bgt.n	800fe2c <_strtod_l+0x2ec>
 800fe26:	4576      	cmp	r6, lr
 800fe28:	bfa8      	it	ge
 800fe2a:	4676      	movge	r6, lr
 800fe2c:	f1bc 0f00 	cmp.w	ip, #0
 800fe30:	d000      	beq.n	800fe34 <_strtod_l+0x2f4>
 800fe32:	4276      	negs	r6, r6
 800fe34:	2d00      	cmp	r5, #0
 800fe36:	d14f      	bne.n	800fed8 <_strtod_l+0x398>
 800fe38:	9904      	ldr	r1, [sp, #16]
 800fe3a:	4301      	orrs	r1, r0
 800fe3c:	f47f aec2 	bne.w	800fbc4 <_strtod_l+0x84>
 800fe40:	2a00      	cmp	r2, #0
 800fe42:	f47f aedb 	bne.w	800fbfc <_strtod_l+0xbc>
 800fe46:	2b69      	cmp	r3, #105	; 0x69
 800fe48:	d027      	beq.n	800fe9a <_strtod_l+0x35a>
 800fe4a:	dc24      	bgt.n	800fe96 <_strtod_l+0x356>
 800fe4c:	2b49      	cmp	r3, #73	; 0x49
 800fe4e:	d024      	beq.n	800fe9a <_strtod_l+0x35a>
 800fe50:	2b4e      	cmp	r3, #78	; 0x4e
 800fe52:	f47f aed3 	bne.w	800fbfc <_strtod_l+0xbc>
 800fe56:	499e      	ldr	r1, [pc, #632]	; (80100d0 <_strtod_l+0x590>)
 800fe58:	a81d      	add	r0, sp, #116	; 0x74
 800fe5a:	f002 f91b 	bl	8012094 <__match>
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	f43f aecc 	beq.w	800fbfc <_strtod_l+0xbc>
 800fe64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	2b28      	cmp	r3, #40	; 0x28
 800fe6a:	d12d      	bne.n	800fec8 <_strtod_l+0x388>
 800fe6c:	4999      	ldr	r1, [pc, #612]	; (80100d4 <_strtod_l+0x594>)
 800fe6e:	aa20      	add	r2, sp, #128	; 0x80
 800fe70:	a81d      	add	r0, sp, #116	; 0x74
 800fe72:	f002 f923 	bl	80120bc <__hexnan>
 800fe76:	2805      	cmp	r0, #5
 800fe78:	d126      	bne.n	800fec8 <_strtod_l+0x388>
 800fe7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe7c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800fe80:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fe84:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fe88:	e69c      	b.n	800fbc4 <_strtod_l+0x84>
 800fe8a:	210a      	movs	r1, #10
 800fe8c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fe90:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fe94:	e7b9      	b.n	800fe0a <_strtod_l+0x2ca>
 800fe96:	2b6e      	cmp	r3, #110	; 0x6e
 800fe98:	e7db      	b.n	800fe52 <_strtod_l+0x312>
 800fe9a:	498f      	ldr	r1, [pc, #572]	; (80100d8 <_strtod_l+0x598>)
 800fe9c:	a81d      	add	r0, sp, #116	; 0x74
 800fe9e:	f002 f8f9 	bl	8012094 <__match>
 800fea2:	2800      	cmp	r0, #0
 800fea4:	f43f aeaa 	beq.w	800fbfc <_strtod_l+0xbc>
 800fea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800feaa:	498c      	ldr	r1, [pc, #560]	; (80100dc <_strtod_l+0x59c>)
 800feac:	3b01      	subs	r3, #1
 800feae:	a81d      	add	r0, sp, #116	; 0x74
 800feb0:	931d      	str	r3, [sp, #116]	; 0x74
 800feb2:	f002 f8ef 	bl	8012094 <__match>
 800feb6:	b910      	cbnz	r0, 800febe <_strtod_l+0x37e>
 800feb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800feba:	3301      	adds	r3, #1
 800febc:	931d      	str	r3, [sp, #116]	; 0x74
 800febe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80100ec <_strtod_l+0x5ac>
 800fec2:	f04f 0a00 	mov.w	sl, #0
 800fec6:	e67d      	b.n	800fbc4 <_strtod_l+0x84>
 800fec8:	4885      	ldr	r0, [pc, #532]	; (80100e0 <_strtod_l+0x5a0>)
 800feca:	f003 fce1 	bl	8013890 <nan>
 800fece:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fed2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fed6:	e675      	b.n	800fbc4 <_strtod_l+0x84>
 800fed8:	9b07      	ldr	r3, [sp, #28]
 800feda:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fedc:	1af3      	subs	r3, r6, r3
 800fede:	2f00      	cmp	r7, #0
 800fee0:	bf08      	it	eq
 800fee2:	462f      	moveq	r7, r5
 800fee4:	2d10      	cmp	r5, #16
 800fee6:	9308      	str	r3, [sp, #32]
 800fee8:	46a8      	mov	r8, r5
 800feea:	bfa8      	it	ge
 800feec:	f04f 0810 	movge.w	r8, #16
 800fef0:	f7f0 fb18 	bl	8000524 <__aeabi_ui2d>
 800fef4:	2d09      	cmp	r5, #9
 800fef6:	4682      	mov	sl, r0
 800fef8:	468b      	mov	fp, r1
 800fefa:	dd13      	ble.n	800ff24 <_strtod_l+0x3e4>
 800fefc:	4b79      	ldr	r3, [pc, #484]	; (80100e4 <_strtod_l+0x5a4>)
 800fefe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ff02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ff06:	f7f0 fb87 	bl	8000618 <__aeabi_dmul>
 800ff0a:	4682      	mov	sl, r0
 800ff0c:	4648      	mov	r0, r9
 800ff0e:	468b      	mov	fp, r1
 800ff10:	f7f0 fb08 	bl	8000524 <__aeabi_ui2d>
 800ff14:	4602      	mov	r2, r0
 800ff16:	460b      	mov	r3, r1
 800ff18:	4650      	mov	r0, sl
 800ff1a:	4659      	mov	r1, fp
 800ff1c:	f7f0 f9c6 	bl	80002ac <__adddf3>
 800ff20:	4682      	mov	sl, r0
 800ff22:	468b      	mov	fp, r1
 800ff24:	2d0f      	cmp	r5, #15
 800ff26:	dc38      	bgt.n	800ff9a <_strtod_l+0x45a>
 800ff28:	9b08      	ldr	r3, [sp, #32]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	f43f ae4a 	beq.w	800fbc4 <_strtod_l+0x84>
 800ff30:	dd24      	ble.n	800ff7c <_strtod_l+0x43c>
 800ff32:	2b16      	cmp	r3, #22
 800ff34:	dc0b      	bgt.n	800ff4e <_strtod_l+0x40e>
 800ff36:	4d6b      	ldr	r5, [pc, #428]	; (80100e4 <_strtod_l+0x5a4>)
 800ff38:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800ff3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ff40:	4652      	mov	r2, sl
 800ff42:	465b      	mov	r3, fp
 800ff44:	f7f0 fb68 	bl	8000618 <__aeabi_dmul>
 800ff48:	4682      	mov	sl, r0
 800ff4a:	468b      	mov	fp, r1
 800ff4c:	e63a      	b.n	800fbc4 <_strtod_l+0x84>
 800ff4e:	9a08      	ldr	r2, [sp, #32]
 800ff50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ff54:	4293      	cmp	r3, r2
 800ff56:	db20      	blt.n	800ff9a <_strtod_l+0x45a>
 800ff58:	4c62      	ldr	r4, [pc, #392]	; (80100e4 <_strtod_l+0x5a4>)
 800ff5a:	f1c5 050f 	rsb	r5, r5, #15
 800ff5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ff62:	4652      	mov	r2, sl
 800ff64:	465b      	mov	r3, fp
 800ff66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff6a:	f7f0 fb55 	bl	8000618 <__aeabi_dmul>
 800ff6e:	9b08      	ldr	r3, [sp, #32]
 800ff70:	1b5d      	subs	r5, r3, r5
 800ff72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ff76:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ff7a:	e7e3      	b.n	800ff44 <_strtod_l+0x404>
 800ff7c:	9b08      	ldr	r3, [sp, #32]
 800ff7e:	3316      	adds	r3, #22
 800ff80:	db0b      	blt.n	800ff9a <_strtod_l+0x45a>
 800ff82:	9b07      	ldr	r3, [sp, #28]
 800ff84:	4a57      	ldr	r2, [pc, #348]	; (80100e4 <_strtod_l+0x5a4>)
 800ff86:	1b9e      	subs	r6, r3, r6
 800ff88:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ff8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff90:	4650      	mov	r0, sl
 800ff92:	4659      	mov	r1, fp
 800ff94:	f7f0 fc6a 	bl	800086c <__aeabi_ddiv>
 800ff98:	e7d6      	b.n	800ff48 <_strtod_l+0x408>
 800ff9a:	9b08      	ldr	r3, [sp, #32]
 800ff9c:	eba5 0808 	sub.w	r8, r5, r8
 800ffa0:	4498      	add	r8, r3
 800ffa2:	f1b8 0f00 	cmp.w	r8, #0
 800ffa6:	dd71      	ble.n	801008c <_strtod_l+0x54c>
 800ffa8:	f018 030f 	ands.w	r3, r8, #15
 800ffac:	d00a      	beq.n	800ffc4 <_strtod_l+0x484>
 800ffae:	494d      	ldr	r1, [pc, #308]	; (80100e4 <_strtod_l+0x5a4>)
 800ffb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ffb4:	4652      	mov	r2, sl
 800ffb6:	465b      	mov	r3, fp
 800ffb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffbc:	f7f0 fb2c 	bl	8000618 <__aeabi_dmul>
 800ffc0:	4682      	mov	sl, r0
 800ffc2:	468b      	mov	fp, r1
 800ffc4:	f038 080f 	bics.w	r8, r8, #15
 800ffc8:	d04d      	beq.n	8010066 <_strtod_l+0x526>
 800ffca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ffce:	dd22      	ble.n	8010016 <_strtod_l+0x4d6>
 800ffd0:	2500      	movs	r5, #0
 800ffd2:	462e      	mov	r6, r5
 800ffd4:	9509      	str	r5, [sp, #36]	; 0x24
 800ffd6:	9507      	str	r5, [sp, #28]
 800ffd8:	2322      	movs	r3, #34	; 0x22
 800ffda:	f8df b110 	ldr.w	fp, [pc, #272]	; 80100ec <_strtod_l+0x5ac>
 800ffde:	6023      	str	r3, [r4, #0]
 800ffe0:	f04f 0a00 	mov.w	sl, #0
 800ffe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	f43f adec 	beq.w	800fbc4 <_strtod_l+0x84>
 800ffec:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ffee:	4620      	mov	r0, r4
 800fff0:	f002 f9dc 	bl	80123ac <_Bfree>
 800fff4:	9907      	ldr	r1, [sp, #28]
 800fff6:	4620      	mov	r0, r4
 800fff8:	f002 f9d8 	bl	80123ac <_Bfree>
 800fffc:	4631      	mov	r1, r6
 800fffe:	4620      	mov	r0, r4
 8010000:	f002 f9d4 	bl	80123ac <_Bfree>
 8010004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010006:	4620      	mov	r0, r4
 8010008:	f002 f9d0 	bl	80123ac <_Bfree>
 801000c:	4629      	mov	r1, r5
 801000e:	4620      	mov	r0, r4
 8010010:	f002 f9cc 	bl	80123ac <_Bfree>
 8010014:	e5d6      	b.n	800fbc4 <_strtod_l+0x84>
 8010016:	2300      	movs	r3, #0
 8010018:	ea4f 1828 	mov.w	r8, r8, asr #4
 801001c:	4650      	mov	r0, sl
 801001e:	4659      	mov	r1, fp
 8010020:	4699      	mov	r9, r3
 8010022:	f1b8 0f01 	cmp.w	r8, #1
 8010026:	dc21      	bgt.n	801006c <_strtod_l+0x52c>
 8010028:	b10b      	cbz	r3, 801002e <_strtod_l+0x4ee>
 801002a:	4682      	mov	sl, r0
 801002c:	468b      	mov	fp, r1
 801002e:	4b2e      	ldr	r3, [pc, #184]	; (80100e8 <_strtod_l+0x5a8>)
 8010030:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010034:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010038:	4652      	mov	r2, sl
 801003a:	465b      	mov	r3, fp
 801003c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010040:	f7f0 faea 	bl	8000618 <__aeabi_dmul>
 8010044:	4b29      	ldr	r3, [pc, #164]	; (80100ec <_strtod_l+0x5ac>)
 8010046:	460a      	mov	r2, r1
 8010048:	400b      	ands	r3, r1
 801004a:	4929      	ldr	r1, [pc, #164]	; (80100f0 <_strtod_l+0x5b0>)
 801004c:	428b      	cmp	r3, r1
 801004e:	4682      	mov	sl, r0
 8010050:	d8be      	bhi.n	800ffd0 <_strtod_l+0x490>
 8010052:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010056:	428b      	cmp	r3, r1
 8010058:	bf86      	itte	hi
 801005a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80100f4 <_strtod_l+0x5b4>
 801005e:	f04f 3aff 	movhi.w	sl, #4294967295
 8010062:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010066:	2300      	movs	r3, #0
 8010068:	9304      	str	r3, [sp, #16]
 801006a:	e081      	b.n	8010170 <_strtod_l+0x630>
 801006c:	f018 0f01 	tst.w	r8, #1
 8010070:	d007      	beq.n	8010082 <_strtod_l+0x542>
 8010072:	4b1d      	ldr	r3, [pc, #116]	; (80100e8 <_strtod_l+0x5a8>)
 8010074:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007c:	f7f0 facc 	bl	8000618 <__aeabi_dmul>
 8010080:	2301      	movs	r3, #1
 8010082:	f109 0901 	add.w	r9, r9, #1
 8010086:	ea4f 0868 	mov.w	r8, r8, asr #1
 801008a:	e7ca      	b.n	8010022 <_strtod_l+0x4e2>
 801008c:	d0eb      	beq.n	8010066 <_strtod_l+0x526>
 801008e:	f1c8 0800 	rsb	r8, r8, #0
 8010092:	f018 020f 	ands.w	r2, r8, #15
 8010096:	d00a      	beq.n	80100ae <_strtod_l+0x56e>
 8010098:	4b12      	ldr	r3, [pc, #72]	; (80100e4 <_strtod_l+0x5a4>)
 801009a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801009e:	4650      	mov	r0, sl
 80100a0:	4659      	mov	r1, fp
 80100a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a6:	f7f0 fbe1 	bl	800086c <__aeabi_ddiv>
 80100aa:	4682      	mov	sl, r0
 80100ac:	468b      	mov	fp, r1
 80100ae:	ea5f 1828 	movs.w	r8, r8, asr #4
 80100b2:	d0d8      	beq.n	8010066 <_strtod_l+0x526>
 80100b4:	f1b8 0f1f 	cmp.w	r8, #31
 80100b8:	dd1e      	ble.n	80100f8 <_strtod_l+0x5b8>
 80100ba:	2500      	movs	r5, #0
 80100bc:	462e      	mov	r6, r5
 80100be:	9509      	str	r5, [sp, #36]	; 0x24
 80100c0:	9507      	str	r5, [sp, #28]
 80100c2:	2322      	movs	r3, #34	; 0x22
 80100c4:	f04f 0a00 	mov.w	sl, #0
 80100c8:	f04f 0b00 	mov.w	fp, #0
 80100cc:	6023      	str	r3, [r4, #0]
 80100ce:	e789      	b.n	800ffe4 <_strtod_l+0x4a4>
 80100d0:	08015901 	.word	0x08015901
 80100d4:	08015940 	.word	0x08015940
 80100d8:	080158f9 	.word	0x080158f9
 80100dc:	08015983 	.word	0x08015983
 80100e0:	08015cbb 	.word	0x08015cbb
 80100e4:	08015b80 	.word	0x08015b80
 80100e8:	08015b58 	.word	0x08015b58
 80100ec:	7ff00000 	.word	0x7ff00000
 80100f0:	7ca00000 	.word	0x7ca00000
 80100f4:	7fefffff 	.word	0x7fefffff
 80100f8:	f018 0310 	ands.w	r3, r8, #16
 80100fc:	bf18      	it	ne
 80100fe:	236a      	movne	r3, #106	; 0x6a
 8010100:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80104b8 <_strtod_l+0x978>
 8010104:	9304      	str	r3, [sp, #16]
 8010106:	4650      	mov	r0, sl
 8010108:	4659      	mov	r1, fp
 801010a:	2300      	movs	r3, #0
 801010c:	f018 0f01 	tst.w	r8, #1
 8010110:	d004      	beq.n	801011c <_strtod_l+0x5dc>
 8010112:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010116:	f7f0 fa7f 	bl	8000618 <__aeabi_dmul>
 801011a:	2301      	movs	r3, #1
 801011c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010120:	f109 0908 	add.w	r9, r9, #8
 8010124:	d1f2      	bne.n	801010c <_strtod_l+0x5cc>
 8010126:	b10b      	cbz	r3, 801012c <_strtod_l+0x5ec>
 8010128:	4682      	mov	sl, r0
 801012a:	468b      	mov	fp, r1
 801012c:	9b04      	ldr	r3, [sp, #16]
 801012e:	b1bb      	cbz	r3, 8010160 <_strtod_l+0x620>
 8010130:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010134:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010138:	2b00      	cmp	r3, #0
 801013a:	4659      	mov	r1, fp
 801013c:	dd10      	ble.n	8010160 <_strtod_l+0x620>
 801013e:	2b1f      	cmp	r3, #31
 8010140:	f340 8128 	ble.w	8010394 <_strtod_l+0x854>
 8010144:	2b34      	cmp	r3, #52	; 0x34
 8010146:	bfde      	ittt	le
 8010148:	3b20      	suble	r3, #32
 801014a:	f04f 32ff 	movle.w	r2, #4294967295
 801014e:	fa02 f303 	lslle.w	r3, r2, r3
 8010152:	f04f 0a00 	mov.w	sl, #0
 8010156:	bfcc      	ite	gt
 8010158:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801015c:	ea03 0b01 	andle.w	fp, r3, r1
 8010160:	2200      	movs	r2, #0
 8010162:	2300      	movs	r3, #0
 8010164:	4650      	mov	r0, sl
 8010166:	4659      	mov	r1, fp
 8010168:	f7f0 fcbe 	bl	8000ae8 <__aeabi_dcmpeq>
 801016c:	2800      	cmp	r0, #0
 801016e:	d1a4      	bne.n	80100ba <_strtod_l+0x57a>
 8010170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010172:	9300      	str	r3, [sp, #0]
 8010174:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010176:	462b      	mov	r3, r5
 8010178:	463a      	mov	r2, r7
 801017a:	4620      	mov	r0, r4
 801017c:	f002 f982 	bl	8012484 <__s2b>
 8010180:	9009      	str	r0, [sp, #36]	; 0x24
 8010182:	2800      	cmp	r0, #0
 8010184:	f43f af24 	beq.w	800ffd0 <_strtod_l+0x490>
 8010188:	9b07      	ldr	r3, [sp, #28]
 801018a:	1b9e      	subs	r6, r3, r6
 801018c:	9b08      	ldr	r3, [sp, #32]
 801018e:	2b00      	cmp	r3, #0
 8010190:	bfb4      	ite	lt
 8010192:	4633      	movlt	r3, r6
 8010194:	2300      	movge	r3, #0
 8010196:	9310      	str	r3, [sp, #64]	; 0x40
 8010198:	9b08      	ldr	r3, [sp, #32]
 801019a:	2500      	movs	r5, #0
 801019c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80101a0:	9318      	str	r3, [sp, #96]	; 0x60
 80101a2:	462e      	mov	r6, r5
 80101a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101a6:	4620      	mov	r0, r4
 80101a8:	6859      	ldr	r1, [r3, #4]
 80101aa:	f002 f8bf 	bl	801232c <_Balloc>
 80101ae:	9007      	str	r0, [sp, #28]
 80101b0:	2800      	cmp	r0, #0
 80101b2:	f43f af11 	beq.w	800ffd8 <_strtod_l+0x498>
 80101b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101b8:	691a      	ldr	r2, [r3, #16]
 80101ba:	3202      	adds	r2, #2
 80101bc:	f103 010c 	add.w	r1, r3, #12
 80101c0:	0092      	lsls	r2, r2, #2
 80101c2:	300c      	adds	r0, #12
 80101c4:	f7fe fc08 	bl	800e9d8 <memcpy>
 80101c8:	ec4b ab10 	vmov	d0, sl, fp
 80101cc:	aa20      	add	r2, sp, #128	; 0x80
 80101ce:	a91f      	add	r1, sp, #124	; 0x7c
 80101d0:	4620      	mov	r0, r4
 80101d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80101d6:	f002 fc91 	bl	8012afc <__d2b>
 80101da:	901e      	str	r0, [sp, #120]	; 0x78
 80101dc:	2800      	cmp	r0, #0
 80101de:	f43f aefb 	beq.w	800ffd8 <_strtod_l+0x498>
 80101e2:	2101      	movs	r1, #1
 80101e4:	4620      	mov	r0, r4
 80101e6:	f002 f9e7 	bl	80125b8 <__i2b>
 80101ea:	4606      	mov	r6, r0
 80101ec:	2800      	cmp	r0, #0
 80101ee:	f43f aef3 	beq.w	800ffd8 <_strtod_l+0x498>
 80101f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80101f4:	9904      	ldr	r1, [sp, #16]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	bfab      	itete	ge
 80101fa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80101fc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80101fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010200:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8010204:	bfac      	ite	ge
 8010206:	eb03 0902 	addge.w	r9, r3, r2
 801020a:	1ad7      	sublt	r7, r2, r3
 801020c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801020e:	eba3 0801 	sub.w	r8, r3, r1
 8010212:	4490      	add	r8, r2
 8010214:	4ba3      	ldr	r3, [pc, #652]	; (80104a4 <_strtod_l+0x964>)
 8010216:	f108 38ff 	add.w	r8, r8, #4294967295
 801021a:	4598      	cmp	r8, r3
 801021c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010220:	f280 80cc 	bge.w	80103bc <_strtod_l+0x87c>
 8010224:	eba3 0308 	sub.w	r3, r3, r8
 8010228:	2b1f      	cmp	r3, #31
 801022a:	eba2 0203 	sub.w	r2, r2, r3
 801022e:	f04f 0101 	mov.w	r1, #1
 8010232:	f300 80b6 	bgt.w	80103a2 <_strtod_l+0x862>
 8010236:	fa01 f303 	lsl.w	r3, r1, r3
 801023a:	9311      	str	r3, [sp, #68]	; 0x44
 801023c:	2300      	movs	r3, #0
 801023e:	930c      	str	r3, [sp, #48]	; 0x30
 8010240:	eb09 0802 	add.w	r8, r9, r2
 8010244:	9b04      	ldr	r3, [sp, #16]
 8010246:	45c1      	cmp	r9, r8
 8010248:	4417      	add	r7, r2
 801024a:	441f      	add	r7, r3
 801024c:	464b      	mov	r3, r9
 801024e:	bfa8      	it	ge
 8010250:	4643      	movge	r3, r8
 8010252:	42bb      	cmp	r3, r7
 8010254:	bfa8      	it	ge
 8010256:	463b      	movge	r3, r7
 8010258:	2b00      	cmp	r3, #0
 801025a:	bfc2      	ittt	gt
 801025c:	eba8 0803 	subgt.w	r8, r8, r3
 8010260:	1aff      	subgt	r7, r7, r3
 8010262:	eba9 0903 	subgt.w	r9, r9, r3
 8010266:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010268:	2b00      	cmp	r3, #0
 801026a:	dd17      	ble.n	801029c <_strtod_l+0x75c>
 801026c:	4631      	mov	r1, r6
 801026e:	461a      	mov	r2, r3
 8010270:	4620      	mov	r0, r4
 8010272:	f002 fa5d 	bl	8012730 <__pow5mult>
 8010276:	4606      	mov	r6, r0
 8010278:	2800      	cmp	r0, #0
 801027a:	f43f aead 	beq.w	800ffd8 <_strtod_l+0x498>
 801027e:	4601      	mov	r1, r0
 8010280:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010282:	4620      	mov	r0, r4
 8010284:	f002 f9ae 	bl	80125e4 <__multiply>
 8010288:	900f      	str	r0, [sp, #60]	; 0x3c
 801028a:	2800      	cmp	r0, #0
 801028c:	f43f aea4 	beq.w	800ffd8 <_strtod_l+0x498>
 8010290:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010292:	4620      	mov	r0, r4
 8010294:	f002 f88a 	bl	80123ac <_Bfree>
 8010298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801029a:	931e      	str	r3, [sp, #120]	; 0x78
 801029c:	f1b8 0f00 	cmp.w	r8, #0
 80102a0:	f300 8091 	bgt.w	80103c6 <_strtod_l+0x886>
 80102a4:	9b08      	ldr	r3, [sp, #32]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	dd08      	ble.n	80102bc <_strtod_l+0x77c>
 80102aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80102ac:	9907      	ldr	r1, [sp, #28]
 80102ae:	4620      	mov	r0, r4
 80102b0:	f002 fa3e 	bl	8012730 <__pow5mult>
 80102b4:	9007      	str	r0, [sp, #28]
 80102b6:	2800      	cmp	r0, #0
 80102b8:	f43f ae8e 	beq.w	800ffd8 <_strtod_l+0x498>
 80102bc:	2f00      	cmp	r7, #0
 80102be:	dd08      	ble.n	80102d2 <_strtod_l+0x792>
 80102c0:	9907      	ldr	r1, [sp, #28]
 80102c2:	463a      	mov	r2, r7
 80102c4:	4620      	mov	r0, r4
 80102c6:	f002 fa8d 	bl	80127e4 <__lshift>
 80102ca:	9007      	str	r0, [sp, #28]
 80102cc:	2800      	cmp	r0, #0
 80102ce:	f43f ae83 	beq.w	800ffd8 <_strtod_l+0x498>
 80102d2:	f1b9 0f00 	cmp.w	r9, #0
 80102d6:	dd08      	ble.n	80102ea <_strtod_l+0x7aa>
 80102d8:	4631      	mov	r1, r6
 80102da:	464a      	mov	r2, r9
 80102dc:	4620      	mov	r0, r4
 80102de:	f002 fa81 	bl	80127e4 <__lshift>
 80102e2:	4606      	mov	r6, r0
 80102e4:	2800      	cmp	r0, #0
 80102e6:	f43f ae77 	beq.w	800ffd8 <_strtod_l+0x498>
 80102ea:	9a07      	ldr	r2, [sp, #28]
 80102ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80102ee:	4620      	mov	r0, r4
 80102f0:	f002 fb00 	bl	80128f4 <__mdiff>
 80102f4:	4605      	mov	r5, r0
 80102f6:	2800      	cmp	r0, #0
 80102f8:	f43f ae6e 	beq.w	800ffd8 <_strtod_l+0x498>
 80102fc:	68c3      	ldr	r3, [r0, #12]
 80102fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8010300:	2300      	movs	r3, #0
 8010302:	60c3      	str	r3, [r0, #12]
 8010304:	4631      	mov	r1, r6
 8010306:	f002 fad9 	bl	80128bc <__mcmp>
 801030a:	2800      	cmp	r0, #0
 801030c:	da65      	bge.n	80103da <_strtod_l+0x89a>
 801030e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010310:	ea53 030a 	orrs.w	r3, r3, sl
 8010314:	f040 8087 	bne.w	8010426 <_strtod_l+0x8e6>
 8010318:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801031c:	2b00      	cmp	r3, #0
 801031e:	f040 8082 	bne.w	8010426 <_strtod_l+0x8e6>
 8010322:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010326:	0d1b      	lsrs	r3, r3, #20
 8010328:	051b      	lsls	r3, r3, #20
 801032a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801032e:	d97a      	bls.n	8010426 <_strtod_l+0x8e6>
 8010330:	696b      	ldr	r3, [r5, #20]
 8010332:	b913      	cbnz	r3, 801033a <_strtod_l+0x7fa>
 8010334:	692b      	ldr	r3, [r5, #16]
 8010336:	2b01      	cmp	r3, #1
 8010338:	dd75      	ble.n	8010426 <_strtod_l+0x8e6>
 801033a:	4629      	mov	r1, r5
 801033c:	2201      	movs	r2, #1
 801033e:	4620      	mov	r0, r4
 8010340:	f002 fa50 	bl	80127e4 <__lshift>
 8010344:	4631      	mov	r1, r6
 8010346:	4605      	mov	r5, r0
 8010348:	f002 fab8 	bl	80128bc <__mcmp>
 801034c:	2800      	cmp	r0, #0
 801034e:	dd6a      	ble.n	8010426 <_strtod_l+0x8e6>
 8010350:	9904      	ldr	r1, [sp, #16]
 8010352:	4a55      	ldr	r2, [pc, #340]	; (80104a8 <_strtod_l+0x968>)
 8010354:	465b      	mov	r3, fp
 8010356:	2900      	cmp	r1, #0
 8010358:	f000 8085 	beq.w	8010466 <_strtod_l+0x926>
 801035c:	ea02 010b 	and.w	r1, r2, fp
 8010360:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010364:	dc7f      	bgt.n	8010466 <_strtod_l+0x926>
 8010366:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801036a:	f77f aeaa 	ble.w	80100c2 <_strtod_l+0x582>
 801036e:	4a4f      	ldr	r2, [pc, #316]	; (80104ac <_strtod_l+0x96c>)
 8010370:	2300      	movs	r3, #0
 8010372:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010376:	4650      	mov	r0, sl
 8010378:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801037c:	4659      	mov	r1, fp
 801037e:	f7f0 f94b 	bl	8000618 <__aeabi_dmul>
 8010382:	460b      	mov	r3, r1
 8010384:	4303      	orrs	r3, r0
 8010386:	bf08      	it	eq
 8010388:	2322      	moveq	r3, #34	; 0x22
 801038a:	4682      	mov	sl, r0
 801038c:	468b      	mov	fp, r1
 801038e:	bf08      	it	eq
 8010390:	6023      	streq	r3, [r4, #0]
 8010392:	e62b      	b.n	800ffec <_strtod_l+0x4ac>
 8010394:	f04f 32ff 	mov.w	r2, #4294967295
 8010398:	fa02 f303 	lsl.w	r3, r2, r3
 801039c:	ea03 0a0a 	and.w	sl, r3, sl
 80103a0:	e6de      	b.n	8010160 <_strtod_l+0x620>
 80103a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80103a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80103aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80103ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80103b2:	fa01 f308 	lsl.w	r3, r1, r8
 80103b6:	930c      	str	r3, [sp, #48]	; 0x30
 80103b8:	9111      	str	r1, [sp, #68]	; 0x44
 80103ba:	e741      	b.n	8010240 <_strtod_l+0x700>
 80103bc:	2300      	movs	r3, #0
 80103be:	930c      	str	r3, [sp, #48]	; 0x30
 80103c0:	2301      	movs	r3, #1
 80103c2:	9311      	str	r3, [sp, #68]	; 0x44
 80103c4:	e73c      	b.n	8010240 <_strtod_l+0x700>
 80103c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80103c8:	4642      	mov	r2, r8
 80103ca:	4620      	mov	r0, r4
 80103cc:	f002 fa0a 	bl	80127e4 <__lshift>
 80103d0:	901e      	str	r0, [sp, #120]	; 0x78
 80103d2:	2800      	cmp	r0, #0
 80103d4:	f47f af66 	bne.w	80102a4 <_strtod_l+0x764>
 80103d8:	e5fe      	b.n	800ffd8 <_strtod_l+0x498>
 80103da:	465f      	mov	r7, fp
 80103dc:	d16e      	bne.n	80104bc <_strtod_l+0x97c>
 80103de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80103e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80103e4:	b342      	cbz	r2, 8010438 <_strtod_l+0x8f8>
 80103e6:	4a32      	ldr	r2, [pc, #200]	; (80104b0 <_strtod_l+0x970>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d128      	bne.n	801043e <_strtod_l+0x8fe>
 80103ec:	9b04      	ldr	r3, [sp, #16]
 80103ee:	4650      	mov	r0, sl
 80103f0:	b1eb      	cbz	r3, 801042e <_strtod_l+0x8ee>
 80103f2:	4a2d      	ldr	r2, [pc, #180]	; (80104a8 <_strtod_l+0x968>)
 80103f4:	403a      	ands	r2, r7
 80103f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80103fa:	f04f 31ff 	mov.w	r1, #4294967295
 80103fe:	d819      	bhi.n	8010434 <_strtod_l+0x8f4>
 8010400:	0d12      	lsrs	r2, r2, #20
 8010402:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010406:	fa01 f303 	lsl.w	r3, r1, r3
 801040a:	4298      	cmp	r0, r3
 801040c:	d117      	bne.n	801043e <_strtod_l+0x8fe>
 801040e:	4b29      	ldr	r3, [pc, #164]	; (80104b4 <_strtod_l+0x974>)
 8010410:	429f      	cmp	r7, r3
 8010412:	d102      	bne.n	801041a <_strtod_l+0x8da>
 8010414:	3001      	adds	r0, #1
 8010416:	f43f addf 	beq.w	800ffd8 <_strtod_l+0x498>
 801041a:	4b23      	ldr	r3, [pc, #140]	; (80104a8 <_strtod_l+0x968>)
 801041c:	403b      	ands	r3, r7
 801041e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010422:	f04f 0a00 	mov.w	sl, #0
 8010426:	9b04      	ldr	r3, [sp, #16]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d1a0      	bne.n	801036e <_strtod_l+0x82e>
 801042c:	e5de      	b.n	800ffec <_strtod_l+0x4ac>
 801042e:	f04f 33ff 	mov.w	r3, #4294967295
 8010432:	e7ea      	b.n	801040a <_strtod_l+0x8ca>
 8010434:	460b      	mov	r3, r1
 8010436:	e7e8      	b.n	801040a <_strtod_l+0x8ca>
 8010438:	ea53 030a 	orrs.w	r3, r3, sl
 801043c:	d088      	beq.n	8010350 <_strtod_l+0x810>
 801043e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010440:	b1db      	cbz	r3, 801047a <_strtod_l+0x93a>
 8010442:	423b      	tst	r3, r7
 8010444:	d0ef      	beq.n	8010426 <_strtod_l+0x8e6>
 8010446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010448:	9a04      	ldr	r2, [sp, #16]
 801044a:	4650      	mov	r0, sl
 801044c:	4659      	mov	r1, fp
 801044e:	b1c3      	cbz	r3, 8010482 <_strtod_l+0x942>
 8010450:	f7ff fb58 	bl	800fb04 <sulp>
 8010454:	4602      	mov	r2, r0
 8010456:	460b      	mov	r3, r1
 8010458:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801045c:	f7ef ff26 	bl	80002ac <__adddf3>
 8010460:	4682      	mov	sl, r0
 8010462:	468b      	mov	fp, r1
 8010464:	e7df      	b.n	8010426 <_strtod_l+0x8e6>
 8010466:	4013      	ands	r3, r2
 8010468:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801046c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010470:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010474:	f04f 3aff 	mov.w	sl, #4294967295
 8010478:	e7d5      	b.n	8010426 <_strtod_l+0x8e6>
 801047a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801047c:	ea13 0f0a 	tst.w	r3, sl
 8010480:	e7e0      	b.n	8010444 <_strtod_l+0x904>
 8010482:	f7ff fb3f 	bl	800fb04 <sulp>
 8010486:	4602      	mov	r2, r0
 8010488:	460b      	mov	r3, r1
 801048a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801048e:	f7ef ff0b 	bl	80002a8 <__aeabi_dsub>
 8010492:	2200      	movs	r2, #0
 8010494:	2300      	movs	r3, #0
 8010496:	4682      	mov	sl, r0
 8010498:	468b      	mov	fp, r1
 801049a:	f7f0 fb25 	bl	8000ae8 <__aeabi_dcmpeq>
 801049e:	2800      	cmp	r0, #0
 80104a0:	d0c1      	beq.n	8010426 <_strtod_l+0x8e6>
 80104a2:	e60e      	b.n	80100c2 <_strtod_l+0x582>
 80104a4:	fffffc02 	.word	0xfffffc02
 80104a8:	7ff00000 	.word	0x7ff00000
 80104ac:	39500000 	.word	0x39500000
 80104b0:	000fffff 	.word	0x000fffff
 80104b4:	7fefffff 	.word	0x7fefffff
 80104b8:	08015958 	.word	0x08015958
 80104bc:	4631      	mov	r1, r6
 80104be:	4628      	mov	r0, r5
 80104c0:	f002 fb78 	bl	8012bb4 <__ratio>
 80104c4:	ec59 8b10 	vmov	r8, r9, d0
 80104c8:	ee10 0a10 	vmov	r0, s0
 80104cc:	2200      	movs	r2, #0
 80104ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80104d2:	4649      	mov	r1, r9
 80104d4:	f7f0 fb1c 	bl	8000b10 <__aeabi_dcmple>
 80104d8:	2800      	cmp	r0, #0
 80104da:	d07c      	beq.n	80105d6 <_strtod_l+0xa96>
 80104dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d04c      	beq.n	801057c <_strtod_l+0xa3c>
 80104e2:	4b95      	ldr	r3, [pc, #596]	; (8010738 <_strtod_l+0xbf8>)
 80104e4:	2200      	movs	r2, #0
 80104e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80104ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010738 <_strtod_l+0xbf8>
 80104ee:	f04f 0800 	mov.w	r8, #0
 80104f2:	4b92      	ldr	r3, [pc, #584]	; (801073c <_strtod_l+0xbfc>)
 80104f4:	403b      	ands	r3, r7
 80104f6:	9311      	str	r3, [sp, #68]	; 0x44
 80104f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80104fa:	4b91      	ldr	r3, [pc, #580]	; (8010740 <_strtod_l+0xc00>)
 80104fc:	429a      	cmp	r2, r3
 80104fe:	f040 80b2 	bne.w	8010666 <_strtod_l+0xb26>
 8010502:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801050a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801050e:	ec4b ab10 	vmov	d0, sl, fp
 8010512:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8010516:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801051a:	f002 fa73 	bl	8012a04 <__ulp>
 801051e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010522:	ec53 2b10 	vmov	r2, r3, d0
 8010526:	f7f0 f877 	bl	8000618 <__aeabi_dmul>
 801052a:	4652      	mov	r2, sl
 801052c:	465b      	mov	r3, fp
 801052e:	f7ef febd 	bl	80002ac <__adddf3>
 8010532:	460b      	mov	r3, r1
 8010534:	4981      	ldr	r1, [pc, #516]	; (801073c <_strtod_l+0xbfc>)
 8010536:	4a83      	ldr	r2, [pc, #524]	; (8010744 <_strtod_l+0xc04>)
 8010538:	4019      	ands	r1, r3
 801053a:	4291      	cmp	r1, r2
 801053c:	4682      	mov	sl, r0
 801053e:	d95e      	bls.n	80105fe <_strtod_l+0xabe>
 8010540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010542:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010546:	4293      	cmp	r3, r2
 8010548:	d103      	bne.n	8010552 <_strtod_l+0xa12>
 801054a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801054c:	3301      	adds	r3, #1
 801054e:	f43f ad43 	beq.w	800ffd8 <_strtod_l+0x498>
 8010552:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8010750 <_strtod_l+0xc10>
 8010556:	f04f 3aff 	mov.w	sl, #4294967295
 801055a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801055c:	4620      	mov	r0, r4
 801055e:	f001 ff25 	bl	80123ac <_Bfree>
 8010562:	9907      	ldr	r1, [sp, #28]
 8010564:	4620      	mov	r0, r4
 8010566:	f001 ff21 	bl	80123ac <_Bfree>
 801056a:	4631      	mov	r1, r6
 801056c:	4620      	mov	r0, r4
 801056e:	f001 ff1d 	bl	80123ac <_Bfree>
 8010572:	4629      	mov	r1, r5
 8010574:	4620      	mov	r0, r4
 8010576:	f001 ff19 	bl	80123ac <_Bfree>
 801057a:	e613      	b.n	80101a4 <_strtod_l+0x664>
 801057c:	f1ba 0f00 	cmp.w	sl, #0
 8010580:	d11b      	bne.n	80105ba <_strtod_l+0xa7a>
 8010582:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010586:	b9f3      	cbnz	r3, 80105c6 <_strtod_l+0xa86>
 8010588:	4b6b      	ldr	r3, [pc, #428]	; (8010738 <_strtod_l+0xbf8>)
 801058a:	2200      	movs	r2, #0
 801058c:	4640      	mov	r0, r8
 801058e:	4649      	mov	r1, r9
 8010590:	f7f0 fab4 	bl	8000afc <__aeabi_dcmplt>
 8010594:	b9d0      	cbnz	r0, 80105cc <_strtod_l+0xa8c>
 8010596:	4640      	mov	r0, r8
 8010598:	4649      	mov	r1, r9
 801059a:	4b6b      	ldr	r3, [pc, #428]	; (8010748 <_strtod_l+0xc08>)
 801059c:	2200      	movs	r2, #0
 801059e:	f7f0 f83b 	bl	8000618 <__aeabi_dmul>
 80105a2:	4680      	mov	r8, r0
 80105a4:	4689      	mov	r9, r1
 80105a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80105aa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80105ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80105b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80105b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80105b8:	e79b      	b.n	80104f2 <_strtod_l+0x9b2>
 80105ba:	f1ba 0f01 	cmp.w	sl, #1
 80105be:	d102      	bne.n	80105c6 <_strtod_l+0xa86>
 80105c0:	2f00      	cmp	r7, #0
 80105c2:	f43f ad7e 	beq.w	80100c2 <_strtod_l+0x582>
 80105c6:	4b61      	ldr	r3, [pc, #388]	; (801074c <_strtod_l+0xc0c>)
 80105c8:	2200      	movs	r2, #0
 80105ca:	e78c      	b.n	80104e6 <_strtod_l+0x9a6>
 80105cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010748 <_strtod_l+0xc08>
 80105d0:	f04f 0800 	mov.w	r8, #0
 80105d4:	e7e7      	b.n	80105a6 <_strtod_l+0xa66>
 80105d6:	4b5c      	ldr	r3, [pc, #368]	; (8010748 <_strtod_l+0xc08>)
 80105d8:	4640      	mov	r0, r8
 80105da:	4649      	mov	r1, r9
 80105dc:	2200      	movs	r2, #0
 80105de:	f7f0 f81b 	bl	8000618 <__aeabi_dmul>
 80105e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80105e4:	4680      	mov	r8, r0
 80105e6:	4689      	mov	r9, r1
 80105e8:	b933      	cbnz	r3, 80105f8 <_strtod_l+0xab8>
 80105ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80105ee:	9012      	str	r0, [sp, #72]	; 0x48
 80105f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80105f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80105f6:	e7dd      	b.n	80105b4 <_strtod_l+0xa74>
 80105f8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80105fc:	e7f9      	b.n	80105f2 <_strtod_l+0xab2>
 80105fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010602:	9b04      	ldr	r3, [sp, #16]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d1a8      	bne.n	801055a <_strtod_l+0xa1a>
 8010608:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801060c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801060e:	0d1b      	lsrs	r3, r3, #20
 8010610:	051b      	lsls	r3, r3, #20
 8010612:	429a      	cmp	r2, r3
 8010614:	d1a1      	bne.n	801055a <_strtod_l+0xa1a>
 8010616:	4640      	mov	r0, r8
 8010618:	4649      	mov	r1, r9
 801061a:	f7f0 fb5d 	bl	8000cd8 <__aeabi_d2lz>
 801061e:	f7ef ffcd 	bl	80005bc <__aeabi_l2d>
 8010622:	4602      	mov	r2, r0
 8010624:	460b      	mov	r3, r1
 8010626:	4640      	mov	r0, r8
 8010628:	4649      	mov	r1, r9
 801062a:	f7ef fe3d 	bl	80002a8 <__aeabi_dsub>
 801062e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010634:	ea43 030a 	orr.w	r3, r3, sl
 8010638:	4313      	orrs	r3, r2
 801063a:	4680      	mov	r8, r0
 801063c:	4689      	mov	r9, r1
 801063e:	d053      	beq.n	80106e8 <_strtod_l+0xba8>
 8010640:	a335      	add	r3, pc, #212	; (adr r3, 8010718 <_strtod_l+0xbd8>)
 8010642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010646:	f7f0 fa59 	bl	8000afc <__aeabi_dcmplt>
 801064a:	2800      	cmp	r0, #0
 801064c:	f47f acce 	bne.w	800ffec <_strtod_l+0x4ac>
 8010650:	a333      	add	r3, pc, #204	; (adr r3, 8010720 <_strtod_l+0xbe0>)
 8010652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010656:	4640      	mov	r0, r8
 8010658:	4649      	mov	r1, r9
 801065a:	f7f0 fa6d 	bl	8000b38 <__aeabi_dcmpgt>
 801065e:	2800      	cmp	r0, #0
 8010660:	f43f af7b 	beq.w	801055a <_strtod_l+0xa1a>
 8010664:	e4c2      	b.n	800ffec <_strtod_l+0x4ac>
 8010666:	9b04      	ldr	r3, [sp, #16]
 8010668:	b333      	cbz	r3, 80106b8 <_strtod_l+0xb78>
 801066a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801066c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010670:	d822      	bhi.n	80106b8 <_strtod_l+0xb78>
 8010672:	a32d      	add	r3, pc, #180	; (adr r3, 8010728 <_strtod_l+0xbe8>)
 8010674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010678:	4640      	mov	r0, r8
 801067a:	4649      	mov	r1, r9
 801067c:	f7f0 fa48 	bl	8000b10 <__aeabi_dcmple>
 8010680:	b1a0      	cbz	r0, 80106ac <_strtod_l+0xb6c>
 8010682:	4649      	mov	r1, r9
 8010684:	4640      	mov	r0, r8
 8010686:	f7f0 fa9f 	bl	8000bc8 <__aeabi_d2uiz>
 801068a:	2801      	cmp	r0, #1
 801068c:	bf38      	it	cc
 801068e:	2001      	movcc	r0, #1
 8010690:	f7ef ff48 	bl	8000524 <__aeabi_ui2d>
 8010694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010696:	4680      	mov	r8, r0
 8010698:	4689      	mov	r9, r1
 801069a:	bb13      	cbnz	r3, 80106e2 <_strtod_l+0xba2>
 801069c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80106a0:	9014      	str	r0, [sp, #80]	; 0x50
 80106a2:	9315      	str	r3, [sp, #84]	; 0x54
 80106a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80106a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80106ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80106b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80106b4:	1a9b      	subs	r3, r3, r2
 80106b6:	930d      	str	r3, [sp, #52]	; 0x34
 80106b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80106bc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80106c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80106c4:	f002 f99e 	bl	8012a04 <__ulp>
 80106c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80106cc:	ec53 2b10 	vmov	r2, r3, d0
 80106d0:	f7ef ffa2 	bl	8000618 <__aeabi_dmul>
 80106d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80106d8:	f7ef fde8 	bl	80002ac <__adddf3>
 80106dc:	4682      	mov	sl, r0
 80106de:	468b      	mov	fp, r1
 80106e0:	e78f      	b.n	8010602 <_strtod_l+0xac2>
 80106e2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80106e6:	e7dd      	b.n	80106a4 <_strtod_l+0xb64>
 80106e8:	a311      	add	r3, pc, #68	; (adr r3, 8010730 <_strtod_l+0xbf0>)
 80106ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ee:	f7f0 fa05 	bl	8000afc <__aeabi_dcmplt>
 80106f2:	e7b4      	b.n	801065e <_strtod_l+0xb1e>
 80106f4:	2300      	movs	r3, #0
 80106f6:	930e      	str	r3, [sp, #56]	; 0x38
 80106f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80106fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80106fc:	6013      	str	r3, [r2, #0]
 80106fe:	f7ff ba65 	b.w	800fbcc <_strtod_l+0x8c>
 8010702:	2b65      	cmp	r3, #101	; 0x65
 8010704:	f43f ab5d 	beq.w	800fdc2 <_strtod_l+0x282>
 8010708:	2b45      	cmp	r3, #69	; 0x45
 801070a:	f43f ab5a 	beq.w	800fdc2 <_strtod_l+0x282>
 801070e:	2201      	movs	r2, #1
 8010710:	f7ff bb92 	b.w	800fe38 <_strtod_l+0x2f8>
 8010714:	f3af 8000 	nop.w
 8010718:	94a03595 	.word	0x94a03595
 801071c:	3fdfffff 	.word	0x3fdfffff
 8010720:	35afe535 	.word	0x35afe535
 8010724:	3fe00000 	.word	0x3fe00000
 8010728:	ffc00000 	.word	0xffc00000
 801072c:	41dfffff 	.word	0x41dfffff
 8010730:	94a03595 	.word	0x94a03595
 8010734:	3fcfffff 	.word	0x3fcfffff
 8010738:	3ff00000 	.word	0x3ff00000
 801073c:	7ff00000 	.word	0x7ff00000
 8010740:	7fe00000 	.word	0x7fe00000
 8010744:	7c9fffff 	.word	0x7c9fffff
 8010748:	3fe00000 	.word	0x3fe00000
 801074c:	bff00000 	.word	0xbff00000
 8010750:	7fefffff 	.word	0x7fefffff

08010754 <_strtod_r>:
 8010754:	4b01      	ldr	r3, [pc, #4]	; (801075c <_strtod_r+0x8>)
 8010756:	f7ff b9f3 	b.w	800fb40 <_strtod_l>
 801075a:	bf00      	nop
 801075c:	20000090 	.word	0x20000090

08010760 <_strtol_l.isra.0>:
 8010760:	2b01      	cmp	r3, #1
 8010762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010766:	d001      	beq.n	801076c <_strtol_l.isra.0+0xc>
 8010768:	2b24      	cmp	r3, #36	; 0x24
 801076a:	d906      	bls.n	801077a <_strtol_l.isra.0+0x1a>
 801076c:	f7fe f902 	bl	800e974 <__errno>
 8010770:	2316      	movs	r3, #22
 8010772:	6003      	str	r3, [r0, #0]
 8010774:	2000      	movs	r0, #0
 8010776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801077a:	4f3a      	ldr	r7, [pc, #232]	; (8010864 <_strtol_l.isra.0+0x104>)
 801077c:	468e      	mov	lr, r1
 801077e:	4676      	mov	r6, lr
 8010780:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010784:	5de5      	ldrb	r5, [r4, r7]
 8010786:	f015 0508 	ands.w	r5, r5, #8
 801078a:	d1f8      	bne.n	801077e <_strtol_l.isra.0+0x1e>
 801078c:	2c2d      	cmp	r4, #45	; 0x2d
 801078e:	d134      	bne.n	80107fa <_strtol_l.isra.0+0x9a>
 8010790:	f89e 4000 	ldrb.w	r4, [lr]
 8010794:	f04f 0801 	mov.w	r8, #1
 8010798:	f106 0e02 	add.w	lr, r6, #2
 801079c:	2b00      	cmp	r3, #0
 801079e:	d05c      	beq.n	801085a <_strtol_l.isra.0+0xfa>
 80107a0:	2b10      	cmp	r3, #16
 80107a2:	d10c      	bne.n	80107be <_strtol_l.isra.0+0x5e>
 80107a4:	2c30      	cmp	r4, #48	; 0x30
 80107a6:	d10a      	bne.n	80107be <_strtol_l.isra.0+0x5e>
 80107a8:	f89e 4000 	ldrb.w	r4, [lr]
 80107ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80107b0:	2c58      	cmp	r4, #88	; 0x58
 80107b2:	d14d      	bne.n	8010850 <_strtol_l.isra.0+0xf0>
 80107b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80107b8:	2310      	movs	r3, #16
 80107ba:	f10e 0e02 	add.w	lr, lr, #2
 80107be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80107c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80107c6:	2600      	movs	r6, #0
 80107c8:	fbbc f9f3 	udiv	r9, ip, r3
 80107cc:	4635      	mov	r5, r6
 80107ce:	fb03 ca19 	mls	sl, r3, r9, ip
 80107d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80107d6:	2f09      	cmp	r7, #9
 80107d8:	d818      	bhi.n	801080c <_strtol_l.isra.0+0xac>
 80107da:	463c      	mov	r4, r7
 80107dc:	42a3      	cmp	r3, r4
 80107de:	dd24      	ble.n	801082a <_strtol_l.isra.0+0xca>
 80107e0:	2e00      	cmp	r6, #0
 80107e2:	db1f      	blt.n	8010824 <_strtol_l.isra.0+0xc4>
 80107e4:	45a9      	cmp	r9, r5
 80107e6:	d31d      	bcc.n	8010824 <_strtol_l.isra.0+0xc4>
 80107e8:	d101      	bne.n	80107ee <_strtol_l.isra.0+0x8e>
 80107ea:	45a2      	cmp	sl, r4
 80107ec:	db1a      	blt.n	8010824 <_strtol_l.isra.0+0xc4>
 80107ee:	fb05 4503 	mla	r5, r5, r3, r4
 80107f2:	2601      	movs	r6, #1
 80107f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80107f8:	e7eb      	b.n	80107d2 <_strtol_l.isra.0+0x72>
 80107fa:	2c2b      	cmp	r4, #43	; 0x2b
 80107fc:	bf08      	it	eq
 80107fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8010802:	46a8      	mov	r8, r5
 8010804:	bf08      	it	eq
 8010806:	f106 0e02 	addeq.w	lr, r6, #2
 801080a:	e7c7      	b.n	801079c <_strtol_l.isra.0+0x3c>
 801080c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8010810:	2f19      	cmp	r7, #25
 8010812:	d801      	bhi.n	8010818 <_strtol_l.isra.0+0xb8>
 8010814:	3c37      	subs	r4, #55	; 0x37
 8010816:	e7e1      	b.n	80107dc <_strtol_l.isra.0+0x7c>
 8010818:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801081c:	2f19      	cmp	r7, #25
 801081e:	d804      	bhi.n	801082a <_strtol_l.isra.0+0xca>
 8010820:	3c57      	subs	r4, #87	; 0x57
 8010822:	e7db      	b.n	80107dc <_strtol_l.isra.0+0x7c>
 8010824:	f04f 36ff 	mov.w	r6, #4294967295
 8010828:	e7e4      	b.n	80107f4 <_strtol_l.isra.0+0x94>
 801082a:	2e00      	cmp	r6, #0
 801082c:	da05      	bge.n	801083a <_strtol_l.isra.0+0xda>
 801082e:	2322      	movs	r3, #34	; 0x22
 8010830:	6003      	str	r3, [r0, #0]
 8010832:	4665      	mov	r5, ip
 8010834:	b942      	cbnz	r2, 8010848 <_strtol_l.isra.0+0xe8>
 8010836:	4628      	mov	r0, r5
 8010838:	e79d      	b.n	8010776 <_strtol_l.isra.0+0x16>
 801083a:	f1b8 0f00 	cmp.w	r8, #0
 801083e:	d000      	beq.n	8010842 <_strtol_l.isra.0+0xe2>
 8010840:	426d      	negs	r5, r5
 8010842:	2a00      	cmp	r2, #0
 8010844:	d0f7      	beq.n	8010836 <_strtol_l.isra.0+0xd6>
 8010846:	b10e      	cbz	r6, 801084c <_strtol_l.isra.0+0xec>
 8010848:	f10e 31ff 	add.w	r1, lr, #4294967295
 801084c:	6011      	str	r1, [r2, #0]
 801084e:	e7f2      	b.n	8010836 <_strtol_l.isra.0+0xd6>
 8010850:	2430      	movs	r4, #48	; 0x30
 8010852:	2b00      	cmp	r3, #0
 8010854:	d1b3      	bne.n	80107be <_strtol_l.isra.0+0x5e>
 8010856:	2308      	movs	r3, #8
 8010858:	e7b1      	b.n	80107be <_strtol_l.isra.0+0x5e>
 801085a:	2c30      	cmp	r4, #48	; 0x30
 801085c:	d0a4      	beq.n	80107a8 <_strtol_l.isra.0+0x48>
 801085e:	230a      	movs	r3, #10
 8010860:	e7ad      	b.n	80107be <_strtol_l.isra.0+0x5e>
 8010862:	bf00      	nop
 8010864:	080157ed 	.word	0x080157ed

08010868 <_strtol_r>:
 8010868:	f7ff bf7a 	b.w	8010760 <_strtol_l.isra.0>

0801086c <strtol>:
 801086c:	4613      	mov	r3, r2
 801086e:	460a      	mov	r2, r1
 8010870:	4601      	mov	r1, r0
 8010872:	4802      	ldr	r0, [pc, #8]	; (801087c <strtol+0x10>)
 8010874:	6800      	ldr	r0, [r0, #0]
 8010876:	f7ff bf73 	b.w	8010760 <_strtol_l.isra.0>
 801087a:	bf00      	nop
 801087c:	20000028 	.word	0x20000028

08010880 <_vsniprintf_r>:
 8010880:	b530      	push	{r4, r5, lr}
 8010882:	1e14      	subs	r4, r2, #0
 8010884:	4605      	mov	r5, r0
 8010886:	b09b      	sub	sp, #108	; 0x6c
 8010888:	4618      	mov	r0, r3
 801088a:	da05      	bge.n	8010898 <_vsniprintf_r+0x18>
 801088c:	238b      	movs	r3, #139	; 0x8b
 801088e:	602b      	str	r3, [r5, #0]
 8010890:	f04f 30ff 	mov.w	r0, #4294967295
 8010894:	b01b      	add	sp, #108	; 0x6c
 8010896:	bd30      	pop	{r4, r5, pc}
 8010898:	f44f 7302 	mov.w	r3, #520	; 0x208
 801089c:	f8ad 300c 	strh.w	r3, [sp, #12]
 80108a0:	bf14      	ite	ne
 80108a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80108a6:	4623      	moveq	r3, r4
 80108a8:	9302      	str	r3, [sp, #8]
 80108aa:	9305      	str	r3, [sp, #20]
 80108ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80108b0:	9100      	str	r1, [sp, #0]
 80108b2:	9104      	str	r1, [sp, #16]
 80108b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80108b8:	4602      	mov	r2, r0
 80108ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80108bc:	4669      	mov	r1, sp
 80108be:	4628      	mov	r0, r5
 80108c0:	f002 fa5a 	bl	8012d78 <_svfiprintf_r>
 80108c4:	1c43      	adds	r3, r0, #1
 80108c6:	bfbc      	itt	lt
 80108c8:	238b      	movlt	r3, #139	; 0x8b
 80108ca:	602b      	strlt	r3, [r5, #0]
 80108cc:	2c00      	cmp	r4, #0
 80108ce:	d0e1      	beq.n	8010894 <_vsniprintf_r+0x14>
 80108d0:	9b00      	ldr	r3, [sp, #0]
 80108d2:	2200      	movs	r2, #0
 80108d4:	701a      	strb	r2, [r3, #0]
 80108d6:	e7dd      	b.n	8010894 <_vsniprintf_r+0x14>

080108d8 <vsniprintf>:
 80108d8:	b507      	push	{r0, r1, r2, lr}
 80108da:	9300      	str	r3, [sp, #0]
 80108dc:	4613      	mov	r3, r2
 80108de:	460a      	mov	r2, r1
 80108e0:	4601      	mov	r1, r0
 80108e2:	4803      	ldr	r0, [pc, #12]	; (80108f0 <vsniprintf+0x18>)
 80108e4:	6800      	ldr	r0, [r0, #0]
 80108e6:	f7ff ffcb 	bl	8010880 <_vsniprintf_r>
 80108ea:	b003      	add	sp, #12
 80108ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80108f0:	20000028 	.word	0x20000028

080108f4 <__swbuf_r>:
 80108f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108f6:	460e      	mov	r6, r1
 80108f8:	4614      	mov	r4, r2
 80108fa:	4605      	mov	r5, r0
 80108fc:	b118      	cbz	r0, 8010906 <__swbuf_r+0x12>
 80108fe:	6983      	ldr	r3, [r0, #24]
 8010900:	b90b      	cbnz	r3, 8010906 <__swbuf_r+0x12>
 8010902:	f001 f86b 	bl	80119dc <__sinit>
 8010906:	4b21      	ldr	r3, [pc, #132]	; (801098c <__swbuf_r+0x98>)
 8010908:	429c      	cmp	r4, r3
 801090a:	d12b      	bne.n	8010964 <__swbuf_r+0x70>
 801090c:	686c      	ldr	r4, [r5, #4]
 801090e:	69a3      	ldr	r3, [r4, #24]
 8010910:	60a3      	str	r3, [r4, #8]
 8010912:	89a3      	ldrh	r3, [r4, #12]
 8010914:	071a      	lsls	r2, r3, #28
 8010916:	d52f      	bpl.n	8010978 <__swbuf_r+0x84>
 8010918:	6923      	ldr	r3, [r4, #16]
 801091a:	b36b      	cbz	r3, 8010978 <__swbuf_r+0x84>
 801091c:	6923      	ldr	r3, [r4, #16]
 801091e:	6820      	ldr	r0, [r4, #0]
 8010920:	1ac0      	subs	r0, r0, r3
 8010922:	6963      	ldr	r3, [r4, #20]
 8010924:	b2f6      	uxtb	r6, r6
 8010926:	4283      	cmp	r3, r0
 8010928:	4637      	mov	r7, r6
 801092a:	dc04      	bgt.n	8010936 <__swbuf_r+0x42>
 801092c:	4621      	mov	r1, r4
 801092e:	4628      	mov	r0, r5
 8010930:	f000 ffc0 	bl	80118b4 <_fflush_r>
 8010934:	bb30      	cbnz	r0, 8010984 <__swbuf_r+0x90>
 8010936:	68a3      	ldr	r3, [r4, #8]
 8010938:	3b01      	subs	r3, #1
 801093a:	60a3      	str	r3, [r4, #8]
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	1c5a      	adds	r2, r3, #1
 8010940:	6022      	str	r2, [r4, #0]
 8010942:	701e      	strb	r6, [r3, #0]
 8010944:	6963      	ldr	r3, [r4, #20]
 8010946:	3001      	adds	r0, #1
 8010948:	4283      	cmp	r3, r0
 801094a:	d004      	beq.n	8010956 <__swbuf_r+0x62>
 801094c:	89a3      	ldrh	r3, [r4, #12]
 801094e:	07db      	lsls	r3, r3, #31
 8010950:	d506      	bpl.n	8010960 <__swbuf_r+0x6c>
 8010952:	2e0a      	cmp	r6, #10
 8010954:	d104      	bne.n	8010960 <__swbuf_r+0x6c>
 8010956:	4621      	mov	r1, r4
 8010958:	4628      	mov	r0, r5
 801095a:	f000 ffab 	bl	80118b4 <_fflush_r>
 801095e:	b988      	cbnz	r0, 8010984 <__swbuf_r+0x90>
 8010960:	4638      	mov	r0, r7
 8010962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010964:	4b0a      	ldr	r3, [pc, #40]	; (8010990 <__swbuf_r+0x9c>)
 8010966:	429c      	cmp	r4, r3
 8010968:	d101      	bne.n	801096e <__swbuf_r+0x7a>
 801096a:	68ac      	ldr	r4, [r5, #8]
 801096c:	e7cf      	b.n	801090e <__swbuf_r+0x1a>
 801096e:	4b09      	ldr	r3, [pc, #36]	; (8010994 <__swbuf_r+0xa0>)
 8010970:	429c      	cmp	r4, r3
 8010972:	bf08      	it	eq
 8010974:	68ec      	ldreq	r4, [r5, #12]
 8010976:	e7ca      	b.n	801090e <__swbuf_r+0x1a>
 8010978:	4621      	mov	r1, r4
 801097a:	4628      	mov	r0, r5
 801097c:	f000 f81e 	bl	80109bc <__swsetup_r>
 8010980:	2800      	cmp	r0, #0
 8010982:	d0cb      	beq.n	801091c <__swbuf_r+0x28>
 8010984:	f04f 37ff 	mov.w	r7, #4294967295
 8010988:	e7ea      	b.n	8010960 <__swbuf_r+0x6c>
 801098a:	bf00      	nop
 801098c:	08015a34 	.word	0x08015a34
 8010990:	08015a54 	.word	0x08015a54
 8010994:	08015a14 	.word	0x08015a14

08010998 <_write_r>:
 8010998:	b538      	push	{r3, r4, r5, lr}
 801099a:	4d07      	ldr	r5, [pc, #28]	; (80109b8 <_write_r+0x20>)
 801099c:	4604      	mov	r4, r0
 801099e:	4608      	mov	r0, r1
 80109a0:	4611      	mov	r1, r2
 80109a2:	2200      	movs	r2, #0
 80109a4:	602a      	str	r2, [r5, #0]
 80109a6:	461a      	mov	r2, r3
 80109a8:	f7f3 fc1d 	bl	80041e6 <_write>
 80109ac:	1c43      	adds	r3, r0, #1
 80109ae:	d102      	bne.n	80109b6 <_write_r+0x1e>
 80109b0:	682b      	ldr	r3, [r5, #0]
 80109b2:	b103      	cbz	r3, 80109b6 <_write_r+0x1e>
 80109b4:	6023      	str	r3, [r4, #0]
 80109b6:	bd38      	pop	{r3, r4, r5, pc}
 80109b8:	20001a24 	.word	0x20001a24

080109bc <__swsetup_r>:
 80109bc:	4b32      	ldr	r3, [pc, #200]	; (8010a88 <__swsetup_r+0xcc>)
 80109be:	b570      	push	{r4, r5, r6, lr}
 80109c0:	681d      	ldr	r5, [r3, #0]
 80109c2:	4606      	mov	r6, r0
 80109c4:	460c      	mov	r4, r1
 80109c6:	b125      	cbz	r5, 80109d2 <__swsetup_r+0x16>
 80109c8:	69ab      	ldr	r3, [r5, #24]
 80109ca:	b913      	cbnz	r3, 80109d2 <__swsetup_r+0x16>
 80109cc:	4628      	mov	r0, r5
 80109ce:	f001 f805 	bl	80119dc <__sinit>
 80109d2:	4b2e      	ldr	r3, [pc, #184]	; (8010a8c <__swsetup_r+0xd0>)
 80109d4:	429c      	cmp	r4, r3
 80109d6:	d10f      	bne.n	80109f8 <__swsetup_r+0x3c>
 80109d8:	686c      	ldr	r4, [r5, #4]
 80109da:	89a3      	ldrh	r3, [r4, #12]
 80109dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109e0:	0719      	lsls	r1, r3, #28
 80109e2:	d42c      	bmi.n	8010a3e <__swsetup_r+0x82>
 80109e4:	06dd      	lsls	r5, r3, #27
 80109e6:	d411      	bmi.n	8010a0c <__swsetup_r+0x50>
 80109e8:	2309      	movs	r3, #9
 80109ea:	6033      	str	r3, [r6, #0]
 80109ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80109f0:	81a3      	strh	r3, [r4, #12]
 80109f2:	f04f 30ff 	mov.w	r0, #4294967295
 80109f6:	e03e      	b.n	8010a76 <__swsetup_r+0xba>
 80109f8:	4b25      	ldr	r3, [pc, #148]	; (8010a90 <__swsetup_r+0xd4>)
 80109fa:	429c      	cmp	r4, r3
 80109fc:	d101      	bne.n	8010a02 <__swsetup_r+0x46>
 80109fe:	68ac      	ldr	r4, [r5, #8]
 8010a00:	e7eb      	b.n	80109da <__swsetup_r+0x1e>
 8010a02:	4b24      	ldr	r3, [pc, #144]	; (8010a94 <__swsetup_r+0xd8>)
 8010a04:	429c      	cmp	r4, r3
 8010a06:	bf08      	it	eq
 8010a08:	68ec      	ldreq	r4, [r5, #12]
 8010a0a:	e7e6      	b.n	80109da <__swsetup_r+0x1e>
 8010a0c:	0758      	lsls	r0, r3, #29
 8010a0e:	d512      	bpl.n	8010a36 <__swsetup_r+0x7a>
 8010a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a12:	b141      	cbz	r1, 8010a26 <__swsetup_r+0x6a>
 8010a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a18:	4299      	cmp	r1, r3
 8010a1a:	d002      	beq.n	8010a22 <__swsetup_r+0x66>
 8010a1c:	4630      	mov	r0, r6
 8010a1e:	f7fd fff1 	bl	800ea04 <_free_r>
 8010a22:	2300      	movs	r3, #0
 8010a24:	6363      	str	r3, [r4, #52]	; 0x34
 8010a26:	89a3      	ldrh	r3, [r4, #12]
 8010a28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010a2c:	81a3      	strh	r3, [r4, #12]
 8010a2e:	2300      	movs	r3, #0
 8010a30:	6063      	str	r3, [r4, #4]
 8010a32:	6923      	ldr	r3, [r4, #16]
 8010a34:	6023      	str	r3, [r4, #0]
 8010a36:	89a3      	ldrh	r3, [r4, #12]
 8010a38:	f043 0308 	orr.w	r3, r3, #8
 8010a3c:	81a3      	strh	r3, [r4, #12]
 8010a3e:	6923      	ldr	r3, [r4, #16]
 8010a40:	b94b      	cbnz	r3, 8010a56 <__swsetup_r+0x9a>
 8010a42:	89a3      	ldrh	r3, [r4, #12]
 8010a44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a4c:	d003      	beq.n	8010a56 <__swsetup_r+0x9a>
 8010a4e:	4621      	mov	r1, r4
 8010a50:	4630      	mov	r0, r6
 8010a52:	f001 fc0d 	bl	8012270 <__smakebuf_r>
 8010a56:	89a0      	ldrh	r0, [r4, #12]
 8010a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a5c:	f010 0301 	ands.w	r3, r0, #1
 8010a60:	d00a      	beq.n	8010a78 <__swsetup_r+0xbc>
 8010a62:	2300      	movs	r3, #0
 8010a64:	60a3      	str	r3, [r4, #8]
 8010a66:	6963      	ldr	r3, [r4, #20]
 8010a68:	425b      	negs	r3, r3
 8010a6a:	61a3      	str	r3, [r4, #24]
 8010a6c:	6923      	ldr	r3, [r4, #16]
 8010a6e:	b943      	cbnz	r3, 8010a82 <__swsetup_r+0xc6>
 8010a70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010a74:	d1ba      	bne.n	80109ec <__swsetup_r+0x30>
 8010a76:	bd70      	pop	{r4, r5, r6, pc}
 8010a78:	0781      	lsls	r1, r0, #30
 8010a7a:	bf58      	it	pl
 8010a7c:	6963      	ldrpl	r3, [r4, #20]
 8010a7e:	60a3      	str	r3, [r4, #8]
 8010a80:	e7f4      	b.n	8010a6c <__swsetup_r+0xb0>
 8010a82:	2000      	movs	r0, #0
 8010a84:	e7f7      	b.n	8010a76 <__swsetup_r+0xba>
 8010a86:	bf00      	nop
 8010a88:	20000028 	.word	0x20000028
 8010a8c:	08015a34 	.word	0x08015a34
 8010a90:	08015a54 	.word	0x08015a54
 8010a94:	08015a14 	.word	0x08015a14

08010a98 <_close_r>:
 8010a98:	b538      	push	{r3, r4, r5, lr}
 8010a9a:	4d06      	ldr	r5, [pc, #24]	; (8010ab4 <_close_r+0x1c>)
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	4608      	mov	r0, r1
 8010aa2:	602b      	str	r3, [r5, #0]
 8010aa4:	f7f3 fbbb 	bl	800421e <_close>
 8010aa8:	1c43      	adds	r3, r0, #1
 8010aaa:	d102      	bne.n	8010ab2 <_close_r+0x1a>
 8010aac:	682b      	ldr	r3, [r5, #0]
 8010aae:	b103      	cbz	r3, 8010ab2 <_close_r+0x1a>
 8010ab0:	6023      	str	r3, [r4, #0]
 8010ab2:	bd38      	pop	{r3, r4, r5, pc}
 8010ab4:	20001a24 	.word	0x20001a24

08010ab8 <quorem>:
 8010ab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010abc:	6903      	ldr	r3, [r0, #16]
 8010abe:	690c      	ldr	r4, [r1, #16]
 8010ac0:	42a3      	cmp	r3, r4
 8010ac2:	4607      	mov	r7, r0
 8010ac4:	f2c0 8081 	blt.w	8010bca <quorem+0x112>
 8010ac8:	3c01      	subs	r4, #1
 8010aca:	f101 0814 	add.w	r8, r1, #20
 8010ace:	f100 0514 	add.w	r5, r0, #20
 8010ad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ad6:	9301      	str	r3, [sp, #4]
 8010ad8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010adc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010ae8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010aec:	fbb2 f6f3 	udiv	r6, r2, r3
 8010af0:	d331      	bcc.n	8010b56 <quorem+0x9e>
 8010af2:	f04f 0e00 	mov.w	lr, #0
 8010af6:	4640      	mov	r0, r8
 8010af8:	46ac      	mov	ip, r5
 8010afa:	46f2      	mov	sl, lr
 8010afc:	f850 2b04 	ldr.w	r2, [r0], #4
 8010b00:	b293      	uxth	r3, r2
 8010b02:	fb06 e303 	mla	r3, r6, r3, lr
 8010b06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	ebaa 0303 	sub.w	r3, sl, r3
 8010b10:	0c12      	lsrs	r2, r2, #16
 8010b12:	f8dc a000 	ldr.w	sl, [ip]
 8010b16:	fb06 e202 	mla	r2, r6, r2, lr
 8010b1a:	fa13 f38a 	uxtah	r3, r3, sl
 8010b1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010b22:	fa1f fa82 	uxth.w	sl, r2
 8010b26:	f8dc 2000 	ldr.w	r2, [ip]
 8010b2a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010b2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b38:	4581      	cmp	r9, r0
 8010b3a:	f84c 3b04 	str.w	r3, [ip], #4
 8010b3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010b42:	d2db      	bcs.n	8010afc <quorem+0x44>
 8010b44:	f855 300b 	ldr.w	r3, [r5, fp]
 8010b48:	b92b      	cbnz	r3, 8010b56 <quorem+0x9e>
 8010b4a:	9b01      	ldr	r3, [sp, #4]
 8010b4c:	3b04      	subs	r3, #4
 8010b4e:	429d      	cmp	r5, r3
 8010b50:	461a      	mov	r2, r3
 8010b52:	d32e      	bcc.n	8010bb2 <quorem+0xfa>
 8010b54:	613c      	str	r4, [r7, #16]
 8010b56:	4638      	mov	r0, r7
 8010b58:	f001 feb0 	bl	80128bc <__mcmp>
 8010b5c:	2800      	cmp	r0, #0
 8010b5e:	db24      	blt.n	8010baa <quorem+0xf2>
 8010b60:	3601      	adds	r6, #1
 8010b62:	4628      	mov	r0, r5
 8010b64:	f04f 0c00 	mov.w	ip, #0
 8010b68:	f858 2b04 	ldr.w	r2, [r8], #4
 8010b6c:	f8d0 e000 	ldr.w	lr, [r0]
 8010b70:	b293      	uxth	r3, r2
 8010b72:	ebac 0303 	sub.w	r3, ip, r3
 8010b76:	0c12      	lsrs	r2, r2, #16
 8010b78:	fa13 f38e 	uxtah	r3, r3, lr
 8010b7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010b80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b8a:	45c1      	cmp	r9, r8
 8010b8c:	f840 3b04 	str.w	r3, [r0], #4
 8010b90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010b94:	d2e8      	bcs.n	8010b68 <quorem+0xb0>
 8010b96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b9e:	b922      	cbnz	r2, 8010baa <quorem+0xf2>
 8010ba0:	3b04      	subs	r3, #4
 8010ba2:	429d      	cmp	r5, r3
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	d30a      	bcc.n	8010bbe <quorem+0x106>
 8010ba8:	613c      	str	r4, [r7, #16]
 8010baa:	4630      	mov	r0, r6
 8010bac:	b003      	add	sp, #12
 8010bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bb2:	6812      	ldr	r2, [r2, #0]
 8010bb4:	3b04      	subs	r3, #4
 8010bb6:	2a00      	cmp	r2, #0
 8010bb8:	d1cc      	bne.n	8010b54 <quorem+0x9c>
 8010bba:	3c01      	subs	r4, #1
 8010bbc:	e7c7      	b.n	8010b4e <quorem+0x96>
 8010bbe:	6812      	ldr	r2, [r2, #0]
 8010bc0:	3b04      	subs	r3, #4
 8010bc2:	2a00      	cmp	r2, #0
 8010bc4:	d1f0      	bne.n	8010ba8 <quorem+0xf0>
 8010bc6:	3c01      	subs	r4, #1
 8010bc8:	e7eb      	b.n	8010ba2 <quorem+0xea>
 8010bca:	2000      	movs	r0, #0
 8010bcc:	e7ee      	b.n	8010bac <quorem+0xf4>
	...

08010bd0 <_dtoa_r>:
 8010bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd4:	ed2d 8b02 	vpush	{d8}
 8010bd8:	ec57 6b10 	vmov	r6, r7, d0
 8010bdc:	b095      	sub	sp, #84	; 0x54
 8010bde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010be0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010be4:	9105      	str	r1, [sp, #20]
 8010be6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010bea:	4604      	mov	r4, r0
 8010bec:	9209      	str	r2, [sp, #36]	; 0x24
 8010bee:	930f      	str	r3, [sp, #60]	; 0x3c
 8010bf0:	b975      	cbnz	r5, 8010c10 <_dtoa_r+0x40>
 8010bf2:	2010      	movs	r0, #16
 8010bf4:	f7fd fee8 	bl	800e9c8 <malloc>
 8010bf8:	4602      	mov	r2, r0
 8010bfa:	6260      	str	r0, [r4, #36]	; 0x24
 8010bfc:	b920      	cbnz	r0, 8010c08 <_dtoa_r+0x38>
 8010bfe:	4bb2      	ldr	r3, [pc, #712]	; (8010ec8 <_dtoa_r+0x2f8>)
 8010c00:	21ea      	movs	r1, #234	; 0xea
 8010c02:	48b2      	ldr	r0, [pc, #712]	; (8010ecc <_dtoa_r+0x2fc>)
 8010c04:	f002 ff4c 	bl	8013aa0 <__assert_func>
 8010c08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010c0c:	6005      	str	r5, [r0, #0]
 8010c0e:	60c5      	str	r5, [r0, #12]
 8010c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c12:	6819      	ldr	r1, [r3, #0]
 8010c14:	b151      	cbz	r1, 8010c2c <_dtoa_r+0x5c>
 8010c16:	685a      	ldr	r2, [r3, #4]
 8010c18:	604a      	str	r2, [r1, #4]
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	4093      	lsls	r3, r2
 8010c1e:	608b      	str	r3, [r1, #8]
 8010c20:	4620      	mov	r0, r4
 8010c22:	f001 fbc3 	bl	80123ac <_Bfree>
 8010c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c28:	2200      	movs	r2, #0
 8010c2a:	601a      	str	r2, [r3, #0]
 8010c2c:	1e3b      	subs	r3, r7, #0
 8010c2e:	bfb9      	ittee	lt
 8010c30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010c34:	9303      	strlt	r3, [sp, #12]
 8010c36:	2300      	movge	r3, #0
 8010c38:	f8c8 3000 	strge.w	r3, [r8]
 8010c3c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010c40:	4ba3      	ldr	r3, [pc, #652]	; (8010ed0 <_dtoa_r+0x300>)
 8010c42:	bfbc      	itt	lt
 8010c44:	2201      	movlt	r2, #1
 8010c46:	f8c8 2000 	strlt.w	r2, [r8]
 8010c4a:	ea33 0309 	bics.w	r3, r3, r9
 8010c4e:	d11b      	bne.n	8010c88 <_dtoa_r+0xb8>
 8010c50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010c52:	f242 730f 	movw	r3, #9999	; 0x270f
 8010c56:	6013      	str	r3, [r2, #0]
 8010c58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010c5c:	4333      	orrs	r3, r6
 8010c5e:	f000 857a 	beq.w	8011756 <_dtoa_r+0xb86>
 8010c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c64:	b963      	cbnz	r3, 8010c80 <_dtoa_r+0xb0>
 8010c66:	4b9b      	ldr	r3, [pc, #620]	; (8010ed4 <_dtoa_r+0x304>)
 8010c68:	e024      	b.n	8010cb4 <_dtoa_r+0xe4>
 8010c6a:	4b9b      	ldr	r3, [pc, #620]	; (8010ed8 <_dtoa_r+0x308>)
 8010c6c:	9300      	str	r3, [sp, #0]
 8010c6e:	3308      	adds	r3, #8
 8010c70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010c72:	6013      	str	r3, [r2, #0]
 8010c74:	9800      	ldr	r0, [sp, #0]
 8010c76:	b015      	add	sp, #84	; 0x54
 8010c78:	ecbd 8b02 	vpop	{d8}
 8010c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c80:	4b94      	ldr	r3, [pc, #592]	; (8010ed4 <_dtoa_r+0x304>)
 8010c82:	9300      	str	r3, [sp, #0]
 8010c84:	3303      	adds	r3, #3
 8010c86:	e7f3      	b.n	8010c70 <_dtoa_r+0xa0>
 8010c88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	ec51 0b17 	vmov	r0, r1, d7
 8010c92:	2300      	movs	r3, #0
 8010c94:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010c98:	f7ef ff26 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c9c:	4680      	mov	r8, r0
 8010c9e:	b158      	cbz	r0, 8010cb8 <_dtoa_r+0xe8>
 8010ca0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	6013      	str	r3, [r2, #0]
 8010ca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	f000 8551 	beq.w	8011750 <_dtoa_r+0xb80>
 8010cae:	488b      	ldr	r0, [pc, #556]	; (8010edc <_dtoa_r+0x30c>)
 8010cb0:	6018      	str	r0, [r3, #0]
 8010cb2:	1e43      	subs	r3, r0, #1
 8010cb4:	9300      	str	r3, [sp, #0]
 8010cb6:	e7dd      	b.n	8010c74 <_dtoa_r+0xa4>
 8010cb8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010cbc:	aa12      	add	r2, sp, #72	; 0x48
 8010cbe:	a913      	add	r1, sp, #76	; 0x4c
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f001 ff1b 	bl	8012afc <__d2b>
 8010cc6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010cca:	4683      	mov	fp, r0
 8010ccc:	2d00      	cmp	r5, #0
 8010cce:	d07c      	beq.n	8010dca <_dtoa_r+0x1fa>
 8010cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cd2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010cd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010cda:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8010cde:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010ce2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010ce6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010cea:	4b7d      	ldr	r3, [pc, #500]	; (8010ee0 <_dtoa_r+0x310>)
 8010cec:	2200      	movs	r2, #0
 8010cee:	4630      	mov	r0, r6
 8010cf0:	4639      	mov	r1, r7
 8010cf2:	f7ef fad9 	bl	80002a8 <__aeabi_dsub>
 8010cf6:	a36e      	add	r3, pc, #440	; (adr r3, 8010eb0 <_dtoa_r+0x2e0>)
 8010cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfc:	f7ef fc8c 	bl	8000618 <__aeabi_dmul>
 8010d00:	a36d      	add	r3, pc, #436	; (adr r3, 8010eb8 <_dtoa_r+0x2e8>)
 8010d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d06:	f7ef fad1 	bl	80002ac <__adddf3>
 8010d0a:	4606      	mov	r6, r0
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	460f      	mov	r7, r1
 8010d10:	f7ef fc18 	bl	8000544 <__aeabi_i2d>
 8010d14:	a36a      	add	r3, pc, #424	; (adr r3, 8010ec0 <_dtoa_r+0x2f0>)
 8010d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1a:	f7ef fc7d 	bl	8000618 <__aeabi_dmul>
 8010d1e:	4602      	mov	r2, r0
 8010d20:	460b      	mov	r3, r1
 8010d22:	4630      	mov	r0, r6
 8010d24:	4639      	mov	r1, r7
 8010d26:	f7ef fac1 	bl	80002ac <__adddf3>
 8010d2a:	4606      	mov	r6, r0
 8010d2c:	460f      	mov	r7, r1
 8010d2e:	f7ef ff23 	bl	8000b78 <__aeabi_d2iz>
 8010d32:	2200      	movs	r2, #0
 8010d34:	4682      	mov	sl, r0
 8010d36:	2300      	movs	r3, #0
 8010d38:	4630      	mov	r0, r6
 8010d3a:	4639      	mov	r1, r7
 8010d3c:	f7ef fede 	bl	8000afc <__aeabi_dcmplt>
 8010d40:	b148      	cbz	r0, 8010d56 <_dtoa_r+0x186>
 8010d42:	4650      	mov	r0, sl
 8010d44:	f7ef fbfe 	bl	8000544 <__aeabi_i2d>
 8010d48:	4632      	mov	r2, r6
 8010d4a:	463b      	mov	r3, r7
 8010d4c:	f7ef fecc 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d50:	b908      	cbnz	r0, 8010d56 <_dtoa_r+0x186>
 8010d52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d56:	f1ba 0f16 	cmp.w	sl, #22
 8010d5a:	d854      	bhi.n	8010e06 <_dtoa_r+0x236>
 8010d5c:	4b61      	ldr	r3, [pc, #388]	; (8010ee4 <_dtoa_r+0x314>)
 8010d5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010d6a:	f7ef fec7 	bl	8000afc <__aeabi_dcmplt>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	d04b      	beq.n	8010e0a <_dtoa_r+0x23a>
 8010d72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d76:	2300      	movs	r3, #0
 8010d78:	930e      	str	r3, [sp, #56]	; 0x38
 8010d7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010d7c:	1b5d      	subs	r5, r3, r5
 8010d7e:	1e6b      	subs	r3, r5, #1
 8010d80:	9304      	str	r3, [sp, #16]
 8010d82:	bf43      	ittte	mi
 8010d84:	2300      	movmi	r3, #0
 8010d86:	f1c5 0801 	rsbmi	r8, r5, #1
 8010d8a:	9304      	strmi	r3, [sp, #16]
 8010d8c:	f04f 0800 	movpl.w	r8, #0
 8010d90:	f1ba 0f00 	cmp.w	sl, #0
 8010d94:	db3b      	blt.n	8010e0e <_dtoa_r+0x23e>
 8010d96:	9b04      	ldr	r3, [sp, #16]
 8010d98:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010d9c:	4453      	add	r3, sl
 8010d9e:	9304      	str	r3, [sp, #16]
 8010da0:	2300      	movs	r3, #0
 8010da2:	9306      	str	r3, [sp, #24]
 8010da4:	9b05      	ldr	r3, [sp, #20]
 8010da6:	2b09      	cmp	r3, #9
 8010da8:	d869      	bhi.n	8010e7e <_dtoa_r+0x2ae>
 8010daa:	2b05      	cmp	r3, #5
 8010dac:	bfc4      	itt	gt
 8010dae:	3b04      	subgt	r3, #4
 8010db0:	9305      	strgt	r3, [sp, #20]
 8010db2:	9b05      	ldr	r3, [sp, #20]
 8010db4:	f1a3 0302 	sub.w	r3, r3, #2
 8010db8:	bfcc      	ite	gt
 8010dba:	2500      	movgt	r5, #0
 8010dbc:	2501      	movle	r5, #1
 8010dbe:	2b03      	cmp	r3, #3
 8010dc0:	d869      	bhi.n	8010e96 <_dtoa_r+0x2c6>
 8010dc2:	e8df f003 	tbb	[pc, r3]
 8010dc6:	4e2c      	.short	0x4e2c
 8010dc8:	5a4c      	.short	0x5a4c
 8010dca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8010dce:	441d      	add	r5, r3
 8010dd0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010dd4:	2b20      	cmp	r3, #32
 8010dd6:	bfc1      	itttt	gt
 8010dd8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010ddc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010de0:	fa09 f303 	lslgt.w	r3, r9, r3
 8010de4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010de8:	bfda      	itte	le
 8010dea:	f1c3 0320 	rsble	r3, r3, #32
 8010dee:	fa06 f003 	lslle.w	r0, r6, r3
 8010df2:	4318      	orrgt	r0, r3
 8010df4:	f7ef fb96 	bl	8000524 <__aeabi_ui2d>
 8010df8:	2301      	movs	r3, #1
 8010dfa:	4606      	mov	r6, r0
 8010dfc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010e00:	3d01      	subs	r5, #1
 8010e02:	9310      	str	r3, [sp, #64]	; 0x40
 8010e04:	e771      	b.n	8010cea <_dtoa_r+0x11a>
 8010e06:	2301      	movs	r3, #1
 8010e08:	e7b6      	b.n	8010d78 <_dtoa_r+0x1a8>
 8010e0a:	900e      	str	r0, [sp, #56]	; 0x38
 8010e0c:	e7b5      	b.n	8010d7a <_dtoa_r+0x1aa>
 8010e0e:	f1ca 0300 	rsb	r3, sl, #0
 8010e12:	9306      	str	r3, [sp, #24]
 8010e14:	2300      	movs	r3, #0
 8010e16:	eba8 080a 	sub.w	r8, r8, sl
 8010e1a:	930d      	str	r3, [sp, #52]	; 0x34
 8010e1c:	e7c2      	b.n	8010da4 <_dtoa_r+0x1d4>
 8010e1e:	2300      	movs	r3, #0
 8010e20:	9308      	str	r3, [sp, #32]
 8010e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	dc39      	bgt.n	8010e9c <_dtoa_r+0x2cc>
 8010e28:	f04f 0901 	mov.w	r9, #1
 8010e2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010e30:	464b      	mov	r3, r9
 8010e32:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010e36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010e38:	2200      	movs	r2, #0
 8010e3a:	6042      	str	r2, [r0, #4]
 8010e3c:	2204      	movs	r2, #4
 8010e3e:	f102 0614 	add.w	r6, r2, #20
 8010e42:	429e      	cmp	r6, r3
 8010e44:	6841      	ldr	r1, [r0, #4]
 8010e46:	d92f      	bls.n	8010ea8 <_dtoa_r+0x2d8>
 8010e48:	4620      	mov	r0, r4
 8010e4a:	f001 fa6f 	bl	801232c <_Balloc>
 8010e4e:	9000      	str	r0, [sp, #0]
 8010e50:	2800      	cmp	r0, #0
 8010e52:	d14b      	bne.n	8010eec <_dtoa_r+0x31c>
 8010e54:	4b24      	ldr	r3, [pc, #144]	; (8010ee8 <_dtoa_r+0x318>)
 8010e56:	4602      	mov	r2, r0
 8010e58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010e5c:	e6d1      	b.n	8010c02 <_dtoa_r+0x32>
 8010e5e:	2301      	movs	r3, #1
 8010e60:	e7de      	b.n	8010e20 <_dtoa_r+0x250>
 8010e62:	2300      	movs	r3, #0
 8010e64:	9308      	str	r3, [sp, #32]
 8010e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e68:	eb0a 0903 	add.w	r9, sl, r3
 8010e6c:	f109 0301 	add.w	r3, r9, #1
 8010e70:	2b01      	cmp	r3, #1
 8010e72:	9301      	str	r3, [sp, #4]
 8010e74:	bfb8      	it	lt
 8010e76:	2301      	movlt	r3, #1
 8010e78:	e7dd      	b.n	8010e36 <_dtoa_r+0x266>
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	e7f2      	b.n	8010e64 <_dtoa_r+0x294>
 8010e7e:	2501      	movs	r5, #1
 8010e80:	2300      	movs	r3, #0
 8010e82:	9305      	str	r3, [sp, #20]
 8010e84:	9508      	str	r5, [sp, #32]
 8010e86:	f04f 39ff 	mov.w	r9, #4294967295
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010e90:	2312      	movs	r3, #18
 8010e92:	9209      	str	r2, [sp, #36]	; 0x24
 8010e94:	e7cf      	b.n	8010e36 <_dtoa_r+0x266>
 8010e96:	2301      	movs	r3, #1
 8010e98:	9308      	str	r3, [sp, #32]
 8010e9a:	e7f4      	b.n	8010e86 <_dtoa_r+0x2b6>
 8010e9c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010ea0:	f8cd 9004 	str.w	r9, [sp, #4]
 8010ea4:	464b      	mov	r3, r9
 8010ea6:	e7c6      	b.n	8010e36 <_dtoa_r+0x266>
 8010ea8:	3101      	adds	r1, #1
 8010eaa:	6041      	str	r1, [r0, #4]
 8010eac:	0052      	lsls	r2, r2, #1
 8010eae:	e7c6      	b.n	8010e3e <_dtoa_r+0x26e>
 8010eb0:	636f4361 	.word	0x636f4361
 8010eb4:	3fd287a7 	.word	0x3fd287a7
 8010eb8:	8b60c8b3 	.word	0x8b60c8b3
 8010ebc:	3fc68a28 	.word	0x3fc68a28
 8010ec0:	509f79fb 	.word	0x509f79fb
 8010ec4:	3fd34413 	.word	0x3fd34413
 8010ec8:	0801598d 	.word	0x0801598d
 8010ecc:	080159a4 	.word	0x080159a4
 8010ed0:	7ff00000 	.word	0x7ff00000
 8010ed4:	08015989 	.word	0x08015989
 8010ed8:	08015980 	.word	0x08015980
 8010edc:	08015c6a 	.word	0x08015c6a
 8010ee0:	3ff80000 	.word	0x3ff80000
 8010ee4:	08015b80 	.word	0x08015b80
 8010ee8:	08015a03 	.word	0x08015a03
 8010eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010eee:	9a00      	ldr	r2, [sp, #0]
 8010ef0:	601a      	str	r2, [r3, #0]
 8010ef2:	9b01      	ldr	r3, [sp, #4]
 8010ef4:	2b0e      	cmp	r3, #14
 8010ef6:	f200 80ad 	bhi.w	8011054 <_dtoa_r+0x484>
 8010efa:	2d00      	cmp	r5, #0
 8010efc:	f000 80aa 	beq.w	8011054 <_dtoa_r+0x484>
 8010f00:	f1ba 0f00 	cmp.w	sl, #0
 8010f04:	dd36      	ble.n	8010f74 <_dtoa_r+0x3a4>
 8010f06:	4ac3      	ldr	r2, [pc, #780]	; (8011214 <_dtoa_r+0x644>)
 8010f08:	f00a 030f 	and.w	r3, sl, #15
 8010f0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010f10:	ed93 7b00 	vldr	d7, [r3]
 8010f14:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010f18:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010f1c:	eeb0 8a47 	vmov.f32	s16, s14
 8010f20:	eef0 8a67 	vmov.f32	s17, s15
 8010f24:	d016      	beq.n	8010f54 <_dtoa_r+0x384>
 8010f26:	4bbc      	ldr	r3, [pc, #752]	; (8011218 <_dtoa_r+0x648>)
 8010f28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010f2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010f30:	f7ef fc9c 	bl	800086c <__aeabi_ddiv>
 8010f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f38:	f007 070f 	and.w	r7, r7, #15
 8010f3c:	2503      	movs	r5, #3
 8010f3e:	4eb6      	ldr	r6, [pc, #728]	; (8011218 <_dtoa_r+0x648>)
 8010f40:	b957      	cbnz	r7, 8010f58 <_dtoa_r+0x388>
 8010f42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f46:	ec53 2b18 	vmov	r2, r3, d8
 8010f4a:	f7ef fc8f 	bl	800086c <__aeabi_ddiv>
 8010f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f52:	e029      	b.n	8010fa8 <_dtoa_r+0x3d8>
 8010f54:	2502      	movs	r5, #2
 8010f56:	e7f2      	b.n	8010f3e <_dtoa_r+0x36e>
 8010f58:	07f9      	lsls	r1, r7, #31
 8010f5a:	d508      	bpl.n	8010f6e <_dtoa_r+0x39e>
 8010f5c:	ec51 0b18 	vmov	r0, r1, d8
 8010f60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010f64:	f7ef fb58 	bl	8000618 <__aeabi_dmul>
 8010f68:	ec41 0b18 	vmov	d8, r0, r1
 8010f6c:	3501      	adds	r5, #1
 8010f6e:	107f      	asrs	r7, r7, #1
 8010f70:	3608      	adds	r6, #8
 8010f72:	e7e5      	b.n	8010f40 <_dtoa_r+0x370>
 8010f74:	f000 80a6 	beq.w	80110c4 <_dtoa_r+0x4f4>
 8010f78:	f1ca 0600 	rsb	r6, sl, #0
 8010f7c:	4ba5      	ldr	r3, [pc, #660]	; (8011214 <_dtoa_r+0x644>)
 8010f7e:	4fa6      	ldr	r7, [pc, #664]	; (8011218 <_dtoa_r+0x648>)
 8010f80:	f006 020f 	and.w	r2, r6, #15
 8010f84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010f90:	f7ef fb42 	bl	8000618 <__aeabi_dmul>
 8010f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f98:	1136      	asrs	r6, r6, #4
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	2502      	movs	r5, #2
 8010f9e:	2e00      	cmp	r6, #0
 8010fa0:	f040 8085 	bne.w	80110ae <_dtoa_r+0x4de>
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d1d2      	bne.n	8010f4e <_dtoa_r+0x37e>
 8010fa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	f000 808c 	beq.w	80110c8 <_dtoa_r+0x4f8>
 8010fb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010fb4:	4b99      	ldr	r3, [pc, #612]	; (801121c <_dtoa_r+0x64c>)
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	4630      	mov	r0, r6
 8010fba:	4639      	mov	r1, r7
 8010fbc:	f7ef fd9e 	bl	8000afc <__aeabi_dcmplt>
 8010fc0:	2800      	cmp	r0, #0
 8010fc2:	f000 8081 	beq.w	80110c8 <_dtoa_r+0x4f8>
 8010fc6:	9b01      	ldr	r3, [sp, #4]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d07d      	beq.n	80110c8 <_dtoa_r+0x4f8>
 8010fcc:	f1b9 0f00 	cmp.w	r9, #0
 8010fd0:	dd3c      	ble.n	801104c <_dtoa_r+0x47c>
 8010fd2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010fd6:	9307      	str	r3, [sp, #28]
 8010fd8:	2200      	movs	r2, #0
 8010fda:	4b91      	ldr	r3, [pc, #580]	; (8011220 <_dtoa_r+0x650>)
 8010fdc:	4630      	mov	r0, r6
 8010fde:	4639      	mov	r1, r7
 8010fe0:	f7ef fb1a 	bl	8000618 <__aeabi_dmul>
 8010fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fe8:	3501      	adds	r5, #1
 8010fea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010fee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	f7ef faa6 	bl	8000544 <__aeabi_i2d>
 8010ff8:	4632      	mov	r2, r6
 8010ffa:	463b      	mov	r3, r7
 8010ffc:	f7ef fb0c 	bl	8000618 <__aeabi_dmul>
 8011000:	4b88      	ldr	r3, [pc, #544]	; (8011224 <_dtoa_r+0x654>)
 8011002:	2200      	movs	r2, #0
 8011004:	f7ef f952 	bl	80002ac <__adddf3>
 8011008:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801100c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011010:	9303      	str	r3, [sp, #12]
 8011012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011014:	2b00      	cmp	r3, #0
 8011016:	d15c      	bne.n	80110d2 <_dtoa_r+0x502>
 8011018:	4b83      	ldr	r3, [pc, #524]	; (8011228 <_dtoa_r+0x658>)
 801101a:	2200      	movs	r2, #0
 801101c:	4630      	mov	r0, r6
 801101e:	4639      	mov	r1, r7
 8011020:	f7ef f942 	bl	80002a8 <__aeabi_dsub>
 8011024:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011028:	4606      	mov	r6, r0
 801102a:	460f      	mov	r7, r1
 801102c:	f7ef fd84 	bl	8000b38 <__aeabi_dcmpgt>
 8011030:	2800      	cmp	r0, #0
 8011032:	f040 8296 	bne.w	8011562 <_dtoa_r+0x992>
 8011036:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801103a:	4630      	mov	r0, r6
 801103c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011040:	4639      	mov	r1, r7
 8011042:	f7ef fd5b 	bl	8000afc <__aeabi_dcmplt>
 8011046:	2800      	cmp	r0, #0
 8011048:	f040 8288 	bne.w	801155c <_dtoa_r+0x98c>
 801104c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011050:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011054:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011056:	2b00      	cmp	r3, #0
 8011058:	f2c0 8158 	blt.w	801130c <_dtoa_r+0x73c>
 801105c:	f1ba 0f0e 	cmp.w	sl, #14
 8011060:	f300 8154 	bgt.w	801130c <_dtoa_r+0x73c>
 8011064:	4b6b      	ldr	r3, [pc, #428]	; (8011214 <_dtoa_r+0x644>)
 8011066:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801106a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801106e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011070:	2b00      	cmp	r3, #0
 8011072:	f280 80e3 	bge.w	801123c <_dtoa_r+0x66c>
 8011076:	9b01      	ldr	r3, [sp, #4]
 8011078:	2b00      	cmp	r3, #0
 801107a:	f300 80df 	bgt.w	801123c <_dtoa_r+0x66c>
 801107e:	f040 826d 	bne.w	801155c <_dtoa_r+0x98c>
 8011082:	4b69      	ldr	r3, [pc, #420]	; (8011228 <_dtoa_r+0x658>)
 8011084:	2200      	movs	r2, #0
 8011086:	4640      	mov	r0, r8
 8011088:	4649      	mov	r1, r9
 801108a:	f7ef fac5 	bl	8000618 <__aeabi_dmul>
 801108e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011092:	f7ef fd47 	bl	8000b24 <__aeabi_dcmpge>
 8011096:	9e01      	ldr	r6, [sp, #4]
 8011098:	4637      	mov	r7, r6
 801109a:	2800      	cmp	r0, #0
 801109c:	f040 8243 	bne.w	8011526 <_dtoa_r+0x956>
 80110a0:	9d00      	ldr	r5, [sp, #0]
 80110a2:	2331      	movs	r3, #49	; 0x31
 80110a4:	f805 3b01 	strb.w	r3, [r5], #1
 80110a8:	f10a 0a01 	add.w	sl, sl, #1
 80110ac:	e23f      	b.n	801152e <_dtoa_r+0x95e>
 80110ae:	07f2      	lsls	r2, r6, #31
 80110b0:	d505      	bpl.n	80110be <_dtoa_r+0x4ee>
 80110b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110b6:	f7ef faaf 	bl	8000618 <__aeabi_dmul>
 80110ba:	3501      	adds	r5, #1
 80110bc:	2301      	movs	r3, #1
 80110be:	1076      	asrs	r6, r6, #1
 80110c0:	3708      	adds	r7, #8
 80110c2:	e76c      	b.n	8010f9e <_dtoa_r+0x3ce>
 80110c4:	2502      	movs	r5, #2
 80110c6:	e76f      	b.n	8010fa8 <_dtoa_r+0x3d8>
 80110c8:	9b01      	ldr	r3, [sp, #4]
 80110ca:	f8cd a01c 	str.w	sl, [sp, #28]
 80110ce:	930c      	str	r3, [sp, #48]	; 0x30
 80110d0:	e78d      	b.n	8010fee <_dtoa_r+0x41e>
 80110d2:	9900      	ldr	r1, [sp, #0]
 80110d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80110d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80110d8:	4b4e      	ldr	r3, [pc, #312]	; (8011214 <_dtoa_r+0x644>)
 80110da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80110de:	4401      	add	r1, r0
 80110e0:	9102      	str	r1, [sp, #8]
 80110e2:	9908      	ldr	r1, [sp, #32]
 80110e4:	eeb0 8a47 	vmov.f32	s16, s14
 80110e8:	eef0 8a67 	vmov.f32	s17, s15
 80110ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80110f4:	2900      	cmp	r1, #0
 80110f6:	d045      	beq.n	8011184 <_dtoa_r+0x5b4>
 80110f8:	494c      	ldr	r1, [pc, #304]	; (801122c <_dtoa_r+0x65c>)
 80110fa:	2000      	movs	r0, #0
 80110fc:	f7ef fbb6 	bl	800086c <__aeabi_ddiv>
 8011100:	ec53 2b18 	vmov	r2, r3, d8
 8011104:	f7ef f8d0 	bl	80002a8 <__aeabi_dsub>
 8011108:	9d00      	ldr	r5, [sp, #0]
 801110a:	ec41 0b18 	vmov	d8, r0, r1
 801110e:	4639      	mov	r1, r7
 8011110:	4630      	mov	r0, r6
 8011112:	f7ef fd31 	bl	8000b78 <__aeabi_d2iz>
 8011116:	900c      	str	r0, [sp, #48]	; 0x30
 8011118:	f7ef fa14 	bl	8000544 <__aeabi_i2d>
 801111c:	4602      	mov	r2, r0
 801111e:	460b      	mov	r3, r1
 8011120:	4630      	mov	r0, r6
 8011122:	4639      	mov	r1, r7
 8011124:	f7ef f8c0 	bl	80002a8 <__aeabi_dsub>
 8011128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801112a:	3330      	adds	r3, #48	; 0x30
 801112c:	f805 3b01 	strb.w	r3, [r5], #1
 8011130:	ec53 2b18 	vmov	r2, r3, d8
 8011134:	4606      	mov	r6, r0
 8011136:	460f      	mov	r7, r1
 8011138:	f7ef fce0 	bl	8000afc <__aeabi_dcmplt>
 801113c:	2800      	cmp	r0, #0
 801113e:	d165      	bne.n	801120c <_dtoa_r+0x63c>
 8011140:	4632      	mov	r2, r6
 8011142:	463b      	mov	r3, r7
 8011144:	4935      	ldr	r1, [pc, #212]	; (801121c <_dtoa_r+0x64c>)
 8011146:	2000      	movs	r0, #0
 8011148:	f7ef f8ae 	bl	80002a8 <__aeabi_dsub>
 801114c:	ec53 2b18 	vmov	r2, r3, d8
 8011150:	f7ef fcd4 	bl	8000afc <__aeabi_dcmplt>
 8011154:	2800      	cmp	r0, #0
 8011156:	f040 80b9 	bne.w	80112cc <_dtoa_r+0x6fc>
 801115a:	9b02      	ldr	r3, [sp, #8]
 801115c:	429d      	cmp	r5, r3
 801115e:	f43f af75 	beq.w	801104c <_dtoa_r+0x47c>
 8011162:	4b2f      	ldr	r3, [pc, #188]	; (8011220 <_dtoa_r+0x650>)
 8011164:	ec51 0b18 	vmov	r0, r1, d8
 8011168:	2200      	movs	r2, #0
 801116a:	f7ef fa55 	bl	8000618 <__aeabi_dmul>
 801116e:	4b2c      	ldr	r3, [pc, #176]	; (8011220 <_dtoa_r+0x650>)
 8011170:	ec41 0b18 	vmov	d8, r0, r1
 8011174:	2200      	movs	r2, #0
 8011176:	4630      	mov	r0, r6
 8011178:	4639      	mov	r1, r7
 801117a:	f7ef fa4d 	bl	8000618 <__aeabi_dmul>
 801117e:	4606      	mov	r6, r0
 8011180:	460f      	mov	r7, r1
 8011182:	e7c4      	b.n	801110e <_dtoa_r+0x53e>
 8011184:	ec51 0b17 	vmov	r0, r1, d7
 8011188:	f7ef fa46 	bl	8000618 <__aeabi_dmul>
 801118c:	9b02      	ldr	r3, [sp, #8]
 801118e:	9d00      	ldr	r5, [sp, #0]
 8011190:	930c      	str	r3, [sp, #48]	; 0x30
 8011192:	ec41 0b18 	vmov	d8, r0, r1
 8011196:	4639      	mov	r1, r7
 8011198:	4630      	mov	r0, r6
 801119a:	f7ef fced 	bl	8000b78 <__aeabi_d2iz>
 801119e:	9011      	str	r0, [sp, #68]	; 0x44
 80111a0:	f7ef f9d0 	bl	8000544 <__aeabi_i2d>
 80111a4:	4602      	mov	r2, r0
 80111a6:	460b      	mov	r3, r1
 80111a8:	4630      	mov	r0, r6
 80111aa:	4639      	mov	r1, r7
 80111ac:	f7ef f87c 	bl	80002a8 <__aeabi_dsub>
 80111b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111b2:	3330      	adds	r3, #48	; 0x30
 80111b4:	f805 3b01 	strb.w	r3, [r5], #1
 80111b8:	9b02      	ldr	r3, [sp, #8]
 80111ba:	429d      	cmp	r5, r3
 80111bc:	4606      	mov	r6, r0
 80111be:	460f      	mov	r7, r1
 80111c0:	f04f 0200 	mov.w	r2, #0
 80111c4:	d134      	bne.n	8011230 <_dtoa_r+0x660>
 80111c6:	4b19      	ldr	r3, [pc, #100]	; (801122c <_dtoa_r+0x65c>)
 80111c8:	ec51 0b18 	vmov	r0, r1, d8
 80111cc:	f7ef f86e 	bl	80002ac <__adddf3>
 80111d0:	4602      	mov	r2, r0
 80111d2:	460b      	mov	r3, r1
 80111d4:	4630      	mov	r0, r6
 80111d6:	4639      	mov	r1, r7
 80111d8:	f7ef fcae 	bl	8000b38 <__aeabi_dcmpgt>
 80111dc:	2800      	cmp	r0, #0
 80111de:	d175      	bne.n	80112cc <_dtoa_r+0x6fc>
 80111e0:	ec53 2b18 	vmov	r2, r3, d8
 80111e4:	4911      	ldr	r1, [pc, #68]	; (801122c <_dtoa_r+0x65c>)
 80111e6:	2000      	movs	r0, #0
 80111e8:	f7ef f85e 	bl	80002a8 <__aeabi_dsub>
 80111ec:	4602      	mov	r2, r0
 80111ee:	460b      	mov	r3, r1
 80111f0:	4630      	mov	r0, r6
 80111f2:	4639      	mov	r1, r7
 80111f4:	f7ef fc82 	bl	8000afc <__aeabi_dcmplt>
 80111f8:	2800      	cmp	r0, #0
 80111fa:	f43f af27 	beq.w	801104c <_dtoa_r+0x47c>
 80111fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011200:	1e6b      	subs	r3, r5, #1
 8011202:	930c      	str	r3, [sp, #48]	; 0x30
 8011204:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011208:	2b30      	cmp	r3, #48	; 0x30
 801120a:	d0f8      	beq.n	80111fe <_dtoa_r+0x62e>
 801120c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011210:	e04a      	b.n	80112a8 <_dtoa_r+0x6d8>
 8011212:	bf00      	nop
 8011214:	08015b80 	.word	0x08015b80
 8011218:	08015b58 	.word	0x08015b58
 801121c:	3ff00000 	.word	0x3ff00000
 8011220:	40240000 	.word	0x40240000
 8011224:	401c0000 	.word	0x401c0000
 8011228:	40140000 	.word	0x40140000
 801122c:	3fe00000 	.word	0x3fe00000
 8011230:	4baf      	ldr	r3, [pc, #700]	; (80114f0 <_dtoa_r+0x920>)
 8011232:	f7ef f9f1 	bl	8000618 <__aeabi_dmul>
 8011236:	4606      	mov	r6, r0
 8011238:	460f      	mov	r7, r1
 801123a:	e7ac      	b.n	8011196 <_dtoa_r+0x5c6>
 801123c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011240:	9d00      	ldr	r5, [sp, #0]
 8011242:	4642      	mov	r2, r8
 8011244:	464b      	mov	r3, r9
 8011246:	4630      	mov	r0, r6
 8011248:	4639      	mov	r1, r7
 801124a:	f7ef fb0f 	bl	800086c <__aeabi_ddiv>
 801124e:	f7ef fc93 	bl	8000b78 <__aeabi_d2iz>
 8011252:	9002      	str	r0, [sp, #8]
 8011254:	f7ef f976 	bl	8000544 <__aeabi_i2d>
 8011258:	4642      	mov	r2, r8
 801125a:	464b      	mov	r3, r9
 801125c:	f7ef f9dc 	bl	8000618 <__aeabi_dmul>
 8011260:	4602      	mov	r2, r0
 8011262:	460b      	mov	r3, r1
 8011264:	4630      	mov	r0, r6
 8011266:	4639      	mov	r1, r7
 8011268:	f7ef f81e 	bl	80002a8 <__aeabi_dsub>
 801126c:	9e02      	ldr	r6, [sp, #8]
 801126e:	9f01      	ldr	r7, [sp, #4]
 8011270:	3630      	adds	r6, #48	; 0x30
 8011272:	f805 6b01 	strb.w	r6, [r5], #1
 8011276:	9e00      	ldr	r6, [sp, #0]
 8011278:	1bae      	subs	r6, r5, r6
 801127a:	42b7      	cmp	r7, r6
 801127c:	4602      	mov	r2, r0
 801127e:	460b      	mov	r3, r1
 8011280:	d137      	bne.n	80112f2 <_dtoa_r+0x722>
 8011282:	f7ef f813 	bl	80002ac <__adddf3>
 8011286:	4642      	mov	r2, r8
 8011288:	464b      	mov	r3, r9
 801128a:	4606      	mov	r6, r0
 801128c:	460f      	mov	r7, r1
 801128e:	f7ef fc53 	bl	8000b38 <__aeabi_dcmpgt>
 8011292:	b9c8      	cbnz	r0, 80112c8 <_dtoa_r+0x6f8>
 8011294:	4642      	mov	r2, r8
 8011296:	464b      	mov	r3, r9
 8011298:	4630      	mov	r0, r6
 801129a:	4639      	mov	r1, r7
 801129c:	f7ef fc24 	bl	8000ae8 <__aeabi_dcmpeq>
 80112a0:	b110      	cbz	r0, 80112a8 <_dtoa_r+0x6d8>
 80112a2:	9b02      	ldr	r3, [sp, #8]
 80112a4:	07d9      	lsls	r1, r3, #31
 80112a6:	d40f      	bmi.n	80112c8 <_dtoa_r+0x6f8>
 80112a8:	4620      	mov	r0, r4
 80112aa:	4659      	mov	r1, fp
 80112ac:	f001 f87e 	bl	80123ac <_Bfree>
 80112b0:	2300      	movs	r3, #0
 80112b2:	702b      	strb	r3, [r5, #0]
 80112b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112b6:	f10a 0001 	add.w	r0, sl, #1
 80112ba:	6018      	str	r0, [r3, #0]
 80112bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112be:	2b00      	cmp	r3, #0
 80112c0:	f43f acd8 	beq.w	8010c74 <_dtoa_r+0xa4>
 80112c4:	601d      	str	r5, [r3, #0]
 80112c6:	e4d5      	b.n	8010c74 <_dtoa_r+0xa4>
 80112c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80112cc:	462b      	mov	r3, r5
 80112ce:	461d      	mov	r5, r3
 80112d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80112d4:	2a39      	cmp	r2, #57	; 0x39
 80112d6:	d108      	bne.n	80112ea <_dtoa_r+0x71a>
 80112d8:	9a00      	ldr	r2, [sp, #0]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d1f7      	bne.n	80112ce <_dtoa_r+0x6fe>
 80112de:	9a07      	ldr	r2, [sp, #28]
 80112e0:	9900      	ldr	r1, [sp, #0]
 80112e2:	3201      	adds	r2, #1
 80112e4:	9207      	str	r2, [sp, #28]
 80112e6:	2230      	movs	r2, #48	; 0x30
 80112e8:	700a      	strb	r2, [r1, #0]
 80112ea:	781a      	ldrb	r2, [r3, #0]
 80112ec:	3201      	adds	r2, #1
 80112ee:	701a      	strb	r2, [r3, #0]
 80112f0:	e78c      	b.n	801120c <_dtoa_r+0x63c>
 80112f2:	4b7f      	ldr	r3, [pc, #508]	; (80114f0 <_dtoa_r+0x920>)
 80112f4:	2200      	movs	r2, #0
 80112f6:	f7ef f98f 	bl	8000618 <__aeabi_dmul>
 80112fa:	2200      	movs	r2, #0
 80112fc:	2300      	movs	r3, #0
 80112fe:	4606      	mov	r6, r0
 8011300:	460f      	mov	r7, r1
 8011302:	f7ef fbf1 	bl	8000ae8 <__aeabi_dcmpeq>
 8011306:	2800      	cmp	r0, #0
 8011308:	d09b      	beq.n	8011242 <_dtoa_r+0x672>
 801130a:	e7cd      	b.n	80112a8 <_dtoa_r+0x6d8>
 801130c:	9a08      	ldr	r2, [sp, #32]
 801130e:	2a00      	cmp	r2, #0
 8011310:	f000 80c4 	beq.w	801149c <_dtoa_r+0x8cc>
 8011314:	9a05      	ldr	r2, [sp, #20]
 8011316:	2a01      	cmp	r2, #1
 8011318:	f300 80a8 	bgt.w	801146c <_dtoa_r+0x89c>
 801131c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801131e:	2a00      	cmp	r2, #0
 8011320:	f000 80a0 	beq.w	8011464 <_dtoa_r+0x894>
 8011324:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011328:	9e06      	ldr	r6, [sp, #24]
 801132a:	4645      	mov	r5, r8
 801132c:	9a04      	ldr	r2, [sp, #16]
 801132e:	2101      	movs	r1, #1
 8011330:	441a      	add	r2, r3
 8011332:	4620      	mov	r0, r4
 8011334:	4498      	add	r8, r3
 8011336:	9204      	str	r2, [sp, #16]
 8011338:	f001 f93e 	bl	80125b8 <__i2b>
 801133c:	4607      	mov	r7, r0
 801133e:	2d00      	cmp	r5, #0
 8011340:	dd0b      	ble.n	801135a <_dtoa_r+0x78a>
 8011342:	9b04      	ldr	r3, [sp, #16]
 8011344:	2b00      	cmp	r3, #0
 8011346:	dd08      	ble.n	801135a <_dtoa_r+0x78a>
 8011348:	42ab      	cmp	r3, r5
 801134a:	9a04      	ldr	r2, [sp, #16]
 801134c:	bfa8      	it	ge
 801134e:	462b      	movge	r3, r5
 8011350:	eba8 0803 	sub.w	r8, r8, r3
 8011354:	1aed      	subs	r5, r5, r3
 8011356:	1ad3      	subs	r3, r2, r3
 8011358:	9304      	str	r3, [sp, #16]
 801135a:	9b06      	ldr	r3, [sp, #24]
 801135c:	b1fb      	cbz	r3, 801139e <_dtoa_r+0x7ce>
 801135e:	9b08      	ldr	r3, [sp, #32]
 8011360:	2b00      	cmp	r3, #0
 8011362:	f000 809f 	beq.w	80114a4 <_dtoa_r+0x8d4>
 8011366:	2e00      	cmp	r6, #0
 8011368:	dd11      	ble.n	801138e <_dtoa_r+0x7be>
 801136a:	4639      	mov	r1, r7
 801136c:	4632      	mov	r2, r6
 801136e:	4620      	mov	r0, r4
 8011370:	f001 f9de 	bl	8012730 <__pow5mult>
 8011374:	465a      	mov	r2, fp
 8011376:	4601      	mov	r1, r0
 8011378:	4607      	mov	r7, r0
 801137a:	4620      	mov	r0, r4
 801137c:	f001 f932 	bl	80125e4 <__multiply>
 8011380:	4659      	mov	r1, fp
 8011382:	9007      	str	r0, [sp, #28]
 8011384:	4620      	mov	r0, r4
 8011386:	f001 f811 	bl	80123ac <_Bfree>
 801138a:	9b07      	ldr	r3, [sp, #28]
 801138c:	469b      	mov	fp, r3
 801138e:	9b06      	ldr	r3, [sp, #24]
 8011390:	1b9a      	subs	r2, r3, r6
 8011392:	d004      	beq.n	801139e <_dtoa_r+0x7ce>
 8011394:	4659      	mov	r1, fp
 8011396:	4620      	mov	r0, r4
 8011398:	f001 f9ca 	bl	8012730 <__pow5mult>
 801139c:	4683      	mov	fp, r0
 801139e:	2101      	movs	r1, #1
 80113a0:	4620      	mov	r0, r4
 80113a2:	f001 f909 	bl	80125b8 <__i2b>
 80113a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	4606      	mov	r6, r0
 80113ac:	dd7c      	ble.n	80114a8 <_dtoa_r+0x8d8>
 80113ae:	461a      	mov	r2, r3
 80113b0:	4601      	mov	r1, r0
 80113b2:	4620      	mov	r0, r4
 80113b4:	f001 f9bc 	bl	8012730 <__pow5mult>
 80113b8:	9b05      	ldr	r3, [sp, #20]
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	4606      	mov	r6, r0
 80113be:	dd76      	ble.n	80114ae <_dtoa_r+0x8de>
 80113c0:	2300      	movs	r3, #0
 80113c2:	9306      	str	r3, [sp, #24]
 80113c4:	6933      	ldr	r3, [r6, #16]
 80113c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80113ca:	6918      	ldr	r0, [r3, #16]
 80113cc:	f001 f8a4 	bl	8012518 <__hi0bits>
 80113d0:	f1c0 0020 	rsb	r0, r0, #32
 80113d4:	9b04      	ldr	r3, [sp, #16]
 80113d6:	4418      	add	r0, r3
 80113d8:	f010 001f 	ands.w	r0, r0, #31
 80113dc:	f000 8086 	beq.w	80114ec <_dtoa_r+0x91c>
 80113e0:	f1c0 0320 	rsb	r3, r0, #32
 80113e4:	2b04      	cmp	r3, #4
 80113e6:	dd7f      	ble.n	80114e8 <_dtoa_r+0x918>
 80113e8:	f1c0 001c 	rsb	r0, r0, #28
 80113ec:	9b04      	ldr	r3, [sp, #16]
 80113ee:	4403      	add	r3, r0
 80113f0:	4480      	add	r8, r0
 80113f2:	4405      	add	r5, r0
 80113f4:	9304      	str	r3, [sp, #16]
 80113f6:	f1b8 0f00 	cmp.w	r8, #0
 80113fa:	dd05      	ble.n	8011408 <_dtoa_r+0x838>
 80113fc:	4659      	mov	r1, fp
 80113fe:	4642      	mov	r2, r8
 8011400:	4620      	mov	r0, r4
 8011402:	f001 f9ef 	bl	80127e4 <__lshift>
 8011406:	4683      	mov	fp, r0
 8011408:	9b04      	ldr	r3, [sp, #16]
 801140a:	2b00      	cmp	r3, #0
 801140c:	dd05      	ble.n	801141a <_dtoa_r+0x84a>
 801140e:	4631      	mov	r1, r6
 8011410:	461a      	mov	r2, r3
 8011412:	4620      	mov	r0, r4
 8011414:	f001 f9e6 	bl	80127e4 <__lshift>
 8011418:	4606      	mov	r6, r0
 801141a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801141c:	2b00      	cmp	r3, #0
 801141e:	d069      	beq.n	80114f4 <_dtoa_r+0x924>
 8011420:	4631      	mov	r1, r6
 8011422:	4658      	mov	r0, fp
 8011424:	f001 fa4a 	bl	80128bc <__mcmp>
 8011428:	2800      	cmp	r0, #0
 801142a:	da63      	bge.n	80114f4 <_dtoa_r+0x924>
 801142c:	2300      	movs	r3, #0
 801142e:	4659      	mov	r1, fp
 8011430:	220a      	movs	r2, #10
 8011432:	4620      	mov	r0, r4
 8011434:	f000 ffdc 	bl	80123f0 <__multadd>
 8011438:	9b08      	ldr	r3, [sp, #32]
 801143a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801143e:	4683      	mov	fp, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	f000 818f 	beq.w	8011764 <_dtoa_r+0xb94>
 8011446:	4639      	mov	r1, r7
 8011448:	2300      	movs	r3, #0
 801144a:	220a      	movs	r2, #10
 801144c:	4620      	mov	r0, r4
 801144e:	f000 ffcf 	bl	80123f0 <__multadd>
 8011452:	f1b9 0f00 	cmp.w	r9, #0
 8011456:	4607      	mov	r7, r0
 8011458:	f300 808e 	bgt.w	8011578 <_dtoa_r+0x9a8>
 801145c:	9b05      	ldr	r3, [sp, #20]
 801145e:	2b02      	cmp	r3, #2
 8011460:	dc50      	bgt.n	8011504 <_dtoa_r+0x934>
 8011462:	e089      	b.n	8011578 <_dtoa_r+0x9a8>
 8011464:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011466:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801146a:	e75d      	b.n	8011328 <_dtoa_r+0x758>
 801146c:	9b01      	ldr	r3, [sp, #4]
 801146e:	1e5e      	subs	r6, r3, #1
 8011470:	9b06      	ldr	r3, [sp, #24]
 8011472:	42b3      	cmp	r3, r6
 8011474:	bfbf      	itttt	lt
 8011476:	9b06      	ldrlt	r3, [sp, #24]
 8011478:	9606      	strlt	r6, [sp, #24]
 801147a:	1af2      	sublt	r2, r6, r3
 801147c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801147e:	bfb6      	itet	lt
 8011480:	189b      	addlt	r3, r3, r2
 8011482:	1b9e      	subge	r6, r3, r6
 8011484:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011486:	9b01      	ldr	r3, [sp, #4]
 8011488:	bfb8      	it	lt
 801148a:	2600      	movlt	r6, #0
 801148c:	2b00      	cmp	r3, #0
 801148e:	bfb5      	itete	lt
 8011490:	eba8 0503 	sublt.w	r5, r8, r3
 8011494:	9b01      	ldrge	r3, [sp, #4]
 8011496:	2300      	movlt	r3, #0
 8011498:	4645      	movge	r5, r8
 801149a:	e747      	b.n	801132c <_dtoa_r+0x75c>
 801149c:	9e06      	ldr	r6, [sp, #24]
 801149e:	9f08      	ldr	r7, [sp, #32]
 80114a0:	4645      	mov	r5, r8
 80114a2:	e74c      	b.n	801133e <_dtoa_r+0x76e>
 80114a4:	9a06      	ldr	r2, [sp, #24]
 80114a6:	e775      	b.n	8011394 <_dtoa_r+0x7c4>
 80114a8:	9b05      	ldr	r3, [sp, #20]
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	dc18      	bgt.n	80114e0 <_dtoa_r+0x910>
 80114ae:	9b02      	ldr	r3, [sp, #8]
 80114b0:	b9b3      	cbnz	r3, 80114e0 <_dtoa_r+0x910>
 80114b2:	9b03      	ldr	r3, [sp, #12]
 80114b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80114b8:	b9a3      	cbnz	r3, 80114e4 <_dtoa_r+0x914>
 80114ba:	9b03      	ldr	r3, [sp, #12]
 80114bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80114c0:	0d1b      	lsrs	r3, r3, #20
 80114c2:	051b      	lsls	r3, r3, #20
 80114c4:	b12b      	cbz	r3, 80114d2 <_dtoa_r+0x902>
 80114c6:	9b04      	ldr	r3, [sp, #16]
 80114c8:	3301      	adds	r3, #1
 80114ca:	9304      	str	r3, [sp, #16]
 80114cc:	f108 0801 	add.w	r8, r8, #1
 80114d0:	2301      	movs	r3, #1
 80114d2:	9306      	str	r3, [sp, #24]
 80114d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	f47f af74 	bne.w	80113c4 <_dtoa_r+0x7f4>
 80114dc:	2001      	movs	r0, #1
 80114de:	e779      	b.n	80113d4 <_dtoa_r+0x804>
 80114e0:	2300      	movs	r3, #0
 80114e2:	e7f6      	b.n	80114d2 <_dtoa_r+0x902>
 80114e4:	9b02      	ldr	r3, [sp, #8]
 80114e6:	e7f4      	b.n	80114d2 <_dtoa_r+0x902>
 80114e8:	d085      	beq.n	80113f6 <_dtoa_r+0x826>
 80114ea:	4618      	mov	r0, r3
 80114ec:	301c      	adds	r0, #28
 80114ee:	e77d      	b.n	80113ec <_dtoa_r+0x81c>
 80114f0:	40240000 	.word	0x40240000
 80114f4:	9b01      	ldr	r3, [sp, #4]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	dc38      	bgt.n	801156c <_dtoa_r+0x99c>
 80114fa:	9b05      	ldr	r3, [sp, #20]
 80114fc:	2b02      	cmp	r3, #2
 80114fe:	dd35      	ble.n	801156c <_dtoa_r+0x99c>
 8011500:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011504:	f1b9 0f00 	cmp.w	r9, #0
 8011508:	d10d      	bne.n	8011526 <_dtoa_r+0x956>
 801150a:	4631      	mov	r1, r6
 801150c:	464b      	mov	r3, r9
 801150e:	2205      	movs	r2, #5
 8011510:	4620      	mov	r0, r4
 8011512:	f000 ff6d 	bl	80123f0 <__multadd>
 8011516:	4601      	mov	r1, r0
 8011518:	4606      	mov	r6, r0
 801151a:	4658      	mov	r0, fp
 801151c:	f001 f9ce 	bl	80128bc <__mcmp>
 8011520:	2800      	cmp	r0, #0
 8011522:	f73f adbd 	bgt.w	80110a0 <_dtoa_r+0x4d0>
 8011526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011528:	9d00      	ldr	r5, [sp, #0]
 801152a:	ea6f 0a03 	mvn.w	sl, r3
 801152e:	f04f 0800 	mov.w	r8, #0
 8011532:	4631      	mov	r1, r6
 8011534:	4620      	mov	r0, r4
 8011536:	f000 ff39 	bl	80123ac <_Bfree>
 801153a:	2f00      	cmp	r7, #0
 801153c:	f43f aeb4 	beq.w	80112a8 <_dtoa_r+0x6d8>
 8011540:	f1b8 0f00 	cmp.w	r8, #0
 8011544:	d005      	beq.n	8011552 <_dtoa_r+0x982>
 8011546:	45b8      	cmp	r8, r7
 8011548:	d003      	beq.n	8011552 <_dtoa_r+0x982>
 801154a:	4641      	mov	r1, r8
 801154c:	4620      	mov	r0, r4
 801154e:	f000 ff2d 	bl	80123ac <_Bfree>
 8011552:	4639      	mov	r1, r7
 8011554:	4620      	mov	r0, r4
 8011556:	f000 ff29 	bl	80123ac <_Bfree>
 801155a:	e6a5      	b.n	80112a8 <_dtoa_r+0x6d8>
 801155c:	2600      	movs	r6, #0
 801155e:	4637      	mov	r7, r6
 8011560:	e7e1      	b.n	8011526 <_dtoa_r+0x956>
 8011562:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011564:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011568:	4637      	mov	r7, r6
 801156a:	e599      	b.n	80110a0 <_dtoa_r+0x4d0>
 801156c:	9b08      	ldr	r3, [sp, #32]
 801156e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011572:	2b00      	cmp	r3, #0
 8011574:	f000 80fd 	beq.w	8011772 <_dtoa_r+0xba2>
 8011578:	2d00      	cmp	r5, #0
 801157a:	dd05      	ble.n	8011588 <_dtoa_r+0x9b8>
 801157c:	4639      	mov	r1, r7
 801157e:	462a      	mov	r2, r5
 8011580:	4620      	mov	r0, r4
 8011582:	f001 f92f 	bl	80127e4 <__lshift>
 8011586:	4607      	mov	r7, r0
 8011588:	9b06      	ldr	r3, [sp, #24]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d05c      	beq.n	8011648 <_dtoa_r+0xa78>
 801158e:	6879      	ldr	r1, [r7, #4]
 8011590:	4620      	mov	r0, r4
 8011592:	f000 fecb 	bl	801232c <_Balloc>
 8011596:	4605      	mov	r5, r0
 8011598:	b928      	cbnz	r0, 80115a6 <_dtoa_r+0x9d6>
 801159a:	4b80      	ldr	r3, [pc, #512]	; (801179c <_dtoa_r+0xbcc>)
 801159c:	4602      	mov	r2, r0
 801159e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80115a2:	f7ff bb2e 	b.w	8010c02 <_dtoa_r+0x32>
 80115a6:	693a      	ldr	r2, [r7, #16]
 80115a8:	3202      	adds	r2, #2
 80115aa:	0092      	lsls	r2, r2, #2
 80115ac:	f107 010c 	add.w	r1, r7, #12
 80115b0:	300c      	adds	r0, #12
 80115b2:	f7fd fa11 	bl	800e9d8 <memcpy>
 80115b6:	2201      	movs	r2, #1
 80115b8:	4629      	mov	r1, r5
 80115ba:	4620      	mov	r0, r4
 80115bc:	f001 f912 	bl	80127e4 <__lshift>
 80115c0:	9b00      	ldr	r3, [sp, #0]
 80115c2:	3301      	adds	r3, #1
 80115c4:	9301      	str	r3, [sp, #4]
 80115c6:	9b00      	ldr	r3, [sp, #0]
 80115c8:	444b      	add	r3, r9
 80115ca:	9307      	str	r3, [sp, #28]
 80115cc:	9b02      	ldr	r3, [sp, #8]
 80115ce:	f003 0301 	and.w	r3, r3, #1
 80115d2:	46b8      	mov	r8, r7
 80115d4:	9306      	str	r3, [sp, #24]
 80115d6:	4607      	mov	r7, r0
 80115d8:	9b01      	ldr	r3, [sp, #4]
 80115da:	4631      	mov	r1, r6
 80115dc:	3b01      	subs	r3, #1
 80115de:	4658      	mov	r0, fp
 80115e0:	9302      	str	r3, [sp, #8]
 80115e2:	f7ff fa69 	bl	8010ab8 <quorem>
 80115e6:	4603      	mov	r3, r0
 80115e8:	3330      	adds	r3, #48	; 0x30
 80115ea:	9004      	str	r0, [sp, #16]
 80115ec:	4641      	mov	r1, r8
 80115ee:	4658      	mov	r0, fp
 80115f0:	9308      	str	r3, [sp, #32]
 80115f2:	f001 f963 	bl	80128bc <__mcmp>
 80115f6:	463a      	mov	r2, r7
 80115f8:	4681      	mov	r9, r0
 80115fa:	4631      	mov	r1, r6
 80115fc:	4620      	mov	r0, r4
 80115fe:	f001 f979 	bl	80128f4 <__mdiff>
 8011602:	68c2      	ldr	r2, [r0, #12]
 8011604:	9b08      	ldr	r3, [sp, #32]
 8011606:	4605      	mov	r5, r0
 8011608:	bb02      	cbnz	r2, 801164c <_dtoa_r+0xa7c>
 801160a:	4601      	mov	r1, r0
 801160c:	4658      	mov	r0, fp
 801160e:	f001 f955 	bl	80128bc <__mcmp>
 8011612:	9b08      	ldr	r3, [sp, #32]
 8011614:	4602      	mov	r2, r0
 8011616:	4629      	mov	r1, r5
 8011618:	4620      	mov	r0, r4
 801161a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801161e:	f000 fec5 	bl	80123ac <_Bfree>
 8011622:	9b05      	ldr	r3, [sp, #20]
 8011624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011626:	9d01      	ldr	r5, [sp, #4]
 8011628:	ea43 0102 	orr.w	r1, r3, r2
 801162c:	9b06      	ldr	r3, [sp, #24]
 801162e:	430b      	orrs	r3, r1
 8011630:	9b08      	ldr	r3, [sp, #32]
 8011632:	d10d      	bne.n	8011650 <_dtoa_r+0xa80>
 8011634:	2b39      	cmp	r3, #57	; 0x39
 8011636:	d029      	beq.n	801168c <_dtoa_r+0xabc>
 8011638:	f1b9 0f00 	cmp.w	r9, #0
 801163c:	dd01      	ble.n	8011642 <_dtoa_r+0xa72>
 801163e:	9b04      	ldr	r3, [sp, #16]
 8011640:	3331      	adds	r3, #49	; 0x31
 8011642:	9a02      	ldr	r2, [sp, #8]
 8011644:	7013      	strb	r3, [r2, #0]
 8011646:	e774      	b.n	8011532 <_dtoa_r+0x962>
 8011648:	4638      	mov	r0, r7
 801164a:	e7b9      	b.n	80115c0 <_dtoa_r+0x9f0>
 801164c:	2201      	movs	r2, #1
 801164e:	e7e2      	b.n	8011616 <_dtoa_r+0xa46>
 8011650:	f1b9 0f00 	cmp.w	r9, #0
 8011654:	db06      	blt.n	8011664 <_dtoa_r+0xa94>
 8011656:	9905      	ldr	r1, [sp, #20]
 8011658:	ea41 0909 	orr.w	r9, r1, r9
 801165c:	9906      	ldr	r1, [sp, #24]
 801165e:	ea59 0101 	orrs.w	r1, r9, r1
 8011662:	d120      	bne.n	80116a6 <_dtoa_r+0xad6>
 8011664:	2a00      	cmp	r2, #0
 8011666:	ddec      	ble.n	8011642 <_dtoa_r+0xa72>
 8011668:	4659      	mov	r1, fp
 801166a:	2201      	movs	r2, #1
 801166c:	4620      	mov	r0, r4
 801166e:	9301      	str	r3, [sp, #4]
 8011670:	f001 f8b8 	bl	80127e4 <__lshift>
 8011674:	4631      	mov	r1, r6
 8011676:	4683      	mov	fp, r0
 8011678:	f001 f920 	bl	80128bc <__mcmp>
 801167c:	2800      	cmp	r0, #0
 801167e:	9b01      	ldr	r3, [sp, #4]
 8011680:	dc02      	bgt.n	8011688 <_dtoa_r+0xab8>
 8011682:	d1de      	bne.n	8011642 <_dtoa_r+0xa72>
 8011684:	07da      	lsls	r2, r3, #31
 8011686:	d5dc      	bpl.n	8011642 <_dtoa_r+0xa72>
 8011688:	2b39      	cmp	r3, #57	; 0x39
 801168a:	d1d8      	bne.n	801163e <_dtoa_r+0xa6e>
 801168c:	9a02      	ldr	r2, [sp, #8]
 801168e:	2339      	movs	r3, #57	; 0x39
 8011690:	7013      	strb	r3, [r2, #0]
 8011692:	462b      	mov	r3, r5
 8011694:	461d      	mov	r5, r3
 8011696:	3b01      	subs	r3, #1
 8011698:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801169c:	2a39      	cmp	r2, #57	; 0x39
 801169e:	d050      	beq.n	8011742 <_dtoa_r+0xb72>
 80116a0:	3201      	adds	r2, #1
 80116a2:	701a      	strb	r2, [r3, #0]
 80116a4:	e745      	b.n	8011532 <_dtoa_r+0x962>
 80116a6:	2a00      	cmp	r2, #0
 80116a8:	dd03      	ble.n	80116b2 <_dtoa_r+0xae2>
 80116aa:	2b39      	cmp	r3, #57	; 0x39
 80116ac:	d0ee      	beq.n	801168c <_dtoa_r+0xabc>
 80116ae:	3301      	adds	r3, #1
 80116b0:	e7c7      	b.n	8011642 <_dtoa_r+0xa72>
 80116b2:	9a01      	ldr	r2, [sp, #4]
 80116b4:	9907      	ldr	r1, [sp, #28]
 80116b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80116ba:	428a      	cmp	r2, r1
 80116bc:	d02a      	beq.n	8011714 <_dtoa_r+0xb44>
 80116be:	4659      	mov	r1, fp
 80116c0:	2300      	movs	r3, #0
 80116c2:	220a      	movs	r2, #10
 80116c4:	4620      	mov	r0, r4
 80116c6:	f000 fe93 	bl	80123f0 <__multadd>
 80116ca:	45b8      	cmp	r8, r7
 80116cc:	4683      	mov	fp, r0
 80116ce:	f04f 0300 	mov.w	r3, #0
 80116d2:	f04f 020a 	mov.w	r2, #10
 80116d6:	4641      	mov	r1, r8
 80116d8:	4620      	mov	r0, r4
 80116da:	d107      	bne.n	80116ec <_dtoa_r+0xb1c>
 80116dc:	f000 fe88 	bl	80123f0 <__multadd>
 80116e0:	4680      	mov	r8, r0
 80116e2:	4607      	mov	r7, r0
 80116e4:	9b01      	ldr	r3, [sp, #4]
 80116e6:	3301      	adds	r3, #1
 80116e8:	9301      	str	r3, [sp, #4]
 80116ea:	e775      	b.n	80115d8 <_dtoa_r+0xa08>
 80116ec:	f000 fe80 	bl	80123f0 <__multadd>
 80116f0:	4639      	mov	r1, r7
 80116f2:	4680      	mov	r8, r0
 80116f4:	2300      	movs	r3, #0
 80116f6:	220a      	movs	r2, #10
 80116f8:	4620      	mov	r0, r4
 80116fa:	f000 fe79 	bl	80123f0 <__multadd>
 80116fe:	4607      	mov	r7, r0
 8011700:	e7f0      	b.n	80116e4 <_dtoa_r+0xb14>
 8011702:	f1b9 0f00 	cmp.w	r9, #0
 8011706:	9a00      	ldr	r2, [sp, #0]
 8011708:	bfcc      	ite	gt
 801170a:	464d      	movgt	r5, r9
 801170c:	2501      	movle	r5, #1
 801170e:	4415      	add	r5, r2
 8011710:	f04f 0800 	mov.w	r8, #0
 8011714:	4659      	mov	r1, fp
 8011716:	2201      	movs	r2, #1
 8011718:	4620      	mov	r0, r4
 801171a:	9301      	str	r3, [sp, #4]
 801171c:	f001 f862 	bl	80127e4 <__lshift>
 8011720:	4631      	mov	r1, r6
 8011722:	4683      	mov	fp, r0
 8011724:	f001 f8ca 	bl	80128bc <__mcmp>
 8011728:	2800      	cmp	r0, #0
 801172a:	dcb2      	bgt.n	8011692 <_dtoa_r+0xac2>
 801172c:	d102      	bne.n	8011734 <_dtoa_r+0xb64>
 801172e:	9b01      	ldr	r3, [sp, #4]
 8011730:	07db      	lsls	r3, r3, #31
 8011732:	d4ae      	bmi.n	8011692 <_dtoa_r+0xac2>
 8011734:	462b      	mov	r3, r5
 8011736:	461d      	mov	r5, r3
 8011738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801173c:	2a30      	cmp	r2, #48	; 0x30
 801173e:	d0fa      	beq.n	8011736 <_dtoa_r+0xb66>
 8011740:	e6f7      	b.n	8011532 <_dtoa_r+0x962>
 8011742:	9a00      	ldr	r2, [sp, #0]
 8011744:	429a      	cmp	r2, r3
 8011746:	d1a5      	bne.n	8011694 <_dtoa_r+0xac4>
 8011748:	f10a 0a01 	add.w	sl, sl, #1
 801174c:	2331      	movs	r3, #49	; 0x31
 801174e:	e779      	b.n	8011644 <_dtoa_r+0xa74>
 8011750:	4b13      	ldr	r3, [pc, #76]	; (80117a0 <_dtoa_r+0xbd0>)
 8011752:	f7ff baaf 	b.w	8010cb4 <_dtoa_r+0xe4>
 8011756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011758:	2b00      	cmp	r3, #0
 801175a:	f47f aa86 	bne.w	8010c6a <_dtoa_r+0x9a>
 801175e:	4b11      	ldr	r3, [pc, #68]	; (80117a4 <_dtoa_r+0xbd4>)
 8011760:	f7ff baa8 	b.w	8010cb4 <_dtoa_r+0xe4>
 8011764:	f1b9 0f00 	cmp.w	r9, #0
 8011768:	dc03      	bgt.n	8011772 <_dtoa_r+0xba2>
 801176a:	9b05      	ldr	r3, [sp, #20]
 801176c:	2b02      	cmp	r3, #2
 801176e:	f73f aec9 	bgt.w	8011504 <_dtoa_r+0x934>
 8011772:	9d00      	ldr	r5, [sp, #0]
 8011774:	4631      	mov	r1, r6
 8011776:	4658      	mov	r0, fp
 8011778:	f7ff f99e 	bl	8010ab8 <quorem>
 801177c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011780:	f805 3b01 	strb.w	r3, [r5], #1
 8011784:	9a00      	ldr	r2, [sp, #0]
 8011786:	1aaa      	subs	r2, r5, r2
 8011788:	4591      	cmp	r9, r2
 801178a:	ddba      	ble.n	8011702 <_dtoa_r+0xb32>
 801178c:	4659      	mov	r1, fp
 801178e:	2300      	movs	r3, #0
 8011790:	220a      	movs	r2, #10
 8011792:	4620      	mov	r0, r4
 8011794:	f000 fe2c 	bl	80123f0 <__multadd>
 8011798:	4683      	mov	fp, r0
 801179a:	e7eb      	b.n	8011774 <_dtoa_r+0xba4>
 801179c:	08015a03 	.word	0x08015a03
 80117a0:	08015c69 	.word	0x08015c69
 80117a4:	08015980 	.word	0x08015980

080117a8 <__sflush_r>:
 80117a8:	898a      	ldrh	r2, [r1, #12]
 80117aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117ae:	4605      	mov	r5, r0
 80117b0:	0710      	lsls	r0, r2, #28
 80117b2:	460c      	mov	r4, r1
 80117b4:	d458      	bmi.n	8011868 <__sflush_r+0xc0>
 80117b6:	684b      	ldr	r3, [r1, #4]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	dc05      	bgt.n	80117c8 <__sflush_r+0x20>
 80117bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80117be:	2b00      	cmp	r3, #0
 80117c0:	dc02      	bgt.n	80117c8 <__sflush_r+0x20>
 80117c2:	2000      	movs	r0, #0
 80117c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117ca:	2e00      	cmp	r6, #0
 80117cc:	d0f9      	beq.n	80117c2 <__sflush_r+0x1a>
 80117ce:	2300      	movs	r3, #0
 80117d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80117d4:	682f      	ldr	r7, [r5, #0]
 80117d6:	602b      	str	r3, [r5, #0]
 80117d8:	d032      	beq.n	8011840 <__sflush_r+0x98>
 80117da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80117dc:	89a3      	ldrh	r3, [r4, #12]
 80117de:	075a      	lsls	r2, r3, #29
 80117e0:	d505      	bpl.n	80117ee <__sflush_r+0x46>
 80117e2:	6863      	ldr	r3, [r4, #4]
 80117e4:	1ac0      	subs	r0, r0, r3
 80117e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117e8:	b10b      	cbz	r3, 80117ee <__sflush_r+0x46>
 80117ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80117ec:	1ac0      	subs	r0, r0, r3
 80117ee:	2300      	movs	r3, #0
 80117f0:	4602      	mov	r2, r0
 80117f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117f4:	6a21      	ldr	r1, [r4, #32]
 80117f6:	4628      	mov	r0, r5
 80117f8:	47b0      	blx	r6
 80117fa:	1c43      	adds	r3, r0, #1
 80117fc:	89a3      	ldrh	r3, [r4, #12]
 80117fe:	d106      	bne.n	801180e <__sflush_r+0x66>
 8011800:	6829      	ldr	r1, [r5, #0]
 8011802:	291d      	cmp	r1, #29
 8011804:	d82c      	bhi.n	8011860 <__sflush_r+0xb8>
 8011806:	4a2a      	ldr	r2, [pc, #168]	; (80118b0 <__sflush_r+0x108>)
 8011808:	40ca      	lsrs	r2, r1
 801180a:	07d6      	lsls	r6, r2, #31
 801180c:	d528      	bpl.n	8011860 <__sflush_r+0xb8>
 801180e:	2200      	movs	r2, #0
 8011810:	6062      	str	r2, [r4, #4]
 8011812:	04d9      	lsls	r1, r3, #19
 8011814:	6922      	ldr	r2, [r4, #16]
 8011816:	6022      	str	r2, [r4, #0]
 8011818:	d504      	bpl.n	8011824 <__sflush_r+0x7c>
 801181a:	1c42      	adds	r2, r0, #1
 801181c:	d101      	bne.n	8011822 <__sflush_r+0x7a>
 801181e:	682b      	ldr	r3, [r5, #0]
 8011820:	b903      	cbnz	r3, 8011824 <__sflush_r+0x7c>
 8011822:	6560      	str	r0, [r4, #84]	; 0x54
 8011824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011826:	602f      	str	r7, [r5, #0]
 8011828:	2900      	cmp	r1, #0
 801182a:	d0ca      	beq.n	80117c2 <__sflush_r+0x1a>
 801182c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011830:	4299      	cmp	r1, r3
 8011832:	d002      	beq.n	801183a <__sflush_r+0x92>
 8011834:	4628      	mov	r0, r5
 8011836:	f7fd f8e5 	bl	800ea04 <_free_r>
 801183a:	2000      	movs	r0, #0
 801183c:	6360      	str	r0, [r4, #52]	; 0x34
 801183e:	e7c1      	b.n	80117c4 <__sflush_r+0x1c>
 8011840:	6a21      	ldr	r1, [r4, #32]
 8011842:	2301      	movs	r3, #1
 8011844:	4628      	mov	r0, r5
 8011846:	47b0      	blx	r6
 8011848:	1c41      	adds	r1, r0, #1
 801184a:	d1c7      	bne.n	80117dc <__sflush_r+0x34>
 801184c:	682b      	ldr	r3, [r5, #0]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d0c4      	beq.n	80117dc <__sflush_r+0x34>
 8011852:	2b1d      	cmp	r3, #29
 8011854:	d001      	beq.n	801185a <__sflush_r+0xb2>
 8011856:	2b16      	cmp	r3, #22
 8011858:	d101      	bne.n	801185e <__sflush_r+0xb6>
 801185a:	602f      	str	r7, [r5, #0]
 801185c:	e7b1      	b.n	80117c2 <__sflush_r+0x1a>
 801185e:	89a3      	ldrh	r3, [r4, #12]
 8011860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011864:	81a3      	strh	r3, [r4, #12]
 8011866:	e7ad      	b.n	80117c4 <__sflush_r+0x1c>
 8011868:	690f      	ldr	r7, [r1, #16]
 801186a:	2f00      	cmp	r7, #0
 801186c:	d0a9      	beq.n	80117c2 <__sflush_r+0x1a>
 801186e:	0793      	lsls	r3, r2, #30
 8011870:	680e      	ldr	r6, [r1, #0]
 8011872:	bf08      	it	eq
 8011874:	694b      	ldreq	r3, [r1, #20]
 8011876:	600f      	str	r7, [r1, #0]
 8011878:	bf18      	it	ne
 801187a:	2300      	movne	r3, #0
 801187c:	eba6 0807 	sub.w	r8, r6, r7
 8011880:	608b      	str	r3, [r1, #8]
 8011882:	f1b8 0f00 	cmp.w	r8, #0
 8011886:	dd9c      	ble.n	80117c2 <__sflush_r+0x1a>
 8011888:	6a21      	ldr	r1, [r4, #32]
 801188a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801188c:	4643      	mov	r3, r8
 801188e:	463a      	mov	r2, r7
 8011890:	4628      	mov	r0, r5
 8011892:	47b0      	blx	r6
 8011894:	2800      	cmp	r0, #0
 8011896:	dc06      	bgt.n	80118a6 <__sflush_r+0xfe>
 8011898:	89a3      	ldrh	r3, [r4, #12]
 801189a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801189e:	81a3      	strh	r3, [r4, #12]
 80118a0:	f04f 30ff 	mov.w	r0, #4294967295
 80118a4:	e78e      	b.n	80117c4 <__sflush_r+0x1c>
 80118a6:	4407      	add	r7, r0
 80118a8:	eba8 0800 	sub.w	r8, r8, r0
 80118ac:	e7e9      	b.n	8011882 <__sflush_r+0xda>
 80118ae:	bf00      	nop
 80118b0:	20400001 	.word	0x20400001

080118b4 <_fflush_r>:
 80118b4:	b538      	push	{r3, r4, r5, lr}
 80118b6:	690b      	ldr	r3, [r1, #16]
 80118b8:	4605      	mov	r5, r0
 80118ba:	460c      	mov	r4, r1
 80118bc:	b913      	cbnz	r3, 80118c4 <_fflush_r+0x10>
 80118be:	2500      	movs	r5, #0
 80118c0:	4628      	mov	r0, r5
 80118c2:	bd38      	pop	{r3, r4, r5, pc}
 80118c4:	b118      	cbz	r0, 80118ce <_fflush_r+0x1a>
 80118c6:	6983      	ldr	r3, [r0, #24]
 80118c8:	b90b      	cbnz	r3, 80118ce <_fflush_r+0x1a>
 80118ca:	f000 f887 	bl	80119dc <__sinit>
 80118ce:	4b14      	ldr	r3, [pc, #80]	; (8011920 <_fflush_r+0x6c>)
 80118d0:	429c      	cmp	r4, r3
 80118d2:	d11b      	bne.n	801190c <_fflush_r+0x58>
 80118d4:	686c      	ldr	r4, [r5, #4]
 80118d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d0ef      	beq.n	80118be <_fflush_r+0xa>
 80118de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80118e0:	07d0      	lsls	r0, r2, #31
 80118e2:	d404      	bmi.n	80118ee <_fflush_r+0x3a>
 80118e4:	0599      	lsls	r1, r3, #22
 80118e6:	d402      	bmi.n	80118ee <_fflush_r+0x3a>
 80118e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118ea:	f000 fc88 	bl	80121fe <__retarget_lock_acquire_recursive>
 80118ee:	4628      	mov	r0, r5
 80118f0:	4621      	mov	r1, r4
 80118f2:	f7ff ff59 	bl	80117a8 <__sflush_r>
 80118f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118f8:	07da      	lsls	r2, r3, #31
 80118fa:	4605      	mov	r5, r0
 80118fc:	d4e0      	bmi.n	80118c0 <_fflush_r+0xc>
 80118fe:	89a3      	ldrh	r3, [r4, #12]
 8011900:	059b      	lsls	r3, r3, #22
 8011902:	d4dd      	bmi.n	80118c0 <_fflush_r+0xc>
 8011904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011906:	f000 fc7b 	bl	8012200 <__retarget_lock_release_recursive>
 801190a:	e7d9      	b.n	80118c0 <_fflush_r+0xc>
 801190c:	4b05      	ldr	r3, [pc, #20]	; (8011924 <_fflush_r+0x70>)
 801190e:	429c      	cmp	r4, r3
 8011910:	d101      	bne.n	8011916 <_fflush_r+0x62>
 8011912:	68ac      	ldr	r4, [r5, #8]
 8011914:	e7df      	b.n	80118d6 <_fflush_r+0x22>
 8011916:	4b04      	ldr	r3, [pc, #16]	; (8011928 <_fflush_r+0x74>)
 8011918:	429c      	cmp	r4, r3
 801191a:	bf08      	it	eq
 801191c:	68ec      	ldreq	r4, [r5, #12]
 801191e:	e7da      	b.n	80118d6 <_fflush_r+0x22>
 8011920:	08015a34 	.word	0x08015a34
 8011924:	08015a54 	.word	0x08015a54
 8011928:	08015a14 	.word	0x08015a14

0801192c <std>:
 801192c:	2300      	movs	r3, #0
 801192e:	b510      	push	{r4, lr}
 8011930:	4604      	mov	r4, r0
 8011932:	e9c0 3300 	strd	r3, r3, [r0]
 8011936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801193a:	6083      	str	r3, [r0, #8]
 801193c:	8181      	strh	r1, [r0, #12]
 801193e:	6643      	str	r3, [r0, #100]	; 0x64
 8011940:	81c2      	strh	r2, [r0, #14]
 8011942:	6183      	str	r3, [r0, #24]
 8011944:	4619      	mov	r1, r3
 8011946:	2208      	movs	r2, #8
 8011948:	305c      	adds	r0, #92	; 0x5c
 801194a:	f7fd f853 	bl	800e9f4 <memset>
 801194e:	4b05      	ldr	r3, [pc, #20]	; (8011964 <std+0x38>)
 8011950:	6263      	str	r3, [r4, #36]	; 0x24
 8011952:	4b05      	ldr	r3, [pc, #20]	; (8011968 <std+0x3c>)
 8011954:	62a3      	str	r3, [r4, #40]	; 0x28
 8011956:	4b05      	ldr	r3, [pc, #20]	; (801196c <std+0x40>)
 8011958:	62e3      	str	r3, [r4, #44]	; 0x2c
 801195a:	4b05      	ldr	r3, [pc, #20]	; (8011970 <std+0x44>)
 801195c:	6224      	str	r4, [r4, #32]
 801195e:	6323      	str	r3, [r4, #48]	; 0x30
 8011960:	bd10      	pop	{r4, pc}
 8011962:	bf00      	nop
 8011964:	0800fa2d 	.word	0x0800fa2d
 8011968:	0800fa53 	.word	0x0800fa53
 801196c:	0800fa8b 	.word	0x0800fa8b
 8011970:	0800faaf 	.word	0x0800faaf

08011974 <_cleanup_r>:
 8011974:	4901      	ldr	r1, [pc, #4]	; (801197c <_cleanup_r+0x8>)
 8011976:	f000 b8af 	b.w	8011ad8 <_fwalk_reent>
 801197a:	bf00      	nop
 801197c:	080118b5 	.word	0x080118b5

08011980 <__sfmoreglue>:
 8011980:	b570      	push	{r4, r5, r6, lr}
 8011982:	1e4a      	subs	r2, r1, #1
 8011984:	2568      	movs	r5, #104	; 0x68
 8011986:	4355      	muls	r5, r2
 8011988:	460e      	mov	r6, r1
 801198a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801198e:	f7fd f889 	bl	800eaa4 <_malloc_r>
 8011992:	4604      	mov	r4, r0
 8011994:	b140      	cbz	r0, 80119a8 <__sfmoreglue+0x28>
 8011996:	2100      	movs	r1, #0
 8011998:	e9c0 1600 	strd	r1, r6, [r0]
 801199c:	300c      	adds	r0, #12
 801199e:	60a0      	str	r0, [r4, #8]
 80119a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80119a4:	f7fd f826 	bl	800e9f4 <memset>
 80119a8:	4620      	mov	r0, r4
 80119aa:	bd70      	pop	{r4, r5, r6, pc}

080119ac <__sfp_lock_acquire>:
 80119ac:	4801      	ldr	r0, [pc, #4]	; (80119b4 <__sfp_lock_acquire+0x8>)
 80119ae:	f000 bc26 	b.w	80121fe <__retarget_lock_acquire_recursive>
 80119b2:	bf00      	nop
 80119b4:	20001a20 	.word	0x20001a20

080119b8 <__sfp_lock_release>:
 80119b8:	4801      	ldr	r0, [pc, #4]	; (80119c0 <__sfp_lock_release+0x8>)
 80119ba:	f000 bc21 	b.w	8012200 <__retarget_lock_release_recursive>
 80119be:	bf00      	nop
 80119c0:	20001a20 	.word	0x20001a20

080119c4 <__sinit_lock_acquire>:
 80119c4:	4801      	ldr	r0, [pc, #4]	; (80119cc <__sinit_lock_acquire+0x8>)
 80119c6:	f000 bc1a 	b.w	80121fe <__retarget_lock_acquire_recursive>
 80119ca:	bf00      	nop
 80119cc:	20001a1b 	.word	0x20001a1b

080119d0 <__sinit_lock_release>:
 80119d0:	4801      	ldr	r0, [pc, #4]	; (80119d8 <__sinit_lock_release+0x8>)
 80119d2:	f000 bc15 	b.w	8012200 <__retarget_lock_release_recursive>
 80119d6:	bf00      	nop
 80119d8:	20001a1b 	.word	0x20001a1b

080119dc <__sinit>:
 80119dc:	b510      	push	{r4, lr}
 80119de:	4604      	mov	r4, r0
 80119e0:	f7ff fff0 	bl	80119c4 <__sinit_lock_acquire>
 80119e4:	69a3      	ldr	r3, [r4, #24]
 80119e6:	b11b      	cbz	r3, 80119f0 <__sinit+0x14>
 80119e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119ec:	f7ff bff0 	b.w	80119d0 <__sinit_lock_release>
 80119f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80119f4:	6523      	str	r3, [r4, #80]	; 0x50
 80119f6:	4b13      	ldr	r3, [pc, #76]	; (8011a44 <__sinit+0x68>)
 80119f8:	4a13      	ldr	r2, [pc, #76]	; (8011a48 <__sinit+0x6c>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80119fe:	42a3      	cmp	r3, r4
 8011a00:	bf04      	itt	eq
 8011a02:	2301      	moveq	r3, #1
 8011a04:	61a3      	streq	r3, [r4, #24]
 8011a06:	4620      	mov	r0, r4
 8011a08:	f000 f820 	bl	8011a4c <__sfp>
 8011a0c:	6060      	str	r0, [r4, #4]
 8011a0e:	4620      	mov	r0, r4
 8011a10:	f000 f81c 	bl	8011a4c <__sfp>
 8011a14:	60a0      	str	r0, [r4, #8]
 8011a16:	4620      	mov	r0, r4
 8011a18:	f000 f818 	bl	8011a4c <__sfp>
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	60e0      	str	r0, [r4, #12]
 8011a20:	2104      	movs	r1, #4
 8011a22:	6860      	ldr	r0, [r4, #4]
 8011a24:	f7ff ff82 	bl	801192c <std>
 8011a28:	68a0      	ldr	r0, [r4, #8]
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	2109      	movs	r1, #9
 8011a2e:	f7ff ff7d 	bl	801192c <std>
 8011a32:	68e0      	ldr	r0, [r4, #12]
 8011a34:	2202      	movs	r2, #2
 8011a36:	2112      	movs	r1, #18
 8011a38:	f7ff ff78 	bl	801192c <std>
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	61a3      	str	r3, [r4, #24]
 8011a40:	e7d2      	b.n	80119e8 <__sinit+0xc>
 8011a42:	bf00      	nop
 8011a44:	080158f0 	.word	0x080158f0
 8011a48:	08011975 	.word	0x08011975

08011a4c <__sfp>:
 8011a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a4e:	4607      	mov	r7, r0
 8011a50:	f7ff ffac 	bl	80119ac <__sfp_lock_acquire>
 8011a54:	4b1e      	ldr	r3, [pc, #120]	; (8011ad0 <__sfp+0x84>)
 8011a56:	681e      	ldr	r6, [r3, #0]
 8011a58:	69b3      	ldr	r3, [r6, #24]
 8011a5a:	b913      	cbnz	r3, 8011a62 <__sfp+0x16>
 8011a5c:	4630      	mov	r0, r6
 8011a5e:	f7ff ffbd 	bl	80119dc <__sinit>
 8011a62:	3648      	adds	r6, #72	; 0x48
 8011a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a68:	3b01      	subs	r3, #1
 8011a6a:	d503      	bpl.n	8011a74 <__sfp+0x28>
 8011a6c:	6833      	ldr	r3, [r6, #0]
 8011a6e:	b30b      	cbz	r3, 8011ab4 <__sfp+0x68>
 8011a70:	6836      	ldr	r6, [r6, #0]
 8011a72:	e7f7      	b.n	8011a64 <__sfp+0x18>
 8011a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a78:	b9d5      	cbnz	r5, 8011ab0 <__sfp+0x64>
 8011a7a:	4b16      	ldr	r3, [pc, #88]	; (8011ad4 <__sfp+0x88>)
 8011a7c:	60e3      	str	r3, [r4, #12]
 8011a7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011a82:	6665      	str	r5, [r4, #100]	; 0x64
 8011a84:	f000 fbba 	bl	80121fc <__retarget_lock_init_recursive>
 8011a88:	f7ff ff96 	bl	80119b8 <__sfp_lock_release>
 8011a8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011a90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011a94:	6025      	str	r5, [r4, #0]
 8011a96:	61a5      	str	r5, [r4, #24]
 8011a98:	2208      	movs	r2, #8
 8011a9a:	4629      	mov	r1, r5
 8011a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011aa0:	f7fc ffa8 	bl	800e9f4 <memset>
 8011aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011aa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011aac:	4620      	mov	r0, r4
 8011aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ab0:	3468      	adds	r4, #104	; 0x68
 8011ab2:	e7d9      	b.n	8011a68 <__sfp+0x1c>
 8011ab4:	2104      	movs	r1, #4
 8011ab6:	4638      	mov	r0, r7
 8011ab8:	f7ff ff62 	bl	8011980 <__sfmoreglue>
 8011abc:	4604      	mov	r4, r0
 8011abe:	6030      	str	r0, [r6, #0]
 8011ac0:	2800      	cmp	r0, #0
 8011ac2:	d1d5      	bne.n	8011a70 <__sfp+0x24>
 8011ac4:	f7ff ff78 	bl	80119b8 <__sfp_lock_release>
 8011ac8:	230c      	movs	r3, #12
 8011aca:	603b      	str	r3, [r7, #0]
 8011acc:	e7ee      	b.n	8011aac <__sfp+0x60>
 8011ace:	bf00      	nop
 8011ad0:	080158f0 	.word	0x080158f0
 8011ad4:	ffff0001 	.word	0xffff0001

08011ad8 <_fwalk_reent>:
 8011ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011adc:	4606      	mov	r6, r0
 8011ade:	4688      	mov	r8, r1
 8011ae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ae4:	2700      	movs	r7, #0
 8011ae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011aea:	f1b9 0901 	subs.w	r9, r9, #1
 8011aee:	d505      	bpl.n	8011afc <_fwalk_reent+0x24>
 8011af0:	6824      	ldr	r4, [r4, #0]
 8011af2:	2c00      	cmp	r4, #0
 8011af4:	d1f7      	bne.n	8011ae6 <_fwalk_reent+0xe>
 8011af6:	4638      	mov	r0, r7
 8011af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011afc:	89ab      	ldrh	r3, [r5, #12]
 8011afe:	2b01      	cmp	r3, #1
 8011b00:	d907      	bls.n	8011b12 <_fwalk_reent+0x3a>
 8011b02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b06:	3301      	adds	r3, #1
 8011b08:	d003      	beq.n	8011b12 <_fwalk_reent+0x3a>
 8011b0a:	4629      	mov	r1, r5
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	47c0      	blx	r8
 8011b10:	4307      	orrs	r7, r0
 8011b12:	3568      	adds	r5, #104	; 0x68
 8011b14:	e7e9      	b.n	8011aea <_fwalk_reent+0x12>

08011b16 <rshift>:
 8011b16:	6903      	ldr	r3, [r0, #16]
 8011b18:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b20:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011b24:	f100 0414 	add.w	r4, r0, #20
 8011b28:	dd45      	ble.n	8011bb6 <rshift+0xa0>
 8011b2a:	f011 011f 	ands.w	r1, r1, #31
 8011b2e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011b32:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011b36:	d10c      	bne.n	8011b52 <rshift+0x3c>
 8011b38:	f100 0710 	add.w	r7, r0, #16
 8011b3c:	4629      	mov	r1, r5
 8011b3e:	42b1      	cmp	r1, r6
 8011b40:	d334      	bcc.n	8011bac <rshift+0x96>
 8011b42:	1a9b      	subs	r3, r3, r2
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	1eea      	subs	r2, r5, #3
 8011b48:	4296      	cmp	r6, r2
 8011b4a:	bf38      	it	cc
 8011b4c:	2300      	movcc	r3, #0
 8011b4e:	4423      	add	r3, r4
 8011b50:	e015      	b.n	8011b7e <rshift+0x68>
 8011b52:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011b56:	f1c1 0820 	rsb	r8, r1, #32
 8011b5a:	40cf      	lsrs	r7, r1
 8011b5c:	f105 0e04 	add.w	lr, r5, #4
 8011b60:	46a1      	mov	r9, r4
 8011b62:	4576      	cmp	r6, lr
 8011b64:	46f4      	mov	ip, lr
 8011b66:	d815      	bhi.n	8011b94 <rshift+0x7e>
 8011b68:	1a9b      	subs	r3, r3, r2
 8011b6a:	009a      	lsls	r2, r3, #2
 8011b6c:	3a04      	subs	r2, #4
 8011b6e:	3501      	adds	r5, #1
 8011b70:	42ae      	cmp	r6, r5
 8011b72:	bf38      	it	cc
 8011b74:	2200      	movcc	r2, #0
 8011b76:	18a3      	adds	r3, r4, r2
 8011b78:	50a7      	str	r7, [r4, r2]
 8011b7a:	b107      	cbz	r7, 8011b7e <rshift+0x68>
 8011b7c:	3304      	adds	r3, #4
 8011b7e:	1b1a      	subs	r2, r3, r4
 8011b80:	42a3      	cmp	r3, r4
 8011b82:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011b86:	bf08      	it	eq
 8011b88:	2300      	moveq	r3, #0
 8011b8a:	6102      	str	r2, [r0, #16]
 8011b8c:	bf08      	it	eq
 8011b8e:	6143      	streq	r3, [r0, #20]
 8011b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b94:	f8dc c000 	ldr.w	ip, [ip]
 8011b98:	fa0c fc08 	lsl.w	ip, ip, r8
 8011b9c:	ea4c 0707 	orr.w	r7, ip, r7
 8011ba0:	f849 7b04 	str.w	r7, [r9], #4
 8011ba4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011ba8:	40cf      	lsrs	r7, r1
 8011baa:	e7da      	b.n	8011b62 <rshift+0x4c>
 8011bac:	f851 cb04 	ldr.w	ip, [r1], #4
 8011bb0:	f847 cf04 	str.w	ip, [r7, #4]!
 8011bb4:	e7c3      	b.n	8011b3e <rshift+0x28>
 8011bb6:	4623      	mov	r3, r4
 8011bb8:	e7e1      	b.n	8011b7e <rshift+0x68>

08011bba <__hexdig_fun>:
 8011bba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011bbe:	2b09      	cmp	r3, #9
 8011bc0:	d802      	bhi.n	8011bc8 <__hexdig_fun+0xe>
 8011bc2:	3820      	subs	r0, #32
 8011bc4:	b2c0      	uxtb	r0, r0
 8011bc6:	4770      	bx	lr
 8011bc8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011bcc:	2b05      	cmp	r3, #5
 8011bce:	d801      	bhi.n	8011bd4 <__hexdig_fun+0x1a>
 8011bd0:	3847      	subs	r0, #71	; 0x47
 8011bd2:	e7f7      	b.n	8011bc4 <__hexdig_fun+0xa>
 8011bd4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011bd8:	2b05      	cmp	r3, #5
 8011bda:	d801      	bhi.n	8011be0 <__hexdig_fun+0x26>
 8011bdc:	3827      	subs	r0, #39	; 0x27
 8011bde:	e7f1      	b.n	8011bc4 <__hexdig_fun+0xa>
 8011be0:	2000      	movs	r0, #0
 8011be2:	4770      	bx	lr

08011be4 <__gethex>:
 8011be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be8:	ed2d 8b02 	vpush	{d8}
 8011bec:	b089      	sub	sp, #36	; 0x24
 8011bee:	ee08 0a10 	vmov	s16, r0
 8011bf2:	9304      	str	r3, [sp, #16]
 8011bf4:	4bbc      	ldr	r3, [pc, #752]	; (8011ee8 <__gethex+0x304>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	9301      	str	r3, [sp, #4]
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	468b      	mov	fp, r1
 8011bfe:	4690      	mov	r8, r2
 8011c00:	f7ee faf6 	bl	80001f0 <strlen>
 8011c04:	9b01      	ldr	r3, [sp, #4]
 8011c06:	f8db 2000 	ldr.w	r2, [fp]
 8011c0a:	4403      	add	r3, r0
 8011c0c:	4682      	mov	sl, r0
 8011c0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011c12:	9305      	str	r3, [sp, #20]
 8011c14:	1c93      	adds	r3, r2, #2
 8011c16:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011c1a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011c1e:	32fe      	adds	r2, #254	; 0xfe
 8011c20:	18d1      	adds	r1, r2, r3
 8011c22:	461f      	mov	r7, r3
 8011c24:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011c28:	9100      	str	r1, [sp, #0]
 8011c2a:	2830      	cmp	r0, #48	; 0x30
 8011c2c:	d0f8      	beq.n	8011c20 <__gethex+0x3c>
 8011c2e:	f7ff ffc4 	bl	8011bba <__hexdig_fun>
 8011c32:	4604      	mov	r4, r0
 8011c34:	2800      	cmp	r0, #0
 8011c36:	d13a      	bne.n	8011cae <__gethex+0xca>
 8011c38:	9901      	ldr	r1, [sp, #4]
 8011c3a:	4652      	mov	r2, sl
 8011c3c:	4638      	mov	r0, r7
 8011c3e:	f7fd ff4f 	bl	800fae0 <strncmp>
 8011c42:	4605      	mov	r5, r0
 8011c44:	2800      	cmp	r0, #0
 8011c46:	d168      	bne.n	8011d1a <__gethex+0x136>
 8011c48:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011c4c:	eb07 060a 	add.w	r6, r7, sl
 8011c50:	f7ff ffb3 	bl	8011bba <__hexdig_fun>
 8011c54:	2800      	cmp	r0, #0
 8011c56:	d062      	beq.n	8011d1e <__gethex+0x13a>
 8011c58:	4633      	mov	r3, r6
 8011c5a:	7818      	ldrb	r0, [r3, #0]
 8011c5c:	2830      	cmp	r0, #48	; 0x30
 8011c5e:	461f      	mov	r7, r3
 8011c60:	f103 0301 	add.w	r3, r3, #1
 8011c64:	d0f9      	beq.n	8011c5a <__gethex+0x76>
 8011c66:	f7ff ffa8 	bl	8011bba <__hexdig_fun>
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	fab0 f480 	clz	r4, r0
 8011c70:	0964      	lsrs	r4, r4, #5
 8011c72:	4635      	mov	r5, r6
 8011c74:	9300      	str	r3, [sp, #0]
 8011c76:	463a      	mov	r2, r7
 8011c78:	4616      	mov	r6, r2
 8011c7a:	3201      	adds	r2, #1
 8011c7c:	7830      	ldrb	r0, [r6, #0]
 8011c7e:	f7ff ff9c 	bl	8011bba <__hexdig_fun>
 8011c82:	2800      	cmp	r0, #0
 8011c84:	d1f8      	bne.n	8011c78 <__gethex+0x94>
 8011c86:	9901      	ldr	r1, [sp, #4]
 8011c88:	4652      	mov	r2, sl
 8011c8a:	4630      	mov	r0, r6
 8011c8c:	f7fd ff28 	bl	800fae0 <strncmp>
 8011c90:	b980      	cbnz	r0, 8011cb4 <__gethex+0xd0>
 8011c92:	b94d      	cbnz	r5, 8011ca8 <__gethex+0xc4>
 8011c94:	eb06 050a 	add.w	r5, r6, sl
 8011c98:	462a      	mov	r2, r5
 8011c9a:	4616      	mov	r6, r2
 8011c9c:	3201      	adds	r2, #1
 8011c9e:	7830      	ldrb	r0, [r6, #0]
 8011ca0:	f7ff ff8b 	bl	8011bba <__hexdig_fun>
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	d1f8      	bne.n	8011c9a <__gethex+0xb6>
 8011ca8:	1bad      	subs	r5, r5, r6
 8011caa:	00ad      	lsls	r5, r5, #2
 8011cac:	e004      	b.n	8011cb8 <__gethex+0xd4>
 8011cae:	2400      	movs	r4, #0
 8011cb0:	4625      	mov	r5, r4
 8011cb2:	e7e0      	b.n	8011c76 <__gethex+0x92>
 8011cb4:	2d00      	cmp	r5, #0
 8011cb6:	d1f7      	bne.n	8011ca8 <__gethex+0xc4>
 8011cb8:	7833      	ldrb	r3, [r6, #0]
 8011cba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011cbe:	2b50      	cmp	r3, #80	; 0x50
 8011cc0:	d13b      	bne.n	8011d3a <__gethex+0x156>
 8011cc2:	7873      	ldrb	r3, [r6, #1]
 8011cc4:	2b2b      	cmp	r3, #43	; 0x2b
 8011cc6:	d02c      	beq.n	8011d22 <__gethex+0x13e>
 8011cc8:	2b2d      	cmp	r3, #45	; 0x2d
 8011cca:	d02e      	beq.n	8011d2a <__gethex+0x146>
 8011ccc:	1c71      	adds	r1, r6, #1
 8011cce:	f04f 0900 	mov.w	r9, #0
 8011cd2:	7808      	ldrb	r0, [r1, #0]
 8011cd4:	f7ff ff71 	bl	8011bba <__hexdig_fun>
 8011cd8:	1e43      	subs	r3, r0, #1
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	2b18      	cmp	r3, #24
 8011cde:	d82c      	bhi.n	8011d3a <__gethex+0x156>
 8011ce0:	f1a0 0210 	sub.w	r2, r0, #16
 8011ce4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011ce8:	f7ff ff67 	bl	8011bba <__hexdig_fun>
 8011cec:	1e43      	subs	r3, r0, #1
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	2b18      	cmp	r3, #24
 8011cf2:	d91d      	bls.n	8011d30 <__gethex+0x14c>
 8011cf4:	f1b9 0f00 	cmp.w	r9, #0
 8011cf8:	d000      	beq.n	8011cfc <__gethex+0x118>
 8011cfa:	4252      	negs	r2, r2
 8011cfc:	4415      	add	r5, r2
 8011cfe:	f8cb 1000 	str.w	r1, [fp]
 8011d02:	b1e4      	cbz	r4, 8011d3e <__gethex+0x15a>
 8011d04:	9b00      	ldr	r3, [sp, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	bf14      	ite	ne
 8011d0a:	2700      	movne	r7, #0
 8011d0c:	2706      	moveq	r7, #6
 8011d0e:	4638      	mov	r0, r7
 8011d10:	b009      	add	sp, #36	; 0x24
 8011d12:	ecbd 8b02 	vpop	{d8}
 8011d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d1a:	463e      	mov	r6, r7
 8011d1c:	4625      	mov	r5, r4
 8011d1e:	2401      	movs	r4, #1
 8011d20:	e7ca      	b.n	8011cb8 <__gethex+0xd4>
 8011d22:	f04f 0900 	mov.w	r9, #0
 8011d26:	1cb1      	adds	r1, r6, #2
 8011d28:	e7d3      	b.n	8011cd2 <__gethex+0xee>
 8011d2a:	f04f 0901 	mov.w	r9, #1
 8011d2e:	e7fa      	b.n	8011d26 <__gethex+0x142>
 8011d30:	230a      	movs	r3, #10
 8011d32:	fb03 0202 	mla	r2, r3, r2, r0
 8011d36:	3a10      	subs	r2, #16
 8011d38:	e7d4      	b.n	8011ce4 <__gethex+0x100>
 8011d3a:	4631      	mov	r1, r6
 8011d3c:	e7df      	b.n	8011cfe <__gethex+0x11a>
 8011d3e:	1bf3      	subs	r3, r6, r7
 8011d40:	3b01      	subs	r3, #1
 8011d42:	4621      	mov	r1, r4
 8011d44:	2b07      	cmp	r3, #7
 8011d46:	dc0b      	bgt.n	8011d60 <__gethex+0x17c>
 8011d48:	ee18 0a10 	vmov	r0, s16
 8011d4c:	f000 faee 	bl	801232c <_Balloc>
 8011d50:	4604      	mov	r4, r0
 8011d52:	b940      	cbnz	r0, 8011d66 <__gethex+0x182>
 8011d54:	4b65      	ldr	r3, [pc, #404]	; (8011eec <__gethex+0x308>)
 8011d56:	4602      	mov	r2, r0
 8011d58:	21de      	movs	r1, #222	; 0xde
 8011d5a:	4865      	ldr	r0, [pc, #404]	; (8011ef0 <__gethex+0x30c>)
 8011d5c:	f001 fea0 	bl	8013aa0 <__assert_func>
 8011d60:	3101      	adds	r1, #1
 8011d62:	105b      	asrs	r3, r3, #1
 8011d64:	e7ee      	b.n	8011d44 <__gethex+0x160>
 8011d66:	f100 0914 	add.w	r9, r0, #20
 8011d6a:	f04f 0b00 	mov.w	fp, #0
 8011d6e:	f1ca 0301 	rsb	r3, sl, #1
 8011d72:	f8cd 9008 	str.w	r9, [sp, #8]
 8011d76:	f8cd b000 	str.w	fp, [sp]
 8011d7a:	9306      	str	r3, [sp, #24]
 8011d7c:	42b7      	cmp	r7, r6
 8011d7e:	d340      	bcc.n	8011e02 <__gethex+0x21e>
 8011d80:	9802      	ldr	r0, [sp, #8]
 8011d82:	9b00      	ldr	r3, [sp, #0]
 8011d84:	f840 3b04 	str.w	r3, [r0], #4
 8011d88:	eba0 0009 	sub.w	r0, r0, r9
 8011d8c:	1080      	asrs	r0, r0, #2
 8011d8e:	0146      	lsls	r6, r0, #5
 8011d90:	6120      	str	r0, [r4, #16]
 8011d92:	4618      	mov	r0, r3
 8011d94:	f000 fbc0 	bl	8012518 <__hi0bits>
 8011d98:	1a30      	subs	r0, r6, r0
 8011d9a:	f8d8 6000 	ldr.w	r6, [r8]
 8011d9e:	42b0      	cmp	r0, r6
 8011da0:	dd63      	ble.n	8011e6a <__gethex+0x286>
 8011da2:	1b87      	subs	r7, r0, r6
 8011da4:	4639      	mov	r1, r7
 8011da6:	4620      	mov	r0, r4
 8011da8:	f000 ff5a 	bl	8012c60 <__any_on>
 8011dac:	4682      	mov	sl, r0
 8011dae:	b1a8      	cbz	r0, 8011ddc <__gethex+0x1f8>
 8011db0:	1e7b      	subs	r3, r7, #1
 8011db2:	1159      	asrs	r1, r3, #5
 8011db4:	f003 021f 	and.w	r2, r3, #31
 8011db8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011dbc:	f04f 0a01 	mov.w	sl, #1
 8011dc0:	fa0a f202 	lsl.w	r2, sl, r2
 8011dc4:	420a      	tst	r2, r1
 8011dc6:	d009      	beq.n	8011ddc <__gethex+0x1f8>
 8011dc8:	4553      	cmp	r3, sl
 8011dca:	dd05      	ble.n	8011dd8 <__gethex+0x1f4>
 8011dcc:	1eb9      	subs	r1, r7, #2
 8011dce:	4620      	mov	r0, r4
 8011dd0:	f000 ff46 	bl	8012c60 <__any_on>
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d145      	bne.n	8011e64 <__gethex+0x280>
 8011dd8:	f04f 0a02 	mov.w	sl, #2
 8011ddc:	4639      	mov	r1, r7
 8011dde:	4620      	mov	r0, r4
 8011de0:	f7ff fe99 	bl	8011b16 <rshift>
 8011de4:	443d      	add	r5, r7
 8011de6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011dea:	42ab      	cmp	r3, r5
 8011dec:	da4c      	bge.n	8011e88 <__gethex+0x2a4>
 8011dee:	ee18 0a10 	vmov	r0, s16
 8011df2:	4621      	mov	r1, r4
 8011df4:	f000 fada 	bl	80123ac <_Bfree>
 8011df8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	6013      	str	r3, [r2, #0]
 8011dfe:	27a3      	movs	r7, #163	; 0xa3
 8011e00:	e785      	b.n	8011d0e <__gethex+0x12a>
 8011e02:	1e73      	subs	r3, r6, #1
 8011e04:	9a05      	ldr	r2, [sp, #20]
 8011e06:	9303      	str	r3, [sp, #12]
 8011e08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	d019      	beq.n	8011e44 <__gethex+0x260>
 8011e10:	f1bb 0f20 	cmp.w	fp, #32
 8011e14:	d107      	bne.n	8011e26 <__gethex+0x242>
 8011e16:	9b02      	ldr	r3, [sp, #8]
 8011e18:	9a00      	ldr	r2, [sp, #0]
 8011e1a:	f843 2b04 	str.w	r2, [r3], #4
 8011e1e:	9302      	str	r3, [sp, #8]
 8011e20:	2300      	movs	r3, #0
 8011e22:	9300      	str	r3, [sp, #0]
 8011e24:	469b      	mov	fp, r3
 8011e26:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011e2a:	f7ff fec6 	bl	8011bba <__hexdig_fun>
 8011e2e:	9b00      	ldr	r3, [sp, #0]
 8011e30:	f000 000f 	and.w	r0, r0, #15
 8011e34:	fa00 f00b 	lsl.w	r0, r0, fp
 8011e38:	4303      	orrs	r3, r0
 8011e3a:	9300      	str	r3, [sp, #0]
 8011e3c:	f10b 0b04 	add.w	fp, fp, #4
 8011e40:	9b03      	ldr	r3, [sp, #12]
 8011e42:	e00d      	b.n	8011e60 <__gethex+0x27c>
 8011e44:	9b03      	ldr	r3, [sp, #12]
 8011e46:	9a06      	ldr	r2, [sp, #24]
 8011e48:	4413      	add	r3, r2
 8011e4a:	42bb      	cmp	r3, r7
 8011e4c:	d3e0      	bcc.n	8011e10 <__gethex+0x22c>
 8011e4e:	4618      	mov	r0, r3
 8011e50:	9901      	ldr	r1, [sp, #4]
 8011e52:	9307      	str	r3, [sp, #28]
 8011e54:	4652      	mov	r2, sl
 8011e56:	f7fd fe43 	bl	800fae0 <strncmp>
 8011e5a:	9b07      	ldr	r3, [sp, #28]
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	d1d7      	bne.n	8011e10 <__gethex+0x22c>
 8011e60:	461e      	mov	r6, r3
 8011e62:	e78b      	b.n	8011d7c <__gethex+0x198>
 8011e64:	f04f 0a03 	mov.w	sl, #3
 8011e68:	e7b8      	b.n	8011ddc <__gethex+0x1f8>
 8011e6a:	da0a      	bge.n	8011e82 <__gethex+0x29e>
 8011e6c:	1a37      	subs	r7, r6, r0
 8011e6e:	4621      	mov	r1, r4
 8011e70:	ee18 0a10 	vmov	r0, s16
 8011e74:	463a      	mov	r2, r7
 8011e76:	f000 fcb5 	bl	80127e4 <__lshift>
 8011e7a:	1bed      	subs	r5, r5, r7
 8011e7c:	4604      	mov	r4, r0
 8011e7e:	f100 0914 	add.w	r9, r0, #20
 8011e82:	f04f 0a00 	mov.w	sl, #0
 8011e86:	e7ae      	b.n	8011de6 <__gethex+0x202>
 8011e88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011e8c:	42a8      	cmp	r0, r5
 8011e8e:	dd72      	ble.n	8011f76 <__gethex+0x392>
 8011e90:	1b45      	subs	r5, r0, r5
 8011e92:	42ae      	cmp	r6, r5
 8011e94:	dc36      	bgt.n	8011f04 <__gethex+0x320>
 8011e96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011e9a:	2b02      	cmp	r3, #2
 8011e9c:	d02a      	beq.n	8011ef4 <__gethex+0x310>
 8011e9e:	2b03      	cmp	r3, #3
 8011ea0:	d02c      	beq.n	8011efc <__gethex+0x318>
 8011ea2:	2b01      	cmp	r3, #1
 8011ea4:	d115      	bne.n	8011ed2 <__gethex+0x2ee>
 8011ea6:	42ae      	cmp	r6, r5
 8011ea8:	d113      	bne.n	8011ed2 <__gethex+0x2ee>
 8011eaa:	2e01      	cmp	r6, #1
 8011eac:	d10b      	bne.n	8011ec6 <__gethex+0x2e2>
 8011eae:	9a04      	ldr	r2, [sp, #16]
 8011eb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011eb4:	6013      	str	r3, [r2, #0]
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	6123      	str	r3, [r4, #16]
 8011eba:	f8c9 3000 	str.w	r3, [r9]
 8011ebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011ec0:	2762      	movs	r7, #98	; 0x62
 8011ec2:	601c      	str	r4, [r3, #0]
 8011ec4:	e723      	b.n	8011d0e <__gethex+0x12a>
 8011ec6:	1e71      	subs	r1, r6, #1
 8011ec8:	4620      	mov	r0, r4
 8011eca:	f000 fec9 	bl	8012c60 <__any_on>
 8011ece:	2800      	cmp	r0, #0
 8011ed0:	d1ed      	bne.n	8011eae <__gethex+0x2ca>
 8011ed2:	ee18 0a10 	vmov	r0, s16
 8011ed6:	4621      	mov	r1, r4
 8011ed8:	f000 fa68 	bl	80123ac <_Bfree>
 8011edc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011ede:	2300      	movs	r3, #0
 8011ee0:	6013      	str	r3, [r2, #0]
 8011ee2:	2750      	movs	r7, #80	; 0x50
 8011ee4:	e713      	b.n	8011d0e <__gethex+0x12a>
 8011ee6:	bf00      	nop
 8011ee8:	08015ae0 	.word	0x08015ae0
 8011eec:	08015a03 	.word	0x08015a03
 8011ef0:	08015a74 	.word	0x08015a74
 8011ef4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d1eb      	bne.n	8011ed2 <__gethex+0x2ee>
 8011efa:	e7d8      	b.n	8011eae <__gethex+0x2ca>
 8011efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d1d5      	bne.n	8011eae <__gethex+0x2ca>
 8011f02:	e7e6      	b.n	8011ed2 <__gethex+0x2ee>
 8011f04:	1e6f      	subs	r7, r5, #1
 8011f06:	f1ba 0f00 	cmp.w	sl, #0
 8011f0a:	d131      	bne.n	8011f70 <__gethex+0x38c>
 8011f0c:	b127      	cbz	r7, 8011f18 <__gethex+0x334>
 8011f0e:	4639      	mov	r1, r7
 8011f10:	4620      	mov	r0, r4
 8011f12:	f000 fea5 	bl	8012c60 <__any_on>
 8011f16:	4682      	mov	sl, r0
 8011f18:	117b      	asrs	r3, r7, #5
 8011f1a:	2101      	movs	r1, #1
 8011f1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011f20:	f007 071f 	and.w	r7, r7, #31
 8011f24:	fa01 f707 	lsl.w	r7, r1, r7
 8011f28:	421f      	tst	r7, r3
 8011f2a:	4629      	mov	r1, r5
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	bf18      	it	ne
 8011f30:	f04a 0a02 	orrne.w	sl, sl, #2
 8011f34:	1b76      	subs	r6, r6, r5
 8011f36:	f7ff fdee 	bl	8011b16 <rshift>
 8011f3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011f3e:	2702      	movs	r7, #2
 8011f40:	f1ba 0f00 	cmp.w	sl, #0
 8011f44:	d048      	beq.n	8011fd8 <__gethex+0x3f4>
 8011f46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011f4a:	2b02      	cmp	r3, #2
 8011f4c:	d015      	beq.n	8011f7a <__gethex+0x396>
 8011f4e:	2b03      	cmp	r3, #3
 8011f50:	d017      	beq.n	8011f82 <__gethex+0x39e>
 8011f52:	2b01      	cmp	r3, #1
 8011f54:	d109      	bne.n	8011f6a <__gethex+0x386>
 8011f56:	f01a 0f02 	tst.w	sl, #2
 8011f5a:	d006      	beq.n	8011f6a <__gethex+0x386>
 8011f5c:	f8d9 0000 	ldr.w	r0, [r9]
 8011f60:	ea4a 0a00 	orr.w	sl, sl, r0
 8011f64:	f01a 0f01 	tst.w	sl, #1
 8011f68:	d10e      	bne.n	8011f88 <__gethex+0x3a4>
 8011f6a:	f047 0710 	orr.w	r7, r7, #16
 8011f6e:	e033      	b.n	8011fd8 <__gethex+0x3f4>
 8011f70:	f04f 0a01 	mov.w	sl, #1
 8011f74:	e7d0      	b.n	8011f18 <__gethex+0x334>
 8011f76:	2701      	movs	r7, #1
 8011f78:	e7e2      	b.n	8011f40 <__gethex+0x35c>
 8011f7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f7c:	f1c3 0301 	rsb	r3, r3, #1
 8011f80:	9315      	str	r3, [sp, #84]	; 0x54
 8011f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d0f0      	beq.n	8011f6a <__gethex+0x386>
 8011f88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011f8c:	f104 0314 	add.w	r3, r4, #20
 8011f90:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011f94:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011f98:	f04f 0c00 	mov.w	ip, #0
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fa2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011fa6:	d01c      	beq.n	8011fe2 <__gethex+0x3fe>
 8011fa8:	3201      	adds	r2, #1
 8011faa:	6002      	str	r2, [r0, #0]
 8011fac:	2f02      	cmp	r7, #2
 8011fae:	f104 0314 	add.w	r3, r4, #20
 8011fb2:	d13f      	bne.n	8012034 <__gethex+0x450>
 8011fb4:	f8d8 2000 	ldr.w	r2, [r8]
 8011fb8:	3a01      	subs	r2, #1
 8011fba:	42b2      	cmp	r2, r6
 8011fbc:	d10a      	bne.n	8011fd4 <__gethex+0x3f0>
 8011fbe:	1171      	asrs	r1, r6, #5
 8011fc0:	2201      	movs	r2, #1
 8011fc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011fc6:	f006 061f 	and.w	r6, r6, #31
 8011fca:	fa02 f606 	lsl.w	r6, r2, r6
 8011fce:	421e      	tst	r6, r3
 8011fd0:	bf18      	it	ne
 8011fd2:	4617      	movne	r7, r2
 8011fd4:	f047 0720 	orr.w	r7, r7, #32
 8011fd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011fda:	601c      	str	r4, [r3, #0]
 8011fdc:	9b04      	ldr	r3, [sp, #16]
 8011fde:	601d      	str	r5, [r3, #0]
 8011fe0:	e695      	b.n	8011d0e <__gethex+0x12a>
 8011fe2:	4299      	cmp	r1, r3
 8011fe4:	f843 cc04 	str.w	ip, [r3, #-4]
 8011fe8:	d8d8      	bhi.n	8011f9c <__gethex+0x3b8>
 8011fea:	68a3      	ldr	r3, [r4, #8]
 8011fec:	459b      	cmp	fp, r3
 8011fee:	db19      	blt.n	8012024 <__gethex+0x440>
 8011ff0:	6861      	ldr	r1, [r4, #4]
 8011ff2:	ee18 0a10 	vmov	r0, s16
 8011ff6:	3101      	adds	r1, #1
 8011ff8:	f000 f998 	bl	801232c <_Balloc>
 8011ffc:	4681      	mov	r9, r0
 8011ffe:	b918      	cbnz	r0, 8012008 <__gethex+0x424>
 8012000:	4b1a      	ldr	r3, [pc, #104]	; (801206c <__gethex+0x488>)
 8012002:	4602      	mov	r2, r0
 8012004:	2184      	movs	r1, #132	; 0x84
 8012006:	e6a8      	b.n	8011d5a <__gethex+0x176>
 8012008:	6922      	ldr	r2, [r4, #16]
 801200a:	3202      	adds	r2, #2
 801200c:	f104 010c 	add.w	r1, r4, #12
 8012010:	0092      	lsls	r2, r2, #2
 8012012:	300c      	adds	r0, #12
 8012014:	f7fc fce0 	bl	800e9d8 <memcpy>
 8012018:	4621      	mov	r1, r4
 801201a:	ee18 0a10 	vmov	r0, s16
 801201e:	f000 f9c5 	bl	80123ac <_Bfree>
 8012022:	464c      	mov	r4, r9
 8012024:	6923      	ldr	r3, [r4, #16]
 8012026:	1c5a      	adds	r2, r3, #1
 8012028:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801202c:	6122      	str	r2, [r4, #16]
 801202e:	2201      	movs	r2, #1
 8012030:	615a      	str	r2, [r3, #20]
 8012032:	e7bb      	b.n	8011fac <__gethex+0x3c8>
 8012034:	6922      	ldr	r2, [r4, #16]
 8012036:	455a      	cmp	r2, fp
 8012038:	dd0b      	ble.n	8012052 <__gethex+0x46e>
 801203a:	2101      	movs	r1, #1
 801203c:	4620      	mov	r0, r4
 801203e:	f7ff fd6a 	bl	8011b16 <rshift>
 8012042:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012046:	3501      	adds	r5, #1
 8012048:	42ab      	cmp	r3, r5
 801204a:	f6ff aed0 	blt.w	8011dee <__gethex+0x20a>
 801204e:	2701      	movs	r7, #1
 8012050:	e7c0      	b.n	8011fd4 <__gethex+0x3f0>
 8012052:	f016 061f 	ands.w	r6, r6, #31
 8012056:	d0fa      	beq.n	801204e <__gethex+0x46a>
 8012058:	449a      	add	sl, r3
 801205a:	f1c6 0620 	rsb	r6, r6, #32
 801205e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012062:	f000 fa59 	bl	8012518 <__hi0bits>
 8012066:	42b0      	cmp	r0, r6
 8012068:	dbe7      	blt.n	801203a <__gethex+0x456>
 801206a:	e7f0      	b.n	801204e <__gethex+0x46a>
 801206c:	08015a03 	.word	0x08015a03

08012070 <L_shift>:
 8012070:	f1c2 0208 	rsb	r2, r2, #8
 8012074:	0092      	lsls	r2, r2, #2
 8012076:	b570      	push	{r4, r5, r6, lr}
 8012078:	f1c2 0620 	rsb	r6, r2, #32
 801207c:	6843      	ldr	r3, [r0, #4]
 801207e:	6804      	ldr	r4, [r0, #0]
 8012080:	fa03 f506 	lsl.w	r5, r3, r6
 8012084:	432c      	orrs	r4, r5
 8012086:	40d3      	lsrs	r3, r2
 8012088:	6004      	str	r4, [r0, #0]
 801208a:	f840 3f04 	str.w	r3, [r0, #4]!
 801208e:	4288      	cmp	r0, r1
 8012090:	d3f4      	bcc.n	801207c <L_shift+0xc>
 8012092:	bd70      	pop	{r4, r5, r6, pc}

08012094 <__match>:
 8012094:	b530      	push	{r4, r5, lr}
 8012096:	6803      	ldr	r3, [r0, #0]
 8012098:	3301      	adds	r3, #1
 801209a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801209e:	b914      	cbnz	r4, 80120a6 <__match+0x12>
 80120a0:	6003      	str	r3, [r0, #0]
 80120a2:	2001      	movs	r0, #1
 80120a4:	bd30      	pop	{r4, r5, pc}
 80120a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80120ae:	2d19      	cmp	r5, #25
 80120b0:	bf98      	it	ls
 80120b2:	3220      	addls	r2, #32
 80120b4:	42a2      	cmp	r2, r4
 80120b6:	d0f0      	beq.n	801209a <__match+0x6>
 80120b8:	2000      	movs	r0, #0
 80120ba:	e7f3      	b.n	80120a4 <__match+0x10>

080120bc <__hexnan>:
 80120bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c0:	680b      	ldr	r3, [r1, #0]
 80120c2:	6801      	ldr	r1, [r0, #0]
 80120c4:	115e      	asrs	r6, r3, #5
 80120c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80120ca:	f013 031f 	ands.w	r3, r3, #31
 80120ce:	b087      	sub	sp, #28
 80120d0:	bf18      	it	ne
 80120d2:	3604      	addne	r6, #4
 80120d4:	2500      	movs	r5, #0
 80120d6:	1f37      	subs	r7, r6, #4
 80120d8:	4682      	mov	sl, r0
 80120da:	4690      	mov	r8, r2
 80120dc:	9301      	str	r3, [sp, #4]
 80120de:	f846 5c04 	str.w	r5, [r6, #-4]
 80120e2:	46b9      	mov	r9, r7
 80120e4:	463c      	mov	r4, r7
 80120e6:	9502      	str	r5, [sp, #8]
 80120e8:	46ab      	mov	fp, r5
 80120ea:	784a      	ldrb	r2, [r1, #1]
 80120ec:	1c4b      	adds	r3, r1, #1
 80120ee:	9303      	str	r3, [sp, #12]
 80120f0:	b342      	cbz	r2, 8012144 <__hexnan+0x88>
 80120f2:	4610      	mov	r0, r2
 80120f4:	9105      	str	r1, [sp, #20]
 80120f6:	9204      	str	r2, [sp, #16]
 80120f8:	f7ff fd5f 	bl	8011bba <__hexdig_fun>
 80120fc:	2800      	cmp	r0, #0
 80120fe:	d14f      	bne.n	80121a0 <__hexnan+0xe4>
 8012100:	9a04      	ldr	r2, [sp, #16]
 8012102:	9905      	ldr	r1, [sp, #20]
 8012104:	2a20      	cmp	r2, #32
 8012106:	d818      	bhi.n	801213a <__hexnan+0x7e>
 8012108:	9b02      	ldr	r3, [sp, #8]
 801210a:	459b      	cmp	fp, r3
 801210c:	dd13      	ble.n	8012136 <__hexnan+0x7a>
 801210e:	454c      	cmp	r4, r9
 8012110:	d206      	bcs.n	8012120 <__hexnan+0x64>
 8012112:	2d07      	cmp	r5, #7
 8012114:	dc04      	bgt.n	8012120 <__hexnan+0x64>
 8012116:	462a      	mov	r2, r5
 8012118:	4649      	mov	r1, r9
 801211a:	4620      	mov	r0, r4
 801211c:	f7ff ffa8 	bl	8012070 <L_shift>
 8012120:	4544      	cmp	r4, r8
 8012122:	d950      	bls.n	80121c6 <__hexnan+0x10a>
 8012124:	2300      	movs	r3, #0
 8012126:	f1a4 0904 	sub.w	r9, r4, #4
 801212a:	f844 3c04 	str.w	r3, [r4, #-4]
 801212e:	f8cd b008 	str.w	fp, [sp, #8]
 8012132:	464c      	mov	r4, r9
 8012134:	461d      	mov	r5, r3
 8012136:	9903      	ldr	r1, [sp, #12]
 8012138:	e7d7      	b.n	80120ea <__hexnan+0x2e>
 801213a:	2a29      	cmp	r2, #41	; 0x29
 801213c:	d156      	bne.n	80121ec <__hexnan+0x130>
 801213e:	3102      	adds	r1, #2
 8012140:	f8ca 1000 	str.w	r1, [sl]
 8012144:	f1bb 0f00 	cmp.w	fp, #0
 8012148:	d050      	beq.n	80121ec <__hexnan+0x130>
 801214a:	454c      	cmp	r4, r9
 801214c:	d206      	bcs.n	801215c <__hexnan+0xa0>
 801214e:	2d07      	cmp	r5, #7
 8012150:	dc04      	bgt.n	801215c <__hexnan+0xa0>
 8012152:	462a      	mov	r2, r5
 8012154:	4649      	mov	r1, r9
 8012156:	4620      	mov	r0, r4
 8012158:	f7ff ff8a 	bl	8012070 <L_shift>
 801215c:	4544      	cmp	r4, r8
 801215e:	d934      	bls.n	80121ca <__hexnan+0x10e>
 8012160:	f1a8 0204 	sub.w	r2, r8, #4
 8012164:	4623      	mov	r3, r4
 8012166:	f853 1b04 	ldr.w	r1, [r3], #4
 801216a:	f842 1f04 	str.w	r1, [r2, #4]!
 801216e:	429f      	cmp	r7, r3
 8012170:	d2f9      	bcs.n	8012166 <__hexnan+0xaa>
 8012172:	1b3b      	subs	r3, r7, r4
 8012174:	f023 0303 	bic.w	r3, r3, #3
 8012178:	3304      	adds	r3, #4
 801217a:	3401      	adds	r4, #1
 801217c:	3e03      	subs	r6, #3
 801217e:	42b4      	cmp	r4, r6
 8012180:	bf88      	it	hi
 8012182:	2304      	movhi	r3, #4
 8012184:	4443      	add	r3, r8
 8012186:	2200      	movs	r2, #0
 8012188:	f843 2b04 	str.w	r2, [r3], #4
 801218c:	429f      	cmp	r7, r3
 801218e:	d2fb      	bcs.n	8012188 <__hexnan+0xcc>
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	b91b      	cbnz	r3, 801219c <__hexnan+0xe0>
 8012194:	4547      	cmp	r7, r8
 8012196:	d127      	bne.n	80121e8 <__hexnan+0x12c>
 8012198:	2301      	movs	r3, #1
 801219a:	603b      	str	r3, [r7, #0]
 801219c:	2005      	movs	r0, #5
 801219e:	e026      	b.n	80121ee <__hexnan+0x132>
 80121a0:	3501      	adds	r5, #1
 80121a2:	2d08      	cmp	r5, #8
 80121a4:	f10b 0b01 	add.w	fp, fp, #1
 80121a8:	dd06      	ble.n	80121b8 <__hexnan+0xfc>
 80121aa:	4544      	cmp	r4, r8
 80121ac:	d9c3      	bls.n	8012136 <__hexnan+0x7a>
 80121ae:	2300      	movs	r3, #0
 80121b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80121b4:	2501      	movs	r5, #1
 80121b6:	3c04      	subs	r4, #4
 80121b8:	6822      	ldr	r2, [r4, #0]
 80121ba:	f000 000f 	and.w	r0, r0, #15
 80121be:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80121c2:	6022      	str	r2, [r4, #0]
 80121c4:	e7b7      	b.n	8012136 <__hexnan+0x7a>
 80121c6:	2508      	movs	r5, #8
 80121c8:	e7b5      	b.n	8012136 <__hexnan+0x7a>
 80121ca:	9b01      	ldr	r3, [sp, #4]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d0df      	beq.n	8012190 <__hexnan+0xd4>
 80121d0:	f04f 32ff 	mov.w	r2, #4294967295
 80121d4:	f1c3 0320 	rsb	r3, r3, #32
 80121d8:	fa22 f303 	lsr.w	r3, r2, r3
 80121dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80121e0:	401a      	ands	r2, r3
 80121e2:	f846 2c04 	str.w	r2, [r6, #-4]
 80121e6:	e7d3      	b.n	8012190 <__hexnan+0xd4>
 80121e8:	3f04      	subs	r7, #4
 80121ea:	e7d1      	b.n	8012190 <__hexnan+0xd4>
 80121ec:	2004      	movs	r0, #4
 80121ee:	b007      	add	sp, #28
 80121f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080121f4 <_localeconv_r>:
 80121f4:	4800      	ldr	r0, [pc, #0]	; (80121f8 <_localeconv_r+0x4>)
 80121f6:	4770      	bx	lr
 80121f8:	20000180 	.word	0x20000180

080121fc <__retarget_lock_init_recursive>:
 80121fc:	4770      	bx	lr

080121fe <__retarget_lock_acquire_recursive>:
 80121fe:	4770      	bx	lr

08012200 <__retarget_lock_release_recursive>:
 8012200:	4770      	bx	lr
	...

08012204 <_lseek_r>:
 8012204:	b538      	push	{r3, r4, r5, lr}
 8012206:	4d07      	ldr	r5, [pc, #28]	; (8012224 <_lseek_r+0x20>)
 8012208:	4604      	mov	r4, r0
 801220a:	4608      	mov	r0, r1
 801220c:	4611      	mov	r1, r2
 801220e:	2200      	movs	r2, #0
 8012210:	602a      	str	r2, [r5, #0]
 8012212:	461a      	mov	r2, r3
 8012214:	f7f2 f82a 	bl	800426c <_lseek>
 8012218:	1c43      	adds	r3, r0, #1
 801221a:	d102      	bne.n	8012222 <_lseek_r+0x1e>
 801221c:	682b      	ldr	r3, [r5, #0]
 801221e:	b103      	cbz	r3, 8012222 <_lseek_r+0x1e>
 8012220:	6023      	str	r3, [r4, #0]
 8012222:	bd38      	pop	{r3, r4, r5, pc}
 8012224:	20001a24 	.word	0x20001a24

08012228 <__swhatbuf_r>:
 8012228:	b570      	push	{r4, r5, r6, lr}
 801222a:	460e      	mov	r6, r1
 801222c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012230:	2900      	cmp	r1, #0
 8012232:	b096      	sub	sp, #88	; 0x58
 8012234:	4614      	mov	r4, r2
 8012236:	461d      	mov	r5, r3
 8012238:	da07      	bge.n	801224a <__swhatbuf_r+0x22>
 801223a:	2300      	movs	r3, #0
 801223c:	602b      	str	r3, [r5, #0]
 801223e:	89b3      	ldrh	r3, [r6, #12]
 8012240:	061a      	lsls	r2, r3, #24
 8012242:	d410      	bmi.n	8012266 <__swhatbuf_r+0x3e>
 8012244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012248:	e00e      	b.n	8012268 <__swhatbuf_r+0x40>
 801224a:	466a      	mov	r2, sp
 801224c:	f001 fc58 	bl	8013b00 <_fstat_r>
 8012250:	2800      	cmp	r0, #0
 8012252:	dbf2      	blt.n	801223a <__swhatbuf_r+0x12>
 8012254:	9a01      	ldr	r2, [sp, #4]
 8012256:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801225a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801225e:	425a      	negs	r2, r3
 8012260:	415a      	adcs	r2, r3
 8012262:	602a      	str	r2, [r5, #0]
 8012264:	e7ee      	b.n	8012244 <__swhatbuf_r+0x1c>
 8012266:	2340      	movs	r3, #64	; 0x40
 8012268:	2000      	movs	r0, #0
 801226a:	6023      	str	r3, [r4, #0]
 801226c:	b016      	add	sp, #88	; 0x58
 801226e:	bd70      	pop	{r4, r5, r6, pc}

08012270 <__smakebuf_r>:
 8012270:	898b      	ldrh	r3, [r1, #12]
 8012272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012274:	079d      	lsls	r5, r3, #30
 8012276:	4606      	mov	r6, r0
 8012278:	460c      	mov	r4, r1
 801227a:	d507      	bpl.n	801228c <__smakebuf_r+0x1c>
 801227c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012280:	6023      	str	r3, [r4, #0]
 8012282:	6123      	str	r3, [r4, #16]
 8012284:	2301      	movs	r3, #1
 8012286:	6163      	str	r3, [r4, #20]
 8012288:	b002      	add	sp, #8
 801228a:	bd70      	pop	{r4, r5, r6, pc}
 801228c:	ab01      	add	r3, sp, #4
 801228e:	466a      	mov	r2, sp
 8012290:	f7ff ffca 	bl	8012228 <__swhatbuf_r>
 8012294:	9900      	ldr	r1, [sp, #0]
 8012296:	4605      	mov	r5, r0
 8012298:	4630      	mov	r0, r6
 801229a:	f7fc fc03 	bl	800eaa4 <_malloc_r>
 801229e:	b948      	cbnz	r0, 80122b4 <__smakebuf_r+0x44>
 80122a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122a4:	059a      	lsls	r2, r3, #22
 80122a6:	d4ef      	bmi.n	8012288 <__smakebuf_r+0x18>
 80122a8:	f023 0303 	bic.w	r3, r3, #3
 80122ac:	f043 0302 	orr.w	r3, r3, #2
 80122b0:	81a3      	strh	r3, [r4, #12]
 80122b2:	e7e3      	b.n	801227c <__smakebuf_r+0xc>
 80122b4:	4b0d      	ldr	r3, [pc, #52]	; (80122ec <__smakebuf_r+0x7c>)
 80122b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80122b8:	89a3      	ldrh	r3, [r4, #12]
 80122ba:	6020      	str	r0, [r4, #0]
 80122bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122c0:	81a3      	strh	r3, [r4, #12]
 80122c2:	9b00      	ldr	r3, [sp, #0]
 80122c4:	6163      	str	r3, [r4, #20]
 80122c6:	9b01      	ldr	r3, [sp, #4]
 80122c8:	6120      	str	r0, [r4, #16]
 80122ca:	b15b      	cbz	r3, 80122e4 <__smakebuf_r+0x74>
 80122cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122d0:	4630      	mov	r0, r6
 80122d2:	f001 fc27 	bl	8013b24 <_isatty_r>
 80122d6:	b128      	cbz	r0, 80122e4 <__smakebuf_r+0x74>
 80122d8:	89a3      	ldrh	r3, [r4, #12]
 80122da:	f023 0303 	bic.w	r3, r3, #3
 80122de:	f043 0301 	orr.w	r3, r3, #1
 80122e2:	81a3      	strh	r3, [r4, #12]
 80122e4:	89a0      	ldrh	r0, [r4, #12]
 80122e6:	4305      	orrs	r5, r0
 80122e8:	81a5      	strh	r5, [r4, #12]
 80122ea:	e7cd      	b.n	8012288 <__smakebuf_r+0x18>
 80122ec:	08011975 	.word	0x08011975

080122f0 <__ascii_mbtowc>:
 80122f0:	b082      	sub	sp, #8
 80122f2:	b901      	cbnz	r1, 80122f6 <__ascii_mbtowc+0x6>
 80122f4:	a901      	add	r1, sp, #4
 80122f6:	b142      	cbz	r2, 801230a <__ascii_mbtowc+0x1a>
 80122f8:	b14b      	cbz	r3, 801230e <__ascii_mbtowc+0x1e>
 80122fa:	7813      	ldrb	r3, [r2, #0]
 80122fc:	600b      	str	r3, [r1, #0]
 80122fe:	7812      	ldrb	r2, [r2, #0]
 8012300:	1e10      	subs	r0, r2, #0
 8012302:	bf18      	it	ne
 8012304:	2001      	movne	r0, #1
 8012306:	b002      	add	sp, #8
 8012308:	4770      	bx	lr
 801230a:	4610      	mov	r0, r2
 801230c:	e7fb      	b.n	8012306 <__ascii_mbtowc+0x16>
 801230e:	f06f 0001 	mvn.w	r0, #1
 8012312:	e7f8      	b.n	8012306 <__ascii_mbtowc+0x16>

08012314 <__malloc_lock>:
 8012314:	4801      	ldr	r0, [pc, #4]	; (801231c <__malloc_lock+0x8>)
 8012316:	f7ff bf72 	b.w	80121fe <__retarget_lock_acquire_recursive>
 801231a:	bf00      	nop
 801231c:	20001a1c 	.word	0x20001a1c

08012320 <__malloc_unlock>:
 8012320:	4801      	ldr	r0, [pc, #4]	; (8012328 <__malloc_unlock+0x8>)
 8012322:	f7ff bf6d 	b.w	8012200 <__retarget_lock_release_recursive>
 8012326:	bf00      	nop
 8012328:	20001a1c 	.word	0x20001a1c

0801232c <_Balloc>:
 801232c:	b570      	push	{r4, r5, r6, lr}
 801232e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012330:	4604      	mov	r4, r0
 8012332:	460d      	mov	r5, r1
 8012334:	b976      	cbnz	r6, 8012354 <_Balloc+0x28>
 8012336:	2010      	movs	r0, #16
 8012338:	f7fc fb46 	bl	800e9c8 <malloc>
 801233c:	4602      	mov	r2, r0
 801233e:	6260      	str	r0, [r4, #36]	; 0x24
 8012340:	b920      	cbnz	r0, 801234c <_Balloc+0x20>
 8012342:	4b18      	ldr	r3, [pc, #96]	; (80123a4 <_Balloc+0x78>)
 8012344:	4818      	ldr	r0, [pc, #96]	; (80123a8 <_Balloc+0x7c>)
 8012346:	2166      	movs	r1, #102	; 0x66
 8012348:	f001 fbaa 	bl	8013aa0 <__assert_func>
 801234c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012350:	6006      	str	r6, [r0, #0]
 8012352:	60c6      	str	r6, [r0, #12]
 8012354:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012356:	68f3      	ldr	r3, [r6, #12]
 8012358:	b183      	cbz	r3, 801237c <_Balloc+0x50>
 801235a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801235c:	68db      	ldr	r3, [r3, #12]
 801235e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012362:	b9b8      	cbnz	r0, 8012394 <_Balloc+0x68>
 8012364:	2101      	movs	r1, #1
 8012366:	fa01 f605 	lsl.w	r6, r1, r5
 801236a:	1d72      	adds	r2, r6, #5
 801236c:	0092      	lsls	r2, r2, #2
 801236e:	4620      	mov	r0, r4
 8012370:	f000 fc97 	bl	8012ca2 <_calloc_r>
 8012374:	b160      	cbz	r0, 8012390 <_Balloc+0x64>
 8012376:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801237a:	e00e      	b.n	801239a <_Balloc+0x6e>
 801237c:	2221      	movs	r2, #33	; 0x21
 801237e:	2104      	movs	r1, #4
 8012380:	4620      	mov	r0, r4
 8012382:	f000 fc8e 	bl	8012ca2 <_calloc_r>
 8012386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012388:	60f0      	str	r0, [r6, #12]
 801238a:	68db      	ldr	r3, [r3, #12]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d1e4      	bne.n	801235a <_Balloc+0x2e>
 8012390:	2000      	movs	r0, #0
 8012392:	bd70      	pop	{r4, r5, r6, pc}
 8012394:	6802      	ldr	r2, [r0, #0]
 8012396:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801239a:	2300      	movs	r3, #0
 801239c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80123a0:	e7f7      	b.n	8012392 <_Balloc+0x66>
 80123a2:	bf00      	nop
 80123a4:	0801598d 	.word	0x0801598d
 80123a8:	08015af4 	.word	0x08015af4

080123ac <_Bfree>:
 80123ac:	b570      	push	{r4, r5, r6, lr}
 80123ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80123b0:	4605      	mov	r5, r0
 80123b2:	460c      	mov	r4, r1
 80123b4:	b976      	cbnz	r6, 80123d4 <_Bfree+0x28>
 80123b6:	2010      	movs	r0, #16
 80123b8:	f7fc fb06 	bl	800e9c8 <malloc>
 80123bc:	4602      	mov	r2, r0
 80123be:	6268      	str	r0, [r5, #36]	; 0x24
 80123c0:	b920      	cbnz	r0, 80123cc <_Bfree+0x20>
 80123c2:	4b09      	ldr	r3, [pc, #36]	; (80123e8 <_Bfree+0x3c>)
 80123c4:	4809      	ldr	r0, [pc, #36]	; (80123ec <_Bfree+0x40>)
 80123c6:	218a      	movs	r1, #138	; 0x8a
 80123c8:	f001 fb6a 	bl	8013aa0 <__assert_func>
 80123cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80123d0:	6006      	str	r6, [r0, #0]
 80123d2:	60c6      	str	r6, [r0, #12]
 80123d4:	b13c      	cbz	r4, 80123e6 <_Bfree+0x3a>
 80123d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80123d8:	6862      	ldr	r2, [r4, #4]
 80123da:	68db      	ldr	r3, [r3, #12]
 80123dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80123e0:	6021      	str	r1, [r4, #0]
 80123e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80123e6:	bd70      	pop	{r4, r5, r6, pc}
 80123e8:	0801598d 	.word	0x0801598d
 80123ec:	08015af4 	.word	0x08015af4

080123f0 <__multadd>:
 80123f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123f4:	690e      	ldr	r6, [r1, #16]
 80123f6:	4607      	mov	r7, r0
 80123f8:	4698      	mov	r8, r3
 80123fa:	460c      	mov	r4, r1
 80123fc:	f101 0014 	add.w	r0, r1, #20
 8012400:	2300      	movs	r3, #0
 8012402:	6805      	ldr	r5, [r0, #0]
 8012404:	b2a9      	uxth	r1, r5
 8012406:	fb02 8101 	mla	r1, r2, r1, r8
 801240a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801240e:	0c2d      	lsrs	r5, r5, #16
 8012410:	fb02 c505 	mla	r5, r2, r5, ip
 8012414:	b289      	uxth	r1, r1
 8012416:	3301      	adds	r3, #1
 8012418:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801241c:	429e      	cmp	r6, r3
 801241e:	f840 1b04 	str.w	r1, [r0], #4
 8012422:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012426:	dcec      	bgt.n	8012402 <__multadd+0x12>
 8012428:	f1b8 0f00 	cmp.w	r8, #0
 801242c:	d022      	beq.n	8012474 <__multadd+0x84>
 801242e:	68a3      	ldr	r3, [r4, #8]
 8012430:	42b3      	cmp	r3, r6
 8012432:	dc19      	bgt.n	8012468 <__multadd+0x78>
 8012434:	6861      	ldr	r1, [r4, #4]
 8012436:	4638      	mov	r0, r7
 8012438:	3101      	adds	r1, #1
 801243a:	f7ff ff77 	bl	801232c <_Balloc>
 801243e:	4605      	mov	r5, r0
 8012440:	b928      	cbnz	r0, 801244e <__multadd+0x5e>
 8012442:	4602      	mov	r2, r0
 8012444:	4b0d      	ldr	r3, [pc, #52]	; (801247c <__multadd+0x8c>)
 8012446:	480e      	ldr	r0, [pc, #56]	; (8012480 <__multadd+0x90>)
 8012448:	21b5      	movs	r1, #181	; 0xb5
 801244a:	f001 fb29 	bl	8013aa0 <__assert_func>
 801244e:	6922      	ldr	r2, [r4, #16]
 8012450:	3202      	adds	r2, #2
 8012452:	f104 010c 	add.w	r1, r4, #12
 8012456:	0092      	lsls	r2, r2, #2
 8012458:	300c      	adds	r0, #12
 801245a:	f7fc fabd 	bl	800e9d8 <memcpy>
 801245e:	4621      	mov	r1, r4
 8012460:	4638      	mov	r0, r7
 8012462:	f7ff ffa3 	bl	80123ac <_Bfree>
 8012466:	462c      	mov	r4, r5
 8012468:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801246c:	3601      	adds	r6, #1
 801246e:	f8c3 8014 	str.w	r8, [r3, #20]
 8012472:	6126      	str	r6, [r4, #16]
 8012474:	4620      	mov	r0, r4
 8012476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801247a:	bf00      	nop
 801247c:	08015a03 	.word	0x08015a03
 8012480:	08015af4 	.word	0x08015af4

08012484 <__s2b>:
 8012484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012488:	460c      	mov	r4, r1
 801248a:	4615      	mov	r5, r2
 801248c:	461f      	mov	r7, r3
 801248e:	2209      	movs	r2, #9
 8012490:	3308      	adds	r3, #8
 8012492:	4606      	mov	r6, r0
 8012494:	fb93 f3f2 	sdiv	r3, r3, r2
 8012498:	2100      	movs	r1, #0
 801249a:	2201      	movs	r2, #1
 801249c:	429a      	cmp	r2, r3
 801249e:	db09      	blt.n	80124b4 <__s2b+0x30>
 80124a0:	4630      	mov	r0, r6
 80124a2:	f7ff ff43 	bl	801232c <_Balloc>
 80124a6:	b940      	cbnz	r0, 80124ba <__s2b+0x36>
 80124a8:	4602      	mov	r2, r0
 80124aa:	4b19      	ldr	r3, [pc, #100]	; (8012510 <__s2b+0x8c>)
 80124ac:	4819      	ldr	r0, [pc, #100]	; (8012514 <__s2b+0x90>)
 80124ae:	21ce      	movs	r1, #206	; 0xce
 80124b0:	f001 faf6 	bl	8013aa0 <__assert_func>
 80124b4:	0052      	lsls	r2, r2, #1
 80124b6:	3101      	adds	r1, #1
 80124b8:	e7f0      	b.n	801249c <__s2b+0x18>
 80124ba:	9b08      	ldr	r3, [sp, #32]
 80124bc:	6143      	str	r3, [r0, #20]
 80124be:	2d09      	cmp	r5, #9
 80124c0:	f04f 0301 	mov.w	r3, #1
 80124c4:	6103      	str	r3, [r0, #16]
 80124c6:	dd16      	ble.n	80124f6 <__s2b+0x72>
 80124c8:	f104 0909 	add.w	r9, r4, #9
 80124cc:	46c8      	mov	r8, r9
 80124ce:	442c      	add	r4, r5
 80124d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80124d4:	4601      	mov	r1, r0
 80124d6:	3b30      	subs	r3, #48	; 0x30
 80124d8:	220a      	movs	r2, #10
 80124da:	4630      	mov	r0, r6
 80124dc:	f7ff ff88 	bl	80123f0 <__multadd>
 80124e0:	45a0      	cmp	r8, r4
 80124e2:	d1f5      	bne.n	80124d0 <__s2b+0x4c>
 80124e4:	f1a5 0408 	sub.w	r4, r5, #8
 80124e8:	444c      	add	r4, r9
 80124ea:	1b2d      	subs	r5, r5, r4
 80124ec:	1963      	adds	r3, r4, r5
 80124ee:	42bb      	cmp	r3, r7
 80124f0:	db04      	blt.n	80124fc <__s2b+0x78>
 80124f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124f6:	340a      	adds	r4, #10
 80124f8:	2509      	movs	r5, #9
 80124fa:	e7f6      	b.n	80124ea <__s2b+0x66>
 80124fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012500:	4601      	mov	r1, r0
 8012502:	3b30      	subs	r3, #48	; 0x30
 8012504:	220a      	movs	r2, #10
 8012506:	4630      	mov	r0, r6
 8012508:	f7ff ff72 	bl	80123f0 <__multadd>
 801250c:	e7ee      	b.n	80124ec <__s2b+0x68>
 801250e:	bf00      	nop
 8012510:	08015a03 	.word	0x08015a03
 8012514:	08015af4 	.word	0x08015af4

08012518 <__hi0bits>:
 8012518:	0c03      	lsrs	r3, r0, #16
 801251a:	041b      	lsls	r3, r3, #16
 801251c:	b9d3      	cbnz	r3, 8012554 <__hi0bits+0x3c>
 801251e:	0400      	lsls	r0, r0, #16
 8012520:	2310      	movs	r3, #16
 8012522:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012526:	bf04      	itt	eq
 8012528:	0200      	lsleq	r0, r0, #8
 801252a:	3308      	addeq	r3, #8
 801252c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012530:	bf04      	itt	eq
 8012532:	0100      	lsleq	r0, r0, #4
 8012534:	3304      	addeq	r3, #4
 8012536:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801253a:	bf04      	itt	eq
 801253c:	0080      	lsleq	r0, r0, #2
 801253e:	3302      	addeq	r3, #2
 8012540:	2800      	cmp	r0, #0
 8012542:	db05      	blt.n	8012550 <__hi0bits+0x38>
 8012544:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012548:	f103 0301 	add.w	r3, r3, #1
 801254c:	bf08      	it	eq
 801254e:	2320      	moveq	r3, #32
 8012550:	4618      	mov	r0, r3
 8012552:	4770      	bx	lr
 8012554:	2300      	movs	r3, #0
 8012556:	e7e4      	b.n	8012522 <__hi0bits+0xa>

08012558 <__lo0bits>:
 8012558:	6803      	ldr	r3, [r0, #0]
 801255a:	f013 0207 	ands.w	r2, r3, #7
 801255e:	4601      	mov	r1, r0
 8012560:	d00b      	beq.n	801257a <__lo0bits+0x22>
 8012562:	07da      	lsls	r2, r3, #31
 8012564:	d424      	bmi.n	80125b0 <__lo0bits+0x58>
 8012566:	0798      	lsls	r0, r3, #30
 8012568:	bf49      	itett	mi
 801256a:	085b      	lsrmi	r3, r3, #1
 801256c:	089b      	lsrpl	r3, r3, #2
 801256e:	2001      	movmi	r0, #1
 8012570:	600b      	strmi	r3, [r1, #0]
 8012572:	bf5c      	itt	pl
 8012574:	600b      	strpl	r3, [r1, #0]
 8012576:	2002      	movpl	r0, #2
 8012578:	4770      	bx	lr
 801257a:	b298      	uxth	r0, r3
 801257c:	b9b0      	cbnz	r0, 80125ac <__lo0bits+0x54>
 801257e:	0c1b      	lsrs	r3, r3, #16
 8012580:	2010      	movs	r0, #16
 8012582:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012586:	bf04      	itt	eq
 8012588:	0a1b      	lsreq	r3, r3, #8
 801258a:	3008      	addeq	r0, #8
 801258c:	071a      	lsls	r2, r3, #28
 801258e:	bf04      	itt	eq
 8012590:	091b      	lsreq	r3, r3, #4
 8012592:	3004      	addeq	r0, #4
 8012594:	079a      	lsls	r2, r3, #30
 8012596:	bf04      	itt	eq
 8012598:	089b      	lsreq	r3, r3, #2
 801259a:	3002      	addeq	r0, #2
 801259c:	07da      	lsls	r2, r3, #31
 801259e:	d403      	bmi.n	80125a8 <__lo0bits+0x50>
 80125a0:	085b      	lsrs	r3, r3, #1
 80125a2:	f100 0001 	add.w	r0, r0, #1
 80125a6:	d005      	beq.n	80125b4 <__lo0bits+0x5c>
 80125a8:	600b      	str	r3, [r1, #0]
 80125aa:	4770      	bx	lr
 80125ac:	4610      	mov	r0, r2
 80125ae:	e7e8      	b.n	8012582 <__lo0bits+0x2a>
 80125b0:	2000      	movs	r0, #0
 80125b2:	4770      	bx	lr
 80125b4:	2020      	movs	r0, #32
 80125b6:	4770      	bx	lr

080125b8 <__i2b>:
 80125b8:	b510      	push	{r4, lr}
 80125ba:	460c      	mov	r4, r1
 80125bc:	2101      	movs	r1, #1
 80125be:	f7ff feb5 	bl	801232c <_Balloc>
 80125c2:	4602      	mov	r2, r0
 80125c4:	b928      	cbnz	r0, 80125d2 <__i2b+0x1a>
 80125c6:	4b05      	ldr	r3, [pc, #20]	; (80125dc <__i2b+0x24>)
 80125c8:	4805      	ldr	r0, [pc, #20]	; (80125e0 <__i2b+0x28>)
 80125ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80125ce:	f001 fa67 	bl	8013aa0 <__assert_func>
 80125d2:	2301      	movs	r3, #1
 80125d4:	6144      	str	r4, [r0, #20]
 80125d6:	6103      	str	r3, [r0, #16]
 80125d8:	bd10      	pop	{r4, pc}
 80125da:	bf00      	nop
 80125dc:	08015a03 	.word	0x08015a03
 80125e0:	08015af4 	.word	0x08015af4

080125e4 <__multiply>:
 80125e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125e8:	4614      	mov	r4, r2
 80125ea:	690a      	ldr	r2, [r1, #16]
 80125ec:	6923      	ldr	r3, [r4, #16]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	bfb8      	it	lt
 80125f2:	460b      	movlt	r3, r1
 80125f4:	460d      	mov	r5, r1
 80125f6:	bfbc      	itt	lt
 80125f8:	4625      	movlt	r5, r4
 80125fa:	461c      	movlt	r4, r3
 80125fc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012600:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012604:	68ab      	ldr	r3, [r5, #8]
 8012606:	6869      	ldr	r1, [r5, #4]
 8012608:	eb0a 0709 	add.w	r7, sl, r9
 801260c:	42bb      	cmp	r3, r7
 801260e:	b085      	sub	sp, #20
 8012610:	bfb8      	it	lt
 8012612:	3101      	addlt	r1, #1
 8012614:	f7ff fe8a 	bl	801232c <_Balloc>
 8012618:	b930      	cbnz	r0, 8012628 <__multiply+0x44>
 801261a:	4602      	mov	r2, r0
 801261c:	4b42      	ldr	r3, [pc, #264]	; (8012728 <__multiply+0x144>)
 801261e:	4843      	ldr	r0, [pc, #268]	; (801272c <__multiply+0x148>)
 8012620:	f240 115d 	movw	r1, #349	; 0x15d
 8012624:	f001 fa3c 	bl	8013aa0 <__assert_func>
 8012628:	f100 0614 	add.w	r6, r0, #20
 801262c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012630:	4633      	mov	r3, r6
 8012632:	2200      	movs	r2, #0
 8012634:	4543      	cmp	r3, r8
 8012636:	d31e      	bcc.n	8012676 <__multiply+0x92>
 8012638:	f105 0c14 	add.w	ip, r5, #20
 801263c:	f104 0314 	add.w	r3, r4, #20
 8012640:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012644:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012648:	9202      	str	r2, [sp, #8]
 801264a:	ebac 0205 	sub.w	r2, ip, r5
 801264e:	3a15      	subs	r2, #21
 8012650:	f022 0203 	bic.w	r2, r2, #3
 8012654:	3204      	adds	r2, #4
 8012656:	f105 0115 	add.w	r1, r5, #21
 801265a:	458c      	cmp	ip, r1
 801265c:	bf38      	it	cc
 801265e:	2204      	movcc	r2, #4
 8012660:	9201      	str	r2, [sp, #4]
 8012662:	9a02      	ldr	r2, [sp, #8]
 8012664:	9303      	str	r3, [sp, #12]
 8012666:	429a      	cmp	r2, r3
 8012668:	d808      	bhi.n	801267c <__multiply+0x98>
 801266a:	2f00      	cmp	r7, #0
 801266c:	dc55      	bgt.n	801271a <__multiply+0x136>
 801266e:	6107      	str	r7, [r0, #16]
 8012670:	b005      	add	sp, #20
 8012672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012676:	f843 2b04 	str.w	r2, [r3], #4
 801267a:	e7db      	b.n	8012634 <__multiply+0x50>
 801267c:	f8b3 a000 	ldrh.w	sl, [r3]
 8012680:	f1ba 0f00 	cmp.w	sl, #0
 8012684:	d020      	beq.n	80126c8 <__multiply+0xe4>
 8012686:	f105 0e14 	add.w	lr, r5, #20
 801268a:	46b1      	mov	r9, r6
 801268c:	2200      	movs	r2, #0
 801268e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012692:	f8d9 b000 	ldr.w	fp, [r9]
 8012696:	b2a1      	uxth	r1, r4
 8012698:	fa1f fb8b 	uxth.w	fp, fp
 801269c:	fb0a b101 	mla	r1, sl, r1, fp
 80126a0:	4411      	add	r1, r2
 80126a2:	f8d9 2000 	ldr.w	r2, [r9]
 80126a6:	0c24      	lsrs	r4, r4, #16
 80126a8:	0c12      	lsrs	r2, r2, #16
 80126aa:	fb0a 2404 	mla	r4, sl, r4, r2
 80126ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80126b2:	b289      	uxth	r1, r1
 80126b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80126b8:	45f4      	cmp	ip, lr
 80126ba:	f849 1b04 	str.w	r1, [r9], #4
 80126be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80126c2:	d8e4      	bhi.n	801268e <__multiply+0xaa>
 80126c4:	9901      	ldr	r1, [sp, #4]
 80126c6:	5072      	str	r2, [r6, r1]
 80126c8:	9a03      	ldr	r2, [sp, #12]
 80126ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80126ce:	3304      	adds	r3, #4
 80126d0:	f1b9 0f00 	cmp.w	r9, #0
 80126d4:	d01f      	beq.n	8012716 <__multiply+0x132>
 80126d6:	6834      	ldr	r4, [r6, #0]
 80126d8:	f105 0114 	add.w	r1, r5, #20
 80126dc:	46b6      	mov	lr, r6
 80126de:	f04f 0a00 	mov.w	sl, #0
 80126e2:	880a      	ldrh	r2, [r1, #0]
 80126e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80126e8:	fb09 b202 	mla	r2, r9, r2, fp
 80126ec:	4492      	add	sl, r2
 80126ee:	b2a4      	uxth	r4, r4
 80126f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80126f4:	f84e 4b04 	str.w	r4, [lr], #4
 80126f8:	f851 4b04 	ldr.w	r4, [r1], #4
 80126fc:	f8be 2000 	ldrh.w	r2, [lr]
 8012700:	0c24      	lsrs	r4, r4, #16
 8012702:	fb09 2404 	mla	r4, r9, r4, r2
 8012706:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801270a:	458c      	cmp	ip, r1
 801270c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012710:	d8e7      	bhi.n	80126e2 <__multiply+0xfe>
 8012712:	9a01      	ldr	r2, [sp, #4]
 8012714:	50b4      	str	r4, [r6, r2]
 8012716:	3604      	adds	r6, #4
 8012718:	e7a3      	b.n	8012662 <__multiply+0x7e>
 801271a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801271e:	2b00      	cmp	r3, #0
 8012720:	d1a5      	bne.n	801266e <__multiply+0x8a>
 8012722:	3f01      	subs	r7, #1
 8012724:	e7a1      	b.n	801266a <__multiply+0x86>
 8012726:	bf00      	nop
 8012728:	08015a03 	.word	0x08015a03
 801272c:	08015af4 	.word	0x08015af4

08012730 <__pow5mult>:
 8012730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012734:	4615      	mov	r5, r2
 8012736:	f012 0203 	ands.w	r2, r2, #3
 801273a:	4606      	mov	r6, r0
 801273c:	460f      	mov	r7, r1
 801273e:	d007      	beq.n	8012750 <__pow5mult+0x20>
 8012740:	4c25      	ldr	r4, [pc, #148]	; (80127d8 <__pow5mult+0xa8>)
 8012742:	3a01      	subs	r2, #1
 8012744:	2300      	movs	r3, #0
 8012746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801274a:	f7ff fe51 	bl	80123f0 <__multadd>
 801274e:	4607      	mov	r7, r0
 8012750:	10ad      	asrs	r5, r5, #2
 8012752:	d03d      	beq.n	80127d0 <__pow5mult+0xa0>
 8012754:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012756:	b97c      	cbnz	r4, 8012778 <__pow5mult+0x48>
 8012758:	2010      	movs	r0, #16
 801275a:	f7fc f935 	bl	800e9c8 <malloc>
 801275e:	4602      	mov	r2, r0
 8012760:	6270      	str	r0, [r6, #36]	; 0x24
 8012762:	b928      	cbnz	r0, 8012770 <__pow5mult+0x40>
 8012764:	4b1d      	ldr	r3, [pc, #116]	; (80127dc <__pow5mult+0xac>)
 8012766:	481e      	ldr	r0, [pc, #120]	; (80127e0 <__pow5mult+0xb0>)
 8012768:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801276c:	f001 f998 	bl	8013aa0 <__assert_func>
 8012770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012774:	6004      	str	r4, [r0, #0]
 8012776:	60c4      	str	r4, [r0, #12]
 8012778:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801277c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012780:	b94c      	cbnz	r4, 8012796 <__pow5mult+0x66>
 8012782:	f240 2171 	movw	r1, #625	; 0x271
 8012786:	4630      	mov	r0, r6
 8012788:	f7ff ff16 	bl	80125b8 <__i2b>
 801278c:	2300      	movs	r3, #0
 801278e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012792:	4604      	mov	r4, r0
 8012794:	6003      	str	r3, [r0, #0]
 8012796:	f04f 0900 	mov.w	r9, #0
 801279a:	07eb      	lsls	r3, r5, #31
 801279c:	d50a      	bpl.n	80127b4 <__pow5mult+0x84>
 801279e:	4639      	mov	r1, r7
 80127a0:	4622      	mov	r2, r4
 80127a2:	4630      	mov	r0, r6
 80127a4:	f7ff ff1e 	bl	80125e4 <__multiply>
 80127a8:	4639      	mov	r1, r7
 80127aa:	4680      	mov	r8, r0
 80127ac:	4630      	mov	r0, r6
 80127ae:	f7ff fdfd 	bl	80123ac <_Bfree>
 80127b2:	4647      	mov	r7, r8
 80127b4:	106d      	asrs	r5, r5, #1
 80127b6:	d00b      	beq.n	80127d0 <__pow5mult+0xa0>
 80127b8:	6820      	ldr	r0, [r4, #0]
 80127ba:	b938      	cbnz	r0, 80127cc <__pow5mult+0x9c>
 80127bc:	4622      	mov	r2, r4
 80127be:	4621      	mov	r1, r4
 80127c0:	4630      	mov	r0, r6
 80127c2:	f7ff ff0f 	bl	80125e4 <__multiply>
 80127c6:	6020      	str	r0, [r4, #0]
 80127c8:	f8c0 9000 	str.w	r9, [r0]
 80127cc:	4604      	mov	r4, r0
 80127ce:	e7e4      	b.n	801279a <__pow5mult+0x6a>
 80127d0:	4638      	mov	r0, r7
 80127d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127d6:	bf00      	nop
 80127d8:	08015c48 	.word	0x08015c48
 80127dc:	0801598d 	.word	0x0801598d
 80127e0:	08015af4 	.word	0x08015af4

080127e4 <__lshift>:
 80127e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127e8:	460c      	mov	r4, r1
 80127ea:	6849      	ldr	r1, [r1, #4]
 80127ec:	6923      	ldr	r3, [r4, #16]
 80127ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80127f2:	68a3      	ldr	r3, [r4, #8]
 80127f4:	4607      	mov	r7, r0
 80127f6:	4691      	mov	r9, r2
 80127f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80127fc:	f108 0601 	add.w	r6, r8, #1
 8012800:	42b3      	cmp	r3, r6
 8012802:	db0b      	blt.n	801281c <__lshift+0x38>
 8012804:	4638      	mov	r0, r7
 8012806:	f7ff fd91 	bl	801232c <_Balloc>
 801280a:	4605      	mov	r5, r0
 801280c:	b948      	cbnz	r0, 8012822 <__lshift+0x3e>
 801280e:	4602      	mov	r2, r0
 8012810:	4b28      	ldr	r3, [pc, #160]	; (80128b4 <__lshift+0xd0>)
 8012812:	4829      	ldr	r0, [pc, #164]	; (80128b8 <__lshift+0xd4>)
 8012814:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012818:	f001 f942 	bl	8013aa0 <__assert_func>
 801281c:	3101      	adds	r1, #1
 801281e:	005b      	lsls	r3, r3, #1
 8012820:	e7ee      	b.n	8012800 <__lshift+0x1c>
 8012822:	2300      	movs	r3, #0
 8012824:	f100 0114 	add.w	r1, r0, #20
 8012828:	f100 0210 	add.w	r2, r0, #16
 801282c:	4618      	mov	r0, r3
 801282e:	4553      	cmp	r3, sl
 8012830:	db33      	blt.n	801289a <__lshift+0xb6>
 8012832:	6920      	ldr	r0, [r4, #16]
 8012834:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012838:	f104 0314 	add.w	r3, r4, #20
 801283c:	f019 091f 	ands.w	r9, r9, #31
 8012840:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012844:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012848:	d02b      	beq.n	80128a2 <__lshift+0xbe>
 801284a:	f1c9 0e20 	rsb	lr, r9, #32
 801284e:	468a      	mov	sl, r1
 8012850:	2200      	movs	r2, #0
 8012852:	6818      	ldr	r0, [r3, #0]
 8012854:	fa00 f009 	lsl.w	r0, r0, r9
 8012858:	4302      	orrs	r2, r0
 801285a:	f84a 2b04 	str.w	r2, [sl], #4
 801285e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012862:	459c      	cmp	ip, r3
 8012864:	fa22 f20e 	lsr.w	r2, r2, lr
 8012868:	d8f3      	bhi.n	8012852 <__lshift+0x6e>
 801286a:	ebac 0304 	sub.w	r3, ip, r4
 801286e:	3b15      	subs	r3, #21
 8012870:	f023 0303 	bic.w	r3, r3, #3
 8012874:	3304      	adds	r3, #4
 8012876:	f104 0015 	add.w	r0, r4, #21
 801287a:	4584      	cmp	ip, r0
 801287c:	bf38      	it	cc
 801287e:	2304      	movcc	r3, #4
 8012880:	50ca      	str	r2, [r1, r3]
 8012882:	b10a      	cbz	r2, 8012888 <__lshift+0xa4>
 8012884:	f108 0602 	add.w	r6, r8, #2
 8012888:	3e01      	subs	r6, #1
 801288a:	4638      	mov	r0, r7
 801288c:	612e      	str	r6, [r5, #16]
 801288e:	4621      	mov	r1, r4
 8012890:	f7ff fd8c 	bl	80123ac <_Bfree>
 8012894:	4628      	mov	r0, r5
 8012896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801289a:	f842 0f04 	str.w	r0, [r2, #4]!
 801289e:	3301      	adds	r3, #1
 80128a0:	e7c5      	b.n	801282e <__lshift+0x4a>
 80128a2:	3904      	subs	r1, #4
 80128a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80128a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80128ac:	459c      	cmp	ip, r3
 80128ae:	d8f9      	bhi.n	80128a4 <__lshift+0xc0>
 80128b0:	e7ea      	b.n	8012888 <__lshift+0xa4>
 80128b2:	bf00      	nop
 80128b4:	08015a03 	.word	0x08015a03
 80128b8:	08015af4 	.word	0x08015af4

080128bc <__mcmp>:
 80128bc:	b530      	push	{r4, r5, lr}
 80128be:	6902      	ldr	r2, [r0, #16]
 80128c0:	690c      	ldr	r4, [r1, #16]
 80128c2:	1b12      	subs	r2, r2, r4
 80128c4:	d10e      	bne.n	80128e4 <__mcmp+0x28>
 80128c6:	f100 0314 	add.w	r3, r0, #20
 80128ca:	3114      	adds	r1, #20
 80128cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80128d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80128d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80128d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80128dc:	42a5      	cmp	r5, r4
 80128de:	d003      	beq.n	80128e8 <__mcmp+0x2c>
 80128e0:	d305      	bcc.n	80128ee <__mcmp+0x32>
 80128e2:	2201      	movs	r2, #1
 80128e4:	4610      	mov	r0, r2
 80128e6:	bd30      	pop	{r4, r5, pc}
 80128e8:	4283      	cmp	r3, r0
 80128ea:	d3f3      	bcc.n	80128d4 <__mcmp+0x18>
 80128ec:	e7fa      	b.n	80128e4 <__mcmp+0x28>
 80128ee:	f04f 32ff 	mov.w	r2, #4294967295
 80128f2:	e7f7      	b.n	80128e4 <__mcmp+0x28>

080128f4 <__mdiff>:
 80128f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128f8:	460c      	mov	r4, r1
 80128fa:	4606      	mov	r6, r0
 80128fc:	4611      	mov	r1, r2
 80128fe:	4620      	mov	r0, r4
 8012900:	4617      	mov	r7, r2
 8012902:	f7ff ffdb 	bl	80128bc <__mcmp>
 8012906:	1e05      	subs	r5, r0, #0
 8012908:	d110      	bne.n	801292c <__mdiff+0x38>
 801290a:	4629      	mov	r1, r5
 801290c:	4630      	mov	r0, r6
 801290e:	f7ff fd0d 	bl	801232c <_Balloc>
 8012912:	b930      	cbnz	r0, 8012922 <__mdiff+0x2e>
 8012914:	4b39      	ldr	r3, [pc, #228]	; (80129fc <__mdiff+0x108>)
 8012916:	4602      	mov	r2, r0
 8012918:	f240 2132 	movw	r1, #562	; 0x232
 801291c:	4838      	ldr	r0, [pc, #224]	; (8012a00 <__mdiff+0x10c>)
 801291e:	f001 f8bf 	bl	8013aa0 <__assert_func>
 8012922:	2301      	movs	r3, #1
 8012924:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801292c:	bfa4      	itt	ge
 801292e:	463b      	movge	r3, r7
 8012930:	4627      	movge	r7, r4
 8012932:	4630      	mov	r0, r6
 8012934:	6879      	ldr	r1, [r7, #4]
 8012936:	bfa6      	itte	ge
 8012938:	461c      	movge	r4, r3
 801293a:	2500      	movge	r5, #0
 801293c:	2501      	movlt	r5, #1
 801293e:	f7ff fcf5 	bl	801232c <_Balloc>
 8012942:	b920      	cbnz	r0, 801294e <__mdiff+0x5a>
 8012944:	4b2d      	ldr	r3, [pc, #180]	; (80129fc <__mdiff+0x108>)
 8012946:	4602      	mov	r2, r0
 8012948:	f44f 7110 	mov.w	r1, #576	; 0x240
 801294c:	e7e6      	b.n	801291c <__mdiff+0x28>
 801294e:	693e      	ldr	r6, [r7, #16]
 8012950:	60c5      	str	r5, [r0, #12]
 8012952:	6925      	ldr	r5, [r4, #16]
 8012954:	f107 0114 	add.w	r1, r7, #20
 8012958:	f104 0914 	add.w	r9, r4, #20
 801295c:	f100 0e14 	add.w	lr, r0, #20
 8012960:	f107 0210 	add.w	r2, r7, #16
 8012964:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012968:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801296c:	46f2      	mov	sl, lr
 801296e:	2700      	movs	r7, #0
 8012970:	f859 3b04 	ldr.w	r3, [r9], #4
 8012974:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012978:	fa1f f883 	uxth.w	r8, r3
 801297c:	fa17 f78b 	uxtah	r7, r7, fp
 8012980:	0c1b      	lsrs	r3, r3, #16
 8012982:	eba7 0808 	sub.w	r8, r7, r8
 8012986:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801298a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801298e:	fa1f f888 	uxth.w	r8, r8
 8012992:	141f      	asrs	r7, r3, #16
 8012994:	454d      	cmp	r5, r9
 8012996:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801299a:	f84a 3b04 	str.w	r3, [sl], #4
 801299e:	d8e7      	bhi.n	8012970 <__mdiff+0x7c>
 80129a0:	1b2b      	subs	r3, r5, r4
 80129a2:	3b15      	subs	r3, #21
 80129a4:	f023 0303 	bic.w	r3, r3, #3
 80129a8:	3304      	adds	r3, #4
 80129aa:	3415      	adds	r4, #21
 80129ac:	42a5      	cmp	r5, r4
 80129ae:	bf38      	it	cc
 80129b0:	2304      	movcc	r3, #4
 80129b2:	4419      	add	r1, r3
 80129b4:	4473      	add	r3, lr
 80129b6:	469e      	mov	lr, r3
 80129b8:	460d      	mov	r5, r1
 80129ba:	4565      	cmp	r5, ip
 80129bc:	d30e      	bcc.n	80129dc <__mdiff+0xe8>
 80129be:	f10c 0203 	add.w	r2, ip, #3
 80129c2:	1a52      	subs	r2, r2, r1
 80129c4:	f022 0203 	bic.w	r2, r2, #3
 80129c8:	3903      	subs	r1, #3
 80129ca:	458c      	cmp	ip, r1
 80129cc:	bf38      	it	cc
 80129ce:	2200      	movcc	r2, #0
 80129d0:	441a      	add	r2, r3
 80129d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80129d6:	b17b      	cbz	r3, 80129f8 <__mdiff+0x104>
 80129d8:	6106      	str	r6, [r0, #16]
 80129da:	e7a5      	b.n	8012928 <__mdiff+0x34>
 80129dc:	f855 8b04 	ldr.w	r8, [r5], #4
 80129e0:	fa17 f488 	uxtah	r4, r7, r8
 80129e4:	1422      	asrs	r2, r4, #16
 80129e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80129ea:	b2a4      	uxth	r4, r4
 80129ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80129f0:	f84e 4b04 	str.w	r4, [lr], #4
 80129f4:	1417      	asrs	r7, r2, #16
 80129f6:	e7e0      	b.n	80129ba <__mdiff+0xc6>
 80129f8:	3e01      	subs	r6, #1
 80129fa:	e7ea      	b.n	80129d2 <__mdiff+0xde>
 80129fc:	08015a03 	.word	0x08015a03
 8012a00:	08015af4 	.word	0x08015af4

08012a04 <__ulp>:
 8012a04:	b082      	sub	sp, #8
 8012a06:	ed8d 0b00 	vstr	d0, [sp]
 8012a0a:	9b01      	ldr	r3, [sp, #4]
 8012a0c:	4912      	ldr	r1, [pc, #72]	; (8012a58 <__ulp+0x54>)
 8012a0e:	4019      	ands	r1, r3
 8012a10:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012a14:	2900      	cmp	r1, #0
 8012a16:	dd05      	ble.n	8012a24 <__ulp+0x20>
 8012a18:	2200      	movs	r2, #0
 8012a1a:	460b      	mov	r3, r1
 8012a1c:	ec43 2b10 	vmov	d0, r2, r3
 8012a20:	b002      	add	sp, #8
 8012a22:	4770      	bx	lr
 8012a24:	4249      	negs	r1, r1
 8012a26:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012a2a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012a2e:	f04f 0200 	mov.w	r2, #0
 8012a32:	f04f 0300 	mov.w	r3, #0
 8012a36:	da04      	bge.n	8012a42 <__ulp+0x3e>
 8012a38:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012a3c:	fa41 f300 	asr.w	r3, r1, r0
 8012a40:	e7ec      	b.n	8012a1c <__ulp+0x18>
 8012a42:	f1a0 0114 	sub.w	r1, r0, #20
 8012a46:	291e      	cmp	r1, #30
 8012a48:	bfda      	itte	le
 8012a4a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012a4e:	fa20 f101 	lsrle.w	r1, r0, r1
 8012a52:	2101      	movgt	r1, #1
 8012a54:	460a      	mov	r2, r1
 8012a56:	e7e1      	b.n	8012a1c <__ulp+0x18>
 8012a58:	7ff00000 	.word	0x7ff00000

08012a5c <__b2d>:
 8012a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a5e:	6905      	ldr	r5, [r0, #16]
 8012a60:	f100 0714 	add.w	r7, r0, #20
 8012a64:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012a68:	1f2e      	subs	r6, r5, #4
 8012a6a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012a6e:	4620      	mov	r0, r4
 8012a70:	f7ff fd52 	bl	8012518 <__hi0bits>
 8012a74:	f1c0 0320 	rsb	r3, r0, #32
 8012a78:	280a      	cmp	r0, #10
 8012a7a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012af8 <__b2d+0x9c>
 8012a7e:	600b      	str	r3, [r1, #0]
 8012a80:	dc14      	bgt.n	8012aac <__b2d+0x50>
 8012a82:	f1c0 0e0b 	rsb	lr, r0, #11
 8012a86:	fa24 f10e 	lsr.w	r1, r4, lr
 8012a8a:	42b7      	cmp	r7, r6
 8012a8c:	ea41 030c 	orr.w	r3, r1, ip
 8012a90:	bf34      	ite	cc
 8012a92:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012a96:	2100      	movcs	r1, #0
 8012a98:	3015      	adds	r0, #21
 8012a9a:	fa04 f000 	lsl.w	r0, r4, r0
 8012a9e:	fa21 f10e 	lsr.w	r1, r1, lr
 8012aa2:	ea40 0201 	orr.w	r2, r0, r1
 8012aa6:	ec43 2b10 	vmov	d0, r2, r3
 8012aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aac:	42b7      	cmp	r7, r6
 8012aae:	bf3a      	itte	cc
 8012ab0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012ab4:	f1a5 0608 	subcc.w	r6, r5, #8
 8012ab8:	2100      	movcs	r1, #0
 8012aba:	380b      	subs	r0, #11
 8012abc:	d017      	beq.n	8012aee <__b2d+0x92>
 8012abe:	f1c0 0c20 	rsb	ip, r0, #32
 8012ac2:	fa04 f500 	lsl.w	r5, r4, r0
 8012ac6:	42be      	cmp	r6, r7
 8012ac8:	fa21 f40c 	lsr.w	r4, r1, ip
 8012acc:	ea45 0504 	orr.w	r5, r5, r4
 8012ad0:	bf8c      	ite	hi
 8012ad2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012ad6:	2400      	movls	r4, #0
 8012ad8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012adc:	fa01 f000 	lsl.w	r0, r1, r0
 8012ae0:	fa24 f40c 	lsr.w	r4, r4, ip
 8012ae4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012ae8:	ea40 0204 	orr.w	r2, r0, r4
 8012aec:	e7db      	b.n	8012aa6 <__b2d+0x4a>
 8012aee:	ea44 030c 	orr.w	r3, r4, ip
 8012af2:	460a      	mov	r2, r1
 8012af4:	e7d7      	b.n	8012aa6 <__b2d+0x4a>
 8012af6:	bf00      	nop
 8012af8:	3ff00000 	.word	0x3ff00000

08012afc <__d2b>:
 8012afc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012b00:	4689      	mov	r9, r1
 8012b02:	2101      	movs	r1, #1
 8012b04:	ec57 6b10 	vmov	r6, r7, d0
 8012b08:	4690      	mov	r8, r2
 8012b0a:	f7ff fc0f 	bl	801232c <_Balloc>
 8012b0e:	4604      	mov	r4, r0
 8012b10:	b930      	cbnz	r0, 8012b20 <__d2b+0x24>
 8012b12:	4602      	mov	r2, r0
 8012b14:	4b25      	ldr	r3, [pc, #148]	; (8012bac <__d2b+0xb0>)
 8012b16:	4826      	ldr	r0, [pc, #152]	; (8012bb0 <__d2b+0xb4>)
 8012b18:	f240 310a 	movw	r1, #778	; 0x30a
 8012b1c:	f000 ffc0 	bl	8013aa0 <__assert_func>
 8012b20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012b24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012b28:	bb35      	cbnz	r5, 8012b78 <__d2b+0x7c>
 8012b2a:	2e00      	cmp	r6, #0
 8012b2c:	9301      	str	r3, [sp, #4]
 8012b2e:	d028      	beq.n	8012b82 <__d2b+0x86>
 8012b30:	4668      	mov	r0, sp
 8012b32:	9600      	str	r6, [sp, #0]
 8012b34:	f7ff fd10 	bl	8012558 <__lo0bits>
 8012b38:	9900      	ldr	r1, [sp, #0]
 8012b3a:	b300      	cbz	r0, 8012b7e <__d2b+0x82>
 8012b3c:	9a01      	ldr	r2, [sp, #4]
 8012b3e:	f1c0 0320 	rsb	r3, r0, #32
 8012b42:	fa02 f303 	lsl.w	r3, r2, r3
 8012b46:	430b      	orrs	r3, r1
 8012b48:	40c2      	lsrs	r2, r0
 8012b4a:	6163      	str	r3, [r4, #20]
 8012b4c:	9201      	str	r2, [sp, #4]
 8012b4e:	9b01      	ldr	r3, [sp, #4]
 8012b50:	61a3      	str	r3, [r4, #24]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	bf14      	ite	ne
 8012b56:	2202      	movne	r2, #2
 8012b58:	2201      	moveq	r2, #1
 8012b5a:	6122      	str	r2, [r4, #16]
 8012b5c:	b1d5      	cbz	r5, 8012b94 <__d2b+0x98>
 8012b5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012b62:	4405      	add	r5, r0
 8012b64:	f8c9 5000 	str.w	r5, [r9]
 8012b68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012b6c:	f8c8 0000 	str.w	r0, [r8]
 8012b70:	4620      	mov	r0, r4
 8012b72:	b003      	add	sp, #12
 8012b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012b7c:	e7d5      	b.n	8012b2a <__d2b+0x2e>
 8012b7e:	6161      	str	r1, [r4, #20]
 8012b80:	e7e5      	b.n	8012b4e <__d2b+0x52>
 8012b82:	a801      	add	r0, sp, #4
 8012b84:	f7ff fce8 	bl	8012558 <__lo0bits>
 8012b88:	9b01      	ldr	r3, [sp, #4]
 8012b8a:	6163      	str	r3, [r4, #20]
 8012b8c:	2201      	movs	r2, #1
 8012b8e:	6122      	str	r2, [r4, #16]
 8012b90:	3020      	adds	r0, #32
 8012b92:	e7e3      	b.n	8012b5c <__d2b+0x60>
 8012b94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012b98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012b9c:	f8c9 0000 	str.w	r0, [r9]
 8012ba0:	6918      	ldr	r0, [r3, #16]
 8012ba2:	f7ff fcb9 	bl	8012518 <__hi0bits>
 8012ba6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012baa:	e7df      	b.n	8012b6c <__d2b+0x70>
 8012bac:	08015a03 	.word	0x08015a03
 8012bb0:	08015af4 	.word	0x08015af4

08012bb4 <__ratio>:
 8012bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb8:	4688      	mov	r8, r1
 8012bba:	4669      	mov	r1, sp
 8012bbc:	4681      	mov	r9, r0
 8012bbe:	f7ff ff4d 	bl	8012a5c <__b2d>
 8012bc2:	a901      	add	r1, sp, #4
 8012bc4:	4640      	mov	r0, r8
 8012bc6:	ec55 4b10 	vmov	r4, r5, d0
 8012bca:	f7ff ff47 	bl	8012a5c <__b2d>
 8012bce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012bd2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012bd6:	eba3 0c02 	sub.w	ip, r3, r2
 8012bda:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012bde:	1a9b      	subs	r3, r3, r2
 8012be0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012be4:	ec51 0b10 	vmov	r0, r1, d0
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	bfd6      	itet	le
 8012bec:	460a      	movle	r2, r1
 8012bee:	462a      	movgt	r2, r5
 8012bf0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012bf4:	468b      	mov	fp, r1
 8012bf6:	462f      	mov	r7, r5
 8012bf8:	bfd4      	ite	le
 8012bfa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012bfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012c02:	4620      	mov	r0, r4
 8012c04:	ee10 2a10 	vmov	r2, s0
 8012c08:	465b      	mov	r3, fp
 8012c0a:	4639      	mov	r1, r7
 8012c0c:	f7ed fe2e 	bl	800086c <__aeabi_ddiv>
 8012c10:	ec41 0b10 	vmov	d0, r0, r1
 8012c14:	b003      	add	sp, #12
 8012c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012c1a <__copybits>:
 8012c1a:	3901      	subs	r1, #1
 8012c1c:	b570      	push	{r4, r5, r6, lr}
 8012c1e:	1149      	asrs	r1, r1, #5
 8012c20:	6914      	ldr	r4, [r2, #16]
 8012c22:	3101      	adds	r1, #1
 8012c24:	f102 0314 	add.w	r3, r2, #20
 8012c28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012c2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012c30:	1f05      	subs	r5, r0, #4
 8012c32:	42a3      	cmp	r3, r4
 8012c34:	d30c      	bcc.n	8012c50 <__copybits+0x36>
 8012c36:	1aa3      	subs	r3, r4, r2
 8012c38:	3b11      	subs	r3, #17
 8012c3a:	f023 0303 	bic.w	r3, r3, #3
 8012c3e:	3211      	adds	r2, #17
 8012c40:	42a2      	cmp	r2, r4
 8012c42:	bf88      	it	hi
 8012c44:	2300      	movhi	r3, #0
 8012c46:	4418      	add	r0, r3
 8012c48:	2300      	movs	r3, #0
 8012c4a:	4288      	cmp	r0, r1
 8012c4c:	d305      	bcc.n	8012c5a <__copybits+0x40>
 8012c4e:	bd70      	pop	{r4, r5, r6, pc}
 8012c50:	f853 6b04 	ldr.w	r6, [r3], #4
 8012c54:	f845 6f04 	str.w	r6, [r5, #4]!
 8012c58:	e7eb      	b.n	8012c32 <__copybits+0x18>
 8012c5a:	f840 3b04 	str.w	r3, [r0], #4
 8012c5e:	e7f4      	b.n	8012c4a <__copybits+0x30>

08012c60 <__any_on>:
 8012c60:	f100 0214 	add.w	r2, r0, #20
 8012c64:	6900      	ldr	r0, [r0, #16]
 8012c66:	114b      	asrs	r3, r1, #5
 8012c68:	4298      	cmp	r0, r3
 8012c6a:	b510      	push	{r4, lr}
 8012c6c:	db11      	blt.n	8012c92 <__any_on+0x32>
 8012c6e:	dd0a      	ble.n	8012c86 <__any_on+0x26>
 8012c70:	f011 011f 	ands.w	r1, r1, #31
 8012c74:	d007      	beq.n	8012c86 <__any_on+0x26>
 8012c76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012c7a:	fa24 f001 	lsr.w	r0, r4, r1
 8012c7e:	fa00 f101 	lsl.w	r1, r0, r1
 8012c82:	428c      	cmp	r4, r1
 8012c84:	d10b      	bne.n	8012c9e <__any_on+0x3e>
 8012c86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c8a:	4293      	cmp	r3, r2
 8012c8c:	d803      	bhi.n	8012c96 <__any_on+0x36>
 8012c8e:	2000      	movs	r0, #0
 8012c90:	bd10      	pop	{r4, pc}
 8012c92:	4603      	mov	r3, r0
 8012c94:	e7f7      	b.n	8012c86 <__any_on+0x26>
 8012c96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012c9a:	2900      	cmp	r1, #0
 8012c9c:	d0f5      	beq.n	8012c8a <__any_on+0x2a>
 8012c9e:	2001      	movs	r0, #1
 8012ca0:	e7f6      	b.n	8012c90 <__any_on+0x30>

08012ca2 <_calloc_r>:
 8012ca2:	b513      	push	{r0, r1, r4, lr}
 8012ca4:	434a      	muls	r2, r1
 8012ca6:	4611      	mov	r1, r2
 8012ca8:	9201      	str	r2, [sp, #4]
 8012caa:	f7fb fefb 	bl	800eaa4 <_malloc_r>
 8012cae:	4604      	mov	r4, r0
 8012cb0:	b118      	cbz	r0, 8012cba <_calloc_r+0x18>
 8012cb2:	9a01      	ldr	r2, [sp, #4]
 8012cb4:	2100      	movs	r1, #0
 8012cb6:	f7fb fe9d 	bl	800e9f4 <memset>
 8012cba:	4620      	mov	r0, r4
 8012cbc:	b002      	add	sp, #8
 8012cbe:	bd10      	pop	{r4, pc}

08012cc0 <__ssputs_r>:
 8012cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cc4:	688e      	ldr	r6, [r1, #8]
 8012cc6:	429e      	cmp	r6, r3
 8012cc8:	4682      	mov	sl, r0
 8012cca:	460c      	mov	r4, r1
 8012ccc:	4690      	mov	r8, r2
 8012cce:	461f      	mov	r7, r3
 8012cd0:	d838      	bhi.n	8012d44 <__ssputs_r+0x84>
 8012cd2:	898a      	ldrh	r2, [r1, #12]
 8012cd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012cd8:	d032      	beq.n	8012d40 <__ssputs_r+0x80>
 8012cda:	6825      	ldr	r5, [r4, #0]
 8012cdc:	6909      	ldr	r1, [r1, #16]
 8012cde:	eba5 0901 	sub.w	r9, r5, r1
 8012ce2:	6965      	ldr	r5, [r4, #20]
 8012ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012ce8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012cec:	3301      	adds	r3, #1
 8012cee:	444b      	add	r3, r9
 8012cf0:	106d      	asrs	r5, r5, #1
 8012cf2:	429d      	cmp	r5, r3
 8012cf4:	bf38      	it	cc
 8012cf6:	461d      	movcc	r5, r3
 8012cf8:	0553      	lsls	r3, r2, #21
 8012cfa:	d531      	bpl.n	8012d60 <__ssputs_r+0xa0>
 8012cfc:	4629      	mov	r1, r5
 8012cfe:	f7fb fed1 	bl	800eaa4 <_malloc_r>
 8012d02:	4606      	mov	r6, r0
 8012d04:	b950      	cbnz	r0, 8012d1c <__ssputs_r+0x5c>
 8012d06:	230c      	movs	r3, #12
 8012d08:	f8ca 3000 	str.w	r3, [sl]
 8012d0c:	89a3      	ldrh	r3, [r4, #12]
 8012d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d12:	81a3      	strh	r3, [r4, #12]
 8012d14:	f04f 30ff 	mov.w	r0, #4294967295
 8012d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d1c:	6921      	ldr	r1, [r4, #16]
 8012d1e:	464a      	mov	r2, r9
 8012d20:	f7fb fe5a 	bl	800e9d8 <memcpy>
 8012d24:	89a3      	ldrh	r3, [r4, #12]
 8012d26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d2e:	81a3      	strh	r3, [r4, #12]
 8012d30:	6126      	str	r6, [r4, #16]
 8012d32:	6165      	str	r5, [r4, #20]
 8012d34:	444e      	add	r6, r9
 8012d36:	eba5 0509 	sub.w	r5, r5, r9
 8012d3a:	6026      	str	r6, [r4, #0]
 8012d3c:	60a5      	str	r5, [r4, #8]
 8012d3e:	463e      	mov	r6, r7
 8012d40:	42be      	cmp	r6, r7
 8012d42:	d900      	bls.n	8012d46 <__ssputs_r+0x86>
 8012d44:	463e      	mov	r6, r7
 8012d46:	4632      	mov	r2, r6
 8012d48:	6820      	ldr	r0, [r4, #0]
 8012d4a:	4641      	mov	r1, r8
 8012d4c:	f000 fefa 	bl	8013b44 <memmove>
 8012d50:	68a3      	ldr	r3, [r4, #8]
 8012d52:	6822      	ldr	r2, [r4, #0]
 8012d54:	1b9b      	subs	r3, r3, r6
 8012d56:	4432      	add	r2, r6
 8012d58:	60a3      	str	r3, [r4, #8]
 8012d5a:	6022      	str	r2, [r4, #0]
 8012d5c:	2000      	movs	r0, #0
 8012d5e:	e7db      	b.n	8012d18 <__ssputs_r+0x58>
 8012d60:	462a      	mov	r2, r5
 8012d62:	f000 ff09 	bl	8013b78 <_realloc_r>
 8012d66:	4606      	mov	r6, r0
 8012d68:	2800      	cmp	r0, #0
 8012d6a:	d1e1      	bne.n	8012d30 <__ssputs_r+0x70>
 8012d6c:	6921      	ldr	r1, [r4, #16]
 8012d6e:	4650      	mov	r0, sl
 8012d70:	f7fb fe48 	bl	800ea04 <_free_r>
 8012d74:	e7c7      	b.n	8012d06 <__ssputs_r+0x46>
	...

08012d78 <_svfiprintf_r>:
 8012d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7c:	4698      	mov	r8, r3
 8012d7e:	898b      	ldrh	r3, [r1, #12]
 8012d80:	061b      	lsls	r3, r3, #24
 8012d82:	b09d      	sub	sp, #116	; 0x74
 8012d84:	4607      	mov	r7, r0
 8012d86:	460d      	mov	r5, r1
 8012d88:	4614      	mov	r4, r2
 8012d8a:	d50e      	bpl.n	8012daa <_svfiprintf_r+0x32>
 8012d8c:	690b      	ldr	r3, [r1, #16]
 8012d8e:	b963      	cbnz	r3, 8012daa <_svfiprintf_r+0x32>
 8012d90:	2140      	movs	r1, #64	; 0x40
 8012d92:	f7fb fe87 	bl	800eaa4 <_malloc_r>
 8012d96:	6028      	str	r0, [r5, #0]
 8012d98:	6128      	str	r0, [r5, #16]
 8012d9a:	b920      	cbnz	r0, 8012da6 <_svfiprintf_r+0x2e>
 8012d9c:	230c      	movs	r3, #12
 8012d9e:	603b      	str	r3, [r7, #0]
 8012da0:	f04f 30ff 	mov.w	r0, #4294967295
 8012da4:	e0d1      	b.n	8012f4a <_svfiprintf_r+0x1d2>
 8012da6:	2340      	movs	r3, #64	; 0x40
 8012da8:	616b      	str	r3, [r5, #20]
 8012daa:	2300      	movs	r3, #0
 8012dac:	9309      	str	r3, [sp, #36]	; 0x24
 8012dae:	2320      	movs	r3, #32
 8012db0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8012db8:	2330      	movs	r3, #48	; 0x30
 8012dba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012f64 <_svfiprintf_r+0x1ec>
 8012dbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012dc2:	f04f 0901 	mov.w	r9, #1
 8012dc6:	4623      	mov	r3, r4
 8012dc8:	469a      	mov	sl, r3
 8012dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dce:	b10a      	cbz	r2, 8012dd4 <_svfiprintf_r+0x5c>
 8012dd0:	2a25      	cmp	r2, #37	; 0x25
 8012dd2:	d1f9      	bne.n	8012dc8 <_svfiprintf_r+0x50>
 8012dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8012dd8:	d00b      	beq.n	8012df2 <_svfiprintf_r+0x7a>
 8012dda:	465b      	mov	r3, fp
 8012ddc:	4622      	mov	r2, r4
 8012dde:	4629      	mov	r1, r5
 8012de0:	4638      	mov	r0, r7
 8012de2:	f7ff ff6d 	bl	8012cc0 <__ssputs_r>
 8012de6:	3001      	adds	r0, #1
 8012de8:	f000 80aa 	beq.w	8012f40 <_svfiprintf_r+0x1c8>
 8012dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dee:	445a      	add	r2, fp
 8012df0:	9209      	str	r2, [sp, #36]	; 0x24
 8012df2:	f89a 3000 	ldrb.w	r3, [sl]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	f000 80a2 	beq.w	8012f40 <_svfiprintf_r+0x1c8>
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8012e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e06:	f10a 0a01 	add.w	sl, sl, #1
 8012e0a:	9304      	str	r3, [sp, #16]
 8012e0c:	9307      	str	r3, [sp, #28]
 8012e0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e12:	931a      	str	r3, [sp, #104]	; 0x68
 8012e14:	4654      	mov	r4, sl
 8012e16:	2205      	movs	r2, #5
 8012e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e1c:	4851      	ldr	r0, [pc, #324]	; (8012f64 <_svfiprintf_r+0x1ec>)
 8012e1e:	f7ed f9ef 	bl	8000200 <memchr>
 8012e22:	9a04      	ldr	r2, [sp, #16]
 8012e24:	b9d8      	cbnz	r0, 8012e5e <_svfiprintf_r+0xe6>
 8012e26:	06d0      	lsls	r0, r2, #27
 8012e28:	bf44      	itt	mi
 8012e2a:	2320      	movmi	r3, #32
 8012e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e30:	0711      	lsls	r1, r2, #28
 8012e32:	bf44      	itt	mi
 8012e34:	232b      	movmi	r3, #43	; 0x2b
 8012e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8012e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8012e40:	d015      	beq.n	8012e6e <_svfiprintf_r+0xf6>
 8012e42:	9a07      	ldr	r2, [sp, #28]
 8012e44:	4654      	mov	r4, sl
 8012e46:	2000      	movs	r0, #0
 8012e48:	f04f 0c0a 	mov.w	ip, #10
 8012e4c:	4621      	mov	r1, r4
 8012e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e52:	3b30      	subs	r3, #48	; 0x30
 8012e54:	2b09      	cmp	r3, #9
 8012e56:	d94e      	bls.n	8012ef6 <_svfiprintf_r+0x17e>
 8012e58:	b1b0      	cbz	r0, 8012e88 <_svfiprintf_r+0x110>
 8012e5a:	9207      	str	r2, [sp, #28]
 8012e5c:	e014      	b.n	8012e88 <_svfiprintf_r+0x110>
 8012e5e:	eba0 0308 	sub.w	r3, r0, r8
 8012e62:	fa09 f303 	lsl.w	r3, r9, r3
 8012e66:	4313      	orrs	r3, r2
 8012e68:	9304      	str	r3, [sp, #16]
 8012e6a:	46a2      	mov	sl, r4
 8012e6c:	e7d2      	b.n	8012e14 <_svfiprintf_r+0x9c>
 8012e6e:	9b03      	ldr	r3, [sp, #12]
 8012e70:	1d19      	adds	r1, r3, #4
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	9103      	str	r1, [sp, #12]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	bfbb      	ittet	lt
 8012e7a:	425b      	neglt	r3, r3
 8012e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8012e80:	9307      	strge	r3, [sp, #28]
 8012e82:	9307      	strlt	r3, [sp, #28]
 8012e84:	bfb8      	it	lt
 8012e86:	9204      	strlt	r2, [sp, #16]
 8012e88:	7823      	ldrb	r3, [r4, #0]
 8012e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8012e8c:	d10c      	bne.n	8012ea8 <_svfiprintf_r+0x130>
 8012e8e:	7863      	ldrb	r3, [r4, #1]
 8012e90:	2b2a      	cmp	r3, #42	; 0x2a
 8012e92:	d135      	bne.n	8012f00 <_svfiprintf_r+0x188>
 8012e94:	9b03      	ldr	r3, [sp, #12]
 8012e96:	1d1a      	adds	r2, r3, #4
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	9203      	str	r2, [sp, #12]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	bfb8      	it	lt
 8012ea0:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ea4:	3402      	adds	r4, #2
 8012ea6:	9305      	str	r3, [sp, #20]
 8012ea8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012f74 <_svfiprintf_r+0x1fc>
 8012eac:	7821      	ldrb	r1, [r4, #0]
 8012eae:	2203      	movs	r2, #3
 8012eb0:	4650      	mov	r0, sl
 8012eb2:	f7ed f9a5 	bl	8000200 <memchr>
 8012eb6:	b140      	cbz	r0, 8012eca <_svfiprintf_r+0x152>
 8012eb8:	2340      	movs	r3, #64	; 0x40
 8012eba:	eba0 000a 	sub.w	r0, r0, sl
 8012ebe:	fa03 f000 	lsl.w	r0, r3, r0
 8012ec2:	9b04      	ldr	r3, [sp, #16]
 8012ec4:	4303      	orrs	r3, r0
 8012ec6:	3401      	adds	r4, #1
 8012ec8:	9304      	str	r3, [sp, #16]
 8012eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ece:	4826      	ldr	r0, [pc, #152]	; (8012f68 <_svfiprintf_r+0x1f0>)
 8012ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ed4:	2206      	movs	r2, #6
 8012ed6:	f7ed f993 	bl	8000200 <memchr>
 8012eda:	2800      	cmp	r0, #0
 8012edc:	d038      	beq.n	8012f50 <_svfiprintf_r+0x1d8>
 8012ede:	4b23      	ldr	r3, [pc, #140]	; (8012f6c <_svfiprintf_r+0x1f4>)
 8012ee0:	bb1b      	cbnz	r3, 8012f2a <_svfiprintf_r+0x1b2>
 8012ee2:	9b03      	ldr	r3, [sp, #12]
 8012ee4:	3307      	adds	r3, #7
 8012ee6:	f023 0307 	bic.w	r3, r3, #7
 8012eea:	3308      	adds	r3, #8
 8012eec:	9303      	str	r3, [sp, #12]
 8012eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ef0:	4433      	add	r3, r6
 8012ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8012ef4:	e767      	b.n	8012dc6 <_svfiprintf_r+0x4e>
 8012ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8012efa:	460c      	mov	r4, r1
 8012efc:	2001      	movs	r0, #1
 8012efe:	e7a5      	b.n	8012e4c <_svfiprintf_r+0xd4>
 8012f00:	2300      	movs	r3, #0
 8012f02:	3401      	adds	r4, #1
 8012f04:	9305      	str	r3, [sp, #20]
 8012f06:	4619      	mov	r1, r3
 8012f08:	f04f 0c0a 	mov.w	ip, #10
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f12:	3a30      	subs	r2, #48	; 0x30
 8012f14:	2a09      	cmp	r2, #9
 8012f16:	d903      	bls.n	8012f20 <_svfiprintf_r+0x1a8>
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d0c5      	beq.n	8012ea8 <_svfiprintf_r+0x130>
 8012f1c:	9105      	str	r1, [sp, #20]
 8012f1e:	e7c3      	b.n	8012ea8 <_svfiprintf_r+0x130>
 8012f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f24:	4604      	mov	r4, r0
 8012f26:	2301      	movs	r3, #1
 8012f28:	e7f0      	b.n	8012f0c <_svfiprintf_r+0x194>
 8012f2a:	ab03      	add	r3, sp, #12
 8012f2c:	9300      	str	r3, [sp, #0]
 8012f2e:	462a      	mov	r2, r5
 8012f30:	4b0f      	ldr	r3, [pc, #60]	; (8012f70 <_svfiprintf_r+0x1f8>)
 8012f32:	a904      	add	r1, sp, #16
 8012f34:	4638      	mov	r0, r7
 8012f36:	f7fb feaf 	bl	800ec98 <_printf_float>
 8012f3a:	1c42      	adds	r2, r0, #1
 8012f3c:	4606      	mov	r6, r0
 8012f3e:	d1d6      	bne.n	8012eee <_svfiprintf_r+0x176>
 8012f40:	89ab      	ldrh	r3, [r5, #12]
 8012f42:	065b      	lsls	r3, r3, #25
 8012f44:	f53f af2c 	bmi.w	8012da0 <_svfiprintf_r+0x28>
 8012f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f4a:	b01d      	add	sp, #116	; 0x74
 8012f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f50:	ab03      	add	r3, sp, #12
 8012f52:	9300      	str	r3, [sp, #0]
 8012f54:	462a      	mov	r2, r5
 8012f56:	4b06      	ldr	r3, [pc, #24]	; (8012f70 <_svfiprintf_r+0x1f8>)
 8012f58:	a904      	add	r1, sp, #16
 8012f5a:	4638      	mov	r0, r7
 8012f5c:	f7fc f940 	bl	800f1e0 <_printf_i>
 8012f60:	e7eb      	b.n	8012f3a <_svfiprintf_r+0x1c2>
 8012f62:	bf00      	nop
 8012f64:	08015c54 	.word	0x08015c54
 8012f68:	08015c5e 	.word	0x08015c5e
 8012f6c:	0800ec99 	.word	0x0800ec99
 8012f70:	08012cc1 	.word	0x08012cc1
 8012f74:	08015c5a 	.word	0x08015c5a

08012f78 <_sungetc_r>:
 8012f78:	b538      	push	{r3, r4, r5, lr}
 8012f7a:	1c4b      	adds	r3, r1, #1
 8012f7c:	4614      	mov	r4, r2
 8012f7e:	d103      	bne.n	8012f88 <_sungetc_r+0x10>
 8012f80:	f04f 35ff 	mov.w	r5, #4294967295
 8012f84:	4628      	mov	r0, r5
 8012f86:	bd38      	pop	{r3, r4, r5, pc}
 8012f88:	8993      	ldrh	r3, [r2, #12]
 8012f8a:	f023 0320 	bic.w	r3, r3, #32
 8012f8e:	8193      	strh	r3, [r2, #12]
 8012f90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f92:	6852      	ldr	r2, [r2, #4]
 8012f94:	b2cd      	uxtb	r5, r1
 8012f96:	b18b      	cbz	r3, 8012fbc <_sungetc_r+0x44>
 8012f98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	dd08      	ble.n	8012fb0 <_sungetc_r+0x38>
 8012f9e:	6823      	ldr	r3, [r4, #0]
 8012fa0:	1e5a      	subs	r2, r3, #1
 8012fa2:	6022      	str	r2, [r4, #0]
 8012fa4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012fa8:	6863      	ldr	r3, [r4, #4]
 8012faa:	3301      	adds	r3, #1
 8012fac:	6063      	str	r3, [r4, #4]
 8012fae:	e7e9      	b.n	8012f84 <_sungetc_r+0xc>
 8012fb0:	4621      	mov	r1, r4
 8012fb2:	f000 fd2d 	bl	8013a10 <__submore>
 8012fb6:	2800      	cmp	r0, #0
 8012fb8:	d0f1      	beq.n	8012f9e <_sungetc_r+0x26>
 8012fba:	e7e1      	b.n	8012f80 <_sungetc_r+0x8>
 8012fbc:	6921      	ldr	r1, [r4, #16]
 8012fbe:	6823      	ldr	r3, [r4, #0]
 8012fc0:	b151      	cbz	r1, 8012fd8 <_sungetc_r+0x60>
 8012fc2:	4299      	cmp	r1, r3
 8012fc4:	d208      	bcs.n	8012fd8 <_sungetc_r+0x60>
 8012fc6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012fca:	42a9      	cmp	r1, r5
 8012fcc:	d104      	bne.n	8012fd8 <_sungetc_r+0x60>
 8012fce:	3b01      	subs	r3, #1
 8012fd0:	3201      	adds	r2, #1
 8012fd2:	6023      	str	r3, [r4, #0]
 8012fd4:	6062      	str	r2, [r4, #4]
 8012fd6:	e7d5      	b.n	8012f84 <_sungetc_r+0xc>
 8012fd8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8012fe2:	2303      	movs	r3, #3
 8012fe4:	63a3      	str	r3, [r4, #56]	; 0x38
 8012fe6:	4623      	mov	r3, r4
 8012fe8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012fec:	6023      	str	r3, [r4, #0]
 8012fee:	2301      	movs	r3, #1
 8012ff0:	e7dc      	b.n	8012fac <_sungetc_r+0x34>

08012ff2 <__ssrefill_r>:
 8012ff2:	b510      	push	{r4, lr}
 8012ff4:	460c      	mov	r4, r1
 8012ff6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012ff8:	b169      	cbz	r1, 8013016 <__ssrefill_r+0x24>
 8012ffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ffe:	4299      	cmp	r1, r3
 8013000:	d001      	beq.n	8013006 <__ssrefill_r+0x14>
 8013002:	f7fb fcff 	bl	800ea04 <_free_r>
 8013006:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013008:	6063      	str	r3, [r4, #4]
 801300a:	2000      	movs	r0, #0
 801300c:	6360      	str	r0, [r4, #52]	; 0x34
 801300e:	b113      	cbz	r3, 8013016 <__ssrefill_r+0x24>
 8013010:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013012:	6023      	str	r3, [r4, #0]
 8013014:	bd10      	pop	{r4, pc}
 8013016:	6923      	ldr	r3, [r4, #16]
 8013018:	6023      	str	r3, [r4, #0]
 801301a:	2300      	movs	r3, #0
 801301c:	6063      	str	r3, [r4, #4]
 801301e:	89a3      	ldrh	r3, [r4, #12]
 8013020:	f043 0320 	orr.w	r3, r3, #32
 8013024:	81a3      	strh	r3, [r4, #12]
 8013026:	f04f 30ff 	mov.w	r0, #4294967295
 801302a:	e7f3      	b.n	8013014 <__ssrefill_r+0x22>

0801302c <__ssvfiscanf_r>:
 801302c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013030:	460c      	mov	r4, r1
 8013032:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8013036:	2100      	movs	r1, #0
 8013038:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801303c:	49b2      	ldr	r1, [pc, #712]	; (8013308 <__ssvfiscanf_r+0x2dc>)
 801303e:	91a0      	str	r1, [sp, #640]	; 0x280
 8013040:	f10d 0804 	add.w	r8, sp, #4
 8013044:	49b1      	ldr	r1, [pc, #708]	; (801330c <__ssvfiscanf_r+0x2e0>)
 8013046:	4fb2      	ldr	r7, [pc, #712]	; (8013310 <__ssvfiscanf_r+0x2e4>)
 8013048:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8013314 <__ssvfiscanf_r+0x2e8>
 801304c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013050:	4606      	mov	r6, r0
 8013052:	91a1      	str	r1, [sp, #644]	; 0x284
 8013054:	9300      	str	r3, [sp, #0]
 8013056:	f892 a000 	ldrb.w	sl, [r2]
 801305a:	f1ba 0f00 	cmp.w	sl, #0
 801305e:	f000 8151 	beq.w	8013304 <__ssvfiscanf_r+0x2d8>
 8013062:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8013066:	f013 0308 	ands.w	r3, r3, #8
 801306a:	f102 0501 	add.w	r5, r2, #1
 801306e:	d019      	beq.n	80130a4 <__ssvfiscanf_r+0x78>
 8013070:	6863      	ldr	r3, [r4, #4]
 8013072:	2b00      	cmp	r3, #0
 8013074:	dd0f      	ble.n	8013096 <__ssvfiscanf_r+0x6a>
 8013076:	6823      	ldr	r3, [r4, #0]
 8013078:	781a      	ldrb	r2, [r3, #0]
 801307a:	5cba      	ldrb	r2, [r7, r2]
 801307c:	0712      	lsls	r2, r2, #28
 801307e:	d401      	bmi.n	8013084 <__ssvfiscanf_r+0x58>
 8013080:	462a      	mov	r2, r5
 8013082:	e7e8      	b.n	8013056 <__ssvfiscanf_r+0x2a>
 8013084:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013086:	3201      	adds	r2, #1
 8013088:	9245      	str	r2, [sp, #276]	; 0x114
 801308a:	6862      	ldr	r2, [r4, #4]
 801308c:	3301      	adds	r3, #1
 801308e:	3a01      	subs	r2, #1
 8013090:	6062      	str	r2, [r4, #4]
 8013092:	6023      	str	r3, [r4, #0]
 8013094:	e7ec      	b.n	8013070 <__ssvfiscanf_r+0x44>
 8013096:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013098:	4621      	mov	r1, r4
 801309a:	4630      	mov	r0, r6
 801309c:	4798      	blx	r3
 801309e:	2800      	cmp	r0, #0
 80130a0:	d0e9      	beq.n	8013076 <__ssvfiscanf_r+0x4a>
 80130a2:	e7ed      	b.n	8013080 <__ssvfiscanf_r+0x54>
 80130a4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80130a8:	f040 8083 	bne.w	80131b2 <__ssvfiscanf_r+0x186>
 80130ac:	9341      	str	r3, [sp, #260]	; 0x104
 80130ae:	9343      	str	r3, [sp, #268]	; 0x10c
 80130b0:	7853      	ldrb	r3, [r2, #1]
 80130b2:	2b2a      	cmp	r3, #42	; 0x2a
 80130b4:	bf02      	ittt	eq
 80130b6:	2310      	moveq	r3, #16
 80130b8:	1c95      	addeq	r5, r2, #2
 80130ba:	9341      	streq	r3, [sp, #260]	; 0x104
 80130bc:	220a      	movs	r2, #10
 80130be:	46ab      	mov	fp, r5
 80130c0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80130c4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80130c8:	2b09      	cmp	r3, #9
 80130ca:	d91d      	bls.n	8013108 <__ssvfiscanf_r+0xdc>
 80130cc:	4891      	ldr	r0, [pc, #580]	; (8013314 <__ssvfiscanf_r+0x2e8>)
 80130ce:	2203      	movs	r2, #3
 80130d0:	f7ed f896 	bl	8000200 <memchr>
 80130d4:	b140      	cbz	r0, 80130e8 <__ssvfiscanf_r+0xbc>
 80130d6:	2301      	movs	r3, #1
 80130d8:	eba0 0009 	sub.w	r0, r0, r9
 80130dc:	fa03 f000 	lsl.w	r0, r3, r0
 80130e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80130e2:	4318      	orrs	r0, r3
 80130e4:	9041      	str	r0, [sp, #260]	; 0x104
 80130e6:	465d      	mov	r5, fp
 80130e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80130ec:	2b78      	cmp	r3, #120	; 0x78
 80130ee:	d806      	bhi.n	80130fe <__ssvfiscanf_r+0xd2>
 80130f0:	2b57      	cmp	r3, #87	; 0x57
 80130f2:	d810      	bhi.n	8013116 <__ssvfiscanf_r+0xea>
 80130f4:	2b25      	cmp	r3, #37	; 0x25
 80130f6:	d05c      	beq.n	80131b2 <__ssvfiscanf_r+0x186>
 80130f8:	d856      	bhi.n	80131a8 <__ssvfiscanf_r+0x17c>
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d074      	beq.n	80131e8 <__ssvfiscanf_r+0x1bc>
 80130fe:	2303      	movs	r3, #3
 8013100:	9347      	str	r3, [sp, #284]	; 0x11c
 8013102:	230a      	movs	r3, #10
 8013104:	9342      	str	r3, [sp, #264]	; 0x108
 8013106:	e081      	b.n	801320c <__ssvfiscanf_r+0x1e0>
 8013108:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801310a:	fb02 1303 	mla	r3, r2, r3, r1
 801310e:	3b30      	subs	r3, #48	; 0x30
 8013110:	9343      	str	r3, [sp, #268]	; 0x10c
 8013112:	465d      	mov	r5, fp
 8013114:	e7d3      	b.n	80130be <__ssvfiscanf_r+0x92>
 8013116:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801311a:	2a20      	cmp	r2, #32
 801311c:	d8ef      	bhi.n	80130fe <__ssvfiscanf_r+0xd2>
 801311e:	a101      	add	r1, pc, #4	; (adr r1, 8013124 <__ssvfiscanf_r+0xf8>)
 8013120:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013124:	080131f7 	.word	0x080131f7
 8013128:	080130ff 	.word	0x080130ff
 801312c:	080130ff 	.word	0x080130ff
 8013130:	08013255 	.word	0x08013255
 8013134:	080130ff 	.word	0x080130ff
 8013138:	080130ff 	.word	0x080130ff
 801313c:	080130ff 	.word	0x080130ff
 8013140:	080130ff 	.word	0x080130ff
 8013144:	080130ff 	.word	0x080130ff
 8013148:	080130ff 	.word	0x080130ff
 801314c:	080130ff 	.word	0x080130ff
 8013150:	0801326b 	.word	0x0801326b
 8013154:	08013241 	.word	0x08013241
 8013158:	080131af 	.word	0x080131af
 801315c:	080131af 	.word	0x080131af
 8013160:	080131af 	.word	0x080131af
 8013164:	080130ff 	.word	0x080130ff
 8013168:	08013245 	.word	0x08013245
 801316c:	080130ff 	.word	0x080130ff
 8013170:	080130ff 	.word	0x080130ff
 8013174:	080130ff 	.word	0x080130ff
 8013178:	080130ff 	.word	0x080130ff
 801317c:	0801327b 	.word	0x0801327b
 8013180:	0801324d 	.word	0x0801324d
 8013184:	080131ef 	.word	0x080131ef
 8013188:	080130ff 	.word	0x080130ff
 801318c:	080130ff 	.word	0x080130ff
 8013190:	08013277 	.word	0x08013277
 8013194:	080130ff 	.word	0x080130ff
 8013198:	08013241 	.word	0x08013241
 801319c:	080130ff 	.word	0x080130ff
 80131a0:	080130ff 	.word	0x080130ff
 80131a4:	080131f7 	.word	0x080131f7
 80131a8:	3b45      	subs	r3, #69	; 0x45
 80131aa:	2b02      	cmp	r3, #2
 80131ac:	d8a7      	bhi.n	80130fe <__ssvfiscanf_r+0xd2>
 80131ae:	2305      	movs	r3, #5
 80131b0:	e02b      	b.n	801320a <__ssvfiscanf_r+0x1de>
 80131b2:	6863      	ldr	r3, [r4, #4]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	dd0d      	ble.n	80131d4 <__ssvfiscanf_r+0x1a8>
 80131b8:	6823      	ldr	r3, [r4, #0]
 80131ba:	781a      	ldrb	r2, [r3, #0]
 80131bc:	4552      	cmp	r2, sl
 80131be:	f040 80a1 	bne.w	8013304 <__ssvfiscanf_r+0x2d8>
 80131c2:	3301      	adds	r3, #1
 80131c4:	6862      	ldr	r2, [r4, #4]
 80131c6:	6023      	str	r3, [r4, #0]
 80131c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80131ca:	3a01      	subs	r2, #1
 80131cc:	3301      	adds	r3, #1
 80131ce:	6062      	str	r2, [r4, #4]
 80131d0:	9345      	str	r3, [sp, #276]	; 0x114
 80131d2:	e755      	b.n	8013080 <__ssvfiscanf_r+0x54>
 80131d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80131d6:	4621      	mov	r1, r4
 80131d8:	4630      	mov	r0, r6
 80131da:	4798      	blx	r3
 80131dc:	2800      	cmp	r0, #0
 80131de:	d0eb      	beq.n	80131b8 <__ssvfiscanf_r+0x18c>
 80131e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80131e2:	2800      	cmp	r0, #0
 80131e4:	f040 8084 	bne.w	80132f0 <__ssvfiscanf_r+0x2c4>
 80131e8:	f04f 30ff 	mov.w	r0, #4294967295
 80131ec:	e086      	b.n	80132fc <__ssvfiscanf_r+0x2d0>
 80131ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80131f0:	f042 0220 	orr.w	r2, r2, #32
 80131f4:	9241      	str	r2, [sp, #260]	; 0x104
 80131f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80131f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80131fc:	9241      	str	r2, [sp, #260]	; 0x104
 80131fe:	2210      	movs	r2, #16
 8013200:	2b6f      	cmp	r3, #111	; 0x6f
 8013202:	9242      	str	r2, [sp, #264]	; 0x108
 8013204:	bf34      	ite	cc
 8013206:	2303      	movcc	r3, #3
 8013208:	2304      	movcs	r3, #4
 801320a:	9347      	str	r3, [sp, #284]	; 0x11c
 801320c:	6863      	ldr	r3, [r4, #4]
 801320e:	2b00      	cmp	r3, #0
 8013210:	dd41      	ble.n	8013296 <__ssvfiscanf_r+0x26a>
 8013212:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013214:	0659      	lsls	r1, r3, #25
 8013216:	d404      	bmi.n	8013222 <__ssvfiscanf_r+0x1f6>
 8013218:	6823      	ldr	r3, [r4, #0]
 801321a:	781a      	ldrb	r2, [r3, #0]
 801321c:	5cba      	ldrb	r2, [r7, r2]
 801321e:	0712      	lsls	r2, r2, #28
 8013220:	d440      	bmi.n	80132a4 <__ssvfiscanf_r+0x278>
 8013222:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013224:	2b02      	cmp	r3, #2
 8013226:	dc4f      	bgt.n	80132c8 <__ssvfiscanf_r+0x29c>
 8013228:	466b      	mov	r3, sp
 801322a:	4622      	mov	r2, r4
 801322c:	a941      	add	r1, sp, #260	; 0x104
 801322e:	4630      	mov	r0, r6
 8013230:	f000 f9ce 	bl	80135d0 <_scanf_chars>
 8013234:	2801      	cmp	r0, #1
 8013236:	d065      	beq.n	8013304 <__ssvfiscanf_r+0x2d8>
 8013238:	2802      	cmp	r0, #2
 801323a:	f47f af21 	bne.w	8013080 <__ssvfiscanf_r+0x54>
 801323e:	e7cf      	b.n	80131e0 <__ssvfiscanf_r+0x1b4>
 8013240:	220a      	movs	r2, #10
 8013242:	e7dd      	b.n	8013200 <__ssvfiscanf_r+0x1d4>
 8013244:	2300      	movs	r3, #0
 8013246:	9342      	str	r3, [sp, #264]	; 0x108
 8013248:	2303      	movs	r3, #3
 801324a:	e7de      	b.n	801320a <__ssvfiscanf_r+0x1de>
 801324c:	2308      	movs	r3, #8
 801324e:	9342      	str	r3, [sp, #264]	; 0x108
 8013250:	2304      	movs	r3, #4
 8013252:	e7da      	b.n	801320a <__ssvfiscanf_r+0x1de>
 8013254:	4629      	mov	r1, r5
 8013256:	4640      	mov	r0, r8
 8013258:	f000 fb22 	bl	80138a0 <__sccl>
 801325c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801325e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013262:	9341      	str	r3, [sp, #260]	; 0x104
 8013264:	4605      	mov	r5, r0
 8013266:	2301      	movs	r3, #1
 8013268:	e7cf      	b.n	801320a <__ssvfiscanf_r+0x1de>
 801326a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801326c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013270:	9341      	str	r3, [sp, #260]	; 0x104
 8013272:	2300      	movs	r3, #0
 8013274:	e7c9      	b.n	801320a <__ssvfiscanf_r+0x1de>
 8013276:	2302      	movs	r3, #2
 8013278:	e7c7      	b.n	801320a <__ssvfiscanf_r+0x1de>
 801327a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801327c:	06c3      	lsls	r3, r0, #27
 801327e:	f53f aeff 	bmi.w	8013080 <__ssvfiscanf_r+0x54>
 8013282:	9b00      	ldr	r3, [sp, #0]
 8013284:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013286:	1d19      	adds	r1, r3, #4
 8013288:	9100      	str	r1, [sp, #0]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	07c0      	lsls	r0, r0, #31
 801328e:	bf4c      	ite	mi
 8013290:	801a      	strhmi	r2, [r3, #0]
 8013292:	601a      	strpl	r2, [r3, #0]
 8013294:	e6f4      	b.n	8013080 <__ssvfiscanf_r+0x54>
 8013296:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013298:	4621      	mov	r1, r4
 801329a:	4630      	mov	r0, r6
 801329c:	4798      	blx	r3
 801329e:	2800      	cmp	r0, #0
 80132a0:	d0b7      	beq.n	8013212 <__ssvfiscanf_r+0x1e6>
 80132a2:	e79d      	b.n	80131e0 <__ssvfiscanf_r+0x1b4>
 80132a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80132a6:	3201      	adds	r2, #1
 80132a8:	9245      	str	r2, [sp, #276]	; 0x114
 80132aa:	6862      	ldr	r2, [r4, #4]
 80132ac:	3a01      	subs	r2, #1
 80132ae:	2a00      	cmp	r2, #0
 80132b0:	6062      	str	r2, [r4, #4]
 80132b2:	dd02      	ble.n	80132ba <__ssvfiscanf_r+0x28e>
 80132b4:	3301      	adds	r3, #1
 80132b6:	6023      	str	r3, [r4, #0]
 80132b8:	e7ae      	b.n	8013218 <__ssvfiscanf_r+0x1ec>
 80132ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80132bc:	4621      	mov	r1, r4
 80132be:	4630      	mov	r0, r6
 80132c0:	4798      	blx	r3
 80132c2:	2800      	cmp	r0, #0
 80132c4:	d0a8      	beq.n	8013218 <__ssvfiscanf_r+0x1ec>
 80132c6:	e78b      	b.n	80131e0 <__ssvfiscanf_r+0x1b4>
 80132c8:	2b04      	cmp	r3, #4
 80132ca:	dc06      	bgt.n	80132da <__ssvfiscanf_r+0x2ae>
 80132cc:	466b      	mov	r3, sp
 80132ce:	4622      	mov	r2, r4
 80132d0:	a941      	add	r1, sp, #260	; 0x104
 80132d2:	4630      	mov	r0, r6
 80132d4:	f000 f9d4 	bl	8013680 <_scanf_i>
 80132d8:	e7ac      	b.n	8013234 <__ssvfiscanf_r+0x208>
 80132da:	4b0f      	ldr	r3, [pc, #60]	; (8013318 <__ssvfiscanf_r+0x2ec>)
 80132dc:	2b00      	cmp	r3, #0
 80132de:	f43f aecf 	beq.w	8013080 <__ssvfiscanf_r+0x54>
 80132e2:	466b      	mov	r3, sp
 80132e4:	4622      	mov	r2, r4
 80132e6:	a941      	add	r1, sp, #260	; 0x104
 80132e8:	4630      	mov	r0, r6
 80132ea:	f7fc f89f 	bl	800f42c <_scanf_float>
 80132ee:	e7a1      	b.n	8013234 <__ssvfiscanf_r+0x208>
 80132f0:	89a3      	ldrh	r3, [r4, #12]
 80132f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80132f6:	bf18      	it	ne
 80132f8:	f04f 30ff 	movne.w	r0, #4294967295
 80132fc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8013300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013304:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013306:	e7f9      	b.n	80132fc <__ssvfiscanf_r+0x2d0>
 8013308:	08012f79 	.word	0x08012f79
 801330c:	08012ff3 	.word	0x08012ff3
 8013310:	080157ed 	.word	0x080157ed
 8013314:	08015c5a 	.word	0x08015c5a
 8013318:	0800f42d 	.word	0x0800f42d

0801331c <__sfputc_r>:
 801331c:	6893      	ldr	r3, [r2, #8]
 801331e:	3b01      	subs	r3, #1
 8013320:	2b00      	cmp	r3, #0
 8013322:	b410      	push	{r4}
 8013324:	6093      	str	r3, [r2, #8]
 8013326:	da08      	bge.n	801333a <__sfputc_r+0x1e>
 8013328:	6994      	ldr	r4, [r2, #24]
 801332a:	42a3      	cmp	r3, r4
 801332c:	db01      	blt.n	8013332 <__sfputc_r+0x16>
 801332e:	290a      	cmp	r1, #10
 8013330:	d103      	bne.n	801333a <__sfputc_r+0x1e>
 8013332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013336:	f7fd badd 	b.w	80108f4 <__swbuf_r>
 801333a:	6813      	ldr	r3, [r2, #0]
 801333c:	1c58      	adds	r0, r3, #1
 801333e:	6010      	str	r0, [r2, #0]
 8013340:	7019      	strb	r1, [r3, #0]
 8013342:	4608      	mov	r0, r1
 8013344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013348:	4770      	bx	lr

0801334a <__sfputs_r>:
 801334a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801334c:	4606      	mov	r6, r0
 801334e:	460f      	mov	r7, r1
 8013350:	4614      	mov	r4, r2
 8013352:	18d5      	adds	r5, r2, r3
 8013354:	42ac      	cmp	r4, r5
 8013356:	d101      	bne.n	801335c <__sfputs_r+0x12>
 8013358:	2000      	movs	r0, #0
 801335a:	e007      	b.n	801336c <__sfputs_r+0x22>
 801335c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013360:	463a      	mov	r2, r7
 8013362:	4630      	mov	r0, r6
 8013364:	f7ff ffda 	bl	801331c <__sfputc_r>
 8013368:	1c43      	adds	r3, r0, #1
 801336a:	d1f3      	bne.n	8013354 <__sfputs_r+0xa>
 801336c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013370 <_vfiprintf_r>:
 8013370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013374:	460d      	mov	r5, r1
 8013376:	b09d      	sub	sp, #116	; 0x74
 8013378:	4614      	mov	r4, r2
 801337a:	4698      	mov	r8, r3
 801337c:	4606      	mov	r6, r0
 801337e:	b118      	cbz	r0, 8013388 <_vfiprintf_r+0x18>
 8013380:	6983      	ldr	r3, [r0, #24]
 8013382:	b90b      	cbnz	r3, 8013388 <_vfiprintf_r+0x18>
 8013384:	f7fe fb2a 	bl	80119dc <__sinit>
 8013388:	4b89      	ldr	r3, [pc, #548]	; (80135b0 <_vfiprintf_r+0x240>)
 801338a:	429d      	cmp	r5, r3
 801338c:	d11b      	bne.n	80133c6 <_vfiprintf_r+0x56>
 801338e:	6875      	ldr	r5, [r6, #4]
 8013390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013392:	07d9      	lsls	r1, r3, #31
 8013394:	d405      	bmi.n	80133a2 <_vfiprintf_r+0x32>
 8013396:	89ab      	ldrh	r3, [r5, #12]
 8013398:	059a      	lsls	r2, r3, #22
 801339a:	d402      	bmi.n	80133a2 <_vfiprintf_r+0x32>
 801339c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801339e:	f7fe ff2e 	bl	80121fe <__retarget_lock_acquire_recursive>
 80133a2:	89ab      	ldrh	r3, [r5, #12]
 80133a4:	071b      	lsls	r3, r3, #28
 80133a6:	d501      	bpl.n	80133ac <_vfiprintf_r+0x3c>
 80133a8:	692b      	ldr	r3, [r5, #16]
 80133aa:	b9eb      	cbnz	r3, 80133e8 <_vfiprintf_r+0x78>
 80133ac:	4629      	mov	r1, r5
 80133ae:	4630      	mov	r0, r6
 80133b0:	f7fd fb04 	bl	80109bc <__swsetup_r>
 80133b4:	b1c0      	cbz	r0, 80133e8 <_vfiprintf_r+0x78>
 80133b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133b8:	07dc      	lsls	r4, r3, #31
 80133ba:	d50e      	bpl.n	80133da <_vfiprintf_r+0x6a>
 80133bc:	f04f 30ff 	mov.w	r0, #4294967295
 80133c0:	b01d      	add	sp, #116	; 0x74
 80133c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133c6:	4b7b      	ldr	r3, [pc, #492]	; (80135b4 <_vfiprintf_r+0x244>)
 80133c8:	429d      	cmp	r5, r3
 80133ca:	d101      	bne.n	80133d0 <_vfiprintf_r+0x60>
 80133cc:	68b5      	ldr	r5, [r6, #8]
 80133ce:	e7df      	b.n	8013390 <_vfiprintf_r+0x20>
 80133d0:	4b79      	ldr	r3, [pc, #484]	; (80135b8 <_vfiprintf_r+0x248>)
 80133d2:	429d      	cmp	r5, r3
 80133d4:	bf08      	it	eq
 80133d6:	68f5      	ldreq	r5, [r6, #12]
 80133d8:	e7da      	b.n	8013390 <_vfiprintf_r+0x20>
 80133da:	89ab      	ldrh	r3, [r5, #12]
 80133dc:	0598      	lsls	r0, r3, #22
 80133de:	d4ed      	bmi.n	80133bc <_vfiprintf_r+0x4c>
 80133e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133e2:	f7fe ff0d 	bl	8012200 <__retarget_lock_release_recursive>
 80133e6:	e7e9      	b.n	80133bc <_vfiprintf_r+0x4c>
 80133e8:	2300      	movs	r3, #0
 80133ea:	9309      	str	r3, [sp, #36]	; 0x24
 80133ec:	2320      	movs	r3, #32
 80133ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80133f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80133f6:	2330      	movs	r3, #48	; 0x30
 80133f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80135bc <_vfiprintf_r+0x24c>
 80133fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013400:	f04f 0901 	mov.w	r9, #1
 8013404:	4623      	mov	r3, r4
 8013406:	469a      	mov	sl, r3
 8013408:	f813 2b01 	ldrb.w	r2, [r3], #1
 801340c:	b10a      	cbz	r2, 8013412 <_vfiprintf_r+0xa2>
 801340e:	2a25      	cmp	r2, #37	; 0x25
 8013410:	d1f9      	bne.n	8013406 <_vfiprintf_r+0x96>
 8013412:	ebba 0b04 	subs.w	fp, sl, r4
 8013416:	d00b      	beq.n	8013430 <_vfiprintf_r+0xc0>
 8013418:	465b      	mov	r3, fp
 801341a:	4622      	mov	r2, r4
 801341c:	4629      	mov	r1, r5
 801341e:	4630      	mov	r0, r6
 8013420:	f7ff ff93 	bl	801334a <__sfputs_r>
 8013424:	3001      	adds	r0, #1
 8013426:	f000 80aa 	beq.w	801357e <_vfiprintf_r+0x20e>
 801342a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801342c:	445a      	add	r2, fp
 801342e:	9209      	str	r2, [sp, #36]	; 0x24
 8013430:	f89a 3000 	ldrb.w	r3, [sl]
 8013434:	2b00      	cmp	r3, #0
 8013436:	f000 80a2 	beq.w	801357e <_vfiprintf_r+0x20e>
 801343a:	2300      	movs	r3, #0
 801343c:	f04f 32ff 	mov.w	r2, #4294967295
 8013440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013444:	f10a 0a01 	add.w	sl, sl, #1
 8013448:	9304      	str	r3, [sp, #16]
 801344a:	9307      	str	r3, [sp, #28]
 801344c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013450:	931a      	str	r3, [sp, #104]	; 0x68
 8013452:	4654      	mov	r4, sl
 8013454:	2205      	movs	r2, #5
 8013456:	f814 1b01 	ldrb.w	r1, [r4], #1
 801345a:	4858      	ldr	r0, [pc, #352]	; (80135bc <_vfiprintf_r+0x24c>)
 801345c:	f7ec fed0 	bl	8000200 <memchr>
 8013460:	9a04      	ldr	r2, [sp, #16]
 8013462:	b9d8      	cbnz	r0, 801349c <_vfiprintf_r+0x12c>
 8013464:	06d1      	lsls	r1, r2, #27
 8013466:	bf44      	itt	mi
 8013468:	2320      	movmi	r3, #32
 801346a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801346e:	0713      	lsls	r3, r2, #28
 8013470:	bf44      	itt	mi
 8013472:	232b      	movmi	r3, #43	; 0x2b
 8013474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013478:	f89a 3000 	ldrb.w	r3, [sl]
 801347c:	2b2a      	cmp	r3, #42	; 0x2a
 801347e:	d015      	beq.n	80134ac <_vfiprintf_r+0x13c>
 8013480:	9a07      	ldr	r2, [sp, #28]
 8013482:	4654      	mov	r4, sl
 8013484:	2000      	movs	r0, #0
 8013486:	f04f 0c0a 	mov.w	ip, #10
 801348a:	4621      	mov	r1, r4
 801348c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013490:	3b30      	subs	r3, #48	; 0x30
 8013492:	2b09      	cmp	r3, #9
 8013494:	d94e      	bls.n	8013534 <_vfiprintf_r+0x1c4>
 8013496:	b1b0      	cbz	r0, 80134c6 <_vfiprintf_r+0x156>
 8013498:	9207      	str	r2, [sp, #28]
 801349a:	e014      	b.n	80134c6 <_vfiprintf_r+0x156>
 801349c:	eba0 0308 	sub.w	r3, r0, r8
 80134a0:	fa09 f303 	lsl.w	r3, r9, r3
 80134a4:	4313      	orrs	r3, r2
 80134a6:	9304      	str	r3, [sp, #16]
 80134a8:	46a2      	mov	sl, r4
 80134aa:	e7d2      	b.n	8013452 <_vfiprintf_r+0xe2>
 80134ac:	9b03      	ldr	r3, [sp, #12]
 80134ae:	1d19      	adds	r1, r3, #4
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	9103      	str	r1, [sp, #12]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	bfbb      	ittet	lt
 80134b8:	425b      	neglt	r3, r3
 80134ba:	f042 0202 	orrlt.w	r2, r2, #2
 80134be:	9307      	strge	r3, [sp, #28]
 80134c0:	9307      	strlt	r3, [sp, #28]
 80134c2:	bfb8      	it	lt
 80134c4:	9204      	strlt	r2, [sp, #16]
 80134c6:	7823      	ldrb	r3, [r4, #0]
 80134c8:	2b2e      	cmp	r3, #46	; 0x2e
 80134ca:	d10c      	bne.n	80134e6 <_vfiprintf_r+0x176>
 80134cc:	7863      	ldrb	r3, [r4, #1]
 80134ce:	2b2a      	cmp	r3, #42	; 0x2a
 80134d0:	d135      	bne.n	801353e <_vfiprintf_r+0x1ce>
 80134d2:	9b03      	ldr	r3, [sp, #12]
 80134d4:	1d1a      	adds	r2, r3, #4
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	9203      	str	r2, [sp, #12]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	bfb8      	it	lt
 80134de:	f04f 33ff 	movlt.w	r3, #4294967295
 80134e2:	3402      	adds	r4, #2
 80134e4:	9305      	str	r3, [sp, #20]
 80134e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80135cc <_vfiprintf_r+0x25c>
 80134ea:	7821      	ldrb	r1, [r4, #0]
 80134ec:	2203      	movs	r2, #3
 80134ee:	4650      	mov	r0, sl
 80134f0:	f7ec fe86 	bl	8000200 <memchr>
 80134f4:	b140      	cbz	r0, 8013508 <_vfiprintf_r+0x198>
 80134f6:	2340      	movs	r3, #64	; 0x40
 80134f8:	eba0 000a 	sub.w	r0, r0, sl
 80134fc:	fa03 f000 	lsl.w	r0, r3, r0
 8013500:	9b04      	ldr	r3, [sp, #16]
 8013502:	4303      	orrs	r3, r0
 8013504:	3401      	adds	r4, #1
 8013506:	9304      	str	r3, [sp, #16]
 8013508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801350c:	482c      	ldr	r0, [pc, #176]	; (80135c0 <_vfiprintf_r+0x250>)
 801350e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013512:	2206      	movs	r2, #6
 8013514:	f7ec fe74 	bl	8000200 <memchr>
 8013518:	2800      	cmp	r0, #0
 801351a:	d03f      	beq.n	801359c <_vfiprintf_r+0x22c>
 801351c:	4b29      	ldr	r3, [pc, #164]	; (80135c4 <_vfiprintf_r+0x254>)
 801351e:	bb1b      	cbnz	r3, 8013568 <_vfiprintf_r+0x1f8>
 8013520:	9b03      	ldr	r3, [sp, #12]
 8013522:	3307      	adds	r3, #7
 8013524:	f023 0307 	bic.w	r3, r3, #7
 8013528:	3308      	adds	r3, #8
 801352a:	9303      	str	r3, [sp, #12]
 801352c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801352e:	443b      	add	r3, r7
 8013530:	9309      	str	r3, [sp, #36]	; 0x24
 8013532:	e767      	b.n	8013404 <_vfiprintf_r+0x94>
 8013534:	fb0c 3202 	mla	r2, ip, r2, r3
 8013538:	460c      	mov	r4, r1
 801353a:	2001      	movs	r0, #1
 801353c:	e7a5      	b.n	801348a <_vfiprintf_r+0x11a>
 801353e:	2300      	movs	r3, #0
 8013540:	3401      	adds	r4, #1
 8013542:	9305      	str	r3, [sp, #20]
 8013544:	4619      	mov	r1, r3
 8013546:	f04f 0c0a 	mov.w	ip, #10
 801354a:	4620      	mov	r0, r4
 801354c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013550:	3a30      	subs	r2, #48	; 0x30
 8013552:	2a09      	cmp	r2, #9
 8013554:	d903      	bls.n	801355e <_vfiprintf_r+0x1ee>
 8013556:	2b00      	cmp	r3, #0
 8013558:	d0c5      	beq.n	80134e6 <_vfiprintf_r+0x176>
 801355a:	9105      	str	r1, [sp, #20]
 801355c:	e7c3      	b.n	80134e6 <_vfiprintf_r+0x176>
 801355e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013562:	4604      	mov	r4, r0
 8013564:	2301      	movs	r3, #1
 8013566:	e7f0      	b.n	801354a <_vfiprintf_r+0x1da>
 8013568:	ab03      	add	r3, sp, #12
 801356a:	9300      	str	r3, [sp, #0]
 801356c:	462a      	mov	r2, r5
 801356e:	4b16      	ldr	r3, [pc, #88]	; (80135c8 <_vfiprintf_r+0x258>)
 8013570:	a904      	add	r1, sp, #16
 8013572:	4630      	mov	r0, r6
 8013574:	f7fb fb90 	bl	800ec98 <_printf_float>
 8013578:	4607      	mov	r7, r0
 801357a:	1c78      	adds	r0, r7, #1
 801357c:	d1d6      	bne.n	801352c <_vfiprintf_r+0x1bc>
 801357e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013580:	07d9      	lsls	r1, r3, #31
 8013582:	d405      	bmi.n	8013590 <_vfiprintf_r+0x220>
 8013584:	89ab      	ldrh	r3, [r5, #12]
 8013586:	059a      	lsls	r2, r3, #22
 8013588:	d402      	bmi.n	8013590 <_vfiprintf_r+0x220>
 801358a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801358c:	f7fe fe38 	bl	8012200 <__retarget_lock_release_recursive>
 8013590:	89ab      	ldrh	r3, [r5, #12]
 8013592:	065b      	lsls	r3, r3, #25
 8013594:	f53f af12 	bmi.w	80133bc <_vfiprintf_r+0x4c>
 8013598:	9809      	ldr	r0, [sp, #36]	; 0x24
 801359a:	e711      	b.n	80133c0 <_vfiprintf_r+0x50>
 801359c:	ab03      	add	r3, sp, #12
 801359e:	9300      	str	r3, [sp, #0]
 80135a0:	462a      	mov	r2, r5
 80135a2:	4b09      	ldr	r3, [pc, #36]	; (80135c8 <_vfiprintf_r+0x258>)
 80135a4:	a904      	add	r1, sp, #16
 80135a6:	4630      	mov	r0, r6
 80135a8:	f7fb fe1a 	bl	800f1e0 <_printf_i>
 80135ac:	e7e4      	b.n	8013578 <_vfiprintf_r+0x208>
 80135ae:	bf00      	nop
 80135b0:	08015a34 	.word	0x08015a34
 80135b4:	08015a54 	.word	0x08015a54
 80135b8:	08015a14 	.word	0x08015a14
 80135bc:	08015c54 	.word	0x08015c54
 80135c0:	08015c5e 	.word	0x08015c5e
 80135c4:	0800ec99 	.word	0x0800ec99
 80135c8:	0801334b 	.word	0x0801334b
 80135cc:	08015c5a 	.word	0x08015c5a

080135d0 <_scanf_chars>:
 80135d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135d4:	4615      	mov	r5, r2
 80135d6:	688a      	ldr	r2, [r1, #8]
 80135d8:	4680      	mov	r8, r0
 80135da:	460c      	mov	r4, r1
 80135dc:	b932      	cbnz	r2, 80135ec <_scanf_chars+0x1c>
 80135de:	698a      	ldr	r2, [r1, #24]
 80135e0:	2a00      	cmp	r2, #0
 80135e2:	bf0c      	ite	eq
 80135e4:	2201      	moveq	r2, #1
 80135e6:	f04f 32ff 	movne.w	r2, #4294967295
 80135ea:	608a      	str	r2, [r1, #8]
 80135ec:	6822      	ldr	r2, [r4, #0]
 80135ee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801367c <_scanf_chars+0xac>
 80135f2:	06d1      	lsls	r1, r2, #27
 80135f4:	bf5f      	itttt	pl
 80135f6:	681a      	ldrpl	r2, [r3, #0]
 80135f8:	1d11      	addpl	r1, r2, #4
 80135fa:	6019      	strpl	r1, [r3, #0]
 80135fc:	6816      	ldrpl	r6, [r2, #0]
 80135fe:	2700      	movs	r7, #0
 8013600:	69a0      	ldr	r0, [r4, #24]
 8013602:	b188      	cbz	r0, 8013628 <_scanf_chars+0x58>
 8013604:	2801      	cmp	r0, #1
 8013606:	d107      	bne.n	8013618 <_scanf_chars+0x48>
 8013608:	682b      	ldr	r3, [r5, #0]
 801360a:	781a      	ldrb	r2, [r3, #0]
 801360c:	6963      	ldr	r3, [r4, #20]
 801360e:	5c9b      	ldrb	r3, [r3, r2]
 8013610:	b953      	cbnz	r3, 8013628 <_scanf_chars+0x58>
 8013612:	bb27      	cbnz	r7, 801365e <_scanf_chars+0x8e>
 8013614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013618:	2802      	cmp	r0, #2
 801361a:	d120      	bne.n	801365e <_scanf_chars+0x8e>
 801361c:	682b      	ldr	r3, [r5, #0]
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013624:	071b      	lsls	r3, r3, #28
 8013626:	d41a      	bmi.n	801365e <_scanf_chars+0x8e>
 8013628:	6823      	ldr	r3, [r4, #0]
 801362a:	06da      	lsls	r2, r3, #27
 801362c:	bf5e      	ittt	pl
 801362e:	682b      	ldrpl	r3, [r5, #0]
 8013630:	781b      	ldrbpl	r3, [r3, #0]
 8013632:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013636:	682a      	ldr	r2, [r5, #0]
 8013638:	686b      	ldr	r3, [r5, #4]
 801363a:	3201      	adds	r2, #1
 801363c:	602a      	str	r2, [r5, #0]
 801363e:	68a2      	ldr	r2, [r4, #8]
 8013640:	3b01      	subs	r3, #1
 8013642:	3a01      	subs	r2, #1
 8013644:	606b      	str	r3, [r5, #4]
 8013646:	3701      	adds	r7, #1
 8013648:	60a2      	str	r2, [r4, #8]
 801364a:	b142      	cbz	r2, 801365e <_scanf_chars+0x8e>
 801364c:	2b00      	cmp	r3, #0
 801364e:	dcd7      	bgt.n	8013600 <_scanf_chars+0x30>
 8013650:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013654:	4629      	mov	r1, r5
 8013656:	4640      	mov	r0, r8
 8013658:	4798      	blx	r3
 801365a:	2800      	cmp	r0, #0
 801365c:	d0d0      	beq.n	8013600 <_scanf_chars+0x30>
 801365e:	6823      	ldr	r3, [r4, #0]
 8013660:	f013 0310 	ands.w	r3, r3, #16
 8013664:	d105      	bne.n	8013672 <_scanf_chars+0xa2>
 8013666:	68e2      	ldr	r2, [r4, #12]
 8013668:	3201      	adds	r2, #1
 801366a:	60e2      	str	r2, [r4, #12]
 801366c:	69a2      	ldr	r2, [r4, #24]
 801366e:	b102      	cbz	r2, 8013672 <_scanf_chars+0xa2>
 8013670:	7033      	strb	r3, [r6, #0]
 8013672:	6923      	ldr	r3, [r4, #16]
 8013674:	441f      	add	r7, r3
 8013676:	6127      	str	r7, [r4, #16]
 8013678:	2000      	movs	r0, #0
 801367a:	e7cb      	b.n	8013614 <_scanf_chars+0x44>
 801367c:	080157ed 	.word	0x080157ed

08013680 <_scanf_i>:
 8013680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013684:	4698      	mov	r8, r3
 8013686:	4b74      	ldr	r3, [pc, #464]	; (8013858 <_scanf_i+0x1d8>)
 8013688:	460c      	mov	r4, r1
 801368a:	4682      	mov	sl, r0
 801368c:	4616      	mov	r6, r2
 801368e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013692:	b087      	sub	sp, #28
 8013694:	ab03      	add	r3, sp, #12
 8013696:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801369a:	4b70      	ldr	r3, [pc, #448]	; (801385c <_scanf_i+0x1dc>)
 801369c:	69a1      	ldr	r1, [r4, #24]
 801369e:	4a70      	ldr	r2, [pc, #448]	; (8013860 <_scanf_i+0x1e0>)
 80136a0:	2903      	cmp	r1, #3
 80136a2:	bf18      	it	ne
 80136a4:	461a      	movne	r2, r3
 80136a6:	68a3      	ldr	r3, [r4, #8]
 80136a8:	9201      	str	r2, [sp, #4]
 80136aa:	1e5a      	subs	r2, r3, #1
 80136ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80136b0:	bf88      	it	hi
 80136b2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80136b6:	4627      	mov	r7, r4
 80136b8:	bf82      	ittt	hi
 80136ba:	eb03 0905 	addhi.w	r9, r3, r5
 80136be:	f240 135d 	movwhi	r3, #349	; 0x15d
 80136c2:	60a3      	strhi	r3, [r4, #8]
 80136c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80136c8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80136cc:	bf98      	it	ls
 80136ce:	f04f 0900 	movls.w	r9, #0
 80136d2:	6023      	str	r3, [r4, #0]
 80136d4:	463d      	mov	r5, r7
 80136d6:	f04f 0b00 	mov.w	fp, #0
 80136da:	6831      	ldr	r1, [r6, #0]
 80136dc:	ab03      	add	r3, sp, #12
 80136de:	7809      	ldrb	r1, [r1, #0]
 80136e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80136e4:	2202      	movs	r2, #2
 80136e6:	f7ec fd8b 	bl	8000200 <memchr>
 80136ea:	b328      	cbz	r0, 8013738 <_scanf_i+0xb8>
 80136ec:	f1bb 0f01 	cmp.w	fp, #1
 80136f0:	d159      	bne.n	80137a6 <_scanf_i+0x126>
 80136f2:	6862      	ldr	r2, [r4, #4]
 80136f4:	b92a      	cbnz	r2, 8013702 <_scanf_i+0x82>
 80136f6:	6822      	ldr	r2, [r4, #0]
 80136f8:	2308      	movs	r3, #8
 80136fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80136fe:	6063      	str	r3, [r4, #4]
 8013700:	6022      	str	r2, [r4, #0]
 8013702:	6822      	ldr	r2, [r4, #0]
 8013704:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013708:	6022      	str	r2, [r4, #0]
 801370a:	68a2      	ldr	r2, [r4, #8]
 801370c:	1e51      	subs	r1, r2, #1
 801370e:	60a1      	str	r1, [r4, #8]
 8013710:	b192      	cbz	r2, 8013738 <_scanf_i+0xb8>
 8013712:	6832      	ldr	r2, [r6, #0]
 8013714:	1c51      	adds	r1, r2, #1
 8013716:	6031      	str	r1, [r6, #0]
 8013718:	7812      	ldrb	r2, [r2, #0]
 801371a:	f805 2b01 	strb.w	r2, [r5], #1
 801371e:	6872      	ldr	r2, [r6, #4]
 8013720:	3a01      	subs	r2, #1
 8013722:	2a00      	cmp	r2, #0
 8013724:	6072      	str	r2, [r6, #4]
 8013726:	dc07      	bgt.n	8013738 <_scanf_i+0xb8>
 8013728:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801372c:	4631      	mov	r1, r6
 801372e:	4650      	mov	r0, sl
 8013730:	4790      	blx	r2
 8013732:	2800      	cmp	r0, #0
 8013734:	f040 8085 	bne.w	8013842 <_scanf_i+0x1c2>
 8013738:	f10b 0b01 	add.w	fp, fp, #1
 801373c:	f1bb 0f03 	cmp.w	fp, #3
 8013740:	d1cb      	bne.n	80136da <_scanf_i+0x5a>
 8013742:	6863      	ldr	r3, [r4, #4]
 8013744:	b90b      	cbnz	r3, 801374a <_scanf_i+0xca>
 8013746:	230a      	movs	r3, #10
 8013748:	6063      	str	r3, [r4, #4]
 801374a:	6863      	ldr	r3, [r4, #4]
 801374c:	4945      	ldr	r1, [pc, #276]	; (8013864 <_scanf_i+0x1e4>)
 801374e:	6960      	ldr	r0, [r4, #20]
 8013750:	1ac9      	subs	r1, r1, r3
 8013752:	f000 f8a5 	bl	80138a0 <__sccl>
 8013756:	f04f 0b00 	mov.w	fp, #0
 801375a:	68a3      	ldr	r3, [r4, #8]
 801375c:	6822      	ldr	r2, [r4, #0]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d03d      	beq.n	80137de <_scanf_i+0x15e>
 8013762:	6831      	ldr	r1, [r6, #0]
 8013764:	6960      	ldr	r0, [r4, #20]
 8013766:	f891 c000 	ldrb.w	ip, [r1]
 801376a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801376e:	2800      	cmp	r0, #0
 8013770:	d035      	beq.n	80137de <_scanf_i+0x15e>
 8013772:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013776:	d124      	bne.n	80137c2 <_scanf_i+0x142>
 8013778:	0510      	lsls	r0, r2, #20
 801377a:	d522      	bpl.n	80137c2 <_scanf_i+0x142>
 801377c:	f10b 0b01 	add.w	fp, fp, #1
 8013780:	f1b9 0f00 	cmp.w	r9, #0
 8013784:	d003      	beq.n	801378e <_scanf_i+0x10e>
 8013786:	3301      	adds	r3, #1
 8013788:	f109 39ff 	add.w	r9, r9, #4294967295
 801378c:	60a3      	str	r3, [r4, #8]
 801378e:	6873      	ldr	r3, [r6, #4]
 8013790:	3b01      	subs	r3, #1
 8013792:	2b00      	cmp	r3, #0
 8013794:	6073      	str	r3, [r6, #4]
 8013796:	dd1b      	ble.n	80137d0 <_scanf_i+0x150>
 8013798:	6833      	ldr	r3, [r6, #0]
 801379a:	3301      	adds	r3, #1
 801379c:	6033      	str	r3, [r6, #0]
 801379e:	68a3      	ldr	r3, [r4, #8]
 80137a0:	3b01      	subs	r3, #1
 80137a2:	60a3      	str	r3, [r4, #8]
 80137a4:	e7d9      	b.n	801375a <_scanf_i+0xda>
 80137a6:	f1bb 0f02 	cmp.w	fp, #2
 80137aa:	d1ae      	bne.n	801370a <_scanf_i+0x8a>
 80137ac:	6822      	ldr	r2, [r4, #0]
 80137ae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80137b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80137b6:	d1bf      	bne.n	8013738 <_scanf_i+0xb8>
 80137b8:	2310      	movs	r3, #16
 80137ba:	6063      	str	r3, [r4, #4]
 80137bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80137c0:	e7a2      	b.n	8013708 <_scanf_i+0x88>
 80137c2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80137c6:	6022      	str	r2, [r4, #0]
 80137c8:	780b      	ldrb	r3, [r1, #0]
 80137ca:	f805 3b01 	strb.w	r3, [r5], #1
 80137ce:	e7de      	b.n	801378e <_scanf_i+0x10e>
 80137d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80137d4:	4631      	mov	r1, r6
 80137d6:	4650      	mov	r0, sl
 80137d8:	4798      	blx	r3
 80137da:	2800      	cmp	r0, #0
 80137dc:	d0df      	beq.n	801379e <_scanf_i+0x11e>
 80137de:	6823      	ldr	r3, [r4, #0]
 80137e0:	05d9      	lsls	r1, r3, #23
 80137e2:	d50d      	bpl.n	8013800 <_scanf_i+0x180>
 80137e4:	42bd      	cmp	r5, r7
 80137e6:	d909      	bls.n	80137fc <_scanf_i+0x17c>
 80137e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80137ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137f0:	4632      	mov	r2, r6
 80137f2:	4650      	mov	r0, sl
 80137f4:	4798      	blx	r3
 80137f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80137fa:	464d      	mov	r5, r9
 80137fc:	42bd      	cmp	r5, r7
 80137fe:	d028      	beq.n	8013852 <_scanf_i+0x1d2>
 8013800:	6822      	ldr	r2, [r4, #0]
 8013802:	f012 0210 	ands.w	r2, r2, #16
 8013806:	d113      	bne.n	8013830 <_scanf_i+0x1b0>
 8013808:	702a      	strb	r2, [r5, #0]
 801380a:	6863      	ldr	r3, [r4, #4]
 801380c:	9e01      	ldr	r6, [sp, #4]
 801380e:	4639      	mov	r1, r7
 8013810:	4650      	mov	r0, sl
 8013812:	47b0      	blx	r6
 8013814:	f8d8 3000 	ldr.w	r3, [r8]
 8013818:	6821      	ldr	r1, [r4, #0]
 801381a:	1d1a      	adds	r2, r3, #4
 801381c:	f8c8 2000 	str.w	r2, [r8]
 8013820:	f011 0f20 	tst.w	r1, #32
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	d00f      	beq.n	8013848 <_scanf_i+0x1c8>
 8013828:	6018      	str	r0, [r3, #0]
 801382a:	68e3      	ldr	r3, [r4, #12]
 801382c:	3301      	adds	r3, #1
 801382e:	60e3      	str	r3, [r4, #12]
 8013830:	1bed      	subs	r5, r5, r7
 8013832:	44ab      	add	fp, r5
 8013834:	6925      	ldr	r5, [r4, #16]
 8013836:	445d      	add	r5, fp
 8013838:	6125      	str	r5, [r4, #16]
 801383a:	2000      	movs	r0, #0
 801383c:	b007      	add	sp, #28
 801383e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013842:	f04f 0b00 	mov.w	fp, #0
 8013846:	e7ca      	b.n	80137de <_scanf_i+0x15e>
 8013848:	07ca      	lsls	r2, r1, #31
 801384a:	bf4c      	ite	mi
 801384c:	8018      	strhmi	r0, [r3, #0]
 801384e:	6018      	strpl	r0, [r3, #0]
 8013850:	e7eb      	b.n	801382a <_scanf_i+0x1aa>
 8013852:	2001      	movs	r0, #1
 8013854:	e7f2      	b.n	801383c <_scanf_i+0x1bc>
 8013856:	bf00      	nop
 8013858:	080156f0 	.word	0x080156f0
 801385c:	08013a0d 	.word	0x08013a0d
 8013860:	08010869 	.word	0x08010869
 8013864:	08015c7e 	.word	0x08015c7e

08013868 <_read_r>:
 8013868:	b538      	push	{r3, r4, r5, lr}
 801386a:	4d07      	ldr	r5, [pc, #28]	; (8013888 <_read_r+0x20>)
 801386c:	4604      	mov	r4, r0
 801386e:	4608      	mov	r0, r1
 8013870:	4611      	mov	r1, r2
 8013872:	2200      	movs	r2, #0
 8013874:	602a      	str	r2, [r5, #0]
 8013876:	461a      	mov	r2, r3
 8013878:	f7f0 fc98 	bl	80041ac <_read>
 801387c:	1c43      	adds	r3, r0, #1
 801387e:	d102      	bne.n	8013886 <_read_r+0x1e>
 8013880:	682b      	ldr	r3, [r5, #0]
 8013882:	b103      	cbz	r3, 8013886 <_read_r+0x1e>
 8013884:	6023      	str	r3, [r4, #0]
 8013886:	bd38      	pop	{r3, r4, r5, pc}
 8013888:	20001a24 	.word	0x20001a24
 801388c:	00000000 	.word	0x00000000

08013890 <nan>:
 8013890:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013898 <nan+0x8>
 8013894:	4770      	bx	lr
 8013896:	bf00      	nop
 8013898:	00000000 	.word	0x00000000
 801389c:	7ff80000 	.word	0x7ff80000

080138a0 <__sccl>:
 80138a0:	b570      	push	{r4, r5, r6, lr}
 80138a2:	780b      	ldrb	r3, [r1, #0]
 80138a4:	4604      	mov	r4, r0
 80138a6:	2b5e      	cmp	r3, #94	; 0x5e
 80138a8:	bf0b      	itete	eq
 80138aa:	784b      	ldrbeq	r3, [r1, #1]
 80138ac:	1c48      	addne	r0, r1, #1
 80138ae:	1c88      	addeq	r0, r1, #2
 80138b0:	2200      	movne	r2, #0
 80138b2:	bf08      	it	eq
 80138b4:	2201      	moveq	r2, #1
 80138b6:	1e61      	subs	r1, r4, #1
 80138b8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80138bc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80138c0:	42a9      	cmp	r1, r5
 80138c2:	d1fb      	bne.n	80138bc <__sccl+0x1c>
 80138c4:	b90b      	cbnz	r3, 80138ca <__sccl+0x2a>
 80138c6:	3801      	subs	r0, #1
 80138c8:	bd70      	pop	{r4, r5, r6, pc}
 80138ca:	f082 0101 	eor.w	r1, r2, #1
 80138ce:	54e1      	strb	r1, [r4, r3]
 80138d0:	1c42      	adds	r2, r0, #1
 80138d2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80138d6:	2d2d      	cmp	r5, #45	; 0x2d
 80138d8:	f102 36ff 	add.w	r6, r2, #4294967295
 80138dc:	4610      	mov	r0, r2
 80138de:	d006      	beq.n	80138ee <__sccl+0x4e>
 80138e0:	2d5d      	cmp	r5, #93	; 0x5d
 80138e2:	d0f1      	beq.n	80138c8 <__sccl+0x28>
 80138e4:	b90d      	cbnz	r5, 80138ea <__sccl+0x4a>
 80138e6:	4630      	mov	r0, r6
 80138e8:	e7ee      	b.n	80138c8 <__sccl+0x28>
 80138ea:	462b      	mov	r3, r5
 80138ec:	e7ef      	b.n	80138ce <__sccl+0x2e>
 80138ee:	7816      	ldrb	r6, [r2, #0]
 80138f0:	2e5d      	cmp	r6, #93	; 0x5d
 80138f2:	d0fa      	beq.n	80138ea <__sccl+0x4a>
 80138f4:	42b3      	cmp	r3, r6
 80138f6:	dcf8      	bgt.n	80138ea <__sccl+0x4a>
 80138f8:	4618      	mov	r0, r3
 80138fa:	3001      	adds	r0, #1
 80138fc:	4286      	cmp	r6, r0
 80138fe:	5421      	strb	r1, [r4, r0]
 8013900:	dcfb      	bgt.n	80138fa <__sccl+0x5a>
 8013902:	43d8      	mvns	r0, r3
 8013904:	4430      	add	r0, r6
 8013906:	1c5d      	adds	r5, r3, #1
 8013908:	42b3      	cmp	r3, r6
 801390a:	bfa8      	it	ge
 801390c:	2000      	movge	r0, #0
 801390e:	182b      	adds	r3, r5, r0
 8013910:	3202      	adds	r2, #2
 8013912:	e7de      	b.n	80138d2 <__sccl+0x32>

08013914 <_strtoul_l.isra.0>:
 8013914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013918:	4e3b      	ldr	r6, [pc, #236]	; (8013a08 <_strtoul_l.isra.0+0xf4>)
 801391a:	4686      	mov	lr, r0
 801391c:	468c      	mov	ip, r1
 801391e:	4660      	mov	r0, ip
 8013920:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013924:	5da5      	ldrb	r5, [r4, r6]
 8013926:	f015 0508 	ands.w	r5, r5, #8
 801392a:	d1f8      	bne.n	801391e <_strtoul_l.isra.0+0xa>
 801392c:	2c2d      	cmp	r4, #45	; 0x2d
 801392e:	d134      	bne.n	801399a <_strtoul_l.isra.0+0x86>
 8013930:	f89c 4000 	ldrb.w	r4, [ip]
 8013934:	f04f 0801 	mov.w	r8, #1
 8013938:	f100 0c02 	add.w	ip, r0, #2
 801393c:	2b00      	cmp	r3, #0
 801393e:	d05e      	beq.n	80139fe <_strtoul_l.isra.0+0xea>
 8013940:	2b10      	cmp	r3, #16
 8013942:	d10c      	bne.n	801395e <_strtoul_l.isra.0+0x4a>
 8013944:	2c30      	cmp	r4, #48	; 0x30
 8013946:	d10a      	bne.n	801395e <_strtoul_l.isra.0+0x4a>
 8013948:	f89c 0000 	ldrb.w	r0, [ip]
 801394c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013950:	2858      	cmp	r0, #88	; 0x58
 8013952:	d14f      	bne.n	80139f4 <_strtoul_l.isra.0+0xe0>
 8013954:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8013958:	2310      	movs	r3, #16
 801395a:	f10c 0c02 	add.w	ip, ip, #2
 801395e:	f04f 37ff 	mov.w	r7, #4294967295
 8013962:	2500      	movs	r5, #0
 8013964:	fbb7 f7f3 	udiv	r7, r7, r3
 8013968:	fb03 f907 	mul.w	r9, r3, r7
 801396c:	ea6f 0909 	mvn.w	r9, r9
 8013970:	4628      	mov	r0, r5
 8013972:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8013976:	2e09      	cmp	r6, #9
 8013978:	d818      	bhi.n	80139ac <_strtoul_l.isra.0+0x98>
 801397a:	4634      	mov	r4, r6
 801397c:	42a3      	cmp	r3, r4
 801397e:	dd24      	ble.n	80139ca <_strtoul_l.isra.0+0xb6>
 8013980:	2d00      	cmp	r5, #0
 8013982:	db1f      	blt.n	80139c4 <_strtoul_l.isra.0+0xb0>
 8013984:	4287      	cmp	r7, r0
 8013986:	d31d      	bcc.n	80139c4 <_strtoul_l.isra.0+0xb0>
 8013988:	d101      	bne.n	801398e <_strtoul_l.isra.0+0x7a>
 801398a:	45a1      	cmp	r9, r4
 801398c:	db1a      	blt.n	80139c4 <_strtoul_l.isra.0+0xb0>
 801398e:	fb00 4003 	mla	r0, r0, r3, r4
 8013992:	2501      	movs	r5, #1
 8013994:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013998:	e7eb      	b.n	8013972 <_strtoul_l.isra.0+0x5e>
 801399a:	2c2b      	cmp	r4, #43	; 0x2b
 801399c:	bf08      	it	eq
 801399e:	f89c 4000 	ldrbeq.w	r4, [ip]
 80139a2:	46a8      	mov	r8, r5
 80139a4:	bf08      	it	eq
 80139a6:	f100 0c02 	addeq.w	ip, r0, #2
 80139aa:	e7c7      	b.n	801393c <_strtoul_l.isra.0+0x28>
 80139ac:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80139b0:	2e19      	cmp	r6, #25
 80139b2:	d801      	bhi.n	80139b8 <_strtoul_l.isra.0+0xa4>
 80139b4:	3c37      	subs	r4, #55	; 0x37
 80139b6:	e7e1      	b.n	801397c <_strtoul_l.isra.0+0x68>
 80139b8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80139bc:	2e19      	cmp	r6, #25
 80139be:	d804      	bhi.n	80139ca <_strtoul_l.isra.0+0xb6>
 80139c0:	3c57      	subs	r4, #87	; 0x57
 80139c2:	e7db      	b.n	801397c <_strtoul_l.isra.0+0x68>
 80139c4:	f04f 35ff 	mov.w	r5, #4294967295
 80139c8:	e7e4      	b.n	8013994 <_strtoul_l.isra.0+0x80>
 80139ca:	2d00      	cmp	r5, #0
 80139cc:	da07      	bge.n	80139de <_strtoul_l.isra.0+0xca>
 80139ce:	2322      	movs	r3, #34	; 0x22
 80139d0:	f8ce 3000 	str.w	r3, [lr]
 80139d4:	f04f 30ff 	mov.w	r0, #4294967295
 80139d8:	b942      	cbnz	r2, 80139ec <_strtoul_l.isra.0+0xd8>
 80139da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139de:	f1b8 0f00 	cmp.w	r8, #0
 80139e2:	d000      	beq.n	80139e6 <_strtoul_l.isra.0+0xd2>
 80139e4:	4240      	negs	r0, r0
 80139e6:	2a00      	cmp	r2, #0
 80139e8:	d0f7      	beq.n	80139da <_strtoul_l.isra.0+0xc6>
 80139ea:	b10d      	cbz	r5, 80139f0 <_strtoul_l.isra.0+0xdc>
 80139ec:	f10c 31ff 	add.w	r1, ip, #4294967295
 80139f0:	6011      	str	r1, [r2, #0]
 80139f2:	e7f2      	b.n	80139da <_strtoul_l.isra.0+0xc6>
 80139f4:	2430      	movs	r4, #48	; 0x30
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d1b1      	bne.n	801395e <_strtoul_l.isra.0+0x4a>
 80139fa:	2308      	movs	r3, #8
 80139fc:	e7af      	b.n	801395e <_strtoul_l.isra.0+0x4a>
 80139fe:	2c30      	cmp	r4, #48	; 0x30
 8013a00:	d0a2      	beq.n	8013948 <_strtoul_l.isra.0+0x34>
 8013a02:	230a      	movs	r3, #10
 8013a04:	e7ab      	b.n	801395e <_strtoul_l.isra.0+0x4a>
 8013a06:	bf00      	nop
 8013a08:	080157ed 	.word	0x080157ed

08013a0c <_strtoul_r>:
 8013a0c:	f7ff bf82 	b.w	8013914 <_strtoul_l.isra.0>

08013a10 <__submore>:
 8013a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a14:	460c      	mov	r4, r1
 8013a16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a1c:	4299      	cmp	r1, r3
 8013a1e:	d11d      	bne.n	8013a5c <__submore+0x4c>
 8013a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013a24:	f7fb f83e 	bl	800eaa4 <_malloc_r>
 8013a28:	b918      	cbnz	r0, 8013a32 <__submore+0x22>
 8013a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a36:	63a3      	str	r3, [r4, #56]	; 0x38
 8013a38:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013a3c:	6360      	str	r0, [r4, #52]	; 0x34
 8013a3e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013a42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013a46:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013a4a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013a4e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013a52:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013a56:	6020      	str	r0, [r4, #0]
 8013a58:	2000      	movs	r0, #0
 8013a5a:	e7e8      	b.n	8013a2e <__submore+0x1e>
 8013a5c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013a5e:	0077      	lsls	r7, r6, #1
 8013a60:	463a      	mov	r2, r7
 8013a62:	f000 f889 	bl	8013b78 <_realloc_r>
 8013a66:	4605      	mov	r5, r0
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d0de      	beq.n	8013a2a <__submore+0x1a>
 8013a6c:	eb00 0806 	add.w	r8, r0, r6
 8013a70:	4601      	mov	r1, r0
 8013a72:	4632      	mov	r2, r6
 8013a74:	4640      	mov	r0, r8
 8013a76:	f7fa ffaf 	bl	800e9d8 <memcpy>
 8013a7a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013a7e:	f8c4 8000 	str.w	r8, [r4]
 8013a82:	e7e9      	b.n	8013a58 <__submore+0x48>

08013a84 <__ascii_wctomb>:
 8013a84:	b149      	cbz	r1, 8013a9a <__ascii_wctomb+0x16>
 8013a86:	2aff      	cmp	r2, #255	; 0xff
 8013a88:	bf85      	ittet	hi
 8013a8a:	238a      	movhi	r3, #138	; 0x8a
 8013a8c:	6003      	strhi	r3, [r0, #0]
 8013a8e:	700a      	strbls	r2, [r1, #0]
 8013a90:	f04f 30ff 	movhi.w	r0, #4294967295
 8013a94:	bf98      	it	ls
 8013a96:	2001      	movls	r0, #1
 8013a98:	4770      	bx	lr
 8013a9a:	4608      	mov	r0, r1
 8013a9c:	4770      	bx	lr
	...

08013aa0 <__assert_func>:
 8013aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013aa2:	4614      	mov	r4, r2
 8013aa4:	461a      	mov	r2, r3
 8013aa6:	4b09      	ldr	r3, [pc, #36]	; (8013acc <__assert_func+0x2c>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	4605      	mov	r5, r0
 8013aac:	68d8      	ldr	r0, [r3, #12]
 8013aae:	b14c      	cbz	r4, 8013ac4 <__assert_func+0x24>
 8013ab0:	4b07      	ldr	r3, [pc, #28]	; (8013ad0 <__assert_func+0x30>)
 8013ab2:	9100      	str	r1, [sp, #0]
 8013ab4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ab8:	4906      	ldr	r1, [pc, #24]	; (8013ad4 <__assert_func+0x34>)
 8013aba:	462b      	mov	r3, r5
 8013abc:	f000 f80e 	bl	8013adc <fiprintf>
 8013ac0:	f000 f880 	bl	8013bc4 <abort>
 8013ac4:	4b04      	ldr	r3, [pc, #16]	; (8013ad8 <__assert_func+0x38>)
 8013ac6:	461c      	mov	r4, r3
 8013ac8:	e7f3      	b.n	8013ab2 <__assert_func+0x12>
 8013aca:	bf00      	nop
 8013acc:	20000028 	.word	0x20000028
 8013ad0:	08015c80 	.word	0x08015c80
 8013ad4:	08015c8d 	.word	0x08015c8d
 8013ad8:	08015cbb 	.word	0x08015cbb

08013adc <fiprintf>:
 8013adc:	b40e      	push	{r1, r2, r3}
 8013ade:	b503      	push	{r0, r1, lr}
 8013ae0:	4601      	mov	r1, r0
 8013ae2:	ab03      	add	r3, sp, #12
 8013ae4:	4805      	ldr	r0, [pc, #20]	; (8013afc <fiprintf+0x20>)
 8013ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013aea:	6800      	ldr	r0, [r0, #0]
 8013aec:	9301      	str	r3, [sp, #4]
 8013aee:	f7ff fc3f 	bl	8013370 <_vfiprintf_r>
 8013af2:	b002      	add	sp, #8
 8013af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013af8:	b003      	add	sp, #12
 8013afa:	4770      	bx	lr
 8013afc:	20000028 	.word	0x20000028

08013b00 <_fstat_r>:
 8013b00:	b538      	push	{r3, r4, r5, lr}
 8013b02:	4d07      	ldr	r5, [pc, #28]	; (8013b20 <_fstat_r+0x20>)
 8013b04:	2300      	movs	r3, #0
 8013b06:	4604      	mov	r4, r0
 8013b08:	4608      	mov	r0, r1
 8013b0a:	4611      	mov	r1, r2
 8013b0c:	602b      	str	r3, [r5, #0]
 8013b0e:	f7f0 fb92 	bl	8004236 <_fstat>
 8013b12:	1c43      	adds	r3, r0, #1
 8013b14:	d102      	bne.n	8013b1c <_fstat_r+0x1c>
 8013b16:	682b      	ldr	r3, [r5, #0]
 8013b18:	b103      	cbz	r3, 8013b1c <_fstat_r+0x1c>
 8013b1a:	6023      	str	r3, [r4, #0]
 8013b1c:	bd38      	pop	{r3, r4, r5, pc}
 8013b1e:	bf00      	nop
 8013b20:	20001a24 	.word	0x20001a24

08013b24 <_isatty_r>:
 8013b24:	b538      	push	{r3, r4, r5, lr}
 8013b26:	4d06      	ldr	r5, [pc, #24]	; (8013b40 <_isatty_r+0x1c>)
 8013b28:	2300      	movs	r3, #0
 8013b2a:	4604      	mov	r4, r0
 8013b2c:	4608      	mov	r0, r1
 8013b2e:	602b      	str	r3, [r5, #0]
 8013b30:	f7f0 fb91 	bl	8004256 <_isatty>
 8013b34:	1c43      	adds	r3, r0, #1
 8013b36:	d102      	bne.n	8013b3e <_isatty_r+0x1a>
 8013b38:	682b      	ldr	r3, [r5, #0]
 8013b3a:	b103      	cbz	r3, 8013b3e <_isatty_r+0x1a>
 8013b3c:	6023      	str	r3, [r4, #0]
 8013b3e:	bd38      	pop	{r3, r4, r5, pc}
 8013b40:	20001a24 	.word	0x20001a24

08013b44 <memmove>:
 8013b44:	4288      	cmp	r0, r1
 8013b46:	b510      	push	{r4, lr}
 8013b48:	eb01 0402 	add.w	r4, r1, r2
 8013b4c:	d902      	bls.n	8013b54 <memmove+0x10>
 8013b4e:	4284      	cmp	r4, r0
 8013b50:	4623      	mov	r3, r4
 8013b52:	d807      	bhi.n	8013b64 <memmove+0x20>
 8013b54:	1e43      	subs	r3, r0, #1
 8013b56:	42a1      	cmp	r1, r4
 8013b58:	d008      	beq.n	8013b6c <memmove+0x28>
 8013b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013b62:	e7f8      	b.n	8013b56 <memmove+0x12>
 8013b64:	4402      	add	r2, r0
 8013b66:	4601      	mov	r1, r0
 8013b68:	428a      	cmp	r2, r1
 8013b6a:	d100      	bne.n	8013b6e <memmove+0x2a>
 8013b6c:	bd10      	pop	{r4, pc}
 8013b6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b76:	e7f7      	b.n	8013b68 <memmove+0x24>

08013b78 <_realloc_r>:
 8013b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b7a:	4607      	mov	r7, r0
 8013b7c:	4614      	mov	r4, r2
 8013b7e:	460e      	mov	r6, r1
 8013b80:	b921      	cbnz	r1, 8013b8c <_realloc_r+0x14>
 8013b82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013b86:	4611      	mov	r1, r2
 8013b88:	f7fa bf8c 	b.w	800eaa4 <_malloc_r>
 8013b8c:	b922      	cbnz	r2, 8013b98 <_realloc_r+0x20>
 8013b8e:	f7fa ff39 	bl	800ea04 <_free_r>
 8013b92:	4625      	mov	r5, r4
 8013b94:	4628      	mov	r0, r5
 8013b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b98:	f000 f81b 	bl	8013bd2 <_malloc_usable_size_r>
 8013b9c:	42a0      	cmp	r0, r4
 8013b9e:	d20f      	bcs.n	8013bc0 <_realloc_r+0x48>
 8013ba0:	4621      	mov	r1, r4
 8013ba2:	4638      	mov	r0, r7
 8013ba4:	f7fa ff7e 	bl	800eaa4 <_malloc_r>
 8013ba8:	4605      	mov	r5, r0
 8013baa:	2800      	cmp	r0, #0
 8013bac:	d0f2      	beq.n	8013b94 <_realloc_r+0x1c>
 8013bae:	4631      	mov	r1, r6
 8013bb0:	4622      	mov	r2, r4
 8013bb2:	f7fa ff11 	bl	800e9d8 <memcpy>
 8013bb6:	4631      	mov	r1, r6
 8013bb8:	4638      	mov	r0, r7
 8013bba:	f7fa ff23 	bl	800ea04 <_free_r>
 8013bbe:	e7e9      	b.n	8013b94 <_realloc_r+0x1c>
 8013bc0:	4635      	mov	r5, r6
 8013bc2:	e7e7      	b.n	8013b94 <_realloc_r+0x1c>

08013bc4 <abort>:
 8013bc4:	b508      	push	{r3, lr}
 8013bc6:	2006      	movs	r0, #6
 8013bc8:	f000 f834 	bl	8013c34 <raise>
 8013bcc:	2001      	movs	r0, #1
 8013bce:	f7f0 fae3 	bl	8004198 <_exit>

08013bd2 <_malloc_usable_size_r>:
 8013bd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bd6:	1f18      	subs	r0, r3, #4
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	bfbc      	itt	lt
 8013bdc:	580b      	ldrlt	r3, [r1, r0]
 8013bde:	18c0      	addlt	r0, r0, r3
 8013be0:	4770      	bx	lr

08013be2 <_raise_r>:
 8013be2:	291f      	cmp	r1, #31
 8013be4:	b538      	push	{r3, r4, r5, lr}
 8013be6:	4604      	mov	r4, r0
 8013be8:	460d      	mov	r5, r1
 8013bea:	d904      	bls.n	8013bf6 <_raise_r+0x14>
 8013bec:	2316      	movs	r3, #22
 8013bee:	6003      	str	r3, [r0, #0]
 8013bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8013bf4:	bd38      	pop	{r3, r4, r5, pc}
 8013bf6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013bf8:	b112      	cbz	r2, 8013c00 <_raise_r+0x1e>
 8013bfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013bfe:	b94b      	cbnz	r3, 8013c14 <_raise_r+0x32>
 8013c00:	4620      	mov	r0, r4
 8013c02:	f000 f831 	bl	8013c68 <_getpid_r>
 8013c06:	462a      	mov	r2, r5
 8013c08:	4601      	mov	r1, r0
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c10:	f000 b818 	b.w	8013c44 <_kill_r>
 8013c14:	2b01      	cmp	r3, #1
 8013c16:	d00a      	beq.n	8013c2e <_raise_r+0x4c>
 8013c18:	1c59      	adds	r1, r3, #1
 8013c1a:	d103      	bne.n	8013c24 <_raise_r+0x42>
 8013c1c:	2316      	movs	r3, #22
 8013c1e:	6003      	str	r3, [r0, #0]
 8013c20:	2001      	movs	r0, #1
 8013c22:	e7e7      	b.n	8013bf4 <_raise_r+0x12>
 8013c24:	2400      	movs	r4, #0
 8013c26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c2a:	4628      	mov	r0, r5
 8013c2c:	4798      	blx	r3
 8013c2e:	2000      	movs	r0, #0
 8013c30:	e7e0      	b.n	8013bf4 <_raise_r+0x12>
	...

08013c34 <raise>:
 8013c34:	4b02      	ldr	r3, [pc, #8]	; (8013c40 <raise+0xc>)
 8013c36:	4601      	mov	r1, r0
 8013c38:	6818      	ldr	r0, [r3, #0]
 8013c3a:	f7ff bfd2 	b.w	8013be2 <_raise_r>
 8013c3e:	bf00      	nop
 8013c40:	20000028 	.word	0x20000028

08013c44 <_kill_r>:
 8013c44:	b538      	push	{r3, r4, r5, lr}
 8013c46:	4d07      	ldr	r5, [pc, #28]	; (8013c64 <_kill_r+0x20>)
 8013c48:	2300      	movs	r3, #0
 8013c4a:	4604      	mov	r4, r0
 8013c4c:	4608      	mov	r0, r1
 8013c4e:	4611      	mov	r1, r2
 8013c50:	602b      	str	r3, [r5, #0]
 8013c52:	f7f0 fa91 	bl	8004178 <_kill>
 8013c56:	1c43      	adds	r3, r0, #1
 8013c58:	d102      	bne.n	8013c60 <_kill_r+0x1c>
 8013c5a:	682b      	ldr	r3, [r5, #0]
 8013c5c:	b103      	cbz	r3, 8013c60 <_kill_r+0x1c>
 8013c5e:	6023      	str	r3, [r4, #0]
 8013c60:	bd38      	pop	{r3, r4, r5, pc}
 8013c62:	bf00      	nop
 8013c64:	20001a24 	.word	0x20001a24

08013c68 <_getpid_r>:
 8013c68:	f7f0 ba7e 	b.w	8004168 <_getpid>

08013c6c <pow>:
 8013c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c70:	ec59 8b10 	vmov	r8, r9, d0
 8013c74:	ec57 6b11 	vmov	r6, r7, d1
 8013c78:	f000 f8a6 	bl	8013dc8 <__ieee754_pow>
 8013c7c:	4b4e      	ldr	r3, [pc, #312]	; (8013db8 <pow+0x14c>)
 8013c7e:	f993 3000 	ldrsb.w	r3, [r3]
 8013c82:	3301      	adds	r3, #1
 8013c84:	ec55 4b10 	vmov	r4, r5, d0
 8013c88:	d015      	beq.n	8013cb6 <pow+0x4a>
 8013c8a:	4632      	mov	r2, r6
 8013c8c:	463b      	mov	r3, r7
 8013c8e:	4630      	mov	r0, r6
 8013c90:	4639      	mov	r1, r7
 8013c92:	f7ec ff5b 	bl	8000b4c <__aeabi_dcmpun>
 8013c96:	b970      	cbnz	r0, 8013cb6 <pow+0x4a>
 8013c98:	4642      	mov	r2, r8
 8013c9a:	464b      	mov	r3, r9
 8013c9c:	4640      	mov	r0, r8
 8013c9e:	4649      	mov	r1, r9
 8013ca0:	f7ec ff54 	bl	8000b4c <__aeabi_dcmpun>
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	b148      	cbz	r0, 8013cbe <pow+0x52>
 8013caa:	4630      	mov	r0, r6
 8013cac:	4639      	mov	r1, r7
 8013cae:	f7ec ff1b 	bl	8000ae8 <__aeabi_dcmpeq>
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	d17d      	bne.n	8013db2 <pow+0x146>
 8013cb6:	ec45 4b10 	vmov	d0, r4, r5
 8013cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cbe:	4640      	mov	r0, r8
 8013cc0:	4649      	mov	r1, r9
 8013cc2:	f7ec ff11 	bl	8000ae8 <__aeabi_dcmpeq>
 8013cc6:	b1e0      	cbz	r0, 8013d02 <pow+0x96>
 8013cc8:	2200      	movs	r2, #0
 8013cca:	2300      	movs	r3, #0
 8013ccc:	4630      	mov	r0, r6
 8013cce:	4639      	mov	r1, r7
 8013cd0:	f7ec ff0a 	bl	8000ae8 <__aeabi_dcmpeq>
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	d16c      	bne.n	8013db2 <pow+0x146>
 8013cd8:	ec47 6b10 	vmov	d0, r6, r7
 8013cdc:	f000 fe53 	bl	8014986 <finite>
 8013ce0:	2800      	cmp	r0, #0
 8013ce2:	d0e8      	beq.n	8013cb6 <pow+0x4a>
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	4630      	mov	r0, r6
 8013cea:	4639      	mov	r1, r7
 8013cec:	f7ec ff06 	bl	8000afc <__aeabi_dcmplt>
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	d0e0      	beq.n	8013cb6 <pow+0x4a>
 8013cf4:	f7fa fe3e 	bl	800e974 <__errno>
 8013cf8:	2321      	movs	r3, #33	; 0x21
 8013cfa:	6003      	str	r3, [r0, #0]
 8013cfc:	2400      	movs	r4, #0
 8013cfe:	4d2f      	ldr	r5, [pc, #188]	; (8013dbc <pow+0x150>)
 8013d00:	e7d9      	b.n	8013cb6 <pow+0x4a>
 8013d02:	ec45 4b10 	vmov	d0, r4, r5
 8013d06:	f000 fe3e 	bl	8014986 <finite>
 8013d0a:	bbb8      	cbnz	r0, 8013d7c <pow+0x110>
 8013d0c:	ec49 8b10 	vmov	d0, r8, r9
 8013d10:	f000 fe39 	bl	8014986 <finite>
 8013d14:	b390      	cbz	r0, 8013d7c <pow+0x110>
 8013d16:	ec47 6b10 	vmov	d0, r6, r7
 8013d1a:	f000 fe34 	bl	8014986 <finite>
 8013d1e:	b368      	cbz	r0, 8013d7c <pow+0x110>
 8013d20:	4622      	mov	r2, r4
 8013d22:	462b      	mov	r3, r5
 8013d24:	4620      	mov	r0, r4
 8013d26:	4629      	mov	r1, r5
 8013d28:	f7ec ff10 	bl	8000b4c <__aeabi_dcmpun>
 8013d2c:	b160      	cbz	r0, 8013d48 <pow+0xdc>
 8013d2e:	f7fa fe21 	bl	800e974 <__errno>
 8013d32:	2321      	movs	r3, #33	; 0x21
 8013d34:	6003      	str	r3, [r0, #0]
 8013d36:	2200      	movs	r2, #0
 8013d38:	2300      	movs	r3, #0
 8013d3a:	4610      	mov	r0, r2
 8013d3c:	4619      	mov	r1, r3
 8013d3e:	f7ec fd95 	bl	800086c <__aeabi_ddiv>
 8013d42:	4604      	mov	r4, r0
 8013d44:	460d      	mov	r5, r1
 8013d46:	e7b6      	b.n	8013cb6 <pow+0x4a>
 8013d48:	f7fa fe14 	bl	800e974 <__errno>
 8013d4c:	2322      	movs	r3, #34	; 0x22
 8013d4e:	6003      	str	r3, [r0, #0]
 8013d50:	2200      	movs	r2, #0
 8013d52:	2300      	movs	r3, #0
 8013d54:	4640      	mov	r0, r8
 8013d56:	4649      	mov	r1, r9
 8013d58:	f7ec fed0 	bl	8000afc <__aeabi_dcmplt>
 8013d5c:	2400      	movs	r4, #0
 8013d5e:	b158      	cbz	r0, 8013d78 <pow+0x10c>
 8013d60:	ec47 6b10 	vmov	d0, r6, r7
 8013d64:	f000 fe1a 	bl	801499c <rint>
 8013d68:	4632      	mov	r2, r6
 8013d6a:	ec51 0b10 	vmov	r0, r1, d0
 8013d6e:	463b      	mov	r3, r7
 8013d70:	f7ec feba 	bl	8000ae8 <__aeabi_dcmpeq>
 8013d74:	2800      	cmp	r0, #0
 8013d76:	d0c2      	beq.n	8013cfe <pow+0x92>
 8013d78:	4d11      	ldr	r5, [pc, #68]	; (8013dc0 <pow+0x154>)
 8013d7a:	e79c      	b.n	8013cb6 <pow+0x4a>
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	2300      	movs	r3, #0
 8013d80:	4620      	mov	r0, r4
 8013d82:	4629      	mov	r1, r5
 8013d84:	f7ec feb0 	bl	8000ae8 <__aeabi_dcmpeq>
 8013d88:	2800      	cmp	r0, #0
 8013d8a:	d094      	beq.n	8013cb6 <pow+0x4a>
 8013d8c:	ec49 8b10 	vmov	d0, r8, r9
 8013d90:	f000 fdf9 	bl	8014986 <finite>
 8013d94:	2800      	cmp	r0, #0
 8013d96:	d08e      	beq.n	8013cb6 <pow+0x4a>
 8013d98:	ec47 6b10 	vmov	d0, r6, r7
 8013d9c:	f000 fdf3 	bl	8014986 <finite>
 8013da0:	2800      	cmp	r0, #0
 8013da2:	d088      	beq.n	8013cb6 <pow+0x4a>
 8013da4:	f7fa fde6 	bl	800e974 <__errno>
 8013da8:	2322      	movs	r3, #34	; 0x22
 8013daa:	6003      	str	r3, [r0, #0]
 8013dac:	2400      	movs	r4, #0
 8013dae:	2500      	movs	r5, #0
 8013db0:	e781      	b.n	8013cb6 <pow+0x4a>
 8013db2:	4d04      	ldr	r5, [pc, #16]	; (8013dc4 <pow+0x158>)
 8013db4:	2400      	movs	r4, #0
 8013db6:	e77e      	b.n	8013cb6 <pow+0x4a>
 8013db8:	200001fc 	.word	0x200001fc
 8013dbc:	fff00000 	.word	0xfff00000
 8013dc0:	7ff00000 	.word	0x7ff00000
 8013dc4:	3ff00000 	.word	0x3ff00000

08013dc8 <__ieee754_pow>:
 8013dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dcc:	ed2d 8b06 	vpush	{d8-d10}
 8013dd0:	b08d      	sub	sp, #52	; 0x34
 8013dd2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8013dd6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8013dda:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8013dde:	ea56 0100 	orrs.w	r1, r6, r0
 8013de2:	ec53 2b10 	vmov	r2, r3, d0
 8013de6:	f000 84d1 	beq.w	801478c <__ieee754_pow+0x9c4>
 8013dea:	497f      	ldr	r1, [pc, #508]	; (8013fe8 <__ieee754_pow+0x220>)
 8013dec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8013df0:	428c      	cmp	r4, r1
 8013df2:	ee10 8a10 	vmov	r8, s0
 8013df6:	4699      	mov	r9, r3
 8013df8:	dc09      	bgt.n	8013e0e <__ieee754_pow+0x46>
 8013dfa:	d103      	bne.n	8013e04 <__ieee754_pow+0x3c>
 8013dfc:	b97a      	cbnz	r2, 8013e1e <__ieee754_pow+0x56>
 8013dfe:	42a6      	cmp	r6, r4
 8013e00:	dd02      	ble.n	8013e08 <__ieee754_pow+0x40>
 8013e02:	e00c      	b.n	8013e1e <__ieee754_pow+0x56>
 8013e04:	428e      	cmp	r6, r1
 8013e06:	dc02      	bgt.n	8013e0e <__ieee754_pow+0x46>
 8013e08:	428e      	cmp	r6, r1
 8013e0a:	d110      	bne.n	8013e2e <__ieee754_pow+0x66>
 8013e0c:	b178      	cbz	r0, 8013e2e <__ieee754_pow+0x66>
 8013e0e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013e12:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013e16:	ea54 0308 	orrs.w	r3, r4, r8
 8013e1a:	f000 84b7 	beq.w	801478c <__ieee754_pow+0x9c4>
 8013e1e:	4873      	ldr	r0, [pc, #460]	; (8013fec <__ieee754_pow+0x224>)
 8013e20:	b00d      	add	sp, #52	; 0x34
 8013e22:	ecbd 8b06 	vpop	{d8-d10}
 8013e26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e2a:	f7ff bd31 	b.w	8013890 <nan>
 8013e2e:	f1b9 0f00 	cmp.w	r9, #0
 8013e32:	da36      	bge.n	8013ea2 <__ieee754_pow+0xda>
 8013e34:	496e      	ldr	r1, [pc, #440]	; (8013ff0 <__ieee754_pow+0x228>)
 8013e36:	428e      	cmp	r6, r1
 8013e38:	dc51      	bgt.n	8013ede <__ieee754_pow+0x116>
 8013e3a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8013e3e:	428e      	cmp	r6, r1
 8013e40:	f340 84af 	ble.w	80147a2 <__ieee754_pow+0x9da>
 8013e44:	1531      	asrs	r1, r6, #20
 8013e46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013e4a:	2914      	cmp	r1, #20
 8013e4c:	dd0f      	ble.n	8013e6e <__ieee754_pow+0xa6>
 8013e4e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8013e52:	fa20 fc01 	lsr.w	ip, r0, r1
 8013e56:	fa0c f101 	lsl.w	r1, ip, r1
 8013e5a:	4281      	cmp	r1, r0
 8013e5c:	f040 84a1 	bne.w	80147a2 <__ieee754_pow+0x9da>
 8013e60:	f00c 0c01 	and.w	ip, ip, #1
 8013e64:	f1cc 0102 	rsb	r1, ip, #2
 8013e68:	9100      	str	r1, [sp, #0]
 8013e6a:	b180      	cbz	r0, 8013e8e <__ieee754_pow+0xc6>
 8013e6c:	e059      	b.n	8013f22 <__ieee754_pow+0x15a>
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	d155      	bne.n	8013f1e <__ieee754_pow+0x156>
 8013e72:	f1c1 0114 	rsb	r1, r1, #20
 8013e76:	fa46 fc01 	asr.w	ip, r6, r1
 8013e7a:	fa0c f101 	lsl.w	r1, ip, r1
 8013e7e:	42b1      	cmp	r1, r6
 8013e80:	f040 848c 	bne.w	801479c <__ieee754_pow+0x9d4>
 8013e84:	f00c 0c01 	and.w	ip, ip, #1
 8013e88:	f1cc 0102 	rsb	r1, ip, #2
 8013e8c:	9100      	str	r1, [sp, #0]
 8013e8e:	4959      	ldr	r1, [pc, #356]	; (8013ff4 <__ieee754_pow+0x22c>)
 8013e90:	428e      	cmp	r6, r1
 8013e92:	d12d      	bne.n	8013ef0 <__ieee754_pow+0x128>
 8013e94:	2f00      	cmp	r7, #0
 8013e96:	da79      	bge.n	8013f8c <__ieee754_pow+0x1c4>
 8013e98:	4956      	ldr	r1, [pc, #344]	; (8013ff4 <__ieee754_pow+0x22c>)
 8013e9a:	2000      	movs	r0, #0
 8013e9c:	f7ec fce6 	bl	800086c <__aeabi_ddiv>
 8013ea0:	e016      	b.n	8013ed0 <__ieee754_pow+0x108>
 8013ea2:	2100      	movs	r1, #0
 8013ea4:	9100      	str	r1, [sp, #0]
 8013ea6:	2800      	cmp	r0, #0
 8013ea8:	d13b      	bne.n	8013f22 <__ieee754_pow+0x15a>
 8013eaa:	494f      	ldr	r1, [pc, #316]	; (8013fe8 <__ieee754_pow+0x220>)
 8013eac:	428e      	cmp	r6, r1
 8013eae:	d1ee      	bne.n	8013e8e <__ieee754_pow+0xc6>
 8013eb0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013eb4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013eb8:	ea53 0308 	orrs.w	r3, r3, r8
 8013ebc:	f000 8466 	beq.w	801478c <__ieee754_pow+0x9c4>
 8013ec0:	4b4d      	ldr	r3, [pc, #308]	; (8013ff8 <__ieee754_pow+0x230>)
 8013ec2:	429c      	cmp	r4, r3
 8013ec4:	dd0d      	ble.n	8013ee2 <__ieee754_pow+0x11a>
 8013ec6:	2f00      	cmp	r7, #0
 8013ec8:	f280 8464 	bge.w	8014794 <__ieee754_pow+0x9cc>
 8013ecc:	2000      	movs	r0, #0
 8013ece:	2100      	movs	r1, #0
 8013ed0:	ec41 0b10 	vmov	d0, r0, r1
 8013ed4:	b00d      	add	sp, #52	; 0x34
 8013ed6:	ecbd 8b06 	vpop	{d8-d10}
 8013eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ede:	2102      	movs	r1, #2
 8013ee0:	e7e0      	b.n	8013ea4 <__ieee754_pow+0xdc>
 8013ee2:	2f00      	cmp	r7, #0
 8013ee4:	daf2      	bge.n	8013ecc <__ieee754_pow+0x104>
 8013ee6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8013eea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013eee:	e7ef      	b.n	8013ed0 <__ieee754_pow+0x108>
 8013ef0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8013ef4:	d104      	bne.n	8013f00 <__ieee754_pow+0x138>
 8013ef6:	4610      	mov	r0, r2
 8013ef8:	4619      	mov	r1, r3
 8013efa:	f7ec fb8d 	bl	8000618 <__aeabi_dmul>
 8013efe:	e7e7      	b.n	8013ed0 <__ieee754_pow+0x108>
 8013f00:	493e      	ldr	r1, [pc, #248]	; (8013ffc <__ieee754_pow+0x234>)
 8013f02:	428f      	cmp	r7, r1
 8013f04:	d10d      	bne.n	8013f22 <__ieee754_pow+0x15a>
 8013f06:	f1b9 0f00 	cmp.w	r9, #0
 8013f0a:	db0a      	blt.n	8013f22 <__ieee754_pow+0x15a>
 8013f0c:	ec43 2b10 	vmov	d0, r2, r3
 8013f10:	b00d      	add	sp, #52	; 0x34
 8013f12:	ecbd 8b06 	vpop	{d8-d10}
 8013f16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f1a:	f000 bc77 	b.w	801480c <__ieee754_sqrt>
 8013f1e:	2100      	movs	r1, #0
 8013f20:	9100      	str	r1, [sp, #0]
 8013f22:	ec43 2b10 	vmov	d0, r2, r3
 8013f26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013f2a:	f000 fd23 	bl	8014974 <fabs>
 8013f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f32:	ec51 0b10 	vmov	r0, r1, d0
 8013f36:	f1b8 0f00 	cmp.w	r8, #0
 8013f3a:	d12a      	bne.n	8013f92 <__ieee754_pow+0x1ca>
 8013f3c:	b12c      	cbz	r4, 8013f4a <__ieee754_pow+0x182>
 8013f3e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8013ff4 <__ieee754_pow+0x22c>
 8013f42:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8013f46:	45e6      	cmp	lr, ip
 8013f48:	d123      	bne.n	8013f92 <__ieee754_pow+0x1ca>
 8013f4a:	2f00      	cmp	r7, #0
 8013f4c:	da05      	bge.n	8013f5a <__ieee754_pow+0x192>
 8013f4e:	4602      	mov	r2, r0
 8013f50:	460b      	mov	r3, r1
 8013f52:	2000      	movs	r0, #0
 8013f54:	4927      	ldr	r1, [pc, #156]	; (8013ff4 <__ieee754_pow+0x22c>)
 8013f56:	f7ec fc89 	bl	800086c <__aeabi_ddiv>
 8013f5a:	f1b9 0f00 	cmp.w	r9, #0
 8013f5e:	dab7      	bge.n	8013ed0 <__ieee754_pow+0x108>
 8013f60:	9b00      	ldr	r3, [sp, #0]
 8013f62:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013f66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013f6a:	4323      	orrs	r3, r4
 8013f6c:	d108      	bne.n	8013f80 <__ieee754_pow+0x1b8>
 8013f6e:	4602      	mov	r2, r0
 8013f70:	460b      	mov	r3, r1
 8013f72:	4610      	mov	r0, r2
 8013f74:	4619      	mov	r1, r3
 8013f76:	f7ec f997 	bl	80002a8 <__aeabi_dsub>
 8013f7a:	4602      	mov	r2, r0
 8013f7c:	460b      	mov	r3, r1
 8013f7e:	e78d      	b.n	8013e9c <__ieee754_pow+0xd4>
 8013f80:	9b00      	ldr	r3, [sp, #0]
 8013f82:	2b01      	cmp	r3, #1
 8013f84:	d1a4      	bne.n	8013ed0 <__ieee754_pow+0x108>
 8013f86:	4602      	mov	r2, r0
 8013f88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f8c:	4610      	mov	r0, r2
 8013f8e:	4619      	mov	r1, r3
 8013f90:	e79e      	b.n	8013ed0 <__ieee754_pow+0x108>
 8013f92:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8013f96:	f10c 35ff 	add.w	r5, ip, #4294967295
 8013f9a:	950a      	str	r5, [sp, #40]	; 0x28
 8013f9c:	9d00      	ldr	r5, [sp, #0]
 8013f9e:	46ac      	mov	ip, r5
 8013fa0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013fa2:	ea5c 0505 	orrs.w	r5, ip, r5
 8013fa6:	d0e4      	beq.n	8013f72 <__ieee754_pow+0x1aa>
 8013fa8:	4b15      	ldr	r3, [pc, #84]	; (8014000 <__ieee754_pow+0x238>)
 8013faa:	429e      	cmp	r6, r3
 8013fac:	f340 80fc 	ble.w	80141a8 <__ieee754_pow+0x3e0>
 8013fb0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013fb4:	429e      	cmp	r6, r3
 8013fb6:	4b10      	ldr	r3, [pc, #64]	; (8013ff8 <__ieee754_pow+0x230>)
 8013fb8:	dd07      	ble.n	8013fca <__ieee754_pow+0x202>
 8013fba:	429c      	cmp	r4, r3
 8013fbc:	dc0a      	bgt.n	8013fd4 <__ieee754_pow+0x20c>
 8013fbe:	2f00      	cmp	r7, #0
 8013fc0:	da84      	bge.n	8013ecc <__ieee754_pow+0x104>
 8013fc2:	a307      	add	r3, pc, #28	; (adr r3, 8013fe0 <__ieee754_pow+0x218>)
 8013fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc8:	e795      	b.n	8013ef6 <__ieee754_pow+0x12e>
 8013fca:	429c      	cmp	r4, r3
 8013fcc:	dbf7      	blt.n	8013fbe <__ieee754_pow+0x1f6>
 8013fce:	4b09      	ldr	r3, [pc, #36]	; (8013ff4 <__ieee754_pow+0x22c>)
 8013fd0:	429c      	cmp	r4, r3
 8013fd2:	dd17      	ble.n	8014004 <__ieee754_pow+0x23c>
 8013fd4:	2f00      	cmp	r7, #0
 8013fd6:	dcf4      	bgt.n	8013fc2 <__ieee754_pow+0x1fa>
 8013fd8:	e778      	b.n	8013ecc <__ieee754_pow+0x104>
 8013fda:	bf00      	nop
 8013fdc:	f3af 8000 	nop.w
 8013fe0:	8800759c 	.word	0x8800759c
 8013fe4:	7e37e43c 	.word	0x7e37e43c
 8013fe8:	7ff00000 	.word	0x7ff00000
 8013fec:	08015cbb 	.word	0x08015cbb
 8013ff0:	433fffff 	.word	0x433fffff
 8013ff4:	3ff00000 	.word	0x3ff00000
 8013ff8:	3fefffff 	.word	0x3fefffff
 8013ffc:	3fe00000 	.word	0x3fe00000
 8014000:	41e00000 	.word	0x41e00000
 8014004:	4b64      	ldr	r3, [pc, #400]	; (8014198 <__ieee754_pow+0x3d0>)
 8014006:	2200      	movs	r2, #0
 8014008:	f7ec f94e 	bl	80002a8 <__aeabi_dsub>
 801400c:	a356      	add	r3, pc, #344	; (adr r3, 8014168 <__ieee754_pow+0x3a0>)
 801400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014012:	4604      	mov	r4, r0
 8014014:	460d      	mov	r5, r1
 8014016:	f7ec faff 	bl	8000618 <__aeabi_dmul>
 801401a:	a355      	add	r3, pc, #340	; (adr r3, 8014170 <__ieee754_pow+0x3a8>)
 801401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014020:	4606      	mov	r6, r0
 8014022:	460f      	mov	r7, r1
 8014024:	4620      	mov	r0, r4
 8014026:	4629      	mov	r1, r5
 8014028:	f7ec faf6 	bl	8000618 <__aeabi_dmul>
 801402c:	4b5b      	ldr	r3, [pc, #364]	; (801419c <__ieee754_pow+0x3d4>)
 801402e:	4682      	mov	sl, r0
 8014030:	468b      	mov	fp, r1
 8014032:	2200      	movs	r2, #0
 8014034:	4620      	mov	r0, r4
 8014036:	4629      	mov	r1, r5
 8014038:	f7ec faee 	bl	8000618 <__aeabi_dmul>
 801403c:	4602      	mov	r2, r0
 801403e:	460b      	mov	r3, r1
 8014040:	a14d      	add	r1, pc, #308	; (adr r1, 8014178 <__ieee754_pow+0x3b0>)
 8014042:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014046:	f7ec f92f 	bl	80002a8 <__aeabi_dsub>
 801404a:	4622      	mov	r2, r4
 801404c:	462b      	mov	r3, r5
 801404e:	f7ec fae3 	bl	8000618 <__aeabi_dmul>
 8014052:	4602      	mov	r2, r0
 8014054:	460b      	mov	r3, r1
 8014056:	2000      	movs	r0, #0
 8014058:	4951      	ldr	r1, [pc, #324]	; (80141a0 <__ieee754_pow+0x3d8>)
 801405a:	f7ec f925 	bl	80002a8 <__aeabi_dsub>
 801405e:	4622      	mov	r2, r4
 8014060:	4680      	mov	r8, r0
 8014062:	4689      	mov	r9, r1
 8014064:	462b      	mov	r3, r5
 8014066:	4620      	mov	r0, r4
 8014068:	4629      	mov	r1, r5
 801406a:	f7ec fad5 	bl	8000618 <__aeabi_dmul>
 801406e:	4602      	mov	r2, r0
 8014070:	460b      	mov	r3, r1
 8014072:	4640      	mov	r0, r8
 8014074:	4649      	mov	r1, r9
 8014076:	f7ec facf 	bl	8000618 <__aeabi_dmul>
 801407a:	a341      	add	r3, pc, #260	; (adr r3, 8014180 <__ieee754_pow+0x3b8>)
 801407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014080:	f7ec faca 	bl	8000618 <__aeabi_dmul>
 8014084:	4602      	mov	r2, r0
 8014086:	460b      	mov	r3, r1
 8014088:	4650      	mov	r0, sl
 801408a:	4659      	mov	r1, fp
 801408c:	f7ec f90c 	bl	80002a8 <__aeabi_dsub>
 8014090:	4602      	mov	r2, r0
 8014092:	460b      	mov	r3, r1
 8014094:	4680      	mov	r8, r0
 8014096:	4689      	mov	r9, r1
 8014098:	4630      	mov	r0, r6
 801409a:	4639      	mov	r1, r7
 801409c:	f7ec f906 	bl	80002ac <__adddf3>
 80140a0:	2400      	movs	r4, #0
 80140a2:	4632      	mov	r2, r6
 80140a4:	463b      	mov	r3, r7
 80140a6:	4620      	mov	r0, r4
 80140a8:	460d      	mov	r5, r1
 80140aa:	f7ec f8fd 	bl	80002a8 <__aeabi_dsub>
 80140ae:	4602      	mov	r2, r0
 80140b0:	460b      	mov	r3, r1
 80140b2:	4640      	mov	r0, r8
 80140b4:	4649      	mov	r1, r9
 80140b6:	f7ec f8f7 	bl	80002a8 <__aeabi_dsub>
 80140ba:	9b00      	ldr	r3, [sp, #0]
 80140bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80140be:	3b01      	subs	r3, #1
 80140c0:	4313      	orrs	r3, r2
 80140c2:	4682      	mov	sl, r0
 80140c4:	468b      	mov	fp, r1
 80140c6:	f040 81f1 	bne.w	80144ac <__ieee754_pow+0x6e4>
 80140ca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8014188 <__ieee754_pow+0x3c0>
 80140ce:	eeb0 8a47 	vmov.f32	s16, s14
 80140d2:	eef0 8a67 	vmov.f32	s17, s15
 80140d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80140da:	2600      	movs	r6, #0
 80140dc:	4632      	mov	r2, r6
 80140de:	463b      	mov	r3, r7
 80140e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140e4:	f7ec f8e0 	bl	80002a8 <__aeabi_dsub>
 80140e8:	4622      	mov	r2, r4
 80140ea:	462b      	mov	r3, r5
 80140ec:	f7ec fa94 	bl	8000618 <__aeabi_dmul>
 80140f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80140f4:	4680      	mov	r8, r0
 80140f6:	4689      	mov	r9, r1
 80140f8:	4650      	mov	r0, sl
 80140fa:	4659      	mov	r1, fp
 80140fc:	f7ec fa8c 	bl	8000618 <__aeabi_dmul>
 8014100:	4602      	mov	r2, r0
 8014102:	460b      	mov	r3, r1
 8014104:	4640      	mov	r0, r8
 8014106:	4649      	mov	r1, r9
 8014108:	f7ec f8d0 	bl	80002ac <__adddf3>
 801410c:	4632      	mov	r2, r6
 801410e:	463b      	mov	r3, r7
 8014110:	4680      	mov	r8, r0
 8014112:	4689      	mov	r9, r1
 8014114:	4620      	mov	r0, r4
 8014116:	4629      	mov	r1, r5
 8014118:	f7ec fa7e 	bl	8000618 <__aeabi_dmul>
 801411c:	460b      	mov	r3, r1
 801411e:	4604      	mov	r4, r0
 8014120:	460d      	mov	r5, r1
 8014122:	4602      	mov	r2, r0
 8014124:	4649      	mov	r1, r9
 8014126:	4640      	mov	r0, r8
 8014128:	f7ec f8c0 	bl	80002ac <__adddf3>
 801412c:	4b1d      	ldr	r3, [pc, #116]	; (80141a4 <__ieee754_pow+0x3dc>)
 801412e:	4299      	cmp	r1, r3
 8014130:	ec45 4b19 	vmov	d9, r4, r5
 8014134:	4606      	mov	r6, r0
 8014136:	460f      	mov	r7, r1
 8014138:	468b      	mov	fp, r1
 801413a:	f340 82fe 	ble.w	801473a <__ieee754_pow+0x972>
 801413e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014142:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014146:	4303      	orrs	r3, r0
 8014148:	f000 81f0 	beq.w	801452c <__ieee754_pow+0x764>
 801414c:	a310      	add	r3, pc, #64	; (adr r3, 8014190 <__ieee754_pow+0x3c8>)
 801414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014152:	ec51 0b18 	vmov	r0, r1, d8
 8014156:	f7ec fa5f 	bl	8000618 <__aeabi_dmul>
 801415a:	a30d      	add	r3, pc, #52	; (adr r3, 8014190 <__ieee754_pow+0x3c8>)
 801415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014160:	e6cb      	b.n	8013efa <__ieee754_pow+0x132>
 8014162:	bf00      	nop
 8014164:	f3af 8000 	nop.w
 8014168:	60000000 	.word	0x60000000
 801416c:	3ff71547 	.word	0x3ff71547
 8014170:	f85ddf44 	.word	0xf85ddf44
 8014174:	3e54ae0b 	.word	0x3e54ae0b
 8014178:	55555555 	.word	0x55555555
 801417c:	3fd55555 	.word	0x3fd55555
 8014180:	652b82fe 	.word	0x652b82fe
 8014184:	3ff71547 	.word	0x3ff71547
 8014188:	00000000 	.word	0x00000000
 801418c:	bff00000 	.word	0xbff00000
 8014190:	8800759c 	.word	0x8800759c
 8014194:	7e37e43c 	.word	0x7e37e43c
 8014198:	3ff00000 	.word	0x3ff00000
 801419c:	3fd00000 	.word	0x3fd00000
 80141a0:	3fe00000 	.word	0x3fe00000
 80141a4:	408fffff 	.word	0x408fffff
 80141a8:	4bd7      	ldr	r3, [pc, #860]	; (8014508 <__ieee754_pow+0x740>)
 80141aa:	ea03 0309 	and.w	r3, r3, r9
 80141ae:	2200      	movs	r2, #0
 80141b0:	b92b      	cbnz	r3, 80141be <__ieee754_pow+0x3f6>
 80141b2:	4bd6      	ldr	r3, [pc, #856]	; (801450c <__ieee754_pow+0x744>)
 80141b4:	f7ec fa30 	bl	8000618 <__aeabi_dmul>
 80141b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80141bc:	460c      	mov	r4, r1
 80141be:	1523      	asrs	r3, r4, #20
 80141c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80141c4:	4413      	add	r3, r2
 80141c6:	9309      	str	r3, [sp, #36]	; 0x24
 80141c8:	4bd1      	ldr	r3, [pc, #836]	; (8014510 <__ieee754_pow+0x748>)
 80141ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80141ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80141d2:	429c      	cmp	r4, r3
 80141d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80141d8:	dd08      	ble.n	80141ec <__ieee754_pow+0x424>
 80141da:	4bce      	ldr	r3, [pc, #824]	; (8014514 <__ieee754_pow+0x74c>)
 80141dc:	429c      	cmp	r4, r3
 80141de:	f340 8163 	ble.w	80144a8 <__ieee754_pow+0x6e0>
 80141e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141e4:	3301      	adds	r3, #1
 80141e6:	9309      	str	r3, [sp, #36]	; 0x24
 80141e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80141ec:	2400      	movs	r4, #0
 80141ee:	00e3      	lsls	r3, r4, #3
 80141f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80141f2:	4bc9      	ldr	r3, [pc, #804]	; (8014518 <__ieee754_pow+0x750>)
 80141f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80141f8:	ed93 7b00 	vldr	d7, [r3]
 80141fc:	4629      	mov	r1, r5
 80141fe:	ec53 2b17 	vmov	r2, r3, d7
 8014202:	eeb0 8a47 	vmov.f32	s16, s14
 8014206:	eef0 8a67 	vmov.f32	s17, s15
 801420a:	4682      	mov	sl, r0
 801420c:	f7ec f84c 	bl	80002a8 <__aeabi_dsub>
 8014210:	4652      	mov	r2, sl
 8014212:	4606      	mov	r6, r0
 8014214:	460f      	mov	r7, r1
 8014216:	462b      	mov	r3, r5
 8014218:	ec51 0b18 	vmov	r0, r1, d8
 801421c:	f7ec f846 	bl	80002ac <__adddf3>
 8014220:	4602      	mov	r2, r0
 8014222:	460b      	mov	r3, r1
 8014224:	2000      	movs	r0, #0
 8014226:	49bd      	ldr	r1, [pc, #756]	; (801451c <__ieee754_pow+0x754>)
 8014228:	f7ec fb20 	bl	800086c <__aeabi_ddiv>
 801422c:	ec41 0b19 	vmov	d9, r0, r1
 8014230:	4602      	mov	r2, r0
 8014232:	460b      	mov	r3, r1
 8014234:	4630      	mov	r0, r6
 8014236:	4639      	mov	r1, r7
 8014238:	f7ec f9ee 	bl	8000618 <__aeabi_dmul>
 801423c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014240:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014244:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014248:	2300      	movs	r3, #0
 801424a:	9304      	str	r3, [sp, #16]
 801424c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014250:	46ab      	mov	fp, r5
 8014252:	106d      	asrs	r5, r5, #1
 8014254:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014258:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801425c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8014260:	2200      	movs	r2, #0
 8014262:	4640      	mov	r0, r8
 8014264:	4649      	mov	r1, r9
 8014266:	4614      	mov	r4, r2
 8014268:	461d      	mov	r5, r3
 801426a:	f7ec f9d5 	bl	8000618 <__aeabi_dmul>
 801426e:	4602      	mov	r2, r0
 8014270:	460b      	mov	r3, r1
 8014272:	4630      	mov	r0, r6
 8014274:	4639      	mov	r1, r7
 8014276:	f7ec f817 	bl	80002a8 <__aeabi_dsub>
 801427a:	ec53 2b18 	vmov	r2, r3, d8
 801427e:	4606      	mov	r6, r0
 8014280:	460f      	mov	r7, r1
 8014282:	4620      	mov	r0, r4
 8014284:	4629      	mov	r1, r5
 8014286:	f7ec f80f 	bl	80002a8 <__aeabi_dsub>
 801428a:	4602      	mov	r2, r0
 801428c:	460b      	mov	r3, r1
 801428e:	4650      	mov	r0, sl
 8014290:	4659      	mov	r1, fp
 8014292:	f7ec f809 	bl	80002a8 <__aeabi_dsub>
 8014296:	4642      	mov	r2, r8
 8014298:	464b      	mov	r3, r9
 801429a:	f7ec f9bd 	bl	8000618 <__aeabi_dmul>
 801429e:	4602      	mov	r2, r0
 80142a0:	460b      	mov	r3, r1
 80142a2:	4630      	mov	r0, r6
 80142a4:	4639      	mov	r1, r7
 80142a6:	f7eb ffff 	bl	80002a8 <__aeabi_dsub>
 80142aa:	ec53 2b19 	vmov	r2, r3, d9
 80142ae:	f7ec f9b3 	bl	8000618 <__aeabi_dmul>
 80142b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80142b6:	ec41 0b18 	vmov	d8, r0, r1
 80142ba:	4610      	mov	r0, r2
 80142bc:	4619      	mov	r1, r3
 80142be:	f7ec f9ab 	bl	8000618 <__aeabi_dmul>
 80142c2:	a37d      	add	r3, pc, #500	; (adr r3, 80144b8 <__ieee754_pow+0x6f0>)
 80142c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c8:	4604      	mov	r4, r0
 80142ca:	460d      	mov	r5, r1
 80142cc:	f7ec f9a4 	bl	8000618 <__aeabi_dmul>
 80142d0:	a37b      	add	r3, pc, #492	; (adr r3, 80144c0 <__ieee754_pow+0x6f8>)
 80142d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142d6:	f7eb ffe9 	bl	80002ac <__adddf3>
 80142da:	4622      	mov	r2, r4
 80142dc:	462b      	mov	r3, r5
 80142de:	f7ec f99b 	bl	8000618 <__aeabi_dmul>
 80142e2:	a379      	add	r3, pc, #484	; (adr r3, 80144c8 <__ieee754_pow+0x700>)
 80142e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e8:	f7eb ffe0 	bl	80002ac <__adddf3>
 80142ec:	4622      	mov	r2, r4
 80142ee:	462b      	mov	r3, r5
 80142f0:	f7ec f992 	bl	8000618 <__aeabi_dmul>
 80142f4:	a376      	add	r3, pc, #472	; (adr r3, 80144d0 <__ieee754_pow+0x708>)
 80142f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142fa:	f7eb ffd7 	bl	80002ac <__adddf3>
 80142fe:	4622      	mov	r2, r4
 8014300:	462b      	mov	r3, r5
 8014302:	f7ec f989 	bl	8000618 <__aeabi_dmul>
 8014306:	a374      	add	r3, pc, #464	; (adr r3, 80144d8 <__ieee754_pow+0x710>)
 8014308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430c:	f7eb ffce 	bl	80002ac <__adddf3>
 8014310:	4622      	mov	r2, r4
 8014312:	462b      	mov	r3, r5
 8014314:	f7ec f980 	bl	8000618 <__aeabi_dmul>
 8014318:	a371      	add	r3, pc, #452	; (adr r3, 80144e0 <__ieee754_pow+0x718>)
 801431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431e:	f7eb ffc5 	bl	80002ac <__adddf3>
 8014322:	4622      	mov	r2, r4
 8014324:	4606      	mov	r6, r0
 8014326:	460f      	mov	r7, r1
 8014328:	462b      	mov	r3, r5
 801432a:	4620      	mov	r0, r4
 801432c:	4629      	mov	r1, r5
 801432e:	f7ec f973 	bl	8000618 <__aeabi_dmul>
 8014332:	4602      	mov	r2, r0
 8014334:	460b      	mov	r3, r1
 8014336:	4630      	mov	r0, r6
 8014338:	4639      	mov	r1, r7
 801433a:	f7ec f96d 	bl	8000618 <__aeabi_dmul>
 801433e:	4642      	mov	r2, r8
 8014340:	4604      	mov	r4, r0
 8014342:	460d      	mov	r5, r1
 8014344:	464b      	mov	r3, r9
 8014346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801434a:	f7eb ffaf 	bl	80002ac <__adddf3>
 801434e:	ec53 2b18 	vmov	r2, r3, d8
 8014352:	f7ec f961 	bl	8000618 <__aeabi_dmul>
 8014356:	4622      	mov	r2, r4
 8014358:	462b      	mov	r3, r5
 801435a:	f7eb ffa7 	bl	80002ac <__adddf3>
 801435e:	4642      	mov	r2, r8
 8014360:	4682      	mov	sl, r0
 8014362:	468b      	mov	fp, r1
 8014364:	464b      	mov	r3, r9
 8014366:	4640      	mov	r0, r8
 8014368:	4649      	mov	r1, r9
 801436a:	f7ec f955 	bl	8000618 <__aeabi_dmul>
 801436e:	4b6c      	ldr	r3, [pc, #432]	; (8014520 <__ieee754_pow+0x758>)
 8014370:	2200      	movs	r2, #0
 8014372:	4606      	mov	r6, r0
 8014374:	460f      	mov	r7, r1
 8014376:	f7eb ff99 	bl	80002ac <__adddf3>
 801437a:	4652      	mov	r2, sl
 801437c:	465b      	mov	r3, fp
 801437e:	f7eb ff95 	bl	80002ac <__adddf3>
 8014382:	9c04      	ldr	r4, [sp, #16]
 8014384:	460d      	mov	r5, r1
 8014386:	4622      	mov	r2, r4
 8014388:	460b      	mov	r3, r1
 801438a:	4640      	mov	r0, r8
 801438c:	4649      	mov	r1, r9
 801438e:	f7ec f943 	bl	8000618 <__aeabi_dmul>
 8014392:	4b63      	ldr	r3, [pc, #396]	; (8014520 <__ieee754_pow+0x758>)
 8014394:	4680      	mov	r8, r0
 8014396:	4689      	mov	r9, r1
 8014398:	2200      	movs	r2, #0
 801439a:	4620      	mov	r0, r4
 801439c:	4629      	mov	r1, r5
 801439e:	f7eb ff83 	bl	80002a8 <__aeabi_dsub>
 80143a2:	4632      	mov	r2, r6
 80143a4:	463b      	mov	r3, r7
 80143a6:	f7eb ff7f 	bl	80002a8 <__aeabi_dsub>
 80143aa:	4602      	mov	r2, r0
 80143ac:	460b      	mov	r3, r1
 80143ae:	4650      	mov	r0, sl
 80143b0:	4659      	mov	r1, fp
 80143b2:	f7eb ff79 	bl	80002a8 <__aeabi_dsub>
 80143b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80143ba:	f7ec f92d 	bl	8000618 <__aeabi_dmul>
 80143be:	4622      	mov	r2, r4
 80143c0:	4606      	mov	r6, r0
 80143c2:	460f      	mov	r7, r1
 80143c4:	462b      	mov	r3, r5
 80143c6:	ec51 0b18 	vmov	r0, r1, d8
 80143ca:	f7ec f925 	bl	8000618 <__aeabi_dmul>
 80143ce:	4602      	mov	r2, r0
 80143d0:	460b      	mov	r3, r1
 80143d2:	4630      	mov	r0, r6
 80143d4:	4639      	mov	r1, r7
 80143d6:	f7eb ff69 	bl	80002ac <__adddf3>
 80143da:	4606      	mov	r6, r0
 80143dc:	460f      	mov	r7, r1
 80143de:	4602      	mov	r2, r0
 80143e0:	460b      	mov	r3, r1
 80143e2:	4640      	mov	r0, r8
 80143e4:	4649      	mov	r1, r9
 80143e6:	f7eb ff61 	bl	80002ac <__adddf3>
 80143ea:	9c04      	ldr	r4, [sp, #16]
 80143ec:	a33e      	add	r3, pc, #248	; (adr r3, 80144e8 <__ieee754_pow+0x720>)
 80143ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143f2:	4620      	mov	r0, r4
 80143f4:	460d      	mov	r5, r1
 80143f6:	f7ec f90f 	bl	8000618 <__aeabi_dmul>
 80143fa:	4642      	mov	r2, r8
 80143fc:	ec41 0b18 	vmov	d8, r0, r1
 8014400:	464b      	mov	r3, r9
 8014402:	4620      	mov	r0, r4
 8014404:	4629      	mov	r1, r5
 8014406:	f7eb ff4f 	bl	80002a8 <__aeabi_dsub>
 801440a:	4602      	mov	r2, r0
 801440c:	460b      	mov	r3, r1
 801440e:	4630      	mov	r0, r6
 8014410:	4639      	mov	r1, r7
 8014412:	f7eb ff49 	bl	80002a8 <__aeabi_dsub>
 8014416:	a336      	add	r3, pc, #216	; (adr r3, 80144f0 <__ieee754_pow+0x728>)
 8014418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801441c:	f7ec f8fc 	bl	8000618 <__aeabi_dmul>
 8014420:	a335      	add	r3, pc, #212	; (adr r3, 80144f8 <__ieee754_pow+0x730>)
 8014422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014426:	4606      	mov	r6, r0
 8014428:	460f      	mov	r7, r1
 801442a:	4620      	mov	r0, r4
 801442c:	4629      	mov	r1, r5
 801442e:	f7ec f8f3 	bl	8000618 <__aeabi_dmul>
 8014432:	4602      	mov	r2, r0
 8014434:	460b      	mov	r3, r1
 8014436:	4630      	mov	r0, r6
 8014438:	4639      	mov	r1, r7
 801443a:	f7eb ff37 	bl	80002ac <__adddf3>
 801443e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014440:	4b38      	ldr	r3, [pc, #224]	; (8014524 <__ieee754_pow+0x75c>)
 8014442:	4413      	add	r3, r2
 8014444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014448:	f7eb ff30 	bl	80002ac <__adddf3>
 801444c:	4682      	mov	sl, r0
 801444e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014450:	468b      	mov	fp, r1
 8014452:	f7ec f877 	bl	8000544 <__aeabi_i2d>
 8014456:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014458:	4b33      	ldr	r3, [pc, #204]	; (8014528 <__ieee754_pow+0x760>)
 801445a:	4413      	add	r3, r2
 801445c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014460:	4606      	mov	r6, r0
 8014462:	460f      	mov	r7, r1
 8014464:	4652      	mov	r2, sl
 8014466:	465b      	mov	r3, fp
 8014468:	ec51 0b18 	vmov	r0, r1, d8
 801446c:	f7eb ff1e 	bl	80002ac <__adddf3>
 8014470:	4642      	mov	r2, r8
 8014472:	464b      	mov	r3, r9
 8014474:	f7eb ff1a 	bl	80002ac <__adddf3>
 8014478:	4632      	mov	r2, r6
 801447a:	463b      	mov	r3, r7
 801447c:	f7eb ff16 	bl	80002ac <__adddf3>
 8014480:	9c04      	ldr	r4, [sp, #16]
 8014482:	4632      	mov	r2, r6
 8014484:	463b      	mov	r3, r7
 8014486:	4620      	mov	r0, r4
 8014488:	460d      	mov	r5, r1
 801448a:	f7eb ff0d 	bl	80002a8 <__aeabi_dsub>
 801448e:	4642      	mov	r2, r8
 8014490:	464b      	mov	r3, r9
 8014492:	f7eb ff09 	bl	80002a8 <__aeabi_dsub>
 8014496:	ec53 2b18 	vmov	r2, r3, d8
 801449a:	f7eb ff05 	bl	80002a8 <__aeabi_dsub>
 801449e:	4602      	mov	r2, r0
 80144a0:	460b      	mov	r3, r1
 80144a2:	4650      	mov	r0, sl
 80144a4:	4659      	mov	r1, fp
 80144a6:	e606      	b.n	80140b6 <__ieee754_pow+0x2ee>
 80144a8:	2401      	movs	r4, #1
 80144aa:	e6a0      	b.n	80141ee <__ieee754_pow+0x426>
 80144ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014500 <__ieee754_pow+0x738>
 80144b0:	e60d      	b.n	80140ce <__ieee754_pow+0x306>
 80144b2:	bf00      	nop
 80144b4:	f3af 8000 	nop.w
 80144b8:	4a454eef 	.word	0x4a454eef
 80144bc:	3fca7e28 	.word	0x3fca7e28
 80144c0:	93c9db65 	.word	0x93c9db65
 80144c4:	3fcd864a 	.word	0x3fcd864a
 80144c8:	a91d4101 	.word	0xa91d4101
 80144cc:	3fd17460 	.word	0x3fd17460
 80144d0:	518f264d 	.word	0x518f264d
 80144d4:	3fd55555 	.word	0x3fd55555
 80144d8:	db6fabff 	.word	0xdb6fabff
 80144dc:	3fdb6db6 	.word	0x3fdb6db6
 80144e0:	33333303 	.word	0x33333303
 80144e4:	3fe33333 	.word	0x3fe33333
 80144e8:	e0000000 	.word	0xe0000000
 80144ec:	3feec709 	.word	0x3feec709
 80144f0:	dc3a03fd 	.word	0xdc3a03fd
 80144f4:	3feec709 	.word	0x3feec709
 80144f8:	145b01f5 	.word	0x145b01f5
 80144fc:	be3e2fe0 	.word	0xbe3e2fe0
 8014500:	00000000 	.word	0x00000000
 8014504:	3ff00000 	.word	0x3ff00000
 8014508:	7ff00000 	.word	0x7ff00000
 801450c:	43400000 	.word	0x43400000
 8014510:	0003988e 	.word	0x0003988e
 8014514:	000bb679 	.word	0x000bb679
 8014518:	08015cc0 	.word	0x08015cc0
 801451c:	3ff00000 	.word	0x3ff00000
 8014520:	40080000 	.word	0x40080000
 8014524:	08015ce0 	.word	0x08015ce0
 8014528:	08015cd0 	.word	0x08015cd0
 801452c:	a3b5      	add	r3, pc, #724	; (adr r3, 8014804 <__ieee754_pow+0xa3c>)
 801452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014532:	4640      	mov	r0, r8
 8014534:	4649      	mov	r1, r9
 8014536:	f7eb feb9 	bl	80002ac <__adddf3>
 801453a:	4622      	mov	r2, r4
 801453c:	ec41 0b1a 	vmov	d10, r0, r1
 8014540:	462b      	mov	r3, r5
 8014542:	4630      	mov	r0, r6
 8014544:	4639      	mov	r1, r7
 8014546:	f7eb feaf 	bl	80002a8 <__aeabi_dsub>
 801454a:	4602      	mov	r2, r0
 801454c:	460b      	mov	r3, r1
 801454e:	ec51 0b1a 	vmov	r0, r1, d10
 8014552:	f7ec faf1 	bl	8000b38 <__aeabi_dcmpgt>
 8014556:	2800      	cmp	r0, #0
 8014558:	f47f adf8 	bne.w	801414c <__ieee754_pow+0x384>
 801455c:	4aa4      	ldr	r2, [pc, #656]	; (80147f0 <__ieee754_pow+0xa28>)
 801455e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014562:	4293      	cmp	r3, r2
 8014564:	f340 810b 	ble.w	801477e <__ieee754_pow+0x9b6>
 8014568:	151b      	asrs	r3, r3, #20
 801456a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801456e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014572:	fa4a f303 	asr.w	r3, sl, r3
 8014576:	445b      	add	r3, fp
 8014578:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801457c:	4e9d      	ldr	r6, [pc, #628]	; (80147f4 <__ieee754_pow+0xa2c>)
 801457e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014582:	4116      	asrs	r6, r2
 8014584:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014588:	2000      	movs	r0, #0
 801458a:	ea23 0106 	bic.w	r1, r3, r6
 801458e:	f1c2 0214 	rsb	r2, r2, #20
 8014592:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014596:	fa4a fa02 	asr.w	sl, sl, r2
 801459a:	f1bb 0f00 	cmp.w	fp, #0
 801459e:	4602      	mov	r2, r0
 80145a0:	460b      	mov	r3, r1
 80145a2:	4620      	mov	r0, r4
 80145a4:	4629      	mov	r1, r5
 80145a6:	bfb8      	it	lt
 80145a8:	f1ca 0a00 	rsblt	sl, sl, #0
 80145ac:	f7eb fe7c 	bl	80002a8 <__aeabi_dsub>
 80145b0:	ec41 0b19 	vmov	d9, r0, r1
 80145b4:	4642      	mov	r2, r8
 80145b6:	464b      	mov	r3, r9
 80145b8:	ec51 0b19 	vmov	r0, r1, d9
 80145bc:	f7eb fe76 	bl	80002ac <__adddf3>
 80145c0:	2400      	movs	r4, #0
 80145c2:	a379      	add	r3, pc, #484	; (adr r3, 80147a8 <__ieee754_pow+0x9e0>)
 80145c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c8:	4620      	mov	r0, r4
 80145ca:	460d      	mov	r5, r1
 80145cc:	f7ec f824 	bl	8000618 <__aeabi_dmul>
 80145d0:	ec53 2b19 	vmov	r2, r3, d9
 80145d4:	4606      	mov	r6, r0
 80145d6:	460f      	mov	r7, r1
 80145d8:	4620      	mov	r0, r4
 80145da:	4629      	mov	r1, r5
 80145dc:	f7eb fe64 	bl	80002a8 <__aeabi_dsub>
 80145e0:	4602      	mov	r2, r0
 80145e2:	460b      	mov	r3, r1
 80145e4:	4640      	mov	r0, r8
 80145e6:	4649      	mov	r1, r9
 80145e8:	f7eb fe5e 	bl	80002a8 <__aeabi_dsub>
 80145ec:	a370      	add	r3, pc, #448	; (adr r3, 80147b0 <__ieee754_pow+0x9e8>)
 80145ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f2:	f7ec f811 	bl	8000618 <__aeabi_dmul>
 80145f6:	a370      	add	r3, pc, #448	; (adr r3, 80147b8 <__ieee754_pow+0x9f0>)
 80145f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145fc:	4680      	mov	r8, r0
 80145fe:	4689      	mov	r9, r1
 8014600:	4620      	mov	r0, r4
 8014602:	4629      	mov	r1, r5
 8014604:	f7ec f808 	bl	8000618 <__aeabi_dmul>
 8014608:	4602      	mov	r2, r0
 801460a:	460b      	mov	r3, r1
 801460c:	4640      	mov	r0, r8
 801460e:	4649      	mov	r1, r9
 8014610:	f7eb fe4c 	bl	80002ac <__adddf3>
 8014614:	4604      	mov	r4, r0
 8014616:	460d      	mov	r5, r1
 8014618:	4602      	mov	r2, r0
 801461a:	460b      	mov	r3, r1
 801461c:	4630      	mov	r0, r6
 801461e:	4639      	mov	r1, r7
 8014620:	f7eb fe44 	bl	80002ac <__adddf3>
 8014624:	4632      	mov	r2, r6
 8014626:	463b      	mov	r3, r7
 8014628:	4680      	mov	r8, r0
 801462a:	4689      	mov	r9, r1
 801462c:	f7eb fe3c 	bl	80002a8 <__aeabi_dsub>
 8014630:	4602      	mov	r2, r0
 8014632:	460b      	mov	r3, r1
 8014634:	4620      	mov	r0, r4
 8014636:	4629      	mov	r1, r5
 8014638:	f7eb fe36 	bl	80002a8 <__aeabi_dsub>
 801463c:	4642      	mov	r2, r8
 801463e:	4606      	mov	r6, r0
 8014640:	460f      	mov	r7, r1
 8014642:	464b      	mov	r3, r9
 8014644:	4640      	mov	r0, r8
 8014646:	4649      	mov	r1, r9
 8014648:	f7eb ffe6 	bl	8000618 <__aeabi_dmul>
 801464c:	a35c      	add	r3, pc, #368	; (adr r3, 80147c0 <__ieee754_pow+0x9f8>)
 801464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014652:	4604      	mov	r4, r0
 8014654:	460d      	mov	r5, r1
 8014656:	f7eb ffdf 	bl	8000618 <__aeabi_dmul>
 801465a:	a35b      	add	r3, pc, #364	; (adr r3, 80147c8 <__ieee754_pow+0xa00>)
 801465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014660:	f7eb fe22 	bl	80002a8 <__aeabi_dsub>
 8014664:	4622      	mov	r2, r4
 8014666:	462b      	mov	r3, r5
 8014668:	f7eb ffd6 	bl	8000618 <__aeabi_dmul>
 801466c:	a358      	add	r3, pc, #352	; (adr r3, 80147d0 <__ieee754_pow+0xa08>)
 801466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014672:	f7eb fe1b 	bl	80002ac <__adddf3>
 8014676:	4622      	mov	r2, r4
 8014678:	462b      	mov	r3, r5
 801467a:	f7eb ffcd 	bl	8000618 <__aeabi_dmul>
 801467e:	a356      	add	r3, pc, #344	; (adr r3, 80147d8 <__ieee754_pow+0xa10>)
 8014680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014684:	f7eb fe10 	bl	80002a8 <__aeabi_dsub>
 8014688:	4622      	mov	r2, r4
 801468a:	462b      	mov	r3, r5
 801468c:	f7eb ffc4 	bl	8000618 <__aeabi_dmul>
 8014690:	a353      	add	r3, pc, #332	; (adr r3, 80147e0 <__ieee754_pow+0xa18>)
 8014692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014696:	f7eb fe09 	bl	80002ac <__adddf3>
 801469a:	4622      	mov	r2, r4
 801469c:	462b      	mov	r3, r5
 801469e:	f7eb ffbb 	bl	8000618 <__aeabi_dmul>
 80146a2:	4602      	mov	r2, r0
 80146a4:	460b      	mov	r3, r1
 80146a6:	4640      	mov	r0, r8
 80146a8:	4649      	mov	r1, r9
 80146aa:	f7eb fdfd 	bl	80002a8 <__aeabi_dsub>
 80146ae:	4604      	mov	r4, r0
 80146b0:	460d      	mov	r5, r1
 80146b2:	4602      	mov	r2, r0
 80146b4:	460b      	mov	r3, r1
 80146b6:	4640      	mov	r0, r8
 80146b8:	4649      	mov	r1, r9
 80146ba:	f7eb ffad 	bl	8000618 <__aeabi_dmul>
 80146be:	2200      	movs	r2, #0
 80146c0:	ec41 0b19 	vmov	d9, r0, r1
 80146c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80146c8:	4620      	mov	r0, r4
 80146ca:	4629      	mov	r1, r5
 80146cc:	f7eb fdec 	bl	80002a8 <__aeabi_dsub>
 80146d0:	4602      	mov	r2, r0
 80146d2:	460b      	mov	r3, r1
 80146d4:	ec51 0b19 	vmov	r0, r1, d9
 80146d8:	f7ec f8c8 	bl	800086c <__aeabi_ddiv>
 80146dc:	4632      	mov	r2, r6
 80146de:	4604      	mov	r4, r0
 80146e0:	460d      	mov	r5, r1
 80146e2:	463b      	mov	r3, r7
 80146e4:	4640      	mov	r0, r8
 80146e6:	4649      	mov	r1, r9
 80146e8:	f7eb ff96 	bl	8000618 <__aeabi_dmul>
 80146ec:	4632      	mov	r2, r6
 80146ee:	463b      	mov	r3, r7
 80146f0:	f7eb fddc 	bl	80002ac <__adddf3>
 80146f4:	4602      	mov	r2, r0
 80146f6:	460b      	mov	r3, r1
 80146f8:	4620      	mov	r0, r4
 80146fa:	4629      	mov	r1, r5
 80146fc:	f7eb fdd4 	bl	80002a8 <__aeabi_dsub>
 8014700:	4642      	mov	r2, r8
 8014702:	464b      	mov	r3, r9
 8014704:	f7eb fdd0 	bl	80002a8 <__aeabi_dsub>
 8014708:	460b      	mov	r3, r1
 801470a:	4602      	mov	r2, r0
 801470c:	493a      	ldr	r1, [pc, #232]	; (80147f8 <__ieee754_pow+0xa30>)
 801470e:	2000      	movs	r0, #0
 8014710:	f7eb fdca 	bl	80002a8 <__aeabi_dsub>
 8014714:	e9cd 0100 	strd	r0, r1, [sp]
 8014718:	9b01      	ldr	r3, [sp, #4]
 801471a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801471e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014722:	da2f      	bge.n	8014784 <__ieee754_pow+0x9bc>
 8014724:	4650      	mov	r0, sl
 8014726:	ed9d 0b00 	vldr	d0, [sp]
 801472a:	f000 f9c1 	bl	8014ab0 <scalbn>
 801472e:	ec51 0b10 	vmov	r0, r1, d0
 8014732:	ec53 2b18 	vmov	r2, r3, d8
 8014736:	f7ff bbe0 	b.w	8013efa <__ieee754_pow+0x132>
 801473a:	4b30      	ldr	r3, [pc, #192]	; (80147fc <__ieee754_pow+0xa34>)
 801473c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014740:	429e      	cmp	r6, r3
 8014742:	f77f af0b 	ble.w	801455c <__ieee754_pow+0x794>
 8014746:	4b2e      	ldr	r3, [pc, #184]	; (8014800 <__ieee754_pow+0xa38>)
 8014748:	440b      	add	r3, r1
 801474a:	4303      	orrs	r3, r0
 801474c:	d00b      	beq.n	8014766 <__ieee754_pow+0x99e>
 801474e:	a326      	add	r3, pc, #152	; (adr r3, 80147e8 <__ieee754_pow+0xa20>)
 8014750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014754:	ec51 0b18 	vmov	r0, r1, d8
 8014758:	f7eb ff5e 	bl	8000618 <__aeabi_dmul>
 801475c:	a322      	add	r3, pc, #136	; (adr r3, 80147e8 <__ieee754_pow+0xa20>)
 801475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014762:	f7ff bbca 	b.w	8013efa <__ieee754_pow+0x132>
 8014766:	4622      	mov	r2, r4
 8014768:	462b      	mov	r3, r5
 801476a:	f7eb fd9d 	bl	80002a8 <__aeabi_dsub>
 801476e:	4642      	mov	r2, r8
 8014770:	464b      	mov	r3, r9
 8014772:	f7ec f9d7 	bl	8000b24 <__aeabi_dcmpge>
 8014776:	2800      	cmp	r0, #0
 8014778:	f43f aef0 	beq.w	801455c <__ieee754_pow+0x794>
 801477c:	e7e7      	b.n	801474e <__ieee754_pow+0x986>
 801477e:	f04f 0a00 	mov.w	sl, #0
 8014782:	e717      	b.n	80145b4 <__ieee754_pow+0x7ec>
 8014784:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014788:	4619      	mov	r1, r3
 801478a:	e7d2      	b.n	8014732 <__ieee754_pow+0x96a>
 801478c:	491a      	ldr	r1, [pc, #104]	; (80147f8 <__ieee754_pow+0xa30>)
 801478e:	2000      	movs	r0, #0
 8014790:	f7ff bb9e 	b.w	8013ed0 <__ieee754_pow+0x108>
 8014794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014798:	f7ff bb9a 	b.w	8013ed0 <__ieee754_pow+0x108>
 801479c:	9000      	str	r0, [sp, #0]
 801479e:	f7ff bb76 	b.w	8013e8e <__ieee754_pow+0xc6>
 80147a2:	2100      	movs	r1, #0
 80147a4:	f7ff bb60 	b.w	8013e68 <__ieee754_pow+0xa0>
 80147a8:	00000000 	.word	0x00000000
 80147ac:	3fe62e43 	.word	0x3fe62e43
 80147b0:	fefa39ef 	.word	0xfefa39ef
 80147b4:	3fe62e42 	.word	0x3fe62e42
 80147b8:	0ca86c39 	.word	0x0ca86c39
 80147bc:	be205c61 	.word	0xbe205c61
 80147c0:	72bea4d0 	.word	0x72bea4d0
 80147c4:	3e663769 	.word	0x3e663769
 80147c8:	c5d26bf1 	.word	0xc5d26bf1
 80147cc:	3ebbbd41 	.word	0x3ebbbd41
 80147d0:	af25de2c 	.word	0xaf25de2c
 80147d4:	3f11566a 	.word	0x3f11566a
 80147d8:	16bebd93 	.word	0x16bebd93
 80147dc:	3f66c16c 	.word	0x3f66c16c
 80147e0:	5555553e 	.word	0x5555553e
 80147e4:	3fc55555 	.word	0x3fc55555
 80147e8:	c2f8f359 	.word	0xc2f8f359
 80147ec:	01a56e1f 	.word	0x01a56e1f
 80147f0:	3fe00000 	.word	0x3fe00000
 80147f4:	000fffff 	.word	0x000fffff
 80147f8:	3ff00000 	.word	0x3ff00000
 80147fc:	4090cbff 	.word	0x4090cbff
 8014800:	3f6f3400 	.word	0x3f6f3400
 8014804:	652b82fe 	.word	0x652b82fe
 8014808:	3c971547 	.word	0x3c971547

0801480c <__ieee754_sqrt>:
 801480c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014810:	ec55 4b10 	vmov	r4, r5, d0
 8014814:	4e56      	ldr	r6, [pc, #344]	; (8014970 <__ieee754_sqrt+0x164>)
 8014816:	43ae      	bics	r6, r5
 8014818:	ee10 0a10 	vmov	r0, s0
 801481c:	ee10 3a10 	vmov	r3, s0
 8014820:	4629      	mov	r1, r5
 8014822:	462a      	mov	r2, r5
 8014824:	d110      	bne.n	8014848 <__ieee754_sqrt+0x3c>
 8014826:	ee10 2a10 	vmov	r2, s0
 801482a:	462b      	mov	r3, r5
 801482c:	f7eb fef4 	bl	8000618 <__aeabi_dmul>
 8014830:	4602      	mov	r2, r0
 8014832:	460b      	mov	r3, r1
 8014834:	4620      	mov	r0, r4
 8014836:	4629      	mov	r1, r5
 8014838:	f7eb fd38 	bl	80002ac <__adddf3>
 801483c:	4604      	mov	r4, r0
 801483e:	460d      	mov	r5, r1
 8014840:	ec45 4b10 	vmov	d0, r4, r5
 8014844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014848:	2d00      	cmp	r5, #0
 801484a:	dc10      	bgt.n	801486e <__ieee754_sqrt+0x62>
 801484c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014850:	4330      	orrs	r0, r6
 8014852:	d0f5      	beq.n	8014840 <__ieee754_sqrt+0x34>
 8014854:	b15d      	cbz	r5, 801486e <__ieee754_sqrt+0x62>
 8014856:	ee10 2a10 	vmov	r2, s0
 801485a:	462b      	mov	r3, r5
 801485c:	ee10 0a10 	vmov	r0, s0
 8014860:	f7eb fd22 	bl	80002a8 <__aeabi_dsub>
 8014864:	4602      	mov	r2, r0
 8014866:	460b      	mov	r3, r1
 8014868:	f7ec f800 	bl	800086c <__aeabi_ddiv>
 801486c:	e7e6      	b.n	801483c <__ieee754_sqrt+0x30>
 801486e:	1509      	asrs	r1, r1, #20
 8014870:	d076      	beq.n	8014960 <__ieee754_sqrt+0x154>
 8014872:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014876:	07ce      	lsls	r6, r1, #31
 8014878:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801487c:	bf5e      	ittt	pl
 801487e:	0fda      	lsrpl	r2, r3, #31
 8014880:	005b      	lslpl	r3, r3, #1
 8014882:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8014886:	0fda      	lsrs	r2, r3, #31
 8014888:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801488c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8014890:	2000      	movs	r0, #0
 8014892:	106d      	asrs	r5, r5, #1
 8014894:	005b      	lsls	r3, r3, #1
 8014896:	f04f 0e16 	mov.w	lr, #22
 801489a:	4684      	mov	ip, r0
 801489c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80148a0:	eb0c 0401 	add.w	r4, ip, r1
 80148a4:	4294      	cmp	r4, r2
 80148a6:	bfde      	ittt	le
 80148a8:	1b12      	suble	r2, r2, r4
 80148aa:	eb04 0c01 	addle.w	ip, r4, r1
 80148ae:	1840      	addle	r0, r0, r1
 80148b0:	0052      	lsls	r2, r2, #1
 80148b2:	f1be 0e01 	subs.w	lr, lr, #1
 80148b6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80148ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80148be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80148c2:	d1ed      	bne.n	80148a0 <__ieee754_sqrt+0x94>
 80148c4:	4671      	mov	r1, lr
 80148c6:	2720      	movs	r7, #32
 80148c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80148cc:	4562      	cmp	r2, ip
 80148ce:	eb04 060e 	add.w	r6, r4, lr
 80148d2:	dc02      	bgt.n	80148da <__ieee754_sqrt+0xce>
 80148d4:	d113      	bne.n	80148fe <__ieee754_sqrt+0xf2>
 80148d6:	429e      	cmp	r6, r3
 80148d8:	d811      	bhi.n	80148fe <__ieee754_sqrt+0xf2>
 80148da:	2e00      	cmp	r6, #0
 80148dc:	eb06 0e04 	add.w	lr, r6, r4
 80148e0:	da43      	bge.n	801496a <__ieee754_sqrt+0x15e>
 80148e2:	f1be 0f00 	cmp.w	lr, #0
 80148e6:	db40      	blt.n	801496a <__ieee754_sqrt+0x15e>
 80148e8:	f10c 0801 	add.w	r8, ip, #1
 80148ec:	eba2 020c 	sub.w	r2, r2, ip
 80148f0:	429e      	cmp	r6, r3
 80148f2:	bf88      	it	hi
 80148f4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80148f8:	1b9b      	subs	r3, r3, r6
 80148fa:	4421      	add	r1, r4
 80148fc:	46c4      	mov	ip, r8
 80148fe:	0052      	lsls	r2, r2, #1
 8014900:	3f01      	subs	r7, #1
 8014902:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014906:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801490a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801490e:	d1dd      	bne.n	80148cc <__ieee754_sqrt+0xc0>
 8014910:	4313      	orrs	r3, r2
 8014912:	d006      	beq.n	8014922 <__ieee754_sqrt+0x116>
 8014914:	1c4c      	adds	r4, r1, #1
 8014916:	bf13      	iteet	ne
 8014918:	3101      	addne	r1, #1
 801491a:	3001      	addeq	r0, #1
 801491c:	4639      	moveq	r1, r7
 801491e:	f021 0101 	bicne.w	r1, r1, #1
 8014922:	1043      	asrs	r3, r0, #1
 8014924:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014928:	0849      	lsrs	r1, r1, #1
 801492a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801492e:	07c2      	lsls	r2, r0, #31
 8014930:	bf48      	it	mi
 8014932:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8014936:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801493a:	460c      	mov	r4, r1
 801493c:	463d      	mov	r5, r7
 801493e:	e77f      	b.n	8014840 <__ieee754_sqrt+0x34>
 8014940:	0ada      	lsrs	r2, r3, #11
 8014942:	3815      	subs	r0, #21
 8014944:	055b      	lsls	r3, r3, #21
 8014946:	2a00      	cmp	r2, #0
 8014948:	d0fa      	beq.n	8014940 <__ieee754_sqrt+0x134>
 801494a:	02d7      	lsls	r7, r2, #11
 801494c:	d50a      	bpl.n	8014964 <__ieee754_sqrt+0x158>
 801494e:	f1c1 0420 	rsb	r4, r1, #32
 8014952:	fa23 f404 	lsr.w	r4, r3, r4
 8014956:	1e4d      	subs	r5, r1, #1
 8014958:	408b      	lsls	r3, r1
 801495a:	4322      	orrs	r2, r4
 801495c:	1b41      	subs	r1, r0, r5
 801495e:	e788      	b.n	8014872 <__ieee754_sqrt+0x66>
 8014960:	4608      	mov	r0, r1
 8014962:	e7f0      	b.n	8014946 <__ieee754_sqrt+0x13a>
 8014964:	0052      	lsls	r2, r2, #1
 8014966:	3101      	adds	r1, #1
 8014968:	e7ef      	b.n	801494a <__ieee754_sqrt+0x13e>
 801496a:	46e0      	mov	r8, ip
 801496c:	e7be      	b.n	80148ec <__ieee754_sqrt+0xe0>
 801496e:	bf00      	nop
 8014970:	7ff00000 	.word	0x7ff00000

08014974 <fabs>:
 8014974:	ec51 0b10 	vmov	r0, r1, d0
 8014978:	ee10 2a10 	vmov	r2, s0
 801497c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014980:	ec43 2b10 	vmov	d0, r2, r3
 8014984:	4770      	bx	lr

08014986 <finite>:
 8014986:	b082      	sub	sp, #8
 8014988:	ed8d 0b00 	vstr	d0, [sp]
 801498c:	9801      	ldr	r0, [sp, #4]
 801498e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014992:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014996:	0fc0      	lsrs	r0, r0, #31
 8014998:	b002      	add	sp, #8
 801499a:	4770      	bx	lr

0801499c <rint>:
 801499c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801499e:	ec51 0b10 	vmov	r0, r1, d0
 80149a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80149a6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80149aa:	2e13      	cmp	r6, #19
 80149ac:	ee10 4a10 	vmov	r4, s0
 80149b0:	460b      	mov	r3, r1
 80149b2:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80149b6:	dc58      	bgt.n	8014a6a <rint+0xce>
 80149b8:	2e00      	cmp	r6, #0
 80149ba:	da2b      	bge.n	8014a14 <rint+0x78>
 80149bc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80149c0:	4302      	orrs	r2, r0
 80149c2:	d023      	beq.n	8014a0c <rint+0x70>
 80149c4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80149c8:	4302      	orrs	r2, r0
 80149ca:	4254      	negs	r4, r2
 80149cc:	4314      	orrs	r4, r2
 80149ce:	0c4b      	lsrs	r3, r1, #17
 80149d0:	0b24      	lsrs	r4, r4, #12
 80149d2:	045b      	lsls	r3, r3, #17
 80149d4:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80149d8:	ea44 0103 	orr.w	r1, r4, r3
 80149dc:	4b32      	ldr	r3, [pc, #200]	; (8014aa8 <rint+0x10c>)
 80149de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80149e2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80149e6:	4602      	mov	r2, r0
 80149e8:	460b      	mov	r3, r1
 80149ea:	4630      	mov	r0, r6
 80149ec:	4639      	mov	r1, r7
 80149ee:	f7eb fc5d 	bl	80002ac <__adddf3>
 80149f2:	e9cd 0100 	strd	r0, r1, [sp]
 80149f6:	463b      	mov	r3, r7
 80149f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80149fc:	4632      	mov	r2, r6
 80149fe:	f7eb fc53 	bl	80002a8 <__aeabi_dsub>
 8014a02:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014a06:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8014a0a:	4639      	mov	r1, r7
 8014a0c:	ec41 0b10 	vmov	d0, r0, r1
 8014a10:	b003      	add	sp, #12
 8014a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a14:	4a25      	ldr	r2, [pc, #148]	; (8014aac <rint+0x110>)
 8014a16:	4132      	asrs	r2, r6
 8014a18:	ea01 0702 	and.w	r7, r1, r2
 8014a1c:	4307      	orrs	r7, r0
 8014a1e:	d0f5      	beq.n	8014a0c <rint+0x70>
 8014a20:	0851      	lsrs	r1, r2, #1
 8014a22:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8014a26:	4314      	orrs	r4, r2
 8014a28:	d00c      	beq.n	8014a44 <rint+0xa8>
 8014a2a:	ea23 0201 	bic.w	r2, r3, r1
 8014a2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014a32:	2e13      	cmp	r6, #19
 8014a34:	fa43 f606 	asr.w	r6, r3, r6
 8014a38:	bf0c      	ite	eq
 8014a3a:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014a3e:	2400      	movne	r4, #0
 8014a40:	ea42 0306 	orr.w	r3, r2, r6
 8014a44:	4918      	ldr	r1, [pc, #96]	; (8014aa8 <rint+0x10c>)
 8014a46:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8014a4a:	4622      	mov	r2, r4
 8014a4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014a50:	4620      	mov	r0, r4
 8014a52:	4629      	mov	r1, r5
 8014a54:	f7eb fc2a 	bl	80002ac <__adddf3>
 8014a58:	e9cd 0100 	strd	r0, r1, [sp]
 8014a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a60:	4622      	mov	r2, r4
 8014a62:	462b      	mov	r3, r5
 8014a64:	f7eb fc20 	bl	80002a8 <__aeabi_dsub>
 8014a68:	e7d0      	b.n	8014a0c <rint+0x70>
 8014a6a:	2e33      	cmp	r6, #51	; 0x33
 8014a6c:	dd07      	ble.n	8014a7e <rint+0xe2>
 8014a6e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014a72:	d1cb      	bne.n	8014a0c <rint+0x70>
 8014a74:	ee10 2a10 	vmov	r2, s0
 8014a78:	f7eb fc18 	bl	80002ac <__adddf3>
 8014a7c:	e7c6      	b.n	8014a0c <rint+0x70>
 8014a7e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8014a82:	f04f 36ff 	mov.w	r6, #4294967295
 8014a86:	40d6      	lsrs	r6, r2
 8014a88:	4230      	tst	r0, r6
 8014a8a:	d0bf      	beq.n	8014a0c <rint+0x70>
 8014a8c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8014a90:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8014a94:	bf1f      	itttt	ne
 8014a96:	ea24 0101 	bicne.w	r1, r4, r1
 8014a9a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8014a9e:	fa44 f202 	asrne.w	r2, r4, r2
 8014aa2:	ea41 0402 	orrne.w	r4, r1, r2
 8014aa6:	e7cd      	b.n	8014a44 <rint+0xa8>
 8014aa8:	08015cf0 	.word	0x08015cf0
 8014aac:	000fffff 	.word	0x000fffff

08014ab0 <scalbn>:
 8014ab0:	b570      	push	{r4, r5, r6, lr}
 8014ab2:	ec55 4b10 	vmov	r4, r5, d0
 8014ab6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014aba:	4606      	mov	r6, r0
 8014abc:	462b      	mov	r3, r5
 8014abe:	b99a      	cbnz	r2, 8014ae8 <scalbn+0x38>
 8014ac0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014ac4:	4323      	orrs	r3, r4
 8014ac6:	d036      	beq.n	8014b36 <scalbn+0x86>
 8014ac8:	4b39      	ldr	r3, [pc, #228]	; (8014bb0 <scalbn+0x100>)
 8014aca:	4629      	mov	r1, r5
 8014acc:	ee10 0a10 	vmov	r0, s0
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	f7eb fda1 	bl	8000618 <__aeabi_dmul>
 8014ad6:	4b37      	ldr	r3, [pc, #220]	; (8014bb4 <scalbn+0x104>)
 8014ad8:	429e      	cmp	r6, r3
 8014ada:	4604      	mov	r4, r0
 8014adc:	460d      	mov	r5, r1
 8014ade:	da10      	bge.n	8014b02 <scalbn+0x52>
 8014ae0:	a32b      	add	r3, pc, #172	; (adr r3, 8014b90 <scalbn+0xe0>)
 8014ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae6:	e03a      	b.n	8014b5e <scalbn+0xae>
 8014ae8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014aec:	428a      	cmp	r2, r1
 8014aee:	d10c      	bne.n	8014b0a <scalbn+0x5a>
 8014af0:	ee10 2a10 	vmov	r2, s0
 8014af4:	4620      	mov	r0, r4
 8014af6:	4629      	mov	r1, r5
 8014af8:	f7eb fbd8 	bl	80002ac <__adddf3>
 8014afc:	4604      	mov	r4, r0
 8014afe:	460d      	mov	r5, r1
 8014b00:	e019      	b.n	8014b36 <scalbn+0x86>
 8014b02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014b06:	460b      	mov	r3, r1
 8014b08:	3a36      	subs	r2, #54	; 0x36
 8014b0a:	4432      	add	r2, r6
 8014b0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014b10:	428a      	cmp	r2, r1
 8014b12:	dd08      	ble.n	8014b26 <scalbn+0x76>
 8014b14:	2d00      	cmp	r5, #0
 8014b16:	a120      	add	r1, pc, #128	; (adr r1, 8014b98 <scalbn+0xe8>)
 8014b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b1c:	da1c      	bge.n	8014b58 <scalbn+0xa8>
 8014b1e:	a120      	add	r1, pc, #128	; (adr r1, 8014ba0 <scalbn+0xf0>)
 8014b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b24:	e018      	b.n	8014b58 <scalbn+0xa8>
 8014b26:	2a00      	cmp	r2, #0
 8014b28:	dd08      	ble.n	8014b3c <scalbn+0x8c>
 8014b2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014b2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014b32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014b36:	ec45 4b10 	vmov	d0, r4, r5
 8014b3a:	bd70      	pop	{r4, r5, r6, pc}
 8014b3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014b40:	da19      	bge.n	8014b76 <scalbn+0xc6>
 8014b42:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014b46:	429e      	cmp	r6, r3
 8014b48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8014b4c:	dd0a      	ble.n	8014b64 <scalbn+0xb4>
 8014b4e:	a112      	add	r1, pc, #72	; (adr r1, 8014b98 <scalbn+0xe8>)
 8014b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d1e2      	bne.n	8014b1e <scalbn+0x6e>
 8014b58:	a30f      	add	r3, pc, #60	; (adr r3, 8014b98 <scalbn+0xe8>)
 8014b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b5e:	f7eb fd5b 	bl	8000618 <__aeabi_dmul>
 8014b62:	e7cb      	b.n	8014afc <scalbn+0x4c>
 8014b64:	a10a      	add	r1, pc, #40	; (adr r1, 8014b90 <scalbn+0xe0>)
 8014b66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d0b8      	beq.n	8014ae0 <scalbn+0x30>
 8014b6e:	a10e      	add	r1, pc, #56	; (adr r1, 8014ba8 <scalbn+0xf8>)
 8014b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b74:	e7b4      	b.n	8014ae0 <scalbn+0x30>
 8014b76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014b7a:	3236      	adds	r2, #54	; 0x36
 8014b7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014b80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014b84:	4620      	mov	r0, r4
 8014b86:	4b0c      	ldr	r3, [pc, #48]	; (8014bb8 <scalbn+0x108>)
 8014b88:	2200      	movs	r2, #0
 8014b8a:	e7e8      	b.n	8014b5e <scalbn+0xae>
 8014b8c:	f3af 8000 	nop.w
 8014b90:	c2f8f359 	.word	0xc2f8f359
 8014b94:	01a56e1f 	.word	0x01a56e1f
 8014b98:	8800759c 	.word	0x8800759c
 8014b9c:	7e37e43c 	.word	0x7e37e43c
 8014ba0:	8800759c 	.word	0x8800759c
 8014ba4:	fe37e43c 	.word	0xfe37e43c
 8014ba8:	c2f8f359 	.word	0xc2f8f359
 8014bac:	81a56e1f 	.word	0x81a56e1f
 8014bb0:	43500000 	.word	0x43500000
 8014bb4:	ffff3cb0 	.word	0xffff3cb0
 8014bb8:	3c900000 	.word	0x3c900000

08014bbc <_init>:
 8014bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bbe:	bf00      	nop
 8014bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bc2:	bc08      	pop	{r3}
 8014bc4:	469e      	mov	lr, r3
 8014bc6:	4770      	bx	lr

08014bc8 <_fini>:
 8014bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bca:	bf00      	nop
 8014bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bce:	bc08      	pop	{r3}
 8014bd0:	469e      	mov	lr, r3
 8014bd2:	4770      	bx	lr
