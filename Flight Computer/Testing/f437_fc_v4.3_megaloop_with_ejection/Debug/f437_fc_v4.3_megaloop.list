
f437_fc_v4.3_megaloop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001269c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  08012850  08012850  00022850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080130a0  080130a0  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080130a0  080130a0  000230a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080130a8  080130a8  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080130a8  080130a8  000230a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080130ac  080130ac  000230ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080130b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          00001888  20000200  20000200  00030200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001a88  20001a88  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032824  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d3b  00000000  00000000  00062a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002338  00000000  00000000  00067790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002148  00000000  00000000  00069ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029a67  00000000  00000000  0006bc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000244ee  00000000  00000000  00095677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f468b  00000000  00000000  000b9b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ae1f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000adec  00000000  00000000  001ae244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012834 	.word	0x08012834

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	08012834 	.word	0x08012834

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <Max31855_Read_Temp>:
uint8_t Error=0;                                      // Thermocouple Connection acknowledge Flag
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675
// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101c:	482c      	ldr	r0, [pc, #176]	; (80010d0 <Max31855_Read_Temp+0xc4>)
 800101e:	f004 f877 	bl	8005110 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	2204      	movs	r2, #4
 8001028:	492a      	ldr	r1, [pc, #168]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 800102a:	482b      	ldr	r0, [pc, #172]	; (80010d8 <Max31855_Read_Temp+0xcc>)
 800102c:	f006 faf6 	bl	800761c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001036:	4826      	ldr	r0, [pc, #152]	; (80010d0 <Max31855_Read_Temp+0xc4>)
 8001038:	f004 f86a 	bl	8005110 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 800103e:	78db      	ldrb	r3, [r3, #3]
 8001040:	461a      	mov	r2, r3
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 8001044:	789b      	ldrb	r3, [r3, #2]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	431a      	orrs	r2, r3
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 800104c:	785b      	ldrb	r3, [r3, #1]
 800104e:	041b      	lsls	r3, r3, #16
 8001050:	431a      	orrs	r2, r3
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	061b      	lsls	r3, r3, #24
 8001058:	4313      	orrs	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

	Error = v & 0x07;								  // Error Detection
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <Max31855_Read_Temp+0xd0>)
 8001068:	701a      	strb	r2, [r3, #0]

	if (v & 0x7) {
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <Max31855_Read_Temp+0x6c>
		// uh oh, a serious problem!
		return -99999;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <Max31855_Read_Temp+0xd4>)
 8001076:	e024      	b.n	80010c2 <Max31855_Read_Temp+0xb6>
	}

	if (v & 0x80000000) {
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	da07      	bge.n	800108e <Max31855_Read_Temp+0x82>
		// Negative value, drop the lower 18 bits and explicitly extend sign bits.
		v = 0xFFFFC000 | ((v >> 18) & 0x00003FFF);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	0c9b      	lsrs	r3, r3, #18
 8001082:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8001086:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	e002      	b.n	8001094 <Max31855_Read_Temp+0x88>
	} else {
		// Positive value, just drop the lower 18 bits.
		v >>= 18;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	0c9b      	lsrs	r3, r3, #18
 8001092:	60fb      	str	r3, [r7, #12]
	}
	// Serial.println(v, HEX);

	double centigrade = v;
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f7ff fa45 	bl	8000524 <__aeabi_ui2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	e9c7 2300 	strd	r2, r3, [r7]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <Max31855_Read_Temp+0xd8>)
 80010a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010ac:	f7ff fab4 	bl	8000618 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	e9c7 2300 	strd	r2, r3, [r7]
	return centigrade;
 80010b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010bc:	f7ff fda4 	bl	8000c08 <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	20000504 	.word	0x20000504
 80010d8:	20000508 	.word	0x20000508
 80010dc:	2000021c 	.word	0x2000021c
 80010e0:	c7c34f80 	.word	0xc7c34f80
 80010e4:	3fd00000 	.word	0x3fd00000

080010e8 <runAltitudeMeasurements>:

// Private functions
void storeAltitude(float new_altitude, float cTime);

// Public function implementation
float runAltitudeMeasurements(uint32_t currTick, uint16_t currAlt){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
  T = (float)(currTick - prevTick);
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <runAltitudeMeasurements+0x80>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <runAltitudeMeasurements+0x84>)
 8001106:	edc3 7a00 	vstr	s15, [r3]

  prevTick = currTick;
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <runAltitudeMeasurements+0x80>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6013      	str	r3, [r2, #0]
  float alt_meas = currAlt - alt_ground; // Measures AGL altitude in feet
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <runAltitudeMeasurements+0x88>)
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001124:	edc7 7a03 	vstr	s15, [r7, #12]
  alt_filtered = filterAltitude(alt_meas);
 8001128:	ed97 0a03 	vldr	s0, [r7, #12]
 800112c:	f000 f824 	bl	8001178 <filterAltitude>
 8001130:	eef0 7a40 	vmov.f32	s15, s0
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <runAltitudeMeasurements+0x8c>)
 8001136:	edc3 7a00 	vstr	s15, [r3]
  storeAltitude(alt_filtered, currTick);
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <runAltitudeMeasurements+0x8c>)
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	ee07 3a10 	vmov	s14, r3
 8001146:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800114a:	eef0 0a47 	vmov.f32	s1, s14
 800114e:	eeb0 0a67 	vmov.f32	s0, s15
 8001152:	f000 f839 	bl	80011c8 <storeAltitude>
  return alt_filtered;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <runAltitudeMeasurements+0x8c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	ee07 3a90 	vmov	s15, r3
}
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000220 	.word	0x20000220
 800116c:	20000628 	.word	0x20000628
 8001170:	2000039c 	.word	0x2000039c
 8001174:	200003a0 	.word	0x200003a0

08001178 <filterAltitude>:

// -- Private function implementation --

// Low-pass filter - rocket at high speeds pressure fluctuates and affects altitude reading, usually at a high frequency, so low pass filter filters those high freuqency changes out
// and keeps just the overall, low frequency changes (caused by altitude change)
float filterAltitude(float altitude) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	ed87 0a01 	vstr	s0, [r7, #4]
	SmoothData -= LPF_Beta * (SmoothData - altitude);
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <filterAltitude+0x48>)
 8001184:	ed93 7a00 	vldr	s14, [r3]
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <filterAltitude+0x48>)
 800118a:	edd3 6a00 	vldr	s13, [r3]
 800118e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001192:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <filterAltitude+0x4c>)
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <filterAltitude+0x48>)
 80011a6:	edc3 7a00 	vstr	s15, [r3]
	return SmoothData;
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <filterAltitude+0x48>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	ee07 3a90 	vmov	s15, r3
}
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	20000398 	.word	0x20000398
 80011c4:	20000000 	.word	0x20000000

080011c8 <storeAltitude>:

void storeAltitude(float new_altitude, float cTime) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80011d2:	edc7 0a00 	vstr	s1, [r7]

	alt_previous[currElem] = new_altitude;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <storeAltitude+0x84>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <storeAltitude+0x88>)
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	601a      	str	r2, [r3, #0]
	time_previous[currElem] = cTime;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <storeAltitude+0x84>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4a1a      	ldr	r2, [pc, #104]	; (8001254 <storeAltitude+0x8c>)
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	601a      	str	r2, [r3, #0]
	timalt_previous[currElem] = cTime * new_altitude;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <storeAltitude+0x84>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	ed97 7a00 	vldr	s14, [r7]
 80011fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <storeAltitude+0x90>)
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	edc3 7a00 	vstr	s15, [r3]
	timsqr_previous[currElem] = cTime * cTime;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <storeAltitude+0x84>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	edd7 7a00 	vldr	s15, [r7]
 8001214:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <storeAltitude+0x94>)
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	edc3 7a00 	vstr	s15, [r3]

	if (currElem == (NUM_MEAS_REG - 1)) {
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <storeAltitude+0x84>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b31      	cmp	r3, #49	; 0x31
 8001228:	d103      	bne.n	8001232 <storeAltitude+0x6a>
		currElem = 0;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <storeAltitude+0x84>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
	}
	else {
		currElem += 1;
	}
}
 8001230:	e005      	b.n	800123e <storeAltitude+0x76>
		currElem += 1;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <storeAltitude+0x84>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <storeAltitude+0x84>)
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000224 	.word	0x20000224
 8001250:	2000062c 	.word	0x2000062c
 8001254:	20000560 	.word	0x20000560
 8001258:	200007bc 	.word	0x200007bc
 800125c:	200006f4 	.word	0x200006f4

08001260 <LSLinRegression>:

float LSLinRegression() {
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
	float xsum = 0, ysum = 0, xy = 0, xsqr = 0;
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]

	for (uint8_t i = 0; i < NUM_MEAS_REG; i++) {
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	e032      	b.n	80012ea <LSLinRegression+0x8a>
		xsum += time_previous[i];
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4a2d      	ldr	r2, [pc, #180]	; (800133c <LSLinRegression+0xdc>)
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	ed97 7a05 	vldr	s14, [r7, #20]
 8001294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001298:	edc7 7a05 	vstr	s15, [r7, #20]
	    ysum += alt_previous[i];
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	4a28      	ldr	r2, [pc, #160]	; (8001340 <LSLinRegression+0xe0>)
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80012ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b0:	edc7 7a04 	vstr	s15, [r7, #16]
	    xy += timalt_previous[i];
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4a23      	ldr	r2, [pc, #140]	; (8001344 <LSLinRegression+0xe4>)
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c8:	edc7 7a03 	vstr	s15, [r7, #12]
	    xsqr += timsqr_previous[i];
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <LSLinRegression+0xe8>)
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	edd3 7a00 	vldr	s15, [r3]
 80012d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80012dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e0:	edc7 7a02 	vstr	s15, [r7, #8]
	for (uint8_t i = 0; i < NUM_MEAS_REG; i++) {
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	3301      	adds	r3, #1
 80012e8:	71fb      	strb	r3, [r7, #7]
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b31      	cmp	r3, #49	; 0x31
 80012ee:	d9c9      	bls.n	8001284 <LSLinRegression+0x24>
	}

	return (float)(NUM_MEAS_REG*xy - (xsum*ysum))/(NUM_MEAS_REG*xsqr - (xsum*xsum));
 80012f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800134c <LSLinRegression+0xec>
 80012f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012fc:	edd7 6a05 	vldr	s13, [r7, #20]
 8001300:	edd7 7a04 	vldr	s15, [r7, #16]
 8001304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001308:	ee37 7a67 	vsub.f32	s14, s14, s15
 800130c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001310:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800134c <LSLinRegression+0xec>
 8001314:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001318:	edd7 7a05 	vldr	s15, [r7, #20]
 800131c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001320:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001324:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001328:	eef0 7a66 	vmov.f32	s15, s13
}
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000560 	.word	0x20000560
 8001340:	2000062c 	.word	0x2000062c
 8001344:	200007bc 	.word	0x200007bc
 8001348:	200006f4 	.word	0x200006f4
 800134c:	42480000 	.word	0x42480000

08001350 <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001358:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <lsm6dsl_init+0xc8>)
 800135a:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 800135c:	4b2f      	ldr	r3, [pc, #188]	; (800141c <lsm6dsl_init+0xcc>)
 800135e:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <lsm6dsl_init+0xd0>)
 8001362:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001364:	200a      	movs	r0, #10
 8001366:	f000 fa13 	bl	8001790 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	492d      	ldr	r1, [pc, #180]	; (8001424 <lsm6dsl_init+0xd4>)
 8001370:	4618      	mov	r0, r3
 8001372:	f000 fd71 	bl	8001e58 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <lsm6dsl_init+0xd4>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b6a      	cmp	r3, #106	; 0x6a
 800137c:	d005      	beq.n	800138a <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800137e:	2201      	movs	r2, #1
 8001380:	2102      	movs	r1, #2
 8001382:	4829      	ldr	r0, [pc, #164]	; (8001428 <lsm6dsl_init+0xd8>)
 8001384:	f003 fec4 	bl	8005110 <HAL_GPIO_WritePin>
		__BKPT();
 8001388:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	2101      	movs	r1, #1
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fd72 	bl	8001e7a <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	4924      	ldr	r1, [pc, #144]	; (800142c <lsm6dsl_init+0xdc>)
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fd92 	bl	8001ec6 <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 80013a2:	4b22      	ldr	r3, [pc, #136]	; (800142c <lsm6dsl_init+0xdc>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f5      	bne.n	8001396 <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	2101      	movs	r1, #1
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fc63 	bl	8001c7c <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	2104      	movs	r1, #4
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fbeb 	bl	8001b98 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	2104      	movs	r1, #4
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fc31 	bl	8001c30 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	2103      	movs	r1, #3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fbb9 	bl	8001b4c <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2106      	movs	r1, #6
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fbff 	bl	8001be4 <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	2111      	movs	r1, #17
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fd83 	bl	8001ef8 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	21a8      	movs	r1, #168	; 0xa8
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fdb4 	bl	8001f66 <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	461c      	mov	r4, r3
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800140a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	080016a9 	.word	0x080016a9
 800141c:	080016e3 	.word	0x080016e3
 8001420:	20000888 	.word	0x20000888
 8001424:	20000238 	.word	0x20000238
 8001428:	40020800 	.word	0x40020800
 800142c:	20000239 	.word	0x20000239

08001430 <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	1d3c      	adds	r4, r7, #4
 8001438:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800143c:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 800143e:	f107 0217 	add.w	r2, r7, #23
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fc3e 	bl	8001cc8 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d02d      	beq.n	80014ae <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001452:	2206      	movs	r2, #6
 8001454:	2100      	movs	r1, #0
 8001456:	4818      	ldr	r0, [pc, #96]	; (80014b8 <get_acceleration+0x88>)
 8001458:	f00b fde0 	bl	800d01c <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4916      	ldr	r1, [pc, #88]	; (80014b8 <get_acceleration+0x88>)
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fcae 	bl	8001dc2 <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <get_acceleration+0x88>)
 8001468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fb3d 	bl	8001aec <lsm6dsl_from_fs8g_to_mg>
 8001472:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <get_acceleration+0x88>)
 800147e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001486:	4610      	mov	r0, r2
 8001488:	f000 fb30 	bl	8001aec <lsm6dsl_from_fs8g_to_mg>
 800148c:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 8001490:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <get_acceleration+0x88>)
 8001496:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 80014a0:	4610      	mov	r0, r2
 80014a2:	f000 fb23 	bl	8001aec <lsm6dsl_from_fs8g_to_mg>
 80014a6:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 80014aa:	edc4 7a00 	vstr	s15, [r4]
	}

}
 80014ae:	bf00      	nop
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000228 	.word	0x20000228

080014bc <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	1d3c      	adds	r4, r7, #4
 80014c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014c8:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 80014ca:	f107 0217 	add.w	r2, r7, #23
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fc11 	bl	8001cfa <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d02d      	beq.n	800153a <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80014de:	2206      	movs	r2, #6
 80014e0:	2100      	movs	r1, #0
 80014e2:	4818      	ldr	r0, [pc, #96]	; (8001544 <get_angvelocity+0x88>)
 80014e4:	f00b fd9a 	bl	800d01c <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4916      	ldr	r1, [pc, #88]	; (8001544 <get_angvelocity+0x88>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fc1d 	bl	8001d2c <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <get_angvelocity+0x88>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fb0f 	bl	8001b1c <lsm6dsl_from_fs2000dps_to_mdps>
 80014fe:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <get_angvelocity+0x88>)
 800150a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001512:	4610      	mov	r0, r2
 8001514:	f000 fb02 	bl	8001b1c <lsm6dsl_from_fs2000dps_to_mdps>
 8001518:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 800151c:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <get_angvelocity+0x88>)
 8001522:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800152c:	4610      	mov	r0, r2
 800152e:	f000 faf5 	bl	8001b1c <lsm6dsl_from_fs2000dps_to_mdps>
 8001532:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 8001536:	edc4 7a00 	vstr	s15, [r4]
	}
}
 800153a:	bf00      	nop
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	bf00      	nop
 8001544:	20000230 	.word	0x20000230

08001548 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <lps22hh_init+0x94>)
 8001552:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <lps22hh_init+0x98>)
 8001556:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <lps22hh_init+0x9c>)
 800155a:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 800155c:	200a      	movs	r0, #10
 800155e:	f000 f917 	bl	8001790 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <lps22hh_init+0xa0>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	491e      	ldr	r1, [pc, #120]	; (80015e8 <lps22hh_init+0xa0>)
 800156e:	4618      	mov	r0, r3
 8001570:	f000 fa3c 	bl	80019ec <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <lps22hh_init+0xa0>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2bb3      	cmp	r3, #179	; 0xb3
 800157a:	d007      	beq.n	800158c <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	2104      	movs	r1, #4
 8001580:	481a      	ldr	r0, [pc, #104]	; (80015ec <lps22hh_init+0xa4>)
 8001582:	f003 fdc5 	bl	8005110 <HAL_GPIO_WritePin>
		__BKPT();
 8001586:	be00      	bkpt	0x0000
		Error_Handler();
 8001588:	f001 ff94 	bl	80034b4 <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2101      	movs	r1, #1
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fa3b 	bl	8001a0e <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4914      	ldr	r1, [pc, #80]	; (80015f0 <lps22hh_init+0xa8>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fa5b 	bl	8001a5a <lps22hh_reset_get>
	} while (rst_lps22hh);
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <lps22hh_init+0xa8>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f5      	bne.n	8001598 <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f95a 	bl	800186c <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_75_Hz_LOW_NOISE);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2115      	movs	r1, #21
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f97a 	bl	80018b8 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	461c      	mov	r4, r3
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	0800171d 	.word	0x0800171d
 80015e0:	08001757 	.word	0x08001757
 80015e4:	20000888 	.word	0x20000888
 80015e8:	20000240 	.word	0x20000240
 80015ec:	40020800 	.word	0x40020800
 80015f0:	20000241 	.word	0x20000241

080015f4 <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	1d3c      	adds	r4, r7, #4
 80015fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001600:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8001602:	f107 0214 	add.w	r2, r7, #20
 8001606:	1d38      	adds	r0, r7, #4
 8001608:	2301      	movs	r3, #1
 800160a:	2127      	movs	r1, #39	; 0x27
 800160c:	f000 f8cb 	bl	80017a6 <lps22hh_read_reg>

	if (reg.status.p_da) {
 8001610:	7d3b      	ldrb	r3, [r7, #20]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d011      	beq.n	8001640 <get_pressure+0x4c>
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <get_pressure+0x54>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4908      	ldr	r1, [pc, #32]	; (8001648 <get_pressure+0x54>)
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f994 	bl	8001954 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <get_pressure+0x54>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f8e9 	bl	8001808 <lps22hh_from_lsb_to_hpa>
 8001636:	eef0 7a40 	vmov.f32	s15, s0
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001640:	bf00      	nop
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd90      	pop	{r4, r7, pc}
 8001648:	2000023c 	.word	0x2000023c

0800164c <get_temperature>:

void get_temperature(stmdev_ctx_t dev_ctx_lps22hh, float *temperature){
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	1d3c      	adds	r4, r7, #4
 8001654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001658:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800165a:	f107 0214 	add.w	r2, r7, #20
 800165e:	1d38      	adds	r0, r7, #4
 8001660:	2301      	movs	r3, #1
 8001662:	2127      	movs	r1, #39	; 0x27
 8001664:	f000 f89f 	bl	80017a6 <lps22hh_read_reg>

	if (reg.status.t_da) {
 8001668:	7d3b      	ldrb	r3, [r7, #20]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d012      	beq.n	800169a <get_temperature+0x4e>
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <get_temperature+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	801a      	strh	r2, [r3, #0]
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&dev_ctx_lps22hh, &data_raw_temperature);
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	4909      	ldr	r1, [pc, #36]	; (80016a4 <get_temperature+0x58>)
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f991 	bl	80019a6 <lps22hh_temperature_raw_get>
	  *temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <get_temperature+0x58>)
 8001686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f8d4 	bl	8001838 <lps22hh_from_lsb_to_celsius>
 8001690:	eef0 7a40 	vmov.f32	s15, s0
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800169a:	bf00      	nop
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000236 	.word	0x20000236

080016a8 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af04      	add	r7, sp, #16
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	461a      	mov	r2, r3
 80016b4:	460b      	mov	r3, r1
 80016b6:	72fb      	strb	r3, [r7, #11]
 80016b8:	4613      	mov	r3, r2
 80016ba:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 80016bc:	7afb      	ldrb	r3, [r7, #11]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	893b      	ldrh	r3, [r7, #8]
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2301      	movs	r3, #1
 80016d0:	21d5      	movs	r1, #213	; 0xd5
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f003 fe9e 	bl	8005414 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b088      	sub	sp, #32
 80016e6:	af04      	add	r7, sp, #16
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	461a      	mov	r2, r3
 80016ee:	460b      	mov	r3, r1
 80016f0:	72fb      	strb	r3, [r7, #11]
 80016f2:	4613      	mov	r3, r2
 80016f4:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	893b      	ldrh	r3, [r7, #8]
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2301      	movs	r3, #1
 800170a:	21d5      	movs	r1, #213	; 0xd5
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f003 ff7b 	bl	8005608 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af04      	add	r7, sp, #16
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	461a      	mov	r2, r3
 8001728:	460b      	mov	r3, r1
 800172a:	72fb      	strb	r3, [r7, #11]
 800172c:	4613      	mov	r3, r2
 800172e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 8001730:	7afb      	ldrb	r3, [r7, #11]
 8001732:	b29a      	uxth	r2, r3
 8001734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001738:	9302      	str	r3, [sp, #8]
 800173a:	893b      	ldrh	r3, [r7, #8]
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2301      	movs	r3, #1
 8001744:	21b9      	movs	r1, #185	; 0xb9
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f003 fe64 	bl	8005414 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b088      	sub	sp, #32
 800175a:	af04      	add	r7, sp, #16
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	461a      	mov	r2, r3
 8001762:	460b      	mov	r3, r1
 8001764:	72fb      	strb	r3, [r7, #11]
 8001766:	4613      	mov	r3, r2
 8001768:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 800176a:	7afb      	ldrb	r3, [r7, #11]
 800176c:	b29a      	uxth	r2, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	9302      	str	r3, [sp, #8]
 8001774:	893b      	ldrh	r3, [r7, #8]
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2301      	movs	r3, #1
 800177e:	21b9      	movs	r1, #185	; 0xb9
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f003 ff41 	bl	8005608 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f002 fda1 	bl	80042e0 <HAL_Delay>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80017a6:	b590      	push	{r4, r7, lr}
 80017a8:	b087      	sub	sp, #28
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	461a      	mov	r2, r3
 80017b2:	460b      	mov	r3, r1
 80017b4:	72fb      	strb	r3, [r7, #11]
 80017b6:	4613      	mov	r3, r2
 80017b8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	685c      	ldr	r4, [r3, #4]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6898      	ldr	r0, [r3, #8]
 80017c2:	893b      	ldrh	r3, [r7, #8]
 80017c4:	7af9      	ldrb	r1, [r7, #11]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	47a0      	blx	r4
 80017ca:	6178      	str	r0, [r7, #20]

  return ret;
 80017cc:	697b      	ldr	r3, [r7, #20]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd90      	pop	{r4, r7, pc}

080017d6 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80017d6:	b590      	push	{r4, r7, lr}
 80017d8:	b087      	sub	sp, #28
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	461a      	mov	r2, r3
 80017e2:	460b      	mov	r3, r1
 80017e4:	72fb      	strb	r3, [r7, #11]
 80017e6:	4613      	mov	r3, r2
 80017e8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681c      	ldr	r4, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6898      	ldr	r0, [r3, #8]
 80017f2:	893b      	ldrh	r3, [r7, #8]
 80017f4:	7af9      	ldrb	r1, [r7, #11]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	47a0      	blx	r4
 80017fa:	6178      	str	r0, [r7, #20]

  return ret;
 80017fc:	697b      	ldr	r3, [r7, #20]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	371c      	adds	r7, #28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd90      	pop	{r4, r7, pc}
	...

08001808 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800181a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001834 <lps22hh_from_lsb_to_hpa+0x2c>
 800181e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001822:	eef0 7a66 	vmov.f32	s15, s13
}
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	49800000 	.word	0x49800000

08001838 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8001842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001868 <lps22hh_from_lsb_to_celsius+0x30>
 8001852:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001856:	eef0 7a66 	vmov.f32	s15, s13
}
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	42c80000 	.word	0x42c80000

0800186c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001878:	f107 0208 	add.w	r2, r7, #8
 800187c:	2301      	movs	r3, #1
 800187e:	2110      	movs	r1, #16
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff90 	bl	80017a6 <lps22hh_read_reg>
 8001886:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10f      	bne.n	80018ae <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	b2da      	uxtb	r2, r3
 8001896:	7a3b      	ldrb	r3, [r7, #8]
 8001898:	f362 0341 	bfi	r3, r2, #1, #1
 800189c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800189e:	f107 0208 	add.w	r2, r7, #8
 80018a2:	2301      	movs	r3, #1
 80018a4:	2110      	movs	r1, #16
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ff95 	bl	80017d6 <lps22hh_write_reg>
 80018ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80018c4:	f107 0210 	add.w	r2, r7, #16
 80018c8:	2301      	movs	r3, #1
 80018ca:	2110      	movs	r1, #16
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff6a 	bl	80017a6 <lps22hh_read_reg>
 80018d2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d107      	bne.n	80018ea <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80018da:	f107 020c 	add.w	r2, r7, #12
 80018de:	2301      	movs	r3, #1
 80018e0:	2111      	movs	r1, #17
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ff5f 	bl	80017a6 <lps22hh_read_reg>
 80018e8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10f      	bne.n	8001910 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	7c3b      	ldrb	r3, [r7, #16]
 80018fa:	f362 1306 	bfi	r3, r2, #4, #3
 80018fe:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001900:	f107 0210 	add.w	r2, r7, #16
 8001904:	2301      	movs	r3, #1
 8001906:	2110      	movs	r1, #16
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff64 	bl	80017d6 <lps22hh_write_reg>
 800190e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d119      	bne.n	800194a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	b2da      	uxtb	r2, r3
 8001920:	7b3b      	ldrb	r3, [r7, #12]
 8001922:	f362 0341 	bfi	r3, r2, #1, #1
 8001926:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	08db      	lsrs	r3, r3, #3
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	b2da      	uxtb	r2, r3
 8001932:	7b3b      	ldrb	r3, [r7, #12]
 8001934:	f362 0300 	bfi	r3, r2, #0, #1
 8001938:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800193a:	f107 020c 	add.w	r2, r7, #12
 800193e:	2301      	movs	r3, #1
 8001940:	2111      	movs	r1, #17
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ff47 	bl	80017d6 <lps22hh_write_reg>
 8001948:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800194a:	697b      	ldr	r3, [r7, #20]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800195e:	f107 0208 	add.w	r2, r7, #8
 8001962:	2303      	movs	r3, #3
 8001964:	2128      	movs	r1, #40	; 0x28
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ff1d 	bl	80017a6 <lps22hh_read_reg>
 800196c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800196e:	7abb      	ldrb	r3, [r7, #10]
 8001970:	461a      	mov	r2, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	7a7a      	ldrb	r2, [r7, #9]
 800197e:	441a      	add	r2, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	7a3a      	ldrb	r2, [r7, #8]
 800198c:	441a      	add	r2, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	021a      	lsls	r2, r3, #8
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	601a      	str	r2, [r3, #0]

  return ret;
 800199c:	68fb      	ldr	r3, [r7, #12]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80019b0:	f107 0208 	add.w	r2, r7, #8
 80019b4:	2302      	movs	r3, #2
 80019b6:	212b      	movs	r1, #43	; 0x2b
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fef4 	bl	80017a6 <lps22hh_read_reg>
 80019be:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80019c0:	7a7b      	ldrb	r3, [r7, #9]
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	7a3b      	ldrb	r3, [r7, #8]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4413      	add	r3, r2
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b21a      	sxth	r2, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	801a      	strh	r2, [r3, #0]

  return ret;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80019f6:	2301      	movs	r3, #1
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	210f      	movs	r1, #15
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff fed2 	bl	80017a6 <lps22hh_read_reg>
 8001a02:	60f8      	str	r0, [r7, #12]

  return ret;
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001a1a:	f107 0208 	add.w	r2, r7, #8
 8001a1e:	2301      	movs	r3, #1
 8001a20:	2111      	movs	r1, #17
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff febf 	bl	80017a6 <lps22hh_read_reg>
 8001a28:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10f      	bne.n	8001a50 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	7a3b      	ldrb	r3, [r7, #8]
 8001a3a:	f362 0382 	bfi	r3, r2, #2, #1
 8001a3e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001a40:	f107 0208 	add.w	r2, r7, #8
 8001a44:	2301      	movs	r3, #1
 8001a46:	2111      	movs	r1, #17
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fec4 	bl	80017d6 <lps22hh_write_reg>
 8001a4e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a50:	68fb      	ldr	r3, [r7, #12]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001a64:	f107 0208 	add.w	r2, r7, #8
 8001a68:	2301      	movs	r3, #1
 8001a6a:	2111      	movs	r1, #17
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff fe9a 	bl	80017a6 <lps22hh_read_reg>
 8001a72:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8001a74:	7a3b      	ldrb	r3, [r7, #8]
 8001a76:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	701a      	strb	r2, [r3, #0]

  return ret;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	461a      	mov	r2, r3
 8001a98:	460b      	mov	r3, r1
 8001a9a:	72fb      	strb	r3, [r7, #11]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685c      	ldr	r4, [r3, #4]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6898      	ldr	r0, [r3, #8]
 8001aa8:	893b      	ldrh	r3, [r7, #8]
 8001aaa:	7af9      	ldrb	r1, [r7, #11]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	47a0      	blx	r4
 8001ab0:	6178      	str	r0, [r7, #20]

  return ret;
 8001ab2:	697b      	ldr	r3, [r7, #20]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd90      	pop	{r4, r7, pc}

08001abc <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	460b      	mov	r3, r1
 8001aca:	72fb      	strb	r3, [r7, #11]
 8001acc:	4613      	mov	r3, r2
 8001ace:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681c      	ldr	r4, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6898      	ldr	r0, [r3, #8]
 8001ad8:	893b      	ldrh	r3, [r7, #8]
 8001ada:	7af9      	ldrb	r1, [r7, #11]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	47a0      	blx	r4
 8001ae0:	6178      	str	r0, [r7, #20]

  return ret;
 8001ae2:	697b      	ldr	r3, [r7, #20]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd90      	pop	{r4, r7, pc}

08001aec <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 8001af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b02:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001b18 <lsm6dsl_from_fs8g_to_mg+0x2c>
 8001b06:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	3e79db23 	.word	0x3e79db23

08001b1c <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8001b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b32:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001b48 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 8001b36:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	428c0000 	.word	0x428c0000

08001b4c <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001b58:	f107 0208 	add.w	r2, r7, #8
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	2110      	movs	r1, #16
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff93 	bl	8001a8c <lsm6dsl_read_reg>
 8001b66:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	7a3b      	ldrb	r3, [r7, #8]
 8001b78:	f362 0383 	bfi	r3, r2, #2, #2
 8001b7c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001b7e:	f107 0208 	add.w	r2, r7, #8
 8001b82:	2301      	movs	r3, #1
 8001b84:	2110      	movs	r1, #16
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ff98 	bl	8001abc <lsm6dsl_write_reg>
 8001b8c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001ba4:	f107 0208 	add.w	r2, r7, #8
 8001ba8:	2301      	movs	r3, #1
 8001baa:	2110      	movs	r1, #16
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff6d 	bl	8001a8c <lsm6dsl_read_reg>
 8001bb2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10f      	bne.n	8001bda <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	7a3b      	ldrb	r3, [r7, #8]
 8001bc4:	f362 1307 	bfi	r3, r2, #4, #4
 8001bc8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001bca:	f107 0208 	add.w	r2, r7, #8
 8001bce:	2301      	movs	r3, #1
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ff72 	bl	8001abc <lsm6dsl_write_reg>
 8001bd8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001bf0:	f107 0208 	add.w	r2, r7, #8
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	2111      	movs	r1, #17
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff47 	bl	8001a8c <lsm6dsl_read_reg>
 8001bfe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10f      	bne.n	8001c26 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	7a3b      	ldrb	r3, [r7, #8]
 8001c10:	f362 0343 	bfi	r3, r2, #1, #3
 8001c14:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001c16:	f107 0208 	add.w	r2, r7, #8
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	2111      	movs	r1, #17
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ff4c 	bl	8001abc <lsm6dsl_write_reg>
 8001c24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001c3c:	f107 0208 	add.w	r2, r7, #8
 8001c40:	2301      	movs	r3, #1
 8001c42:	2111      	movs	r1, #17
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff21 	bl	8001a8c <lsm6dsl_read_reg>
 8001c4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10f      	bne.n	8001c72 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	7a3b      	ldrb	r3, [r7, #8]
 8001c5c:	f362 1307 	bfi	r3, r2, #4, #4
 8001c60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001c62:	f107 0208 	add.w	r2, r7, #8
 8001c66:	2301      	movs	r3, #1
 8001c68:	2111      	movs	r1, #17
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ff26 	bl	8001abc <lsm6dsl_write_reg>
 8001c70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c88:	f107 0208 	add.w	r2, r7, #8
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	2112      	movs	r1, #18
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff fefb 	bl	8001a8c <lsm6dsl_read_reg>
 8001c96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10f      	bne.n	8001cbe <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	7a3b      	ldrb	r3, [r7, #8]
 8001ca8:	f362 1386 	bfi	r3, r2, #6, #1
 8001cac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001cae:	f107 0208 	add.w	r2, r7, #8
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	2112      	movs	r1, #18
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ff00 	bl	8001abc <lsm6dsl_write_reg>
 8001cbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001cd2:	f107 0208 	add.w	r2, r7, #8
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	211e      	movs	r1, #30
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fed6 	bl	8001a8c <lsm6dsl_read_reg>
 8001ce0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8001ce2:	7a3b      	ldrb	r3, [r7, #8]
 8001ce4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	701a      	strb	r2, [r3, #0]

  return ret;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001d04:	f107 0208 	add.w	r2, r7, #8
 8001d08:	2301      	movs	r3, #1
 8001d0a:	211e      	movs	r1, #30
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff febd 	bl	8001a8c <lsm6dsl_read_reg>
 8001d12:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8001d14:	7a3b      	ldrb	r3, [r7, #8]
 8001d16:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	701a      	strb	r2, [r3, #0]

  return ret;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8001d36:	f107 020c 	add.w	r2, r7, #12
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	2122      	movs	r1, #34	; 0x22
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fea4 	bl	8001a8c <lsm6dsl_read_reg>
 8001d44:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001d46:	7b7b      	ldrb	r3, [r7, #13]
 8001d48:	b21a      	sxth	r2, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	7b3b      	ldrb	r3, [r7, #12]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	b212      	sxth	r2, r2
 8001d70:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	3302      	adds	r3, #2
 8001d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	7bbb      	ldrb	r3, [r7, #14]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	b212      	sxth	r2, r2
 8001d8e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001d90:	7c7a      	ldrb	r2, [r7, #17]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	3304      	adds	r3, #4
 8001d96:	b212      	sxth	r2, r2
 8001d98:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	7c3b      	ldrb	r3, [r7, #16]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	3304      	adds	r3, #4
 8001db4:	b212      	sxth	r2, r2
 8001db6:	801a      	strh	r2, [r3, #0]

  return ret;
 8001db8:	697b      	ldr	r3, [r7, #20]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001dcc:	f107 020c 	add.w	r2, r7, #12
 8001dd0:	2306      	movs	r3, #6
 8001dd2:	2128      	movs	r1, #40	; 0x28
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff fe59 	bl	8001a8c <lsm6dsl_read_reg>
 8001dda:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001ddc:	7b7b      	ldrb	r3, [r7, #13]
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	7b3b      	ldrb	r3, [r7, #12]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	3302      	adds	r3, #2
 8001e04:	b212      	sxth	r2, r2
 8001e06:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	7bbb      	ldrb	r3, [r7, #14]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	3302      	adds	r3, #2
 8001e22:	b212      	sxth	r2, r2
 8001e24:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001e26:	7c7a      	ldrb	r2, [r7, #17]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	b212      	sxth	r2, r2
 8001e2e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	3304      	adds	r3, #4
 8001e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	7c3b      	ldrb	r3, [r7, #16]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	b212      	sxth	r2, r2
 8001e4c:	801a      	strh	r2, [r3, #0]

  return ret;
 8001e4e:	697b      	ldr	r3, [r7, #20]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001e62:	2301      	movs	r3, #1
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	210f      	movs	r1, #15
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fe0f 	bl	8001a8c <lsm6dsl_read_reg>
 8001e6e:	60f8      	str	r0, [r7, #12]

  return ret;
 8001e70:	68fb      	ldr	r3, [r7, #12]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001e86:	f107 0208 	add.w	r2, r7, #8
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	2112      	movs	r1, #18
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fdfc 	bl	8001a8c <lsm6dsl_read_reg>
 8001e94:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10f      	bne.n	8001ebc <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	7a3b      	ldrb	r3, [r7, #8]
 8001ea6:	f362 0300 	bfi	r3, r2, #0, #1
 8001eaa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001eac:	f107 0208 	add.w	r2, r7, #8
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	2112      	movs	r1, #18
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff fe01 	bl	8001abc <lsm6dsl_write_reg>
 8001eba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001ed0:	f107 0208 	add.w	r2, r7, #8
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	2112      	movs	r1, #18
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff fdd7 	bl	8001a8c <lsm6dsl_read_reg>
 8001ede:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001ee0:	7a3b      	ldrb	r3, [r7, #8]
 8001ee2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	701a      	strb	r2, [r3, #0]

  return ret;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001f04:	f107 0208 	add.w	r2, r7, #8
 8001f08:	2301      	movs	r3, #1
 8001f0a:	2117      	movs	r1, #23
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fdbd 	bl	8001a8c <lsm6dsl_read_reg>
 8001f12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d120      	bne.n	8001f5c <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	7a3b      	ldrb	r3, [r7, #8]
 8001f26:	f362 03c3 	bfi	r3, r2, #3, #1
 8001f2a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	7a3b      	ldrb	r3, [r7, #8]
 8001f36:	f362 1346 	bfi	r3, r2, #5, #2
 8001f3a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8001f3c:	7a3b      	ldrb	r3, [r7, #8]
 8001f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f42:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001f44:	7a3b      	ldrb	r3, [r7, #8]
 8001f46:	f36f 0382 	bfc	r3, #2, #1
 8001f4a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001f4c:	f107 0208 	add.w	r2, r7, #8
 8001f50:	2301      	movs	r3, #1
 8001f52:	2117      	movs	r1, #23
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fdb1 	bl	8001abc <lsm6dsl_write_reg>
 8001f5a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001f72:	f107 0208 	add.w	r2, r7, #8
 8001f76:	2301      	movs	r3, #1
 8001f78:	2116      	movs	r1, #22
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fd86 	bl	8001a8c <lsm6dsl_read_reg>
 8001f80:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d157      	bne.n	8002038 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	7a3b      	ldrb	r3, [r7, #8]
 8001f94:	f362 1305 	bfi	r3, r2, #4, #2
 8001f98:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	09db      	lsrs	r3, r3, #7
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	7a3b      	ldrb	r3, [r7, #8]
 8001fa8:	f362 1386 	bfi	r3, r2, #6, #1
 8001fac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001fae:	f107 0208 	add.w	r2, r7, #8
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	2116      	movs	r1, #22
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff fd80 	bl	8001abc <lsm6dsl_write_reg>
 8001fbc:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d139      	bne.n	8002038 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001fc4:	f107 020c 	add.w	r2, r7, #12
 8001fc8:	2301      	movs	r3, #1
 8001fca:	2115      	movs	r1, #21
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fd5d 	bl	8001a8c <lsm6dsl_read_reg>
 8001fd2:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d12e      	bne.n	8002038 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	7b3b      	ldrb	r3, [r7, #12]
 8001fe4:	f362 0301 	bfi	r3, r2, #0, #2
 8001fe8:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001fea:	f107 020c 	add.w	r2, r7, #12
 8001fee:	2301      	movs	r3, #1
 8001ff0:	2115      	movs	r1, #21
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fd62 	bl	8001abc <lsm6dsl_write_reg>
 8001ff8:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d11b      	bne.n	8002038 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8002000:	f107 0210 	add.w	r2, r7, #16
 8002004:	2301      	movs	r3, #1
 8002006:	2113      	movs	r1, #19
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fd3f 	bl	8001a8c <lsm6dsl_read_reg>
 800200e:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d110      	bne.n	8002038 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	08db      	lsrs	r3, r3, #3
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	b2da      	uxtb	r2, r3
 8002020:	7c3b      	ldrb	r3, [r7, #16]
 8002022:	f362 0341 	bfi	r3, r2, #1, #1
 8002026:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8002028:	f107 0210 	add.w	r2, r7, #16
 800202c:	2301      	movs	r3, #1
 800202e:	2113      	movs	r1, #19
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff fd43 	bl	8001abc <lsm6dsl_write_reg>
 8002036:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002038:	697b      	ldr	r3, [r7, #20]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <tone>:
	#endif
}
#endif

// helper functions for buzzing
void tone(uint32_t duration, uint32_t repeats) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < repeats; i++) {
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e010      	b.n	8002076 <tone+0x32>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002054:	2108      	movs	r1, #8
 8002056:	480c      	ldr	r0, [pc, #48]	; (8002088 <tone+0x44>)
 8002058:	f005 fefc 	bl	8007e54 <HAL_TIM_PWM_Start>
		HAL_Delay(duration);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f002 f93f 	bl	80042e0 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002062:	2108      	movs	r1, #8
 8002064:	4808      	ldr	r0, [pc, #32]	; (8002088 <tone+0x44>)
 8002066:	f005 ff33 	bl	8007ed0 <HAL_TIM_PWM_Stop>
		HAL_Delay(duration);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f002 f938 	bl	80042e0 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3301      	adds	r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d3ea      	bcc.n	8002054 <tone+0x10>
	}
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000f90 	.word	0x20000f90

0800208c <buzz_success>:
void buzz_success() { tone(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS); };
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
 8002090:	2102      	movs	r1, #2
 8002092:	2032      	movs	r0, #50	; 0x32
 8002094:	f7ff ffd6 	bl	8002044 <tone>
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <buzz_failure>:
void buzz_failure() { tone(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS); };
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
 80020a0:	2101      	movs	r1, #1
 80020a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020a6:	f7ff ffcd 	bl	8002044 <tone>
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020b6:	f002 f8a1 	bl	80041fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ba:	f000 fa05 	bl	80024c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020be:	f000 fd9b 	bl	8002bf8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80020c2:	f000 fa89 	bl	80025d8 <MX_ADC1_Init>
  MX_I2C2_Init();
 80020c6:	f000 fad9 	bl	800267c <MX_I2C2_Init>
  MX_I2C3_Init();
 80020ca:	f000 fb17 	bl	80026fc <MX_I2C3_Init>
  MX_SPI2_Init();
 80020ce:	f000 fbaf 	bl	8002830 <MX_SPI2_Init>
  MX_SPI4_Init();
 80020d2:	f000 fbe3 	bl	800289c <MX_SPI4_Init>
  MX_SPI5_Init();
 80020d6:	f000 fc17 	bl	8002908 <MX_SPI5_Init>
  MX_TIM2_Init();
 80020da:	f000 fc4b 	bl	8002974 <MX_TIM2_Init>
  MX_UART8_Init();
 80020de:	f000 fd0d 	bl	8002afc <MX_UART8_Init>
  MX_USART3_UART_Init();
 80020e2:	f000 fd35 	bl	8002b50 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80020e6:	f000 fd5d 	bl	8002ba4 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80020ea:	f007 fcaf 	bl	8009a4c <MX_FATFS_Init>
  MX_RTC_Init();
 80020ee:	f000 fb45 	bl	800277c <MX_RTC_Init>
  MX_TIM4_Init();
 80020f2:	f000 fcb5 	bl	8002a60 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2102      	movs	r1, #2
 80020fa:	48bb      	ldr	r0, [pc, #748]	; (80023e8 <main+0x338>)
 80020fc:	f003 f808 	bl	8005110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8002100:	2200      	movs	r2, #0
 8002102:	2104      	movs	r1, #4
 8002104:	48b8      	ldr	r0, [pc, #736]	; (80023e8 <main+0x338>)
 8002106:	f003 f803 	bl	8005110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	2108      	movs	r1, #8
 800210e:	48b6      	ldr	r0, [pc, #728]	; (80023e8 <main+0x338>)
 8002110:	f002 fffe 	bl	8005110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, RESET);
 8002114:	2200      	movs	r2, #0
 8002116:	2108      	movs	r1, #8
 8002118:	48b4      	ldr	r0, [pc, #720]	; (80023ec <main+0x33c>)
 800211a:	f002 fff9 	bl	8005110 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, SET);
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002124:	48b2      	ldr	r0, [pc, #712]	; (80023f0 <main+0x340>)
 8002126:	f002 fff3 	bl	8005110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002130:	48af      	ldr	r0, [pc, #700]	; (80023f0 <main+0x340>)
 8002132:	f002 ffed 	bl	8005110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800213c:	48ac      	ldr	r0, [pc, #688]	; (80023f0 <main+0x340>)
 800213e:	f002 ffe7 	bl	8005110 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, SET);
 8002142:	2201      	movs	r2, #1
 8002144:	2102      	movs	r1, #2
 8002146:	48aa      	ldr	r0, [pc, #680]	; (80023f0 <main+0x340>)
 8002148:	f002 ffe2 	bl	8005110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002152:	48a8      	ldr	r0, [pc, #672]	; (80023f4 <main+0x344>)
 8002154:	f002 ffdc 	bl	8005110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800215e:	48a5      	ldr	r0, [pc, #660]	; (80023f4 <main+0x344>)
 8002160:	f002 ffd6 	bl	8005110 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 8002164:	2200      	movs	r2, #0
 8002166:	2104      	movs	r1, #4
 8002168:	48a3      	ldr	r0, [pc, #652]	; (80023f8 <main+0x348>)
 800216a:	f002 ffd1 	bl	8005110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	48a1      	ldr	r0, [pc, #644]	; (80023f8 <main+0x348>)
 8002174:	f002 ffcc 	bl	8005110 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800217e:	489e      	ldr	r0, [pc, #632]	; (80023f8 <main+0x348>)
 8002180:	f002 ffc6 	bl	8005110 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high (SPI idle CS is high)
  HAL_GPIO_WritePin(TH_CS_GPIO_Port, TH_CS_Pin, SET);
 8002184:	2201      	movs	r2, #1
 8002186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800218a:	489b      	ldr	r0, [pc, #620]	; (80023f8 <main+0x348>)
 800218c:	f002 ffc0 	bl	8005110 <HAL_GPIO_WritePin>

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8002190:	2200      	movs	r2, #0
 8002192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002196:	4896      	ldr	r0, [pc, #600]	; (80023f0 <main+0x340>)
 8002198:	f002 ffba 	bl	8005110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 800219c:	2200      	movs	r2, #0
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	4896      	ldr	r0, [pc, #600]	; (80023fc <main+0x34c>)
 80021a2:	f002 ffb5 	bl	8005110 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, SET);
 80021a6:	2201      	movs	r2, #1
 80021a8:	2140      	movs	r1, #64	; 0x40
 80021aa:	4894      	ldr	r0, [pc, #592]	; (80023fc <main+0x34c>)
 80021ac:	f002 ffb0 	bl	8005110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, SET);
 80021b0:	2201      	movs	r2, #1
 80021b2:	2120      	movs	r1, #32
 80021b4:	4891      	ldr	r0, [pc, #580]	; (80023fc <main+0x34c>)
 80021b6:	f002 ffab 	bl	8005110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_IO3_GPIO_Port, FLASH_IO3_Pin, SET);
 80021ba:	2201      	movs	r2, #1
 80021bc:	2110      	movs	r1, #16
 80021be:	488f      	ldr	r0, [pc, #572]	; (80023fc <main+0x34c>)
 80021c0:	f002 ffa6 	bl	8005110 <HAL_GPIO_WritePin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
  Tx_setup();
#endif

  // init i2c sensors and data storage
  dev_ctx_lsm = lsm6dsl_init();
 80021c4:	4c8e      	ldr	r4, [pc, #568]	; (8002400 <main+0x350>)
 80021c6:	463b      	mov	r3, r7
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff f8c1 	bl	8001350 <lsm6dsl_init>
 80021ce:	463b      	mov	r3, r7
 80021d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 80021d8:	f7ff ff58 	bl	800208c <buzz_success>
  HAL_Delay(500);
 80021dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021e0:	f002 f87e 	bl	80042e0 <HAL_Delay>

  dev_ctx_lps = lps22hh_init();
 80021e4:	4c87      	ldr	r4, [pc, #540]	; (8002404 <main+0x354>)
 80021e6:	463b      	mov	r3, r7
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff f9ad 	bl	8001548 <lps22hh_init>
 80021ee:	463b      	mov	r3, r7
 80021f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 80021f8:	f7ff ff48 	bl	800208c <buzz_success>
  HAL_Delay(500);
 80021fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002200:	f002 f86e 	bl	80042e0 <HAL_Delay>

  // get local_pressure
  local_pressure = 1022.0;
 8002204:	4b80      	ldr	r3, [pc, #512]	; (8002408 <main+0x358>)
 8002206:	4a81      	ldr	r2, [pc, #516]	; (800240c <main+0x35c>)
 8002208:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0; i < 100; i++) {
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]
 800220e:	e00e      	b.n	800222e <main+0x17e>
	  alt_ground += getAltitude();
 8002210:	f000 ff16 	bl	8003040 <getAltitude>
 8002214:	eeb0 7a40 	vmov.f32	s14, s0
 8002218:	4b7d      	ldr	r3, [pc, #500]	; (8002410 <main+0x360>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002222:	4b7b      	ldr	r3, [pc, #492]	; (8002410 <main+0x360>)
 8002224:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 100; i++) {
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	3301      	adds	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
 800222e:	7dfb      	ldrb	r3, [r7, #23]
 8002230:	2b63      	cmp	r3, #99	; 0x63
 8002232:	d9ed      	bls.n	8002210 <main+0x160>
//	  get_pressure(dev_ctx_lps, &pressure_hPa);
//	  local_pressure += pressure_hPa;
  }
//  local_pressure /= 100.0;
//  local_pressure = 1022.0; // https://montreal.weatherstats.ca/charts/pressure_sea-hourly.html
  alt_ground /= 100.0;
 8002234:	4b76      	ldr	r3, [pc, #472]	; (8002410 <main+0x360>)
 8002236:	ed93 7a00 	vldr	s14, [r3]
 800223a:	eddf 6a76 	vldr	s13, [pc, #472]	; 8002414 <main+0x364>
 800223e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002242:	4b73      	ldr	r3, [pc, #460]	; (8002410 <main+0x360>)
 8002244:	edc3 7a00 	vstr	s15, [r3]

  // init FLASH
//  if (!W25qxx_Init()) Error_Handler();
  buzz_success();
 8002248:	f7ff ff20 	bl	800208c <buzz_success>

  // init sd card with dynamic filename
  fres = sd_init_dynamic_filename("FC", sd_file_header, filename);
 800224c:	4a72      	ldr	r2, [pc, #456]	; (8002418 <main+0x368>)
 800224e:	4973      	ldr	r1, [pc, #460]	; (800241c <main+0x36c>)
 8002250:	4873      	ldr	r0, [pc, #460]	; (8002420 <main+0x370>)
 8002252:	f001 f955 	bl	8003500 <sd_init_dynamic_filename>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	4b72      	ldr	r3, [pc, #456]	; (8002424 <main+0x374>)
 800225c:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 800225e:	4b71      	ldr	r3, [pc, #452]	; (8002424 <main+0x374>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <main+0x1ba>
  		Error_Handler();
 8002266:	f001 f925 	bl	80034b4 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // initialize values
	  getAltitudeDataLog();
 800226a:	f000 fe7b 	bl	8002f64 <getAltitudeDataLog>

	  // wait for launch
	  while (alt_filtered < 50) {
 800226e:	e004      	b.n	800227a <main+0x1ca>
		  getAltitudeDataLog();
 8002270:	f000 fe78 	bl	8002f64 <getAltitudeDataLog>
		  HAL_Delay(5);
 8002274:	2005      	movs	r0, #5
 8002276:	f002 f833 	bl	80042e0 <HAL_Delay>
	  while (alt_filtered < 50) {
 800227a:	4b6b      	ldr	r3, [pc, #428]	; (8002428 <main+0x378>)
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800242c <main+0x37c>
 8002284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	d4f0      	bmi.n	8002270 <main+0x1c0>
	  }

	  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, SET);
 800228e:	2201      	movs	r2, #1
 8002290:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002294:	4857      	ldr	r0, [pc, #348]	; (80023f4 <main+0x344>)
 8002296:	f002 ff3b 	bl	8005110 <HAL_GPIO_WritePin>
	  flight_state = 1;
 800229a:	4b65      	ldr	r3, [pc, #404]	; (8002430 <main+0x380>)
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]

	  // save launched message to sd card
	  sprintf(msg_buffer_av, "launched, altitude_filtered = %.7f\r\n", alt_filtered);
 80022a0:	4b61      	ldr	r3, [pc, #388]	; (8002428 <main+0x378>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe f95f 	bl	8000568 <__aeabi_f2d>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4961      	ldr	r1, [pc, #388]	; (8002434 <main+0x384>)
 80022b0:	4861      	ldr	r0, [pc, #388]	; (8002438 <main+0x388>)
 80022b2:	f00b fdf5 	bl	800dea0 <siprintf>
	  fres = sd_open_file(filename);
 80022b6:	4858      	ldr	r0, [pc, #352]	; (8002418 <main+0x368>)
 80022b8:	f001 f9a0 	bl	80035fc <sd_open_file>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	4b58      	ldr	r3, [pc, #352]	; (8002424 <main+0x374>)
 80022c2:	701a      	strb	r2, [r3, #0]
	  sd_write(&fil, msg_buffer_av);
 80022c4:	495c      	ldr	r1, [pc, #368]	; (8002438 <main+0x388>)
 80022c6:	485d      	ldr	r0, [pc, #372]	; (800243c <main+0x38c>)
 80022c8:	f001 f9b0 	bl	800362c <sd_write>
	  f_close(&fil);
 80022cc:	485b      	ldr	r0, [pc, #364]	; (800243c <main+0x38c>)
 80022ce:	f00a fb00 	bl	800c8d2 <f_close>

	  // wait for apogee
	  uint8_t numNVals = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	75bb      	strb	r3, [r7, #22]
	  float fittedSlope = 0;
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	613b      	str	r3, [r7, #16]

	  while (1) {
		  getAltitudeDataLog();
 80022dc:	f000 fe42 	bl	8002f64 <getAltitudeDataLog>
		  fittedSlope = LSLinRegression();
 80022e0:	f7fe ffbe 	bl	8001260 <LSLinRegression>
 80022e4:	ed87 0a04 	vstr	s0, [r7, #16]

		  if (fittedSlope < 0) {
 80022e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f4:	d506      	bpl.n	8002304 <main+0x254>
			  numNVals += 1;
 80022f6:	7dbb      	ldrb	r3, [r7, #22]
 80022f8:	3301      	adds	r3, #1
 80022fa:	75bb      	strb	r3, [r7, #22]
			  if (numNVals > NUM_DESCENDING_SAMPLES) {
 80022fc:	7dbb      	ldrb	r3, [r7, #22]
 80022fe:	2b0a      	cmp	r3, #10
 8002300:	d902      	bls.n	8002308 <main+0x258>
				  break;
 8002302:	e005      	b.n	8002310 <main+0x260>
			  }
		  }
		  else {
			  numNVals = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	75bb      	strb	r3, [r7, #22]
		  }

		  HAL_Delay(5);
 8002308:	2005      	movs	r0, #5
 800230a:	f001 ffe9 	bl	80042e0 <HAL_Delay>
		  getAltitudeDataLog();
 800230e:	e7e5      	b.n	80022dc <main+0x22c>
	  }
	  flight_state = 2;
 8002310:	4b47      	ldr	r3, [pc, #284]	; (8002430 <main+0x380>)
 8002312:	2202      	movs	r2, #2
 8002314:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, SET); // apogee reached, drogue deployed
 8002316:	2201      	movs	r2, #1
 8002318:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800231c:	4835      	ldr	r0, [pc, #212]	; (80023f4 <main+0x344>)
 800231e:	f002 fef7 	bl	8005110 <HAL_GPIO_WritePin>

	  // save launched message to sd card
	  sprintf(msg_buffer_av, "apogee, altitude_filtered = %.7f\r\n", alt_filtered);
 8002322:	4b41      	ldr	r3, [pc, #260]	; (8002428 <main+0x378>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe f91e 	bl	8000568 <__aeabi_f2d>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4943      	ldr	r1, [pc, #268]	; (8002440 <main+0x390>)
 8002332:	4841      	ldr	r0, [pc, #260]	; (8002438 <main+0x388>)
 8002334:	f00b fdb4 	bl	800dea0 <siprintf>
	  fres = sd_open_file(filename);
 8002338:	4837      	ldr	r0, [pc, #220]	; (8002418 <main+0x368>)
 800233a:	f001 f95f 	bl	80035fc <sd_open_file>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	4b38      	ldr	r3, [pc, #224]	; (8002424 <main+0x374>)
 8002344:	701a      	strb	r2, [r3, #0]
	  sd_write(&fil, msg_buffer_av);
 8002346:	493c      	ldr	r1, [pc, #240]	; (8002438 <main+0x388>)
 8002348:	483c      	ldr	r0, [pc, #240]	; (800243c <main+0x38c>)
 800234a:	f001 f96f 	bl	800362c <sd_write>
	  f_close(&fil);
 800234e:	483b      	ldr	r0, [pc, #236]	; (800243c <main+0x38c>)
 8002350:	f00a fabf 	bl	800c8d2 <f_close>


	  // wait for main
	  while (alt_filtered > MAIN_DEPLOYMENT) {
 8002354:	e004      	b.n	8002360 <main+0x2b0>
		  getAltitudeDataLog();
 8002356:	f000 fe05 	bl	8002f64 <getAltitudeDataLog>
		  HAL_Delay(5);
 800235a:	2005      	movs	r0, #5
 800235c:	f001 ffc0 	bl	80042e0 <HAL_Delay>
	  while (alt_filtered > MAIN_DEPLOYMENT) {
 8002360:	4b31      	ldr	r3, [pc, #196]	; (8002428 <main+0x378>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002444 <main+0x394>
 800236a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002372:	dcf0      	bgt.n	8002356 <main+0x2a6>
	  }
	  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, SET);
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800237a:	481d      	ldr	r0, [pc, #116]	; (80023f0 <main+0x340>)
 800237c:	f002 fec8 	bl	8005110 <HAL_GPIO_WritePin>
	  flight_state = 3;
 8002380:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <main+0x380>)
 8002382:	2203      	movs	r2, #3
 8002384:	701a      	strb	r2, [r3, #0]

	  // save launched message to sd card
	  sprintf(msg_buffer_av, "main chute, altitude_filtered = %.7f\r\n", alt_filtered);
 8002386:	4b28      	ldr	r3, [pc, #160]	; (8002428 <main+0x378>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f8ec 	bl	8000568 <__aeabi_f2d>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	492c      	ldr	r1, [pc, #176]	; (8002448 <main+0x398>)
 8002396:	4828      	ldr	r0, [pc, #160]	; (8002438 <main+0x388>)
 8002398:	f00b fd82 	bl	800dea0 <siprintf>
	  fres = sd_open_file(filename);
 800239c:	481e      	ldr	r0, [pc, #120]	; (8002418 <main+0x368>)
 800239e:	f001 f92d 	bl	80035fc <sd_open_file>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <main+0x374>)
 80023a8:	701a      	strb	r2, [r3, #0]
	  sd_write(&fil, msg_buffer_av);
 80023aa:	4923      	ldr	r1, [pc, #140]	; (8002438 <main+0x388>)
 80023ac:	4823      	ldr	r0, [pc, #140]	; (800243c <main+0x38c>)
 80023ae:	f001 f93d 	bl	800362c <sd_write>
	  f_close(&fil);
 80023b2:	4822      	ldr	r0, [pc, #136]	; (800243c <main+0x38c>)
 80023b4:	f00a fa8d 	bl	800c8d2 <f_close>

	  // wait for landing
	  uint8_t count = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	757b      	strb	r3, [r7, #21]
	  while (count < LANDING_SAMPLES) {
 80023bc:	e04d      	b.n	800245a <main+0x3aa>
		  getAltitudeDataLog();
 80023be:	f000 fdd1 	bl	8002f64 <getAltitudeDataLog>
		  if(alt_filtered - alt_previous[NUM_MEAS_REG-1] < LANDING_THRESHOLD)
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <main+0x378>)
 80023c4:	ed93 7a00 	vldr	s14, [r3]
 80023c8:	4b20      	ldr	r3, [pc, #128]	; (800244c <main+0x39c>)
 80023ca:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 80023ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80023d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023de:	d537      	bpl.n	8002450 <main+0x3a0>
			  count++;
 80023e0:	7d7b      	ldrb	r3, [r7, #21]
 80023e2:	3301      	adds	r3, #1
 80023e4:	757b      	strb	r3, [r7, #21]
 80023e6:	e035      	b.n	8002454 <main+0x3a4>
 80023e8:	40020800 	.word	0x40020800
 80023ec:	40020000 	.word	0x40020000
 80023f0:	40021800 	.word	0x40021800
 80023f4:	40021400 	.word	0x40021400
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40020c00 	.word	0x40020c00
 8002400:	20000fd0 	.word	0x20000fd0
 8002404:	20000fdc 	.word	0x20000fdc
 8002408:	20000264 	.word	0x20000264
 800240c:	447f8000 	.word	0x447f8000
 8002410:	2000039c 	.word	0x2000039c
 8002414:	42c80000 	.word	0x42c80000
 8002418:	20000388 	.word	0x20000388
 800241c:	08012ad4 	.word	0x08012ad4
 8002420:	08012850 	.word	0x08012850
 8002424:	20000fe8 	.word	0x20000fe8
 8002428:	200003a0 	.word	0x200003a0
 800242c:	42480000 	.word	0x42480000
 8002430:	200003a4 	.word	0x200003a4
 8002434:	08012854 	.word	0x08012854
 8002438:	2000028c 	.word	0x2000028c
 800243c:	20000fec 	.word	0x20000fec
 8002440:	0801287c 	.word	0x0801287c
 8002444:	44bb8000 	.word	0x44bb8000
 8002448:	080128a0 	.word	0x080128a0
 800244c:	2000062c 	.word	0x2000062c
		  else
			  count = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	757b      	strb	r3, [r7, #21]

		  HAL_Delay(5);
 8002454:	2005      	movs	r0, #5
 8002456:	f001 ff43 	bl	80042e0 <HAL_Delay>
	  while (count < LANDING_SAMPLES) {
 800245a:	7d7b      	ldrb	r3, [r7, #21]
 800245c:	2bc7      	cmp	r3, #199	; 0xc7
 800245e:	d9ae      	bls.n	80023be <main+0x30e>
	  }
	  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, SET);
 8002460:	2201      	movs	r2, #1
 8002462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002466:	4810      	ldr	r0, [pc, #64]	; (80024a8 <main+0x3f8>)
 8002468:	f002 fe52 	bl	8005110 <HAL_GPIO_WritePin>
	  flight_state = 4;
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <main+0x3fc>)
 800246e:	2204      	movs	r2, #4
 8002470:	701a      	strb	r2, [r3, #0]

	  // save launched message to sd card
	  sprintf(msg_buffer_av, "landed, altitude_filtered = %.7f\r\n", alt_filtered);
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <main+0x400>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe f876 	bl	8000568 <__aeabi_f2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	490c      	ldr	r1, [pc, #48]	; (80024b4 <main+0x404>)
 8002482:	480d      	ldr	r0, [pc, #52]	; (80024b8 <main+0x408>)
 8002484:	f00b fd0c 	bl	800dea0 <siprintf>
	  fres = sd_open_file(filename);
 8002488:	480c      	ldr	r0, [pc, #48]	; (80024bc <main+0x40c>)
 800248a:	f001 f8b7 	bl	80035fc <sd_open_file>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <main+0x410>)
 8002494:	701a      	strb	r2, [r3, #0]
	  sd_write(&fil, msg_buffer_av);
 8002496:	4908      	ldr	r1, [pc, #32]	; (80024b8 <main+0x408>)
 8002498:	480a      	ldr	r0, [pc, #40]	; (80024c4 <main+0x414>)
 800249a:	f001 f8c7 	bl	800362c <sd_write>
	  f_close(&fil);
 800249e:	4809      	ldr	r0, [pc, #36]	; (80024c4 <main+0x414>)
 80024a0:	f00a fa17 	bl	800c8d2 <f_close>


	  while (1); // terminate
 80024a4:	e7fe      	b.n	80024a4 <main+0x3f4>
 80024a6:	bf00      	nop
 80024a8:	40021800 	.word	0x40021800
 80024ac:	200003a4 	.word	0x200003a4
 80024b0:	200003a0 	.word	0x200003a0
 80024b4:	080128c8 	.word	0x080128c8
 80024b8:	2000028c 	.word	0x2000028c
 80024bc:	20000388 	.word	0x20000388
 80024c0:	20000fe8 	.word	0x20000fe8
 80024c4:	20000fec 	.word	0x20000fec

080024c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b0a0      	sub	sp, #128	; 0x80
 80024cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024d2:	2230      	movs	r2, #48	; 0x30
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f00a fda0 	bl	800d01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	2230      	movs	r2, #48	; 0x30
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f00a fd91 	bl	800d01c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <SystemClock_Config+0x108>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a33      	ldr	r2, [pc, #204]	; (80025d0 <SystemClock_Config+0x108>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <SystemClock_Config+0x108>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	4b2e      	ldr	r3, [pc, #184]	; (80025d4 <SystemClock_Config+0x10c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a2d      	ldr	r2, [pc, #180]	; (80025d4 <SystemClock_Config+0x10c>)
 8002520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <SystemClock_Config+0x10c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002532:	2309      	movs	r3, #9
 8002534:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800253a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800253c:	2301      	movs	r3, #1
 800253e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002540:	2302      	movs	r3, #2
 8002542:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002544:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002548:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800254a:	2308      	movs	r3, #8
 800254c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800254e:	23b4      	movs	r3, #180	; 0xb4
 8002550:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002552:	2302      	movs	r3, #2
 8002554:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002556:	2304      	movs	r3, #4
 8002558:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800255a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800255e:	4618      	mov	r0, r3
 8002560:	f003 fe9e 	bl	80062a0 <HAL_RCC_OscConfig>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800256a:	f000 ffa3 	bl	80034b4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800256e:	f003 fe47 	bl	8006200 <HAL_PWREx_EnableOverDrive>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002578:	f000 ff9c 	bl	80034b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800257c:	230f      	movs	r3, #15
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002580:	2302      	movs	r3, #2
 8002582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002584:	2300      	movs	r3, #0
 8002586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002588:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800258c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800258e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002592:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002594:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002598:	2105      	movs	r1, #5
 800259a:	4618      	mov	r0, r3
 800259c:	f004 f8f0 	bl	8006780 <HAL_RCC_ClockConfig>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80025a6:	f000 ff85 	bl	80034b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025aa:	2320      	movs	r3, #32
 80025ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80025ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b4:	f107 030c 	add.w	r3, r7, #12
 80025b8:	4618      	mov	r0, r3
 80025ba:	f004 fadb 	bl	8006b74 <HAL_RCCEx_PeriphCLKConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80025c4:	f000 ff76 	bl	80034b4 <Error_Handler>
  }
}
 80025c8:	bf00      	nop
 80025ca:	3780      	adds	r7, #128	; 0x80
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40007000 	.word	0x40007000

080025d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025de:	463b      	mov	r3, r7
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80025ea:	4b21      	ldr	r3, [pc, #132]	; (8002670 <MX_ADC1_Init+0x98>)
 80025ec:	4a21      	ldr	r2, [pc, #132]	; (8002674 <MX_ADC1_Init+0x9c>)
 80025ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <MX_ADC1_Init+0x98>)
 80025f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <MX_ADC1_Init+0x98>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80025fe:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <MX_ADC1_Init+0x98>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002604:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <MX_ADC1_Init+0x98>)
 8002606:	2200      	movs	r2, #0
 8002608:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800260a:	4b19      	ldr	r3, [pc, #100]	; (8002670 <MX_ADC1_Init+0x98>)
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002612:	4b17      	ldr	r3, [pc, #92]	; (8002670 <MX_ADC1_Init+0x98>)
 8002614:	2200      	movs	r2, #0
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <MX_ADC1_Init+0x98>)
 800261a:	4a17      	ldr	r2, [pc, #92]	; (8002678 <MX_ADC1_Init+0xa0>)
 800261c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <MX_ADC1_Init+0x98>)
 8002620:	2200      	movs	r2, #0
 8002622:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <MX_ADC1_Init+0x98>)
 8002626:	2201      	movs	r2, #1
 8002628:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <MX_ADC1_Init+0x98>)
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <MX_ADC1_Init+0x98>)
 8002634:	2201      	movs	r2, #1
 8002636:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002638:	480d      	ldr	r0, [pc, #52]	; (8002670 <MX_ADC1_Init+0x98>)
 800263a:	f001 fe75 	bl	8004328 <HAL_ADC_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002644:	f000 ff36 	bl	80034b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002648:	2306      	movs	r3, #6
 800264a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800264c:	2301      	movs	r3, #1
 800264e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002650:	2307      	movs	r3, #7
 8002652:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002654:	463b      	mov	r3, r7
 8002656:	4619      	mov	r1, r3
 8002658:	4805      	ldr	r0, [pc, #20]	; (8002670 <MX_ADC1_Init+0x98>)
 800265a:	f002 f833 	bl	80046c4 <HAL_ADC_ConfigChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002664:	f000 ff26 	bl	80034b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000c90 	.word	0x20000c90
 8002674:	40012000 	.word	0x40012000
 8002678:	0f000001 	.word	0x0f000001

0800267c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <MX_I2C2_Init+0x74>)
 8002682:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <MX_I2C2_Init+0x78>)
 8002684:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <MX_I2C2_Init+0x74>)
 8002688:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <MX_I2C2_Init+0x7c>)
 800268a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <MX_I2C2_Init+0x74>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <MX_I2C2_Init+0x74>)
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002698:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <MX_I2C2_Init+0x74>)
 800269a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800269e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026b2:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026b8:	480d      	ldr	r0, [pc, #52]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026ba:	f002 fd67 	bl	800518c <HAL_I2C_Init>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80026c4:	f000 fef6 	bl	80034b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026c8:	2100      	movs	r1, #0
 80026ca:	4809      	ldr	r0, [pc, #36]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026cc:	f003 fd1d 	bl	800610a <HAL_I2CEx_ConfigAnalogFilter>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80026d6:	f000 feed 	bl	80034b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80026da:	2100      	movs	r1, #0
 80026dc:	4804      	ldr	r0, [pc, #16]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026de:	f003 fd50 	bl	8006182 <HAL_I2CEx_ConfigDigitalFilter>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80026e8:	f000 fee4 	bl	80034b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000c3c 	.word	0x20000c3c
 80026f4:	40005800 	.word	0x40005800
 80026f8:	000186a0 	.word	0x000186a0

080026fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002700:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <MX_I2C3_Init+0x74>)
 8002702:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <MX_I2C3_Init+0x78>)
 8002704:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002706:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <MX_I2C3_Init+0x74>)
 8002708:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <MX_I2C3_Init+0x7c>)
 800270a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <MX_I2C3_Init+0x74>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002712:	4b17      	ldr	r3, [pc, #92]	; (8002770 <MX_I2C3_Init+0x74>)
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002718:	4b15      	ldr	r3, [pc, #84]	; (8002770 <MX_I2C3_Init+0x74>)
 800271a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800271e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002720:	4b13      	ldr	r3, [pc, #76]	; (8002770 <MX_I2C3_Init+0x74>)
 8002722:	2200      	movs	r2, #0
 8002724:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <MX_I2C3_Init+0x74>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <MX_I2C3_Init+0x74>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <MX_I2C3_Init+0x74>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002738:	480d      	ldr	r0, [pc, #52]	; (8002770 <MX_I2C3_Init+0x74>)
 800273a:	f002 fd27 	bl	800518c <HAL_I2C_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002744:	f000 feb6 	bl	80034b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002748:	2100      	movs	r1, #0
 800274a:	4809      	ldr	r0, [pc, #36]	; (8002770 <MX_I2C3_Init+0x74>)
 800274c:	f003 fcdd 	bl	800610a <HAL_I2CEx_ConfigAnalogFilter>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002756:	f000 fead 	bl	80034b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800275a:	2100      	movs	r1, #0
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <MX_I2C3_Init+0x74>)
 800275e:	f003 fd10 	bl	8006182 <HAL_I2CEx_ConfigDigitalFilter>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002768:	f000 fea4 	bl	80034b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000888 	.word	0x20000888
 8002774:	40005c00 	.word	0x40005c00
 8002778:	000186a0 	.word	0x000186a0

0800277c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002790:	2300      	movs	r3, #0
 8002792:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002794:	4b24      	ldr	r3, [pc, #144]	; (8002828 <MX_RTC_Init+0xac>)
 8002796:	4a25      	ldr	r2, [pc, #148]	; (800282c <MX_RTC_Init+0xb0>)
 8002798:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800279a:	4b23      	ldr	r3, [pc, #140]	; (8002828 <MX_RTC_Init+0xac>)
 800279c:	2200      	movs	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80027a0:	4b21      	ldr	r3, [pc, #132]	; (8002828 <MX_RTC_Init+0xac>)
 80027a2:	227f      	movs	r2, #127	; 0x7f
 80027a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80027a6:	4b20      	ldr	r3, [pc, #128]	; (8002828 <MX_RTC_Init+0xac>)
 80027a8:	22ff      	movs	r2, #255	; 0xff
 80027aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027ac:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <MX_RTC_Init+0xac>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <MX_RTC_Init+0xac>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027b8:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <MX_RTC_Init+0xac>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027be:	481a      	ldr	r0, [pc, #104]	; (8002828 <MX_RTC_Init+0xac>)
 80027c0:	f004 fb96 	bl	8006ef0 <HAL_RTC_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80027ca:	f000 fe73 	bl	80034b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 80027ce:	2310      	movs	r3, #16
 80027d0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 80027d2:	2320      	movs	r3, #32
 80027d4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 80027d6:	2330      	movs	r3, #48	; 0x30
 80027d8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	2201      	movs	r2, #1
 80027e6:	4619      	mov	r1, r3
 80027e8:	480f      	ldr	r0, [pc, #60]	; (8002828 <MX_RTC_Init+0xac>)
 80027ea:	f004 fc12 	bl	8007012 <HAL_RTC_SetTime>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80027f4:	f000 fe5e 	bl	80034b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80027f8:	2301      	movs	r3, #1
 80027fa:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 80027fc:	2302      	movs	r3, #2
 80027fe:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8002800:	2312      	movs	r3, #18
 8002802:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8002804:	2321      	movs	r3, #33	; 0x21
 8002806:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002808:	463b      	mov	r3, r7
 800280a:	2201      	movs	r2, #1
 800280c:	4619      	mov	r1, r3
 800280e:	4806      	ldr	r0, [pc, #24]	; (8002828 <MX_RTC_Init+0xac>)
 8002810:	f004 fd1a 	bl	8007248 <HAL_RTC_SetDate>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800281a:	f000 fe4b 	bl	80034b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000dd8 	.word	0x20000dd8
 800282c:	40002800 	.word	0x40002800

08002830 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <MX_SPI2_Init+0x64>)
 8002836:	4a18      	ldr	r2, [pc, #96]	; (8002898 <MX_SPI2_Init+0x68>)
 8002838:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800283a:	4b16      	ldr	r3, [pc, #88]	; (8002894 <MX_SPI2_Init+0x64>)
 800283c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002840:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002842:	4b14      	ldr	r3, [pc, #80]	; (8002894 <MX_SPI2_Init+0x64>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <MX_SPI2_Init+0x64>)
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <MX_SPI2_Init+0x64>)
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <MX_SPI2_Init+0x64>)
 8002856:	2200      	movs	r2, #0
 8002858:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <MX_SPI2_Init+0x64>)
 800285c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002860:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <MX_SPI2_Init+0x64>)
 8002864:	2228      	movs	r2, #40	; 0x28
 8002866:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <MX_SPI2_Init+0x64>)
 800286a:	2200      	movs	r2, #0
 800286c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <MX_SPI2_Init+0x64>)
 8002870:	2200      	movs	r2, #0
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <MX_SPI2_Init+0x64>)
 8002876:	2200      	movs	r2, #0
 8002878:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <MX_SPI2_Init+0x64>)
 800287c:	220a      	movs	r2, #10
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002880:	4804      	ldr	r0, [pc, #16]	; (8002894 <MX_SPI2_Init+0x64>)
 8002882:	f004 fe67 	bl	8007554 <HAL_SPI_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800288c:	f000 fe12 	bl	80034b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}
 8002894:	200008dc 	.word	0x200008dc
 8002898:	40003800 	.word	0x40003800

0800289c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <MX_SPI4_Init+0x64>)
 80028a2:	4a18      	ldr	r2, [pc, #96]	; (8002904 <MX_SPI4_Init+0x68>)
 80028a4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <MX_SPI4_Init+0x64>)
 80028a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028ac:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80028ae:	4b14      	ldr	r3, [pc, #80]	; (8002900 <MX_SPI4_Init+0x64>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <MX_SPI4_Init+0x64>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <MX_SPI4_Init+0x64>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <MX_SPI4_Init+0x64>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_SPI4_Init+0x64>)
 80028c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028cc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_SPI4_Init+0x64>)
 80028d0:	2228      	movs	r2, #40	; 0x28
 80028d2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <MX_SPI4_Init+0x64>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_SPI4_Init+0x64>)
 80028dc:	2200      	movs	r2, #0
 80028de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <MX_SPI4_Init+0x64>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <MX_SPI4_Init+0x64>)
 80028e8:	220a      	movs	r2, #10
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80028ec:	4804      	ldr	r0, [pc, #16]	; (8002900 <MX_SPI4_Init+0x64>)
 80028ee:	f004 fe31 	bl	8007554 <HAL_SPI_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80028f8:	f000 fddc 	bl	80034b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000508 	.word	0x20000508
 8002904:	40013400 	.word	0x40013400

08002908 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800290c:	4b17      	ldr	r3, [pc, #92]	; (800296c <MX_SPI5_Init+0x64>)
 800290e:	4a18      	ldr	r2, [pc, #96]	; (8002970 <MX_SPI5_Init+0x68>)
 8002910:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <MX_SPI5_Init+0x64>)
 8002914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002918:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <MX_SPI5_Init+0x64>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <MX_SPI5_Init+0x64>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <MX_SPI5_Init+0x64>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <MX_SPI5_Init+0x64>)
 800292e:	2200      	movs	r2, #0
 8002930:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <MX_SPI5_Init+0x64>)
 8002934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002938:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_SPI5_Init+0x64>)
 800293c:	2200      	movs	r2, #0
 800293e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <MX_SPI5_Init+0x64>)
 8002942:	2200      	movs	r2, #0
 8002944:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <MX_SPI5_Init+0x64>)
 8002948:	2200      	movs	r2, #0
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294c:	4b07      	ldr	r3, [pc, #28]	; (800296c <MX_SPI5_Init+0x64>)
 800294e:	2200      	movs	r2, #0
 8002950:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <MX_SPI5_Init+0x64>)
 8002954:	220a      	movs	r2, #10
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002958:	4804      	ldr	r0, [pc, #16]	; (800296c <MX_SPI5_Init+0x64>)
 800295a:	f004 fdfb 	bl	8007554 <HAL_SPI_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002964:	f000 fda6 	bl	80034b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000934 	.word	0x20000934
 8002970:	40015000 	.word	0x40015000

08002974 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08e      	sub	sp, #56	; 0x38
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800297a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002988:	f107 0320 	add.w	r3, r7, #32
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
 80029a0:	615a      	str	r2, [r3, #20]
 80029a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <MX_TIM2_Init+0xe8>)
 80029a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <MX_TIM2_Init+0xe8>)
 80029ae:	2259      	movs	r2, #89	; 0x59
 80029b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b2:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <MX_TIM2_Init+0xe8>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80029b8:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <MX_TIM2_Init+0xe8>)
 80029ba:	f240 128f 	movw	r2, #399	; 0x18f
 80029be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029c0:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <MX_TIM2_Init+0xe8>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c6:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <MX_TIM2_Init+0xe8>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029cc:	4823      	ldr	r0, [pc, #140]	; (8002a5c <MX_TIM2_Init+0xe8>)
 80029ce:	f005 f9e1 	bl	8007d94 <HAL_TIM_Base_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80029d8:	f000 fd6c 	bl	80034b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029e6:	4619      	mov	r1, r3
 80029e8:	481c      	ldr	r0, [pc, #112]	; (8002a5c <MX_TIM2_Init+0xe8>)
 80029ea:	f005 fc97 	bl	800831c <HAL_TIM_ConfigClockSource>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80029f4:	f000 fd5e 	bl	80034b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029f8:	4818      	ldr	r0, [pc, #96]	; (8002a5c <MX_TIM2_Init+0xe8>)
 80029fa:	f005 f9f6 	bl	8007dea <HAL_TIM_PWM_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a04:	f000 fd56 	bl	80034b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a08:	2320      	movs	r3, #32
 8002a0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a10:	f107 0320 	add.w	r3, r7, #32
 8002a14:	4619      	mov	r1, r3
 8002a16:	4811      	ldr	r0, [pc, #68]	; (8002a5c <MX_TIM2_Init+0xe8>)
 8002a18:	f006 f87c 	bl	8008b14 <HAL_TIMEx_MasterConfigSynchronization>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002a22:	f000 fd47 	bl	80034b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a26:	2360      	movs	r3, #96	; 0x60
 8002a28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002a2a:	2364      	movs	r3, #100	; 0x64
 8002a2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	2208      	movs	r2, #8
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4807      	ldr	r0, [pc, #28]	; (8002a5c <MX_TIM2_Init+0xe8>)
 8002a3e:	f005 fba7 	bl	8008190 <HAL_TIM_PWM_ConfigChannel>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002a48:	f000 fd34 	bl	80034b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a4c:	4803      	ldr	r0, [pc, #12]	; (8002a5c <MX_TIM2_Init+0xe8>)
 8002a4e:	f001 f991 	bl	8003d74 <HAL_TIM_MspPostInit>

}
 8002a52:	bf00      	nop
 8002a54:	3738      	adds	r7, #56	; 0x38
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000f90 	.word	0x20000f90

08002a60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a66:	f107 0308 	add.w	r3, r7, #8
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a74:	463b      	mov	r3, r7
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <MX_TIM4_Init+0x94>)
 8002a7e:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <MX_TIM4_Init+0x98>)
 8002a80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000-1;
 8002a82:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <MX_TIM4_Init+0x94>)
 8002a84:	f242 3227 	movw	r2, #8999	; 0x2327
 8002a88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <MX_TIM4_Init+0x94>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002a90:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <MX_TIM4_Init+0x94>)
 8002a92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a98:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <MX_TIM4_Init+0x94>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <MX_TIM4_Init+0x94>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002aa4:	4813      	ldr	r0, [pc, #76]	; (8002af4 <MX_TIM4_Init+0x94>)
 8002aa6:	f005 f975 	bl	8007d94 <HAL_TIM_Base_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002ab0:	f000 fd00 	bl	80034b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002aba:	f107 0308 	add.w	r3, r7, #8
 8002abe:	4619      	mov	r1, r3
 8002ac0:	480c      	ldr	r0, [pc, #48]	; (8002af4 <MX_TIM4_Init+0x94>)
 8002ac2:	f005 fc2b 	bl	800831c <HAL_TIM_ConfigClockSource>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002acc:	f000 fcf2 	bl	80034b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ad8:	463b      	mov	r3, r7
 8002ada:	4619      	mov	r1, r3
 8002adc:	4805      	ldr	r0, [pc, #20]	; (8002af4 <MX_TIM4_Init+0x94>)
 8002ade:	f006 f819 	bl	8008b14 <HAL_TIMEx_MasterConfigSynchronization>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002ae8:	f000 fce4 	bl	80034b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002aec:	bf00      	nop
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	2000098c 	.word	0x2000098c
 8002af8:	40000800 	.word	0x40000800

08002afc <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002b00:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b02:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <MX_UART8_Init+0x50>)
 8002b04:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b0c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b22:	220c      	movs	r2, #12
 8002b24:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b34:	f006 f87e 	bl	8008c34 <HAL_UART_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8002b3e:	f000 fcb9 	bl	80034b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000f04 	.word	0x20000f04
 8002b4c:	40007c00 	.word	0x40007c00

08002b50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b56:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <MX_USART3_UART_Init+0x50>)
 8002b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b62:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b76:	220c      	movs	r2, #12
 8002b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b86:	4805      	ldr	r0, [pc, #20]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b88:	f006 f854 	bl	8008c34 <HAL_UART_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b92:	f000 fc8f 	bl	80034b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200009cc 	.word	0x200009cc
 8002ba0:	40004800 	.word	0x40004800

08002ba4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <MX_USART6_UART_Init+0x50>)
 8002bac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bb4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bca:	220c      	movs	r2, #12
 8002bcc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002bda:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bdc:	f006 f82a 	bl	8008c34 <HAL_UART_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002be6:	f000 fc65 	bl	80034b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000f44 	.word	0x20000f44
 8002bf4:	40011400 	.word	0x40011400

08002bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08e      	sub	sp, #56	; 0x38
 8002bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
 8002c12:	4bb5      	ldr	r3, [pc, #724]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4ab4      	ldr	r2, [pc, #720]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c18:	f043 0310 	orr.w	r3, r3, #16
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4bb2      	ldr	r3, [pc, #712]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	4bae      	ldr	r3, [pc, #696]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4aad      	ldr	r2, [pc, #692]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c34:	f043 0304 	orr.w	r3, r3, #4
 8002c38:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3a:	4bab      	ldr	r3, [pc, #684]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	4ba7      	ldr	r3, [pc, #668]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4aa6      	ldr	r2, [pc, #664]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c50:	f043 0320 	orr.w	r3, r3, #32
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4ba4      	ldr	r3, [pc, #656]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	4ba0      	ldr	r3, [pc, #640]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a9f      	ldr	r2, [pc, #636]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b9d      	ldr	r3, [pc, #628]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	4b99      	ldr	r3, [pc, #612]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a98      	ldr	r2, [pc, #608]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b96      	ldr	r3, [pc, #600]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4b92      	ldr	r3, [pc, #584]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a91      	ldr	r2, [pc, #580]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b8f      	ldr	r3, [pc, #572]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	4b8b      	ldr	r3, [pc, #556]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a8a      	ldr	r2, [pc, #552]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	4b84      	ldr	r3, [pc, #528]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a83      	ldr	r2, [pc, #524]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002cdc:	f043 0308 	orr.w	r3, r3, #8
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b81      	ldr	r3, [pc, #516]	; (8002ee8 <MX_GPIO_Init+0x2f0>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	607b      	str	r3, [r7, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f248 4184 	movw	r1, #33924	; 0x8484
 8002cf4:	487d      	ldr	r0, [pc, #500]	; (8002eec <MX_GPIO_Init+0x2f4>)
 8002cf6:	f002 fa0b 	bl	8005110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002d00:	487b      	ldr	r0, [pc, #492]	; (8002ef0 <MX_GPIO_Init+0x2f8>)
 8002d02:	f002 fa05 	bl	8005110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8002d06:	2200      	movs	r2, #0
 8002d08:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002d0c:	4879      	ldr	r0, [pc, #484]	; (8002ef4 <MX_GPIO_Init+0x2fc>)
 8002d0e:	f002 f9ff 	bl	8005110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2108      	movs	r1, #8
 8002d16:	4878      	ldr	r0, [pc, #480]	; (8002ef8 <MX_GPIO_Init+0x300>)
 8002d18:	f002 f9fa 	bl	8005110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f645 213e 	movw	r1, #23102	; 0x5a3e
 8002d22:	4876      	ldr	r0, [pc, #472]	; (8002efc <MX_GPIO_Init+0x304>)
 8002d24:	f002 f9f4 	bl	8005110 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|VR_CTRL_PWR_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin
                          |Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_NSS_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002d2e:	4874      	ldr	r0, [pc, #464]	; (8002f00 <MX_GPIO_Init+0x308>)
 8002d30:	f002 f9ee 	bl	8005110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002d34:	2200      	movs	r2, #0
 8002d36:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8002d3a:	4872      	ldr	r0, [pc, #456]	; (8002f04 <MX_GPIO_Init+0x30c>)
 8002d3c:	f002 f9e8 	bl	8005110 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin
                          |VR_CTRL_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PM_12V_EN_Pin Vent_Valve_EN_Pin TH_CS_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin;
 8002d40:	f248 4384 	movw	r3, #33924	; 0x8484
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d46:	2301      	movs	r3, #1
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d56:	4619      	mov	r1, r3
 8002d58:	4864      	ldr	r0, [pc, #400]	; (8002eec <MX_GPIO_Init+0x2f4>)
 8002d5a:	f002 f815 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d64:	2301      	movs	r3, #1
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d74:	4619      	mov	r1, r3
 8002d76:	485e      	ldr	r0, [pc, #376]	; (8002ef0 <MX_GPIO_Init+0x2f8>)
 8002d78:	f002 f806 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <MX_GPIO_Init+0x310>)
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8002d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4859      	ldr	r0, [pc, #356]	; (8002ef4 <MX_GPIO_Init+0x2fc>)
 8002d90:	f001 fffa 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin;
 8002d94:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002daa:	4619      	mov	r1, r3
 8002dac:	4851      	ldr	r0, [pc, #324]	; (8002ef4 <MX_GPIO_Init+0x2fc>)
 8002dae:	f001 ffeb 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDF_Pin */
  GPIO_InitStruct.Pin = LEDF_Pin;
 8002db2:	2308      	movs	r3, #8
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db6:	2301      	movs	r3, #1
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LEDF_GPIO_Port, &GPIO_InitStruct);
 8002dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	484b      	ldr	r0, [pc, #300]	; (8002ef8 <MX_GPIO_Init+0x300>)
 8002dca:	f001 ffdd 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002dce:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de0:	4619      	mov	r1, r3
 8002de2:	4844      	ldr	r0, [pc, #272]	; (8002ef4 <MX_GPIO_Init+0x2fc>)
 8002de4:	f001 ffd0 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8002de8:	2302      	movs	r3, #2
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dec:	2300      	movs	r3, #0
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8002df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4841      	ldr	r0, [pc, #260]	; (8002f00 <MX_GPIO_Init+0x308>)
 8002dfc:	f001 ffc4 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : Prop_Cont_2_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 8002e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e06:	2300      	movs	r3, #0
 8002e08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e12:	4619      	mov	r1, r3
 8002e14:	4836      	ldr	r0, [pc, #216]	; (8002ef0 <MX_GPIO_Init+0x2f8>)
 8002e16:	f001 ffb7 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Gate_2_Pin Prop_Gate_1_Pin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 8002e1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e20:	2301      	movs	r3, #1
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e30:	4619      	mov	r1, r3
 8002e32:	482f      	ldr	r0, [pc, #188]	; (8002ef0 <MX_GPIO_Init+0x2f8>)
 8002e34:	f001 ffa8 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Cont_1_Pin Rcov_Cont_Main_Pin Rcov_Cont_Drogue_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|Rcov_Cont_Main_Pin|Rcov_Cont_Drogue_Pin;
 8002e38:	f242 4301 	movw	r3, #9217	; 0x2401
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	482b      	ldr	r0, [pc, #172]	; (8002efc <MX_GPIO_Init+0x304>)
 8002e4e:	f001 ff9b 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Pyro_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin VR_CTRL_PWR_Pin Rcov_Gate_Main_Pin Rcov_Gate_Drogue_Pin
                           Rcov_Arm_Pin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8002e52:	f645 233e 	movw	r3, #23102	; 0x5a3e
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|VR_CTRL_PWR_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin
                          |Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e60:	2300      	movs	r3, #0
 8002e62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4824      	ldr	r0, [pc, #144]	; (8002efc <MX_GPIO_Init+0x304>)
 8002e6c:	f001 ff8c 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Payload_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = Payload_EN_Pin|IN_XTend_Continuity_Pin;
 8002e70:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e76:	2300      	movs	r3, #0
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e82:	4619      	mov	r1, r3
 8002e84:	4819      	ldr	r0, [pc, #100]	; (8002eec <MX_GPIO_Init+0x2f4>)
 8002e86:	f001 ff7f 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_NSS_Pin */
  GPIO_InitStruct.Pin = SX_NSS_Pin;
 8002e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e90:	2301      	movs	r3, #1
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e94:	2301      	movs	r3, #1
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SX_NSS_GPIO_Port, &GPIO_InitStruct);
 8002e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4817      	ldr	r0, [pc, #92]	; (8002f00 <MX_GPIO_Init+0x308>)
 8002ea4:	f001 ff70 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin FLASH_IO3_Pin FLASH_WP_Pin FLASH_CS_Pin
                           VR_CTRL_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002ea8:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin
                          |VR_CTRL_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4810      	ldr	r0, [pc, #64]	; (8002f04 <MX_GPIO_Init+0x30c>)
 8002ec2:	f001 ff61 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8002ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed8:	4619      	mov	r1, r3
 8002eda:	480a      	ldr	r0, [pc, #40]	; (8002f04 <MX_GPIO_Init+0x30c>)
 8002edc:	f001 ff54 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 8002ee0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002ee4:	e012      	b.n	8002f0c <MX_GPIO_Init+0x314>
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40021400 	.word	0x40021400
 8002ef4:	40020800 	.word	0x40020800
 8002ef8:	40020000 	.word	0x40020000
 8002efc:	40021800 	.word	0x40021800
 8002f00:	40020400 	.word	0x40020400
 8002f04:	40020c00 	.word	0x40020c00
 8002f08:	10110000 	.word	0x10110000
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <MX_GPIO_Init+0x360>)
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	480f      	ldr	r0, [pc, #60]	; (8002f5c <MX_GPIO_Init+0x364>)
 8002f1e:	f001 ff33 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4809      	ldr	r0, [pc, #36]	; (8002f60 <MX_GPIO_Init+0x368>)
 8002f3c:	f001 ff24 	bl	8004d88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002f40:	2200      	movs	r2, #0
 8002f42:	2100      	movs	r1, #0
 8002f44:	2006      	movs	r0, #6
 8002f46:	f001 fec6 	bl	8004cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f4a:	2006      	movs	r0, #6
 8002f4c:	f001 fedf 	bl	8004d0e <HAL_NVIC_EnableIRQ>

}
 8002f50:	bf00      	nop
 8002f52:	3738      	adds	r7, #56	; 0x38
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	10110000 	.word	0x10110000
 8002f5c:	40021800 	.word	0x40021800
 8002f60:	40020400 	.word	0x40020400

08002f64 <getAltitudeDataLog>:

/* USER CODE BEGIN 4 */


// just for vacuum chamber testing of the baro sensor
void getAltitudeDataLog() {
 8002f64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f68:	b088      	sub	sp, #32
 8002f6a:	af06      	add	r7, sp, #24
	// get value
	float raw_altitude = getAltitude();
 8002f6c:	f000 f868 	bl	8003040 <getAltitude>
 8002f70:	ed87 0a01 	vstr	s0, [r7, #4]
	alt_filtered = runAltitudeMeasurements(HAL_GetTick(), raw_altitude);
 8002f74:	f001 f9a8 	bl	80042c8 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f82:	ee17 3a90 	vmov	r3, s15
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f7fe f8ac 	bl	80010e8 <runAltitudeMeasurements>
 8002f90:	eef0 7a40 	vmov.f32	s15, s0
 8002f94:	4b21      	ldr	r3, [pc, #132]	; (800301c <getAltitudeDataLog+0xb8>)
 8002f96:	edc3 7a00 	vstr	s15, [r3]
	alt_filtered = raw_altitude;
 8002f9a:	4a20      	ldr	r2, [pc, #128]	; (800301c <getAltitudeDataLog+0xb8>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6013      	str	r3, [r2, #0]

	// save to sd
	sprintf(msg_buffer_av, "%.7f,%.7f,%.7f,%d\r\n", pressure_hPa, raw_altitude, alt_filtered, flight_state);
 8002fa0:	4b1f      	ldr	r3, [pc, #124]	; (8003020 <getAltitudeDataLog+0xbc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fadf 	bl	8000568 <__aeabi_f2d>
 8002faa:	4680      	mov	r8, r0
 8002fac:	4689      	mov	r9, r1
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fd fada 	bl	8000568 <__aeabi_f2d>
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	460d      	mov	r5, r1
 8002fb8:	4b18      	ldr	r3, [pc, #96]	; (800301c <getAltitudeDataLog+0xb8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd fad3 	bl	8000568 <__aeabi_f2d>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4917      	ldr	r1, [pc, #92]	; (8003024 <getAltitudeDataLog+0xc0>)
 8002fc8:	7809      	ldrb	r1, [r1, #0]
 8002fca:	9104      	str	r1, [sp, #16]
 8002fcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002fd0:	e9cd 4500 	strd	r4, r5, [sp]
 8002fd4:	4642      	mov	r2, r8
 8002fd6:	464b      	mov	r3, r9
 8002fd8:	4913      	ldr	r1, [pc, #76]	; (8003028 <getAltitudeDataLog+0xc4>)
 8002fda:	4814      	ldr	r0, [pc, #80]	; (800302c <getAltitudeDataLog+0xc8>)
 8002fdc:	f00a ff60 	bl	800dea0 <siprintf>
	fres = sd_open_file(filename);
 8002fe0:	4813      	ldr	r0, [pc, #76]	; (8003030 <getAltitudeDataLog+0xcc>)
 8002fe2:	f000 fb0b 	bl	80035fc <sd_open_file>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <getAltitudeDataLog+0xd0>)
 8002fec:	701a      	strb	r2, [r3, #0]
	sd_write(&fil, msg_buffer_av);
 8002fee:	490f      	ldr	r1, [pc, #60]	; (800302c <getAltitudeDataLog+0xc8>)
 8002ff0:	4811      	ldr	r0, [pc, #68]	; (8003038 <getAltitudeDataLog+0xd4>)
 8002ff2:	f000 fb1b 	bl	800362c <sd_write>
	f_close(&fil);
 8002ff6:	4810      	ldr	r0, [pc, #64]	; (8003038 <getAltitudeDataLog+0xd4>)
 8002ff8:	f009 fc6b 	bl	800c8d2 <f_close>

#ifdef DEBUG
	HAL_UART_Transmit(&huart8, msg_buffer_av, strlen(msg_buffer_av), HAL_MAX_DELAY);
 8002ffc:	480b      	ldr	r0, [pc, #44]	; (800302c <getAltitudeDataLog+0xc8>)
 8002ffe:	f7fd f8f7 	bl	80001f0 <strlen>
 8003002:	4603      	mov	r3, r0
 8003004:	b29a      	uxth	r2, r3
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	4908      	ldr	r1, [pc, #32]	; (800302c <getAltitudeDataLog+0xc8>)
 800300c:	480b      	ldr	r0, [pc, #44]	; (800303c <getAltitudeDataLog+0xd8>)
 800300e:	f005 fe5e 	bl	8008cce <HAL_UART_Transmit>
#endif
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800301c:	200003a0 	.word	0x200003a0
 8003020:	2000025c 	.word	0x2000025c
 8003024:	200003a4 	.word	0x200003a4
 8003028:	080128ec 	.word	0x080128ec
 800302c:	2000028c 	.word	0x2000028c
 8003030:	20000388 	.word	0x20000388
 8003034:	20000fe8 	.word	0x20000fe8
 8003038:	20000fec 	.word	0x20000fec
 800303c:	20000f04 	.word	0x20000f04

08003040 <getAltitude>:

float getAltitude() {
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
	get_pressure(dev_ctx_lps, &pressure_hPa);
 8003046:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <getAltitude+0x90>)
 8003048:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <getAltitude+0x94>)
 800304a:	ca07      	ldmia	r2, {r0, r1, r2}
 800304c:	f7fe fad2 	bl	80015f4 <get_pressure>
	uint32_t altitude = 145442.1609 * (1.0 - pow(pressure_hPa/local_pressure, 0.190266436));
 8003050:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <getAltitude+0x94>)
 8003052:	ed93 7a00 	vldr	s14, [r3]
 8003056:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <getAltitude+0x98>)
 8003058:	edd3 7a00 	vldr	s15, [r3]
 800305c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003060:	ee16 0a90 	vmov	r0, s13
 8003064:	f7fd fa80 	bl	8000568 <__aeabi_f2d>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80030c0 <getAltitude+0x80>
 8003070:	ec43 2b10 	vmov	d0, r2, r3
 8003074:	f00e fc34 	bl	80118e0 <pow>
 8003078:	ec53 2b10 	vmov	r2, r3, d0
 800307c:	f04f 0000 	mov.w	r0, #0
 8003080:	4916      	ldr	r1, [pc, #88]	; (80030dc <getAltitude+0x9c>)
 8003082:	f7fd f911 	bl	80002a8 <__aeabi_dsub>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	a30e      	add	r3, pc, #56	; (adr r3, 80030c8 <getAltitude+0x88>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd fac0 	bl	8000618 <__aeabi_dmul>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fd92 	bl	8000bc8 <__aeabi_d2uiz>
 80030a4:	4603      	mov	r3, r0
 80030a6:	607b      	str	r3, [r7, #4]
	return altitude;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80030b2:	eeb0 0a67 	vmov.f32	s0, s15
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	f3af 8000 	nop.w
 80030c0:	8c12bfc3 	.word	0x8c12bfc3
 80030c4:	3fc85aa6 	.word	0x3fc85aa6
 80030c8:	4985f06f 	.word	0x4985f06f
 80030cc:	4101c111 	.word	0x4101c111
 80030d0:	20000fdc 	.word	0x20000fdc
 80030d4:	2000025c 	.word	0x2000025c
 80030d8:	20000264 	.word	0x20000264
 80030dc:	3ff00000 	.word	0x3ff00000

080030e0 <HAL_TIM_PeriodElapsedCallback>:

// timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80030e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e4:	b0a5      	sub	sp, #148	; 0x94
 80030e6:	af16      	add	r7, sp, #88	; 0x58
 80030e8:	6378      	str	r0, [r7, #52]	; 0x34
	if (htim->Instance == TIM4) {
 80030ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4aa0      	ldr	r2, [pc, #640]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	f040 8138 	bne.w	8003366 <HAL_TIM_PeriodElapsedCallback+0x286>

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 80030f6:	2201      	movs	r2, #1
 80030f8:	2102      	movs	r1, #2
 80030fa:	489e      	ldr	r0, [pc, #632]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80030fc:	f002 f808 	bl	8005110 <HAL_GPIO_WritePin>
		switch (curr_task)
 8003100:	4b9d      	ldr	r3, [pc, #628]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	2b08      	cmp	r3, #8
 800310a:	f200 811b 	bhi.w	8003344 <HAL_TIM_PeriodElapsedCallback+0x264>
 800310e:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	08003139 	.word	0x08003139
 8003118:	0800314f 	.word	0x0800314f
 800311c:	08003165 	.word	0x08003165
 8003120:	0800317b 	.word	0x0800317b
 8003124:	08003189 	.word	0x08003189
 8003128:	0800334d 	.word	0x0800334d
 800312c:	080031b7 	.word	0x080031b7
 8003130:	080032af 	.word	0x080032af
 8003134:	0800331f 	.word	0x0800331f
		{
			case 1:
				// lsm6dsl data
				get_acceleration(dev_ctx_lsm, acceleration_mg);
 8003138:	4a90      	ldr	r2, [pc, #576]	; (800337c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800313a:	4b91      	ldr	r3, [pc, #580]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800313c:	ca07      	ldmia	r2, {r0, r1, r2}
 800313e:	f7fe f977 	bl	8001430 <get_acceleration>
				get_angvelocity(dev_ctx_lsm, angular_rate_mdps);
 8003142:	4a8e      	ldr	r2, [pc, #568]	; (800337c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003144:	4b8f      	ldr	r3, [pc, #572]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003146:	ca07      	ldmia	r2, {r0, r1, r2}
 8003148:	f7fe f9b8 	bl	80014bc <get_angvelocity>
				break;
 800314c:	e0ff      	b.n	800334e <HAL_TIM_PeriodElapsedCallback+0x26e>

			case 2:
				// lps22hh data
				get_pressure(dev_ctx_lps, &pressure_hPa);
 800314e:	4a8e      	ldr	r2, [pc, #568]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003150:	4b8e      	ldr	r3, [pc, #568]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003152:	ca07      	ldmia	r2, {r0, r1, r2}
 8003154:	f7fe fa4e 	bl	80015f4 <get_pressure>
				get_temperature(dev_ctx_lps, &temperature_degC);
 8003158:	4a8b      	ldr	r2, [pc, #556]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800315a:	4b8d      	ldr	r3, [pc, #564]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800315c:	ca07      	ldmia	r2, {r0, r1, r2}
 800315e:	f7fe fa75 	bl	800164c <get_temperature>
				break;
 8003162:	e0f4      	b.n	800334e <HAL_TIM_PeriodElapsedCallback+0x26e>

			case 3:
				// rtc data
				HAL_RTC_GetTime(&hrtc, &stimeget, RTC_FORMAT_BIN);
 8003164:	2200      	movs	r2, #0
 8003166:	498b      	ldr	r1, [pc, #556]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003168:	488b      	ldr	r0, [pc, #556]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800316a:	f004 f80f 	bl	800718c <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &sdateget, RTC_FORMAT_BIN); // have to call GetDate for the time to be correct
 800316e:	2200      	movs	r2, #0
 8003170:	498a      	ldr	r1, [pc, #552]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003172:	4889      	ldr	r0, [pc, #548]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003174:	f004 f90f 	bl	8007396 <HAL_RTC_GetDate>
				break;
 8003178:	e0e9      	b.n	800334e <HAL_TIM_PeriodElapsedCallback+0x26e>

			case 4:
				// continuity on pyro channels (one hot encoded)
				continuity = get_continuity();
 800317a:	f000 f931 	bl	80033e0 <get_continuity>
 800317e:	4603      	mov	r3, r0
 8003180:	461a      	mov	r2, r3
 8003182:	4b87      	ldr	r3, [pc, #540]	; (80033a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003184:	701a      	strb	r2, [r3, #0]
				break;
 8003186:	e0e2      	b.n	800334e <HAL_TIM_PeriodElapsedCallback+0x26e>

			case 5:
				// propulsion data
				tank_temperature = Max31855_Read_Temp();
 8003188:	f7fd ff40 	bl	800100c <Max31855_Read_Temp>
 800318c:	eef0 7a40 	vmov.f32	s15, s0
 8003190:	4b84      	ldr	r3, [pc, #528]	; (80033a4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003192:	edc3 7a00 	vstr	s15, [r3]
				tank_pressure = prop_poll_pressure_transducer();
 8003196:	f000 f95b 	bl	8003450 <prop_poll_pressure_transducer>
 800319a:	eef0 7a40 	vmov.f32	s15, s0
 800319e:	4b82      	ldr	r3, [pc, #520]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80031a0:	edc3 7a00 	vstr	s15, [r3]
				valve_state = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port, IN_Prop_ActuatedVent_Feedback_Pin);
 80031a4:	2102      	movs	r1, #2
 80031a6:	4881      	ldr	r0, [pc, #516]	; (80033ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80031a8:	f001 ff9a 	bl	80050e0 <HAL_GPIO_ReadPin>
 80031ac:	4603      	mov	r3, r0
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b7f      	ldr	r3, [pc, #508]	; (80033b0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80031b2:	701a      	strb	r2, [r3, #0]
				break;
 80031b4:	e0cb      	b.n	800334e <HAL_TIM_PeriodElapsedCallback+0x26e>
				break;

			case 7:
				// avionics message
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
								acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 80031b6:	4b72      	ldr	r3, [pc, #456]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f9d4 	bl	8000568 <__aeabi_f2d>
 80031c0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
								acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 80031c4:	4b6e      	ldr	r3, [pc, #440]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80031c6:	685b      	ldr	r3, [r3, #4]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f9cd 	bl	8000568 <__aeabi_f2d>
 80031ce:	e9c7 0108 	strd	r0, r1, [r7, #32]
								acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 80031d2:	4b6b      	ldr	r3, [pc, #428]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80031d4:	689b      	ldr	r3, [r3, #8]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd f9c6 	bl	8000568 <__aeabi_f2d>
 80031dc:	e9c7 0106 	strd	r0, r1, [r7, #24]
								angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 80031e0:	4b68      	ldr	r3, [pc, #416]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd f9bf 	bl	8000568 <__aeabi_f2d>
 80031ea:	e9c7 0104 	strd	r0, r1, [r7, #16]
								angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 80031ee:	4b65      	ldr	r3, [pc, #404]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80031f0:	685b      	ldr	r3, [r3, #4]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd f9b8 	bl	8000568 <__aeabi_f2d>
 80031f8:	e9c7 0102 	strd	r0, r1, [r7, #8]
								angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 80031fc:	4b61      	ldr	r3, [pc, #388]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80031fe:	689b      	ldr	r3, [r3, #8]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd f9b1 	bl	8000568 <__aeabi_f2d>
 8003206:	4605      	mov	r5, r0
 8003208:	460e      	mov	r6, r1
 800320a:	4b60      	ldr	r3, [pc, #384]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f9aa 	bl	8000568 <__aeabi_f2d>
 8003214:	4682      	mov	sl, r0
 8003216:	468b      	mov	fp, r1
 8003218:	4b66      	ldr	r3, [pc, #408]	; (80033b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800321a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800321e:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003220:	e9d3 0100 	ldrd	r0, r1, [r3]
								pressure_hPa, latitude, longitude,
								stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8003224:	4b5b      	ldr	r3, [pc, #364]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003226:	785b      	ldrb	r3, [r3, #1]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003228:	633b      	str	r3, [r7, #48]	; 0x30
								stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 800322a:	4b5a      	ldr	r3, [pc, #360]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800322c:	789b      	ldrb	r3, [r3, #2]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	4b58      	ldr	r3, [pc, #352]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003232:	685c      	ldr	r4, [r3, #4]
 8003234:	4b5a      	ldr	r3, [pc, #360]	; (80033a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	4b5f      	ldr	r3, [pc, #380]	; (80033bc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	9314      	str	r3, [sp, #80]	; 0x50
 8003244:	9213      	str	r2, [sp, #76]	; 0x4c
 8003246:	9412      	str	r4, [sp, #72]	; 0x48
 8003248:	687c      	ldr	r4, [r7, #4]
 800324a:	9411      	str	r4, [sp, #68]	; 0x44
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	9310      	str	r3, [sp, #64]	; 0x40
 8003250:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003254:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003258:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800325c:	e9cd 5608 	strd	r5, r6, [sp, #32]
 8003260:	ed97 7b02 	vldr	d7, [r7, #8]
 8003264:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003268:	ed97 7b04 	vldr	d7, [r7, #16]
 800326c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003270:	ed97 7b06 	vldr	d7, [r7, #24]
 8003274:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003278:	ed97 7b08 	vldr	d7, [r7, #32]
 800327c:	ed8d 7b00 	vstr	d7, [sp]
 8003280:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003284:	494e      	ldr	r1, [pc, #312]	; (80033c0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003286:	484f      	ldr	r0, [pc, #316]	; (80033c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8003288:	f00a fe0a 	bl	800dea0 <siprintf>
								continuity, state);
				HAL_UART_Transmit(&huart3, msg_buffer_av, strlen((char *)msg_buffer_av), HAL_MAX_DELAY);
 800328c:	484d      	ldr	r0, [pc, #308]	; (80033c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800328e:	f7fc ffaf 	bl	80001f0 <strlen>
 8003292:	4603      	mov	r3, r0
 8003294:	b29a      	uxth	r2, r3
 8003296:	f04f 33ff 	mov.w	r3, #4294967295
 800329a:	494a      	ldr	r1, [pc, #296]	; (80033c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800329c:	484a      	ldr	r0, [pc, #296]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800329e:	f005 fd16 	bl	8008cce <HAL_UART_Transmit>
				memset(msg_buffer_av, 0, 200);
 80032a2:	22c8      	movs	r2, #200	; 0xc8
 80032a4:	2100      	movs	r1, #0
 80032a6:	4847      	ldr	r0, [pc, #284]	; (80033c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80032a8:	f009 feb8 	bl	800d01c <memset>
				break;
 80032ac:	e04f      	b.n	800334e <HAL_TIM_PeriodElapsedCallback+0x26e>

			case 8:
				// prop message
				sprintf((char *)msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 80032ae:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd f958 	bl	8000568 <__aeabi_f2d>
 80032b8:	4604      	mov	r4, r0
 80032ba:	460d      	mov	r5, r1
 80032bc:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd f951 	bl	8000568 <__aeabi_f2d>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4939      	ldr	r1, [pc, #228]	; (80033b0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80032cc:	7809      	ldrb	r1, [r1, #0]
 80032ce:	b2c9      	uxtb	r1, r1
 80032d0:	4608      	mov	r0, r1
								tank_pressure, tank_temperature, valve_state,
								stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds);
 80032d2:	4930      	ldr	r1, [pc, #192]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80032d4:	7849      	ldrb	r1, [r1, #1]
				sprintf((char *)msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 80032d6:	460e      	mov	r6, r1
								stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds);
 80032d8:	492e      	ldr	r1, [pc, #184]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80032da:	7889      	ldrb	r1, [r1, #2]
				sprintf((char *)msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 80032dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80032de:	492d      	ldr	r1, [pc, #180]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80032e0:	6849      	ldr	r1, [r1, #4]
 80032e2:	9105      	str	r1, [sp, #20]
 80032e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032e6:	9104      	str	r1, [sp, #16]
 80032e8:	9603      	str	r6, [sp, #12]
 80032ea:	9002      	str	r0, [sp, #8]
 80032ec:	e9cd 2300 	strd	r2, r3, [sp]
 80032f0:	4622      	mov	r2, r4
 80032f2:	462b      	mov	r3, r5
 80032f4:	4935      	ldr	r1, [pc, #212]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80032f6:	4836      	ldr	r0, [pc, #216]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80032f8:	f00a fdd2 	bl	800dea0 <siprintf>
				HAL_UART_Transmit(&huart3, msg_buffer_pr, strlen((char *)msg_buffer_pr), HAL_MAX_DELAY);
 80032fc:	4834      	ldr	r0, [pc, #208]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80032fe:	f7fc ff77 	bl	80001f0 <strlen>
 8003302:	4603      	mov	r3, r0
 8003304:	b29a      	uxth	r2, r3
 8003306:	f04f 33ff 	mov.w	r3, #4294967295
 800330a:	4931      	ldr	r1, [pc, #196]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800330c:	482e      	ldr	r0, [pc, #184]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800330e:	f005 fcde 	bl	8008cce <HAL_UART_Transmit>
				memset(msg_buffer_pr, 0, 50);
 8003312:	2232      	movs	r2, #50	; 0x32
 8003314:	2100      	movs	r1, #0
 8003316:	482e      	ldr	r0, [pc, #184]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8003318:	f009 fe80 	bl	800d01c <memset>
				break;
 800331c:	e017      	b.n	800334e <HAL_TIM_PeriodElapsedCallback+0x26e>

			case 9:
				// save to sd
				fres = sd_open_file(filename);
 800331e:	482d      	ldr	r0, [pc, #180]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8003320:	f000 f96c 	bl	80035fc <sd_open_file>
 8003324:	4603      	mov	r3, r0
 8003326:	461a      	mov	r2, r3
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800332a:	701a      	strb	r2, [r3, #0]
				sd_write(&fil, msg_buffer_av);
 800332c:	4925      	ldr	r1, [pc, #148]	; (80033c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800332e:	482b      	ldr	r0, [pc, #172]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003330:	f000 f97c 	bl	800362c <sd_write>
				sd_write(&fil, msg_buffer_pr);
 8003334:	4926      	ldr	r1, [pc, #152]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8003336:	4829      	ldr	r0, [pc, #164]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003338:	f000 f978 	bl	800362c <sd_write>
				f_close(&fil);
 800333c:	4827      	ldr	r0, [pc, #156]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800333e:	f009 fac8 	bl	800c8d2 <f_close>

				break;
 8003342:	e004      	b.n	800334e <HAL_TIM_PeriodElapsedCallback+0x26e>
				// radio send avionics
//				HAL_UART_Transmit(&huart3, msg_buffer_pr, strlen((char *)msg_buffer_pr), HAL_MAX_DELAY);
//				break;

			default:
				curr_task = 0;
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	e000      	b.n	800334e <HAL_TIM_PeriodElapsedCallback+0x26e>
				break;
 800334c:	bf00      	nop
		}
		curr_task++;
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	3301      	adds	r3, #1
 8003356:	b2da      	uxtb	r2, r3
 8003358:	4b07      	ldr	r3, [pc, #28]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800335a:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 800335c:	2200      	movs	r2, #0
 800335e:	2102      	movs	r1, #2
 8003360:	4804      	ldr	r0, [pc, #16]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003362:	f001 fed5 	bl	8005110 <HAL_GPIO_WritePin>

//		W25qxx_WriteBlock(msg_buffer, page_address, page_offset, strlen((const char *)msg_buffer));
//		flash_write_address += strlen((const char *)msg_buffer);

	}
}
 8003366:	bf00      	nop
 8003368:	373c      	adds	r7, #60	; 0x3c
 800336a:	46bd      	mov	sp, r7
 800336c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003370:	40000800 	.word	0x40000800
 8003374:	40020800 	.word	0x40020800
 8003378:	20000395 	.word	0x20000395
 800337c:	20000fd0 	.word	0x20000fd0
 8003380:	20000244 	.word	0x20000244
 8003384:	20000250 	.word	0x20000250
 8003388:	20000fdc 	.word	0x20000fdc
 800338c:	2000025c 	.word	0x2000025c
 8003390:	20000260 	.word	0x20000260
 8003394:	20000274 	.word	0x20000274
 8003398:	20000dd8 	.word	0x20000dd8
 800339c:	20000288 	.word	0x20000288
 80033a0:	20000242 	.word	0x20000242
 80033a4:	20000268 	.word	0x20000268
 80033a8:	2000026c 	.word	0x2000026c
 80033ac:	40020400 	.word	0x40020400
 80033b0:	20000270 	.word	0x20000270
 80033b4:	20000f88 	.word	0x20000f88
 80033b8:	20000df8 	.word	0x20000df8
 80033bc:	20000243 	.word	0x20000243
 80033c0:	08012900 	.word	0x08012900
 80033c4:	2000028c 	.word	0x2000028c
 80033c8:	200009cc 	.word	0x200009cc
 80033cc:	0801295c 	.word	0x0801295c
 80033d0:	20000354 	.word	0x20000354
 80033d4:	20000388 	.word	0x20000388
 80033d8:	20000fe8 	.word	0x20000fe8
 80033dc:	20000fec 	.word	0x20000fec

080033e0 <get_continuity>:
	return 0;

}


uint8_t get_continuity() {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0

	// read pins
	GPIO_PinState drogue = HAL_GPIO_ReadPin(Rcov_Cont_Drogue_GPIO_Port, Rcov_Cont_Drogue_Pin);
 80033e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033ea:	4817      	ldr	r0, [pc, #92]	; (8003448 <get_continuity+0x68>)
 80033ec:	f001 fe78 	bl	80050e0 <HAL_GPIO_ReadPin>
 80033f0:	4603      	mov	r3, r0
 80033f2:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState main = HAL_GPIO_ReadPin(Rcov_Cont_Main_GPIO_Port, Rcov_Cont_Main_Pin);
 80033f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033f8:	4813      	ldr	r0, [pc, #76]	; (8003448 <get_continuity+0x68>)
 80033fa:	f001 fe71 	bl	80050e0 <HAL_GPIO_ReadPin>
 80033fe:	4603      	mov	r3, r0
 8003400:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState prop_1 = HAL_GPIO_ReadPin(Prop_Cont_1_GPIO_Port, Prop_Cont_1_Pin);
 8003402:	2101      	movs	r1, #1
 8003404:	4810      	ldr	r0, [pc, #64]	; (8003448 <get_continuity+0x68>)
 8003406:	f001 fe6b 	bl	80050e0 <HAL_GPIO_ReadPin>
 800340a:	4603      	mov	r3, r0
 800340c:	717b      	strb	r3, [r7, #5]
	GPIO_PinState prop_2 = HAL_GPIO_ReadPin(Prop_Cont_2_GPIO_Port, Prop_Cont_2_Pin);
 800340e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003412:	480e      	ldr	r0, [pc, #56]	; (800344c <get_continuity+0x6c>)
 8003414:	f001 fe64 	bl	80050e0 <HAL_GPIO_ReadPin>
 8003418:	4603      	mov	r3, r0
 800341a:	713b      	strb	r3, [r7, #4]

	// assign one-hot encoded result (apparently you can multiply enums?)
	uint8_t continuity = (drogue) + (main * 2) + (prop_1 * 4) + (prop_2 * 8);
 800341c:	793b      	ldrb	r3, [r7, #4]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	b2da      	uxtb	r2, r3
 8003422:	797b      	ldrb	r3, [r7, #5]
 8003424:	4413      	add	r3, r2
 8003426:	b2db      	uxtb	r3, r3
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	79bb      	ldrb	r3, [r7, #6]
 800342e:	4413      	add	r3, r2
 8003430:	b2db      	uxtb	r3, r3
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	b2da      	uxtb	r2, r3
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	4413      	add	r3, r2
 800343a:	70fb      	strb	r3, [r7, #3]

	return continuity;
 800343c:	78fb      	ldrb	r3, [r7, #3]

}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40021800 	.word	0x40021800
 800344c:	40021400 	.word	0x40021400

08003450 <prop_poll_pressure_transducer>:

float prop_poll_pressure_transducer(void) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0

	// reading adc
	HAL_ADC_Start(&hadc1);
 8003456:	4816      	ldr	r0, [pc, #88]	; (80034b0 <prop_poll_pressure_transducer+0x60>)
 8003458:	f000 ffaa 	bl	80043b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800345c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003460:	4813      	ldr	r0, [pc, #76]	; (80034b0 <prop_poll_pressure_transducer+0x60>)
 8003462:	f001 f89e 	bl	80045a2 <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(&hadc1);
 8003466:	4812      	ldr	r0, [pc, #72]	; (80034b0 <prop_poll_pressure_transducer+0x60>)
 8003468:	f001 f91f 	bl	80046aa <HAL_ADC_GetValue>
 800346c:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 800346e:	4810      	ldr	r0, [pc, #64]	; (80034b0 <prop_poll_pressure_transducer+0x60>)
 8003470:	f001 f864 	bl	800453c <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0); // assuming 12 bits
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fd f855 	bl	8000524 <__aeabi_ui2d>
 800347a:	a30b      	add	r3, pc, #44	; (adr r3, 80034a8 <prop_poll_pressure_transducer+0x58>)
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f7fd f9f4 	bl	800086c <__aeabi_ddiv>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4610      	mov	r0, r2
 800348a:	4619      	mov	r1, r3
 800348c:	f7fd fbbc 	bl	8000c08 <__aeabi_d2f>
 8003490:	4603      	mov	r3, r0
 8003492:	603b      	str	r3, [r7, #0]

	// convert using transfer function
	// TODO

	return voltage;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	ee07 3a90 	vmov	s15, r3
}
 800349a:	eeb0 0a67 	vmov.f32	s0, s15
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	f3af 8000 	nop.w
 80034a8:	00000000 	.word	0x00000000
 80034ac:	40affe00 	.word	0x40affe00
 80034b0:	20000c90 	.word	0x20000c90

080034b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80034b8:	2201      	movs	r2, #1
 80034ba:	2104      	movs	r1, #4
 80034bc:	4803      	ldr	r0, [pc, #12]	; (80034cc <Error_Handler+0x18>)
 80034be:	f001 fe27 	bl	8005110 <HAL_GPIO_WritePin>
	buzz_failure();
 80034c2:	f7fe fdeb 	bl	800209c <buzz_failure>
	__BKPT();
 80034c6:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40020800 	.word	0x40020800

080034d0 <myprintf>:
extern FIL fil;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 80034d0:	b40f      	push	{r0, r1, r2, r3}
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034e6:	4805      	ldr	r0, [pc, #20]	; (80034fc <myprintf+0x2c>)
 80034e8:	f00b fc42 	bl	800ed70 <vsniprintf>
  va_end(args);

//  int len = strlen(buffer);
//  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, len, -1);

}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034f6:	b004      	add	sp, #16
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	200003a8 	.word	0x200003a8

08003500 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 800350c:	2201      	movs	r2, #1
 800350e:	4932      	ldr	r1, [pc, #200]	; (80035d8 <sd_init_dynamic_filename+0xd8>)
 8003510:	4832      	ldr	r0, [pc, #200]	; (80035dc <sd_init_dynamic_filename+0xdc>)
 8003512:	f008 fde7 	bl	800c0e4 <f_mount>
 8003516:	4603      	mov	r3, r0
 8003518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 800351c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8003524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003528:	4619      	mov	r1, r3
 800352a:	482d      	ldr	r0, [pc, #180]	; (80035e0 <sd_init_dynamic_filename+0xe0>)
 800352c:	f7ff ffd0 	bl	80034d0 <myprintf>
		return fres;
 8003530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003534:	e04b      	b.n	80035ce <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 800353a:	f107 0320 	add.w	r3, r7, #32
 800353e:	461a      	mov	r2, r3
 8003540:	68f9      	ldr	r1, [r7, #12]
 8003542:	4825      	ldr	r0, [pc, #148]	; (80035d8 <sd_init_dynamic_filename+0xd8>)
 8003544:	f000 f89c 	bl	8003680 <scan_files>
 8003548:	4603      	mov	r3, r0
 800354a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	f107 0310 	add.w	r3, r7, #16
 8003556:	4923      	ldr	r1, [pc, #140]	; (80035e4 <sd_init_dynamic_filename+0xe4>)
 8003558:	4618      	mov	r0, r3
 800355a:	f00a fca1 	bl	800dea0 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 800355e:	f107 0310 	add.w	r3, r7, #16
 8003562:	4619      	mov	r1, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f00a fcfe 	bl	800df66 <strcpy>
 800356a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800356c:	f107 0310 	add.w	r3, r7, #16
 8003570:	221a      	movs	r2, #26
 8003572:	4619      	mov	r1, r3
 8003574:	481c      	ldr	r0, [pc, #112]	; (80035e8 <sd_init_dynamic_filename+0xe8>)
 8003576:	f008 fdfb 	bl	800c170 <f_open>
 800357a:	4603      	mov	r3, r0
 800357c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8003580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003584:	2b00      	cmp	r3, #0
 8003586:	d11a      	bne.n	80035be <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8003588:	4818      	ldr	r0, [pc, #96]	; (80035ec <sd_init_dynamic_filename+0xec>)
 800358a:	f7ff ffa1 	bl	80034d0 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 800358e:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <sd_init_dynamic_filename+0xe8>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	4619      	mov	r1, r3
 8003594:	4814      	ldr	r0, [pc, #80]	; (80035e8 <sd_init_dynamic_filename+0xe8>)
 8003596:	f009 f9c6 	bl	800c926 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 800359a:	4915      	ldr	r1, [pc, #84]	; (80035f0 <sd_init_dynamic_filename+0xf0>)
 800359c:	4815      	ldr	r0, [pc, #84]	; (80035f4 <sd_init_dynamic_filename+0xf4>)
 800359e:	f00a fc7f 	bl	800dea0 <siprintf>
	sd_write(&fil, msg_buffer);
 80035a2:	4914      	ldr	r1, [pc, #80]	; (80035f4 <sd_init_dynamic_filename+0xf4>)
 80035a4:	4810      	ldr	r0, [pc, #64]	; (80035e8 <sd_init_dynamic_filename+0xe8>)
 80035a6:	f000 f841 	bl	800362c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	480e      	ldr	r0, [pc, #56]	; (80035e8 <sd_init_dynamic_filename+0xe8>)
 80035ae:	f000 f83d 	bl	800362c <sd_write>
	f_close(&fil);
 80035b2:	480d      	ldr	r0, [pc, #52]	; (80035e8 <sd_init_dynamic_filename+0xe8>)
 80035b4:	f009 f98d 	bl	800c8d2 <f_close>

	return fres;
 80035b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035bc:	e007      	b.n	80035ce <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 80035be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035c2:	4619      	mov	r1, r3
 80035c4:	480c      	ldr	r0, [pc, #48]	; (80035f8 <sd_init_dynamic_filename+0xf8>)
 80035c6:	f7ff ff83 	bl	80034d0 <myprintf>
		return fres;
 80035ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3728      	adds	r7, #40	; 0x28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	080129c8 	.word	0x080129c8
 80035dc:	20000a0c 	.word	0x20000a0c
 80035e0:	080129cc 	.word	0x080129cc
 80035e4:	08012a48 	.word	0x08012a48
 80035e8:	20000fec 	.word	0x20000fec
 80035ec:	080129e4 	.word	0x080129e4
 80035f0:	08012a28 	.word	0x08012a28
 80035f4:	2000121c 	.word	0x2000121c
 80035f8:	08012a14 	.word	0x08012a14

080035fc <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8003604:	2212      	movs	r2, #18
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4807      	ldr	r0, [pc, #28]	; (8003628 <sd_open_file+0x2c>)
 800360a:	f008 fdb1 	bl	800c170 <f_open>
 800360e:	4603      	mov	r3, r0
 8003610:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <sd_open_file+0x2c>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	4619      	mov	r1, r3
 8003618:	4803      	ldr	r0, [pc, #12]	; (8003628 <sd_open_file+0x2c>)
 800361a:	f009 f984 	bl	800c926 <f_lseek>

	return fres;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000fec 	.word	0x20000fec

0800362c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8003636:	6838      	ldr	r0, [r7, #0]
 8003638:	f7fc fdda 	bl	80001f0 <strlen>
 800363c:	4602      	mov	r2, r0
 800363e:	f107 0308 	add.w	r3, r7, #8
 8003642:	6839      	ldr	r1, [r7, #0]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f008 ff51 	bl	800c4ec <f_write>
 800364a:	4603      	mov	r3, r0
 800364c:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d107      	bne.n	8003664 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4619      	mov	r1, r3
 8003658:	4807      	ldr	r0, [pc, #28]	; (8003678 <sd_write+0x4c>)
 800365a:	f7ff ff39 	bl	80034d0 <myprintf>
		return bytesWrote;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	b25b      	sxtb	r3, r3
 8003662:	e004      	b.n	800366e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8003664:	4805      	ldr	r0, [pc, #20]	; (800367c <sd_write+0x50>)
 8003666:	f7ff ff33 	bl	80034d0 <myprintf>
		return -1;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	08012a54 	.word	0x08012a54
 800367c:	08012a78 	.word	0x08012a78

08003680 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8003680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003682:	b099      	sub	sp, #100	; 0x64
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	466b      	mov	r3, sp
 800368e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8003690:	68b8      	ldr	r0, [r7, #8]
 8003692:	f7fc fdad 	bl	80001f0 <strlen>
 8003696:	4603      	mov	r3, r0
 8003698:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 800369c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 80036a0:	4623      	mov	r3, r4
 80036a2:	3b01      	subs	r3, #1
 80036a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80036a6:	b2e0      	uxtb	r0, r4
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	00cb      	lsls	r3, r1, #3
 80036b6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80036ba:	00c2      	lsls	r2, r0, #3
 80036bc:	b2e0      	uxtb	r0, r4
 80036be:	f04f 0100 	mov.w	r1, #0
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	00cb      	lsls	r3, r1, #3
 80036cc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80036d0:	00c2      	lsls	r2, r0, #3
 80036d2:	4623      	mov	r3, r4
 80036d4:	3307      	adds	r3, #7
 80036d6:	08db      	lsrs	r3, r3, #3
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	ebad 0d03 	sub.w	sp, sp, r3
 80036de:	466b      	mov	r3, sp
 80036e0:	3300      	adds	r3, #0
 80036e2:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 80036e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e6:	4619      	mov	r1, r3
 80036e8:	68b8      	ldr	r0, [r7, #8]
 80036ea:	f000 f8ff 	bl	80038ec <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 80036f8:	f107 0318 	add.w	r3, r7, #24
 80036fc:	68f9      	ldr	r1, [r7, #12]
 80036fe:	4618      	mov	r0, r3
 8003700:	f009 fb1a 	bl	800cd38 <f_opendir>
 8003704:	4603      	mov	r3, r0
 8003706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 800370a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800370e:	2b00      	cmp	r3, #0
 8003710:	d16c      	bne.n	80037ec <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003712:	f107 0318 	add.w	r3, r7, #24
 8003716:	4939      	ldr	r1, [pc, #228]	; (80037fc <scan_files+0x17c>)
 8003718:	4618      	mov	r0, r3
 800371a:	f009 fba6 	bl	800ce6a <f_readdir>
 800371e:	4603      	mov	r3, r0
 8003720:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8003724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003728:	2b00      	cmp	r3, #0
 800372a:	d15a      	bne.n	80037e2 <scan_files+0x162>
 800372c:	4b33      	ldr	r3, [pc, #204]	; (80037fc <scan_files+0x17c>)
 800372e:	7a5b      	ldrb	r3, [r3, #9]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d056      	beq.n	80037e2 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8003734:	4b31      	ldr	r3, [pc, #196]	; (80037fc <scan_files+0x17c>)
 8003736:	7a1b      	ldrb	r3, [r3, #8]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d14e      	bne.n	80037de <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8003740:	466b      	mov	r3, sp
 8003742:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8003744:	482e      	ldr	r0, [pc, #184]	; (8003800 <scan_files+0x180>)
 8003746:	f7fc fd53 	bl	80001f0 <strlen>
 800374a:	4604      	mov	r4, r0
 800374c:	4623      	mov	r3, r4
 800374e:	3b01      	subs	r3, #1
 8003750:	653b      	str	r3, [r7, #80]	; 0x50
 8003752:	4620      	mov	r0, r4
 8003754:	f04f 0100 	mov.w	r1, #0
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	00cb      	lsls	r3, r1, #3
 8003762:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003766:	00c2      	lsls	r2, r0, #3
 8003768:	4620      	mov	r0, r4
 800376a:	f04f 0100 	mov.w	r1, #0
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	00cb      	lsls	r3, r1, #3
 8003778:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800377c:	00c2      	lsls	r2, r0, #3
 800377e:	1de3      	adds	r3, r4, #7
 8003780:	08db      	lsrs	r3, r3, #3
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	ebad 0d03 	sub.w	sp, sp, r3
 8003788:	466b      	mov	r3, sp
 800378a:	3300      	adds	r3, #0
 800378c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 800378e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003790:	4619      	mov	r1, r3
 8003792:	481b      	ldr	r0, [pc, #108]	; (8003800 <scan_files+0x180>)
 8003794:	f000 f8aa 	bl	80038ec <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8003798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800379e:	4619      	mov	r1, r3
 80037a0:	4817      	ldr	r0, [pc, #92]	; (8003800 <scan_files+0x180>)
 80037a2:	f00a fbe8 	bl	800df76 <strncmp>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 80037ac:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d112      	bne.n	80037da <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 80037b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b6:	f107 0214 	add.w	r2, r7, #20
 80037ba:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f820 	bl	8003804 <extract_filename_suffix>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d202      	bcs.n	80037da <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	46b5      	mov	sp, r6
 80037dc:	e799      	b.n	8003712 <scan_files+0x92>
            	continue; // don't enter directory
 80037de:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80037e0:	e797      	b.n	8003712 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 80037e2:	f107 0318 	add.w	r3, r7, #24
 80037e6:	4618      	mov	r0, r3
 80037e8:	f009 fb19 	bl	800ce1e <f_closedir>
    }

    return res;
 80037ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037f0:	46ad      	mov	sp, r5
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3764      	adds	r7, #100	; 0x64
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200004a8 	.word	0x200004a8
 8003800:	200004b1 	.word	0x200004b1

08003804 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8003804:	b5b0      	push	{r4, r5, r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	460b      	mov	r3, r1
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	72fb      	strb	r3, [r7, #11]
 8003812:	466b      	mov	r3, sp
 8003814:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7fc fcea 	bl	80001f0 <strlen>
 800381c:	4603      	mov	r3, r0
 800381e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8003820:	2308      	movs	r3, #8
 8003822:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8003824:	7f7c      	ldrb	r4, [r7, #29]
 8003826:	4623      	mov	r3, r4
 8003828:	3b01      	subs	r3, #1
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	b2e0      	uxtb	r0, r4
 800382e:	f04f 0100 	mov.w	r1, #0
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	00cb      	lsls	r3, r1, #3
 800383c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003840:	00c2      	lsls	r2, r0, #3
 8003842:	b2e0      	uxtb	r0, r4
 8003844:	f04f 0100 	mov.w	r1, #0
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	00cb      	lsls	r3, r1, #3
 8003852:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003856:	00c2      	lsls	r2, r0, #3
 8003858:	4623      	mov	r3, r4
 800385a:	3307      	adds	r3, #7
 800385c:	08db      	lsrs	r3, r3, #3
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	ebad 0d03 	sub.w	sp, sp, r3
 8003864:	466b      	mov	r3, sp
 8003866:	3300      	adds	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 800386a:	2300      	movs	r3, #0
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e014      	b.n	800389a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8003870:	7afb      	ldrb	r3, [r7, #11]
 8003872:	1e5a      	subs	r2, r3, #1
 8003874:	7ffb      	ldrb	r3, [r7, #31]
 8003876:	441a      	add	r2, r3
 8003878:	7fbb      	ldrb	r3, [r7, #30]
 800387a:	3b01      	subs	r3, #1
 800387c:	429a      	cmp	r2, r3
 800387e:	da11      	bge.n	80038a4 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8003880:	7afa      	ldrb	r2, [r7, #11]
 8003882:	7ffb      	ldrb	r3, [r7, #31]
 8003884:	4413      	add	r3, r2
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	441a      	add	r2, r3
 800388c:	7ffb      	ldrb	r3, [r7, #31]
 800388e:	7811      	ldrb	r1, [r2, #0]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8003894:	7ffb      	ldrb	r3, [r7, #31]
 8003896:	3301      	adds	r3, #1
 8003898:	77fb      	strb	r3, [r7, #31]
 800389a:	7ffa      	ldrb	r2, [r7, #31]
 800389c:	7f7b      	ldrb	r3, [r7, #29]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d3e6      	bcc.n	8003870 <extract_filename_suffix+0x6c>
 80038a2:	e000      	b.n	80038a6 <extract_filename_suffix+0xa2>
		}
		else break;
 80038a4:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f107 0110 	add.w	r1, r7, #16
 80038ac:	220a      	movs	r2, #10
 80038ae:	4618      	mov	r0, r3
 80038b0:	f00b fa28 	bl	800ed04 <strtol>
 80038b4:	4603      	mov	r3, r0
 80038b6:	461a      	mov	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d00a      	beq.n	80038da <extract_filename_suffix+0xd6>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038cc:	d005      	beq.n	80038da <extract_filename_suffix+0xd6>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <extract_filename_suffix+0xda>
	{
		return 1;
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <extract_filename_suffix+0xdc>
	}

	return 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	46ad      	mov	sp, r5
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080038ec <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	e019      	b.n	8003930 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	73bb      	strb	r3, [r7, #14]
 8003906:	7bbb      	ldrb	r3, [r7, #14]
 8003908:	3301      	adds	r3, #1
 800390a:	4a0f      	ldr	r2, [pc, #60]	; (8003948 <str2upper+0x5c>)
 800390c:	4413      	add	r3, r2
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d102      	bne.n	800391e <str2upper+0x32>
 8003918:	7bbb      	ldrb	r3, [r7, #14]
 800391a:	3b20      	subs	r3, #32
 800391c:	e000      	b.n	8003920 <str2upper+0x34>
 800391e:	7bbb      	ldrb	r3, [r7, #14]
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	440a      	add	r2, r1
 8003926:	b2db      	uxtb	r3, r3
 8003928:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	3301      	adds	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
 8003930:	7bfc      	ldrb	r4, [r7, #15]
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fc fc5c 	bl	80001f0 <strlen>
 8003938:	4603      	mov	r3, r0
 800393a:	429c      	cmp	r4, r3
 800393c:	d3de      	bcc.n	80038fc <str2upper+0x10>
	}
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	bd90      	pop	{r4, r7, pc}
 8003948:	08012ba4 	.word	0x08012ba4

0800394c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <HAL_MspInit+0x4c>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <HAL_MspInit+0x4c>)
 800395c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003960:	6453      	str	r3, [r2, #68]	; 0x44
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <HAL_MspInit+0x4c>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	603b      	str	r3, [r7, #0]
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_MspInit+0x4c>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	4a08      	ldr	r2, [pc, #32]	; (8003998 <HAL_MspInit+0x4c>)
 8003978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397c:	6413      	str	r3, [r2, #64]	; 0x40
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_MspInit+0x4c>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800

0800399c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	; 0x28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <HAL_ADC_MspInit+0x7c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d127      	bne.n	8003a0e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <HAL_ADC_MspInit+0x80>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <HAL_ADC_MspInit+0x80>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039cc:	6453      	str	r3, [r2, #68]	; 0x44
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <HAL_ADC_MspInit+0x80>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <HAL_ADC_MspInit+0x80>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <HAL_ADC_MspInit+0x80>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ea:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <HAL_ADC_MspInit+0x80>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80039f6:	2340      	movs	r3, #64	; 0x40
 80039f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039fa:	2303      	movs	r3, #3
 80039fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	4619      	mov	r1, r3
 8003a08:	4805      	ldr	r0, [pc, #20]	; (8003a20 <HAL_ADC_MspInit+0x84>)
 8003a0a:	f001 f9bd 	bl	8004d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a0e:	bf00      	nop
 8003a10:	3728      	adds	r7, #40	; 0x28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40012000 	.word	0x40012000
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40020000 	.word	0x40020000

08003a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	; 0x30
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 031c 	add.w	r3, r7, #28
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a42      	ldr	r2, [pc, #264]	; (8003b4c <HAL_I2C_MspInit+0x128>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d12d      	bne.n	8003aa2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	4b41      	ldr	r3, [pc, #260]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	4a40      	ldr	r2, [pc, #256]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003a50:	f043 0302 	orr.w	r3, r3, #2
 8003a54:	6313      	str	r3, [r2, #48]	; 0x30
 8003a56:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003a62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a68:	2312      	movs	r3, #18
 8003a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a70:	2303      	movs	r3, #3
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003a74:	2304      	movs	r3, #4
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a78:	f107 031c 	add.w	r3, r7, #28
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4835      	ldr	r0, [pc, #212]	; (8003b54 <HAL_I2C_MspInit+0x130>)
 8003a80:	f001 f982 	bl	8004d88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	4b31      	ldr	r3, [pc, #196]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	4a30      	ldr	r2, [pc, #192]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003a8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a92:	6413      	str	r3, [r2, #64]	; 0x40
 8003a94:	4b2e      	ldr	r3, [pc, #184]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003aa0:	e050      	b.n	8003b44 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2c      	ldr	r2, [pc, #176]	; (8003b58 <HAL_I2C_MspInit+0x134>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d14b      	bne.n	8003b44 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003ab6:	f043 0304 	orr.w	r3, r3, #4
 8003aba:	6313      	str	r3, [r2, #48]	; 0x30
 8003abc:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aea:	2312      	movs	r3, #18
 8003aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003aee:	2301      	movs	r3, #1
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af2:	2303      	movs	r3, #3
 8003af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003af6:	2304      	movs	r3, #4
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003afa:	f107 031c 	add.w	r3, r7, #28
 8003afe:	4619      	mov	r1, r3
 8003b00:	4816      	ldr	r0, [pc, #88]	; (8003b5c <HAL_I2C_MspInit+0x138>)
 8003b02:	f001 f941 	bl	8004d88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b0c:	2312      	movs	r3, #18
 8003b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b10:	2301      	movs	r3, #1
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b14:	2303      	movs	r3, #3
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b18:	2304      	movs	r3, #4
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1c:	f107 031c 	add.w	r3, r7, #28
 8003b20:	4619      	mov	r1, r3
 8003b22:	480f      	ldr	r0, [pc, #60]	; (8003b60 <HAL_I2C_MspInit+0x13c>)
 8003b24:	f001 f930 	bl	8004d88 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003b32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b36:	6413      	str	r3, [r2, #64]	; 0x40
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_I2C_MspInit+0x12c>)
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	68bb      	ldr	r3, [r7, #8]
}
 8003b44:	bf00      	nop
 8003b46:	3730      	adds	r7, #48	; 0x30
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40005800 	.word	0x40005800
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40020400 	.word	0x40020400
 8003b58:	40005c00 	.word	0x40005c00
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40020000 	.word	0x40020000

08003b64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a05      	ldr	r2, [pc, #20]	; (8003b88 <HAL_RTC_MspInit+0x24>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d102      	bne.n	8003b7c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_RTC_MspInit+0x28>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	40002800 	.word	0x40002800
 8003b8c:	42470e3c 	.word	0x42470e3c

08003b90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08e      	sub	sp, #56	; 0x38
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a4c      	ldr	r2, [pc, #304]	; (8003ce0 <HAL_SPI_MspInit+0x150>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d12d      	bne.n	8003c0e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	623b      	str	r3, [r7, #32]
 8003bb6:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	4a4a      	ldr	r2, [pc, #296]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc2:	4b48      	ldr	r3, [pc, #288]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bca:	623b      	str	r3, [r7, #32]
 8003bcc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	4b44      	ldr	r3, [pc, #272]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	4a43      	ldr	r2, [pc, #268]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bde:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003bea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bfc:	2305      	movs	r3, #5
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c04:	4619      	mov	r1, r3
 8003c06:	4838      	ldr	r0, [pc, #224]	; (8003ce8 <HAL_SPI_MspInit+0x158>)
 8003c08:	f001 f8be 	bl	8004d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003c0c:	e064      	b.n	8003cd8 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a36      	ldr	r2, [pc, #216]	; (8003cec <HAL_SPI_MspInit+0x15c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d12d      	bne.n	8003c74 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	4a30      	ldr	r2, [pc, #192]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003c22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c26:	6453      	str	r3, [r2, #68]	; 0x44
 8003c28:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003c3e:	f043 0310 	orr.w	r3, r3, #16
 8003c42:	6313      	str	r3, [r2, #48]	; 0x30
 8003c44:	4b27      	ldr	r3, [pc, #156]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003c50:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c56:	2302      	movs	r3, #2
 8003c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003c62:	2305      	movs	r3, #5
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4820      	ldr	r0, [pc, #128]	; (8003cf0 <HAL_SPI_MspInit+0x160>)
 8003c6e:	f001 f88b 	bl	8004d88 <HAL_GPIO_Init>
}
 8003c72:	e031      	b.n	8003cd8 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <HAL_SPI_MspInit+0x164>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d12c      	bne.n	8003cd8 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	4b18      	ldr	r3, [pc, #96]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	4a17      	ldr	r2, [pc, #92]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003c88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a10      	ldr	r2, [pc, #64]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003ca4:	f043 0320 	orr.w	r3, r3, #32
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <HAL_SPI_MspInit+0x154>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003cb6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003cc8:	2305      	movs	r3, #5
 8003cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4809      	ldr	r0, [pc, #36]	; (8003cf8 <HAL_SPI_MspInit+0x168>)
 8003cd4:	f001 f858 	bl	8004d88 <HAL_GPIO_Init>
}
 8003cd8:	bf00      	nop
 8003cda:	3738      	adds	r7, #56	; 0x38
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40003800 	.word	0x40003800
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40020400 	.word	0x40020400
 8003cec:	40013400 	.word	0x40013400
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40015000 	.word	0x40015000
 8003cf8:	40021400 	.word	0x40021400

08003cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0c:	d10e      	bne.n	8003d2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <HAL_TIM_Base_MspInit+0x70>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <HAL_TIM_Base_MspInit+0x70>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <HAL_TIM_Base_MspInit+0x70>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d2a:	e01a      	b.n	8003d62 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a0f      	ldr	r2, [pc, #60]	; (8003d70 <HAL_TIM_Base_MspInit+0x74>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d115      	bne.n	8003d62 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_TIM_Base_MspInit+0x70>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	4a0b      	ldr	r2, [pc, #44]	; (8003d6c <HAL_TIM_Base_MspInit+0x70>)
 8003d40:	f043 0304 	orr.w	r3, r3, #4
 8003d44:	6413      	str	r3, [r2, #64]	; 0x40
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_TIM_Base_MspInit+0x70>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	2100      	movs	r1, #0
 8003d56:	201e      	movs	r0, #30
 8003d58:	f000 ffbd 	bl	8004cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d5c:	201e      	movs	r0, #30
 8003d5e:	f000 ffd6 	bl	8004d0e <HAL_NVIC_EnableIRQ>
}
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40000800 	.word	0x40000800

08003d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d94:	d11d      	bne.n	8003dd2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <HAL_TIM_MspPostInit+0x68>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	4a0f      	ldr	r2, [pc, #60]	; (8003ddc <HAL_TIM_MspPostInit+0x68>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_TIM_MspPostInit+0x68>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8003db2:	2304      	movs	r3, #4
 8003db4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db6:	2302      	movs	r3, #2
 8003db8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8003dc6:	f107 030c 	add.w	r3, r7, #12
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4804      	ldr	r0, [pc, #16]	; (8003de0 <HAL_TIM_MspPostInit+0x6c>)
 8003dce:	f000 ffdb 	bl	8004d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003dd2:	bf00      	nop
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40020000 	.word	0x40020000

08003de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08e      	sub	sp, #56	; 0x38
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a4f      	ldr	r2, [pc, #316]	; (8003f40 <HAL_UART_MspInit+0x15c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d12c      	bne.n	8003e60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	623b      	str	r3, [r7, #32]
 8003e0a:	4b4e      	ldr	r3, [pc, #312]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	4a4d      	ldr	r2, [pc, #308]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e14:	6413      	str	r3, [r2, #64]	; 0x40
 8003e16:	4b4b      	ldr	r3, [pc, #300]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e1e:	623b      	str	r3, [r7, #32]
 8003e20:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	4b47      	ldr	r3, [pc, #284]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	4a46      	ldr	r2, [pc, #280]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003e2c:	f043 0310 	orr.w	r3, r3, #16
 8003e30:	6313      	str	r3, [r2, #48]	; 0x30
 8003e32:	4b44      	ldr	r3, [pc, #272]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e42:	2302      	movs	r3, #2
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e46:	2301      	movs	r3, #1
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003e4e:	2308      	movs	r3, #8
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e56:	4619      	mov	r1, r3
 8003e58:	483b      	ldr	r0, [pc, #236]	; (8003f48 <HAL_UART_MspInit+0x164>)
 8003e5a:	f000 ff95 	bl	8004d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003e5e:	e06b      	b.n	8003f38 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a39      	ldr	r2, [pc, #228]	; (8003f4c <HAL_UART_MspInit+0x168>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d12d      	bne.n	8003ec6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	4b35      	ldr	r3, [pc, #212]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	4a34      	ldr	r2, [pc, #208]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e78:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7a:	4b32      	ldr	r3, [pc, #200]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	4b2e      	ldr	r3, [pc, #184]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	4a2d      	ldr	r2, [pc, #180]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003e90:	f043 0308 	orr.w	r3, r3, #8
 8003e94:	6313      	str	r3, [r2, #48]	; 0x30
 8003e96:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8003ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003eb4:	2307      	movs	r3, #7
 8003eb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4824      	ldr	r0, [pc, #144]	; (8003f50 <HAL_UART_MspInit+0x16c>)
 8003ec0:	f000 ff62 	bl	8004d88 <HAL_GPIO_Init>
}
 8003ec4:	e038      	b.n	8003f38 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART6)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a22      	ldr	r2, [pc, #136]	; (8003f54 <HAL_UART_MspInit+0x170>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d133      	bne.n	8003f38 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed8:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003eda:	f043 0320 	orr.w	r3, r3, #32
 8003ede:	6453      	str	r3, [r2, #68]	; 0x44
 8003ee0:	4b18      	ldr	r3, [pc, #96]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003ef6:	f043 0304 	orr.w	r3, r3, #4
 8003efa:	6313      	str	r3, [r2, #48]	; 0x30
 8003efc:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <HAL_UART_MspInit+0x160>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8003f08:	23c0      	movs	r3, #192	; 0xc0
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f14:	2303      	movs	r3, #3
 8003f16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003f18:	2308      	movs	r3, #8
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f20:	4619      	mov	r1, r3
 8003f22:	480d      	ldr	r0, [pc, #52]	; (8003f58 <HAL_UART_MspInit+0x174>)
 8003f24:	f000 ff30 	bl	8004d88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	2047      	movs	r0, #71	; 0x47
 8003f2e:	f000 fed2 	bl	8004cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003f32:	2047      	movs	r0, #71	; 0x47
 8003f34:	f000 feeb 	bl	8004d0e <HAL_NVIC_EnableIRQ>
}
 8003f38:	bf00      	nop
 8003f3a:	3738      	adds	r7, #56	; 0x38
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40007c00 	.word	0x40007c00
 8003f44:	40023800 	.word	0x40023800
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40004800 	.word	0x40004800
 8003f50:	40020c00 	.word	0x40020c00
 8003f54:	40011400 	.word	0x40011400
 8003f58:	40020800 	.word	0x40020800

08003f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f6e:	e7fe      	b.n	8003f6e <HardFault_Handler+0x4>

08003f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f74:	e7fe      	b.n	8003f74 <MemManage_Handler+0x4>

08003f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f76:	b480      	push	{r7}
 8003f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f7a:	e7fe      	b.n	8003f7a <BusFault_Handler+0x4>

08003f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f80:	e7fe      	b.n	8003f80 <UsageFault_Handler+0x4>

08003f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f82:	b480      	push	{r7}
 8003f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f86:	bf00      	nop
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fb0:	f000 f976 	bl	80042a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	f001 f8c1 	bl	8005144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003fcc:	4802      	ldr	r0, [pc, #8]	; (8003fd8 <TIM4_IRQHandler+0x10>)
 8003fce:	f003 ffd7 	bl	8007f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003fd2:	bf00      	nop
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	2000098c 	.word	0x2000098c

08003fdc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003fe0:	4802      	ldr	r0, [pc, #8]	; (8003fec <USART6_IRQHandler+0x10>)
 8003fe2:	f004 ff0d 	bl	8008e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003fe6:	bf00      	nop
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000f44 	.word	0x20000f44

08003ff0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
	return 1;
 8003ff4:	2301      	movs	r3, #1
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <_kill>:

int _kill(int pid, int sig)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800400a:	f008 ffc7 	bl	800cf9c <__errno>
 800400e:	4603      	mov	r3, r0
 8004010:	2216      	movs	r2, #22
 8004012:	601a      	str	r2, [r3, #0]
	return -1;
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <_exit>:

void _exit (int status)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004028:	f04f 31ff 	mov.w	r1, #4294967295
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff ffe7 	bl	8004000 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004032:	e7fe      	b.n	8004032 <_exit+0x12>

08004034 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e00a      	b.n	800405c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004046:	f3af 8000 	nop.w
 800404a:	4601      	mov	r1, r0
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	60ba      	str	r2, [r7, #8]
 8004052:	b2ca      	uxtb	r2, r1
 8004054:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	3301      	adds	r3, #1
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	dbf0      	blt.n	8004046 <_read+0x12>
	}

return len;
 8004064:	687b      	ldr	r3, [r7, #4]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e009      	b.n	8004094 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	60ba      	str	r2, [r7, #8]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	3301      	adds	r3, #1
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	429a      	cmp	r2, r3
 800409a:	dbf1      	blt.n	8004080 <_write+0x12>
	}
	return len;
 800409c:	687b      	ldr	r3, [r7, #4]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <_close>:

int _close(int file)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
	return -1;
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040ce:	605a      	str	r2, [r3, #4]
	return 0;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <_isatty>:

int _isatty(int file)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
	return 1;
 80040e6:	2301      	movs	r3, #1
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
	return 0;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004118:	4a14      	ldr	r2, [pc, #80]	; (800416c <_sbrk+0x5c>)
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <_sbrk+0x60>)
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004124:	4b13      	ldr	r3, [pc, #76]	; (8004174 <_sbrk+0x64>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d102      	bne.n	8004132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800412c:	4b11      	ldr	r3, [pc, #68]	; (8004174 <_sbrk+0x64>)
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <_sbrk+0x68>)
 8004130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <_sbrk+0x64>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	429a      	cmp	r2, r3
 800413e:	d207      	bcs.n	8004150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004140:	f008 ff2c 	bl	800cf9c <__errno>
 8004144:	4603      	mov	r3, r0
 8004146:	220c      	movs	r2, #12
 8004148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800414a:	f04f 33ff 	mov.w	r3, #4294967295
 800414e:	e009      	b.n	8004164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004150:	4b08      	ldr	r3, [pc, #32]	; (8004174 <_sbrk+0x64>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004156:	4b07      	ldr	r3, [pc, #28]	; (8004174 <_sbrk+0x64>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4413      	add	r3, r2
 800415e:	4a05      	ldr	r2, [pc, #20]	; (8004174 <_sbrk+0x64>)
 8004160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004162:	68fb      	ldr	r3, [r7, #12]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20030000 	.word	0x20030000
 8004170:	00000400 	.word	0x00000400
 8004174:	200004c0 	.word	0x200004c0
 8004178:	20001a88 	.word	0x20001a88

0800417c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <SystemInit+0x28>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004186:	4a07      	ldr	r2, [pc, #28]	; (80041a4 <SystemInit+0x28>)
 8004188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800418c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <SystemInit+0x28>)
 8004192:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004196:	609a      	str	r2, [r3, #8]
#endif
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80041a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041ae:	e003      	b.n	80041b8 <LoopCopyDataInit>

080041b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80041b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041b6:	3104      	adds	r1, #4

080041b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80041b8:	480b      	ldr	r0, [pc, #44]	; (80041e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80041bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041c0:	d3f6      	bcc.n	80041b0 <CopyDataInit>
  ldr  r2, =_sbss
 80041c2:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041c4:	e002      	b.n	80041cc <LoopFillZerobss>

080041c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041c8:	f842 3b04 	str.w	r3, [r2], #4

080041cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041d0:	d3f9      	bcc.n	80041c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041d2:	f7ff ffd3 	bl	800417c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041d6:	f008 fee7 	bl	800cfa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041da:	f7fd ff69 	bl	80020b0 <main>
  bx  lr    
 80041de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041e0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80041e4:	080130b0 	.word	0x080130b0
  ldr  r0, =_sdata
 80041e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041ec:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 80041f0:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 80041f4:	20001a88 	.word	0x20001a88

080041f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041f8:	e7fe      	b.n	80041f8 <ADC_IRQHandler>
	...

080041fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004200:	4b0e      	ldr	r3, [pc, #56]	; (800423c <HAL_Init+0x40>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a0d      	ldr	r2, [pc, #52]	; (800423c <HAL_Init+0x40>)
 8004206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800420a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_Init+0x40>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0a      	ldr	r2, [pc, #40]	; (800423c <HAL_Init+0x40>)
 8004212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004218:	4b08      	ldr	r3, [pc, #32]	; (800423c <HAL_Init+0x40>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a07      	ldr	r2, [pc, #28]	; (800423c <HAL_Init+0x40>)
 800421e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004224:	2003      	movs	r0, #3
 8004226:	f000 fd4b 	bl	8004cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800422a:	2000      	movs	r0, #0
 800422c:	f000 f808 	bl	8004240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004230:	f7ff fb8c 	bl	800394c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023c00 	.word	0x40023c00

08004240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004248:	4b12      	ldr	r3, [pc, #72]	; (8004294 <HAL_InitTick+0x54>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b12      	ldr	r3, [pc, #72]	; (8004298 <HAL_InitTick+0x58>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	4619      	mov	r1, r3
 8004252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004256:	fbb3 f3f1 	udiv	r3, r3, r1
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fd63 	bl	8004d2a <HAL_SYSTICK_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e00e      	b.n	800428c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b0f      	cmp	r3, #15
 8004272:	d80a      	bhi.n	800428a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004274:	2200      	movs	r2, #0
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	f04f 30ff 	mov.w	r0, #4294967295
 800427c:	f000 fd2b 	bl	8004cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004280:	4a06      	ldr	r2, [pc, #24]	; (800429c <HAL_InitTick+0x5c>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	e000      	b.n	800428c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000004 	.word	0x20000004
 8004298:	2000000c 	.word	0x2000000c
 800429c:	20000008 	.word	0x20000008

080042a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_IncTick+0x20>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_IncTick+0x24>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4413      	add	r3, r2
 80042b0:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <HAL_IncTick+0x24>)
 80042b2:	6013      	str	r3, [r2, #0]
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	2000000c 	.word	0x2000000c
 80042c4:	20001604 	.word	0x20001604

080042c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return uwTick;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_GetTick+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20001604 	.word	0x20001604

080042e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042e8:	f7ff ffee 	bl	80042c8 <HAL_GetTick>
 80042ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d005      	beq.n	8004306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042fa:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <HAL_Delay+0x44>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004306:	bf00      	nop
 8004308:	f7ff ffde 	bl	80042c8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	429a      	cmp	r2, r3
 8004316:	d8f7      	bhi.n	8004308 <HAL_Delay+0x28>
  {
  }
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	2000000c 	.word	0x2000000c

08004328 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e033      	b.n	80043a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fb28 	bl	800399c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b00      	cmp	r3, #0
 8004364:	d118      	bne.n	8004398 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800436e:	f023 0302 	bic.w	r3, r3, #2
 8004372:	f043 0202 	orr.w	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fad4 	bl	8004928 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f023 0303 	bic.w	r3, r3, #3
 800438e:	f043 0201 	orr.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
 8004396:	e001      	b.n	800439c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_ADC_Start+0x1a>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e0a5      	b.n	8004516 <HAL_ADC_Start+0x166>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d018      	beq.n	8004412 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043f0:	4b4c      	ldr	r3, [pc, #304]	; (8004524 <HAL_ADC_Start+0x174>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a4c      	ldr	r2, [pc, #304]	; (8004528 <HAL_ADC_Start+0x178>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	0c9a      	lsrs	r2, r3, #18
 80043fc:	4613      	mov	r3, r2
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	4413      	add	r3, r2
 8004402:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004404:	e002      	b.n	800440c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	3b01      	subs	r3, #1
 800440a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f9      	bne.n	8004406 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d179      	bne.n	8004514 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800444a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800445a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800445e:	d106      	bne.n	800446e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	f023 0206 	bic.w	r2, r3, #6
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	645a      	str	r2, [r3, #68]	; 0x44
 800446c:	e002      	b.n	8004474 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800447c:	4b2b      	ldr	r3, [pc, #172]	; (800452c <HAL_ADC_Start+0x17c>)
 800447e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004488:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2b00      	cmp	r3, #0
 8004494:	d12a      	bne.n	80044ec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a25      	ldr	r2, [pc, #148]	; (8004530 <HAL_ADC_Start+0x180>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d015      	beq.n	80044cc <HAL_ADC_Start+0x11c>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a23      	ldr	r2, [pc, #140]	; (8004534 <HAL_ADC_Start+0x184>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d105      	bne.n	80044b6 <HAL_ADC_Start+0x106>
 80044aa:	4b20      	ldr	r3, [pc, #128]	; (800452c <HAL_ADC_Start+0x17c>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1f      	ldr	r2, [pc, #124]	; (8004538 <HAL_ADC_Start+0x188>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d129      	bne.n	8004514 <HAL_ADC_Start+0x164>
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <HAL_ADC_Start+0x17c>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d123      	bne.n	8004514 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d11c      	bne.n	8004514 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	e013      	b.n	8004514 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a0f      	ldr	r2, [pc, #60]	; (8004530 <HAL_ADC_Start+0x180>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d10e      	bne.n	8004514 <HAL_ADC_Start+0x164>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d107      	bne.n	8004514 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004512:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000004 	.word	0x20000004
 8004528:	431bde83 	.word	0x431bde83
 800452c:	40012300 	.word	0x40012300
 8004530:	40012000 	.word	0x40012000
 8004534:	40012100 	.word	0x40012100
 8004538:	40012200 	.word	0x40012200

0800453c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_ADC_Stop+0x16>
 800454e:	2302      	movs	r3, #2
 8004550:	e021      	b.n	8004596 <HAL_ADC_Stop+0x5a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d109      	bne.n	800458c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	f043 0201 	orr.w	r2, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045be:	d113      	bne.n	80045e8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ce:	d10b      	bne.n	80045e8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	f043 0220 	orr.w	r2, r3, #32
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e05c      	b.n	80046a2 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80045e8:	f7ff fe6e 	bl	80042c8 <HAL_GetTick>
 80045ec:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045ee:	e01a      	b.n	8004626 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f6:	d016      	beq.n	8004626 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <HAL_ADC_PollForConversion+0x6c>
 80045fe:	f7ff fe63 	bl	80042c8 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d20b      	bcs.n	8004626 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f043 0204 	orr.w	r2, r3, #4
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e03d      	b.n	80046a2 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b02      	cmp	r3, #2
 8004632:	d1dd      	bne.n	80045f0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0212 	mvn.w	r2, #18
 800463c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d123      	bne.n	80046a0 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800465c:	2b00      	cmp	r3, #0
 800465e:	d11f      	bne.n	80046a0 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800466a:	2b00      	cmp	r3, #0
 800466c:	d006      	beq.n	800467c <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004678:	2b00      	cmp	r3, #0
 800467a:	d111      	bne.n	80046a0 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f043 0201 	orr.w	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x1c>
 80046dc:	2302      	movs	r3, #2
 80046de:	e113      	b.n	8004908 <HAL_ADC_ConfigChannel+0x244>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b09      	cmp	r3, #9
 80046ee:	d925      	bls.n	800473c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68d9      	ldr	r1, [r3, #12]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	4613      	mov	r3, r2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	4413      	add	r3, r2
 8004704:	3b1e      	subs	r3, #30
 8004706:	2207      	movs	r2, #7
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43da      	mvns	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	400a      	ands	r2, r1
 8004714:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68d9      	ldr	r1, [r3, #12]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	4618      	mov	r0, r3
 8004728:	4603      	mov	r3, r0
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4403      	add	r3, r0
 800472e:	3b1e      	subs	r3, #30
 8004730:	409a      	lsls	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	e022      	b.n	8004782 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6919      	ldr	r1, [r3, #16]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	4613      	mov	r3, r2
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	4413      	add	r3, r2
 8004750:	2207      	movs	r2, #7
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43da      	mvns	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	400a      	ands	r2, r1
 800475e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6919      	ldr	r1, [r3, #16]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	4618      	mov	r0, r3
 8004772:	4603      	mov	r3, r0
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	4403      	add	r3, r0
 8004778:	409a      	lsls	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b06      	cmp	r3, #6
 8004788:	d824      	bhi.n	80047d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	3b05      	subs	r3, #5
 800479c:	221f      	movs	r2, #31
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43da      	mvns	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	400a      	ands	r2, r1
 80047aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	4618      	mov	r0, r3
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	3b05      	subs	r3, #5
 80047c6:	fa00 f203 	lsl.w	r2, r0, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	635a      	str	r2, [r3, #52]	; 0x34
 80047d2:	e04c      	b.n	800486e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b0c      	cmp	r3, #12
 80047da:	d824      	bhi.n	8004826 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	3b23      	subs	r3, #35	; 0x23
 80047ee:	221f      	movs	r2, #31
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	43da      	mvns	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	400a      	ands	r2, r1
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	4618      	mov	r0, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	3b23      	subs	r3, #35	; 0x23
 8004818:	fa00 f203 	lsl.w	r2, r0, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
 8004824:	e023      	b.n	800486e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	3b41      	subs	r3, #65	; 0x41
 8004838:	221f      	movs	r2, #31
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43da      	mvns	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	400a      	ands	r2, r1
 8004846:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	4618      	mov	r0, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	3b41      	subs	r3, #65	; 0x41
 8004862:	fa00 f203 	lsl.w	r2, r0, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800486e:	4b29      	ldr	r3, [pc, #164]	; (8004914 <HAL_ADC_ConfigChannel+0x250>)
 8004870:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a28      	ldr	r2, [pc, #160]	; (8004918 <HAL_ADC_ConfigChannel+0x254>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d10f      	bne.n	800489c <HAL_ADC_ConfigChannel+0x1d8>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b12      	cmp	r3, #18
 8004882:	d10b      	bne.n	800489c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1d      	ldr	r2, [pc, #116]	; (8004918 <HAL_ADC_ConfigChannel+0x254>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d12b      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x23a>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1c      	ldr	r2, [pc, #112]	; (800491c <HAL_ADC_ConfigChannel+0x258>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <HAL_ADC_ConfigChannel+0x1f4>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b11      	cmp	r3, #17
 80048b6:	d122      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a11      	ldr	r2, [pc, #68]	; (800491c <HAL_ADC_ConfigChannel+0x258>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d111      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048da:	4b11      	ldr	r3, [pc, #68]	; (8004920 <HAL_ADC_ConfigChannel+0x25c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a11      	ldr	r2, [pc, #68]	; (8004924 <HAL_ADC_ConfigChannel+0x260>)
 80048e0:	fba2 2303 	umull	r2, r3, r2, r3
 80048e4:	0c9a      	lsrs	r2, r3, #18
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048f0:	e002      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f9      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40012300 	.word	0x40012300
 8004918:	40012000 	.word	0x40012000
 800491c:	10000012 	.word	0x10000012
 8004920:	20000004 	.word	0x20000004
 8004924:	431bde83 	.word	0x431bde83

08004928 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004930:	4b79      	ldr	r3, [pc, #484]	; (8004b18 <ADC_Init+0x1f0>)
 8004932:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	431a      	orrs	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800495c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	021a      	lsls	r2, r3, #8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004980:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6859      	ldr	r1, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6899      	ldr	r1, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	4a58      	ldr	r2, [pc, #352]	; (8004b1c <ADC_Init+0x1f4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d022      	beq.n	8004a06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6899      	ldr	r1, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6899      	ldr	r1, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	e00f      	b.n	8004a26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0202 	bic.w	r2, r2, #2
 8004a34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6899      	ldr	r1, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	7e1b      	ldrb	r3, [r3, #24]
 8004a40:	005a      	lsls	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01b      	beq.n	8004a8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6859      	ldr	r1, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	035a      	lsls	r2, r3, #13
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	e007      	b.n	8004a9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	051a      	lsls	r2, r3, #20
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ad0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6899      	ldr	r1, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ade:	025a      	lsls	r2, r3, #9
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6899      	ldr	r1, [r3, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	029a      	lsls	r2, r3, #10
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	609a      	str	r2, [r3, #8]
}
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40012300 	.word	0x40012300
 8004b1c:	0f000001 	.word	0x0f000001

08004b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b30:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <__NVIC_SetPriorityGrouping+0x44>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b52:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <__NVIC_SetPriorityGrouping+0x44>)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	60d3      	str	r3, [r2, #12]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b6c:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <__NVIC_GetPriorityGrouping+0x18>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	0a1b      	lsrs	r3, r3, #8
 8004b72:	f003 0307 	and.w	r3, r3, #7
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	e000ed00 	.word	0xe000ed00

08004b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	db0b      	blt.n	8004bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	f003 021f 	and.w	r2, r3, #31
 8004b9c:	4907      	ldr	r1, [pc, #28]	; (8004bbc <__NVIC_EnableIRQ+0x38>)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8004baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	e000e100 	.word	0xe000e100

08004bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	6039      	str	r1, [r7, #0]
 8004bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	db0a      	blt.n	8004bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	490c      	ldr	r1, [pc, #48]	; (8004c0c <__NVIC_SetPriority+0x4c>)
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	0112      	lsls	r2, r2, #4
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	440b      	add	r3, r1
 8004be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004be8:	e00a      	b.n	8004c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	4908      	ldr	r1, [pc, #32]	; (8004c10 <__NVIC_SetPriority+0x50>)
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	3b04      	subs	r3, #4
 8004bf8:	0112      	lsls	r2, r2, #4
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	761a      	strb	r2, [r3, #24]
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	e000e100 	.word	0xe000e100
 8004c10:	e000ed00 	.word	0xe000ed00

08004c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b089      	sub	sp, #36	; 0x24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f1c3 0307 	rsb	r3, r3, #7
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	bf28      	it	cs
 8004c32:	2304      	movcs	r3, #4
 8004c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	2b06      	cmp	r3, #6
 8004c3c:	d902      	bls.n	8004c44 <NVIC_EncodePriority+0x30>
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3b03      	subs	r3, #3
 8004c42:	e000      	b.n	8004c46 <NVIC_EncodePriority+0x32>
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c48:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43da      	mvns	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	401a      	ands	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	fa01 f303 	lsl.w	r3, r1, r3
 8004c66:	43d9      	mvns	r1, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c6c:	4313      	orrs	r3, r2
         );
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3724      	adds	r7, #36	; 0x24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c8c:	d301      	bcc.n	8004c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e00f      	b.n	8004cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c92:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <SysTick_Config+0x40>)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c9a:	210f      	movs	r1, #15
 8004c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca0:	f7ff ff8e 	bl	8004bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <SysTick_Config+0x40>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004caa:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <SysTick_Config+0x40>)
 8004cac:	2207      	movs	r2, #7
 8004cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	e000e010 	.word	0xe000e010

08004cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff ff29 	bl	8004b20 <__NVIC_SetPriorityGrouping>
}
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b086      	sub	sp, #24
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	4603      	mov	r3, r0
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ce8:	f7ff ff3e 	bl	8004b68 <__NVIC_GetPriorityGrouping>
 8004cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	6978      	ldr	r0, [r7, #20]
 8004cf4:	f7ff ff8e 	bl	8004c14 <NVIC_EncodePriority>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff ff5d 	bl	8004bc0 <__NVIC_SetPriority>
}
 8004d06:	bf00      	nop
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	4603      	mov	r3, r0
 8004d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff ff31 	bl	8004b84 <__NVIC_EnableIRQ>
}
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff ffa2 	bl	8004c7c <SysTick_Config>
 8004d38:	4603      	mov	r3, r0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d004      	beq.n	8004d60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2280      	movs	r2, #128	; 0x80
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e00c      	b.n	8004d7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2205      	movs	r2, #5
 8004d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b089      	sub	sp, #36	; 0x24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	e177      	b.n	8005094 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004da4:	2201      	movs	r2, #1
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4013      	ands	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	f040 8166 	bne.w	800508e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d00b      	beq.n	8004de2 <HAL_GPIO_Init+0x5a>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d007      	beq.n	8004de2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dd6:	2b11      	cmp	r3, #17
 8004dd8:	d003      	beq.n	8004de2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b12      	cmp	r3, #18
 8004de0:	d130      	bne.n	8004e44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	2203      	movs	r2, #3
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43db      	mvns	r3, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4013      	ands	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e18:	2201      	movs	r2, #1
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 0201 	and.w	r2, r3, #1
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	2203      	movs	r2, #3
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d003      	beq.n	8004e84 <HAL_GPIO_Init+0xfc>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b12      	cmp	r3, #18
 8004e82:	d123      	bne.n	8004ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	08da      	lsrs	r2, r3, #3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3208      	adds	r2, #8
 8004e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	220f      	movs	r2, #15
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	08da      	lsrs	r2, r3, #3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3208      	adds	r2, #8
 8004ec6:	69b9      	ldr	r1, [r7, #24]
 8004ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	43db      	mvns	r3, r3
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 0203 	and.w	r2, r3, #3
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80c0 	beq.w	800508e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	4b66      	ldr	r3, [pc, #408]	; (80050ac <HAL_GPIO_Init+0x324>)
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	4a65      	ldr	r2, [pc, #404]	; (80050ac <HAL_GPIO_Init+0x324>)
 8004f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f1e:	4b63      	ldr	r3, [pc, #396]	; (80050ac <HAL_GPIO_Init+0x324>)
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f2a:	4a61      	ldr	r2, [pc, #388]	; (80050b0 <HAL_GPIO_Init+0x328>)
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	089b      	lsrs	r3, r3, #2
 8004f30:	3302      	adds	r3, #2
 8004f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	220f      	movs	r2, #15
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	43db      	mvns	r3, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a58      	ldr	r2, [pc, #352]	; (80050b4 <HAL_GPIO_Init+0x32c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d037      	beq.n	8004fc6 <HAL_GPIO_Init+0x23e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a57      	ldr	r2, [pc, #348]	; (80050b8 <HAL_GPIO_Init+0x330>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d031      	beq.n	8004fc2 <HAL_GPIO_Init+0x23a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a56      	ldr	r2, [pc, #344]	; (80050bc <HAL_GPIO_Init+0x334>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d02b      	beq.n	8004fbe <HAL_GPIO_Init+0x236>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a55      	ldr	r2, [pc, #340]	; (80050c0 <HAL_GPIO_Init+0x338>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d025      	beq.n	8004fba <HAL_GPIO_Init+0x232>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a54      	ldr	r2, [pc, #336]	; (80050c4 <HAL_GPIO_Init+0x33c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d01f      	beq.n	8004fb6 <HAL_GPIO_Init+0x22e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a53      	ldr	r2, [pc, #332]	; (80050c8 <HAL_GPIO_Init+0x340>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d019      	beq.n	8004fb2 <HAL_GPIO_Init+0x22a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a52      	ldr	r2, [pc, #328]	; (80050cc <HAL_GPIO_Init+0x344>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_GPIO_Init+0x226>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a51      	ldr	r2, [pc, #324]	; (80050d0 <HAL_GPIO_Init+0x348>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00d      	beq.n	8004faa <HAL_GPIO_Init+0x222>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a50      	ldr	r2, [pc, #320]	; (80050d4 <HAL_GPIO_Init+0x34c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <HAL_GPIO_Init+0x21e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a4f      	ldr	r2, [pc, #316]	; (80050d8 <HAL_GPIO_Init+0x350>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d101      	bne.n	8004fa2 <HAL_GPIO_Init+0x21a>
 8004f9e:	2309      	movs	r3, #9
 8004fa0:	e012      	b.n	8004fc8 <HAL_GPIO_Init+0x240>
 8004fa2:	230a      	movs	r3, #10
 8004fa4:	e010      	b.n	8004fc8 <HAL_GPIO_Init+0x240>
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	e00e      	b.n	8004fc8 <HAL_GPIO_Init+0x240>
 8004faa:	2307      	movs	r3, #7
 8004fac:	e00c      	b.n	8004fc8 <HAL_GPIO_Init+0x240>
 8004fae:	2306      	movs	r3, #6
 8004fb0:	e00a      	b.n	8004fc8 <HAL_GPIO_Init+0x240>
 8004fb2:	2305      	movs	r3, #5
 8004fb4:	e008      	b.n	8004fc8 <HAL_GPIO_Init+0x240>
 8004fb6:	2304      	movs	r3, #4
 8004fb8:	e006      	b.n	8004fc8 <HAL_GPIO_Init+0x240>
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e004      	b.n	8004fc8 <HAL_GPIO_Init+0x240>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e002      	b.n	8004fc8 <HAL_GPIO_Init+0x240>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <HAL_GPIO_Init+0x240>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	f002 0203 	and.w	r2, r2, #3
 8004fce:	0092      	lsls	r2, r2, #2
 8004fd0:	4093      	lsls	r3, r2
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fd8:	4935      	ldr	r1, [pc, #212]	; (80050b0 <HAL_GPIO_Init+0x328>)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	089b      	lsrs	r3, r3, #2
 8004fde:	3302      	adds	r3, #2
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fe6:	4b3d      	ldr	r3, [pc, #244]	; (80050dc <HAL_GPIO_Init+0x354>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800500a:	4a34      	ldr	r2, [pc, #208]	; (80050dc <HAL_GPIO_Init+0x354>)
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005010:	4b32      	ldr	r3, [pc, #200]	; (80050dc <HAL_GPIO_Init+0x354>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	43db      	mvns	r3, r3
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4013      	ands	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005034:	4a29      	ldr	r2, [pc, #164]	; (80050dc <HAL_GPIO_Init+0x354>)
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800503a:	4b28      	ldr	r3, [pc, #160]	; (80050dc <HAL_GPIO_Init+0x354>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	43db      	mvns	r3, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4013      	ands	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800505e:	4a1f      	ldr	r2, [pc, #124]	; (80050dc <HAL_GPIO_Init+0x354>)
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005064:	4b1d      	ldr	r3, [pc, #116]	; (80050dc <HAL_GPIO_Init+0x354>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	43db      	mvns	r3, r3
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4013      	ands	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005088:	4a14      	ldr	r2, [pc, #80]	; (80050dc <HAL_GPIO_Init+0x354>)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	3301      	adds	r3, #1
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	2b0f      	cmp	r3, #15
 8005098:	f67f ae84 	bls.w	8004da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800509c:	bf00      	nop
 800509e:	bf00      	nop
 80050a0:	3724      	adds	r7, #36	; 0x24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40023800 	.word	0x40023800
 80050b0:	40013800 	.word	0x40013800
 80050b4:	40020000 	.word	0x40020000
 80050b8:	40020400 	.word	0x40020400
 80050bc:	40020800 	.word	0x40020800
 80050c0:	40020c00 	.word	0x40020c00
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40021400 	.word	0x40021400
 80050cc:	40021800 	.word	0x40021800
 80050d0:	40021c00 	.word	0x40021c00
 80050d4:	40022000 	.word	0x40022000
 80050d8:	40022400 	.word	0x40022400
 80050dc:	40013c00 	.word	0x40013c00

080050e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
 80050fc:	e001      	b.n	8005102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005102:	7bfb      	ldrb	r3, [r7, #15]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	807b      	strh	r3, [r7, #2]
 800511c:	4613      	mov	r3, r2
 800511e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005120:	787b      	ldrb	r3, [r7, #1]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005126:	887a      	ldrh	r2, [r7, #2]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800512c:	e003      	b.n	8005136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800512e:	887b      	ldrh	r3, [r7, #2]
 8005130:	041a      	lsls	r2, r3, #16
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	619a      	str	r2, [r3, #24]
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	4603      	mov	r3, r0
 800514c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800514e:	4b08      	ldr	r3, [pc, #32]	; (8005170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005150:	695a      	ldr	r2, [r3, #20]
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	4013      	ands	r3, r2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d006      	beq.n	8005168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800515a:	4a05      	ldr	r2, [pc, #20]	; (8005170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800515c:	88fb      	ldrh	r3, [r7, #6]
 800515e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 f806 	bl	8005174 <HAL_GPIO_EXTI_Callback>
  }
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40013c00 	.word	0x40013c00

08005174 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e12b      	b.n	80053f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fe fc36 	bl	8003a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2224      	movs	r2, #36	; 0x24
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0201 	bic.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051f0:	f001 fc98 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 80051f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	4a81      	ldr	r2, [pc, #516]	; (8005400 <HAL_I2C_Init+0x274>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d807      	bhi.n	8005210 <HAL_I2C_Init+0x84>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a80      	ldr	r2, [pc, #512]	; (8005404 <HAL_I2C_Init+0x278>)
 8005204:	4293      	cmp	r3, r2
 8005206:	bf94      	ite	ls
 8005208:	2301      	movls	r3, #1
 800520a:	2300      	movhi	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	e006      	b.n	800521e <HAL_I2C_Init+0x92>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4a7d      	ldr	r2, [pc, #500]	; (8005408 <HAL_I2C_Init+0x27c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	bf94      	ite	ls
 8005218:	2301      	movls	r3, #1
 800521a:	2300      	movhi	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e0e7      	b.n	80053f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4a78      	ldr	r2, [pc, #480]	; (800540c <HAL_I2C_Init+0x280>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	0c9b      	lsrs	r3, r3, #18
 8005230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4a6a      	ldr	r2, [pc, #424]	; (8005400 <HAL_I2C_Init+0x274>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d802      	bhi.n	8005260 <HAL_I2C_Init+0xd4>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	3301      	adds	r3, #1
 800525e:	e009      	b.n	8005274 <HAL_I2C_Init+0xe8>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005266:	fb02 f303 	mul.w	r3, r2, r3
 800526a:	4a69      	ldr	r2, [pc, #420]	; (8005410 <HAL_I2C_Init+0x284>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	099b      	lsrs	r3, r3, #6
 8005272:	3301      	adds	r3, #1
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	430b      	orrs	r3, r1
 800527a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005286:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	495c      	ldr	r1, [pc, #368]	; (8005400 <HAL_I2C_Init+0x274>)
 8005290:	428b      	cmp	r3, r1
 8005292:	d819      	bhi.n	80052c8 <HAL_I2C_Init+0x13c>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1e59      	subs	r1, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	fbb1 f3f3 	udiv	r3, r1, r3
 80052a2:	1c59      	adds	r1, r3, #1
 80052a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80052a8:	400b      	ands	r3, r1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_I2C_Init+0x138>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1e59      	subs	r1, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80052bc:	3301      	adds	r3, #1
 80052be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c2:	e051      	b.n	8005368 <HAL_I2C_Init+0x1dc>
 80052c4:	2304      	movs	r3, #4
 80052c6:	e04f      	b.n	8005368 <HAL_I2C_Init+0x1dc>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d111      	bne.n	80052f4 <HAL_I2C_Init+0x168>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1e58      	subs	r0, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6859      	ldr	r1, [r3, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	440b      	add	r3, r1
 80052de:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e2:	3301      	adds	r3, #1
 80052e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	e012      	b.n	800531a <HAL_I2C_Init+0x18e>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	1e58      	subs	r0, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6859      	ldr	r1, [r3, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	0099      	lsls	r1, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	fbb0 f3f3 	udiv	r3, r0, r3
 800530a:	3301      	adds	r3, #1
 800530c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf0c      	ite	eq
 8005314:	2301      	moveq	r3, #1
 8005316:	2300      	movne	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_Init+0x196>
 800531e:	2301      	movs	r3, #1
 8005320:	e022      	b.n	8005368 <HAL_I2C_Init+0x1dc>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10e      	bne.n	8005348 <HAL_I2C_Init+0x1bc>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1e58      	subs	r0, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6859      	ldr	r1, [r3, #4]
 8005332:	460b      	mov	r3, r1
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	440b      	add	r3, r1
 8005338:	fbb0 f3f3 	udiv	r3, r0, r3
 800533c:	3301      	adds	r3, #1
 800533e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005346:	e00f      	b.n	8005368 <HAL_I2C_Init+0x1dc>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	1e58      	subs	r0, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6859      	ldr	r1, [r3, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	0099      	lsls	r1, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	fbb0 f3f3 	udiv	r3, r0, r3
 800535e:	3301      	adds	r3, #1
 8005360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	6809      	ldr	r1, [r1, #0]
 800536c:	4313      	orrs	r3, r2
 800536e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6911      	ldr	r1, [r2, #16]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	68d2      	ldr	r2, [r2, #12]
 80053a2:	4311      	orrs	r1, r2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695a      	ldr	r2, [r3, #20]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	000186a0 	.word	0x000186a0
 8005404:	001e847f 	.word	0x001e847f
 8005408:	003d08ff 	.word	0x003d08ff
 800540c:	431bde83 	.word	0x431bde83
 8005410:	10624dd3 	.word	0x10624dd3

08005414 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	4608      	mov	r0, r1
 800541e:	4611      	mov	r1, r2
 8005420:	461a      	mov	r2, r3
 8005422:	4603      	mov	r3, r0
 8005424:	817b      	strh	r3, [r7, #10]
 8005426:	460b      	mov	r3, r1
 8005428:	813b      	strh	r3, [r7, #8]
 800542a:	4613      	mov	r3, r2
 800542c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800542e:	f7fe ff4b 	bl	80042c8 <HAL_GetTick>
 8005432:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b20      	cmp	r3, #32
 800543e:	f040 80d9 	bne.w	80055f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	2319      	movs	r3, #25
 8005448:	2201      	movs	r2, #1
 800544a:	496d      	ldr	r1, [pc, #436]	; (8005600 <HAL_I2C_Mem_Write+0x1ec>)
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 fc7f 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
 800545a:	e0cc      	b.n	80055f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_I2C_Mem_Write+0x56>
 8005466:	2302      	movs	r3, #2
 8005468:	e0c5      	b.n	80055f6 <HAL_I2C_Mem_Write+0x1e2>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b01      	cmp	r3, #1
 800547e:	d007      	beq.n	8005490 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800549e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2221      	movs	r2, #33	; 0x21
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2240      	movs	r2, #64	; 0x40
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a3a      	ldr	r2, [r7, #32]
 80054ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4a4d      	ldr	r2, [pc, #308]	; (8005604 <HAL_I2C_Mem_Write+0x1f0>)
 80054d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054d2:	88f8      	ldrh	r0, [r7, #6]
 80054d4:	893a      	ldrh	r2, [r7, #8]
 80054d6:	8979      	ldrh	r1, [r7, #10]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	9301      	str	r3, [sp, #4]
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	4603      	mov	r3, r0
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 fab6 	bl	8005a54 <I2C_RequestMemoryWrite>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d052      	beq.n	8005594 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e081      	b.n	80055f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 fd00 	bl	8005efc <I2C_WaitOnTXEFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00d      	beq.n	800551e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	2b04      	cmp	r3, #4
 8005508:	d107      	bne.n	800551a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005518:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e06b      	b.n	80055f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	781a      	ldrb	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b04      	cmp	r3, #4
 800555a:	d11b      	bne.n	8005594 <HAL_I2C_Mem_Write+0x180>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005560:	2b00      	cmp	r3, #0
 8005562:	d017      	beq.n	8005594 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	781a      	ldrb	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1aa      	bne.n	80054f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 fcec 	bl	8005f7e <I2C_WaitOnBTFFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00d      	beq.n	80055c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d107      	bne.n	80055c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e016      	b.n	80055f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	e000      	b.n	80055f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80055f4:	2302      	movs	r3, #2
  }
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	00100002 	.word	0x00100002
 8005604:	ffff0000 	.word	0xffff0000

08005608 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	; 0x30
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	4608      	mov	r0, r1
 8005612:	4611      	mov	r1, r2
 8005614:	461a      	mov	r2, r3
 8005616:	4603      	mov	r3, r0
 8005618:	817b      	strh	r3, [r7, #10]
 800561a:	460b      	mov	r3, r1
 800561c:	813b      	strh	r3, [r7, #8]
 800561e:	4613      	mov	r3, r2
 8005620:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005622:	f7fe fe51 	bl	80042c8 <HAL_GetTick>
 8005626:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b20      	cmp	r3, #32
 8005632:	f040 8208 	bne.w	8005a46 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	2319      	movs	r3, #25
 800563c:	2201      	movs	r2, #1
 800563e:	497b      	ldr	r1, [pc, #492]	; (800582c <HAL_I2C_Mem_Read+0x224>)
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 fb85 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800564c:	2302      	movs	r3, #2
 800564e:	e1fb      	b.n	8005a48 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005656:	2b01      	cmp	r3, #1
 8005658:	d101      	bne.n	800565e <HAL_I2C_Mem_Read+0x56>
 800565a:	2302      	movs	r3, #2
 800565c:	e1f4      	b.n	8005a48 <HAL_I2C_Mem_Read+0x440>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b01      	cmp	r3, #1
 8005672:	d007      	beq.n	8005684 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005692:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2222      	movs	r2, #34	; 0x22
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2240      	movs	r2, #64	; 0x40
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80056b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4a5b      	ldr	r2, [pc, #364]	; (8005830 <HAL_I2C_Mem_Read+0x228>)
 80056c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056c6:	88f8      	ldrh	r0, [r7, #6]
 80056c8:	893a      	ldrh	r2, [r7, #8]
 80056ca:	8979      	ldrh	r1, [r7, #10]
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	4603      	mov	r3, r0
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fa52 	bl	8005b80 <I2C_RequestMemoryRead>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e1b0      	b.n	8005a48 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d113      	bne.n	8005716 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ee:	2300      	movs	r3, #0
 80056f0:	623b      	str	r3, [r7, #32]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	623b      	str	r3, [r7, #32]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	623b      	str	r3, [r7, #32]
 8005702:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	e184      	b.n	8005a20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	2b01      	cmp	r3, #1
 800571c:	d11b      	bne.n	8005756 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	61fb      	str	r3, [r7, #28]
 8005742:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	e164      	b.n	8005a20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575a:	2b02      	cmp	r3, #2
 800575c:	d11b      	bne.n	8005796 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800577c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	e144      	b.n	8005a20 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80057ac:	e138      	b.n	8005a20 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	f200 80f1 	bhi.w	800599a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d123      	bne.n	8005808 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 fc1b 	bl	8006000 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e139      	b.n	8005a48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005806:	e10b      	b.n	8005a20 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580c:	2b02      	cmp	r3, #2
 800580e:	d14e      	bne.n	80058ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	2200      	movs	r2, #0
 8005818:	4906      	ldr	r1, [pc, #24]	; (8005834 <HAL_I2C_Mem_Read+0x22c>)
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 fa98 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d008      	beq.n	8005838 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e10e      	b.n	8005a48 <HAL_I2C_Mem_Read+0x440>
 800582a:	bf00      	nop
 800582c:	00100002 	.word	0x00100002
 8005830:	ffff0000 	.word	0xffff0000
 8005834:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005870:	b29b      	uxth	r3, r3
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058ac:	e0b8      	b.n	8005a20 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	2200      	movs	r2, #0
 80058b6:	4966      	ldr	r1, [pc, #408]	; (8005a50 <HAL_I2C_Mem_Read+0x448>)
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fa49 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e0bf      	b.n	8005a48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691a      	ldr	r2, [r3, #16]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	2200      	movs	r2, #0
 8005912:	494f      	ldr	r1, [pc, #316]	; (8005a50 <HAL_I2C_Mem_Read+0x448>)
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 fa1b 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e091      	b.n	8005a48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598e:	b29b      	uxth	r3, r3
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005998:	e042      	b.n	8005a20 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800599a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fb2e 	bl	8006000 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e04c      	b.n	8005a48 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d118      	bne.n	8005a20 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f47f aec2 	bne.w	80057ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e000      	b.n	8005a48 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
  }
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3728      	adds	r7, #40	; 0x28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	00010004 	.word	0x00010004

08005a54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	4608      	mov	r0, r1
 8005a5e:	4611      	mov	r1, r2
 8005a60:	461a      	mov	r2, r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	817b      	strh	r3, [r7, #10]
 8005a66:	460b      	mov	r3, r1
 8005a68:	813b      	strh	r3, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 f960 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00d      	beq.n	8005ab2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa4:	d103      	bne.n	8005aae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e05f      	b.n	8005b72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ab2:	897b      	ldrh	r3, [r7, #10]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ac0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	6a3a      	ldr	r2, [r7, #32]
 8005ac6:	492d      	ldr	r1, [pc, #180]	; (8005b7c <I2C_RequestMemoryWrite+0x128>)
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 f998 	bl	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e04c      	b.n	8005b72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af0:	6a39      	ldr	r1, [r7, #32]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fa02 	bl	8005efc <I2C_WaitOnTXEFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00d      	beq.n	8005b1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d107      	bne.n	8005b16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e02b      	b.n	8005b72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d105      	bne.n	8005b2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b20:	893b      	ldrh	r3, [r7, #8]
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	611a      	str	r2, [r3, #16]
 8005b2a:	e021      	b.n	8005b70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b2c:	893b      	ldrh	r3, [r7, #8]
 8005b2e:	0a1b      	lsrs	r3, r3, #8
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3c:	6a39      	ldr	r1, [r7, #32]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 f9dc 	bl	8005efc <I2C_WaitOnTXEFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00d      	beq.n	8005b66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d107      	bne.n	8005b62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e005      	b.n	8005b72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b66:	893b      	ldrh	r3, [r7, #8]
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	00010002 	.word	0x00010002

08005b80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	4608      	mov	r0, r1
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	4603      	mov	r3, r0
 8005b90:	817b      	strh	r3, [r7, #10]
 8005b92:	460b      	mov	r3, r1
 8005b94:	813b      	strh	r3, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ba8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f8c2 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00d      	beq.n	8005bee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be0:	d103      	bne.n	8005bea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e0aa      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bee:	897b      	ldrh	r3, [r7, #10]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	6a3a      	ldr	r2, [r7, #32]
 8005c02:	4952      	ldr	r1, [pc, #328]	; (8005d4c <I2C_RequestMemoryRead+0x1cc>)
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f8fa 	bl	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e097      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c14:	2300      	movs	r3, #0
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2c:	6a39      	ldr	r1, [r7, #32]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f964 	bl	8005efc <I2C_WaitOnTXEFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00d      	beq.n	8005c56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d107      	bne.n	8005c52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e076      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d105      	bne.n	8005c68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c5c:	893b      	ldrh	r3, [r7, #8]
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	611a      	str	r2, [r3, #16]
 8005c66:	e021      	b.n	8005cac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c68:	893b      	ldrh	r3, [r7, #8]
 8005c6a:	0a1b      	lsrs	r3, r3, #8
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c78:	6a39      	ldr	r1, [r7, #32]
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 f93e 	bl	8005efc <I2C_WaitOnTXEFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00d      	beq.n	8005ca2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d107      	bne.n	8005c9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e050      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca2:	893b      	ldrh	r3, [r7, #8]
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cae:	6a39      	ldr	r1, [r7, #32]
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f923 	bl	8005efc <I2C_WaitOnTXEFlagUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00d      	beq.n	8005cd8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d107      	bne.n	8005cd4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e035      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f82b 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00d      	beq.n	8005d1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d0e:	d103      	bne.n	8005d18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e013      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d1c:	897b      	ldrh	r3, [r7, #10]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	6a3a      	ldr	r2, [r7, #32]
 8005d30:	4906      	ldr	r1, [pc, #24]	; (8005d4c <I2C_RequestMemoryRead+0x1cc>)
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 f863 	bl	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	00010002 	.word	0x00010002

08005d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d60:	e025      	b.n	8005dae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d68:	d021      	beq.n	8005dae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6a:	f7fe faad 	bl	80042c8 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d302      	bcc.n	8005d80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d116      	bne.n	8005dae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f043 0220 	orr.w	r2, r3, #32
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e023      	b.n	8005df6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	0c1b      	lsrs	r3, r3, #16
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d10d      	bne.n	8005dd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	43da      	mvns	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bf0c      	ite	eq
 8005dca:	2301      	moveq	r3, #1
 8005dcc:	2300      	movne	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	e00c      	b.n	8005dee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	43da      	mvns	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4013      	ands	r3, r2
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bf0c      	ite	eq
 8005de6:	2301      	moveq	r3, #1
 8005de8:	2300      	movne	r3, #0
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d0b6      	beq.n	8005d62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
 8005e0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e0c:	e051      	b.n	8005eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1c:	d123      	bne.n	8005e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f043 0204 	orr.w	r2, r3, #4
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e046      	b.n	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d021      	beq.n	8005eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e6e:	f7fe fa2b 	bl	80042c8 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d302      	bcc.n	8005e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d116      	bne.n	8005eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f043 0220 	orr.w	r2, r3, #32
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e020      	b.n	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	0c1b      	lsrs	r3, r3, #16
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d10c      	bne.n	8005ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	43da      	mvns	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bf14      	ite	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	2300      	moveq	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	e00b      	b.n	8005eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	43da      	mvns	r2, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bf14      	ite	ne
 8005ee8:	2301      	movne	r3, #1
 8005eea:	2300      	moveq	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d18d      	bne.n	8005e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f08:	e02d      	b.n	8005f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f8ce 	bl	80060ac <I2C_IsAcknowledgeFailed>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e02d      	b.n	8005f76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d021      	beq.n	8005f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f22:	f7fe f9d1 	bl	80042c8 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d302      	bcc.n	8005f38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d116      	bne.n	8005f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e007      	b.n	8005f76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f70:	2b80      	cmp	r3, #128	; 0x80
 8005f72:	d1ca      	bne.n	8005f0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f8a:	e02d      	b.n	8005fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f88d 	bl	80060ac <I2C_IsAcknowledgeFailed>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e02d      	b.n	8005ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa2:	d021      	beq.n	8005fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa4:	f7fe f990 	bl	80042c8 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d302      	bcc.n	8005fba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d116      	bne.n	8005fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	f043 0220 	orr.w	r2, r3, #32
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e007      	b.n	8005ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d1ca      	bne.n	8005f8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800600c:	e042      	b.n	8006094 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b10      	cmp	r3, #16
 800601a:	d119      	bne.n	8006050 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0210 	mvn.w	r2, #16
 8006024:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e029      	b.n	80060a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006050:	f7fe f93a 	bl	80042c8 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	429a      	cmp	r2, r3
 800605e:	d302      	bcc.n	8006066 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d116      	bne.n	8006094 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	f043 0220 	orr.w	r2, r3, #32
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e007      	b.n	80060a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609e:	2b40      	cmp	r3, #64	; 0x40
 80060a0:	d1b5      	bne.n	800600e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c2:	d11b      	bne.n	80060fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	f043 0204 	orr.w	r2, r3, #4
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e000      	b.n	80060fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b20      	cmp	r3, #32
 800611e:	d129      	bne.n	8006174 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2224      	movs	r2, #36	; 0x24
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0201 	bic.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0210 	bic.w	r2, r2, #16
 8006146:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	e000      	b.n	8006176 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006174:	2302      	movs	r3, #2
  }
}
 8006176:	4618      	mov	r0, r3
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b20      	cmp	r3, #32
 800619a:	d12a      	bne.n	80061f2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2224      	movs	r2, #36	; 0x24
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0201 	bic.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80061bc:	89fb      	ldrh	r3, [r7, #14]
 80061be:	f023 030f 	bic.w	r3, r3, #15
 80061c2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	89fb      	ldrh	r3, [r7, #14]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	89fa      	ldrh	r2, [r7, #14]
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0201 	orr.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e000      	b.n	80061f4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80061f2:	2302      	movs	r3, #2
  }
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800620a:	2300      	movs	r3, #0
 800620c:	603b      	str	r3, [r7, #0]
 800620e:	4b20      	ldr	r3, [pc, #128]	; (8006290 <HAL_PWREx_EnableOverDrive+0x90>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <HAL_PWREx_EnableOverDrive+0x90>)
 8006214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006218:	6413      	str	r3, [r2, #64]	; 0x40
 800621a:	4b1d      	ldr	r3, [pc, #116]	; (8006290 <HAL_PWREx_EnableOverDrive+0x90>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006226:	4b1b      	ldr	r3, [pc, #108]	; (8006294 <HAL_PWREx_EnableOverDrive+0x94>)
 8006228:	2201      	movs	r2, #1
 800622a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800622c:	f7fe f84c 	bl	80042c8 <HAL_GetTick>
 8006230:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006232:	e009      	b.n	8006248 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006234:	f7fe f848 	bl	80042c8 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006242:	d901      	bls.n	8006248 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e01f      	b.n	8006288 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006248:	4b13      	ldr	r3, [pc, #76]	; (8006298 <HAL_PWREx_EnableOverDrive+0x98>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006254:	d1ee      	bne.n	8006234 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006256:	4b11      	ldr	r3, [pc, #68]	; (800629c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006258:	2201      	movs	r2, #1
 800625a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800625c:	f7fe f834 	bl	80042c8 <HAL_GetTick>
 8006260:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006262:	e009      	b.n	8006278 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006264:	f7fe f830 	bl	80042c8 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006272:	d901      	bls.n	8006278 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e007      	b.n	8006288 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006278:	4b07      	ldr	r3, [pc, #28]	; (8006298 <HAL_PWREx_EnableOverDrive+0x98>)
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006284:	d1ee      	bne.n	8006264 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40023800 	.word	0x40023800
 8006294:	420e0040 	.word	0x420e0040
 8006298:	40007000 	.word	0x40007000
 800629c:	420e0044 	.word	0x420e0044

080062a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e25b      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d075      	beq.n	80063aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062be:	4ba3      	ldr	r3, [pc, #652]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 030c 	and.w	r3, r3, #12
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d00c      	beq.n	80062e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ca:	4ba0      	ldr	r3, [pc, #640]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d112      	bne.n	80062fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062d6:	4b9d      	ldr	r3, [pc, #628]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062e2:	d10b      	bne.n	80062fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e4:	4b99      	ldr	r3, [pc, #612]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d05b      	beq.n	80063a8 <HAL_RCC_OscConfig+0x108>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d157      	bne.n	80063a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e236      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006304:	d106      	bne.n	8006314 <HAL_RCC_OscConfig+0x74>
 8006306:	4b91      	ldr	r3, [pc, #580]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a90      	ldr	r2, [pc, #576]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 800630c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	e01d      	b.n	8006350 <HAL_RCC_OscConfig+0xb0>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800631c:	d10c      	bne.n	8006338 <HAL_RCC_OscConfig+0x98>
 800631e:	4b8b      	ldr	r3, [pc, #556]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a8a      	ldr	r2, [pc, #552]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 8006324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	4b88      	ldr	r3, [pc, #544]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a87      	ldr	r2, [pc, #540]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 8006330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	e00b      	b.n	8006350 <HAL_RCC_OscConfig+0xb0>
 8006338:	4b84      	ldr	r3, [pc, #528]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a83      	ldr	r2, [pc, #524]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 800633e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	4b81      	ldr	r3, [pc, #516]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a80      	ldr	r2, [pc, #512]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 800634a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800634e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d013      	beq.n	8006380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006358:	f7fd ffb6 	bl	80042c8 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006360:	f7fd ffb2 	bl	80042c8 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b64      	cmp	r3, #100	; 0x64
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e1fb      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006372:	4b76      	ldr	r3, [pc, #472]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0f0      	beq.n	8006360 <HAL_RCC_OscConfig+0xc0>
 800637e:	e014      	b.n	80063aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006380:	f7fd ffa2 	bl	80042c8 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006388:	f7fd ff9e 	bl	80042c8 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b64      	cmp	r3, #100	; 0x64
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e1e7      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800639a:	4b6c      	ldr	r3, [pc, #432]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f0      	bne.n	8006388 <HAL_RCC_OscConfig+0xe8>
 80063a6:	e000      	b.n	80063aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d063      	beq.n	800647e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063b6:	4b65      	ldr	r3, [pc, #404]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 030c 	and.w	r3, r3, #12
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063c2:	4b62      	ldr	r3, [pc, #392]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d11c      	bne.n	8006408 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ce:	4b5f      	ldr	r3, [pc, #380]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d116      	bne.n	8006408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063da:	4b5c      	ldr	r3, [pc, #368]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <HAL_RCC_OscConfig+0x152>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d001      	beq.n	80063f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e1bb      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f2:	4b56      	ldr	r3, [pc, #344]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	4952      	ldr	r1, [pc, #328]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 8006402:	4313      	orrs	r3, r2
 8006404:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006406:	e03a      	b.n	800647e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d020      	beq.n	8006452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006410:	4b4f      	ldr	r3, [pc, #316]	; (8006550 <HAL_RCC_OscConfig+0x2b0>)
 8006412:	2201      	movs	r2, #1
 8006414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006416:	f7fd ff57 	bl	80042c8 <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800641c:	e008      	b.n	8006430 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800641e:	f7fd ff53 	bl	80042c8 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e19c      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006430:	4b46      	ldr	r3, [pc, #280]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0f0      	beq.n	800641e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800643c:	4b43      	ldr	r3, [pc, #268]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	4940      	ldr	r1, [pc, #256]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 800644c:	4313      	orrs	r3, r2
 800644e:	600b      	str	r3, [r1, #0]
 8006450:	e015      	b.n	800647e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006452:	4b3f      	ldr	r3, [pc, #252]	; (8006550 <HAL_RCC_OscConfig+0x2b0>)
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006458:	f7fd ff36 	bl	80042c8 <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006460:	f7fd ff32 	bl	80042c8 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e17b      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006472:	4b36      	ldr	r3, [pc, #216]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f0      	bne.n	8006460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d030      	beq.n	80064ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d016      	beq.n	80064c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006492:	4b30      	ldr	r3, [pc, #192]	; (8006554 <HAL_RCC_OscConfig+0x2b4>)
 8006494:	2201      	movs	r2, #1
 8006496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006498:	f7fd ff16 	bl	80042c8 <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064a0:	f7fd ff12 	bl	80042c8 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e15b      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064b2:	4b26      	ldr	r3, [pc, #152]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 80064b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0f0      	beq.n	80064a0 <HAL_RCC_OscConfig+0x200>
 80064be:	e015      	b.n	80064ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064c0:	4b24      	ldr	r3, [pc, #144]	; (8006554 <HAL_RCC_OscConfig+0x2b4>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064c6:	f7fd feff 	bl	80042c8 <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064ce:	f7fd fefb 	bl	80042c8 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e144      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e0:	4b1a      	ldr	r3, [pc, #104]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 80064e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f0      	bne.n	80064ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80a0 	beq.w	800663a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064fa:	2300      	movs	r3, #0
 80064fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064fe:	4b13      	ldr	r3, [pc, #76]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10f      	bne.n	800652a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800650a:	2300      	movs	r3, #0
 800650c:	60bb      	str	r3, [r7, #8]
 800650e:	4b0f      	ldr	r3, [pc, #60]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	4a0e      	ldr	r2, [pc, #56]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 8006514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006518:	6413      	str	r3, [r2, #64]	; 0x40
 800651a:	4b0c      	ldr	r3, [pc, #48]	; (800654c <HAL_RCC_OscConfig+0x2ac>)
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006522:	60bb      	str	r3, [r7, #8]
 8006524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006526:	2301      	movs	r3, #1
 8006528:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800652a:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <HAL_RCC_OscConfig+0x2b8>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006532:	2b00      	cmp	r3, #0
 8006534:	d121      	bne.n	800657a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006536:	4b08      	ldr	r3, [pc, #32]	; (8006558 <HAL_RCC_OscConfig+0x2b8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a07      	ldr	r2, [pc, #28]	; (8006558 <HAL_RCC_OscConfig+0x2b8>)
 800653c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006542:	f7fd fec1 	bl	80042c8 <HAL_GetTick>
 8006546:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006548:	e011      	b.n	800656e <HAL_RCC_OscConfig+0x2ce>
 800654a:	bf00      	nop
 800654c:	40023800 	.word	0x40023800
 8006550:	42470000 	.word	0x42470000
 8006554:	42470e80 	.word	0x42470e80
 8006558:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800655c:	f7fd feb4 	bl	80042c8 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e0fd      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800656e:	4b81      	ldr	r3, [pc, #516]	; (8006774 <HAL_RCC_OscConfig+0x4d4>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d106      	bne.n	8006590 <HAL_RCC_OscConfig+0x2f0>
 8006582:	4b7d      	ldr	r3, [pc, #500]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 8006584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006586:	4a7c      	ldr	r2, [pc, #496]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 8006588:	f043 0301 	orr.w	r3, r3, #1
 800658c:	6713      	str	r3, [r2, #112]	; 0x70
 800658e:	e01c      	b.n	80065ca <HAL_RCC_OscConfig+0x32a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b05      	cmp	r3, #5
 8006596:	d10c      	bne.n	80065b2 <HAL_RCC_OscConfig+0x312>
 8006598:	4b77      	ldr	r3, [pc, #476]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 800659a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659c:	4a76      	ldr	r2, [pc, #472]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 800659e:	f043 0304 	orr.w	r3, r3, #4
 80065a2:	6713      	str	r3, [r2, #112]	; 0x70
 80065a4:	4b74      	ldr	r3, [pc, #464]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 80065a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a8:	4a73      	ldr	r2, [pc, #460]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 80065aa:	f043 0301 	orr.w	r3, r3, #1
 80065ae:	6713      	str	r3, [r2, #112]	; 0x70
 80065b0:	e00b      	b.n	80065ca <HAL_RCC_OscConfig+0x32a>
 80065b2:	4b71      	ldr	r3, [pc, #452]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 80065b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b6:	4a70      	ldr	r2, [pc, #448]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	6713      	str	r3, [r2, #112]	; 0x70
 80065be:	4b6e      	ldr	r3, [pc, #440]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 80065c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c2:	4a6d      	ldr	r2, [pc, #436]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 80065c4:	f023 0304 	bic.w	r3, r3, #4
 80065c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d015      	beq.n	80065fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d2:	f7fd fe79 	bl	80042c8 <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d8:	e00a      	b.n	80065f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065da:	f7fd fe75 	bl	80042c8 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e0bc      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f0:	4b61      	ldr	r3, [pc, #388]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 80065f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0ee      	beq.n	80065da <HAL_RCC_OscConfig+0x33a>
 80065fc:	e014      	b.n	8006628 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065fe:	f7fd fe63 	bl	80042c8 <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006604:	e00a      	b.n	800661c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006606:	f7fd fe5f 	bl	80042c8 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	f241 3288 	movw	r2, #5000	; 0x1388
 8006614:	4293      	cmp	r3, r2
 8006616:	d901      	bls.n	800661c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e0a6      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800661c:	4b56      	ldr	r3, [pc, #344]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 800661e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1ee      	bne.n	8006606 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006628:	7dfb      	ldrb	r3, [r7, #23]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d105      	bne.n	800663a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800662e:	4b52      	ldr	r3, [pc, #328]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	4a51      	ldr	r2, [pc, #324]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 8006634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006638:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 8092 	beq.w	8006768 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006644:	4b4c      	ldr	r3, [pc, #304]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f003 030c 	and.w	r3, r3, #12
 800664c:	2b08      	cmp	r3, #8
 800664e:	d05c      	beq.n	800670a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	2b02      	cmp	r3, #2
 8006656:	d141      	bne.n	80066dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006658:	4b48      	ldr	r3, [pc, #288]	; (800677c <HAL_RCC_OscConfig+0x4dc>)
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800665e:	f7fd fe33 	bl	80042c8 <HAL_GetTick>
 8006662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006664:	e008      	b.n	8006678 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006666:	f7fd fe2f 	bl	80042c8 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d901      	bls.n	8006678 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e078      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006678:	4b3f      	ldr	r3, [pc, #252]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f0      	bne.n	8006666 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	69da      	ldr	r2, [r3, #28]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	019b      	lsls	r3, r3, #6
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669a:	085b      	lsrs	r3, r3, #1
 800669c:	3b01      	subs	r3, #1
 800669e:	041b      	lsls	r3, r3, #16
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	061b      	lsls	r3, r3, #24
 80066a8:	4933      	ldr	r1, [pc, #204]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066ae:	4b33      	ldr	r3, [pc, #204]	; (800677c <HAL_RCC_OscConfig+0x4dc>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b4:	f7fd fe08 	bl	80042c8 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066bc:	f7fd fe04 	bl	80042c8 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e04d      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ce:	4b2a      	ldr	r3, [pc, #168]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0x41c>
 80066da:	e045      	b.n	8006768 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066dc:	4b27      	ldr	r3, [pc, #156]	; (800677c <HAL_RCC_OscConfig+0x4dc>)
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e2:	f7fd fdf1 	bl	80042c8 <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ea:	f7fd fded 	bl	80042c8 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e036      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066fc:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1f0      	bne.n	80066ea <HAL_RCC_OscConfig+0x44a>
 8006708:	e02e      	b.n	8006768 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d101      	bne.n	8006716 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e029      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006716:	4b18      	ldr	r3, [pc, #96]	; (8006778 <HAL_RCC_OscConfig+0x4d8>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	429a      	cmp	r2, r3
 8006728:	d11c      	bne.n	8006764 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006734:	429a      	cmp	r2, r3
 8006736:	d115      	bne.n	8006764 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800673e:	4013      	ands	r3, r2
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006744:	4293      	cmp	r3, r2
 8006746:	d10d      	bne.n	8006764 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006752:	429a      	cmp	r2, r3
 8006754:	d106      	bne.n	8006764 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006760:	429a      	cmp	r2, r3
 8006762:	d001      	beq.n	8006768 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40007000 	.word	0x40007000
 8006778:	40023800 	.word	0x40023800
 800677c:	42470060 	.word	0x42470060

08006780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e0cc      	b.n	800692e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006794:	4b68      	ldr	r3, [pc, #416]	; (8006938 <HAL_RCC_ClockConfig+0x1b8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 030f 	and.w	r3, r3, #15
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d90c      	bls.n	80067bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067a2:	4b65      	ldr	r3, [pc, #404]	; (8006938 <HAL_RCC_ClockConfig+0x1b8>)
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067aa:	4b63      	ldr	r3, [pc, #396]	; (8006938 <HAL_RCC_ClockConfig+0x1b8>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 030f 	and.w	r3, r3, #15
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d001      	beq.n	80067bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0b8      	b.n	800692e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d020      	beq.n	800680a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067d4:	4b59      	ldr	r3, [pc, #356]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	4a58      	ldr	r2, [pc, #352]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 80067da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067ec:	4b53      	ldr	r3, [pc, #332]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	4a52      	ldr	r2, [pc, #328]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f8:	4b50      	ldr	r3, [pc, #320]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	494d      	ldr	r1, [pc, #308]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 8006806:	4313      	orrs	r3, r2
 8006808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d044      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d107      	bne.n	800682e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800681e:	4b47      	ldr	r3, [pc, #284]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d119      	bne.n	800685e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e07f      	b.n	800692e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b02      	cmp	r3, #2
 8006834:	d003      	beq.n	800683e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800683a:	2b03      	cmp	r3, #3
 800683c:	d107      	bne.n	800684e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800683e:	4b3f      	ldr	r3, [pc, #252]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d109      	bne.n	800685e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e06f      	b.n	800692e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684e:	4b3b      	ldr	r3, [pc, #236]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e067      	b.n	800692e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800685e:	4b37      	ldr	r3, [pc, #220]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f023 0203 	bic.w	r2, r3, #3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	4934      	ldr	r1, [pc, #208]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 800686c:	4313      	orrs	r3, r2
 800686e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006870:	f7fd fd2a 	bl	80042c8 <HAL_GetTick>
 8006874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006876:	e00a      	b.n	800688e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006878:	f7fd fd26 	bl	80042c8 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	f241 3288 	movw	r2, #5000	; 0x1388
 8006886:	4293      	cmp	r3, r2
 8006888:	d901      	bls.n	800688e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e04f      	b.n	800692e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800688e:	4b2b      	ldr	r3, [pc, #172]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 020c 	and.w	r2, r3, #12
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	429a      	cmp	r2, r3
 800689e:	d1eb      	bne.n	8006878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068a0:	4b25      	ldr	r3, [pc, #148]	; (8006938 <HAL_RCC_ClockConfig+0x1b8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 030f 	and.w	r3, r3, #15
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d20c      	bcs.n	80068c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ae:	4b22      	ldr	r3, [pc, #136]	; (8006938 <HAL_RCC_ClockConfig+0x1b8>)
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b6:	4b20      	ldr	r3, [pc, #128]	; (8006938 <HAL_RCC_ClockConfig+0x1b8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d001      	beq.n	80068c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e032      	b.n	800692e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068d4:	4b19      	ldr	r3, [pc, #100]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	4916      	ldr	r1, [pc, #88]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d009      	beq.n	8006906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068f2:	4b12      	ldr	r3, [pc, #72]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	490e      	ldr	r1, [pc, #56]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 8006902:	4313      	orrs	r3, r2
 8006904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006906:	f000 f821 	bl	800694c <HAL_RCC_GetSysClockFreq>
 800690a:	4602      	mov	r2, r0
 800690c:	4b0b      	ldr	r3, [pc, #44]	; (800693c <HAL_RCC_ClockConfig+0x1bc>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	490a      	ldr	r1, [pc, #40]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 8006918:	5ccb      	ldrb	r3, [r1, r3]
 800691a:	fa22 f303 	lsr.w	r3, r2, r3
 800691e:	4a09      	ldr	r2, [pc, #36]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006922:	4b09      	ldr	r3, [pc, #36]	; (8006948 <HAL_RCC_ClockConfig+0x1c8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f7fd fc8a 	bl	8004240 <HAL_InitTick>

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	40023c00 	.word	0x40023c00
 800693c:	40023800 	.word	0x40023800
 8006940:	08012b0c 	.word	0x08012b0c
 8006944:	20000004 	.word	0x20000004
 8006948:	20000008 	.word	0x20000008

0800694c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800694c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	607b      	str	r3, [r7, #4]
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	2300      	movs	r3, #0
 800695e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006964:	4b67      	ldr	r3, [pc, #412]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f003 030c 	and.w	r3, r3, #12
 800696c:	2b08      	cmp	r3, #8
 800696e:	d00d      	beq.n	800698c <HAL_RCC_GetSysClockFreq+0x40>
 8006970:	2b08      	cmp	r3, #8
 8006972:	f200 80bd 	bhi.w	8006af0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <HAL_RCC_GetSysClockFreq+0x34>
 800697a:	2b04      	cmp	r3, #4
 800697c:	d003      	beq.n	8006986 <HAL_RCC_GetSysClockFreq+0x3a>
 800697e:	e0b7      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006980:	4b61      	ldr	r3, [pc, #388]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006982:	60bb      	str	r3, [r7, #8]
       break;
 8006984:	e0b7      	b.n	8006af6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006986:	4b60      	ldr	r3, [pc, #384]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006988:	60bb      	str	r3, [r7, #8]
      break;
 800698a:	e0b4      	b.n	8006af6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800698c:	4b5d      	ldr	r3, [pc, #372]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006994:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006996:	4b5b      	ldr	r3, [pc, #364]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d04d      	beq.n	8006a3e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069a2:	4b58      	ldr	r3, [pc, #352]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	099b      	lsrs	r3, r3, #6
 80069a8:	461a      	mov	r2, r3
 80069aa:	f04f 0300 	mov.w	r3, #0
 80069ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069b2:	f04f 0100 	mov.w	r1, #0
 80069b6:	ea02 0800 	and.w	r8, r2, r0
 80069ba:	ea03 0901 	and.w	r9, r3, r1
 80069be:	4640      	mov	r0, r8
 80069c0:	4649      	mov	r1, r9
 80069c2:	f04f 0200 	mov.w	r2, #0
 80069c6:	f04f 0300 	mov.w	r3, #0
 80069ca:	014b      	lsls	r3, r1, #5
 80069cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069d0:	0142      	lsls	r2, r0, #5
 80069d2:	4610      	mov	r0, r2
 80069d4:	4619      	mov	r1, r3
 80069d6:	ebb0 0008 	subs.w	r0, r0, r8
 80069da:	eb61 0109 	sbc.w	r1, r1, r9
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	018b      	lsls	r3, r1, #6
 80069e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069ec:	0182      	lsls	r2, r0, #6
 80069ee:	1a12      	subs	r2, r2, r0
 80069f0:	eb63 0301 	sbc.w	r3, r3, r1
 80069f4:	f04f 0000 	mov.w	r0, #0
 80069f8:	f04f 0100 	mov.w	r1, #0
 80069fc:	00d9      	lsls	r1, r3, #3
 80069fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a02:	00d0      	lsls	r0, r2, #3
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	eb12 0208 	adds.w	r2, r2, r8
 8006a0c:	eb43 0309 	adc.w	r3, r3, r9
 8006a10:	f04f 0000 	mov.w	r0, #0
 8006a14:	f04f 0100 	mov.w	r1, #0
 8006a18:	0299      	lsls	r1, r3, #10
 8006a1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a1e:	0290      	lsls	r0, r2, #10
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4610      	mov	r0, r2
 8006a26:	4619      	mov	r1, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f04f 0300 	mov.w	r3, #0
 8006a30:	f7fa f93a 	bl	8000ca8 <__aeabi_uldivmod>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4613      	mov	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	e04a      	b.n	8006ad4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a3e:	4b31      	ldr	r3, [pc, #196]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	099b      	lsrs	r3, r3, #6
 8006a44:	461a      	mov	r2, r3
 8006a46:	f04f 0300 	mov.w	r3, #0
 8006a4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a4e:	f04f 0100 	mov.w	r1, #0
 8006a52:	ea02 0400 	and.w	r4, r2, r0
 8006a56:	ea03 0501 	and.w	r5, r3, r1
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	014b      	lsls	r3, r1, #5
 8006a68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006a6c:	0142      	lsls	r2, r0, #5
 8006a6e:	4610      	mov	r0, r2
 8006a70:	4619      	mov	r1, r3
 8006a72:	1b00      	subs	r0, r0, r4
 8006a74:	eb61 0105 	sbc.w	r1, r1, r5
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	018b      	lsls	r3, r1, #6
 8006a82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a86:	0182      	lsls	r2, r0, #6
 8006a88:	1a12      	subs	r2, r2, r0
 8006a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8006a8e:	f04f 0000 	mov.w	r0, #0
 8006a92:	f04f 0100 	mov.w	r1, #0
 8006a96:	00d9      	lsls	r1, r3, #3
 8006a98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a9c:	00d0      	lsls	r0, r2, #3
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	1912      	adds	r2, r2, r4
 8006aa4:	eb45 0303 	adc.w	r3, r5, r3
 8006aa8:	f04f 0000 	mov.w	r0, #0
 8006aac:	f04f 0100 	mov.w	r1, #0
 8006ab0:	0299      	lsls	r1, r3, #10
 8006ab2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006ab6:	0290      	lsls	r0, r2, #10
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	4610      	mov	r0, r2
 8006abe:	4619      	mov	r1, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	f7fa f8ee 	bl	8000ca8 <__aeabi_uldivmod>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ad4:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	0c1b      	lsrs	r3, r3, #16
 8006ada:	f003 0303 	and.w	r3, r3, #3
 8006ade:	3301      	adds	r3, #1
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aec:	60bb      	str	r3, [r7, #8]
      break;
 8006aee:	e002      	b.n	8006af6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006af0:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006af2:	60bb      	str	r3, [r7, #8]
      break;
 8006af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006af6:	68bb      	ldr	r3, [r7, #8]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006b02:	bf00      	nop
 8006b04:	40023800 	.word	0x40023800
 8006b08:	00f42400 	.word	0x00f42400

08006b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b10:	4b03      	ldr	r3, [pc, #12]	; (8006b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b12:	681b      	ldr	r3, [r3, #0]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20000004 	.word	0x20000004

08006b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b28:	f7ff fff0 	bl	8006b0c <HAL_RCC_GetHCLKFreq>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	0a9b      	lsrs	r3, r3, #10
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	4903      	ldr	r1, [pc, #12]	; (8006b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b3a:	5ccb      	ldrb	r3, [r1, r3]
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40023800 	.word	0x40023800
 8006b48:	08012b1c 	.word	0x08012b1c

08006b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b50:	f7ff ffdc 	bl	8006b0c <HAL_RCC_GetHCLKFreq>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	0b5b      	lsrs	r3, r3, #13
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	4903      	ldr	r1, [pc, #12]	; (8006b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b62:	5ccb      	ldrb	r3, [r1, r3]
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	08012b1c 	.word	0x08012b1c

08006b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10b      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d075      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ba8:	4bad      	ldr	r3, [pc, #692]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bae:	f7fd fb8b 	bl	80042c8 <HAL_GetTick>
 8006bb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bb6:	f7fd fb87 	bl	80042c8 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e18b      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bc8:	4ba6      	ldr	r3, [pc, #664]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1f0      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d009      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	019a      	lsls	r2, r3, #6
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	071b      	lsls	r3, r3, #28
 8006bec:	499d      	ldr	r1, [pc, #628]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01f      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c00:	4b98      	ldr	r3, [pc, #608]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c06:	0f1b      	lsrs	r3, r3, #28
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	019a      	lsls	r2, r3, #6
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	061b      	lsls	r3, r3, #24
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	071b      	lsls	r3, r3, #28
 8006c20:	4990      	ldr	r1, [pc, #576]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006c28:	4b8e      	ldr	r3, [pc, #568]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c2e:	f023 021f 	bic.w	r2, r3, #31
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	498a      	ldr	r1, [pc, #552]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00d      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	019a      	lsls	r2, r3, #6
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	061b      	lsls	r3, r3, #24
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	071b      	lsls	r3, r3, #28
 8006c60:	4980      	ldr	r1, [pc, #512]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c68:	4b7d      	ldr	r3, [pc, #500]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c6e:	f7fd fb2b 	bl	80042c8 <HAL_GetTick>
 8006c72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c74:	e008      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c76:	f7fd fb27 	bl	80042c8 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e12b      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c88:	4b76      	ldr	r3, [pc, #472]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0f0      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d105      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d079      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006cac:	4b6e      	ldr	r3, [pc, #440]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cb2:	f7fd fb09 	bl	80042c8 <HAL_GetTick>
 8006cb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cb8:	e008      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006cba:	f7fd fb05 	bl	80042c8 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e109      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ccc:	4b65      	ldr	r3, [pc, #404]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd8:	d0ef      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d020      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ce6:	4b5f      	ldr	r3, [pc, #380]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cec:	0f1b      	lsrs	r3, r3, #28
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	019a      	lsls	r2, r3, #6
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	061b      	lsls	r3, r3, #24
 8006d00:	431a      	orrs	r2, r3
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	071b      	lsls	r3, r3, #28
 8006d06:	4957      	ldr	r1, [pc, #348]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d0e:	4b55      	ldr	r3, [pc, #340]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	4950      	ldr	r1, [pc, #320]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01e      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d34:	4b4b      	ldr	r3, [pc, #300]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3a:	0e1b      	lsrs	r3, r3, #24
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	019a      	lsls	r2, r3, #6
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	061b      	lsls	r3, r3, #24
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	071b      	lsls	r3, r3, #28
 8006d54:	4943      	ldr	r1, [pc, #268]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006d5c:	4b41      	ldr	r3, [pc, #260]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	493e      	ldr	r1, [pc, #248]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d72:	4b3d      	ldr	r3, [pc, #244]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d78:	f7fd faa6 	bl	80042c8 <HAL_GetTick>
 8006d7c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d80:	f7fd faa2 	bl	80042c8 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e0a6      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d92:	4b34      	ldr	r3, [pc, #208]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d9e:	d1ef      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 808d 	beq.w	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	4b2c      	ldr	r3, [pc, #176]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	4a2b      	ldr	r2, [pc, #172]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006dbe:	4b29      	ldr	r3, [pc, #164]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006dca:	4b28      	ldr	r3, [pc, #160]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a27      	ldr	r2, [pc, #156]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dd4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006dd6:	f7fd fa77 	bl	80042c8 <HAL_GetTick>
 8006dda:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ddc:	e008      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006dde:	f7fd fa73 	bl	80042c8 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e077      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006df0:	4b1e      	ldr	r3, [pc, #120]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0f0      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dfc:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e04:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d039      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d032      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e1a:	4b12      	ldr	r3, [pc, #72]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e24:	4b12      	ldr	r3, [pc, #72]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e2a:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e30:	4a0c      	ldr	r2, [pc, #48]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e36:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d11e      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e42:	f7fd fa41 	bl	80042c8 <HAL_GetTick>
 8006e46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e48:	e014      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e4a:	f7fd fa3d 	bl	80042c8 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d90b      	bls.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e03f      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006e60:	42470068 	.word	0x42470068
 8006e64:	40023800 	.word	0x40023800
 8006e68:	42470070 	.word	0x42470070
 8006e6c:	40007000 	.word	0x40007000
 8006e70:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e74:	4b1c      	ldr	r3, [pc, #112]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0e4      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e8c:	d10d      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006e8e:	4b16      	ldr	r3, [pc, #88]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea2:	4911      	ldr	r1, [pc, #68]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	608b      	str	r3, [r1, #8]
 8006ea8:	e005      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006eaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	4a0e      	ldr	r2, [pc, #56]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eb0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006eb4:	6093      	str	r3, [r2, #8]
 8006eb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ec2:	4909      	ldr	r1, [pc, #36]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d004      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006eda:	4b04      	ldr	r3, [pc, #16]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006edc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40023800 	.word	0x40023800
 8006eec:	424711e0 	.word	0x424711e0

08006ef0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e083      	b.n	800700a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	7f5b      	ldrb	r3, [r3, #29]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d105      	bne.n	8006f18 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7fc fe26 	bl	8003b64 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	22ca      	movs	r2, #202	; 0xca
 8006f24:	625a      	str	r2, [r3, #36]	; 0x24
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2253      	movs	r2, #83	; 0x53
 8006f2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 faa8 	bl	8007484 <RTC_EnterInitMode>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d008      	beq.n	8006f4c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	22ff      	movs	r2, #255	; 0xff
 8006f40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2204      	movs	r2, #4
 8006f46:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e05e      	b.n	800700a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6899      	ldr	r1, [r3, #8]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	68d2      	ldr	r2, [r2, #12]
 8006f86:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6919      	ldr	r1, [r3, #16]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	041a      	lsls	r2, r3, #16
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006faa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10e      	bne.n	8006fd8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa3a 	bl	8007434 <HAL_RTC_WaitForSynchro>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d008      	beq.n	8006fd8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	22ff      	movs	r2, #255	; 0xff
 8006fcc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2204      	movs	r2, #4
 8006fd2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e018      	b.n	800700a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fe6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	22ff      	movs	r2, #255	; 0xff
 8007000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007008:	2300      	movs	r3, #0
  }
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007012:	b590      	push	{r4, r7, lr}
 8007014:	b087      	sub	sp, #28
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	7f1b      	ldrb	r3, [r3, #28]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_RTC_SetTime+0x1c>
 800702a:	2302      	movs	r3, #2
 800702c:	e0aa      	b.n	8007184 <HAL_RTC_SetTime+0x172>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2202      	movs	r2, #2
 8007038:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d126      	bne.n	800708e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	d102      	bne.n	8007054 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2200      	movs	r2, #0
 8007052:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	4618      	mov	r0, r3
 800705a:	f000 fa3f 	bl	80074dc <RTC_ByteToBcd2>
 800705e:	4603      	mov	r3, r0
 8007060:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	785b      	ldrb	r3, [r3, #1]
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fa38 	bl	80074dc <RTC_ByteToBcd2>
 800706c:	4603      	mov	r3, r0
 800706e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007070:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	789b      	ldrb	r3, [r3, #2]
 8007076:	4618      	mov	r0, r3
 8007078:	f000 fa30 	bl	80074dc <RTC_ByteToBcd2>
 800707c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800707e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	78db      	ldrb	r3, [r3, #3]
 8007086:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007088:	4313      	orrs	r3, r2
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	e018      	b.n	80070c0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007098:	2b00      	cmp	r3, #0
 800709a:	d102      	bne.n	80070a2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2200      	movs	r2, #0
 80070a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070ae:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80070b4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	78db      	ldrb	r3, [r3, #3]
 80070ba:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070bc:	4313      	orrs	r3, r2
 80070be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	22ca      	movs	r2, #202	; 0xca
 80070c6:	625a      	str	r2, [r3, #36]	; 0x24
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2253      	movs	r2, #83	; 0x53
 80070ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f9d7 	bl	8007484 <RTC_EnterInitMode>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	22ff      	movs	r2, #255	; 0xff
 80070e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2204      	movs	r2, #4
 80070e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e047      	b.n	8007184 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80070fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007102:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007112:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6899      	ldr	r1, [r3, #8]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	431a      	orrs	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800713a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	d111      	bne.n	800716e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 f972 	bl	8007434 <HAL_RTC_WaitForSynchro>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00b      	beq.n	800716e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	22ff      	movs	r2, #255	; 0xff
 800715c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2204      	movs	r2, #4
 8007162:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e00a      	b.n	8007184 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	22ff      	movs	r2, #255	; 0xff
 8007174:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007182:	2300      	movs	r3, #0
  }
}
 8007184:	4618      	mov	r0, r3
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	bd90      	pop	{r4, r7, pc}

0800718c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80071be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80071c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	0c1b      	lsrs	r3, r3, #16
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	0a1b      	lsrs	r3, r3, #8
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	0c1b      	lsrs	r3, r3, #16
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d11a      	bne.n	800723e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	4618      	mov	r0, r3
 800720e:	f000 f983 	bl	8007518 <RTC_Bcd2ToByte>
 8007212:	4603      	mov	r3, r0
 8007214:	461a      	mov	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	4618      	mov	r0, r3
 8007220:	f000 f97a 	bl	8007518 <RTC_Bcd2ToByte>
 8007224:	4603      	mov	r3, r0
 8007226:	461a      	mov	r2, r3
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	789b      	ldrb	r3, [r3, #2]
 8007230:	4618      	mov	r0, r3
 8007232:	f000 f971 	bl	8007518 <RTC_Bcd2ToByte>
 8007236:	4603      	mov	r3, r0
 8007238:	461a      	mov	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007248:	b590      	push	{r4, r7, lr}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	7f1b      	ldrb	r3, [r3, #28]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d101      	bne.n	8007264 <HAL_RTC_SetDate+0x1c>
 8007260:	2302      	movs	r3, #2
 8007262:	e094      	b.n	800738e <HAL_RTC_SetDate+0x146>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2202      	movs	r2, #2
 800726e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10e      	bne.n	8007294 <HAL_RTC_SetDate+0x4c>
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	f003 0310 	and.w	r3, r3, #16
 800727e:	2b00      	cmp	r3, #0
 8007280:	d008      	beq.n	8007294 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	785b      	ldrb	r3, [r3, #1]
 8007286:	f023 0310 	bic.w	r3, r3, #16
 800728a:	b2db      	uxtb	r3, r3
 800728c:	330a      	adds	r3, #10
 800728e:	b2da      	uxtb	r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d11c      	bne.n	80072d4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	78db      	ldrb	r3, [r3, #3]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f91c 	bl	80074dc <RTC_ByteToBcd2>
 80072a4:	4603      	mov	r3, r0
 80072a6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 f915 	bl	80074dc <RTC_ByteToBcd2>
 80072b2:	4603      	mov	r3, r0
 80072b4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80072b6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	789b      	ldrb	r3, [r3, #2]
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 f90d 	bl	80074dc <RTC_ByteToBcd2>
 80072c2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80072c4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	e00e      	b.n	80072f2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	78db      	ldrb	r3, [r3, #3]
 80072d8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	785b      	ldrb	r3, [r3, #1]
 80072de:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80072e0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80072e6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	22ca      	movs	r2, #202	; 0xca
 80072f8:	625a      	str	r2, [r3, #36]	; 0x24
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2253      	movs	r2, #83	; 0x53
 8007300:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 f8be 	bl	8007484 <RTC_EnterInitMode>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	22ff      	movs	r2, #255	; 0xff
 8007314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2204      	movs	r2, #4
 800731a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e033      	b.n	800738e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007330:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007334:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007344:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b00      	cmp	r3, #0
 8007352:	d111      	bne.n	8007378 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 f86d 	bl	8007434 <HAL_RTC_WaitForSynchro>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	22ff      	movs	r2, #255	; 0xff
 8007366:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2204      	movs	r2, #4
 800736c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e00a      	b.n	800738e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	22ff      	movs	r2, #255	; 0xff
 800737e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2201      	movs	r2, #1
 8007384:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800738c:	2300      	movs	r3, #0
  }
}
 800738e:	4618      	mov	r0, r3
 8007390:	371c      	adds	r7, #28
 8007392:	46bd      	mov	sp, r7
 8007394:	bd90      	pop	{r4, r7, pc}

08007396 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b086      	sub	sp, #24
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073b4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	0c1b      	lsrs	r3, r3, #16
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	0a1b      	lsrs	r3, r3, #8
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	f003 031f 	and.w	r3, r3, #31
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	0b5b      	lsrs	r3, r3, #13
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d11a      	bne.n	800742a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	78db      	ldrb	r3, [r3, #3]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 f88d 	bl	8007518 <RTC_Bcd2ToByte>
 80073fe:	4603      	mov	r3, r0
 8007400:	461a      	mov	r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	4618      	mov	r0, r3
 800740c:	f000 f884 	bl	8007518 <RTC_Bcd2ToByte>
 8007410:	4603      	mov	r3, r0
 8007412:	461a      	mov	r2, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	789b      	ldrb	r3, [r3, #2]
 800741c:	4618      	mov	r0, r3
 800741e:	f000 f87b 	bl	8007518 <RTC_Bcd2ToByte>
 8007422:	4603      	mov	r3, r0
 8007424:	461a      	mov	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800744e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007450:	f7fc ff3a 	bl	80042c8 <HAL_GetTick>
 8007454:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007456:	e009      	b.n	800746c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007458:	f7fc ff36 	bl	80042c8 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007466:	d901      	bls.n	800746c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e007      	b.n	800747c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0ee      	beq.n	8007458 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749a:	2b00      	cmp	r3, #0
 800749c:	d119      	bne.n	80074d2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f04f 32ff 	mov.w	r2, #4294967295
 80074a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074a8:	f7fc ff0e 	bl	80042c8 <HAL_GetTick>
 80074ac:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80074ae:	e009      	b.n	80074c4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074b0:	f7fc ff0a 	bl	80042c8 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074be:	d901      	bls.n	80074c4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e007      	b.n	80074d4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0ee      	beq.n	80074b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80074ea:	e005      	b.n	80074f8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3301      	adds	r3, #1
 80074f0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80074f2:	79fb      	ldrb	r3, [r7, #7]
 80074f4:	3b0a      	subs	r3, #10
 80074f6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80074f8:	79fb      	ldrb	r3, [r7, #7]
 80074fa:	2b09      	cmp	r3, #9
 80074fc:	d8f6      	bhi.n	80074ec <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	011b      	lsls	r3, r3, #4
 8007504:	b2da      	uxtb	r2, r3
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	4313      	orrs	r3, r2
 800750a:	b2db      	uxtb	r3, r3
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	091b      	lsrs	r3, r3, #4
 800752a:	b2db      	uxtb	r3, r3
 800752c:	461a      	mov	r2, r3
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	b2da      	uxtb	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	4413      	add	r3, r2
 8007546:	b2db      	uxtb	r3, r3
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e056      	b.n	8007614 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d106      	bne.n	8007586 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7fc fb05 	bl	8003b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2202      	movs	r2, #2
 800758a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800759c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	431a      	orrs	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	431a      	orrs	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	431a      	orrs	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	ea42 0103 	orr.w	r1, r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	0c1b      	lsrs	r3, r3, #16
 80075e4:	f003 0104 	and.w	r1, r3, #4
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	69da      	ldr	r2, [r3, #28]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007602:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af02      	add	r7, sp, #8
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	4613      	mov	r3, r2
 800762a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007638:	d112      	bne.n	8007660 <HAL_SPI_Receive+0x44>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10e      	bne.n	8007660 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2204      	movs	r2, #4
 8007646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800764a:	88fa      	ldrh	r2, [r7, #6]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	4613      	mov	r3, r2
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 f8e9 	bl	800782e <HAL_SPI_TransmitReceive>
 800765c:	4603      	mov	r3, r0
 800765e:	e0e2      	b.n	8007826 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <HAL_SPI_Receive+0x52>
 800766a:	2302      	movs	r3, #2
 800766c:	e0db      	b.n	8007826 <HAL_SPI_Receive+0x20a>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007676:	f7fc fe27 	bl	80042c8 <HAL_GetTick>
 800767a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b01      	cmp	r3, #1
 8007686:	d002      	beq.n	800768e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007688:	2302      	movs	r3, #2
 800768a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800768c:	e0c2      	b.n	8007814 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <HAL_SPI_Receive+0x7e>
 8007694:	88fb      	ldrh	r3, [r7, #6]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800769e:	e0b9      	b.n	8007814 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2204      	movs	r2, #4
 80076a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	88fa      	ldrh	r2, [r7, #6]
 80076b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	88fa      	ldrh	r2, [r7, #6]
 80076be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076e6:	d107      	bne.n	80076f8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007702:	2b40      	cmp	r3, #64	; 0x40
 8007704:	d007      	beq.n	8007716 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007714:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d162      	bne.n	80077e4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800771e:	e02e      	b.n	800777e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b01      	cmp	r3, #1
 800772c:	d115      	bne.n	800775a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f103 020c 	add.w	r2, r3, #12
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773a:	7812      	ldrb	r2, [r2, #0]
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800774e:	b29b      	uxth	r3, r3
 8007750:	3b01      	subs	r3, #1
 8007752:	b29a      	uxth	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007758:	e011      	b.n	800777e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800775a:	f7fc fdb5 	bl	80042c8 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d803      	bhi.n	8007772 <HAL_SPI_Receive+0x156>
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007770:	d102      	bne.n	8007778 <HAL_SPI_Receive+0x15c>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d102      	bne.n	800777e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800777c:	e04a      	b.n	8007814 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007782:	b29b      	uxth	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1cb      	bne.n	8007720 <HAL_SPI_Receive+0x104>
 8007788:	e031      	b.n	80077ee <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b01      	cmp	r3, #1
 8007796:	d113      	bne.n	80077c0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	b292      	uxth	r2, r2
 80077a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077aa:	1c9a      	adds	r2, r3, #2
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077be:	e011      	b.n	80077e4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077c0:	f7fc fd82 	bl	80042c8 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d803      	bhi.n	80077d8 <HAL_SPI_Receive+0x1bc>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d6:	d102      	bne.n	80077de <HAL_SPI_Receive+0x1c2>
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d102      	bne.n	80077e4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80077e2:	e017      	b.n	8007814 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1cd      	bne.n	800778a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f000 fa27 	bl	8007c46 <SPI_EndRxTransaction>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2220      	movs	r2, #32
 8007802:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	75fb      	strb	r3, [r7, #23]
 8007810:	e000      	b.n	8007814 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007812:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007824:	7dfb      	ldrb	r3, [r7, #23]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b08c      	sub	sp, #48	; 0x30
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800783c:	2301      	movs	r3, #1
 800783e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800784c:	2b01      	cmp	r3, #1
 800784e:	d101      	bne.n	8007854 <HAL_SPI_TransmitReceive+0x26>
 8007850:	2302      	movs	r3, #2
 8007852:	e18a      	b.n	8007b6a <HAL_SPI_TransmitReceive+0x33c>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800785c:	f7fc fd34 	bl	80042c8 <HAL_GetTick>
 8007860:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007872:	887b      	ldrh	r3, [r7, #2]
 8007874:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800787a:	2b01      	cmp	r3, #1
 800787c:	d00f      	beq.n	800789e <HAL_SPI_TransmitReceive+0x70>
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007884:	d107      	bne.n	8007896 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d103      	bne.n	8007896 <HAL_SPI_TransmitReceive+0x68>
 800788e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007892:	2b04      	cmp	r3, #4
 8007894:	d003      	beq.n	800789e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007896:	2302      	movs	r3, #2
 8007898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800789c:	e15b      	b.n	8007b56 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <HAL_SPI_TransmitReceive+0x82>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <HAL_SPI_TransmitReceive+0x82>
 80078aa:	887b      	ldrh	r3, [r7, #2]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d103      	bne.n	80078b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078b6:	e14e      	b.n	8007b56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	d003      	beq.n	80078cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2205      	movs	r2, #5
 80078c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	887a      	ldrh	r2, [r7, #2]
 80078dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	887a      	ldrh	r2, [r7, #2]
 80078e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	887a      	ldrh	r2, [r7, #2]
 80078ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	887a      	ldrh	r2, [r7, #2]
 80078f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790c:	2b40      	cmp	r3, #64	; 0x40
 800790e:	d007      	beq.n	8007920 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800791e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007928:	d178      	bne.n	8007a1c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <HAL_SPI_TransmitReceive+0x10a>
 8007932:	8b7b      	ldrh	r3, [r7, #26]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d166      	bne.n	8007a06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793c:	881a      	ldrh	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007948:	1c9a      	adds	r2, r3, #2
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007952:	b29b      	uxth	r3, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800795c:	e053      	b.n	8007a06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b02      	cmp	r3, #2
 800796a:	d11b      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x176>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007970:	b29b      	uxth	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d016      	beq.n	80079a4 <HAL_SPI_TransmitReceive+0x176>
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	2b01      	cmp	r3, #1
 800797a:	d113      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007980:	881a      	ldrh	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	1c9a      	adds	r2, r3, #2
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d119      	bne.n	80079e6 <HAL_SPI_TransmitReceive+0x1b8>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d014      	beq.n	80079e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	b292      	uxth	r2, r2
 80079c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ce:	1c9a      	adds	r2, r3, #2
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079e2:	2301      	movs	r3, #1
 80079e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079e6:	f7fc fc6f 	bl	80042c8 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d807      	bhi.n	8007a06 <HAL_SPI_TransmitReceive+0x1d8>
 80079f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fc:	d003      	beq.n	8007a06 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a04:	e0a7      	b.n	8007b56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1a6      	bne.n	800795e <HAL_SPI_TransmitReceive+0x130>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1a1      	bne.n	800795e <HAL_SPI_TransmitReceive+0x130>
 8007a1a:	e07c      	b.n	8007b16 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <HAL_SPI_TransmitReceive+0x1fc>
 8007a24:	8b7b      	ldrh	r3, [r7, #26]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d16b      	bne.n	8007b02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	330c      	adds	r3, #12
 8007a34:	7812      	ldrb	r2, [r2, #0]
 8007a36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a50:	e057      	b.n	8007b02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 0302 	and.w	r3, r3, #2
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d11c      	bne.n	8007a9a <HAL_SPI_TransmitReceive+0x26c>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d017      	beq.n	8007a9a <HAL_SPI_TransmitReceive+0x26c>
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d114      	bne.n	8007a9a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	330c      	adds	r3, #12
 8007a7a:	7812      	ldrb	r2, [r2, #0]
 8007a7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d119      	bne.n	8007adc <HAL_SPI_TransmitReceive+0x2ae>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d014      	beq.n	8007adc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68da      	ldr	r2, [r3, #12]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007adc:	f7fc fbf4 	bl	80042c8 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d803      	bhi.n	8007af4 <HAL_SPI_TransmitReceive+0x2c6>
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d102      	bne.n	8007afa <HAL_SPI_TransmitReceive+0x2cc>
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d103      	bne.n	8007b02 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b00:	e029      	b.n	8007b56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1a2      	bne.n	8007a52 <HAL_SPI_TransmitReceive+0x224>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d19d      	bne.n	8007a52 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 f8f8 	bl	8007d10 <SPI_EndRxTxTransaction>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d006      	beq.n	8007b34 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b32:	e010      	b.n	8007b56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10b      	bne.n	8007b54 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	617b      	str	r3, [r7, #20]
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	e000      	b.n	8007b56 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007b54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3730      	adds	r7, #48	; 0x30
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	603b      	str	r3, [r7, #0]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b82:	e04c      	b.n	8007c1e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8a:	d048      	beq.n	8007c1e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007b8c:	f7fc fb9c 	bl	80042c8 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d902      	bls.n	8007ba2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d13d      	bne.n	8007c1e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bba:	d111      	bne.n	8007be0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bc4:	d004      	beq.n	8007bd0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bce:	d107      	bne.n	8007be0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007be8:	d10f      	bne.n	8007c0a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e00f      	b.n	8007c3e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4013      	ands	r3, r2
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	bf0c      	ite	eq
 8007c2e:	2301      	moveq	r3, #1
 8007c30:	2300      	movne	r3, #0
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	461a      	mov	r2, r3
 8007c36:	79fb      	ldrb	r3, [r7, #7]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d1a3      	bne.n	8007b84 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b086      	sub	sp, #24
 8007c4a:	af02      	add	r7, sp, #8
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c5a:	d111      	bne.n	8007c80 <SPI_EndRxTransaction+0x3a>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c64:	d004      	beq.n	8007c70 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c6e:	d107      	bne.n	8007c80 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c7e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c88:	d12a      	bne.n	8007ce0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c92:	d012      	beq.n	8007cba <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2180      	movs	r1, #128	; 0x80
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f7ff ff67 	bl	8007b72 <SPI_WaitFlagStateUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d02d      	beq.n	8007d06 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cae:	f043 0220 	orr.w	r2, r3, #32
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e026      	b.n	8007d08 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f7ff ff54 	bl	8007b72 <SPI_WaitFlagStateUntilTimeout>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d01a      	beq.n	8007d06 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd4:	f043 0220 	orr.w	r2, r3, #32
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e013      	b.n	8007d08 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2101      	movs	r1, #1
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff ff41 	bl	8007b72 <SPI_WaitFlagStateUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d007      	beq.n	8007d06 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfa:	f043 0220 	orr.w	r2, r3, #32
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e000      	b.n	8007d08 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af02      	add	r7, sp, #8
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d1c:	4b1b      	ldr	r3, [pc, #108]	; (8007d8c <SPI_EndRxTxTransaction+0x7c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a1b      	ldr	r2, [pc, #108]	; (8007d90 <SPI_EndRxTxTransaction+0x80>)
 8007d22:	fba2 2303 	umull	r2, r3, r2, r3
 8007d26:	0d5b      	lsrs	r3, r3, #21
 8007d28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d2c:	fb02 f303 	mul.w	r3, r2, r3
 8007d30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d3a:	d112      	bne.n	8007d62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2200      	movs	r2, #0
 8007d44:	2180      	movs	r1, #128	; 0x80
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f7ff ff13 	bl	8007b72 <SPI_WaitFlagStateUntilTimeout>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d016      	beq.n	8007d80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d56:	f043 0220 	orr.w	r2, r3, #32
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e00f      	b.n	8007d82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00a      	beq.n	8007d7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d78:	2b80      	cmp	r3, #128	; 0x80
 8007d7a:	d0f2      	beq.n	8007d62 <SPI_EndRxTxTransaction+0x52>
 8007d7c:	e000      	b.n	8007d80 <SPI_EndRxTxTransaction+0x70>
        break;
 8007d7e:	bf00      	nop
  }

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000004 	.word	0x20000004
 8007d90:	165e9f81 	.word	0x165e9f81

08007d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e01d      	b.n	8007de2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d106      	bne.n	8007dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7fb ff9e 	bl	8003cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	f000 fb8e 	bl	80084f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b082      	sub	sp, #8
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e01d      	b.n	8007e38 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d106      	bne.n	8007e16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f815 	bl	8007e40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2202      	movs	r2, #2
 8007e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3304      	adds	r3, #4
 8007e26:	4619      	mov	r1, r3
 8007e28:	4610      	mov	r0, r2
 8007e2a:	f000 fb63 	bl	80084f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2201      	movs	r2, #1
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fe2e 	bl	8008ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a15      	ldr	r2, [pc, #84]	; (8007ec8 <HAL_TIM_PWM_Start+0x74>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d004      	beq.n	8007e80 <HAL_TIM_PWM_Start+0x2c>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a14      	ldr	r2, [pc, #80]	; (8007ecc <HAL_TIM_PWM_Start+0x78>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d101      	bne.n	8007e84 <HAL_TIM_PWM_Start+0x30>
 8007e80:	2301      	movs	r3, #1
 8007e82:	e000      	b.n	8007e86 <HAL_TIM_PWM_Start+0x32>
 8007e84:	2300      	movs	r3, #0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d007      	beq.n	8007e9a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 0307 	and.w	r3, r3, #7
 8007ea4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b06      	cmp	r3, #6
 8007eaa:	d007      	beq.n	8007ebc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0201 	orr.w	r2, r2, #1
 8007eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40010000 	.word	0x40010000
 8007ecc:	40010400 	.word	0x40010400

08007ed0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 fdf0 	bl	8008ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a22      	ldr	r2, [pc, #136]	; (8007f78 <HAL_TIM_PWM_Stop+0xa8>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d004      	beq.n	8007efc <HAL_TIM_PWM_Stop+0x2c>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a21      	ldr	r2, [pc, #132]	; (8007f7c <HAL_TIM_PWM_Stop+0xac>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d101      	bne.n	8007f00 <HAL_TIM_PWM_Stop+0x30>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e000      	b.n	8007f02 <HAL_TIM_PWM_Stop+0x32>
 8007f00:	2300      	movs	r3, #0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d017      	beq.n	8007f36 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6a1a      	ldr	r2, [r3, #32]
 8007f0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f10:	4013      	ands	r3, r2
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10f      	bne.n	8007f36 <HAL_TIM_PWM_Stop+0x66>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6a1a      	ldr	r2, [r3, #32]
 8007f1c:	f240 4344 	movw	r3, #1092	; 0x444
 8007f20:	4013      	ands	r3, r2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d107      	bne.n	8007f36 <HAL_TIM_PWM_Stop+0x66>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6a1a      	ldr	r2, [r3, #32]
 8007f3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f40:	4013      	ands	r3, r2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10f      	bne.n	8007f66 <HAL_TIM_PWM_Stop+0x96>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6a1a      	ldr	r2, [r3, #32]
 8007f4c:	f240 4344 	movw	r3, #1092	; 0x444
 8007f50:	4013      	ands	r3, r2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d107      	bne.n	8007f66 <HAL_TIM_PWM_Stop+0x96>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0201 	bic.w	r2, r2, #1
 8007f64:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	40010000 	.word	0x40010000
 8007f7c:	40010400 	.word	0x40010400

08007f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d122      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d11b      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f06f 0202 	mvn.w	r2, #2
 8007fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fa78 	bl	80084b8 <HAL_TIM_IC_CaptureCallback>
 8007fc8:	e005      	b.n	8007fd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fa6a 	bl	80084a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fa7b 	bl	80084cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 0304 	and.w	r3, r3, #4
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d122      	bne.n	8008030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d11b      	bne.n	8008030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f06f 0204 	mvn.w	r2, #4
 8008000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2202      	movs	r2, #2
 8008006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fa4e 	bl	80084b8 <HAL_TIM_IC_CaptureCallback>
 800801c:	e005      	b.n	800802a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fa40 	bl	80084a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fa51 	bl	80084cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b08      	cmp	r3, #8
 800803c:	d122      	bne.n	8008084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b08      	cmp	r3, #8
 800804a:	d11b      	bne.n	8008084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f06f 0208 	mvn.w	r2, #8
 8008054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2204      	movs	r2, #4
 800805a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fa24 	bl	80084b8 <HAL_TIM_IC_CaptureCallback>
 8008070:	e005      	b.n	800807e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fa16 	bl	80084a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fa27 	bl	80084cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b10      	cmp	r3, #16
 8008090:	d122      	bne.n	80080d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0310 	and.w	r3, r3, #16
 800809c:	2b10      	cmp	r3, #16
 800809e:	d11b      	bne.n	80080d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0210 	mvn.w	r2, #16
 80080a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2208      	movs	r2, #8
 80080ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f9fa 	bl	80084b8 <HAL_TIM_IC_CaptureCallback>
 80080c4:	e005      	b.n	80080d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f9ec 	bl	80084a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f9fd 	bl	80084cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d10e      	bne.n	8008104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d107      	bne.n	8008104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f06f 0201 	mvn.w	r2, #1
 80080fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7fa ffee 	bl	80030e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810e:	2b80      	cmp	r3, #128	; 0x80
 8008110:	d10e      	bne.n	8008130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811c:	2b80      	cmp	r3, #128	; 0x80
 800811e:	d107      	bne.n	8008130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fd78 	bl	8008c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813a:	2b40      	cmp	r3, #64	; 0x40
 800813c:	d10e      	bne.n	800815c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008148:	2b40      	cmp	r3, #64	; 0x40
 800814a:	d107      	bne.n	800815c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f9c2 	bl	80084e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b20      	cmp	r3, #32
 8008168:	d10e      	bne.n	8008188 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f003 0320 	and.w	r3, r3, #32
 8008174:	2b20      	cmp	r3, #32
 8008176:	d107      	bne.n	8008188 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f06f 0220 	mvn.w	r2, #32
 8008180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fd42 	bl	8008c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d101      	bne.n	80081aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80081a6:	2302      	movs	r3, #2
 80081a8:	e0b4      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x184>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2202      	movs	r2, #2
 80081b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b0c      	cmp	r3, #12
 80081be:	f200 809f 	bhi.w	8008300 <HAL_TIM_PWM_ConfigChannel+0x170>
 80081c2:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80081c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c8:	080081fd 	.word	0x080081fd
 80081cc:	08008301 	.word	0x08008301
 80081d0:	08008301 	.word	0x08008301
 80081d4:	08008301 	.word	0x08008301
 80081d8:	0800823d 	.word	0x0800823d
 80081dc:	08008301 	.word	0x08008301
 80081e0:	08008301 	.word	0x08008301
 80081e4:	08008301 	.word	0x08008301
 80081e8:	0800827f 	.word	0x0800827f
 80081ec:	08008301 	.word	0x08008301
 80081f0:	08008301 	.word	0x08008301
 80081f4:	08008301 	.word	0x08008301
 80081f8:	080082bf 	.word	0x080082bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fa16 	bl	8008634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699a      	ldr	r2, [r3, #24]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0208 	orr.w	r2, r2, #8
 8008216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699a      	ldr	r2, [r3, #24]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0204 	bic.w	r2, r2, #4
 8008226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6999      	ldr	r1, [r3, #24]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	691a      	ldr	r2, [r3, #16]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	619a      	str	r2, [r3, #24]
      break;
 800823a:	e062      	b.n	8008302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68b9      	ldr	r1, [r7, #8]
 8008242:	4618      	mov	r0, r3
 8008244:	f000 fa66 	bl	8008714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699a      	ldr	r2, [r3, #24]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6999      	ldr	r1, [r3, #24]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	021a      	lsls	r2, r3, #8
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	619a      	str	r2, [r3, #24]
      break;
 800827c:	e041      	b.n	8008302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68b9      	ldr	r1, [r7, #8]
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fabb 	bl	8008800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69da      	ldr	r2, [r3, #28]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f042 0208 	orr.w	r2, r2, #8
 8008298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69da      	ldr	r2, [r3, #28]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0204 	bic.w	r2, r2, #4
 80082a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69d9      	ldr	r1, [r3, #28]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	691a      	ldr	r2, [r3, #16]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	61da      	str	r2, [r3, #28]
      break;
 80082bc:	e021      	b.n	8008302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68b9      	ldr	r1, [r7, #8]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fb0f 	bl	80088e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69da      	ldr	r2, [r3, #28]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69da      	ldr	r2, [r3, #28]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69d9      	ldr	r1, [r3, #28]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	021a      	lsls	r2, r3, #8
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	61da      	str	r2, [r3, #28]
      break;
 80082fe:	e000      	b.n	8008302 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008300:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <HAL_TIM_ConfigClockSource+0x18>
 8008330:	2302      	movs	r3, #2
 8008332:	e0b3      	b.n	800849c <HAL_TIM_ConfigClockSource+0x180>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008352:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800835a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800836c:	d03e      	beq.n	80083ec <HAL_TIM_ConfigClockSource+0xd0>
 800836e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008372:	f200 8087 	bhi.w	8008484 <HAL_TIM_ConfigClockSource+0x168>
 8008376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800837a:	f000 8085 	beq.w	8008488 <HAL_TIM_ConfigClockSource+0x16c>
 800837e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008382:	d87f      	bhi.n	8008484 <HAL_TIM_ConfigClockSource+0x168>
 8008384:	2b70      	cmp	r3, #112	; 0x70
 8008386:	d01a      	beq.n	80083be <HAL_TIM_ConfigClockSource+0xa2>
 8008388:	2b70      	cmp	r3, #112	; 0x70
 800838a:	d87b      	bhi.n	8008484 <HAL_TIM_ConfigClockSource+0x168>
 800838c:	2b60      	cmp	r3, #96	; 0x60
 800838e:	d050      	beq.n	8008432 <HAL_TIM_ConfigClockSource+0x116>
 8008390:	2b60      	cmp	r3, #96	; 0x60
 8008392:	d877      	bhi.n	8008484 <HAL_TIM_ConfigClockSource+0x168>
 8008394:	2b50      	cmp	r3, #80	; 0x50
 8008396:	d03c      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0xf6>
 8008398:	2b50      	cmp	r3, #80	; 0x50
 800839a:	d873      	bhi.n	8008484 <HAL_TIM_ConfigClockSource+0x168>
 800839c:	2b40      	cmp	r3, #64	; 0x40
 800839e:	d058      	beq.n	8008452 <HAL_TIM_ConfigClockSource+0x136>
 80083a0:	2b40      	cmp	r3, #64	; 0x40
 80083a2:	d86f      	bhi.n	8008484 <HAL_TIM_ConfigClockSource+0x168>
 80083a4:	2b30      	cmp	r3, #48	; 0x30
 80083a6:	d064      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0x156>
 80083a8:	2b30      	cmp	r3, #48	; 0x30
 80083aa:	d86b      	bhi.n	8008484 <HAL_TIM_ConfigClockSource+0x168>
 80083ac:	2b20      	cmp	r3, #32
 80083ae:	d060      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0x156>
 80083b0:	2b20      	cmp	r3, #32
 80083b2:	d867      	bhi.n	8008484 <HAL_TIM_ConfigClockSource+0x168>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d05c      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0x156>
 80083b8:	2b10      	cmp	r3, #16
 80083ba:	d05a      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80083bc:	e062      	b.n	8008484 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	6899      	ldr	r1, [r3, #8]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	f000 fb5b 	bl	8008a88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	609a      	str	r2, [r3, #8]
      break;
 80083ea:	e04e      	b.n	800848a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6818      	ldr	r0, [r3, #0]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	6899      	ldr	r1, [r3, #8]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	f000 fb44 	bl	8008a88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689a      	ldr	r2, [r3, #8]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800840e:	609a      	str	r2, [r3, #8]
      break;
 8008410:	e03b      	b.n	800848a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6818      	ldr	r0, [r3, #0]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	6859      	ldr	r1, [r3, #4]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	461a      	mov	r2, r3
 8008420:	f000 fab8 	bl	8008994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2150      	movs	r1, #80	; 0x50
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fb11 	bl	8008a52 <TIM_ITRx_SetConfig>
      break;
 8008430:	e02b      	b.n	800848a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	6859      	ldr	r1, [r3, #4]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	461a      	mov	r2, r3
 8008440:	f000 fad7 	bl	80089f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2160      	movs	r1, #96	; 0x60
 800844a:	4618      	mov	r0, r3
 800844c:	f000 fb01 	bl	8008a52 <TIM_ITRx_SetConfig>
      break;
 8008450:	e01b      	b.n	800848a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	6859      	ldr	r1, [r3, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	461a      	mov	r2, r3
 8008460:	f000 fa98 	bl	8008994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2140      	movs	r1, #64	; 0x40
 800846a:	4618      	mov	r0, r3
 800846c:	f000 faf1 	bl	8008a52 <TIM_ITRx_SetConfig>
      break;
 8008470:	e00b      	b.n	800848a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4619      	mov	r1, r3
 800847c:	4610      	mov	r0, r2
 800847e:	f000 fae8 	bl	8008a52 <TIM_ITRx_SetConfig>
      break;
 8008482:	e002      	b.n	800848a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008484:	bf00      	nop
 8008486:	e000      	b.n	800848a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008488:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a40      	ldr	r2, [pc, #256]	; (8008608 <TIM_Base_SetConfig+0x114>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d013      	beq.n	8008534 <TIM_Base_SetConfig+0x40>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008512:	d00f      	beq.n	8008534 <TIM_Base_SetConfig+0x40>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a3d      	ldr	r2, [pc, #244]	; (800860c <TIM_Base_SetConfig+0x118>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00b      	beq.n	8008534 <TIM_Base_SetConfig+0x40>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a3c      	ldr	r2, [pc, #240]	; (8008610 <TIM_Base_SetConfig+0x11c>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d007      	beq.n	8008534 <TIM_Base_SetConfig+0x40>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a3b      	ldr	r2, [pc, #236]	; (8008614 <TIM_Base_SetConfig+0x120>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d003      	beq.n	8008534 <TIM_Base_SetConfig+0x40>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a3a      	ldr	r2, [pc, #232]	; (8008618 <TIM_Base_SetConfig+0x124>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d108      	bne.n	8008546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a2f      	ldr	r2, [pc, #188]	; (8008608 <TIM_Base_SetConfig+0x114>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d02b      	beq.n	80085a6 <TIM_Base_SetConfig+0xb2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008554:	d027      	beq.n	80085a6 <TIM_Base_SetConfig+0xb2>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a2c      	ldr	r2, [pc, #176]	; (800860c <TIM_Base_SetConfig+0x118>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d023      	beq.n	80085a6 <TIM_Base_SetConfig+0xb2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a2b      	ldr	r2, [pc, #172]	; (8008610 <TIM_Base_SetConfig+0x11c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d01f      	beq.n	80085a6 <TIM_Base_SetConfig+0xb2>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a2a      	ldr	r2, [pc, #168]	; (8008614 <TIM_Base_SetConfig+0x120>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d01b      	beq.n	80085a6 <TIM_Base_SetConfig+0xb2>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a29      	ldr	r2, [pc, #164]	; (8008618 <TIM_Base_SetConfig+0x124>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d017      	beq.n	80085a6 <TIM_Base_SetConfig+0xb2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a28      	ldr	r2, [pc, #160]	; (800861c <TIM_Base_SetConfig+0x128>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d013      	beq.n	80085a6 <TIM_Base_SetConfig+0xb2>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a27      	ldr	r2, [pc, #156]	; (8008620 <TIM_Base_SetConfig+0x12c>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d00f      	beq.n	80085a6 <TIM_Base_SetConfig+0xb2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a26      	ldr	r2, [pc, #152]	; (8008624 <TIM_Base_SetConfig+0x130>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00b      	beq.n	80085a6 <TIM_Base_SetConfig+0xb2>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a25      	ldr	r2, [pc, #148]	; (8008628 <TIM_Base_SetConfig+0x134>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d007      	beq.n	80085a6 <TIM_Base_SetConfig+0xb2>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a24      	ldr	r2, [pc, #144]	; (800862c <TIM_Base_SetConfig+0x138>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d003      	beq.n	80085a6 <TIM_Base_SetConfig+0xb2>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a23      	ldr	r2, [pc, #140]	; (8008630 <TIM_Base_SetConfig+0x13c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d108      	bne.n	80085b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	689a      	ldr	r2, [r3, #8]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a0a      	ldr	r2, [pc, #40]	; (8008608 <TIM_Base_SetConfig+0x114>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d003      	beq.n	80085ec <TIM_Base_SetConfig+0xf8>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a0c      	ldr	r2, [pc, #48]	; (8008618 <TIM_Base_SetConfig+0x124>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d103      	bne.n	80085f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	691a      	ldr	r2, [r3, #16]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	615a      	str	r2, [r3, #20]
}
 80085fa:	bf00      	nop
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	40010000 	.word	0x40010000
 800860c:	40000400 	.word	0x40000400
 8008610:	40000800 	.word	0x40000800
 8008614:	40000c00 	.word	0x40000c00
 8008618:	40010400 	.word	0x40010400
 800861c:	40014000 	.word	0x40014000
 8008620:	40014400 	.word	0x40014400
 8008624:	40014800 	.word	0x40014800
 8008628:	40001800 	.word	0x40001800
 800862c:	40001c00 	.word	0x40001c00
 8008630:	40002000 	.word	0x40002000

08008634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	f023 0201 	bic.w	r2, r3, #1
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 0303 	bic.w	r3, r3, #3
 800866a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f023 0302 	bic.w	r3, r3, #2
 800867c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	4313      	orrs	r3, r2
 8008686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a20      	ldr	r2, [pc, #128]	; (800870c <TIM_OC1_SetConfig+0xd8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d003      	beq.n	8008698 <TIM_OC1_SetConfig+0x64>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a1f      	ldr	r2, [pc, #124]	; (8008710 <TIM_OC1_SetConfig+0xdc>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d10c      	bne.n	80086b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f023 0308 	bic.w	r3, r3, #8
 800869e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f023 0304 	bic.w	r3, r3, #4
 80086b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a15      	ldr	r2, [pc, #84]	; (800870c <TIM_OC1_SetConfig+0xd8>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d003      	beq.n	80086c2 <TIM_OC1_SetConfig+0x8e>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a14      	ldr	r2, [pc, #80]	; (8008710 <TIM_OC1_SetConfig+0xdc>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d111      	bne.n	80086e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	4313      	orrs	r3, r2
 80086da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	621a      	str	r2, [r3, #32]
}
 8008700:	bf00      	nop
 8008702:	371c      	adds	r7, #28
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	40010000 	.word	0x40010000
 8008710:	40010400 	.word	0x40010400

08008714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	f023 0210 	bic.w	r2, r3, #16
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800874a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	021b      	lsls	r3, r3, #8
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4313      	orrs	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f023 0320 	bic.w	r3, r3, #32
 800875e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	011b      	lsls	r3, r3, #4
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	4313      	orrs	r3, r2
 800876a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a22      	ldr	r2, [pc, #136]	; (80087f8 <TIM_OC2_SetConfig+0xe4>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d003      	beq.n	800877c <TIM_OC2_SetConfig+0x68>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a21      	ldr	r2, [pc, #132]	; (80087fc <TIM_OC2_SetConfig+0xe8>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d10d      	bne.n	8008798 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	4313      	orrs	r3, r2
 800878e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008796:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a17      	ldr	r2, [pc, #92]	; (80087f8 <TIM_OC2_SetConfig+0xe4>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d003      	beq.n	80087a8 <TIM_OC2_SetConfig+0x94>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a16      	ldr	r2, [pc, #88]	; (80087fc <TIM_OC2_SetConfig+0xe8>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d113      	bne.n	80087d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	621a      	str	r2, [r3, #32]
}
 80087ea:	bf00      	nop
 80087ec:	371c      	adds	r7, #28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	40010000 	.word	0x40010000
 80087fc:	40010400 	.word	0x40010400

08008800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	4313      	orrs	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	021b      	lsls	r3, r3, #8
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	4313      	orrs	r3, r2
 8008854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a21      	ldr	r2, [pc, #132]	; (80088e0 <TIM_OC3_SetConfig+0xe0>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d003      	beq.n	8008866 <TIM_OC3_SetConfig+0x66>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a20      	ldr	r2, [pc, #128]	; (80088e4 <TIM_OC3_SetConfig+0xe4>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d10d      	bne.n	8008882 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800886c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	021b      	lsls	r3, r3, #8
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	4313      	orrs	r3, r2
 8008878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a16      	ldr	r2, [pc, #88]	; (80088e0 <TIM_OC3_SetConfig+0xe0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d003      	beq.n	8008892 <TIM_OC3_SetConfig+0x92>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a15      	ldr	r2, [pc, #84]	; (80088e4 <TIM_OC3_SetConfig+0xe4>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d113      	bne.n	80088ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	011b      	lsls	r3, r3, #4
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	011b      	lsls	r3, r3, #4
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	621a      	str	r2, [r3, #32]
}
 80088d4:	bf00      	nop
 80088d6:	371c      	adds	r7, #28
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	40010000 	.word	0x40010000
 80088e4:	40010400 	.word	0x40010400

080088e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800891e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	021b      	lsls	r3, r3, #8
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	4313      	orrs	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	031b      	lsls	r3, r3, #12
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	4313      	orrs	r3, r2
 800893e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a12      	ldr	r2, [pc, #72]	; (800898c <TIM_OC4_SetConfig+0xa4>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d003      	beq.n	8008950 <TIM_OC4_SetConfig+0x68>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a11      	ldr	r2, [pc, #68]	; (8008990 <TIM_OC4_SetConfig+0xa8>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d109      	bne.n	8008964 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008956:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	019b      	lsls	r3, r3, #6
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	4313      	orrs	r3, r2
 8008962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	621a      	str	r2, [r3, #32]
}
 800897e:	bf00      	nop
 8008980:	371c      	adds	r7, #28
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	40010000 	.word	0x40010000
 8008990:	40010400 	.word	0x40010400

08008994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008994:	b480      	push	{r7}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a1b      	ldr	r3, [r3, #32]
 80089a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	f023 0201 	bic.w	r2, r3, #1
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	011b      	lsls	r3, r3, #4
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f023 030a 	bic.w	r3, r3, #10
 80089d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	621a      	str	r2, [r3, #32]
}
 80089e6:	bf00      	nop
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b087      	sub	sp, #28
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	60f8      	str	r0, [r7, #12]
 80089fa:	60b9      	str	r1, [r7, #8]
 80089fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	f023 0210 	bic.w	r2, r3, #16
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	031b      	lsls	r3, r3, #12
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	011b      	lsls	r3, r3, #4
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	621a      	str	r2, [r3, #32]
}
 8008a46:	bf00      	nop
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b085      	sub	sp, #20
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	f043 0307 	orr.w	r3, r3, #7
 8008a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	609a      	str	r2, [r3, #8]
}
 8008a7c:	bf00      	nop
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
 8008a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	021a      	lsls	r2, r3, #8
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	609a      	str	r2, [r3, #8]
}
 8008abc:	bf00      	nop
 8008abe:	371c      	adds	r7, #28
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	f003 031f 	and.w	r3, r3, #31
 8008ada:	2201      	movs	r2, #1
 8008adc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6a1a      	ldr	r2, [r3, #32]
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	43db      	mvns	r3, r3
 8008aea:	401a      	ands	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a1a      	ldr	r2, [r3, #32]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f003 031f 	and.w	r3, r3, #31
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	fa01 f303 	lsl.w	r3, r1, r3
 8008b00:	431a      	orrs	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	621a      	str	r2, [r3, #32]
}
 8008b06:	bf00      	nop
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
	...

08008b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d101      	bne.n	8008b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b28:	2302      	movs	r3, #2
 8008b2a:	e05a      	b.n	8008be2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2202      	movs	r2, #2
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a21      	ldr	r2, [pc, #132]	; (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d022      	beq.n	8008bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b78:	d01d      	beq.n	8008bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a1d      	ldr	r2, [pc, #116]	; (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d018      	beq.n	8008bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a1b      	ldr	r2, [pc, #108]	; (8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d013      	beq.n	8008bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a1a      	ldr	r2, [pc, #104]	; (8008bfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d00e      	beq.n	8008bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a18      	ldr	r2, [pc, #96]	; (8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d009      	beq.n	8008bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a17      	ldr	r2, [pc, #92]	; (8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d004      	beq.n	8008bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a15      	ldr	r2, [pc, #84]	; (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d10c      	bne.n	8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	40010000 	.word	0x40010000
 8008bf4:	40000400 	.word	0x40000400
 8008bf8:	40000800 	.word	0x40000800
 8008bfc:	40000c00 	.word	0x40000c00
 8008c00:	40010400 	.word	0x40010400
 8008c04:	40014000 	.word	0x40014000
 8008c08:	40001800 	.word	0x40001800

08008c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e03f      	b.n	8008cc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7fb f8c2 	bl	8003de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2224      	movs	r2, #36	; 0x24
 8008c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fb4b 	bl	8009314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	691a      	ldr	r2, [r3, #16]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	695a      	ldr	r2, [r3, #20]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b088      	sub	sp, #32
 8008cd2:	af02      	add	r7, sp, #8
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	60b9      	str	r1, [r7, #8]
 8008cd8:	603b      	str	r3, [r7, #0]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b20      	cmp	r3, #32
 8008cec:	f040 8083 	bne.w	8008df6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <HAL_UART_Transmit+0x2e>
 8008cf6:	88fb      	ldrh	r3, [r7, #6]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e07b      	b.n	8008df8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d101      	bne.n	8008d0e <HAL_UART_Transmit+0x40>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	e074      	b.n	8008df8 <HAL_UART_Transmit+0x12a>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2221      	movs	r2, #33	; 0x21
 8008d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008d24:	f7fb fad0 	bl	80042c8 <HAL_GetTick>
 8008d28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	88fa      	ldrh	r2, [r7, #6]
 8008d2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	88fa      	ldrh	r2, [r7, #6]
 8008d34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008d3e:	e042      	b.n	8008dc6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	3b01      	subs	r3, #1
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d56:	d122      	bne.n	8008d9e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2180      	movs	r1, #128	; 0x80
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 f96a 	bl	800903c <UART_WaitOnFlagUntilTimeout>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e042      	b.n	8008df8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d84:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d103      	bne.n	8008d96 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	3302      	adds	r3, #2
 8008d92:	60bb      	str	r3, [r7, #8]
 8008d94:	e017      	b.n	8008dc6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	60bb      	str	r3, [r7, #8]
 8008d9c:	e013      	b.n	8008dc6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2200      	movs	r2, #0
 8008da6:	2180      	movs	r1, #128	; 0x80
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 f947 	bl	800903c <UART_WaitOnFlagUntilTimeout>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d001      	beq.n	8008db8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e01f      	b.n	8008df8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	60ba      	str	r2, [r7, #8]
 8008dbe:	781a      	ldrb	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1b7      	bne.n	8008d40 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2140      	movs	r1, #64	; 0x40
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 f92e 	bl	800903c <UART_WaitOnFlagUntilTimeout>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e006      	b.n	8008df8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2220      	movs	r2, #32
 8008dee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	e000      	b.n	8008df8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008df6:	2302      	movs	r3, #2
  }
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b088      	sub	sp, #32
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	f003 030f 	and.w	r3, r3, #15
 8008e2e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10d      	bne.n	8008e52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f003 0320 	and.w	r3, r3, #32
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d008      	beq.n	8008e52 <HAL_UART_IRQHandler+0x52>
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f9e0 	bl	8009210 <UART_Receive_IT>
      return;
 8008e50:	e0d0      	b.n	8008ff4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 80b0 	beq.w	8008fba <HAL_UART_IRQHandler+0x1ba>
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d105      	bne.n	8008e70 <HAL_UART_IRQHandler+0x70>
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 80a5 	beq.w	8008fba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00a      	beq.n	8008e90 <HAL_UART_IRQHandler+0x90>
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d005      	beq.n	8008e90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e88:	f043 0201 	orr.w	r2, r3, #1
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	f003 0304 	and.w	r3, r3, #4
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <HAL_UART_IRQHandler+0xb0>
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d005      	beq.n	8008eb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea8:	f043 0202 	orr.w	r2, r3, #2
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	f003 0302 	and.w	r3, r3, #2
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00a      	beq.n	8008ed0 <HAL_UART_IRQHandler+0xd0>
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d005      	beq.n	8008ed0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec8:	f043 0204 	orr.w	r2, r3, #4
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	f003 0308 	and.w	r3, r3, #8
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00f      	beq.n	8008efa <HAL_UART_IRQHandler+0xfa>
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	f003 0320 	and.w	r3, r3, #32
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d104      	bne.n	8008eee <HAL_UART_IRQHandler+0xee>
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d005      	beq.n	8008efa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef2:	f043 0208 	orr.w	r2, r3, #8
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d077      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	f003 0320 	and.w	r3, r3, #32
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d007      	beq.n	8008f1c <HAL_UART_IRQHandler+0x11c>
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	f003 0320 	and.w	r3, r3, #32
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d002      	beq.n	8008f1c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f97a 	bl	8009210 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f26:	2b40      	cmp	r3, #64	; 0x40
 8008f28:	bf0c      	ite	eq
 8008f2a:	2301      	moveq	r3, #1
 8008f2c:	2300      	movne	r3, #0
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f36:	f003 0308 	and.w	r3, r3, #8
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d102      	bne.n	8008f44 <HAL_UART_IRQHandler+0x144>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d031      	beq.n	8008fa8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f8c3 	bl	80090d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f54:	2b40      	cmp	r3, #64	; 0x40
 8008f56:	d123      	bne.n	8008fa0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	695a      	ldr	r2, [r3, #20]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f66:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d013      	beq.n	8008f98 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f74:	4a21      	ldr	r2, [pc, #132]	; (8008ffc <HAL_UART_IRQHandler+0x1fc>)
 8008f76:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fb fee0 	bl	8004d42 <HAL_DMA_Abort_IT>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d016      	beq.n	8008fb6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008f92:	4610      	mov	r0, r2
 8008f94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f96:	e00e      	b.n	8008fb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f845 	bl	8009028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f9e:	e00a      	b.n	8008fb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f841 	bl	8009028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa6:	e006      	b.n	8008fb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f83d 	bl	8009028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008fb4:	e01d      	b.n	8008ff2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb6:	bf00      	nop
    return;
 8008fb8:	e01b      	b.n	8008ff2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d008      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x1d6>
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f8b0 	bl	8009134 <UART_Transmit_IT>
    return;
 8008fd4:	e00e      	b.n	8008ff4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d009      	beq.n	8008ff4 <HAL_UART_IRQHandler+0x1f4>
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d004      	beq.n	8008ff4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f8f8 	bl	80091e0 <UART_EndTransmit_IT>
    return;
 8008ff0:	e000      	b.n	8008ff4 <HAL_UART_IRQHandler+0x1f4>
    return;
 8008ff2:	bf00      	nop
  }
}
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	0800910d 	.word	0x0800910d

08009000 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	603b      	str	r3, [r7, #0]
 8009048:	4613      	mov	r3, r2
 800904a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800904c:	e02c      	b.n	80090a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009054:	d028      	beq.n	80090a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d007      	beq.n	800906c <UART_WaitOnFlagUntilTimeout+0x30>
 800905c:	f7fb f934 	bl	80042c8 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	429a      	cmp	r2, r3
 800906a:	d21d      	bcs.n	80090a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68da      	ldr	r2, [r3, #12]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800907a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	695a      	ldr	r2, [r3, #20]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 0201 	bic.w	r2, r2, #1
 800908a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2220      	movs	r2, #32
 8009090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2220      	movs	r2, #32
 8009098:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e00f      	b.n	80090c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	4013      	ands	r3, r2
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	bf0c      	ite	eq
 80090b8:	2301      	moveq	r3, #1
 80090ba:	2300      	movne	r3, #0
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	461a      	mov	r2, r3
 80090c0:	79fb      	ldrb	r3, [r7, #7]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d0c3      	beq.n	800904e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80090e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	695a      	ldr	r2, [r3, #20]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0201 	bic.w	r2, r2, #1
 80090f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009118:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f7ff ff7e 	bl	8009028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800912c:	bf00      	nop
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b21      	cmp	r3, #33	; 0x21
 8009146:	d144      	bne.n	80091d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009150:	d11a      	bne.n	8009188 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	461a      	mov	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009166:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d105      	bne.n	800917c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	1c9a      	adds	r2, r3, #2
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	621a      	str	r2, [r3, #32]
 800917a:	e00e      	b.n	800919a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	1c5a      	adds	r2, r3, #1
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	621a      	str	r2, [r3, #32]
 8009186:	e008      	b.n	800919a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	1c59      	adds	r1, r3, #1
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6211      	str	r1, [r2, #32]
 8009192:	781a      	ldrb	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800919e:	b29b      	uxth	r3, r3
 80091a0:	3b01      	subs	r3, #1
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	4619      	mov	r1, r3
 80091a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10f      	bne.n	80091ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68da      	ldr	r2, [r3, #12]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	e000      	b.n	80091d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80091d2:	2302      	movs	r3, #2
  }
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3714      	adds	r7, #20
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68da      	ldr	r2, [r3, #12]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2220      	movs	r2, #32
 80091fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7ff fefd 	bl	8009000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b22      	cmp	r3, #34	; 0x22
 8009222:	d171      	bne.n	8009308 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800922c:	d123      	bne.n	8009276 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009232:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10e      	bne.n	800925a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	b29b      	uxth	r3, r3
 8009244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009248:	b29a      	uxth	r2, r3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	1c9a      	adds	r2, r3, #2
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	629a      	str	r2, [r3, #40]	; 0x28
 8009258:	e029      	b.n	80092ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	b29b      	uxth	r3, r3
 8009262:	b2db      	uxtb	r3, r3
 8009264:	b29a      	uxth	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	629a      	str	r2, [r3, #40]	; 0x28
 8009274:	e01b      	b.n	80092ae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10a      	bne.n	8009294 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6858      	ldr	r0, [r3, #4]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009288:	1c59      	adds	r1, r3, #1
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6291      	str	r1, [r2, #40]	; 0x28
 800928e:	b2c2      	uxtb	r2, r0
 8009290:	701a      	strb	r2, [r3, #0]
 8009292:	e00c      	b.n	80092ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	b2da      	uxtb	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a0:	1c58      	adds	r0, r3, #1
 80092a2:	6879      	ldr	r1, [r7, #4]
 80092a4:	6288      	str	r0, [r1, #40]	; 0x28
 80092a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80092aa:	b2d2      	uxtb	r2, r2
 80092ac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	3b01      	subs	r3, #1
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	4619      	mov	r1, r3
 80092bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d120      	bne.n	8009304 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68da      	ldr	r2, [r3, #12]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0220 	bic.w	r2, r2, #32
 80092d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	695a      	ldr	r2, [r3, #20]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 0201 	bic.w	r2, r2, #1
 80092f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2220      	movs	r2, #32
 80092f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7ff fe8a 	bl	8009014 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	e002      	b.n	800930a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	e000      	b.n	800930a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009308:	2302      	movs	r3, #2
  }
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009318:	b0bd      	sub	sp, #244	; 0xf4
 800931a:	af00      	add	r7, sp, #0
 800931c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800932c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009330:	68d9      	ldr	r1, [r3, #12]
 8009332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	ea40 0301 	orr.w	r3, r0, r1
 800933c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800933e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009342:	689a      	ldr	r2, [r3, #8]
 8009344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	431a      	orrs	r2, r3
 800934c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	431a      	orrs	r2, r3
 8009354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	4313      	orrs	r3, r2
 800935c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8009360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800936c:	f021 010c 	bic.w	r1, r1, #12
 8009370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800937a:	430b      	orrs	r3, r1
 800937c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800937e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800938a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800938e:	6999      	ldr	r1, [r3, #24]
 8009390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	ea40 0301 	orr.w	r3, r0, r1
 800939a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800939c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093a6:	f040 81a5 	bne.w	80096f4 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	4bcd      	ldr	r3, [pc, #820]	; (80096e8 <UART_SetConfig+0x3d4>)
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d006      	beq.n	80093c4 <UART_SetConfig+0xb0>
 80093b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	4bcb      	ldr	r3, [pc, #812]	; (80096ec <UART_SetConfig+0x3d8>)
 80093be:	429a      	cmp	r2, r3
 80093c0:	f040 80cb 	bne.w	800955a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093c4:	f7fd fbc2 	bl	8006b4c <HAL_RCC_GetPCLK2Freq>
 80093c8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093d0:	461c      	mov	r4, r3
 80093d2:	f04f 0500 	mov.w	r5, #0
 80093d6:	4622      	mov	r2, r4
 80093d8:	462b      	mov	r3, r5
 80093da:	1891      	adds	r1, r2, r2
 80093dc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80093e0:	415b      	adcs	r3, r3
 80093e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80093e6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80093ea:	1912      	adds	r2, r2, r4
 80093ec:	eb45 0303 	adc.w	r3, r5, r3
 80093f0:	f04f 0000 	mov.w	r0, #0
 80093f4:	f04f 0100 	mov.w	r1, #0
 80093f8:	00d9      	lsls	r1, r3, #3
 80093fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093fe:	00d0      	lsls	r0, r2, #3
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	1911      	adds	r1, r2, r4
 8009406:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800940a:	416b      	adcs	r3, r5
 800940c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	461a      	mov	r2, r3
 8009418:	f04f 0300 	mov.w	r3, #0
 800941c:	1891      	adds	r1, r2, r2
 800941e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009422:	415b      	adcs	r3, r3
 8009424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009428:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800942c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009430:	f7f7 fc3a 	bl	8000ca8 <__aeabi_uldivmod>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4bad      	ldr	r3, [pc, #692]	; (80096f0 <UART_SetConfig+0x3dc>)
 800943a:	fba3 2302 	umull	r2, r3, r3, r2
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	011e      	lsls	r6, r3, #4
 8009442:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009446:	461c      	mov	r4, r3
 8009448:	f04f 0500 	mov.w	r5, #0
 800944c:	4622      	mov	r2, r4
 800944e:	462b      	mov	r3, r5
 8009450:	1891      	adds	r1, r2, r2
 8009452:	67b9      	str	r1, [r7, #120]	; 0x78
 8009454:	415b      	adcs	r3, r3
 8009456:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009458:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800945c:	1912      	adds	r2, r2, r4
 800945e:	eb45 0303 	adc.w	r3, r5, r3
 8009462:	f04f 0000 	mov.w	r0, #0
 8009466:	f04f 0100 	mov.w	r1, #0
 800946a:	00d9      	lsls	r1, r3, #3
 800946c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009470:	00d0      	lsls	r0, r2, #3
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	1911      	adds	r1, r2, r4
 8009478:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800947c:	416b      	adcs	r3, r5
 800947e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	461a      	mov	r2, r3
 800948a:	f04f 0300 	mov.w	r3, #0
 800948e:	1891      	adds	r1, r2, r2
 8009490:	6739      	str	r1, [r7, #112]	; 0x70
 8009492:	415b      	adcs	r3, r3
 8009494:	677b      	str	r3, [r7, #116]	; 0x74
 8009496:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800949a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800949e:	f7f7 fc03 	bl	8000ca8 <__aeabi_uldivmod>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4b92      	ldr	r3, [pc, #584]	; (80096f0 <UART_SetConfig+0x3dc>)
 80094a8:	fba3 1302 	umull	r1, r3, r3, r2
 80094ac:	095b      	lsrs	r3, r3, #5
 80094ae:	2164      	movs	r1, #100	; 0x64
 80094b0:	fb01 f303 	mul.w	r3, r1, r3
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	00db      	lsls	r3, r3, #3
 80094b8:	3332      	adds	r3, #50	; 0x32
 80094ba:	4a8d      	ldr	r2, [pc, #564]	; (80096f0 <UART_SetConfig+0x3dc>)
 80094bc:	fba2 2303 	umull	r2, r3, r2, r3
 80094c0:	095b      	lsrs	r3, r3, #5
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094c8:	441e      	add	r6, r3
 80094ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094ce:	4618      	mov	r0, r3
 80094d0:	f04f 0100 	mov.w	r1, #0
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	1894      	adds	r4, r2, r2
 80094da:	66bc      	str	r4, [r7, #104]	; 0x68
 80094dc:	415b      	adcs	r3, r3
 80094de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094e0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80094e4:	1812      	adds	r2, r2, r0
 80094e6:	eb41 0303 	adc.w	r3, r1, r3
 80094ea:	f04f 0400 	mov.w	r4, #0
 80094ee:	f04f 0500 	mov.w	r5, #0
 80094f2:	00dd      	lsls	r5, r3, #3
 80094f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094f8:	00d4      	lsls	r4, r2, #3
 80094fa:	4622      	mov	r2, r4
 80094fc:	462b      	mov	r3, r5
 80094fe:	1814      	adds	r4, r2, r0
 8009500:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009504:	414b      	adcs	r3, r1
 8009506:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800950a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	461a      	mov	r2, r3
 8009512:	f04f 0300 	mov.w	r3, #0
 8009516:	1891      	adds	r1, r2, r2
 8009518:	6639      	str	r1, [r7, #96]	; 0x60
 800951a:	415b      	adcs	r3, r3
 800951c:	667b      	str	r3, [r7, #100]	; 0x64
 800951e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009522:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009526:	f7f7 fbbf 	bl	8000ca8 <__aeabi_uldivmod>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	4b70      	ldr	r3, [pc, #448]	; (80096f0 <UART_SetConfig+0x3dc>)
 8009530:	fba3 1302 	umull	r1, r3, r3, r2
 8009534:	095b      	lsrs	r3, r3, #5
 8009536:	2164      	movs	r1, #100	; 0x64
 8009538:	fb01 f303 	mul.w	r3, r1, r3
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	3332      	adds	r3, #50	; 0x32
 8009542:	4a6b      	ldr	r2, [pc, #428]	; (80096f0 <UART_SetConfig+0x3dc>)
 8009544:	fba2 2303 	umull	r2, r3, r2, r3
 8009548:	095b      	lsrs	r3, r3, #5
 800954a:	f003 0207 	and.w	r2, r3, #7
 800954e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4432      	add	r2, r6
 8009556:	609a      	str	r2, [r3, #8]
 8009558:	e26d      	b.n	8009a36 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800955a:	f7fd fae3 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 800955e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009562:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009566:	461c      	mov	r4, r3
 8009568:	f04f 0500 	mov.w	r5, #0
 800956c:	4622      	mov	r2, r4
 800956e:	462b      	mov	r3, r5
 8009570:	1891      	adds	r1, r2, r2
 8009572:	65b9      	str	r1, [r7, #88]	; 0x58
 8009574:	415b      	adcs	r3, r3
 8009576:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009578:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800957c:	1912      	adds	r2, r2, r4
 800957e:	eb45 0303 	adc.w	r3, r5, r3
 8009582:	f04f 0000 	mov.w	r0, #0
 8009586:	f04f 0100 	mov.w	r1, #0
 800958a:	00d9      	lsls	r1, r3, #3
 800958c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009590:	00d0      	lsls	r0, r2, #3
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	1911      	adds	r1, r2, r4
 8009598:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800959c:	416b      	adcs	r3, r5
 800959e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	461a      	mov	r2, r3
 80095aa:	f04f 0300 	mov.w	r3, #0
 80095ae:	1891      	adds	r1, r2, r2
 80095b0:	6539      	str	r1, [r7, #80]	; 0x50
 80095b2:	415b      	adcs	r3, r3
 80095b4:	657b      	str	r3, [r7, #84]	; 0x54
 80095b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80095ba:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80095be:	f7f7 fb73 	bl	8000ca8 <__aeabi_uldivmod>
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	4b4a      	ldr	r3, [pc, #296]	; (80096f0 <UART_SetConfig+0x3dc>)
 80095c8:	fba3 2302 	umull	r2, r3, r3, r2
 80095cc:	095b      	lsrs	r3, r3, #5
 80095ce:	011e      	lsls	r6, r3, #4
 80095d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095d4:	461c      	mov	r4, r3
 80095d6:	f04f 0500 	mov.w	r5, #0
 80095da:	4622      	mov	r2, r4
 80095dc:	462b      	mov	r3, r5
 80095de:	1891      	adds	r1, r2, r2
 80095e0:	64b9      	str	r1, [r7, #72]	; 0x48
 80095e2:	415b      	adcs	r3, r3
 80095e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80095ea:	1912      	adds	r2, r2, r4
 80095ec:	eb45 0303 	adc.w	r3, r5, r3
 80095f0:	f04f 0000 	mov.w	r0, #0
 80095f4:	f04f 0100 	mov.w	r1, #0
 80095f8:	00d9      	lsls	r1, r3, #3
 80095fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80095fe:	00d0      	lsls	r0, r2, #3
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	1911      	adds	r1, r2, r4
 8009606:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800960a:	416b      	adcs	r3, r5
 800960c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	461a      	mov	r2, r3
 8009618:	f04f 0300 	mov.w	r3, #0
 800961c:	1891      	adds	r1, r2, r2
 800961e:	6439      	str	r1, [r7, #64]	; 0x40
 8009620:	415b      	adcs	r3, r3
 8009622:	647b      	str	r3, [r7, #68]	; 0x44
 8009624:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009628:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800962c:	f7f7 fb3c 	bl	8000ca8 <__aeabi_uldivmod>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	4b2e      	ldr	r3, [pc, #184]	; (80096f0 <UART_SetConfig+0x3dc>)
 8009636:	fba3 1302 	umull	r1, r3, r3, r2
 800963a:	095b      	lsrs	r3, r3, #5
 800963c:	2164      	movs	r1, #100	; 0x64
 800963e:	fb01 f303 	mul.w	r3, r1, r3
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	00db      	lsls	r3, r3, #3
 8009646:	3332      	adds	r3, #50	; 0x32
 8009648:	4a29      	ldr	r2, [pc, #164]	; (80096f0 <UART_SetConfig+0x3dc>)
 800964a:	fba2 2303 	umull	r2, r3, r2, r3
 800964e:	095b      	lsrs	r3, r3, #5
 8009650:	005b      	lsls	r3, r3, #1
 8009652:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009656:	441e      	add	r6, r3
 8009658:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800965c:	4618      	mov	r0, r3
 800965e:	f04f 0100 	mov.w	r1, #0
 8009662:	4602      	mov	r2, r0
 8009664:	460b      	mov	r3, r1
 8009666:	1894      	adds	r4, r2, r2
 8009668:	63bc      	str	r4, [r7, #56]	; 0x38
 800966a:	415b      	adcs	r3, r3
 800966c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800966e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009672:	1812      	adds	r2, r2, r0
 8009674:	eb41 0303 	adc.w	r3, r1, r3
 8009678:	f04f 0400 	mov.w	r4, #0
 800967c:	f04f 0500 	mov.w	r5, #0
 8009680:	00dd      	lsls	r5, r3, #3
 8009682:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009686:	00d4      	lsls	r4, r2, #3
 8009688:	4622      	mov	r2, r4
 800968a:	462b      	mov	r3, r5
 800968c:	1814      	adds	r4, r2, r0
 800968e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8009692:	414b      	adcs	r3, r1
 8009694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	461a      	mov	r2, r3
 80096a0:	f04f 0300 	mov.w	r3, #0
 80096a4:	1891      	adds	r1, r2, r2
 80096a6:	6339      	str	r1, [r7, #48]	; 0x30
 80096a8:	415b      	adcs	r3, r3
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
 80096ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80096b0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80096b4:	f7f7 faf8 	bl	8000ca8 <__aeabi_uldivmod>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4b0c      	ldr	r3, [pc, #48]	; (80096f0 <UART_SetConfig+0x3dc>)
 80096be:	fba3 1302 	umull	r1, r3, r3, r2
 80096c2:	095b      	lsrs	r3, r3, #5
 80096c4:	2164      	movs	r1, #100	; 0x64
 80096c6:	fb01 f303 	mul.w	r3, r1, r3
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	00db      	lsls	r3, r3, #3
 80096ce:	3332      	adds	r3, #50	; 0x32
 80096d0:	4a07      	ldr	r2, [pc, #28]	; (80096f0 <UART_SetConfig+0x3dc>)
 80096d2:	fba2 2303 	umull	r2, r3, r2, r3
 80096d6:	095b      	lsrs	r3, r3, #5
 80096d8:	f003 0207 	and.w	r2, r3, #7
 80096dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4432      	add	r2, r6
 80096e4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80096e6:	e1a6      	b.n	8009a36 <UART_SetConfig+0x722>
 80096e8:	40011000 	.word	0x40011000
 80096ec:	40011400 	.word	0x40011400
 80096f0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	4bd1      	ldr	r3, [pc, #836]	; (8009a40 <UART_SetConfig+0x72c>)
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d006      	beq.n	800970e <UART_SetConfig+0x3fa>
 8009700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	4bcf      	ldr	r3, [pc, #828]	; (8009a44 <UART_SetConfig+0x730>)
 8009708:	429a      	cmp	r2, r3
 800970a:	f040 80ca 	bne.w	80098a2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800970e:	f7fd fa1d 	bl	8006b4c <HAL_RCC_GetPCLK2Freq>
 8009712:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009716:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800971a:	461c      	mov	r4, r3
 800971c:	f04f 0500 	mov.w	r5, #0
 8009720:	4622      	mov	r2, r4
 8009722:	462b      	mov	r3, r5
 8009724:	1891      	adds	r1, r2, r2
 8009726:	62b9      	str	r1, [r7, #40]	; 0x28
 8009728:	415b      	adcs	r3, r3
 800972a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800972c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009730:	1912      	adds	r2, r2, r4
 8009732:	eb45 0303 	adc.w	r3, r5, r3
 8009736:	f04f 0000 	mov.w	r0, #0
 800973a:	f04f 0100 	mov.w	r1, #0
 800973e:	00d9      	lsls	r1, r3, #3
 8009740:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009744:	00d0      	lsls	r0, r2, #3
 8009746:	4602      	mov	r2, r0
 8009748:	460b      	mov	r3, r1
 800974a:	eb12 0a04 	adds.w	sl, r2, r4
 800974e:	eb43 0b05 	adc.w	fp, r3, r5
 8009752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	4618      	mov	r0, r3
 800975a:	f04f 0100 	mov.w	r1, #0
 800975e:	f04f 0200 	mov.w	r2, #0
 8009762:	f04f 0300 	mov.w	r3, #0
 8009766:	008b      	lsls	r3, r1, #2
 8009768:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800976c:	0082      	lsls	r2, r0, #2
 800976e:	4650      	mov	r0, sl
 8009770:	4659      	mov	r1, fp
 8009772:	f7f7 fa99 	bl	8000ca8 <__aeabi_uldivmod>
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
 800977a:	4bb3      	ldr	r3, [pc, #716]	; (8009a48 <UART_SetConfig+0x734>)
 800977c:	fba3 2302 	umull	r2, r3, r3, r2
 8009780:	095b      	lsrs	r3, r3, #5
 8009782:	011e      	lsls	r6, r3, #4
 8009784:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009788:	4618      	mov	r0, r3
 800978a:	f04f 0100 	mov.w	r1, #0
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	1894      	adds	r4, r2, r2
 8009794:	623c      	str	r4, [r7, #32]
 8009796:	415b      	adcs	r3, r3
 8009798:	627b      	str	r3, [r7, #36]	; 0x24
 800979a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800979e:	1812      	adds	r2, r2, r0
 80097a0:	eb41 0303 	adc.w	r3, r1, r3
 80097a4:	f04f 0400 	mov.w	r4, #0
 80097a8:	f04f 0500 	mov.w	r5, #0
 80097ac:	00dd      	lsls	r5, r3, #3
 80097ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80097b2:	00d4      	lsls	r4, r2, #3
 80097b4:	4622      	mov	r2, r4
 80097b6:	462b      	mov	r3, r5
 80097b8:	1814      	adds	r4, r2, r0
 80097ba:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80097be:	414b      	adcs	r3, r1
 80097c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f04f 0100 	mov.w	r1, #0
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	008b      	lsls	r3, r1, #2
 80097da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80097de:	0082      	lsls	r2, r0, #2
 80097e0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80097e4:	f7f7 fa60 	bl	8000ca8 <__aeabi_uldivmod>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	4b96      	ldr	r3, [pc, #600]	; (8009a48 <UART_SetConfig+0x734>)
 80097ee:	fba3 1302 	umull	r1, r3, r3, r2
 80097f2:	095b      	lsrs	r3, r3, #5
 80097f4:	2164      	movs	r1, #100	; 0x64
 80097f6:	fb01 f303 	mul.w	r3, r1, r3
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	011b      	lsls	r3, r3, #4
 80097fe:	3332      	adds	r3, #50	; 0x32
 8009800:	4a91      	ldr	r2, [pc, #580]	; (8009a48 <UART_SetConfig+0x734>)
 8009802:	fba2 2303 	umull	r2, r3, r2, r3
 8009806:	095b      	lsrs	r3, r3, #5
 8009808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800980c:	441e      	add	r6, r3
 800980e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009812:	4618      	mov	r0, r3
 8009814:	f04f 0100 	mov.w	r1, #0
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	1894      	adds	r4, r2, r2
 800981e:	61bc      	str	r4, [r7, #24]
 8009820:	415b      	adcs	r3, r3
 8009822:	61fb      	str	r3, [r7, #28]
 8009824:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009828:	1812      	adds	r2, r2, r0
 800982a:	eb41 0303 	adc.w	r3, r1, r3
 800982e:	f04f 0400 	mov.w	r4, #0
 8009832:	f04f 0500 	mov.w	r5, #0
 8009836:	00dd      	lsls	r5, r3, #3
 8009838:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800983c:	00d4      	lsls	r4, r2, #3
 800983e:	4622      	mov	r2, r4
 8009840:	462b      	mov	r3, r5
 8009842:	1814      	adds	r4, r2, r0
 8009844:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009848:	414b      	adcs	r3, r1
 800984a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800984e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	4618      	mov	r0, r3
 8009856:	f04f 0100 	mov.w	r1, #0
 800985a:	f04f 0200 	mov.w	r2, #0
 800985e:	f04f 0300 	mov.w	r3, #0
 8009862:	008b      	lsls	r3, r1, #2
 8009864:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009868:	0082      	lsls	r2, r0, #2
 800986a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800986e:	f7f7 fa1b 	bl	8000ca8 <__aeabi_uldivmod>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	4b74      	ldr	r3, [pc, #464]	; (8009a48 <UART_SetConfig+0x734>)
 8009878:	fba3 1302 	umull	r1, r3, r3, r2
 800987c:	095b      	lsrs	r3, r3, #5
 800987e:	2164      	movs	r1, #100	; 0x64
 8009880:	fb01 f303 	mul.w	r3, r1, r3
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	011b      	lsls	r3, r3, #4
 8009888:	3332      	adds	r3, #50	; 0x32
 800988a:	4a6f      	ldr	r2, [pc, #444]	; (8009a48 <UART_SetConfig+0x734>)
 800988c:	fba2 2303 	umull	r2, r3, r2, r3
 8009890:	095b      	lsrs	r3, r3, #5
 8009892:	f003 020f 	and.w	r2, r3, #15
 8009896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4432      	add	r2, r6
 800989e:	609a      	str	r2, [r3, #8]
 80098a0:	e0c9      	b.n	8009a36 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80098a2:	f7fd f93f 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 80098a6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80098ae:	461c      	mov	r4, r3
 80098b0:	f04f 0500 	mov.w	r5, #0
 80098b4:	4622      	mov	r2, r4
 80098b6:	462b      	mov	r3, r5
 80098b8:	1891      	adds	r1, r2, r2
 80098ba:	6139      	str	r1, [r7, #16]
 80098bc:	415b      	adcs	r3, r3
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80098c4:	1912      	adds	r2, r2, r4
 80098c6:	eb45 0303 	adc.w	r3, r5, r3
 80098ca:	f04f 0000 	mov.w	r0, #0
 80098ce:	f04f 0100 	mov.w	r1, #0
 80098d2:	00d9      	lsls	r1, r3, #3
 80098d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098d8:	00d0      	lsls	r0, r2, #3
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	eb12 0804 	adds.w	r8, r2, r4
 80098e2:	eb43 0905 	adc.w	r9, r3, r5
 80098e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f04f 0100 	mov.w	r1, #0
 80098f2:	f04f 0200 	mov.w	r2, #0
 80098f6:	f04f 0300 	mov.w	r3, #0
 80098fa:	008b      	lsls	r3, r1, #2
 80098fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009900:	0082      	lsls	r2, r0, #2
 8009902:	4640      	mov	r0, r8
 8009904:	4649      	mov	r1, r9
 8009906:	f7f7 f9cf 	bl	8000ca8 <__aeabi_uldivmod>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4b4e      	ldr	r3, [pc, #312]	; (8009a48 <UART_SetConfig+0x734>)
 8009910:	fba3 2302 	umull	r2, r3, r3, r2
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	011e      	lsls	r6, r3, #4
 8009918:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800991c:	4618      	mov	r0, r3
 800991e:	f04f 0100 	mov.w	r1, #0
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	1894      	adds	r4, r2, r2
 8009928:	60bc      	str	r4, [r7, #8]
 800992a:	415b      	adcs	r3, r3
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009932:	1812      	adds	r2, r2, r0
 8009934:	eb41 0303 	adc.w	r3, r1, r3
 8009938:	f04f 0400 	mov.w	r4, #0
 800993c:	f04f 0500 	mov.w	r5, #0
 8009940:	00dd      	lsls	r5, r3, #3
 8009942:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009946:	00d4      	lsls	r4, r2, #3
 8009948:	4622      	mov	r2, r4
 800994a:	462b      	mov	r3, r5
 800994c:	1814      	adds	r4, r2, r0
 800994e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8009952:	414b      	adcs	r3, r1
 8009954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	4618      	mov	r0, r3
 8009960:	f04f 0100 	mov.w	r1, #0
 8009964:	f04f 0200 	mov.w	r2, #0
 8009968:	f04f 0300 	mov.w	r3, #0
 800996c:	008b      	lsls	r3, r1, #2
 800996e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009972:	0082      	lsls	r2, r0, #2
 8009974:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009978:	f7f7 f996 	bl	8000ca8 <__aeabi_uldivmod>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4b31      	ldr	r3, [pc, #196]	; (8009a48 <UART_SetConfig+0x734>)
 8009982:	fba3 1302 	umull	r1, r3, r3, r2
 8009986:	095b      	lsrs	r3, r3, #5
 8009988:	2164      	movs	r1, #100	; 0x64
 800998a:	fb01 f303 	mul.w	r3, r1, r3
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	011b      	lsls	r3, r3, #4
 8009992:	3332      	adds	r3, #50	; 0x32
 8009994:	4a2c      	ldr	r2, [pc, #176]	; (8009a48 <UART_SetConfig+0x734>)
 8009996:	fba2 2303 	umull	r2, r3, r2, r3
 800999a:	095b      	lsrs	r3, r3, #5
 800999c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099a0:	441e      	add	r6, r3
 80099a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099a6:	4618      	mov	r0, r3
 80099a8:	f04f 0100 	mov.w	r1, #0
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	1894      	adds	r4, r2, r2
 80099b2:	603c      	str	r4, [r7, #0]
 80099b4:	415b      	adcs	r3, r3
 80099b6:	607b      	str	r3, [r7, #4]
 80099b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099bc:	1812      	adds	r2, r2, r0
 80099be:	eb41 0303 	adc.w	r3, r1, r3
 80099c2:	f04f 0400 	mov.w	r4, #0
 80099c6:	f04f 0500 	mov.w	r5, #0
 80099ca:	00dd      	lsls	r5, r3, #3
 80099cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80099d0:	00d4      	lsls	r4, r2, #3
 80099d2:	4622      	mov	r2, r4
 80099d4:	462b      	mov	r3, r5
 80099d6:	1814      	adds	r4, r2, r0
 80099d8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80099dc:	414b      	adcs	r3, r1
 80099de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80099e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f04f 0100 	mov.w	r1, #0
 80099ee:	f04f 0200 	mov.w	r2, #0
 80099f2:	f04f 0300 	mov.w	r3, #0
 80099f6:	008b      	lsls	r3, r1, #2
 80099f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80099fc:	0082      	lsls	r2, r0, #2
 80099fe:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009a02:	f7f7 f951 	bl	8000ca8 <__aeabi_uldivmod>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4b0f      	ldr	r3, [pc, #60]	; (8009a48 <UART_SetConfig+0x734>)
 8009a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8009a10:	095b      	lsrs	r3, r3, #5
 8009a12:	2164      	movs	r1, #100	; 0x64
 8009a14:	fb01 f303 	mul.w	r3, r1, r3
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	011b      	lsls	r3, r3, #4
 8009a1c:	3332      	adds	r3, #50	; 0x32
 8009a1e:	4a0a      	ldr	r2, [pc, #40]	; (8009a48 <UART_SetConfig+0x734>)
 8009a20:	fba2 2303 	umull	r2, r3, r2, r3
 8009a24:	095b      	lsrs	r3, r3, #5
 8009a26:	f003 020f 	and.w	r2, r3, #15
 8009a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4432      	add	r2, r6
 8009a32:	609a      	str	r2, [r3, #8]
}
 8009a34:	e7ff      	b.n	8009a36 <UART_SetConfig+0x722>
 8009a36:	bf00      	nop
 8009a38:	37f4      	adds	r7, #244	; 0xf4
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a40:	40011000 	.word	0x40011000
 8009a44:	40011400 	.word	0x40011400
 8009a48:	51eb851f 	.word	0x51eb851f

08009a4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009a50:	4904      	ldr	r1, [pc, #16]	; (8009a64 <MX_FATFS_Init+0x18>)
 8009a52:	4805      	ldr	r0, [pc, #20]	; (8009a68 <MX_FATFS_Init+0x1c>)
 8009a54:	f003 fa92 	bl	800cf7c <FATFS_LinkDriver>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	4b03      	ldr	r3, [pc, #12]	; (8009a6c <MX_FATFS_Init+0x20>)
 8009a5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009a60:	bf00      	nop
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	20001608 	.word	0x20001608
 8009a68:	20000010 	.word	0x20000010
 8009a6c:	2000160c 	.word	0x2000160c

08009a70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009a70:	b480      	push	{r7}
 8009a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009a74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8009a8a:	79fb      	ldrb	r3, [r7, #7]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 f9dd 	bl	8009e4c <USER_SPI_initialize>
 8009a92:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8009aa6:	79fb      	ldrb	r3, [r7, #7]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f000 fab9 	bl	800a020 <USER_SPI_status>
 8009aae:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60b9      	str	r1, [r7, #8]
 8009ac0:	607a      	str	r2, [r7, #4]
 8009ac2:	603b      	str	r3, [r7, #0]
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8009ac8:	7bf8      	ldrb	r0, [r7, #15]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	f000 fabc 	bl	800a04c <USER_SPI_read>
 8009ad4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	603b      	str	r3, [r7, #0]
 8009aea:	4603      	mov	r3, r0
 8009aec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8009aee:	7bf8      	ldrb	r0, [r7, #15]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	f000 fb0f 	bl	800a118 <USER_SPI_write>
 8009afa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	603a      	str	r2, [r7, #0]
 8009b0e:	71fb      	strb	r3, [r7, #7]
 8009b10:	460b      	mov	r3, r1
 8009b12:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8009b14:	79b9      	ldrb	r1, [r7, #6]
 8009b16:	79fb      	ldrb	r3, [r7, #7]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 fb78 	bl	800a210 <USER_SPI_ioctl>
 8009b20:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009b34:	f7fa fbc8 	bl	80042c8 <HAL_GetTick>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	4a04      	ldr	r2, [pc, #16]	; (8009b4c <SPI_Timer_On+0x20>)
 8009b3c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8009b3e:	4a04      	ldr	r2, [pc, #16]	; (8009b50 <SPI_Timer_On+0x24>)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6013      	str	r3, [r2, #0]
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20001a70 	.word	0x20001a70
 8009b50:	20001a74 	.word	0x20001a74

08009b54 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009b54:	b580      	push	{r7, lr}
 8009b56:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009b58:	f7fa fbb6 	bl	80042c8 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	4b06      	ldr	r3, [pc, #24]	; (8009b78 <SPI_Timer_Status+0x24>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	1ad2      	subs	r2, r2, r3
 8009b64:	4b05      	ldr	r3, [pc, #20]	; (8009b7c <SPI_Timer_Status+0x28>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	bf34      	ite	cc
 8009b6c:	2301      	movcc	r3, #1
 8009b6e:	2300      	movcs	r3, #0
 8009b70:	b2db      	uxtb	r3, r3
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20001a70 	.word	0x20001a70
 8009b7c:	20001a74 	.word	0x20001a74

08009b80 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	4603      	mov	r3, r0
 8009b88:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009b8a:	f107 020f 	add.w	r2, r7, #15
 8009b8e:	1df9      	adds	r1, r7, #7
 8009b90:	2332      	movs	r3, #50	; 0x32
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	2301      	movs	r3, #1
 8009b96:	4804      	ldr	r0, [pc, #16]	; (8009ba8 <xchg_spi+0x28>)
 8009b98:	f7fd fe49 	bl	800782e <HAL_SPI_TransmitReceive>
    return rxDat;
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20000934 	.word	0x20000934

08009bac <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009bac:	b590      	push	{r4, r7, lr}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60fb      	str	r3, [r7, #12]
 8009bba:	e00a      	b.n	8009bd2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	18d4      	adds	r4, r2, r3
 8009bc2:	20ff      	movs	r0, #255	; 0xff
 8009bc4:	f7ff ffdc 	bl	8009b80 <xchg_spi>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d3f0      	bcc.n	8009bbc <rcvr_spi_multi+0x10>
	}
}
 8009bda:	bf00      	nop
 8009bdc:	bf00      	nop
 8009bde:	3714      	adds	r7, #20
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd90      	pop	{r4, r7, pc}

08009be4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8009bee:	2300      	movs	r3, #0
 8009bf0:	60fb      	str	r3, [r7, #12]
 8009bf2:	e009      	b.n	8009c08 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7ff ffbf 	bl	8009b80 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3301      	adds	r3, #1
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d3f1      	bcc.n	8009bf4 <xmit_spi_multi+0x10>
	}
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b086      	sub	sp, #24
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009c22:	f7fa fb51 	bl	80042c8 <HAL_GetTick>
 8009c26:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8009c2c:	20ff      	movs	r0, #255	; 0xff
 8009c2e:	f7ff ffa7 	bl	8009b80 <xchg_spi>
 8009c32:	4603      	mov	r3, r0
 8009c34:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	2bff      	cmp	r3, #255	; 0xff
 8009c3a:	d007      	beq.n	8009c4c <wait_ready+0x32>
 8009c3c:	f7fa fb44 	bl	80042c8 <HAL_GetTick>
 8009c40:	4602      	mov	r2, r0
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d8ef      	bhi.n	8009c2c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
 8009c4e:	2bff      	cmp	r3, #255	; 0xff
 8009c50:	bf0c      	ite	eq
 8009c52:	2301      	moveq	r3, #1
 8009c54:	2300      	movne	r3, #0
 8009c56:	b2db      	uxtb	r3, r3
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3718      	adds	r7, #24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009c64:	2201      	movs	r2, #1
 8009c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009c6a:	4804      	ldr	r0, [pc, #16]	; (8009c7c <despiselect+0x1c>)
 8009c6c:	f7fb fa50 	bl	8005110 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009c70:	20ff      	movs	r0, #255	; 0xff
 8009c72:	f7ff ff85 	bl	8009b80 <xchg_spi>

}
 8009c76:	bf00      	nop
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	40021400 	.word	0x40021400

08009c80 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009c84:	2200      	movs	r2, #0
 8009c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009c8a:	480a      	ldr	r0, [pc, #40]	; (8009cb4 <spiselect+0x34>)
 8009c8c:	f7fb fa40 	bl	8005110 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009c90:	20ff      	movs	r0, #255	; 0xff
 8009c92:	f7ff ff75 	bl	8009b80 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009c96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009c9a:	f7ff ffbe 	bl	8009c1a <wait_ready>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <spiselect+0x28>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e002      	b.n	8009cae <spiselect+0x2e>

	despiselect();
 8009ca8:	f7ff ffda 	bl	8009c60 <despiselect>
	return 0;	/* Timeout */
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	40021400 	.word	0x40021400

08009cb8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8009cc2:	20c8      	movs	r0, #200	; 0xc8
 8009cc4:	f7ff ff32 	bl	8009b2c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009cc8:	20ff      	movs	r0, #255	; 0xff
 8009cca:	f7ff ff59 	bl	8009b80 <xchg_spi>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
 8009cd4:	2bff      	cmp	r3, #255	; 0xff
 8009cd6:	d104      	bne.n	8009ce2 <rcvr_datablock+0x2a>
 8009cd8:	f7ff ff3c 	bl	8009b54 <SPI_Timer_Status>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1f2      	bne.n	8009cc8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
 8009ce4:	2bfe      	cmp	r3, #254	; 0xfe
 8009ce6:	d001      	beq.n	8009cec <rcvr_datablock+0x34>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	e00a      	b.n	8009d02 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7ff ff5c 	bl	8009bac <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009cf4:	20ff      	movs	r0, #255	; 0xff
 8009cf6:	f7ff ff43 	bl	8009b80 <xchg_spi>
 8009cfa:	20ff      	movs	r0, #255	; 0xff
 8009cfc:	f7ff ff40 	bl	8009b80 <xchg_spi>

	return 1;						/* Function succeeded */
 8009d00:	2301      	movs	r3, #1
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	460b      	mov	r3, r1
 8009d14:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8009d16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009d1a:	f7ff ff7e 	bl	8009c1a <wait_ready>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <xmit_datablock+0x1e>
 8009d24:	2300      	movs	r3, #0
 8009d26:	e01e      	b.n	8009d66 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7ff ff28 	bl	8009b80 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009d30:	78fb      	ldrb	r3, [r7, #3]
 8009d32:	2bfd      	cmp	r3, #253	; 0xfd
 8009d34:	d016      	beq.n	8009d64 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8009d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7ff ff52 	bl	8009be4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009d40:	20ff      	movs	r0, #255	; 0xff
 8009d42:	f7ff ff1d 	bl	8009b80 <xchg_spi>
 8009d46:	20ff      	movs	r0, #255	; 0xff
 8009d48:	f7ff ff1a 	bl	8009b80 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009d4c:	20ff      	movs	r0, #255	; 0xff
 8009d4e:	f7ff ff17 	bl	8009b80 <xchg_spi>
 8009d52:	4603      	mov	r3, r0
 8009d54:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	f003 031f 	and.w	r3, r3, #31
 8009d5c:	2b05      	cmp	r3, #5
 8009d5e:	d001      	beq.n	8009d64 <xmit_datablock+0x5a>
 8009d60:	2300      	movs	r3, #0
 8009d62:	e000      	b.n	8009d66 <xmit_datablock+0x5c>
	}
	return 1;
 8009d64:	2301      	movs	r3, #1
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	4603      	mov	r3, r0
 8009d76:	6039      	str	r1, [r7, #0]
 8009d78:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	da0e      	bge.n	8009da0 <send_cmd+0x32>
		cmd &= 0x7F;
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d88:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	2037      	movs	r0, #55	; 0x37
 8009d8e:	f7ff ffee 	bl	8009d6e <send_cmd>
 8009d92:	4603      	mov	r3, r0
 8009d94:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d901      	bls.n	8009da0 <send_cmd+0x32>
 8009d9c:	7bbb      	ldrb	r3, [r7, #14]
 8009d9e:	e051      	b.n	8009e44 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009da0:	79fb      	ldrb	r3, [r7, #7]
 8009da2:	2b0c      	cmp	r3, #12
 8009da4:	d008      	beq.n	8009db8 <send_cmd+0x4a>
		despiselect();
 8009da6:	f7ff ff5b 	bl	8009c60 <despiselect>
		if (!spiselect()) return 0xFF;
 8009daa:	f7ff ff69 	bl	8009c80 <spiselect>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <send_cmd+0x4a>
 8009db4:	23ff      	movs	r3, #255	; 0xff
 8009db6:	e045      	b.n	8009e44 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009db8:	79fb      	ldrb	r3, [r7, #7]
 8009dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff fedd 	bl	8009b80 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	0e1b      	lsrs	r3, r3, #24
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7ff fed7 	bl	8009b80 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	0c1b      	lsrs	r3, r3, #16
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fed1 	bl	8009b80 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	0a1b      	lsrs	r3, r3, #8
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7ff fecb 	bl	8009b80 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7ff fec6 	bl	8009b80 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8009df4:	2301      	movs	r3, #1
 8009df6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <send_cmd+0x94>
 8009dfe:	2395      	movs	r3, #149	; 0x95
 8009e00:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009e02:	79fb      	ldrb	r3, [r7, #7]
 8009e04:	2b08      	cmp	r3, #8
 8009e06:	d101      	bne.n	8009e0c <send_cmd+0x9e>
 8009e08:	2387      	movs	r3, #135	; 0x87
 8009e0a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7ff feb6 	bl	8009b80 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	2b0c      	cmp	r3, #12
 8009e18:	d102      	bne.n	8009e20 <send_cmd+0xb2>
 8009e1a:	20ff      	movs	r0, #255	; 0xff
 8009e1c:	f7ff feb0 	bl	8009b80 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009e20:	230a      	movs	r3, #10
 8009e22:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8009e24:	20ff      	movs	r0, #255	; 0xff
 8009e26:	f7ff feab 	bl	8009b80 <xchg_spi>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009e2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	da05      	bge.n	8009e42 <send_cmd+0xd4>
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	73fb      	strb	r3, [r7, #15]
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1f0      	bne.n	8009e24 <send_cmd+0xb6>

	return res;							/* Return received response */
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009e4c:	b590      	push	{r4, r7, lr}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009e56:	79fb      	ldrb	r3, [r7, #7]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <USER_SPI_initialize+0x14>
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e0d4      	b.n	800a00a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009e60:	4b6c      	ldr	r3, [pc, #432]	; (800a014 <USER_SPI_initialize+0x1c8>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	f003 0302 	and.w	r3, r3, #2
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d003      	beq.n	8009e76 <USER_SPI_initialize+0x2a>
 8009e6e:	4b69      	ldr	r3, [pc, #420]	; (800a014 <USER_SPI_initialize+0x1c8>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	e0c9      	b.n	800a00a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8009e76:	4b68      	ldr	r3, [pc, #416]	; (800a018 <USER_SPI_initialize+0x1cc>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	4b66      	ldr	r3, [pc, #408]	; (800a018 <USER_SPI_initialize+0x1cc>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8009e84:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009e86:	230a      	movs	r3, #10
 8009e88:	73fb      	strb	r3, [r7, #15]
 8009e8a:	e005      	b.n	8009e98 <USER_SPI_initialize+0x4c>
 8009e8c:	20ff      	movs	r0, #255	; 0xff
 8009e8e:	f7ff fe77 	bl	8009b80 <xchg_spi>
 8009e92:	7bfb      	ldrb	r3, [r7, #15]
 8009e94:	3b01      	subs	r3, #1
 8009e96:	73fb      	strb	r3, [r7, #15]
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1f6      	bne.n	8009e8c <USER_SPI_initialize+0x40>

	ty = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	f7ff ff62 	bl	8009d6e <send_cmd>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	f040 808b 	bne.w	8009fc8 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8009eb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009eb6:	f7ff fe39 	bl	8009b2c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8009eba:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ebe:	2008      	movs	r0, #8
 8009ec0:	f7ff ff55 	bl	8009d6e <send_cmd>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d151      	bne.n	8009f6e <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8009eca:	2300      	movs	r3, #0
 8009ecc:	73fb      	strb	r3, [r7, #15]
 8009ece:	e00d      	b.n	8009eec <USER_SPI_initialize+0xa0>
 8009ed0:	7bfc      	ldrb	r4, [r7, #15]
 8009ed2:	20ff      	movs	r0, #255	; 0xff
 8009ed4:	f7ff fe54 	bl	8009b80 <xchg_spi>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	461a      	mov	r2, r3
 8009edc:	f107 0310 	add.w	r3, r7, #16
 8009ee0:	4423      	add	r3, r4
 8009ee2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	73fb      	strb	r3, [r7, #15]
 8009eec:	7bfb      	ldrb	r3, [r7, #15]
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d9ee      	bls.n	8009ed0 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009ef2:	7abb      	ldrb	r3, [r7, #10]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d167      	bne.n	8009fc8 <USER_SPI_initialize+0x17c>
 8009ef8:	7afb      	ldrb	r3, [r7, #11]
 8009efa:	2baa      	cmp	r3, #170	; 0xaa
 8009efc:	d164      	bne.n	8009fc8 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8009efe:	bf00      	nop
 8009f00:	f7ff fe28 	bl	8009b54 <SPI_Timer_Status>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d007      	beq.n	8009f1a <USER_SPI_initialize+0xce>
 8009f0a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009f0e:	20a9      	movs	r0, #169	; 0xa9
 8009f10:	f7ff ff2d 	bl	8009d6e <send_cmd>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1f2      	bne.n	8009f00 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009f1a:	f7ff fe1b 	bl	8009b54 <SPI_Timer_Status>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d051      	beq.n	8009fc8 <USER_SPI_initialize+0x17c>
 8009f24:	2100      	movs	r1, #0
 8009f26:	203a      	movs	r0, #58	; 0x3a
 8009f28:	f7ff ff21 	bl	8009d6e <send_cmd>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d14a      	bne.n	8009fc8 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009f32:	2300      	movs	r3, #0
 8009f34:	73fb      	strb	r3, [r7, #15]
 8009f36:	e00d      	b.n	8009f54 <USER_SPI_initialize+0x108>
 8009f38:	7bfc      	ldrb	r4, [r7, #15]
 8009f3a:	20ff      	movs	r0, #255	; 0xff
 8009f3c:	f7ff fe20 	bl	8009b80 <xchg_spi>
 8009f40:	4603      	mov	r3, r0
 8009f42:	461a      	mov	r2, r3
 8009f44:	f107 0310 	add.w	r3, r7, #16
 8009f48:	4423      	add	r3, r4
 8009f4a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009f4e:	7bfb      	ldrb	r3, [r7, #15]
 8009f50:	3301      	adds	r3, #1
 8009f52:	73fb      	strb	r3, [r7, #15]
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d9ee      	bls.n	8009f38 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009f5a:	7a3b      	ldrb	r3, [r7, #8]
 8009f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <USER_SPI_initialize+0x11c>
 8009f64:	230c      	movs	r3, #12
 8009f66:	e000      	b.n	8009f6a <USER_SPI_initialize+0x11e>
 8009f68:	2304      	movs	r3, #4
 8009f6a:	737b      	strb	r3, [r7, #13]
 8009f6c:	e02c      	b.n	8009fc8 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009f6e:	2100      	movs	r1, #0
 8009f70:	20a9      	movs	r0, #169	; 0xa9
 8009f72:	f7ff fefc 	bl	8009d6e <send_cmd>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d804      	bhi.n	8009f86 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009f7c:	2302      	movs	r3, #2
 8009f7e:	737b      	strb	r3, [r7, #13]
 8009f80:	23a9      	movs	r3, #169	; 0xa9
 8009f82:	73bb      	strb	r3, [r7, #14]
 8009f84:	e003      	b.n	8009f8e <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8009f86:	2301      	movs	r3, #1
 8009f88:	737b      	strb	r3, [r7, #13]
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009f8e:	bf00      	nop
 8009f90:	f7ff fde0 	bl	8009b54 <SPI_Timer_Status>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d007      	beq.n	8009faa <USER_SPI_initialize+0x15e>
 8009f9a:	7bbb      	ldrb	r3, [r7, #14]
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7ff fee5 	bl	8009d6e <send_cmd>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1f2      	bne.n	8009f90 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8009faa:	f7ff fdd3 	bl	8009b54 <SPI_Timer_Status>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d007      	beq.n	8009fc4 <USER_SPI_initialize+0x178>
 8009fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009fb8:	2010      	movs	r0, #16
 8009fba:	f7ff fed8 	bl	8009d6e <send_cmd>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <USER_SPI_initialize+0x17c>
				ty = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8009fc8:	4a14      	ldr	r2, [pc, #80]	; (800a01c <USER_SPI_initialize+0x1d0>)
 8009fca:	7b7b      	ldrb	r3, [r7, #13]
 8009fcc:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009fce:	f7ff fe47 	bl	8009c60 <despiselect>

	if (ty) {			/* OK */
 8009fd2:	7b7b      	ldrb	r3, [r7, #13]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d012      	beq.n	8009ffe <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8009fd8:	4b0f      	ldr	r3, [pc, #60]	; (800a018 <USER_SPI_initialize+0x1cc>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009fe2:	4b0d      	ldr	r3, [pc, #52]	; (800a018 <USER_SPI_initialize+0x1cc>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f042 0220 	orr.w	r2, r2, #32
 8009fea:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009fec:	4b09      	ldr	r3, [pc, #36]	; (800a014 <USER_SPI_initialize+0x1c8>)
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	f023 0301 	bic.w	r3, r3, #1
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	4b06      	ldr	r3, [pc, #24]	; (800a014 <USER_SPI_initialize+0x1c8>)
 8009ffa:	701a      	strb	r2, [r3, #0]
 8009ffc:	e002      	b.n	800a004 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009ffe:	4b05      	ldr	r3, [pc, #20]	; (800a014 <USER_SPI_initialize+0x1c8>)
 800a000:	2201      	movs	r2, #1
 800a002:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a004:	4b03      	ldr	r3, [pc, #12]	; (800a014 <USER_SPI_initialize+0x1c8>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	b2db      	uxtb	r3, r3
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd90      	pop	{r4, r7, pc}
 800a012:	bf00      	nop
 800a014:	20000024 	.word	0x20000024
 800a018:	20000934 	.word	0x20000934
 800a01c:	200004c4 	.word	0x200004c4

0800a020 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a02a:	79fb      	ldrb	r3, [r7, #7]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <USER_SPI_status+0x14>
 800a030:	2301      	movs	r3, #1
 800a032:	e002      	b.n	800a03a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a034:	4b04      	ldr	r3, [pc, #16]	; (800a048 <USER_SPI_status+0x28>)
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	b2db      	uxtb	r3, r3
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	370c      	adds	r7, #12
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	20000024 	.word	0x20000024

0800a04c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	60b9      	str	r1, [r7, #8]
 800a054:	607a      	str	r2, [r7, #4]
 800a056:	603b      	str	r3, [r7, #0]
 800a058:	4603      	mov	r3, r0
 800a05a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <USER_SPI_read+0x1c>
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <USER_SPI_read+0x20>
 800a068:	2304      	movs	r3, #4
 800a06a:	e04d      	b.n	800a108 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a06c:	4b28      	ldr	r3, [pc, #160]	; (800a110 <USER_SPI_read+0xc4>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	b2db      	uxtb	r3, r3
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <USER_SPI_read+0x32>
 800a07a:	2303      	movs	r3, #3
 800a07c:	e044      	b.n	800a108 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a07e:	4b25      	ldr	r3, [pc, #148]	; (800a114 <USER_SPI_read+0xc8>)
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	f003 0308 	and.w	r3, r3, #8
 800a086:	2b00      	cmp	r3, #0
 800a088:	d102      	bne.n	800a090 <USER_SPI_read+0x44>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	025b      	lsls	r3, r3, #9
 800a08e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d111      	bne.n	800a0ba <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a096:	6879      	ldr	r1, [r7, #4]
 800a098:	2011      	movs	r0, #17
 800a09a:	f7ff fe68 	bl	8009d6e <send_cmd>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d129      	bne.n	800a0f8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a0a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0a8:	68b8      	ldr	r0, [r7, #8]
 800a0aa:	f7ff fe05 	bl	8009cb8 <rcvr_datablock>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d021      	beq.n	800a0f8 <USER_SPI_read+0xac>
			count = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	603b      	str	r3, [r7, #0]
 800a0b8:	e01e      	b.n	800a0f8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a0ba:	6879      	ldr	r1, [r7, #4]
 800a0bc:	2012      	movs	r0, #18
 800a0be:	f7ff fe56 	bl	8009d6e <send_cmd>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d117      	bne.n	800a0f8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a0c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0cc:	68b8      	ldr	r0, [r7, #8]
 800a0ce:	f7ff fdf3 	bl	8009cb8 <rcvr_datablock>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00a      	beq.n	800a0ee <USER_SPI_read+0xa2>
				buff += 512;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a0de:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	603b      	str	r3, [r7, #0]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1ed      	bne.n	800a0c8 <USER_SPI_read+0x7c>
 800a0ec:	e000      	b.n	800a0f0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800a0ee:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	200c      	movs	r0, #12
 800a0f4:	f7ff fe3b 	bl	8009d6e <send_cmd>
		}
	}
	despiselect();
 800a0f8:	f7ff fdb2 	bl	8009c60 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bf14      	ite	ne
 800a102:	2301      	movne	r3, #1
 800a104:	2300      	moveq	r3, #0
 800a106:	b2db      	uxtb	r3, r3
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	20000024 	.word	0x20000024
 800a114:	200004c4 	.word	0x200004c4

0800a118 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	607a      	str	r2, [r7, #4]
 800a122:	603b      	str	r3, [r7, #0]
 800a124:	4603      	mov	r3, r0
 800a126:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a128:	7bfb      	ldrb	r3, [r7, #15]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d102      	bne.n	800a134 <USER_SPI_write+0x1c>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <USER_SPI_write+0x20>
 800a134:	2304      	movs	r3, #4
 800a136:	e063      	b.n	800a200 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a138:	4b33      	ldr	r3, [pc, #204]	; (800a208 <USER_SPI_write+0xf0>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <USER_SPI_write+0x32>
 800a146:	2303      	movs	r3, #3
 800a148:	e05a      	b.n	800a200 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a14a:	4b2f      	ldr	r3, [pc, #188]	; (800a208 <USER_SPI_write+0xf0>)
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	f003 0304 	and.w	r3, r3, #4
 800a154:	2b00      	cmp	r3, #0
 800a156:	d001      	beq.n	800a15c <USER_SPI_write+0x44>
 800a158:	2302      	movs	r3, #2
 800a15a:	e051      	b.n	800a200 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a15c:	4b2b      	ldr	r3, [pc, #172]	; (800a20c <USER_SPI_write+0xf4>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	f003 0308 	and.w	r3, r3, #8
 800a164:	2b00      	cmp	r3, #0
 800a166:	d102      	bne.n	800a16e <USER_SPI_write+0x56>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	025b      	lsls	r3, r3, #9
 800a16c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2b01      	cmp	r3, #1
 800a172:	d110      	bne.n	800a196 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a174:	6879      	ldr	r1, [r7, #4]
 800a176:	2018      	movs	r0, #24
 800a178:	f7ff fdf9 	bl	8009d6e <send_cmd>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d136      	bne.n	800a1f0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800a182:	21fe      	movs	r1, #254	; 0xfe
 800a184:	68b8      	ldr	r0, [r7, #8]
 800a186:	f7ff fdc0 	bl	8009d0a <xmit_datablock>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d02f      	beq.n	800a1f0 <USER_SPI_write+0xd8>
			count = 0;
 800a190:	2300      	movs	r3, #0
 800a192:	603b      	str	r3, [r7, #0]
 800a194:	e02c      	b.n	800a1f0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a196:	4b1d      	ldr	r3, [pc, #116]	; (800a20c <USER_SPI_write+0xf4>)
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	f003 0306 	and.w	r3, r3, #6
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d003      	beq.n	800a1aa <USER_SPI_write+0x92>
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	2097      	movs	r0, #151	; 0x97
 800a1a6:	f7ff fde2 	bl	8009d6e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a1aa:	6879      	ldr	r1, [r7, #4]
 800a1ac:	2019      	movs	r0, #25
 800a1ae:	f7ff fdde 	bl	8009d6e <send_cmd>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d11b      	bne.n	800a1f0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800a1b8:	21fc      	movs	r1, #252	; 0xfc
 800a1ba:	68b8      	ldr	r0, [r7, #8]
 800a1bc:	f7ff fda5 	bl	8009d0a <xmit_datablock>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00a      	beq.n	800a1dc <USER_SPI_write+0xc4>
				buff += 512;
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a1cc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1ee      	bne.n	800a1b8 <USER_SPI_write+0xa0>
 800a1da:	e000      	b.n	800a1de <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800a1dc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a1de:	21fd      	movs	r1, #253	; 0xfd
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	f7ff fd92 	bl	8009d0a <xmit_datablock>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d101      	bne.n	800a1f0 <USER_SPI_write+0xd8>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800a1f0:	f7ff fd36 	bl	8009c60 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	bf14      	ite	ne
 800a1fa:	2301      	movne	r3, #1
 800a1fc:	2300      	moveq	r3, #0
 800a1fe:	b2db      	uxtb	r3, r3
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	20000024 	.word	0x20000024
 800a20c:	200004c4 	.word	0x200004c4

0800a210 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08c      	sub	sp, #48	; 0x30
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	603a      	str	r2, [r7, #0]
 800a21a:	71fb      	strb	r3, [r7, #7]
 800a21c:	460b      	mov	r3, r1
 800a21e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a220:	79fb      	ldrb	r3, [r7, #7]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <USER_SPI_ioctl+0x1a>
 800a226:	2304      	movs	r3, #4
 800a228:	e15a      	b.n	800a4e0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a22a:	4baf      	ldr	r3, [pc, #700]	; (800a4e8 <USER_SPI_ioctl+0x2d8>)
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <USER_SPI_ioctl+0x2c>
 800a238:	2303      	movs	r3, #3
 800a23a:	e151      	b.n	800a4e0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800a242:	79bb      	ldrb	r3, [r7, #6]
 800a244:	2b04      	cmp	r3, #4
 800a246:	f200 8136 	bhi.w	800a4b6 <USER_SPI_ioctl+0x2a6>
 800a24a:	a201      	add	r2, pc, #4	; (adr r2, 800a250 <USER_SPI_ioctl+0x40>)
 800a24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a250:	0800a265 	.word	0x0800a265
 800a254:	0800a279 	.word	0x0800a279
 800a258:	0800a4b7 	.word	0x0800a4b7
 800a25c:	0800a325 	.word	0x0800a325
 800a260:	0800a41b 	.word	0x0800a41b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800a264:	f7ff fd0c 	bl	8009c80 <spiselect>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f000 8127 	beq.w	800a4be <USER_SPI_ioctl+0x2ae>
 800a270:	2300      	movs	r3, #0
 800a272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a276:	e122      	b.n	800a4be <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a278:	2100      	movs	r1, #0
 800a27a:	2009      	movs	r0, #9
 800a27c:	f7ff fd77 	bl	8009d6e <send_cmd>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	f040 811d 	bne.w	800a4c2 <USER_SPI_ioctl+0x2b2>
 800a288:	f107 030c 	add.w	r3, r7, #12
 800a28c:	2110      	movs	r1, #16
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff fd12 	bl	8009cb8 <rcvr_datablock>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	f000 8113 	beq.w	800a4c2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800a29c:	7b3b      	ldrb	r3, [r7, #12]
 800a29e:	099b      	lsrs	r3, r3, #6
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d111      	bne.n	800a2ca <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800a2a6:	7d7b      	ldrb	r3, [r7, #21]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	7d3b      	ldrb	r3, [r7, #20]
 800a2ac:	021b      	lsls	r3, r3, #8
 800a2ae:	4413      	add	r3, r2
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	7cfb      	ldrb	r3, [r7, #19]
 800a2b4:	041b      	lsls	r3, r3, #16
 800a2b6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a2ba:	4413      	add	r3, r2
 800a2bc:	3301      	adds	r3, #1
 800a2be:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	029a      	lsls	r2, r3, #10
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	601a      	str	r2, [r3, #0]
 800a2c8:	e028      	b.n	800a31c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a2ca:	7c7b      	ldrb	r3, [r7, #17]
 800a2cc:	f003 030f 	and.w	r3, r3, #15
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	7dbb      	ldrb	r3, [r7, #22]
 800a2d4:	09db      	lsrs	r3, r3, #7
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	4413      	add	r3, r2
 800a2da:	b2da      	uxtb	r2, r3
 800a2dc:	7d7b      	ldrb	r3, [r7, #21]
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	f003 0306 	and.w	r3, r3, #6
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	4413      	add	r3, r2
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	3302      	adds	r3, #2
 800a2ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a2f2:	7d3b      	ldrb	r3, [r7, #20]
 800a2f4:	099b      	lsrs	r3, r3, #6
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	7cfb      	ldrb	r3, [r7, #19]
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	441a      	add	r2, r3
 800a300:	7cbb      	ldrb	r3, [r7, #18]
 800a302:	029b      	lsls	r3, r3, #10
 800a304:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a308:	4413      	add	r3, r2
 800a30a:	3301      	adds	r3, #1
 800a30c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800a30e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a312:	3b09      	subs	r3, #9
 800a314:	69fa      	ldr	r2, [r7, #28]
 800a316:	409a      	lsls	r2, r3
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a322:	e0ce      	b.n	800a4c2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800a324:	4b71      	ldr	r3, [pc, #452]	; (800a4ec <USER_SPI_ioctl+0x2dc>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	f003 0304 	and.w	r3, r3, #4
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d031      	beq.n	800a394 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800a330:	2100      	movs	r1, #0
 800a332:	208d      	movs	r0, #141	; 0x8d
 800a334:	f7ff fd1b 	bl	8009d6e <send_cmd>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f040 80c3 	bne.w	800a4c6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800a340:	20ff      	movs	r0, #255	; 0xff
 800a342:	f7ff fc1d 	bl	8009b80 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800a346:	f107 030c 	add.w	r3, r7, #12
 800a34a:	2110      	movs	r1, #16
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7ff fcb3 	bl	8009cb8 <rcvr_datablock>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 80b6 	beq.w	800a4c6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a35a:	2330      	movs	r3, #48	; 0x30
 800a35c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a360:	e007      	b.n	800a372 <USER_SPI_ioctl+0x162>
 800a362:	20ff      	movs	r0, #255	; 0xff
 800a364:	f7ff fc0c 	bl	8009b80 <xchg_spi>
 800a368:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a36c:	3b01      	subs	r3, #1
 800a36e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a372:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1f3      	bne.n	800a362 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a37a:	7dbb      	ldrb	r3, [r7, #22]
 800a37c:	091b      	lsrs	r3, r3, #4
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	461a      	mov	r2, r3
 800a382:	2310      	movs	r3, #16
 800a384:	fa03 f202 	lsl.w	r2, r3, r2
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800a392:	e098      	b.n	800a4c6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a394:	2100      	movs	r1, #0
 800a396:	2009      	movs	r0, #9
 800a398:	f7ff fce9 	bl	8009d6e <send_cmd>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f040 8091 	bne.w	800a4c6 <USER_SPI_ioctl+0x2b6>
 800a3a4:	f107 030c 	add.w	r3, r7, #12
 800a3a8:	2110      	movs	r1, #16
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7ff fc84 	bl	8009cb8 <rcvr_datablock>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 8087 	beq.w	800a4c6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a3b8:	4b4c      	ldr	r3, [pc, #304]	; (800a4ec <USER_SPI_ioctl+0x2dc>)
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	f003 0302 	and.w	r3, r3, #2
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d012      	beq.n	800a3ea <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a3c4:	7dbb      	ldrb	r3, [r7, #22]
 800a3c6:	005b      	lsls	r3, r3, #1
 800a3c8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a3cc:	7dfa      	ldrb	r2, [r7, #23]
 800a3ce:	09d2      	lsrs	r2, r2, #7
 800a3d0:	b2d2      	uxtb	r2, r2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	1c5a      	adds	r2, r3, #1
 800a3d6:	7e7b      	ldrb	r3, [r7, #25]
 800a3d8:	099b      	lsrs	r3, r3, #6
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	e013      	b.n	800a412 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800a3ea:	7dbb      	ldrb	r3, [r7, #22]
 800a3ec:	109b      	asrs	r3, r3, #2
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	f003 031f 	and.w	r3, r3, #31
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	7dfa      	ldrb	r2, [r7, #23]
 800a3f8:	00d2      	lsls	r2, r2, #3
 800a3fa:	f002 0218 	and.w	r2, r2, #24
 800a3fe:	7df9      	ldrb	r1, [r7, #23]
 800a400:	0949      	lsrs	r1, r1, #5
 800a402:	b2c9      	uxtb	r1, r1
 800a404:	440a      	add	r2, r1
 800a406:	3201      	adds	r2, #1
 800a408:	fb02 f303 	mul.w	r3, r2, r3
 800a40c:	461a      	mov	r2, r3
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a418:	e055      	b.n	800a4c6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a41a:	4b34      	ldr	r3, [pc, #208]	; (800a4ec <USER_SPI_ioctl+0x2dc>)
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	f003 0306 	and.w	r3, r3, #6
 800a422:	2b00      	cmp	r3, #0
 800a424:	d051      	beq.n	800a4ca <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a426:	f107 020c 	add.w	r2, r7, #12
 800a42a:	79fb      	ldrb	r3, [r7, #7]
 800a42c:	210b      	movs	r1, #11
 800a42e:	4618      	mov	r0, r3
 800a430:	f7ff feee 	bl	800a210 <USER_SPI_ioctl>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d149      	bne.n	800a4ce <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a43a:	7b3b      	ldrb	r3, [r7, #12]
 800a43c:	099b      	lsrs	r3, r3, #6
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	2b00      	cmp	r3, #0
 800a442:	d104      	bne.n	800a44e <USER_SPI_ioctl+0x23e>
 800a444:	7dbb      	ldrb	r3, [r7, #22]
 800a446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d041      	beq.n	800a4d2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	623b      	str	r3, [r7, #32]
 800a452:	6a3b      	ldr	r3, [r7, #32]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	62bb      	str	r3, [r7, #40]	; 0x28
 800a458:	6a3b      	ldr	r3, [r7, #32]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800a45e:	4b23      	ldr	r3, [pc, #140]	; (800a4ec <USER_SPI_ioctl+0x2dc>)
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	f003 0308 	and.w	r3, r3, #8
 800a466:	2b00      	cmp	r3, #0
 800a468:	d105      	bne.n	800a476 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800a46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46c:	025b      	lsls	r3, r3, #9
 800a46e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	025b      	lsls	r3, r3, #9
 800a474:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a478:	2020      	movs	r0, #32
 800a47a:	f7ff fc78 	bl	8009d6e <send_cmd>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d128      	bne.n	800a4d6 <USER_SPI_ioctl+0x2c6>
 800a484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a486:	2021      	movs	r0, #33	; 0x21
 800a488:	f7ff fc71 	bl	8009d6e <send_cmd>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d121      	bne.n	800a4d6 <USER_SPI_ioctl+0x2c6>
 800a492:	2100      	movs	r1, #0
 800a494:	2026      	movs	r0, #38	; 0x26
 800a496:	f7ff fc6a 	bl	8009d6e <send_cmd>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d11a      	bne.n	800a4d6 <USER_SPI_ioctl+0x2c6>
 800a4a0:	f247 5030 	movw	r0, #30000	; 0x7530
 800a4a4:	f7ff fbb9 	bl	8009c1a <wait_ready>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d013      	beq.n	800a4d6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a4b4:	e00f      	b.n	800a4d6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800a4b6:	2304      	movs	r3, #4
 800a4b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a4bc:	e00c      	b.n	800a4d8 <USER_SPI_ioctl+0x2c8>
		break;
 800a4be:	bf00      	nop
 800a4c0:	e00a      	b.n	800a4d8 <USER_SPI_ioctl+0x2c8>
		break;
 800a4c2:	bf00      	nop
 800a4c4:	e008      	b.n	800a4d8 <USER_SPI_ioctl+0x2c8>
		break;
 800a4c6:	bf00      	nop
 800a4c8:	e006      	b.n	800a4d8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a4ca:	bf00      	nop
 800a4cc:	e004      	b.n	800a4d8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a4ce:	bf00      	nop
 800a4d0:	e002      	b.n	800a4d8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a4d2:	bf00      	nop
 800a4d4:	e000      	b.n	800a4d8 <USER_SPI_ioctl+0x2c8>
		break;
 800a4d6:	bf00      	nop
	}

	despiselect();
 800a4d8:	f7ff fbc2 	bl	8009c60 <despiselect>

	return res;
 800a4dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3730      	adds	r7, #48	; 0x30
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	20000024 	.word	0x20000024
 800a4ec:	200004c4 	.word	0x200004c4

0800a4f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a4fa:	79fb      	ldrb	r3, [r7, #7]
 800a4fc:	4a08      	ldr	r2, [pc, #32]	; (800a520 <disk_status+0x30>)
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4413      	add	r3, r2
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	79fa      	ldrb	r2, [r7, #7]
 800a508:	4905      	ldr	r1, [pc, #20]	; (800a520 <disk_status+0x30>)
 800a50a:	440a      	add	r2, r1
 800a50c:	7a12      	ldrb	r2, [r2, #8]
 800a50e:	4610      	mov	r0, r2
 800a510:	4798      	blx	r3
 800a512:	4603      	mov	r3, r0
 800a514:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a516:	7bfb      	ldrb	r3, [r7, #15]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	200004f0 	.word	0x200004f0

0800a524 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	4603      	mov	r3, r0
 800a52c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a532:	79fb      	ldrb	r3, [r7, #7]
 800a534:	4a0d      	ldr	r2, [pc, #52]	; (800a56c <disk_initialize+0x48>)
 800a536:	5cd3      	ldrb	r3, [r2, r3]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d111      	bne.n	800a560 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a53c:	79fb      	ldrb	r3, [r7, #7]
 800a53e:	4a0b      	ldr	r2, [pc, #44]	; (800a56c <disk_initialize+0x48>)
 800a540:	2101      	movs	r1, #1
 800a542:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	4a09      	ldr	r2, [pc, #36]	; (800a56c <disk_initialize+0x48>)
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4413      	add	r3, r2
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	79fa      	ldrb	r2, [r7, #7]
 800a552:	4906      	ldr	r1, [pc, #24]	; (800a56c <disk_initialize+0x48>)
 800a554:	440a      	add	r2, r1
 800a556:	7a12      	ldrb	r2, [r2, #8]
 800a558:	4610      	mov	r0, r2
 800a55a:	4798      	blx	r3
 800a55c:	4603      	mov	r3, r0
 800a55e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a560:	7bfb      	ldrb	r3, [r7, #15]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	200004f0 	.word	0x200004f0

0800a570 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a570:	b590      	push	{r4, r7, lr}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	60b9      	str	r1, [r7, #8]
 800a578:	607a      	str	r2, [r7, #4]
 800a57a:	603b      	str	r3, [r7, #0]
 800a57c:	4603      	mov	r3, r0
 800a57e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a580:	7bfb      	ldrb	r3, [r7, #15]
 800a582:	4a0a      	ldr	r2, [pc, #40]	; (800a5ac <disk_read+0x3c>)
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4413      	add	r3, r2
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	689c      	ldr	r4, [r3, #8]
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
 800a58e:	4a07      	ldr	r2, [pc, #28]	; (800a5ac <disk_read+0x3c>)
 800a590:	4413      	add	r3, r2
 800a592:	7a18      	ldrb	r0, [r3, #8]
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	47a0      	blx	r4
 800a59c:	4603      	mov	r3, r0
 800a59e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	371c      	adds	r7, #28
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd90      	pop	{r4, r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	200004f0 	.word	0x200004f0

0800a5b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a5b0:	b590      	push	{r4, r7, lr}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	607a      	str	r2, [r7, #4]
 800a5ba:	603b      	str	r3, [r7, #0]
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
 800a5c2:	4a0a      	ldr	r2, [pc, #40]	; (800a5ec <disk_write+0x3c>)
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	68dc      	ldr	r4, [r3, #12]
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
 800a5ce:	4a07      	ldr	r2, [pc, #28]	; (800a5ec <disk_write+0x3c>)
 800a5d0:	4413      	add	r3, r2
 800a5d2:	7a18      	ldrb	r0, [r3, #8]
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	68b9      	ldr	r1, [r7, #8]
 800a5da:	47a0      	blx	r4
 800a5dc:	4603      	mov	r3, r0
 800a5de:	75fb      	strb	r3, [r7, #23]
  return res;
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	371c      	adds	r7, #28
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd90      	pop	{r4, r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	200004f0 	.word	0x200004f0

0800a5f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	603a      	str	r2, [r7, #0]
 800a5fa:	71fb      	strb	r3, [r7, #7]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a600:	79fb      	ldrb	r3, [r7, #7]
 800a602:	4a09      	ldr	r2, [pc, #36]	; (800a628 <disk_ioctl+0x38>)
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	79fa      	ldrb	r2, [r7, #7]
 800a60e:	4906      	ldr	r1, [pc, #24]	; (800a628 <disk_ioctl+0x38>)
 800a610:	440a      	add	r2, r1
 800a612:	7a10      	ldrb	r0, [r2, #8]
 800a614:	79b9      	ldrb	r1, [r7, #6]
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	4798      	blx	r3
 800a61a:	4603      	mov	r3, r0
 800a61c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	200004f0 	.word	0x200004f0

0800a62c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3301      	adds	r3, #1
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a63c:	89fb      	ldrh	r3, [r7, #14]
 800a63e:	021b      	lsls	r3, r3, #8
 800a640:	b21a      	sxth	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	b21b      	sxth	r3, r3
 800a648:	4313      	orrs	r3, r2
 800a64a:	b21b      	sxth	r3, r3
 800a64c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a64e:	89fb      	ldrh	r3, [r7, #14]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	3303      	adds	r3, #3
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	021b      	lsls	r3, r3, #8
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	3202      	adds	r2, #2
 800a674:	7812      	ldrb	r2, [r2, #0]
 800a676:	4313      	orrs	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	021b      	lsls	r3, r3, #8
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	3201      	adds	r2, #1
 800a682:	7812      	ldrb	r2, [r2, #0]
 800a684:	4313      	orrs	r3, r2
 800a686:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	021b      	lsls	r3, r3, #8
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	7812      	ldrb	r2, [r2, #0]
 800a690:	4313      	orrs	r3, r2
 800a692:	60fb      	str	r3, [r7, #12]
	return rv;
 800a694:	68fb      	ldr	r3, [r7, #12]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	1c5a      	adds	r2, r3, #1
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	887a      	ldrh	r2, [r7, #2]
 800a6b6:	b2d2      	uxtb	r2, r2
 800a6b8:	701a      	strb	r2, [r3, #0]
 800a6ba:	887b      	ldrh	r3, [r7, #2]
 800a6bc:	0a1b      	lsrs	r3, r3, #8
 800a6be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	1c5a      	adds	r2, r3, #1
 800a6c4:	607a      	str	r2, [r7, #4]
 800a6c6:	887a      	ldrh	r2, [r7, #2]
 800a6c8:	b2d2      	uxtb	r2, r2
 800a6ca:	701a      	strb	r2, [r3, #0]
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	1c5a      	adds	r2, r3, #1
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	b2d2      	uxtb	r2, r2
 800a6ec:	701a      	strb	r2, [r3, #0]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	0a1b      	lsrs	r3, r3, #8
 800a6f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	1c5a      	adds	r2, r3, #1
 800a6f8:	607a      	str	r2, [r7, #4]
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	b2d2      	uxtb	r2, r2
 800a6fe:	701a      	strb	r2, [r3, #0]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	0a1b      	lsrs	r3, r3, #8
 800a704:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	1c5a      	adds	r2, r3, #1
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	b2d2      	uxtb	r2, r2
 800a710:	701a      	strb	r2, [r3, #0]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	0a1b      	lsrs	r3, r3, #8
 800a716:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	1c5a      	adds	r2, r3, #1
 800a71c:	607a      	str	r2, [r7, #4]
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	b2d2      	uxtb	r2, r2
 800a722:	701a      	strb	r2, [r3, #0]
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a730:	b480      	push	{r7}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00d      	beq.n	800a766 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	1c53      	adds	r3, r2, #1
 800a74e:	613b      	str	r3, [r7, #16]
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	1c59      	adds	r1, r3, #1
 800a754:	6179      	str	r1, [r7, #20]
 800a756:	7812      	ldrb	r2, [r2, #0]
 800a758:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	607b      	str	r3, [r7, #4]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1f1      	bne.n	800a74a <mem_cpy+0x1a>
	}
}
 800a766:	bf00      	nop
 800a768:	371c      	adds	r7, #28
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr

0800a772 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a772:	b480      	push	{r7}
 800a774:	b087      	sub	sp, #28
 800a776:	af00      	add	r7, sp, #0
 800a778:	60f8      	str	r0, [r7, #12]
 800a77a:	60b9      	str	r1, [r7, #8]
 800a77c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	1c5a      	adds	r2, r3, #1
 800a786:	617a      	str	r2, [r7, #20]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	b2d2      	uxtb	r2, r2
 800a78c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	3b01      	subs	r3, #1
 800a792:	607b      	str	r3, [r7, #4]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1f3      	bne.n	800a782 <mem_set+0x10>
}
 800a79a:	bf00      	nop
 800a79c:	bf00      	nop
 800a79e:	371c      	adds	r7, #28
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a7a8:	b480      	push	{r7}
 800a7aa:	b089      	sub	sp, #36	; 0x24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	61fb      	str	r3, [r7, #28]
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	61fa      	str	r2, [r7, #28]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	61ba      	str	r2, [r7, #24]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	1acb      	subs	r3, r1, r3
 800a7d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	607b      	str	r3, [r7, #4]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d002      	beq.n	800a7e8 <mem_cmp+0x40>
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d0eb      	beq.n	800a7c0 <mem_cmp+0x18>

	return r;
 800a7e8:	697b      	ldr	r3, [r7, #20]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3724      	adds	r7, #36	; 0x24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a800:	e002      	b.n	800a808 <chk_chr+0x12>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	3301      	adds	r3, #1
 800a806:	607b      	str	r3, [r7, #4]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d005      	beq.n	800a81c <chk_chr+0x26>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	461a      	mov	r2, r3
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	4293      	cmp	r3, r2
 800a81a:	d1f2      	bne.n	800a802 <chk_chr+0xc>
	return *str;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	781b      	ldrb	r3, [r3, #0]
}
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a836:	2300      	movs	r3, #0
 800a838:	60bb      	str	r3, [r7, #8]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	e029      	b.n	800a894 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a840:	4a27      	ldr	r2, [pc, #156]	; (800a8e0 <chk_lock+0xb4>)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	011b      	lsls	r3, r3, #4
 800a846:	4413      	add	r3, r2
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d01d      	beq.n	800a88a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a84e:	4a24      	ldr	r2, [pc, #144]	; (800a8e0 <chk_lock+0xb4>)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	011b      	lsls	r3, r3, #4
 800a854:	4413      	add	r3, r2
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d116      	bne.n	800a88e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a860:	4a1f      	ldr	r2, [pc, #124]	; (800a8e0 <chk_lock+0xb4>)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	011b      	lsls	r3, r3, #4
 800a866:	4413      	add	r3, r2
 800a868:	3304      	adds	r3, #4
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a870:	429a      	cmp	r2, r3
 800a872:	d10c      	bne.n	800a88e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a874:	4a1a      	ldr	r2, [pc, #104]	; (800a8e0 <chk_lock+0xb4>)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	011b      	lsls	r3, r3, #4
 800a87a:	4413      	add	r3, r2
 800a87c:	3308      	adds	r3, #8
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a884:	429a      	cmp	r2, r3
 800a886:	d102      	bne.n	800a88e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a888:	e007      	b.n	800a89a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a88a:	2301      	movs	r3, #1
 800a88c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3301      	adds	r3, #1
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b01      	cmp	r3, #1
 800a898:	d9d2      	bls.n	800a840 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d109      	bne.n	800a8b4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d102      	bne.n	800a8ac <chk_lock+0x80>
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d101      	bne.n	800a8b0 <chk_lock+0x84>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	e010      	b.n	800a8d2 <chk_lock+0xa6>
 800a8b0:	2312      	movs	r3, #18
 800a8b2:	e00e      	b.n	800a8d2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d108      	bne.n	800a8cc <chk_lock+0xa0>
 800a8ba:	4a09      	ldr	r2, [pc, #36]	; (800a8e0 <chk_lock+0xb4>)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	011b      	lsls	r3, r3, #4
 800a8c0:	4413      	add	r3, r2
 800a8c2:	330c      	adds	r3, #12
 800a8c4:	881b      	ldrh	r3, [r3, #0]
 800a8c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ca:	d101      	bne.n	800a8d0 <chk_lock+0xa4>
 800a8cc:	2310      	movs	r3, #16
 800a8ce:	e000      	b.n	800a8d2 <chk_lock+0xa6>
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3714      	adds	r7, #20
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	200004d0 	.word	0x200004d0

0800a8e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	607b      	str	r3, [r7, #4]
 800a8ee:	e002      	b.n	800a8f6 <enq_lock+0x12>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	607b      	str	r3, [r7, #4]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d806      	bhi.n	800a90a <enq_lock+0x26>
 800a8fc:	4a09      	ldr	r2, [pc, #36]	; (800a924 <enq_lock+0x40>)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	011b      	lsls	r3, r3, #4
 800a902:	4413      	add	r3, r2
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1f2      	bne.n	800a8f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	bf14      	ite	ne
 800a910:	2301      	movne	r3, #1
 800a912:	2300      	moveq	r3, #0
 800a914:	b2db      	uxtb	r3, r3
}
 800a916:	4618      	mov	r0, r3
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	200004d0 	.word	0x200004d0

0800a928 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a932:	2300      	movs	r3, #0
 800a934:	60fb      	str	r3, [r7, #12]
 800a936:	e01f      	b.n	800a978 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a938:	4a41      	ldr	r2, [pc, #260]	; (800aa40 <inc_lock+0x118>)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	011b      	lsls	r3, r3, #4
 800a93e:	4413      	add	r3, r2
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	429a      	cmp	r2, r3
 800a948:	d113      	bne.n	800a972 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a94a:	4a3d      	ldr	r2, [pc, #244]	; (800aa40 <inc_lock+0x118>)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	011b      	lsls	r3, r3, #4
 800a950:	4413      	add	r3, r2
 800a952:	3304      	adds	r3, #4
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d109      	bne.n	800a972 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a95e:	4a38      	ldr	r2, [pc, #224]	; (800aa40 <inc_lock+0x118>)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	011b      	lsls	r3, r3, #4
 800a964:	4413      	add	r3, r2
 800a966:	3308      	adds	r3, #8
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a96e:	429a      	cmp	r2, r3
 800a970:	d006      	beq.n	800a980 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3301      	adds	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d9dc      	bls.n	800a938 <inc_lock+0x10>
 800a97e:	e000      	b.n	800a982 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a980:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2b02      	cmp	r3, #2
 800a986:	d132      	bne.n	800a9ee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a988:	2300      	movs	r3, #0
 800a98a:	60fb      	str	r3, [r7, #12]
 800a98c:	e002      	b.n	800a994 <inc_lock+0x6c>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	3301      	adds	r3, #1
 800a992:	60fb      	str	r3, [r7, #12]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d806      	bhi.n	800a9a8 <inc_lock+0x80>
 800a99a:	4a29      	ldr	r2, [pc, #164]	; (800aa40 <inc_lock+0x118>)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	011b      	lsls	r3, r3, #4
 800a9a0:	4413      	add	r3, r2
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1f2      	bne.n	800a98e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d101      	bne.n	800a9b2 <inc_lock+0x8a>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	e040      	b.n	800aa34 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	4922      	ldr	r1, [pc, #136]	; (800aa40 <inc_lock+0x118>)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	011b      	lsls	r3, r3, #4
 800a9bc:	440b      	add	r3, r1
 800a9be:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	689a      	ldr	r2, [r3, #8]
 800a9c4:	491e      	ldr	r1, [pc, #120]	; (800aa40 <inc_lock+0x118>)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	011b      	lsls	r3, r3, #4
 800a9ca:	440b      	add	r3, r1
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	695a      	ldr	r2, [r3, #20]
 800a9d4:	491a      	ldr	r1, [pc, #104]	; (800aa40 <inc_lock+0x118>)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	011b      	lsls	r3, r3, #4
 800a9da:	440b      	add	r3, r1
 800a9dc:	3308      	adds	r3, #8
 800a9de:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a9e0:	4a17      	ldr	r2, [pc, #92]	; (800aa40 <inc_lock+0x118>)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	011b      	lsls	r3, r3, #4
 800a9e6:	4413      	add	r3, r2
 800a9e8:	330c      	adds	r3, #12
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d009      	beq.n	800aa08 <inc_lock+0xe0>
 800a9f4:	4a12      	ldr	r2, [pc, #72]	; (800aa40 <inc_lock+0x118>)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	011b      	lsls	r3, r3, #4
 800a9fa:	4413      	add	r3, r2
 800a9fc:	330c      	adds	r3, #12
 800a9fe:	881b      	ldrh	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <inc_lock+0xe0>
 800aa04:	2300      	movs	r3, #0
 800aa06:	e015      	b.n	800aa34 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d108      	bne.n	800aa20 <inc_lock+0xf8>
 800aa0e:	4a0c      	ldr	r2, [pc, #48]	; (800aa40 <inc_lock+0x118>)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	011b      	lsls	r3, r3, #4
 800aa14:	4413      	add	r3, r2
 800aa16:	330c      	adds	r3, #12
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	e001      	b.n	800aa24 <inc_lock+0xfc>
 800aa20:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa24:	4906      	ldr	r1, [pc, #24]	; (800aa40 <inc_lock+0x118>)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	011b      	lsls	r3, r3, #4
 800aa2a:	440b      	add	r3, r1
 800aa2c:	330c      	adds	r3, #12
 800aa2e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	3301      	adds	r3, #1
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	200004d0 	.word	0x200004d0

0800aa44 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	607b      	str	r3, [r7, #4]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d825      	bhi.n	800aaa4 <dec_lock+0x60>
		n = Files[i].ctr;
 800aa58:	4a17      	ldr	r2, [pc, #92]	; (800aab8 <dec_lock+0x74>)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	011b      	lsls	r3, r3, #4
 800aa5e:	4413      	add	r3, r2
 800aa60:	330c      	adds	r3, #12
 800aa62:	881b      	ldrh	r3, [r3, #0]
 800aa64:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aa66:	89fb      	ldrh	r3, [r7, #14]
 800aa68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa6c:	d101      	bne.n	800aa72 <dec_lock+0x2e>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aa72:	89fb      	ldrh	r3, [r7, #14]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d002      	beq.n	800aa7e <dec_lock+0x3a>
 800aa78:	89fb      	ldrh	r3, [r7, #14]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800aa7e:	4a0e      	ldr	r2, [pc, #56]	; (800aab8 <dec_lock+0x74>)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	011b      	lsls	r3, r3, #4
 800aa84:	4413      	add	r3, r2
 800aa86:	330c      	adds	r3, #12
 800aa88:	89fa      	ldrh	r2, [r7, #14]
 800aa8a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800aa8c:	89fb      	ldrh	r3, [r7, #14]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d105      	bne.n	800aa9e <dec_lock+0x5a>
 800aa92:	4a09      	ldr	r2, [pc, #36]	; (800aab8 <dec_lock+0x74>)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	011b      	lsls	r3, r3, #4
 800aa98:	4413      	add	r3, r2
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	737b      	strb	r3, [r7, #13]
 800aaa2:	e001      	b.n	800aaa8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aaa8:	7b7b      	ldrb	r3, [r7, #13]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3714      	adds	r7, #20
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	200004d0 	.word	0x200004d0

0800aabc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800aac4:	2300      	movs	r3, #0
 800aac6:	60fb      	str	r3, [r7, #12]
 800aac8:	e010      	b.n	800aaec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aaca:	4a0d      	ldr	r2, [pc, #52]	; (800ab00 <clear_lock+0x44>)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	011b      	lsls	r3, r3, #4
 800aad0:	4413      	add	r3, r2
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d105      	bne.n	800aae6 <clear_lock+0x2a>
 800aada:	4a09      	ldr	r2, [pc, #36]	; (800ab00 <clear_lock+0x44>)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	011b      	lsls	r3, r3, #4
 800aae0:	4413      	add	r3, r2
 800aae2:	2200      	movs	r2, #0
 800aae4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	3301      	adds	r3, #1
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d9eb      	bls.n	800aaca <clear_lock+0xe>
	}
}
 800aaf2:	bf00      	nop
 800aaf4:	bf00      	nop
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr
 800ab00:	200004d0 	.word	0x200004d0

0800ab04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	78db      	ldrb	r3, [r3, #3]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d034      	beq.n	800ab82 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	7858      	ldrb	r0, [r3, #1]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab28:	2301      	movs	r3, #1
 800ab2a:	697a      	ldr	r2, [r7, #20]
 800ab2c:	f7ff fd40 	bl	800a5b0 <disk_write>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d002      	beq.n	800ab3c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	73fb      	strb	r3, [r7, #15]
 800ab3a:	e022      	b.n	800ab82 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	1ad2      	subs	r2, r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d217      	bcs.n	800ab82 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	789b      	ldrb	r3, [r3, #2]
 800ab56:	613b      	str	r3, [r7, #16]
 800ab58:	e010      	b.n	800ab7c <sync_window+0x78>
					wsect += fs->fsize;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	699b      	ldr	r3, [r3, #24]
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	4413      	add	r3, r2
 800ab62:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	7858      	ldrb	r0, [r3, #1]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab6e:	2301      	movs	r3, #1
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	f7ff fd1d 	bl	800a5b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	613b      	str	r3, [r7, #16]
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d8eb      	bhi.n	800ab5a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d01b      	beq.n	800abdc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7ff ffad 	bl	800ab04 <sync_window>
 800abaa:	4603      	mov	r3, r0
 800abac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d113      	bne.n	800abdc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	7858      	ldrb	r0, [r3, #1]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abbe:	2301      	movs	r3, #1
 800abc0:	683a      	ldr	r2, [r7, #0]
 800abc2:	f7ff fcd5 	bl	800a570 <disk_read>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d004      	beq.n	800abd6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800abcc:	f04f 33ff 	mov.w	r3, #4294967295
 800abd0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
	...

0800abe8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7ff ff87 	bl	800ab04 <sync_window>
 800abf6:	4603      	mov	r3, r0
 800abf8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d158      	bne.n	800acb2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d148      	bne.n	800ac9a <sync_fs+0xb2>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	791b      	ldrb	r3, [r3, #4]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d144      	bne.n	800ac9a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3330      	adds	r3, #48	; 0x30
 800ac14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac18:	2100      	movs	r1, #0
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff fda9 	bl	800a772 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3330      	adds	r3, #48	; 0x30
 800ac24:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac28:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff fd38 	bl	800a6a2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	3330      	adds	r3, #48	; 0x30
 800ac36:	4921      	ldr	r1, [pc, #132]	; (800acbc <sync_fs+0xd4>)
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7ff fd4d 	bl	800a6d8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	3330      	adds	r3, #48	; 0x30
 800ac42:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ac46:	491e      	ldr	r1, [pc, #120]	; (800acc0 <sync_fs+0xd8>)
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7ff fd45 	bl	800a6d8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	3330      	adds	r3, #48	; 0x30
 800ac52:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	f7ff fd3b 	bl	800a6d8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3330      	adds	r3, #48	; 0x30
 800ac66:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4610      	mov	r0, r2
 800ac72:	f7ff fd31 	bl	800a6d8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	69db      	ldr	r3, [r3, #28]
 800ac7a:	1c5a      	adds	r2, r3, #1
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	7858      	ldrb	r0, [r3, #1]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac8e:	2301      	movs	r3, #1
 800ac90:	f7ff fc8e 	bl	800a5b0 <disk_write>
			fs->fsi_flag = 0;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	785b      	ldrb	r3, [r3, #1]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	2100      	movs	r1, #0
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff fca4 	bl	800a5f0 <disk_ioctl>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d001      	beq.n	800acb2 <sync_fs+0xca>
 800acae:	2301      	movs	r3, #1
 800acb0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	41615252 	.word	0x41615252
 800acc0:	61417272 	.word	0x61417272

0800acc4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	3b02      	subs	r3, #2
 800acd2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	3b02      	subs	r3, #2
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d301      	bcc.n	800ace4 <clust2sect+0x20>
 800ace0:	2300      	movs	r3, #0
 800ace2:	e008      	b.n	800acf6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	895b      	ldrh	r3, [r3, #10]
 800ace8:	461a      	mov	r2, r3
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	fb03 f202 	mul.w	r2, r3, r2
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf4:	4413      	add	r3, r2
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	370c      	adds	r7, #12
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b086      	sub	sp, #24
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d904      	bls.n	800ad22 <get_fat+0x20>
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d302      	bcc.n	800ad28 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ad22:	2301      	movs	r3, #1
 800ad24:	617b      	str	r3, [r7, #20]
 800ad26:	e08f      	b.n	800ae48 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ad28:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d062      	beq.n	800adfc <get_fat+0xfa>
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	dc7c      	bgt.n	800ae34 <get_fat+0x132>
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d002      	beq.n	800ad44 <get_fat+0x42>
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d042      	beq.n	800adc8 <get_fat+0xc6>
 800ad42:	e077      	b.n	800ae34 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	085b      	lsrs	r3, r3, #1
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	4413      	add	r3, r2
 800ad50:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	6a1a      	ldr	r2, [r3, #32]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	0a5b      	lsrs	r3, r3, #9
 800ad5a:	4413      	add	r3, r2
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	6938      	ldr	r0, [r7, #16]
 800ad60:	f7ff ff14 	bl	800ab8c <move_window>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d167      	bne.n	800ae3a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	1c5a      	adds	r2, r3, #1
 800ad6e:	60fa      	str	r2, [r7, #12]
 800ad70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	4413      	add	r3, r2
 800ad78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad7c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	6a1a      	ldr	r2, [r3, #32]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	0a5b      	lsrs	r3, r3, #9
 800ad86:	4413      	add	r3, r2
 800ad88:	4619      	mov	r1, r3
 800ad8a:	6938      	ldr	r0, [r7, #16]
 800ad8c:	f7ff fefe 	bl	800ab8c <move_window>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d153      	bne.n	800ae3e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9c:	693a      	ldr	r2, [r7, #16]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ada4:	021b      	lsls	r3, r3, #8
 800ada6:	461a      	mov	r2, r3
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	4313      	orrs	r3, r2
 800adac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	f003 0301 	and.w	r3, r3, #1
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <get_fat+0xbc>
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	091b      	lsrs	r3, r3, #4
 800adbc:	e002      	b.n	800adc4 <get_fat+0xc2>
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adc4:	617b      	str	r3, [r7, #20]
			break;
 800adc6:	e03f      	b.n	800ae48 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	6a1a      	ldr	r2, [r3, #32]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	0a1b      	lsrs	r3, r3, #8
 800add0:	4413      	add	r3, r2
 800add2:	4619      	mov	r1, r3
 800add4:	6938      	ldr	r0, [r7, #16]
 800add6:	f7ff fed9 	bl	800ab8c <move_window>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d130      	bne.n	800ae42 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800adee:	4413      	add	r3, r2
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7ff fc1b 	bl	800a62c <ld_word>
 800adf6:	4603      	mov	r3, r0
 800adf8:	617b      	str	r3, [r7, #20]
			break;
 800adfa:	e025      	b.n	800ae48 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	6a1a      	ldr	r2, [r3, #32]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	09db      	lsrs	r3, r3, #7
 800ae04:	4413      	add	r3, r2
 800ae06:	4619      	mov	r1, r3
 800ae08:	6938      	ldr	r0, [r7, #16]
 800ae0a:	f7ff febf 	bl	800ab8c <move_window>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d118      	bne.n	800ae46 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ae22:	4413      	add	r3, r2
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7ff fc19 	bl	800a65c <ld_dword>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ae30:	617b      	str	r3, [r7, #20]
			break;
 800ae32:	e009      	b.n	800ae48 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ae34:	2301      	movs	r3, #1
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	e006      	b.n	800ae48 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae3a:	bf00      	nop
 800ae3c:	e004      	b.n	800ae48 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae3e:	bf00      	nop
 800ae40:	e002      	b.n	800ae48 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ae42:	bf00      	nop
 800ae44:	e000      	b.n	800ae48 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ae46:	bf00      	nop
		}
	}

	return val;
 800ae48:	697b      	ldr	r3, [r7, #20]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3718      	adds	r7, #24
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ae52:	b590      	push	{r4, r7, lr}
 800ae54:	b089      	sub	sp, #36	; 0x24
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	60f8      	str	r0, [r7, #12]
 800ae5a:	60b9      	str	r1, [r7, #8]
 800ae5c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ae5e:	2302      	movs	r3, #2
 800ae60:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	f240 80d2 	bls.w	800b00e <put_fat+0x1bc>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	695b      	ldr	r3, [r3, #20]
 800ae6e:	68ba      	ldr	r2, [r7, #8]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	f080 80cc 	bcs.w	800b00e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	f000 8096 	beq.w	800afac <put_fat+0x15a>
 800ae80:	2b03      	cmp	r3, #3
 800ae82:	f300 80cd 	bgt.w	800b020 <put_fat+0x1ce>
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d002      	beq.n	800ae90 <put_fat+0x3e>
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d06e      	beq.n	800af6c <put_fat+0x11a>
 800ae8e:	e0c7      	b.n	800b020 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	61bb      	str	r3, [r7, #24]
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	085b      	lsrs	r3, r3, #1
 800ae98:	69ba      	ldr	r2, [r7, #24]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6a1a      	ldr	r2, [r3, #32]
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	0a5b      	lsrs	r3, r3, #9
 800aea6:	4413      	add	r3, r2
 800aea8:	4619      	mov	r1, r3
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7ff fe6e 	bl	800ab8c <move_window>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aeb4:	7ffb      	ldrb	r3, [r7, #31]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f040 80ab 	bne.w	800b012 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	1c59      	adds	r1, r3, #1
 800aec6:	61b9      	str	r1, [r7, #24]
 800aec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aecc:	4413      	add	r3, r2
 800aece:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	f003 0301 	and.w	r3, r3, #1
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00d      	beq.n	800aef6 <put_fat+0xa4>
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	b25b      	sxtb	r3, r3
 800aee0:	f003 030f 	and.w	r3, r3, #15
 800aee4:	b25a      	sxtb	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	011b      	lsls	r3, r3, #4
 800aeec:	b25b      	sxtb	r3, r3
 800aeee:	4313      	orrs	r3, r2
 800aef0:	b25b      	sxtb	r3, r3
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	e001      	b.n	800aefa <put_fat+0xa8>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2201      	movs	r2, #1
 800af02:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6a1a      	ldr	r2, [r3, #32]
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	0a5b      	lsrs	r3, r3, #9
 800af0c:	4413      	add	r3, r2
 800af0e:	4619      	mov	r1, r3
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f7ff fe3b 	bl	800ab8c <move_window>
 800af16:	4603      	mov	r3, r0
 800af18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af1a:	7ffb      	ldrb	r3, [r7, #31]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d17a      	bne.n	800b016 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af2c:	4413      	add	r3, r2
 800af2e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	2b00      	cmp	r3, #0
 800af38:	d003      	beq.n	800af42 <put_fat+0xf0>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	091b      	lsrs	r3, r3, #4
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	e00e      	b.n	800af60 <put_fat+0x10e>
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	b25b      	sxtb	r3, r3
 800af48:	f023 030f 	bic.w	r3, r3, #15
 800af4c:	b25a      	sxtb	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	0a1b      	lsrs	r3, r3, #8
 800af52:	b25b      	sxtb	r3, r3
 800af54:	f003 030f 	and.w	r3, r3, #15
 800af58:	b25b      	sxtb	r3, r3
 800af5a:	4313      	orrs	r3, r2
 800af5c:	b25b      	sxtb	r3, r3
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2201      	movs	r2, #1
 800af68:	70da      	strb	r2, [r3, #3]
			break;
 800af6a:	e059      	b.n	800b020 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6a1a      	ldr	r2, [r3, #32]
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	0a1b      	lsrs	r3, r3, #8
 800af74:	4413      	add	r3, r2
 800af76:	4619      	mov	r1, r3
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f7ff fe07 	bl	800ab8c <move_window>
 800af7e:	4603      	mov	r3, r0
 800af80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af82:	7ffb      	ldrb	r3, [r7, #31]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d148      	bne.n	800b01a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	005b      	lsls	r3, r3, #1
 800af92:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800af96:	4413      	add	r3, r2
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	b292      	uxth	r2, r2
 800af9c:	4611      	mov	r1, r2
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7ff fb7f 	bl	800a6a2 <st_word>
			fs->wflag = 1;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2201      	movs	r2, #1
 800afa8:	70da      	strb	r2, [r3, #3]
			break;
 800afaa:	e039      	b.n	800b020 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6a1a      	ldr	r2, [r3, #32]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	09db      	lsrs	r3, r3, #7
 800afb4:	4413      	add	r3, r2
 800afb6:	4619      	mov	r1, r3
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f7ff fde7 	bl	800ab8c <move_window>
 800afbe:	4603      	mov	r3, r0
 800afc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800afc2:	7ffb      	ldrb	r3, [r7, #31]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d12a      	bne.n	800b01e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800afdc:	4413      	add	r3, r2
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff fb3c 	bl	800a65c <ld_dword>
 800afe4:	4603      	mov	r3, r0
 800afe6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800afea:	4323      	orrs	r3, r4
 800afec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800affc:	4413      	add	r3, r2
 800affe:	6879      	ldr	r1, [r7, #4]
 800b000:	4618      	mov	r0, r3
 800b002:	f7ff fb69 	bl	800a6d8 <st_dword>
			fs->wflag = 1;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2201      	movs	r2, #1
 800b00a:	70da      	strb	r2, [r3, #3]
			break;
 800b00c:	e008      	b.n	800b020 <put_fat+0x1ce>
		}
	}
 800b00e:	bf00      	nop
 800b010:	e006      	b.n	800b020 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b012:	bf00      	nop
 800b014:	e004      	b.n	800b020 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b016:	bf00      	nop
 800b018:	e002      	b.n	800b020 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b01a:	bf00      	nop
 800b01c:	e000      	b.n	800b020 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b01e:	bf00      	nop
	return res;
 800b020:	7ffb      	ldrb	r3, [r7, #31]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3724      	adds	r7, #36	; 0x24
 800b026:	46bd      	mov	sp, r7
 800b028:	bd90      	pop	{r4, r7, pc}

0800b02a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b088      	sub	sp, #32
 800b02e:	af00      	add	r7, sp, #0
 800b030:	60f8      	str	r0, [r7, #12]
 800b032:	60b9      	str	r1, [r7, #8]
 800b034:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	2b01      	cmp	r3, #1
 800b044:	d904      	bls.n	800b050 <remove_chain+0x26>
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	695b      	ldr	r3, [r3, #20]
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d301      	bcc.n	800b054 <remove_chain+0x2a>
 800b050:	2302      	movs	r3, #2
 800b052:	e04b      	b.n	800b0ec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00c      	beq.n	800b074 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b05a:	f04f 32ff 	mov.w	r2, #4294967295
 800b05e:	6879      	ldr	r1, [r7, #4]
 800b060:	69b8      	ldr	r0, [r7, #24]
 800b062:	f7ff fef6 	bl	800ae52 <put_fat>
 800b066:	4603      	mov	r3, r0
 800b068:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b06a:	7ffb      	ldrb	r3, [r7, #31]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <remove_chain+0x4a>
 800b070:	7ffb      	ldrb	r3, [r7, #31]
 800b072:	e03b      	b.n	800b0ec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b074:	68b9      	ldr	r1, [r7, #8]
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f7ff fe43 	bl	800ad02 <get_fat>
 800b07c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d031      	beq.n	800b0e8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d101      	bne.n	800b08e <remove_chain+0x64>
 800b08a:	2302      	movs	r3, #2
 800b08c:	e02e      	b.n	800b0ec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b094:	d101      	bne.n	800b09a <remove_chain+0x70>
 800b096:	2301      	movs	r3, #1
 800b098:	e028      	b.n	800b0ec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b09a:	2200      	movs	r2, #0
 800b09c:	68b9      	ldr	r1, [r7, #8]
 800b09e:	69b8      	ldr	r0, [r7, #24]
 800b0a0:	f7ff fed7 	bl	800ae52 <put_fat>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b0a8:	7ffb      	ldrb	r3, [r7, #31]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <remove_chain+0x88>
 800b0ae:	7ffb      	ldrb	r3, [r7, #31]
 800b0b0:	e01c      	b.n	800b0ec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	691a      	ldr	r2, [r3, #16]
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	695b      	ldr	r3, [r3, #20]
 800b0ba:	3b02      	subs	r3, #2
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d20b      	bcs.n	800b0d8 <remove_chain+0xae>
			fs->free_clst++;
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	1c5a      	adds	r2, r3, #1
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	791b      	ldrb	r3, [r3, #4]
 800b0ce:	f043 0301 	orr.w	r3, r3, #1
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d3c6      	bcc.n	800b074 <remove_chain+0x4a>
 800b0e6:	e000      	b.n	800b0ea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b0e8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3720      	adds	r7, #32
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b088      	sub	sp, #32
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10d      	bne.n	800b126 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d004      	beq.n	800b120 <create_chain+0x2c>
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	69ba      	ldr	r2, [r7, #24]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d31b      	bcc.n	800b158 <create_chain+0x64>
 800b120:	2301      	movs	r3, #1
 800b122:	61bb      	str	r3, [r7, #24]
 800b124:	e018      	b.n	800b158 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f7ff fdea 	bl	800ad02 <get_fat>
 800b12e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d801      	bhi.n	800b13a <create_chain+0x46>
 800b136:	2301      	movs	r3, #1
 800b138:	e070      	b.n	800b21c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b140:	d101      	bne.n	800b146 <create_chain+0x52>
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	e06a      	b.n	800b21c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	695b      	ldr	r3, [r3, #20]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d201      	bcs.n	800b154 <create_chain+0x60>
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	e063      	b.n	800b21c <create_chain+0x128>
		scl = clst;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	3301      	adds	r3, #1
 800b160:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	69fa      	ldr	r2, [r7, #28]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d307      	bcc.n	800b17c <create_chain+0x88>
				ncl = 2;
 800b16c:	2302      	movs	r3, #2
 800b16e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b170:	69fa      	ldr	r2, [r7, #28]
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	429a      	cmp	r2, r3
 800b176:	d901      	bls.n	800b17c <create_chain+0x88>
 800b178:	2300      	movs	r3, #0
 800b17a:	e04f      	b.n	800b21c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b17c:	69f9      	ldr	r1, [r7, #28]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7ff fdbf 	bl	800ad02 <get_fat>
 800b184:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00e      	beq.n	800b1aa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d003      	beq.n	800b19a <create_chain+0xa6>
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b198:	d101      	bne.n	800b19e <create_chain+0xaa>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	e03e      	b.n	800b21c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b19e:	69fa      	ldr	r2, [r7, #28]
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d1da      	bne.n	800b15c <create_chain+0x68>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	e038      	b.n	800b21c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b1aa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b0:	69f9      	ldr	r1, [r7, #28]
 800b1b2:	6938      	ldr	r0, [r7, #16]
 800b1b4:	f7ff fe4d 	bl	800ae52 <put_fat>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b1bc:	7dfb      	ldrb	r3, [r7, #23]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d109      	bne.n	800b1d6 <create_chain+0xe2>
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d006      	beq.n	800b1d6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b1c8:	69fa      	ldr	r2, [r7, #28]
 800b1ca:	6839      	ldr	r1, [r7, #0]
 800b1cc:	6938      	ldr	r0, [r7, #16]
 800b1ce:	f7ff fe40 	bl	800ae52 <put_fat>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b1d6:	7dfb      	ldrb	r3, [r7, #23]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d116      	bne.n	800b20a <create_chain+0x116>
		fs->last_clst = ncl;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	69fa      	ldr	r2, [r7, #28]
 800b1e0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	691a      	ldr	r2, [r3, #16]
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	695b      	ldr	r3, [r3, #20]
 800b1ea:	3b02      	subs	r3, #2
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d804      	bhi.n	800b1fa <create_chain+0x106>
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	1e5a      	subs	r2, r3, #1
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	791b      	ldrb	r3, [r3, #4]
 800b1fe:	f043 0301 	orr.w	r3, r3, #1
 800b202:	b2da      	uxtb	r2, r3
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	711a      	strb	r2, [r3, #4]
 800b208:	e007      	b.n	800b21a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d102      	bne.n	800b216 <create_chain+0x122>
 800b210:	f04f 33ff 	mov.w	r3, #4294967295
 800b214:	e000      	b.n	800b218 <create_chain+0x124>
 800b216:	2301      	movs	r3, #1
 800b218:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b21a:	69fb      	ldr	r3, [r7, #28]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3720      	adds	r7, #32
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b238:	3304      	adds	r3, #4
 800b23a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	0a5b      	lsrs	r3, r3, #9
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	8952      	ldrh	r2, [r2, #10]
 800b244:	fbb3 f3f2 	udiv	r3, r3, r2
 800b248:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	1d1a      	adds	r2, r3, #4
 800b24e:	613a      	str	r2, [r7, #16]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <clmt_clust+0x3a>
 800b25a:	2300      	movs	r3, #0
 800b25c:	e010      	b.n	800b280 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b25e:	697a      	ldr	r2, [r7, #20]
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	429a      	cmp	r2, r3
 800b264:	d307      	bcc.n	800b276 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	3304      	adds	r3, #4
 800b272:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b274:	e7e9      	b.n	800b24a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b276:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	4413      	add	r3, r2
}
 800b280:	4618      	mov	r0, r3
 800b282:	371c      	adds	r7, #28
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2a2:	d204      	bcs.n	800b2ae <dir_sdi+0x22>
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	f003 031f 	and.w	r3, r3, #31
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	e063      	b.n	800b37a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d106      	bne.n	800b2d2 <dir_sdi+0x46>
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d902      	bls.n	800b2d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10c      	bne.n	800b2f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	095b      	lsrs	r3, r3, #5
 800b2dc:	693a      	ldr	r2, [r7, #16]
 800b2de:	8912      	ldrh	r2, [r2, #8]
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d301      	bcc.n	800b2e8 <dir_sdi+0x5c>
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	e048      	b.n	800b37a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	61da      	str	r2, [r3, #28]
 800b2f0:	e029      	b.n	800b346 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	895b      	ldrh	r3, [r3, #10]
 800b2f6:	025b      	lsls	r3, r3, #9
 800b2f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b2fa:	e019      	b.n	800b330 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6979      	ldr	r1, [r7, #20]
 800b300:	4618      	mov	r0, r3
 800b302:	f7ff fcfe 	bl	800ad02 <get_fat>
 800b306:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b30e:	d101      	bne.n	800b314 <dir_sdi+0x88>
 800b310:	2301      	movs	r3, #1
 800b312:	e032      	b.n	800b37a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d904      	bls.n	800b324 <dir_sdi+0x98>
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	695b      	ldr	r3, [r3, #20]
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	429a      	cmp	r2, r3
 800b322:	d301      	bcc.n	800b328 <dir_sdi+0x9c>
 800b324:	2302      	movs	r3, #2
 800b326:	e028      	b.n	800b37a <dir_sdi+0xee>
			ofs -= csz;
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	429a      	cmp	r2, r3
 800b336:	d2e1      	bcs.n	800b2fc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b338:	6979      	ldr	r1, [r7, #20]
 800b33a:	6938      	ldr	r0, [r7, #16]
 800b33c:	f7ff fcc2 	bl	800acc4 <clust2sect>
 800b340:	4602      	mov	r2, r0
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	697a      	ldr	r2, [r7, #20]
 800b34a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	69db      	ldr	r3, [r3, #28]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <dir_sdi+0xcc>
 800b354:	2302      	movs	r3, #2
 800b356:	e010      	b.n	800b37a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	69da      	ldr	r2, [r3, #28]
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	0a5b      	lsrs	r3, r3, #9
 800b360:	441a      	add	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b372:	441a      	add	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3718      	adds	r7, #24
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b086      	sub	sp, #24
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
 800b38a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	3320      	adds	r3, #32
 800b398:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	69db      	ldr	r3, [r3, #28]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <dir_next+0x28>
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3a8:	d301      	bcc.n	800b3ae <dir_next+0x2c>
 800b3aa:	2304      	movs	r3, #4
 800b3ac:	e0aa      	b.n	800b504 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f040 8098 	bne.w	800b4ea <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	69db      	ldr	r3, [r3, #28]
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10b      	bne.n	800b3e4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	095b      	lsrs	r3, r3, #5
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	8912      	ldrh	r2, [r2, #8]
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	f0c0 8088 	bcc.w	800b4ea <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	61da      	str	r2, [r3, #28]
 800b3e0:	2304      	movs	r3, #4
 800b3e2:	e08f      	b.n	800b504 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	0a5b      	lsrs	r3, r3, #9
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	8952      	ldrh	r2, [r2, #10]
 800b3ec:	3a01      	subs	r2, #1
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d17a      	bne.n	800b4ea <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	f7ff fc80 	bl	800ad02 <get_fat>
 800b402:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d801      	bhi.n	800b40e <dir_next+0x8c>
 800b40a:	2302      	movs	r3, #2
 800b40c:	e07a      	b.n	800b504 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b414:	d101      	bne.n	800b41a <dir_next+0x98>
 800b416:	2301      	movs	r3, #1
 800b418:	e074      	b.n	800b504 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	697a      	ldr	r2, [r7, #20]
 800b420:	429a      	cmp	r2, r3
 800b422:	d358      	bcc.n	800b4d6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d104      	bne.n	800b434 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	61da      	str	r2, [r3, #28]
 800b430:	2304      	movs	r3, #4
 800b432:	e067      	b.n	800b504 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	4619      	mov	r1, r3
 800b43c:	4610      	mov	r0, r2
 800b43e:	f7ff fe59 	bl	800b0f4 <create_chain>
 800b442:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <dir_next+0xcc>
 800b44a:	2307      	movs	r3, #7
 800b44c:	e05a      	b.n	800b504 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d101      	bne.n	800b458 <dir_next+0xd6>
 800b454:	2302      	movs	r3, #2
 800b456:	e055      	b.n	800b504 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b45e:	d101      	bne.n	800b464 <dir_next+0xe2>
 800b460:	2301      	movs	r3, #1
 800b462:	e04f      	b.n	800b504 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f7ff fb4d 	bl	800ab04 <sync_window>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <dir_next+0xf2>
 800b470:	2301      	movs	r3, #1
 800b472:	e047      	b.n	800b504 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3330      	adds	r3, #48	; 0x30
 800b478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b47c:	2100      	movs	r1, #0
 800b47e:	4618      	mov	r0, r3
 800b480:	f7ff f977 	bl	800a772 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b484:	2300      	movs	r3, #0
 800b486:	613b      	str	r3, [r7, #16]
 800b488:	6979      	ldr	r1, [r7, #20]
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f7ff fc1a 	bl	800acc4 <clust2sect>
 800b490:	4602      	mov	r2, r0
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	62da      	str	r2, [r3, #44]	; 0x2c
 800b496:	e012      	b.n	800b4be <dir_next+0x13c>
						fs->wflag = 1;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2201      	movs	r2, #1
 800b49c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f7ff fb30 	bl	800ab04 <sync_window>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d001      	beq.n	800b4ae <dir_next+0x12c>
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e02a      	b.n	800b504 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	613b      	str	r3, [r7, #16]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b8:	1c5a      	adds	r2, r3, #1
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	62da      	str	r2, [r3, #44]	; 0x2c
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	895b      	ldrh	r3, [r3, #10]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d3e6      	bcc.n	800b498 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	1ad2      	subs	r2, r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b4dc:	6979      	ldr	r1, [r7, #20]
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f7ff fbf0 	bl	800acc4 <clust2sect>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fc:	441a      	add	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b086      	sub	sp, #24
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b51c:	2100      	movs	r1, #0
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f7ff feb4 	bl	800b28c <dir_sdi>
 800b524:	4603      	mov	r3, r0
 800b526:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b528:	7dfb      	ldrb	r3, [r7, #23]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d12b      	bne.n	800b586 <dir_alloc+0x7a>
		n = 0;
 800b52e:	2300      	movs	r3, #0
 800b530:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	4619      	mov	r1, r3
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f7ff fb27 	bl	800ab8c <move_window>
 800b53e:	4603      	mov	r3, r0
 800b540:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d11d      	bne.n	800b584 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a1b      	ldr	r3, [r3, #32]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	2be5      	cmp	r3, #229	; 0xe5
 800b550:	d004      	beq.n	800b55c <dir_alloc+0x50>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d107      	bne.n	800b56c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	3301      	adds	r3, #1
 800b560:	613b      	str	r3, [r7, #16]
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	429a      	cmp	r2, r3
 800b568:	d102      	bne.n	800b570 <dir_alloc+0x64>
 800b56a:	e00c      	b.n	800b586 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b56c:	2300      	movs	r3, #0
 800b56e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b570:	2101      	movs	r1, #1
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f7ff ff05 	bl	800b382 <dir_next>
 800b578:	4603      	mov	r3, r0
 800b57a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b57c:	7dfb      	ldrb	r3, [r7, #23]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d0d7      	beq.n	800b532 <dir_alloc+0x26>
 800b582:	e000      	b.n	800b586 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b584:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b586:	7dfb      	ldrb	r3, [r7, #23]
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d101      	bne.n	800b590 <dir_alloc+0x84>
 800b58c:	2307      	movs	r3, #7
 800b58e:	75fb      	strb	r3, [r7, #23]
	return res;
 800b590:	7dfb      	ldrb	r3, [r7, #23]
}
 800b592:	4618      	mov	r0, r3
 800b594:	3718      	adds	r7, #24
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	331a      	adds	r3, #26
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7ff f83f 	bl	800a62c <ld_word>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	2b03      	cmp	r3, #3
 800b5b8:	d109      	bne.n	800b5ce <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	3314      	adds	r3, #20
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7ff f834 	bl	800a62c <ld_word>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	041b      	lsls	r3, r3, #16
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	331a      	adds	r3, #26
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	b292      	uxth	r2, r2
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7ff f857 	bl	800a6a2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	2b03      	cmp	r3, #3
 800b5fa:	d109      	bne.n	800b610 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	f103 0214 	add.w	r2, r3, #20
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	0c1b      	lsrs	r3, r3, #16
 800b606:	b29b      	uxth	r3, r3
 800b608:	4619      	mov	r1, r3
 800b60a:	4610      	mov	r0, r2
 800b60c:	f7ff f849 	bl	800a6a2 <st_word>
	}
}
 800b610:	bf00      	nop
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b622:	2304      	movs	r3, #4
 800b624:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b62c:	e03c      	b.n	800b6a8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	4619      	mov	r1, r3
 800b634:	6938      	ldr	r0, [r7, #16]
 800b636:	f7ff faa9 	bl	800ab8c <move_window>
 800b63a:	4603      	mov	r3, r0
 800b63c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b63e:	7dfb      	ldrb	r3, [r7, #23]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d136      	bne.n	800b6b2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6a1b      	ldr	r3, [r3, #32]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d102      	bne.n	800b658 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b652:	2304      	movs	r3, #4
 800b654:	75fb      	strb	r3, [r7, #23]
 800b656:	e031      	b.n	800b6bc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a1b      	ldr	r3, [r3, #32]
 800b65c:	330b      	adds	r3, #11
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b664:	73bb      	strb	r3, [r7, #14]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	7bba      	ldrb	r2, [r7, #14]
 800b66a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
 800b66e:	2be5      	cmp	r3, #229	; 0xe5
 800b670:	d011      	beq.n	800b696 <dir_read+0x7e>
 800b672:	7bfb      	ldrb	r3, [r7, #15]
 800b674:	2b2e      	cmp	r3, #46	; 0x2e
 800b676:	d00e      	beq.n	800b696 <dir_read+0x7e>
 800b678:	7bbb      	ldrb	r3, [r7, #14]
 800b67a:	2b0f      	cmp	r3, #15
 800b67c:	d00b      	beq.n	800b696 <dir_read+0x7e>
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
 800b680:	f023 0320 	bic.w	r3, r3, #32
 800b684:	2b08      	cmp	r3, #8
 800b686:	bf0c      	ite	eq
 800b688:	2301      	moveq	r3, #1
 800b68a:	2300      	movne	r3, #0
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	461a      	mov	r2, r3
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	4293      	cmp	r3, r2
 800b694:	d00f      	beq.n	800b6b6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b696:	2100      	movs	r1, #0
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7ff fe72 	bl	800b382 <dir_next>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b6a2:	7dfb      	ldrb	r3, [r7, #23]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d108      	bne.n	800b6ba <dir_read+0xa2>
	while (dp->sect) {
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	69db      	ldr	r3, [r3, #28]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1be      	bne.n	800b62e <dir_read+0x16>
 800b6b0:	e004      	b.n	800b6bc <dir_read+0xa4>
		if (res != FR_OK) break;
 800b6b2:	bf00      	nop
 800b6b4:	e002      	b.n	800b6bc <dir_read+0xa4>
				break;
 800b6b6:	bf00      	nop
 800b6b8:	e000      	b.n	800b6bc <dir_read+0xa4>
		if (res != FR_OK) break;
 800b6ba:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d002      	beq.n	800b6c8 <dir_read+0xb0>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	61da      	str	r2, [r3, #28]
	return res;
 800b6c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3718      	adds	r7, #24
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b086      	sub	sp, #24
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff fdd2 	bl	800b28c <dir_sdi>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b6ec:	7dfb      	ldrb	r3, [r7, #23]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <dir_find+0x24>
 800b6f2:	7dfb      	ldrb	r3, [r7, #23]
 800b6f4:	e03e      	b.n	800b774 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	69db      	ldr	r3, [r3, #28]
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6938      	ldr	r0, [r7, #16]
 800b6fe:	f7ff fa45 	bl	800ab8c <move_window>
 800b702:	4603      	mov	r3, r0
 800b704:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d12f      	bne.n	800b76c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a1b      	ldr	r3, [r3, #32]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b714:	7bfb      	ldrb	r3, [r7, #15]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d102      	bne.n	800b720 <dir_find+0x4e>
 800b71a:	2304      	movs	r3, #4
 800b71c:	75fb      	strb	r3, [r7, #23]
 800b71e:	e028      	b.n	800b772 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a1b      	ldr	r3, [r3, #32]
 800b724:	330b      	adds	r3, #11
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b72c:	b2da      	uxtb	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	330b      	adds	r3, #11
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	f003 0308 	and.w	r3, r3, #8
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10a      	bne.n	800b758 <dir_find+0x86>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a18      	ldr	r0, [r3, #32]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	3324      	adds	r3, #36	; 0x24
 800b74a:	220b      	movs	r2, #11
 800b74c:	4619      	mov	r1, r3
 800b74e:	f7ff f82b 	bl	800a7a8 <mem_cmp>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00b      	beq.n	800b770 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b758:	2100      	movs	r1, #0
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff fe11 	bl	800b382 <dir_next>
 800b760:	4603      	mov	r3, r0
 800b762:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b764:	7dfb      	ldrb	r3, [r7, #23]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d0c5      	beq.n	800b6f6 <dir_find+0x24>
 800b76a:	e002      	b.n	800b772 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b76c:	bf00      	nop
 800b76e:	e000      	b.n	800b772 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b770:	bf00      	nop

	return res;
 800b772:	7dfb      	ldrb	r3, [r7, #23]
}
 800b774:	4618      	mov	r0, r3
 800b776:	3718      	adds	r7, #24
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b78a:	2101      	movs	r1, #1
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7ff febd 	bl	800b50c <dir_alloc>
 800b792:	4603      	mov	r3, r0
 800b794:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b796:	7bfb      	ldrb	r3, [r7, #15]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d11c      	bne.n	800b7d6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	69db      	ldr	r3, [r3, #28]
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	68b8      	ldr	r0, [r7, #8]
 800b7a4:	f7ff f9f2 	bl	800ab8c <move_window>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b7ac:	7bfb      	ldrb	r3, [r7, #15]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d111      	bne.n	800b7d6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6a1b      	ldr	r3, [r3, #32]
 800b7b6:	2220      	movs	r2, #32
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe ffd9 	bl	800a772 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6a18      	ldr	r0, [r3, #32]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	3324      	adds	r3, #36	; 0x24
 800b7c8:	220b      	movs	r2, #11
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	f7fe ffb0 	bl	800a730 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	69db      	ldr	r3, [r3, #28]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d04e      	beq.n	800b896 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	613b      	str	r3, [r7, #16]
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800b800:	e021      	b.n	800b846 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a1a      	ldr	r2, [r3, #32]
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	1c59      	adds	r1, r3, #1
 800b80a:	6179      	str	r1, [r7, #20]
 800b80c:	4413      	add	r3, r2
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b812:	7bfb      	ldrb	r3, [r7, #15]
 800b814:	2b20      	cmp	r3, #32
 800b816:	d100      	bne.n	800b81a <get_fileinfo+0x3a>
 800b818:	e015      	b.n	800b846 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b81a:	7bfb      	ldrb	r3, [r7, #15]
 800b81c:	2b05      	cmp	r3, #5
 800b81e:	d101      	bne.n	800b824 <get_fileinfo+0x44>
 800b820:	23e5      	movs	r3, #229	; 0xe5
 800b822:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	2b09      	cmp	r3, #9
 800b828:	d106      	bne.n	800b838 <get_fileinfo+0x58>
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	1c5a      	adds	r2, r3, #1
 800b82e:	613a      	str	r2, [r7, #16]
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	4413      	add	r3, r2
 800b834:	222e      	movs	r2, #46	; 0x2e
 800b836:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	1c5a      	adds	r2, r3, #1
 800b83c:	613a      	str	r2, [r7, #16]
 800b83e:	683a      	ldr	r2, [r7, #0]
 800b840:	4413      	add	r3, r2
 800b842:	7bfa      	ldrb	r2, [r7, #15]
 800b844:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	2b0a      	cmp	r3, #10
 800b84a:	d9da      	bls.n	800b802 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	4413      	add	r3, r2
 800b852:	3309      	adds	r3, #9
 800b854:	2200      	movs	r2, #0
 800b856:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a1b      	ldr	r3, [r3, #32]
 800b85c:	7ada      	ldrb	r2, [r3, #11]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	331c      	adds	r3, #28
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fe fef7 	bl	800a65c <ld_dword>
 800b86e:	4602      	mov	r2, r0
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a1b      	ldr	r3, [r3, #32]
 800b878:	3316      	adds	r3, #22
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fe feee 	bl	800a65c <ld_dword>
 800b880:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	b29a      	uxth	r2, r3
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	80da      	strh	r2, [r3, #6]
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	0c1b      	lsrs	r3, r3, #16
 800b88e:	b29a      	uxth	r2, r3
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	809a      	strh	r2, [r3, #4]
 800b894:	e000      	b.n	800b898 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b896:	bf00      	nop
}
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
	...

0800b8a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b088      	sub	sp, #32
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	60fb      	str	r3, [r7, #12]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3324      	adds	r3, #36	; 0x24
 800b8b4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b8b6:	220b      	movs	r2, #11
 800b8b8:	2120      	movs	r1, #32
 800b8ba:	68b8      	ldr	r0, [r7, #8]
 800b8bc:	f7fe ff59 	bl	800a772 <mem_set>
	si = i = 0; ni = 8;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	613b      	str	r3, [r7, #16]
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	61fb      	str	r3, [r7, #28]
 800b8c8:	2308      	movs	r3, #8
 800b8ca:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	1c5a      	adds	r2, r3, #1
 800b8d0:	61fa      	str	r2, [r7, #28]
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b8da:	7efb      	ldrb	r3, [r7, #27]
 800b8dc:	2b20      	cmp	r3, #32
 800b8de:	d94e      	bls.n	800b97e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b8e0:	7efb      	ldrb	r3, [r7, #27]
 800b8e2:	2b2f      	cmp	r3, #47	; 0x2f
 800b8e4:	d006      	beq.n	800b8f4 <create_name+0x54>
 800b8e6:	7efb      	ldrb	r3, [r7, #27]
 800b8e8:	2b5c      	cmp	r3, #92	; 0x5c
 800b8ea:	d110      	bne.n	800b90e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b8ec:	e002      	b.n	800b8f4 <create_name+0x54>
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	61fb      	str	r3, [r7, #28]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	2b2f      	cmp	r3, #47	; 0x2f
 800b8fe:	d0f6      	beq.n	800b8ee <create_name+0x4e>
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	4413      	add	r3, r2
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	2b5c      	cmp	r3, #92	; 0x5c
 800b90a:	d0f0      	beq.n	800b8ee <create_name+0x4e>
			break;
 800b90c:	e038      	b.n	800b980 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b90e:	7efb      	ldrb	r3, [r7, #27]
 800b910:	2b2e      	cmp	r3, #46	; 0x2e
 800b912:	d003      	beq.n	800b91c <create_name+0x7c>
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d30c      	bcc.n	800b936 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	2b0b      	cmp	r3, #11
 800b920:	d002      	beq.n	800b928 <create_name+0x88>
 800b922:	7efb      	ldrb	r3, [r7, #27]
 800b924:	2b2e      	cmp	r3, #46	; 0x2e
 800b926:	d001      	beq.n	800b92c <create_name+0x8c>
 800b928:	2306      	movs	r3, #6
 800b92a:	e044      	b.n	800b9b6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b92c:	2308      	movs	r3, #8
 800b92e:	613b      	str	r3, [r7, #16]
 800b930:	230b      	movs	r3, #11
 800b932:	617b      	str	r3, [r7, #20]
			continue;
 800b934:	e022      	b.n	800b97c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b936:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	da04      	bge.n	800b948 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b93e:	7efb      	ldrb	r3, [r7, #27]
 800b940:	3b80      	subs	r3, #128	; 0x80
 800b942:	4a1f      	ldr	r2, [pc, #124]	; (800b9c0 <create_name+0x120>)
 800b944:	5cd3      	ldrb	r3, [r2, r3]
 800b946:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b948:	7efb      	ldrb	r3, [r7, #27]
 800b94a:	4619      	mov	r1, r3
 800b94c:	481d      	ldr	r0, [pc, #116]	; (800b9c4 <create_name+0x124>)
 800b94e:	f7fe ff52 	bl	800a7f6 <chk_chr>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d001      	beq.n	800b95c <create_name+0xbc>
 800b958:	2306      	movs	r3, #6
 800b95a:	e02c      	b.n	800b9b6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b95c:	7efb      	ldrb	r3, [r7, #27]
 800b95e:	2b60      	cmp	r3, #96	; 0x60
 800b960:	d905      	bls.n	800b96e <create_name+0xce>
 800b962:	7efb      	ldrb	r3, [r7, #27]
 800b964:	2b7a      	cmp	r3, #122	; 0x7a
 800b966:	d802      	bhi.n	800b96e <create_name+0xce>
 800b968:	7efb      	ldrb	r3, [r7, #27]
 800b96a:	3b20      	subs	r3, #32
 800b96c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	1c5a      	adds	r2, r3, #1
 800b972:	613a      	str	r2, [r7, #16]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	4413      	add	r3, r2
 800b978:	7efa      	ldrb	r2, [r7, #27]
 800b97a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b97c:	e7a6      	b.n	800b8cc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b97e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	441a      	add	r2, r3
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <create_name+0xf4>
 800b990:	2306      	movs	r3, #6
 800b992:	e010      	b.n	800b9b6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	2be5      	cmp	r3, #229	; 0xe5
 800b99a:	d102      	bne.n	800b9a2 <create_name+0x102>
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	2205      	movs	r2, #5
 800b9a0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b9a2:	7efb      	ldrb	r3, [r7, #27]
 800b9a4:	2b20      	cmp	r3, #32
 800b9a6:	d801      	bhi.n	800b9ac <create_name+0x10c>
 800b9a8:	2204      	movs	r2, #4
 800b9aa:	e000      	b.n	800b9ae <create_name+0x10e>
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	330b      	adds	r3, #11
 800b9b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b9b4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3720      	adds	r7, #32
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	08012b24 	.word	0x08012b24
 800b9c4:	08012a90 	.word	0x08012a90

0800b9c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b9dc:	e002      	b.n	800b9e4 <follow_path+0x1c>
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	603b      	str	r3, [r7, #0]
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2b2f      	cmp	r3, #47	; 0x2f
 800b9ea:	d0f8      	beq.n	800b9de <follow_path+0x16>
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	2b5c      	cmp	r3, #92	; 0x5c
 800b9f2:	d0f4      	beq.n	800b9de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	2b1f      	cmp	r3, #31
 800ba00:	d80a      	bhi.n	800ba18 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2280      	movs	r2, #128	; 0x80
 800ba06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f7ff fc3d 	bl	800b28c <dir_sdi>
 800ba12:	4603      	mov	r3, r0
 800ba14:	75fb      	strb	r3, [r7, #23]
 800ba16:	e043      	b.n	800baa0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ba18:	463b      	mov	r3, r7
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7ff ff3f 	bl	800b8a0 <create_name>
 800ba22:	4603      	mov	r3, r0
 800ba24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d134      	bne.n	800ba96 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7ff fe50 	bl	800b6d2 <dir_find>
 800ba32:	4603      	mov	r3, r0
 800ba34:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba3c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00a      	beq.n	800ba5a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ba44:	7dfb      	ldrb	r3, [r7, #23]
 800ba46:	2b04      	cmp	r3, #4
 800ba48:	d127      	bne.n	800ba9a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ba4a:	7afb      	ldrb	r3, [r7, #11]
 800ba4c:	f003 0304 	and.w	r3, r3, #4
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d122      	bne.n	800ba9a <follow_path+0xd2>
 800ba54:	2305      	movs	r3, #5
 800ba56:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ba58:	e01f      	b.n	800ba9a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba5a:	7afb      	ldrb	r3, [r7, #11]
 800ba5c:	f003 0304 	and.w	r3, r3, #4
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d11c      	bne.n	800ba9e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	799b      	ldrb	r3, [r3, #6]
 800ba68:	f003 0310 	and.w	r3, r3, #16
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d102      	bne.n	800ba76 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ba70:	2305      	movs	r3, #5
 800ba72:	75fb      	strb	r3, [r7, #23]
 800ba74:	e014      	b.n	800baa0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	695b      	ldr	r3, [r3, #20]
 800ba80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba84:	4413      	add	r3, r2
 800ba86:	4619      	mov	r1, r3
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f7ff fd86 	bl	800b59a <ld_clust>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ba94:	e7c0      	b.n	800ba18 <follow_path+0x50>
			if (res != FR_OK) break;
 800ba96:	bf00      	nop
 800ba98:	e002      	b.n	800baa0 <follow_path+0xd8>
				break;
 800ba9a:	bf00      	nop
 800ba9c:	e000      	b.n	800baa0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba9e:	bf00      	nop
			}
		}
	}

	return res;
 800baa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3718      	adds	r7, #24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800baaa:	b480      	push	{r7}
 800baac:	b087      	sub	sp, #28
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bab2:	f04f 33ff 	mov.w	r3, #4294967295
 800bab6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d031      	beq.n	800bb24 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	617b      	str	r3, [r7, #20]
 800bac6:	e002      	b.n	800bace <get_ldnumber+0x24>
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	3301      	adds	r3, #1
 800bacc:	617b      	str	r3, [r7, #20]
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	2b20      	cmp	r3, #32
 800bad4:	d903      	bls.n	800bade <get_ldnumber+0x34>
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	2b3a      	cmp	r3, #58	; 0x3a
 800badc:	d1f4      	bne.n	800bac8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b3a      	cmp	r3, #58	; 0x3a
 800bae4:	d11c      	bne.n	800bb20 <get_ldnumber+0x76>
			tp = *path;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	1c5a      	adds	r2, r3, #1
 800baf0:	60fa      	str	r2, [r7, #12]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	3b30      	subs	r3, #48	; 0x30
 800baf6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2b09      	cmp	r3, #9
 800bafc:	d80e      	bhi.n	800bb1c <get_ldnumber+0x72>
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d10a      	bne.n	800bb1c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d107      	bne.n	800bb1c <get_ldnumber+0x72>
					vol = (int)i;
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	3301      	adds	r3, #1
 800bb14:	617b      	str	r3, [r7, #20]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	e002      	b.n	800bb26 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bb20:	2300      	movs	r3, #0
 800bb22:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bb24:	693b      	ldr	r3, [r7, #16]
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	371c      	adds	r7, #28
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
	...

0800bb34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	70da      	strb	r2, [r3, #3]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f7ff f81c 	bl	800ab8c <move_window>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <check_fs+0x2a>
 800bb5a:	2304      	movs	r3, #4
 800bb5c:	e038      	b.n	800bbd0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	3330      	adds	r3, #48	; 0x30
 800bb62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fe fd60 	bl	800a62c <ld_word>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	461a      	mov	r2, r3
 800bb70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d001      	beq.n	800bb7c <check_fs+0x48>
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e029      	b.n	800bbd0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb82:	2be9      	cmp	r3, #233	; 0xe9
 800bb84:	d009      	beq.n	800bb9a <check_fs+0x66>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb8c:	2beb      	cmp	r3, #235	; 0xeb
 800bb8e:	d11e      	bne.n	800bbce <check_fs+0x9a>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bb96:	2b90      	cmp	r3, #144	; 0x90
 800bb98:	d119      	bne.n	800bbce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	3330      	adds	r3, #48	; 0x30
 800bb9e:	3336      	adds	r3, #54	; 0x36
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7fe fd5b 	bl	800a65c <ld_dword>
 800bba6:	4603      	mov	r3, r0
 800bba8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bbac:	4a0a      	ldr	r2, [pc, #40]	; (800bbd8 <check_fs+0xa4>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d101      	bne.n	800bbb6 <check_fs+0x82>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	e00c      	b.n	800bbd0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	3330      	adds	r3, #48	; 0x30
 800bbba:	3352      	adds	r3, #82	; 0x52
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fe fd4d 	bl	800a65c <ld_dword>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	4a05      	ldr	r2, [pc, #20]	; (800bbdc <check_fs+0xa8>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d101      	bne.n	800bbce <check_fs+0x9a>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	e000      	b.n	800bbd0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bbce:	2302      	movs	r3, #2
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	00544146 	.word	0x00544146
 800bbdc:	33544146 	.word	0x33544146

0800bbe0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b096      	sub	sp, #88	; 0x58
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	4613      	mov	r3, r2
 800bbec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f7ff ff58 	bl	800baaa <get_ldnumber>
 800bbfa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	da01      	bge.n	800bc06 <find_volume+0x26>
 800bc02:	230b      	movs	r3, #11
 800bc04:	e22e      	b.n	800c064 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bc06:	4aa8      	ldr	r2, [pc, #672]	; (800bea8 <find_volume+0x2c8>)
 800bc08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d101      	bne.n	800bc1a <find_volume+0x3a>
 800bc16:	230c      	movs	r3, #12
 800bc18:	e224      	b.n	800c064 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc1e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bc20:	79fb      	ldrb	r3, [r7, #7]
 800bc22:	f023 0301 	bic.w	r3, r3, #1
 800bc26:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d01a      	beq.n	800bc66 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc32:	785b      	ldrb	r3, [r3, #1]
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fe fc5b 	bl	800a4f0 <disk_status>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bc40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc44:	f003 0301 	and.w	r3, r3, #1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10c      	bne.n	800bc66 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bc4c:	79fb      	ldrb	r3, [r7, #7]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d007      	beq.n	800bc62 <find_volume+0x82>
 800bc52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc56:	f003 0304 	and.w	r3, r3, #4
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bc5e:	230a      	movs	r3, #10
 800bc60:	e200      	b.n	800c064 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800bc62:	2300      	movs	r3, #0
 800bc64:	e1fe      	b.n	800c064 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc68:	2200      	movs	r2, #0
 800bc6a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc6e:	b2da      	uxtb	r2, r3
 800bc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc72:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc76:	785b      	ldrb	r3, [r3, #1]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7fe fc53 	bl	800a524 <disk_initialize>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bc84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc88:	f003 0301 	and.w	r3, r3, #1
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d001      	beq.n	800bc94 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bc90:	2303      	movs	r3, #3
 800bc92:	e1e7      	b.n	800c064 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bc94:	79fb      	ldrb	r3, [r7, #7]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d007      	beq.n	800bcaa <find_volume+0xca>
 800bc9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc9e:	f003 0304 	and.w	r3, r3, #4
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bca6:	230a      	movs	r3, #10
 800bca8:	e1dc      	b.n	800c064 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bcae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bcb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcb2:	f7ff ff3f 	bl	800bb34 <check_fs>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bcbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d14b      	bne.n	800bd5c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	643b      	str	r3, [r7, #64]	; 0x40
 800bcc8:	e01f      	b.n	800bd0a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bccc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bcd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcd2:	011b      	lsls	r3, r3, #4
 800bcd4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bcd8:	4413      	add	r3, r2
 800bcda:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcde:	3304      	adds	r3, #4
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d006      	beq.n	800bcf4 <find_volume+0x114>
 800bce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce8:	3308      	adds	r3, #8
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe fcb6 	bl	800a65c <ld_dword>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	e000      	b.n	800bcf6 <find_volume+0x116>
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800bcfe:	440b      	add	r3, r1
 800bd00:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bd04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd06:	3301      	adds	r3, #1
 800bd08:	643b      	str	r3, [r7, #64]	; 0x40
 800bd0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd0c:	2b03      	cmp	r3, #3
 800bd0e:	d9dc      	bls.n	800bcca <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bd10:	2300      	movs	r3, #0
 800bd12:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bd14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d002      	beq.n	800bd20 <find_volume+0x140>
 800bd1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bd20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bd28:	4413      	add	r3, r2
 800bd2a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bd2e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bd30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d005      	beq.n	800bd42 <find_volume+0x162>
 800bd36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd3a:	f7ff fefb 	bl	800bb34 <check_fs>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	e000      	b.n	800bd44 <find_volume+0x164>
 800bd42:	2303      	movs	r3, #3
 800bd44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bd48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d905      	bls.n	800bd5c <find_volume+0x17c>
 800bd50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd52:	3301      	adds	r3, #1
 800bd54:	643b      	str	r3, [r7, #64]	; 0x40
 800bd56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd58:	2b03      	cmp	r3, #3
 800bd5a:	d9e1      	bls.n	800bd20 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bd5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd60:	2b04      	cmp	r3, #4
 800bd62:	d101      	bne.n	800bd68 <find_volume+0x188>
 800bd64:	2301      	movs	r3, #1
 800bd66:	e17d      	b.n	800c064 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bd68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d901      	bls.n	800bd74 <find_volume+0x194>
 800bd70:	230d      	movs	r3, #13
 800bd72:	e177      	b.n	800c064 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd76:	3330      	adds	r3, #48	; 0x30
 800bd78:	330b      	adds	r3, #11
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fe fc56 	bl	800a62c <ld_word>
 800bd80:	4603      	mov	r3, r0
 800bd82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd86:	d001      	beq.n	800bd8c <find_volume+0x1ac>
 800bd88:	230d      	movs	r3, #13
 800bd8a:	e16b      	b.n	800c064 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8e:	3330      	adds	r3, #48	; 0x30
 800bd90:	3316      	adds	r3, #22
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fe fc4a 	bl	800a62c <ld_word>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bd9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d106      	bne.n	800bdb0 <find_volume+0x1d0>
 800bda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda4:	3330      	adds	r3, #48	; 0x30
 800bda6:	3324      	adds	r3, #36	; 0x24
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7fe fc57 	bl	800a65c <ld_dword>
 800bdae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdb4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800bdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc2:	789b      	ldrb	r3, [r3, #2]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d005      	beq.n	800bdd4 <find_volume+0x1f4>
 800bdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdca:	789b      	ldrb	r3, [r3, #2]
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	d001      	beq.n	800bdd4 <find_volume+0x1f4>
 800bdd0:	230d      	movs	r3, #13
 800bdd2:	e147      	b.n	800c064 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd6:	789b      	ldrb	r3, [r3, #2]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bddc:	fb02 f303 	mul.w	r3, r2, r3
 800bde0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf0:	895b      	ldrh	r3, [r3, #10]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d008      	beq.n	800be08 <find_volume+0x228>
 800bdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf8:	895b      	ldrh	r3, [r3, #10]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfe:	895b      	ldrh	r3, [r3, #10]
 800be00:	3b01      	subs	r3, #1
 800be02:	4013      	ands	r3, r2
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <find_volume+0x22c>
 800be08:	230d      	movs	r3, #13
 800be0a:	e12b      	b.n	800c064 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800be0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0e:	3330      	adds	r3, #48	; 0x30
 800be10:	3311      	adds	r3, #17
 800be12:	4618      	mov	r0, r3
 800be14:	f7fe fc0a 	bl	800a62c <ld_word>
 800be18:	4603      	mov	r3, r0
 800be1a:	461a      	mov	r2, r3
 800be1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800be20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be22:	891b      	ldrh	r3, [r3, #8]
 800be24:	f003 030f 	and.w	r3, r3, #15
 800be28:	b29b      	uxth	r3, r3
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <find_volume+0x252>
 800be2e:	230d      	movs	r3, #13
 800be30:	e118      	b.n	800c064 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800be32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be34:	3330      	adds	r3, #48	; 0x30
 800be36:	3313      	adds	r3, #19
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fe fbf7 	bl	800a62c <ld_word>
 800be3e:	4603      	mov	r3, r0
 800be40:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800be42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be44:	2b00      	cmp	r3, #0
 800be46:	d106      	bne.n	800be56 <find_volume+0x276>
 800be48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4a:	3330      	adds	r3, #48	; 0x30
 800be4c:	3320      	adds	r3, #32
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fe fc04 	bl	800a65c <ld_dword>
 800be54:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800be56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be58:	3330      	adds	r3, #48	; 0x30
 800be5a:	330e      	adds	r3, #14
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7fe fbe5 	bl	800a62c <ld_word>
 800be62:	4603      	mov	r3, r0
 800be64:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800be66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <find_volume+0x290>
 800be6c:	230d      	movs	r3, #13
 800be6e:	e0f9      	b.n	800c064 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800be70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800be72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be74:	4413      	add	r3, r2
 800be76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be78:	8912      	ldrh	r2, [r2, #8]
 800be7a:	0912      	lsrs	r2, r2, #4
 800be7c:	b292      	uxth	r2, r2
 800be7e:	4413      	add	r3, r2
 800be80:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800be82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be86:	429a      	cmp	r2, r3
 800be88:	d201      	bcs.n	800be8e <find_volume+0x2ae>
 800be8a:	230d      	movs	r3, #13
 800be8c:	e0ea      	b.n	800c064 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800be8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	1ad3      	subs	r3, r2, r3
 800be94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be96:	8952      	ldrh	r2, [r2, #10]
 800be98:	fbb3 f3f2 	udiv	r3, r3, r2
 800be9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d103      	bne.n	800beac <find_volume+0x2cc>
 800bea4:	230d      	movs	r3, #13
 800bea6:	e0dd      	b.n	800c064 <find_volume+0x484>
 800bea8:	200004c8 	.word	0x200004c8
		fmt = FS_FAT32;
 800beac:	2303      	movs	r3, #3
 800beae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800beb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800beb8:	4293      	cmp	r3, r2
 800beba:	d802      	bhi.n	800bec2 <find_volume+0x2e2>
 800bebc:	2302      	movs	r3, #2
 800bebe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bec8:	4293      	cmp	r3, r2
 800beca:	d802      	bhi.n	800bed2 <find_volume+0x2f2>
 800becc:	2301      	movs	r3, #1
 800bece:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed4:	1c9a      	adds	r2, r3, #2
 800bed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800beda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bedc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bede:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bee0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee4:	441a      	add	r2, r3
 800bee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800beea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beee:	441a      	add	r2, r3
 800bef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800bef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bef8:	2b03      	cmp	r3, #3
 800befa:	d11e      	bne.n	800bf3a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800befc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befe:	3330      	adds	r3, #48	; 0x30
 800bf00:	332a      	adds	r3, #42	; 0x2a
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fe fb92 	bl	800a62c <ld_word>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d001      	beq.n	800bf12 <find_volume+0x332>
 800bf0e:	230d      	movs	r3, #13
 800bf10:	e0a8      	b.n	800c064 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bf12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf14:	891b      	ldrh	r3, [r3, #8]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <find_volume+0x33e>
 800bf1a:	230d      	movs	r3, #13
 800bf1c:	e0a2      	b.n	800c064 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf20:	3330      	adds	r3, #48	; 0x30
 800bf22:	332c      	adds	r3, #44	; 0x2c
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fe fb99 	bl	800a65c <ld_dword>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	647b      	str	r3, [r7, #68]	; 0x44
 800bf38:	e01f      	b.n	800bf7a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	891b      	ldrh	r3, [r3, #8]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <find_volume+0x366>
 800bf42:	230d      	movs	r3, #13
 800bf44:	e08e      	b.n	800c064 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf48:	6a1a      	ldr	r2, [r3, #32]
 800bf4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf4c:	441a      	add	r2, r3
 800bf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf50:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bf52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d103      	bne.n	800bf62 <find_volume+0x382>
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	e00a      	b.n	800bf78 <find_volume+0x398>
 800bf62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf64:	695a      	ldr	r2, [r3, #20]
 800bf66:	4613      	mov	r3, r2
 800bf68:	005b      	lsls	r3, r3, #1
 800bf6a:	4413      	add	r3, r2
 800bf6c:	085a      	lsrs	r2, r3, #1
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	f003 0301 	and.w	r3, r3, #1
 800bf76:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bf78:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7c:	699a      	ldr	r2, [r3, #24]
 800bf7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf80:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bf84:	0a5b      	lsrs	r3, r3, #9
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d201      	bcs.n	800bf8e <find_volume+0x3ae>
 800bf8a:	230d      	movs	r3, #13
 800bf8c:	e06a      	b.n	800c064 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf90:	f04f 32ff 	mov.w	r2, #4294967295
 800bf94:	611a      	str	r2, [r3, #16]
 800bf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf98:	691a      	ldr	r2, [r3, #16]
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa0:	2280      	movs	r2, #128	; 0x80
 800bfa2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bfa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfa8:	2b03      	cmp	r3, #3
 800bfaa:	d149      	bne.n	800c040 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfae:	3330      	adds	r3, #48	; 0x30
 800bfb0:	3330      	adds	r3, #48	; 0x30
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fe fb3a 	bl	800a62c <ld_word>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d140      	bne.n	800c040 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bfbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfc6:	f7fe fde1 	bl	800ab8c <move_window>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d137      	bne.n	800c040 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800bfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd8:	3330      	adds	r3, #48	; 0x30
 800bfda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe fb24 	bl	800a62c <ld_word>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d127      	bne.n	800c040 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff2:	3330      	adds	r3, #48	; 0x30
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fe fb31 	bl	800a65c <ld_dword>
 800bffa:	4603      	mov	r3, r0
 800bffc:	4a1b      	ldr	r2, [pc, #108]	; (800c06c <find_volume+0x48c>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d11e      	bne.n	800c040 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c004:	3330      	adds	r3, #48	; 0x30
 800c006:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fe fb26 	bl	800a65c <ld_dword>
 800c010:	4603      	mov	r3, r0
 800c012:	4a17      	ldr	r2, [pc, #92]	; (800c070 <find_volume+0x490>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d113      	bne.n	800c040 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01a:	3330      	adds	r3, #48	; 0x30
 800c01c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c020:	4618      	mov	r0, r3
 800c022:	f7fe fb1b 	bl	800a65c <ld_dword>
 800c026:	4602      	mov	r2, r0
 800c028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02e:	3330      	adds	r3, #48	; 0x30
 800c030:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c034:	4618      	mov	r0, r3
 800c036:	f7fe fb11 	bl	800a65c <ld_dword>
 800c03a:	4602      	mov	r2, r0
 800c03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c042:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c046:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c048:	4b0a      	ldr	r3, [pc, #40]	; (800c074 <find_volume+0x494>)
 800c04a:	881b      	ldrh	r3, [r3, #0]
 800c04c:	3301      	adds	r3, #1
 800c04e:	b29a      	uxth	r2, r3
 800c050:	4b08      	ldr	r3, [pc, #32]	; (800c074 <find_volume+0x494>)
 800c052:	801a      	strh	r2, [r3, #0]
 800c054:	4b07      	ldr	r3, [pc, #28]	; (800c074 <find_volume+0x494>)
 800c056:	881a      	ldrh	r2, [r3, #0]
 800c058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c05c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c05e:	f7fe fd2d 	bl	800aabc <clear_lock>
#endif
	return FR_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3758      	adds	r7, #88	; 0x58
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	41615252 	.word	0x41615252
 800c070:	61417272 	.word	0x61417272
 800c074:	200004cc 	.word	0x200004cc

0800c078 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c082:	2309      	movs	r3, #9
 800c084:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d01c      	beq.n	800c0c6 <validate+0x4e>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d018      	beq.n	800c0c6 <validate+0x4e>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d013      	beq.n	800c0c6 <validate+0x4e>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	889a      	ldrh	r2, [r3, #4]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	88db      	ldrh	r3, [r3, #6]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d10c      	bne.n	800c0c6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	785b      	ldrb	r3, [r3, #1]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fe fa1c 	bl	800a4f0 <disk_status>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d101      	bne.n	800c0c6 <validate+0x4e>
			res = FR_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c0c6:	7bfb      	ldrb	r3, [r7, #15]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d102      	bne.n	800c0d2 <validate+0x5a>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	e000      	b.n	800c0d4 <validate+0x5c>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	683a      	ldr	r2, [r7, #0]
 800c0d6:	6013      	str	r3, [r2, #0]
	return res;
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
	...

0800c0e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b088      	sub	sp, #32
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c0f6:	f107 0310 	add.w	r3, r7, #16
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7ff fcd5 	bl	800baaa <get_ldnumber>
 800c100:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	2b00      	cmp	r3, #0
 800c106:	da01      	bge.n	800c10c <f_mount+0x28>
 800c108:	230b      	movs	r3, #11
 800c10a:	e02b      	b.n	800c164 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c10c:	4a17      	ldr	r2, [pc, #92]	; (800c16c <f_mount+0x88>)
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c114:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d005      	beq.n	800c128 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c11c:	69b8      	ldr	r0, [r7, #24]
 800c11e:	f7fe fccd 	bl	800aabc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	2200      	movs	r2, #0
 800c126:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d002      	beq.n	800c134 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2200      	movs	r2, #0
 800c132:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	490d      	ldr	r1, [pc, #52]	; (800c16c <f_mount+0x88>)
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d002      	beq.n	800c14a <f_mount+0x66>
 800c144:	79fb      	ldrb	r3, [r7, #7]
 800c146:	2b01      	cmp	r3, #1
 800c148:	d001      	beq.n	800c14e <f_mount+0x6a>
 800c14a:	2300      	movs	r3, #0
 800c14c:	e00a      	b.n	800c164 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c14e:	f107 010c 	add.w	r1, r7, #12
 800c152:	f107 0308 	add.w	r3, r7, #8
 800c156:	2200      	movs	r2, #0
 800c158:	4618      	mov	r0, r3
 800c15a:	f7ff fd41 	bl	800bbe0 <find_volume>
 800c15e:	4603      	mov	r3, r0
 800c160:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c162:	7dfb      	ldrb	r3, [r7, #23]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3720      	adds	r7, #32
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	200004c8 	.word	0x200004c8

0800c170 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b098      	sub	sp, #96	; 0x60
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	4613      	mov	r3, r2
 800c17c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d101      	bne.n	800c188 <f_open+0x18>
 800c184:	2309      	movs	r3, #9
 800c186:	e1ad      	b.n	800c4e4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c188:	79fb      	ldrb	r3, [r7, #7]
 800c18a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c18e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c190:	79fa      	ldrb	r2, [r7, #7]
 800c192:	f107 0110 	add.w	r1, r7, #16
 800c196:	f107 0308 	add.w	r3, r7, #8
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7ff fd20 	bl	800bbe0 <find_volume>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c1a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	f040 8191 	bne.w	800c4d2 <f_open+0x362>
		dj.obj.fs = fs;
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	f107 0314 	add.w	r3, r7, #20
 800c1ba:	4611      	mov	r1, r2
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7ff fc03 	bl	800b9c8 <follow_path>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c1c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d11a      	bne.n	800c206 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c1d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c1d4:	b25b      	sxtb	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	da03      	bge.n	800c1e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c1da:	2306      	movs	r3, #6
 800c1dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c1e0:	e011      	b.n	800c206 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c1e2:	79fb      	ldrb	r3, [r7, #7]
 800c1e4:	f023 0301 	bic.w	r3, r3, #1
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	bf14      	ite	ne
 800c1ec:	2301      	movne	r3, #1
 800c1ee:	2300      	moveq	r3, #0
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	f107 0314 	add.w	r3, r7, #20
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7fe fb16 	bl	800a82c <chk_lock>
 800c200:	4603      	mov	r3, r0
 800c202:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c206:	79fb      	ldrb	r3, [r7, #7]
 800c208:	f003 031c 	and.w	r3, r3, #28
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d07f      	beq.n	800c310 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c214:	2b00      	cmp	r3, #0
 800c216:	d017      	beq.n	800c248 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c21c:	2b04      	cmp	r3, #4
 800c21e:	d10e      	bne.n	800c23e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c220:	f7fe fb60 	bl	800a8e4 <enq_lock>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d006      	beq.n	800c238 <f_open+0xc8>
 800c22a:	f107 0314 	add.w	r3, r7, #20
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff faa4 	bl	800b77c <dir_register>
 800c234:	4603      	mov	r3, r0
 800c236:	e000      	b.n	800c23a <f_open+0xca>
 800c238:	2312      	movs	r3, #18
 800c23a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c23e:	79fb      	ldrb	r3, [r7, #7]
 800c240:	f043 0308 	orr.w	r3, r3, #8
 800c244:	71fb      	strb	r3, [r7, #7]
 800c246:	e010      	b.n	800c26a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c248:	7ebb      	ldrb	r3, [r7, #26]
 800c24a:	f003 0311 	and.w	r3, r3, #17
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d003      	beq.n	800c25a <f_open+0xea>
					res = FR_DENIED;
 800c252:	2307      	movs	r3, #7
 800c254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c258:	e007      	b.n	800c26a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c25a:	79fb      	ldrb	r3, [r7, #7]
 800c25c:	f003 0304 	and.w	r3, r3, #4
 800c260:	2b00      	cmp	r3, #0
 800c262:	d002      	beq.n	800c26a <f_open+0xfa>
 800c264:	2308      	movs	r3, #8
 800c266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c26a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d168      	bne.n	800c344 <f_open+0x1d4>
 800c272:	79fb      	ldrb	r3, [r7, #7]
 800c274:	f003 0308 	and.w	r3, r3, #8
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d063      	beq.n	800c344 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c27c:	f7fd fbf8 	bl	8009a70 <get_fattime>
 800c280:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c284:	330e      	adds	r3, #14
 800c286:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c288:	4618      	mov	r0, r3
 800c28a:	f7fe fa25 	bl	800a6d8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c290:	3316      	adds	r3, #22
 800c292:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c294:	4618      	mov	r0, r3
 800c296:	f7fe fa1f 	bl	800a6d8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c29c:	330b      	adds	r3, #11
 800c29e:	2220      	movs	r2, #32
 800c2a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7ff f976 	bl	800b59a <ld_clust>
 800c2ae:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7ff f98e 	bl	800b5d8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2be:	331c      	adds	r3, #28
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fe fa08 	bl	800a6d8 <st_dword>
					fs->wflag = 1;
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c2ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d037      	beq.n	800c344 <f_open+0x1d4>
						dw = fs->winsect;
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c2da:	f107 0314 	add.w	r3, r7, #20
 800c2de:	2200      	movs	r2, #0
 800c2e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fe fea1 	bl	800b02a <remove_chain>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c2ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d126      	bne.n	800c344 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fe fc46 	bl	800ab8c <move_window>
 800c300:	4603      	mov	r3, r0
 800c302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c30a:	3a01      	subs	r2, #1
 800c30c:	60da      	str	r2, [r3, #12]
 800c30e:	e019      	b.n	800c344 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c314:	2b00      	cmp	r3, #0
 800c316:	d115      	bne.n	800c344 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c318:	7ebb      	ldrb	r3, [r7, #26]
 800c31a:	f003 0310 	and.w	r3, r3, #16
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d003      	beq.n	800c32a <f_open+0x1ba>
					res = FR_NO_FILE;
 800c322:	2304      	movs	r3, #4
 800c324:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c328:	e00c      	b.n	800c344 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c32a:	79fb      	ldrb	r3, [r7, #7]
 800c32c:	f003 0302 	and.w	r3, r3, #2
 800c330:	2b00      	cmp	r3, #0
 800c332:	d007      	beq.n	800c344 <f_open+0x1d4>
 800c334:	7ebb      	ldrb	r3, [r7, #26]
 800c336:	f003 0301 	and.w	r3, r3, #1
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d002      	beq.n	800c344 <f_open+0x1d4>
						res = FR_DENIED;
 800c33e:	2307      	movs	r3, #7
 800c340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c344:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d128      	bne.n	800c39e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c34c:	79fb      	ldrb	r3, [r7, #7]
 800c34e:	f003 0308 	and.w	r3, r3, #8
 800c352:	2b00      	cmp	r3, #0
 800c354:	d003      	beq.n	800c35e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c356:	79fb      	ldrb	r3, [r7, #7]
 800c358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c35c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c36c:	79fb      	ldrb	r3, [r7, #7]
 800c36e:	f023 0301 	bic.w	r3, r3, #1
 800c372:	2b00      	cmp	r3, #0
 800c374:	bf14      	ite	ne
 800c376:	2301      	movne	r3, #1
 800c378:	2300      	moveq	r3, #0
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	461a      	mov	r2, r3
 800c37e:	f107 0314 	add.w	r3, r7, #20
 800c382:	4611      	mov	r1, r2
 800c384:	4618      	mov	r0, r3
 800c386:	f7fe facf 	bl	800a928 <inc_lock>
 800c38a:	4602      	mov	r2, r0
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d102      	bne.n	800c39e <f_open+0x22e>
 800c398:	2302      	movs	r3, #2
 800c39a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c39e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f040 8095 	bne.w	800c4d2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3ac:	4611      	mov	r1, r2
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7ff f8f3 	bl	800b59a <ld_clust>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3bc:	331c      	adds	r3, #28
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe f94c 	bl	800a65c <ld_dword>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c3d0:	693a      	ldr	r2, [r7, #16]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	88da      	ldrh	r2, [r3, #6]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	79fa      	ldrb	r2, [r7, #7]
 800c3e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3330      	adds	r3, #48	; 0x30
 800c3fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3fe:	2100      	movs	r1, #0
 800c400:	4618      	mov	r0, r3
 800c402:	f7fe f9b6 	bl	800a772 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c406:	79fb      	ldrb	r3, [r7, #7]
 800c408:	f003 0320 	and.w	r3, r3, #32
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d060      	beq.n	800c4d2 <f_open+0x362>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d05c      	beq.n	800c4d2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	68da      	ldr	r2, [r3, #12]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	895b      	ldrh	r3, [r3, #10]
 800c424:	025b      	lsls	r3, r3, #9
 800c426:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	657b      	str	r3, [r7, #84]	; 0x54
 800c434:	e016      	b.n	800c464 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fe fc61 	bl	800ad02 <get_fat>
 800c440:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c444:	2b01      	cmp	r3, #1
 800c446:	d802      	bhi.n	800c44e <f_open+0x2de>
 800c448:	2302      	movs	r3, #2
 800c44a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c44e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c454:	d102      	bne.n	800c45c <f_open+0x2ec>
 800c456:	2301      	movs	r3, #1
 800c458:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c45c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c45e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	657b      	str	r3, [r7, #84]	; 0x54
 800c464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d103      	bne.n	800c474 <f_open+0x304>
 800c46c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c46e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c470:	429a      	cmp	r2, r3
 800c472:	d8e0      	bhi.n	800c436 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c478:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c47a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d127      	bne.n	800c4d2 <f_open+0x362>
 800c482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d022      	beq.n	800c4d2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c490:	4618      	mov	r0, r3
 800c492:	f7fe fc17 	bl	800acc4 <clust2sect>
 800c496:	6478      	str	r0, [r7, #68]	; 0x44
 800c498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d103      	bne.n	800c4a6 <f_open+0x336>
						res = FR_INT_ERR;
 800c49e:	2302      	movs	r3, #2
 800c4a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c4a4:	e015      	b.n	800c4d2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c4a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4a8:	0a5a      	lsrs	r2, r3, #9
 800c4aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4ac:	441a      	add	r2, r3
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	7858      	ldrb	r0, [r3, #1]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6a1a      	ldr	r2, [r3, #32]
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	f7fe f855 	bl	800a570 <disk_read>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <f_open+0x362>
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c4d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d002      	beq.n	800c4e0 <f_open+0x370>
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c4e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3760      	adds	r7, #96	; 0x60
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b08c      	sub	sp, #48	; 0x30
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
 800c4f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	2200      	movs	r2, #0
 800c502:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f107 0210 	add.w	r2, r7, #16
 800c50a:	4611      	mov	r1, r2
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7ff fdb3 	bl	800c078 <validate>
 800c512:	4603      	mov	r3, r0
 800c514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d107      	bne.n	800c530 <f_write+0x44>
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	7d5b      	ldrb	r3, [r3, #21]
 800c524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d002      	beq.n	800c536 <f_write+0x4a>
 800c530:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c534:	e14b      	b.n	800c7ce <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	7d1b      	ldrb	r3, [r3, #20]
 800c53a:	f003 0302 	and.w	r3, r3, #2
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d101      	bne.n	800c546 <f_write+0x5a>
 800c542:	2307      	movs	r3, #7
 800c544:	e143      	b.n	800c7ce <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	699a      	ldr	r2, [r3, #24]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	441a      	add	r2, r3
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	699b      	ldr	r3, [r3, #24]
 800c552:	429a      	cmp	r2, r3
 800c554:	f080 812d 	bcs.w	800c7b2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	699b      	ldr	r3, [r3, #24]
 800c55c:	43db      	mvns	r3, r3
 800c55e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c560:	e127      	b.n	800c7b2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	699b      	ldr	r3, [r3, #24]
 800c566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f040 80e3 	bne.w	800c736 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	699b      	ldr	r3, [r3, #24]
 800c574:	0a5b      	lsrs	r3, r3, #9
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	8952      	ldrh	r2, [r2, #10]
 800c57a:	3a01      	subs	r2, #1
 800c57c:	4013      	ands	r3, r2
 800c57e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d143      	bne.n	800c60e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	699b      	ldr	r3, [r3, #24]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10c      	bne.n	800c5a8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c596:	2b00      	cmp	r3, #0
 800c598:	d11a      	bne.n	800c5d0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2100      	movs	r1, #0
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7fe fda8 	bl	800b0f4 <create_chain>
 800c5a4:	62b8      	str	r0, [r7, #40]	; 0x28
 800c5a6:	e013      	b.n	800c5d0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d007      	beq.n	800c5c0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	699b      	ldr	r3, [r3, #24]
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f7fe fe34 	bl	800b224 <clmt_clust>
 800c5bc:	62b8      	str	r0, [r7, #40]	; 0x28
 800c5be:	e007      	b.n	800c5d0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	69db      	ldr	r3, [r3, #28]
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	f7fe fd93 	bl	800b0f4 <create_chain>
 800c5ce:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f000 80f2 	beq.w	800c7bc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d104      	bne.n	800c5e8 <f_write+0xfc>
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2202      	movs	r2, #2
 800c5e2:	755a      	strb	r2, [r3, #21]
 800c5e4:	2302      	movs	r3, #2
 800c5e6:	e0f2      	b.n	800c7ce <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ee:	d104      	bne.n	800c5fa <f_write+0x10e>
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	755a      	strb	r2, [r3, #21]
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e0e9      	b.n	800c7ce <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5fe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d102      	bne.n	800c60e <f_write+0x122>
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c60c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	7d1b      	ldrb	r3, [r3, #20]
 800c612:	b25b      	sxtb	r3, r3
 800c614:	2b00      	cmp	r3, #0
 800c616:	da18      	bge.n	800c64a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	7858      	ldrb	r0, [r3, #1]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6a1a      	ldr	r2, [r3, #32]
 800c626:	2301      	movs	r3, #1
 800c628:	f7fd ffc2 	bl	800a5b0 <disk_write>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d004      	beq.n	800c63c <f_write+0x150>
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2201      	movs	r2, #1
 800c636:	755a      	strb	r2, [r3, #21]
 800c638:	2301      	movs	r3, #1
 800c63a:	e0c8      	b.n	800c7ce <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	7d1b      	ldrb	r3, [r3, #20]
 800c640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c644:	b2da      	uxtb	r2, r3
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c64a:	693a      	ldr	r2, [r7, #16]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	69db      	ldr	r3, [r3, #28]
 800c650:	4619      	mov	r1, r3
 800c652:	4610      	mov	r0, r2
 800c654:	f7fe fb36 	bl	800acc4 <clust2sect>
 800c658:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d104      	bne.n	800c66a <f_write+0x17e>
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2202      	movs	r2, #2
 800c664:	755a      	strb	r2, [r3, #21]
 800c666:	2302      	movs	r3, #2
 800c668:	e0b1      	b.n	800c7ce <f_write+0x2e2>
			sect += csect;
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	4413      	add	r3, r2
 800c670:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	0a5b      	lsrs	r3, r3, #9
 800c676:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d03c      	beq.n	800c6f8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c67e:	69ba      	ldr	r2, [r7, #24]
 800c680:	6a3b      	ldr	r3, [r7, #32]
 800c682:	4413      	add	r3, r2
 800c684:	693a      	ldr	r2, [r7, #16]
 800c686:	8952      	ldrh	r2, [r2, #10]
 800c688:	4293      	cmp	r3, r2
 800c68a:	d905      	bls.n	800c698 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	895b      	ldrh	r3, [r3, #10]
 800c690:	461a      	mov	r2, r3
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	7858      	ldrb	r0, [r3, #1]
 800c69c:	6a3b      	ldr	r3, [r7, #32]
 800c69e:	697a      	ldr	r2, [r7, #20]
 800c6a0:	69f9      	ldr	r1, [r7, #28]
 800c6a2:	f7fd ff85 	bl	800a5b0 <disk_write>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d004      	beq.n	800c6b6 <f_write+0x1ca>
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	755a      	strb	r2, [r3, #21]
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e08b      	b.n	800c7ce <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6a1a      	ldr	r2, [r3, #32]
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	6a3a      	ldr	r2, [r7, #32]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d915      	bls.n	800c6f0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6a1a      	ldr	r2, [r3, #32]
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	025b      	lsls	r3, r3, #9
 800c6d4:	69fa      	ldr	r2, [r7, #28]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6dc:	4619      	mov	r1, r3
 800c6de:	f7fe f827 	bl	800a730 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	7d1b      	ldrb	r3, [r3, #20]
 800c6e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c6f0:	6a3b      	ldr	r3, [r7, #32]
 800c6f2:	025b      	lsls	r3, r3, #9
 800c6f4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c6f6:	e03f      	b.n	800c778 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6a1b      	ldr	r3, [r3, #32]
 800c6fc:	697a      	ldr	r2, [r7, #20]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d016      	beq.n	800c730 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	699a      	ldr	r2, [r3, #24]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d210      	bcs.n	800c730 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	7858      	ldrb	r0, [r3, #1]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c718:	2301      	movs	r3, #1
 800c71a:	697a      	ldr	r2, [r7, #20]
 800c71c:	f7fd ff28 	bl	800a570 <disk_read>
 800c720:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c722:	2b00      	cmp	r3, #0
 800c724:	d004      	beq.n	800c730 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2201      	movs	r2, #1
 800c72a:	755a      	strb	r2, [r3, #21]
 800c72c:	2301      	movs	r3, #1
 800c72e:	e04e      	b.n	800c7ce <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	697a      	ldr	r2, [r7, #20]
 800c734:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c73e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c742:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d901      	bls.n	800c750 <f_write+0x264>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	699b      	ldr	r3, [r3, #24]
 800c75a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c75e:	4413      	add	r3, r2
 800c760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c762:	69f9      	ldr	r1, [r7, #28]
 800c764:	4618      	mov	r0, r3
 800c766:	f7fd ffe3 	bl	800a730 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	7d1b      	ldrb	r3, [r3, #20]
 800c76e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c772:	b2da      	uxtb	r2, r3
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c778:	69fa      	ldr	r2, [r7, #28]
 800c77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77c:	4413      	add	r3, r2
 800c77e:	61fb      	str	r3, [r7, #28]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	699a      	ldr	r2, [r3, #24]
 800c784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c786:	441a      	add	r2, r3
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	619a      	str	r2, [r3, #24]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	68da      	ldr	r2, [r3, #12]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	429a      	cmp	r2, r3
 800c796:	bf38      	it	cc
 800c798:	461a      	movcc	r2, r3
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	60da      	str	r2, [r3, #12]
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a4:	441a      	add	r2, r3
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	601a      	str	r2, [r3, #0]
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f47f aed4 	bne.w	800c562 <f_write+0x76>
 800c7ba:	e000      	b.n	800c7be <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c7bc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	7d1b      	ldrb	r3, [r3, #20]
 800c7c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c6:	b2da      	uxtb	r2, r3
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3730      	adds	r7, #48	; 0x30
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b086      	sub	sp, #24
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f107 0208 	add.w	r2, r7, #8
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7ff fc46 	bl	800c078 <validate>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c7f0:	7dfb      	ldrb	r3, [r7, #23]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d168      	bne.n	800c8c8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	7d1b      	ldrb	r3, [r3, #20]
 800c7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d062      	beq.n	800c8c8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	7d1b      	ldrb	r3, [r3, #20]
 800c806:	b25b      	sxtb	r3, r3
 800c808:	2b00      	cmp	r3, #0
 800c80a:	da15      	bge.n	800c838 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	7858      	ldrb	r0, [r3, #1]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a1a      	ldr	r2, [r3, #32]
 800c81a:	2301      	movs	r3, #1
 800c81c:	f7fd fec8 	bl	800a5b0 <disk_write>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d001      	beq.n	800c82a <f_sync+0x54>
 800c826:	2301      	movs	r3, #1
 800c828:	e04f      	b.n	800c8ca <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	7d1b      	ldrb	r3, [r3, #20]
 800c82e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c832:	b2da      	uxtb	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c838:	f7fd f91a 	bl	8009a70 <get_fattime>
 800c83c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c844:	4619      	mov	r1, r3
 800c846:	4610      	mov	r0, r2
 800c848:	f7fe f9a0 	bl	800ab8c <move_window>
 800c84c:	4603      	mov	r3, r0
 800c84e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c850:	7dfb      	ldrb	r3, [r7, #23]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d138      	bne.n	800c8c8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	330b      	adds	r3, #11
 800c860:	781a      	ldrb	r2, [r3, #0]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	330b      	adds	r3, #11
 800c866:	f042 0220 	orr.w	r2, r2, #32
 800c86a:	b2d2      	uxtb	r2, r2
 800c86c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6818      	ldr	r0, [r3, #0]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	461a      	mov	r2, r3
 800c878:	68f9      	ldr	r1, [r7, #12]
 800c87a:	f7fe fead 	bl	800b5d8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f103 021c 	add.w	r2, r3, #28
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	4619      	mov	r1, r3
 800c88a:	4610      	mov	r0, r2
 800c88c:	f7fd ff24 	bl	800a6d8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	3316      	adds	r3, #22
 800c894:	6939      	ldr	r1, [r7, #16]
 800c896:	4618      	mov	r0, r3
 800c898:	f7fd ff1e 	bl	800a6d8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	3312      	adds	r3, #18
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fd fefd 	bl	800a6a2 <st_word>
					fs->wflag = 1;
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7fe f999 	bl	800abe8 <sync_fs>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	7d1b      	ldrb	r3, [r3, #20]
 800c8be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8c2:	b2da      	uxtb	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3718      	adds	r7, #24
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b084      	sub	sp, #16
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7ff ff7b 	bl	800c7d6 <f_sync>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c8e4:	7bfb      	ldrb	r3, [r7, #15]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d118      	bne.n	800c91c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f107 0208 	add.w	r2, r7, #8
 800c8f0:	4611      	mov	r1, r2
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7ff fbc0 	bl	800c078 <validate>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c8fc:	7bfb      	ldrb	r3, [r7, #15]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10c      	bne.n	800c91c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	691b      	ldr	r3, [r3, #16]
 800c906:	4618      	mov	r0, r3
 800c908:	f7fe f89c 	bl	800aa44 <dec_lock>
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c910:	7bfb      	ldrb	r3, [r7, #15]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d102      	bne.n	800c91c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b090      	sub	sp, #64	; 0x40
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
 800c92e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f107 0208 	add.w	r2, r7, #8
 800c936:	4611      	mov	r1, r2
 800c938:	4618      	mov	r0, r3
 800c93a:	f7ff fb9d 	bl	800c078 <validate>
 800c93e:	4603      	mov	r3, r0
 800c940:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c944:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d103      	bne.n	800c954 <f_lseek+0x2e>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	7d5b      	ldrb	r3, [r3, #21]
 800c950:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c954:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d002      	beq.n	800c962 <f_lseek+0x3c>
 800c95c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c960:	e1e6      	b.n	800cd30 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c966:	2b00      	cmp	r3, #0
 800c968:	f000 80d1 	beq.w	800cb0e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c972:	d15a      	bne.n	800ca2a <f_lseek+0x104>
			tbl = fp->cltbl;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c978:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	1d1a      	adds	r2, r3, #4
 800c97e:	627a      	str	r2, [r7, #36]	; 0x24
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	617b      	str	r3, [r7, #20]
 800c984:	2302      	movs	r3, #2
 800c986:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c990:	2b00      	cmp	r3, #0
 800c992:	d03a      	beq.n	800ca0a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c996:	613b      	str	r3, [r7, #16]
 800c998:	2300      	movs	r3, #0
 800c99a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99e:	3302      	adds	r3, #2
 800c9a0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a4:	60fb      	str	r3, [r7, #12]
 800c9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fe f9a6 	bl	800ad02 <get_fat>
 800c9b6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d804      	bhi.n	800c9c8 <f_lseek+0xa2>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2202      	movs	r2, #2
 800c9c2:	755a      	strb	r2, [r3, #21]
 800c9c4:	2302      	movs	r3, #2
 800c9c6:	e1b3      	b.n	800cd30 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ce:	d104      	bne.n	800c9da <f_lseek+0xb4>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	755a      	strb	r2, [r3, #21]
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e1aa      	b.n	800cd30 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d0de      	beq.n	800c9a2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c9e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d809      	bhi.n	800ca00 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ee:	1d1a      	adds	r2, r3, #4
 800c9f0:	627a      	str	r2, [r7, #36]	; 0x24
 800c9f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f8:	1d1a      	adds	r2, r3, #4
 800c9fa:	627a      	str	r2, [r7, #36]	; 0x24
 800c9fc:	693a      	ldr	r2, [r7, #16]
 800c9fe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	695b      	ldr	r3, [r3, #20]
 800ca04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d3c4      	bcc.n	800c994 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca10:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ca12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d803      	bhi.n	800ca22 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	601a      	str	r2, [r3, #0]
 800ca20:	e184      	b.n	800cd2c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ca22:	2311      	movs	r3, #17
 800ca24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ca28:	e180      	b.n	800cd2c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d902      	bls.n	800ca3a <f_lseek+0x114>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	683a      	ldr	r2, [r7, #0]
 800ca3e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f000 8172 	beq.w	800cd2c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	3b01      	subs	r3, #1
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7fe fbe8 	bl	800b224 <clmt_clust>
 800ca54:	4602      	mov	r2, r0
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	69db      	ldr	r3, [r3, #28]
 800ca60:	4619      	mov	r1, r3
 800ca62:	4610      	mov	r0, r2
 800ca64:	f7fe f92e 	bl	800acc4 <clust2sect>
 800ca68:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d104      	bne.n	800ca7a <f_lseek+0x154>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2202      	movs	r2, #2
 800ca74:	755a      	strb	r2, [r3, #21]
 800ca76:	2302      	movs	r3, #2
 800ca78:	e15a      	b.n	800cd30 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	0a5b      	lsrs	r3, r3, #9
 800ca80:	68ba      	ldr	r2, [r7, #8]
 800ca82:	8952      	ldrh	r2, [r2, #10]
 800ca84:	3a01      	subs	r2, #1
 800ca86:	4013      	ands	r3, r2
 800ca88:	69ba      	ldr	r2, [r7, #24]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	699b      	ldr	r3, [r3, #24]
 800ca92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	f000 8148 	beq.w	800cd2c <f_lseek+0x406>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6a1b      	ldr	r3, [r3, #32]
 800caa0:	69ba      	ldr	r2, [r7, #24]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	f000 8142 	beq.w	800cd2c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	7d1b      	ldrb	r3, [r3, #20]
 800caac:	b25b      	sxtb	r3, r3
 800caae:	2b00      	cmp	r3, #0
 800cab0:	da18      	bge.n	800cae4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	7858      	ldrb	r0, [r3, #1]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6a1a      	ldr	r2, [r3, #32]
 800cac0:	2301      	movs	r3, #1
 800cac2:	f7fd fd75 	bl	800a5b0 <disk_write>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d004      	beq.n	800cad6 <f_lseek+0x1b0>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	755a      	strb	r2, [r3, #21]
 800cad2:	2301      	movs	r3, #1
 800cad4:	e12c      	b.n	800cd30 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	7d1b      	ldrb	r3, [r3, #20]
 800cada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	7858      	ldrb	r0, [r3, #1]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800caee:	2301      	movs	r3, #1
 800caf0:	69ba      	ldr	r2, [r7, #24]
 800caf2:	f7fd fd3d 	bl	800a570 <disk_read>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d004      	beq.n	800cb06 <f_lseek+0x1e0>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2201      	movs	r2, #1
 800cb00:	755a      	strb	r2, [r3, #21]
 800cb02:	2301      	movs	r3, #1
 800cb04:	e114      	b.n	800cd30 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	69ba      	ldr	r2, [r7, #24]
 800cb0a:	621a      	str	r2, [r3, #32]
 800cb0c:	e10e      	b.n	800cd2c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d908      	bls.n	800cb2a <f_lseek+0x204>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	7d1b      	ldrb	r3, [r3, #20]
 800cb1c:	f003 0302 	and.w	r3, r3, #2
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d102      	bne.n	800cb2a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	699b      	ldr	r3, [r3, #24]
 800cb2e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cb30:	2300      	movs	r3, #0
 800cb32:	637b      	str	r3, [r7, #52]	; 0x34
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb38:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 80a7 	beq.w	800cc90 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	895b      	ldrh	r3, [r3, #10]
 800cb46:	025b      	lsls	r3, r3, #9
 800cb48:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cb4a:	6a3b      	ldr	r3, [r7, #32]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d01b      	beq.n	800cb88 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	1e5a      	subs	r2, r3, #1
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	fbb2 f2f3 	udiv	r2, r2, r3
 800cb5a:	6a3b      	ldr	r3, [r7, #32]
 800cb5c:	1e59      	subs	r1, r3, #1
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d30f      	bcc.n	800cb88 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cb68:	6a3b      	ldr	r3, [r7, #32]
 800cb6a:	1e5a      	subs	r2, r3, #1
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	425b      	negs	r3, r3
 800cb70:	401a      	ands	r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	699b      	ldr	r3, [r3, #24]
 800cb7a:	683a      	ldr	r2, [r7, #0]
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	69db      	ldr	r3, [r3, #28]
 800cb84:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb86:	e022      	b.n	800cbce <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d119      	bne.n	800cbc8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2100      	movs	r1, #0
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7fe faab 	bl	800b0f4 <create_chain>
 800cb9e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d104      	bne.n	800cbb0 <f_lseek+0x28a>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2202      	movs	r2, #2
 800cbaa:	755a      	strb	r2, [r3, #21]
 800cbac:	2302      	movs	r3, #2
 800cbae:	e0bf      	b.n	800cd30 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb6:	d104      	bne.n	800cbc2 <f_lseek+0x29c>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	755a      	strb	r2, [r3, #21]
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e0b6      	b.n	800cd30 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbc6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbcc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800cbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d05d      	beq.n	800cc90 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800cbd4:	e03a      	b.n	800cc4c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800cbd6:	683a      	ldr	r2, [r7, #0]
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	603b      	str	r3, [r7, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	699a      	ldr	r2, [r3, #24]
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	441a      	add	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	7d1b      	ldrb	r3, [r3, #20]
 800cbee:	f003 0302 	and.w	r3, r3, #2
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00b      	beq.n	800cc0e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fe fa7a 	bl	800b0f4 <create_chain>
 800cc00:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d108      	bne.n	800cc1a <f_lseek+0x2f4>
							ofs = 0; break;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	603b      	str	r3, [r7, #0]
 800cc0c:	e022      	b.n	800cc54 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fe f875 	bl	800ad02 <get_fat>
 800cc18:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc20:	d104      	bne.n	800cc2c <f_lseek+0x306>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2201      	movs	r2, #1
 800cc26:	755a      	strb	r2, [r3, #21]
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e081      	b.n	800cd30 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d904      	bls.n	800cc3c <f_lseek+0x316>
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	695b      	ldr	r3, [r3, #20]
 800cc36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d304      	bcc.n	800cc46 <f_lseek+0x320>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2202      	movs	r2, #2
 800cc40:	755a      	strb	r2, [r3, #21]
 800cc42:	2302      	movs	r3, #2
 800cc44:	e074      	b.n	800cd30 <f_lseek+0x40a>
					fp->clust = clst;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc4a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d8c0      	bhi.n	800cbd6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	699a      	ldr	r2, [r3, #24]
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	441a      	add	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d012      	beq.n	800cc90 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe f828 	bl	800acc4 <clust2sect>
 800cc74:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d104      	bne.n	800cc86 <f_lseek+0x360>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2202      	movs	r2, #2
 800cc80:	755a      	strb	r2, [r3, #21]
 800cc82:	2302      	movs	r3, #2
 800cc84:	e054      	b.n	800cd30 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	0a5b      	lsrs	r3, r3, #9
 800cc8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc8c:	4413      	add	r3, r2
 800cc8e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	699a      	ldr	r2, [r3, #24]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d90a      	bls.n	800ccb2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	699a      	ldr	r2, [r3, #24]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	7d1b      	ldrb	r3, [r3, #20]
 800cca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d036      	beq.n	800cd2c <f_lseek+0x406>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6a1b      	ldr	r3, [r3, #32]
 800ccc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d031      	beq.n	800cd2c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	7d1b      	ldrb	r3, [r3, #20]
 800cccc:	b25b      	sxtb	r3, r3
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	da18      	bge.n	800cd04 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	7858      	ldrb	r0, [r3, #1]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a1a      	ldr	r2, [r3, #32]
 800cce0:	2301      	movs	r3, #1
 800cce2:	f7fd fc65 	bl	800a5b0 <disk_write>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d004      	beq.n	800ccf6 <f_lseek+0x3d0>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	755a      	strb	r2, [r3, #21]
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e01c      	b.n	800cd30 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	7d1b      	ldrb	r3, [r3, #20]
 800ccfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	7858      	ldrb	r0, [r3, #1]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd0e:	2301      	movs	r3, #1
 800cd10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd12:	f7fd fc2d 	bl	800a570 <disk_read>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d004      	beq.n	800cd26 <f_lseek+0x400>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	755a      	strb	r2, [r3, #21]
 800cd22:	2301      	movs	r3, #1
 800cd24:	e004      	b.n	800cd30 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd2a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cd2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3740      	adds	r7, #64	; 0x40
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b086      	sub	sp, #24
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d101      	bne.n	800cd4c <f_opendir+0x14>
 800cd48:	2309      	movs	r3, #9
 800cd4a:	e064      	b.n	800ce16 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800cd50:	f107 010c 	add.w	r1, r7, #12
 800cd54:	463b      	mov	r3, r7
 800cd56:	2200      	movs	r2, #0
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7fe ff41 	bl	800bbe0 <find_volume>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d14f      	bne.n	800ce08 <f_opendir+0xd0>
		obj->fs = fs;
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	4619      	mov	r1, r3
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7fe fe28 	bl	800b9c8 <follow_path>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800cd7c:	7dfb      	ldrb	r3, [r7, #23]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d13d      	bne.n	800cdfe <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd88:	b25b      	sxtb	r3, r3
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	db12      	blt.n	800cdb4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	799b      	ldrb	r3, [r3, #6]
 800cd92:	f003 0310 	and.w	r3, r3, #16
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00a      	beq.n	800cdb0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a1b      	ldr	r3, [r3, #32]
 800cda0:	4619      	mov	r1, r3
 800cda2:	4610      	mov	r0, r2
 800cda4:	f7fe fbf9 	bl	800b59a <ld_clust>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	609a      	str	r2, [r3, #8]
 800cdae:	e001      	b.n	800cdb4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800cdb0:	2305      	movs	r3, #5
 800cdb2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d121      	bne.n	800cdfe <f_opendir+0xc6>
				obj->id = fs->id;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	88da      	ldrh	r2, [r3, #6]
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f7fe fa61 	bl	800b28c <dir_sdi>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800cdce:	7dfb      	ldrb	r3, [r7, #23]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d114      	bne.n	800cdfe <f_opendir+0xc6>
					if (obj->sclust) {
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00d      	beq.n	800cdf8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800cddc:	2100      	movs	r1, #0
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7fd fda2 	bl	800a928 <inc_lock>
 800cde4:	4602      	mov	r2, r0
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	691b      	ldr	r3, [r3, #16]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d105      	bne.n	800cdfe <f_opendir+0xc6>
 800cdf2:	2312      	movs	r3, #18
 800cdf4:	75fb      	strb	r3, [r7, #23]
 800cdf6:	e002      	b.n	800cdfe <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800cdfe:	7dfb      	ldrb	r3, [r7, #23]
 800ce00:	2b04      	cmp	r3, #4
 800ce02:	d101      	bne.n	800ce08 <f_opendir+0xd0>
 800ce04:	2305      	movs	r3, #5
 800ce06:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ce08:	7dfb      	ldrb	r3, [r7, #23]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d002      	beq.n	800ce14 <f_opendir+0xdc>
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	2200      	movs	r2, #0
 800ce12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ce14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3718      	adds	r7, #24
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b084      	sub	sp, #16
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f107 0208 	add.w	r2, r7, #8
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7ff f922 	bl	800c078 <validate>
 800ce34:	4603      	mov	r3, r0
 800ce36:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ce38:	7bfb      	ldrb	r3, [r7, #15]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d110      	bne.n	800ce60 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	691b      	ldr	r3, [r3, #16]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d006      	beq.n	800ce54 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7fd fdfa 	bl	800aa44 <dec_lock>
 800ce50:	4603      	mov	r3, r0
 800ce52:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800ce54:	7bfb      	ldrb	r3, [r7, #15]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d102      	bne.n	800ce60 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800ce60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b084      	sub	sp, #16
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f107 0208 	add.w	r2, r7, #8
 800ce7a:	4611      	mov	r1, r2
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7ff f8fb 	bl	800c078 <validate>
 800ce82:	4603      	mov	r3, r0
 800ce84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ce86:	7bfb      	ldrb	r3, [r7, #15]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d126      	bne.n	800ceda <f_readdir+0x70>
		if (!fno) {
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d106      	bne.n	800cea0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ce92:	2100      	movs	r1, #0
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f7fe f9f9 	bl	800b28c <dir_sdi>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	73fb      	strb	r3, [r7, #15]
 800ce9e:	e01c      	b.n	800ceda <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800cea0:	2100      	movs	r1, #0
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7fe fbb8 	bl	800b618 <dir_read>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
 800ceae:	2b04      	cmp	r3, #4
 800ceb0:	d101      	bne.n	800ceb6 <f_readdir+0x4c>
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ceb6:	7bfb      	ldrb	r3, [r7, #15]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10e      	bne.n	800ceda <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800cebc:	6839      	ldr	r1, [r7, #0]
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7fe fc8e 	bl	800b7e0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800cec4:	2100      	movs	r1, #0
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7fe fa5b 	bl	800b382 <dir_next>
 800cecc:	4603      	mov	r3, r0
 800cece:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ced0:	7bfb      	ldrb	r3, [r7, #15]
 800ced2:	2b04      	cmp	r3, #4
 800ced4:	d101      	bne.n	800ceda <f_readdir+0x70>
 800ced6:	2300      	movs	r3, #0
 800ced8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b087      	sub	sp, #28
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	4613      	mov	r3, r2
 800cef0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cef2:	2301      	movs	r3, #1
 800cef4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cef6:	2300      	movs	r3, #0
 800cef8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cefa:	4b1f      	ldr	r3, [pc, #124]	; (800cf78 <FATFS_LinkDriverEx+0x94>)
 800cefc:	7a5b      	ldrb	r3, [r3, #9]
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d131      	bne.n	800cf68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cf04:	4b1c      	ldr	r3, [pc, #112]	; (800cf78 <FATFS_LinkDriverEx+0x94>)
 800cf06:	7a5b      	ldrb	r3, [r3, #9]
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	4b1a      	ldr	r3, [pc, #104]	; (800cf78 <FATFS_LinkDriverEx+0x94>)
 800cf0e:	2100      	movs	r1, #0
 800cf10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cf12:	4b19      	ldr	r3, [pc, #100]	; (800cf78 <FATFS_LinkDriverEx+0x94>)
 800cf14:	7a5b      	ldrb	r3, [r3, #9]
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	4a17      	ldr	r2, [pc, #92]	; (800cf78 <FATFS_LinkDriverEx+0x94>)
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	4413      	add	r3, r2
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cf22:	4b15      	ldr	r3, [pc, #84]	; (800cf78 <FATFS_LinkDriverEx+0x94>)
 800cf24:	7a5b      	ldrb	r3, [r3, #9]
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	461a      	mov	r2, r3
 800cf2a:	4b13      	ldr	r3, [pc, #76]	; (800cf78 <FATFS_LinkDriverEx+0x94>)
 800cf2c:	4413      	add	r3, r2
 800cf2e:	79fa      	ldrb	r2, [r7, #7]
 800cf30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cf32:	4b11      	ldr	r3, [pc, #68]	; (800cf78 <FATFS_LinkDriverEx+0x94>)
 800cf34:	7a5b      	ldrb	r3, [r3, #9]
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	1c5a      	adds	r2, r3, #1
 800cf3a:	b2d1      	uxtb	r1, r2
 800cf3c:	4a0e      	ldr	r2, [pc, #56]	; (800cf78 <FATFS_LinkDriverEx+0x94>)
 800cf3e:	7251      	strb	r1, [r2, #9]
 800cf40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cf42:	7dbb      	ldrb	r3, [r7, #22]
 800cf44:	3330      	adds	r3, #48	; 0x30
 800cf46:	b2da      	uxtb	r2, r3
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	223a      	movs	r2, #58	; 0x3a
 800cf52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	3302      	adds	r3, #2
 800cf58:	222f      	movs	r2, #47	; 0x2f
 800cf5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	3303      	adds	r3, #3
 800cf60:	2200      	movs	r2, #0
 800cf62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cf64:	2300      	movs	r3, #0
 800cf66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	371c      	adds	r7, #28
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	200004f0 	.word	0x200004f0

0800cf7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cf86:	2200      	movs	r2, #0
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7ff ffaa 	bl	800cee4 <FATFS_LinkDriverEx>
 800cf90:	4603      	mov	r3, r0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
	...

0800cf9c <__errno>:
 800cf9c:	4b01      	ldr	r3, [pc, #4]	; (800cfa4 <__errno+0x8>)
 800cf9e:	6818      	ldr	r0, [r3, #0]
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop
 800cfa4:	20000028 	.word	0x20000028

0800cfa8 <__libc_init_array>:
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	4d0d      	ldr	r5, [pc, #52]	; (800cfe0 <__libc_init_array+0x38>)
 800cfac:	4c0d      	ldr	r4, [pc, #52]	; (800cfe4 <__libc_init_array+0x3c>)
 800cfae:	1b64      	subs	r4, r4, r5
 800cfb0:	10a4      	asrs	r4, r4, #2
 800cfb2:	2600      	movs	r6, #0
 800cfb4:	42a6      	cmp	r6, r4
 800cfb6:	d109      	bne.n	800cfcc <__libc_init_array+0x24>
 800cfb8:	4d0b      	ldr	r5, [pc, #44]	; (800cfe8 <__libc_init_array+0x40>)
 800cfba:	4c0c      	ldr	r4, [pc, #48]	; (800cfec <__libc_init_array+0x44>)
 800cfbc:	f005 fc3a 	bl	8012834 <_init>
 800cfc0:	1b64      	subs	r4, r4, r5
 800cfc2:	10a4      	asrs	r4, r4, #2
 800cfc4:	2600      	movs	r6, #0
 800cfc6:	42a6      	cmp	r6, r4
 800cfc8:	d105      	bne.n	800cfd6 <__libc_init_array+0x2e>
 800cfca:	bd70      	pop	{r4, r5, r6, pc}
 800cfcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfd0:	4798      	blx	r3
 800cfd2:	3601      	adds	r6, #1
 800cfd4:	e7ee      	b.n	800cfb4 <__libc_init_array+0xc>
 800cfd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfda:	4798      	blx	r3
 800cfdc:	3601      	adds	r6, #1
 800cfde:	e7f2      	b.n	800cfc6 <__libc_init_array+0x1e>
 800cfe0:	080130a8 	.word	0x080130a8
 800cfe4:	080130a8 	.word	0x080130a8
 800cfe8:	080130a8 	.word	0x080130a8
 800cfec:	080130ac 	.word	0x080130ac

0800cff0 <malloc>:
 800cff0:	4b02      	ldr	r3, [pc, #8]	; (800cffc <malloc+0xc>)
 800cff2:	4601      	mov	r1, r0
 800cff4:	6818      	ldr	r0, [r3, #0]
 800cff6:	f000 b869 	b.w	800d0cc <_malloc_r>
 800cffa:	bf00      	nop
 800cffc:	20000028 	.word	0x20000028

0800d000 <memcpy>:
 800d000:	440a      	add	r2, r1
 800d002:	4291      	cmp	r1, r2
 800d004:	f100 33ff 	add.w	r3, r0, #4294967295
 800d008:	d100      	bne.n	800d00c <memcpy+0xc>
 800d00a:	4770      	bx	lr
 800d00c:	b510      	push	{r4, lr}
 800d00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d012:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d016:	4291      	cmp	r1, r2
 800d018:	d1f9      	bne.n	800d00e <memcpy+0xe>
 800d01a:	bd10      	pop	{r4, pc}

0800d01c <memset>:
 800d01c:	4402      	add	r2, r0
 800d01e:	4603      	mov	r3, r0
 800d020:	4293      	cmp	r3, r2
 800d022:	d100      	bne.n	800d026 <memset+0xa>
 800d024:	4770      	bx	lr
 800d026:	f803 1b01 	strb.w	r1, [r3], #1
 800d02a:	e7f9      	b.n	800d020 <memset+0x4>

0800d02c <_free_r>:
 800d02c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d02e:	2900      	cmp	r1, #0
 800d030:	d048      	beq.n	800d0c4 <_free_r+0x98>
 800d032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d036:	9001      	str	r0, [sp, #4]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f1a1 0404 	sub.w	r4, r1, #4
 800d03e:	bfb8      	it	lt
 800d040:	18e4      	addlt	r4, r4, r3
 800d042:	f003 fbb3 	bl	80107ac <__malloc_lock>
 800d046:	4a20      	ldr	r2, [pc, #128]	; (800d0c8 <_free_r+0x9c>)
 800d048:	9801      	ldr	r0, [sp, #4]
 800d04a:	6813      	ldr	r3, [r2, #0]
 800d04c:	4615      	mov	r5, r2
 800d04e:	b933      	cbnz	r3, 800d05e <_free_r+0x32>
 800d050:	6063      	str	r3, [r4, #4]
 800d052:	6014      	str	r4, [r2, #0]
 800d054:	b003      	add	sp, #12
 800d056:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d05a:	f003 bbad 	b.w	80107b8 <__malloc_unlock>
 800d05e:	42a3      	cmp	r3, r4
 800d060:	d90b      	bls.n	800d07a <_free_r+0x4e>
 800d062:	6821      	ldr	r1, [r4, #0]
 800d064:	1862      	adds	r2, r4, r1
 800d066:	4293      	cmp	r3, r2
 800d068:	bf04      	itt	eq
 800d06a:	681a      	ldreq	r2, [r3, #0]
 800d06c:	685b      	ldreq	r3, [r3, #4]
 800d06e:	6063      	str	r3, [r4, #4]
 800d070:	bf04      	itt	eq
 800d072:	1852      	addeq	r2, r2, r1
 800d074:	6022      	streq	r2, [r4, #0]
 800d076:	602c      	str	r4, [r5, #0]
 800d078:	e7ec      	b.n	800d054 <_free_r+0x28>
 800d07a:	461a      	mov	r2, r3
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	b10b      	cbz	r3, 800d084 <_free_r+0x58>
 800d080:	42a3      	cmp	r3, r4
 800d082:	d9fa      	bls.n	800d07a <_free_r+0x4e>
 800d084:	6811      	ldr	r1, [r2, #0]
 800d086:	1855      	adds	r5, r2, r1
 800d088:	42a5      	cmp	r5, r4
 800d08a:	d10b      	bne.n	800d0a4 <_free_r+0x78>
 800d08c:	6824      	ldr	r4, [r4, #0]
 800d08e:	4421      	add	r1, r4
 800d090:	1854      	adds	r4, r2, r1
 800d092:	42a3      	cmp	r3, r4
 800d094:	6011      	str	r1, [r2, #0]
 800d096:	d1dd      	bne.n	800d054 <_free_r+0x28>
 800d098:	681c      	ldr	r4, [r3, #0]
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	6053      	str	r3, [r2, #4]
 800d09e:	4421      	add	r1, r4
 800d0a0:	6011      	str	r1, [r2, #0]
 800d0a2:	e7d7      	b.n	800d054 <_free_r+0x28>
 800d0a4:	d902      	bls.n	800d0ac <_free_r+0x80>
 800d0a6:	230c      	movs	r3, #12
 800d0a8:	6003      	str	r3, [r0, #0]
 800d0aa:	e7d3      	b.n	800d054 <_free_r+0x28>
 800d0ac:	6825      	ldr	r5, [r4, #0]
 800d0ae:	1961      	adds	r1, r4, r5
 800d0b0:	428b      	cmp	r3, r1
 800d0b2:	bf04      	itt	eq
 800d0b4:	6819      	ldreq	r1, [r3, #0]
 800d0b6:	685b      	ldreq	r3, [r3, #4]
 800d0b8:	6063      	str	r3, [r4, #4]
 800d0ba:	bf04      	itt	eq
 800d0bc:	1949      	addeq	r1, r1, r5
 800d0be:	6021      	streq	r1, [r4, #0]
 800d0c0:	6054      	str	r4, [r2, #4]
 800d0c2:	e7c7      	b.n	800d054 <_free_r+0x28>
 800d0c4:	b003      	add	sp, #12
 800d0c6:	bd30      	pop	{r4, r5, pc}
 800d0c8:	200004fc 	.word	0x200004fc

0800d0cc <_malloc_r>:
 800d0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ce:	1ccd      	adds	r5, r1, #3
 800d0d0:	f025 0503 	bic.w	r5, r5, #3
 800d0d4:	3508      	adds	r5, #8
 800d0d6:	2d0c      	cmp	r5, #12
 800d0d8:	bf38      	it	cc
 800d0da:	250c      	movcc	r5, #12
 800d0dc:	2d00      	cmp	r5, #0
 800d0de:	4606      	mov	r6, r0
 800d0e0:	db01      	blt.n	800d0e6 <_malloc_r+0x1a>
 800d0e2:	42a9      	cmp	r1, r5
 800d0e4:	d903      	bls.n	800d0ee <_malloc_r+0x22>
 800d0e6:	230c      	movs	r3, #12
 800d0e8:	6033      	str	r3, [r6, #0]
 800d0ea:	2000      	movs	r0, #0
 800d0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0ee:	f003 fb5d 	bl	80107ac <__malloc_lock>
 800d0f2:	4921      	ldr	r1, [pc, #132]	; (800d178 <_malloc_r+0xac>)
 800d0f4:	680a      	ldr	r2, [r1, #0]
 800d0f6:	4614      	mov	r4, r2
 800d0f8:	b99c      	cbnz	r4, 800d122 <_malloc_r+0x56>
 800d0fa:	4f20      	ldr	r7, [pc, #128]	; (800d17c <_malloc_r+0xb0>)
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	b923      	cbnz	r3, 800d10a <_malloc_r+0x3e>
 800d100:	4621      	mov	r1, r4
 800d102:	4630      	mov	r0, r6
 800d104:	f000 feb6 	bl	800de74 <_sbrk_r>
 800d108:	6038      	str	r0, [r7, #0]
 800d10a:	4629      	mov	r1, r5
 800d10c:	4630      	mov	r0, r6
 800d10e:	f000 feb1 	bl	800de74 <_sbrk_r>
 800d112:	1c43      	adds	r3, r0, #1
 800d114:	d123      	bne.n	800d15e <_malloc_r+0x92>
 800d116:	230c      	movs	r3, #12
 800d118:	6033      	str	r3, [r6, #0]
 800d11a:	4630      	mov	r0, r6
 800d11c:	f003 fb4c 	bl	80107b8 <__malloc_unlock>
 800d120:	e7e3      	b.n	800d0ea <_malloc_r+0x1e>
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	1b5b      	subs	r3, r3, r5
 800d126:	d417      	bmi.n	800d158 <_malloc_r+0x8c>
 800d128:	2b0b      	cmp	r3, #11
 800d12a:	d903      	bls.n	800d134 <_malloc_r+0x68>
 800d12c:	6023      	str	r3, [r4, #0]
 800d12e:	441c      	add	r4, r3
 800d130:	6025      	str	r5, [r4, #0]
 800d132:	e004      	b.n	800d13e <_malloc_r+0x72>
 800d134:	6863      	ldr	r3, [r4, #4]
 800d136:	42a2      	cmp	r2, r4
 800d138:	bf0c      	ite	eq
 800d13a:	600b      	streq	r3, [r1, #0]
 800d13c:	6053      	strne	r3, [r2, #4]
 800d13e:	4630      	mov	r0, r6
 800d140:	f003 fb3a 	bl	80107b8 <__malloc_unlock>
 800d144:	f104 000b 	add.w	r0, r4, #11
 800d148:	1d23      	adds	r3, r4, #4
 800d14a:	f020 0007 	bic.w	r0, r0, #7
 800d14e:	1ac2      	subs	r2, r0, r3
 800d150:	d0cc      	beq.n	800d0ec <_malloc_r+0x20>
 800d152:	1a1b      	subs	r3, r3, r0
 800d154:	50a3      	str	r3, [r4, r2]
 800d156:	e7c9      	b.n	800d0ec <_malloc_r+0x20>
 800d158:	4622      	mov	r2, r4
 800d15a:	6864      	ldr	r4, [r4, #4]
 800d15c:	e7cc      	b.n	800d0f8 <_malloc_r+0x2c>
 800d15e:	1cc4      	adds	r4, r0, #3
 800d160:	f024 0403 	bic.w	r4, r4, #3
 800d164:	42a0      	cmp	r0, r4
 800d166:	d0e3      	beq.n	800d130 <_malloc_r+0x64>
 800d168:	1a21      	subs	r1, r4, r0
 800d16a:	4630      	mov	r0, r6
 800d16c:	f000 fe82 	bl	800de74 <_sbrk_r>
 800d170:	3001      	adds	r0, #1
 800d172:	d1dd      	bne.n	800d130 <_malloc_r+0x64>
 800d174:	e7cf      	b.n	800d116 <_malloc_r+0x4a>
 800d176:	bf00      	nop
 800d178:	200004fc 	.word	0x200004fc
 800d17c:	20000500 	.word	0x20000500

0800d180 <__cvt>:
 800d180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d184:	ec55 4b10 	vmov	r4, r5, d0
 800d188:	2d00      	cmp	r5, #0
 800d18a:	460e      	mov	r6, r1
 800d18c:	4619      	mov	r1, r3
 800d18e:	462b      	mov	r3, r5
 800d190:	bfbb      	ittet	lt
 800d192:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d196:	461d      	movlt	r5, r3
 800d198:	2300      	movge	r3, #0
 800d19a:	232d      	movlt	r3, #45	; 0x2d
 800d19c:	700b      	strb	r3, [r1, #0]
 800d19e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d1a4:	4691      	mov	r9, r2
 800d1a6:	f023 0820 	bic.w	r8, r3, #32
 800d1aa:	bfbc      	itt	lt
 800d1ac:	4622      	movlt	r2, r4
 800d1ae:	4614      	movlt	r4, r2
 800d1b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d1b4:	d005      	beq.n	800d1c2 <__cvt+0x42>
 800d1b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d1ba:	d100      	bne.n	800d1be <__cvt+0x3e>
 800d1bc:	3601      	adds	r6, #1
 800d1be:	2102      	movs	r1, #2
 800d1c0:	e000      	b.n	800d1c4 <__cvt+0x44>
 800d1c2:	2103      	movs	r1, #3
 800d1c4:	ab03      	add	r3, sp, #12
 800d1c6:	9301      	str	r3, [sp, #4]
 800d1c8:	ab02      	add	r3, sp, #8
 800d1ca:	9300      	str	r3, [sp, #0]
 800d1cc:	ec45 4b10 	vmov	d0, r4, r5
 800d1d0:	4653      	mov	r3, sl
 800d1d2:	4632      	mov	r2, r6
 800d1d4:	f001 ff48 	bl	800f068 <_dtoa_r>
 800d1d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d1dc:	4607      	mov	r7, r0
 800d1de:	d102      	bne.n	800d1e6 <__cvt+0x66>
 800d1e0:	f019 0f01 	tst.w	r9, #1
 800d1e4:	d022      	beq.n	800d22c <__cvt+0xac>
 800d1e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d1ea:	eb07 0906 	add.w	r9, r7, r6
 800d1ee:	d110      	bne.n	800d212 <__cvt+0x92>
 800d1f0:	783b      	ldrb	r3, [r7, #0]
 800d1f2:	2b30      	cmp	r3, #48	; 0x30
 800d1f4:	d10a      	bne.n	800d20c <__cvt+0x8c>
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	4629      	mov	r1, r5
 800d1fe:	f7f3 fc73 	bl	8000ae8 <__aeabi_dcmpeq>
 800d202:	b918      	cbnz	r0, 800d20c <__cvt+0x8c>
 800d204:	f1c6 0601 	rsb	r6, r6, #1
 800d208:	f8ca 6000 	str.w	r6, [sl]
 800d20c:	f8da 3000 	ldr.w	r3, [sl]
 800d210:	4499      	add	r9, r3
 800d212:	2200      	movs	r2, #0
 800d214:	2300      	movs	r3, #0
 800d216:	4620      	mov	r0, r4
 800d218:	4629      	mov	r1, r5
 800d21a:	f7f3 fc65 	bl	8000ae8 <__aeabi_dcmpeq>
 800d21e:	b108      	cbz	r0, 800d224 <__cvt+0xa4>
 800d220:	f8cd 900c 	str.w	r9, [sp, #12]
 800d224:	2230      	movs	r2, #48	; 0x30
 800d226:	9b03      	ldr	r3, [sp, #12]
 800d228:	454b      	cmp	r3, r9
 800d22a:	d307      	bcc.n	800d23c <__cvt+0xbc>
 800d22c:	9b03      	ldr	r3, [sp, #12]
 800d22e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d230:	1bdb      	subs	r3, r3, r7
 800d232:	4638      	mov	r0, r7
 800d234:	6013      	str	r3, [r2, #0]
 800d236:	b004      	add	sp, #16
 800d238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d23c:	1c59      	adds	r1, r3, #1
 800d23e:	9103      	str	r1, [sp, #12]
 800d240:	701a      	strb	r2, [r3, #0]
 800d242:	e7f0      	b.n	800d226 <__cvt+0xa6>

0800d244 <__exponent>:
 800d244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d246:	4603      	mov	r3, r0
 800d248:	2900      	cmp	r1, #0
 800d24a:	bfb8      	it	lt
 800d24c:	4249      	neglt	r1, r1
 800d24e:	f803 2b02 	strb.w	r2, [r3], #2
 800d252:	bfb4      	ite	lt
 800d254:	222d      	movlt	r2, #45	; 0x2d
 800d256:	222b      	movge	r2, #43	; 0x2b
 800d258:	2909      	cmp	r1, #9
 800d25a:	7042      	strb	r2, [r0, #1]
 800d25c:	dd2a      	ble.n	800d2b4 <__exponent+0x70>
 800d25e:	f10d 0407 	add.w	r4, sp, #7
 800d262:	46a4      	mov	ip, r4
 800d264:	270a      	movs	r7, #10
 800d266:	46a6      	mov	lr, r4
 800d268:	460a      	mov	r2, r1
 800d26a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d26e:	fb07 1516 	mls	r5, r7, r6, r1
 800d272:	3530      	adds	r5, #48	; 0x30
 800d274:	2a63      	cmp	r2, #99	; 0x63
 800d276:	f104 34ff 	add.w	r4, r4, #4294967295
 800d27a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d27e:	4631      	mov	r1, r6
 800d280:	dcf1      	bgt.n	800d266 <__exponent+0x22>
 800d282:	3130      	adds	r1, #48	; 0x30
 800d284:	f1ae 0502 	sub.w	r5, lr, #2
 800d288:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d28c:	1c44      	adds	r4, r0, #1
 800d28e:	4629      	mov	r1, r5
 800d290:	4561      	cmp	r1, ip
 800d292:	d30a      	bcc.n	800d2aa <__exponent+0x66>
 800d294:	f10d 0209 	add.w	r2, sp, #9
 800d298:	eba2 020e 	sub.w	r2, r2, lr
 800d29c:	4565      	cmp	r5, ip
 800d29e:	bf88      	it	hi
 800d2a0:	2200      	movhi	r2, #0
 800d2a2:	4413      	add	r3, r2
 800d2a4:	1a18      	subs	r0, r3, r0
 800d2a6:	b003      	add	sp, #12
 800d2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d2b2:	e7ed      	b.n	800d290 <__exponent+0x4c>
 800d2b4:	2330      	movs	r3, #48	; 0x30
 800d2b6:	3130      	adds	r1, #48	; 0x30
 800d2b8:	7083      	strb	r3, [r0, #2]
 800d2ba:	70c1      	strb	r1, [r0, #3]
 800d2bc:	1d03      	adds	r3, r0, #4
 800d2be:	e7f1      	b.n	800d2a4 <__exponent+0x60>

0800d2c0 <_printf_float>:
 800d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c4:	ed2d 8b02 	vpush	{d8}
 800d2c8:	b08d      	sub	sp, #52	; 0x34
 800d2ca:	460c      	mov	r4, r1
 800d2cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d2d0:	4616      	mov	r6, r2
 800d2d2:	461f      	mov	r7, r3
 800d2d4:	4605      	mov	r5, r0
 800d2d6:	f003 f9d9 	bl	801068c <_localeconv_r>
 800d2da:	f8d0 a000 	ldr.w	sl, [r0]
 800d2de:	4650      	mov	r0, sl
 800d2e0:	f7f2 ff86 	bl	80001f0 <strlen>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	930a      	str	r3, [sp, #40]	; 0x28
 800d2e8:	6823      	ldr	r3, [r4, #0]
 800d2ea:	9305      	str	r3, [sp, #20]
 800d2ec:	f8d8 3000 	ldr.w	r3, [r8]
 800d2f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d2f4:	3307      	adds	r3, #7
 800d2f6:	f023 0307 	bic.w	r3, r3, #7
 800d2fa:	f103 0208 	add.w	r2, r3, #8
 800d2fe:	f8c8 2000 	str.w	r2, [r8]
 800d302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d306:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d30a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d30e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d312:	9307      	str	r3, [sp, #28]
 800d314:	f8cd 8018 	str.w	r8, [sp, #24]
 800d318:	ee08 0a10 	vmov	s16, r0
 800d31c:	4b9f      	ldr	r3, [pc, #636]	; (800d59c <_printf_float+0x2dc>)
 800d31e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d322:	f04f 32ff 	mov.w	r2, #4294967295
 800d326:	f7f3 fc11 	bl	8000b4c <__aeabi_dcmpun>
 800d32a:	bb88      	cbnz	r0, 800d390 <_printf_float+0xd0>
 800d32c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d330:	4b9a      	ldr	r3, [pc, #616]	; (800d59c <_printf_float+0x2dc>)
 800d332:	f04f 32ff 	mov.w	r2, #4294967295
 800d336:	f7f3 fbeb 	bl	8000b10 <__aeabi_dcmple>
 800d33a:	bb48      	cbnz	r0, 800d390 <_printf_float+0xd0>
 800d33c:	2200      	movs	r2, #0
 800d33e:	2300      	movs	r3, #0
 800d340:	4640      	mov	r0, r8
 800d342:	4649      	mov	r1, r9
 800d344:	f7f3 fbda 	bl	8000afc <__aeabi_dcmplt>
 800d348:	b110      	cbz	r0, 800d350 <_printf_float+0x90>
 800d34a:	232d      	movs	r3, #45	; 0x2d
 800d34c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d350:	4b93      	ldr	r3, [pc, #588]	; (800d5a0 <_printf_float+0x2e0>)
 800d352:	4894      	ldr	r0, [pc, #592]	; (800d5a4 <_printf_float+0x2e4>)
 800d354:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d358:	bf94      	ite	ls
 800d35a:	4698      	movls	r8, r3
 800d35c:	4680      	movhi	r8, r0
 800d35e:	2303      	movs	r3, #3
 800d360:	6123      	str	r3, [r4, #16]
 800d362:	9b05      	ldr	r3, [sp, #20]
 800d364:	f023 0204 	bic.w	r2, r3, #4
 800d368:	6022      	str	r2, [r4, #0]
 800d36a:	f04f 0900 	mov.w	r9, #0
 800d36e:	9700      	str	r7, [sp, #0]
 800d370:	4633      	mov	r3, r6
 800d372:	aa0b      	add	r2, sp, #44	; 0x2c
 800d374:	4621      	mov	r1, r4
 800d376:	4628      	mov	r0, r5
 800d378:	f000 f9d8 	bl	800d72c <_printf_common>
 800d37c:	3001      	adds	r0, #1
 800d37e:	f040 8090 	bne.w	800d4a2 <_printf_float+0x1e2>
 800d382:	f04f 30ff 	mov.w	r0, #4294967295
 800d386:	b00d      	add	sp, #52	; 0x34
 800d388:	ecbd 8b02 	vpop	{d8}
 800d38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d390:	4642      	mov	r2, r8
 800d392:	464b      	mov	r3, r9
 800d394:	4640      	mov	r0, r8
 800d396:	4649      	mov	r1, r9
 800d398:	f7f3 fbd8 	bl	8000b4c <__aeabi_dcmpun>
 800d39c:	b140      	cbz	r0, 800d3b0 <_printf_float+0xf0>
 800d39e:	464b      	mov	r3, r9
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	bfbc      	itt	lt
 800d3a4:	232d      	movlt	r3, #45	; 0x2d
 800d3a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d3aa:	487f      	ldr	r0, [pc, #508]	; (800d5a8 <_printf_float+0x2e8>)
 800d3ac:	4b7f      	ldr	r3, [pc, #508]	; (800d5ac <_printf_float+0x2ec>)
 800d3ae:	e7d1      	b.n	800d354 <_printf_float+0x94>
 800d3b0:	6863      	ldr	r3, [r4, #4]
 800d3b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d3b6:	9206      	str	r2, [sp, #24]
 800d3b8:	1c5a      	adds	r2, r3, #1
 800d3ba:	d13f      	bne.n	800d43c <_printf_float+0x17c>
 800d3bc:	2306      	movs	r3, #6
 800d3be:	6063      	str	r3, [r4, #4]
 800d3c0:	9b05      	ldr	r3, [sp, #20]
 800d3c2:	6861      	ldr	r1, [r4, #4]
 800d3c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	9303      	str	r3, [sp, #12]
 800d3cc:	ab0a      	add	r3, sp, #40	; 0x28
 800d3ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d3d2:	ab09      	add	r3, sp, #36	; 0x24
 800d3d4:	ec49 8b10 	vmov	d0, r8, r9
 800d3d8:	9300      	str	r3, [sp, #0]
 800d3da:	6022      	str	r2, [r4, #0]
 800d3dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	f7ff fecd 	bl	800d180 <__cvt>
 800d3e6:	9b06      	ldr	r3, [sp, #24]
 800d3e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3ea:	2b47      	cmp	r3, #71	; 0x47
 800d3ec:	4680      	mov	r8, r0
 800d3ee:	d108      	bne.n	800d402 <_printf_float+0x142>
 800d3f0:	1cc8      	adds	r0, r1, #3
 800d3f2:	db02      	blt.n	800d3fa <_printf_float+0x13a>
 800d3f4:	6863      	ldr	r3, [r4, #4]
 800d3f6:	4299      	cmp	r1, r3
 800d3f8:	dd41      	ble.n	800d47e <_printf_float+0x1be>
 800d3fa:	f1ab 0b02 	sub.w	fp, fp, #2
 800d3fe:	fa5f fb8b 	uxtb.w	fp, fp
 800d402:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d406:	d820      	bhi.n	800d44a <_printf_float+0x18a>
 800d408:	3901      	subs	r1, #1
 800d40a:	465a      	mov	r2, fp
 800d40c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d410:	9109      	str	r1, [sp, #36]	; 0x24
 800d412:	f7ff ff17 	bl	800d244 <__exponent>
 800d416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d418:	1813      	adds	r3, r2, r0
 800d41a:	2a01      	cmp	r2, #1
 800d41c:	4681      	mov	r9, r0
 800d41e:	6123      	str	r3, [r4, #16]
 800d420:	dc02      	bgt.n	800d428 <_printf_float+0x168>
 800d422:	6822      	ldr	r2, [r4, #0]
 800d424:	07d2      	lsls	r2, r2, #31
 800d426:	d501      	bpl.n	800d42c <_printf_float+0x16c>
 800d428:	3301      	adds	r3, #1
 800d42a:	6123      	str	r3, [r4, #16]
 800d42c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d430:	2b00      	cmp	r3, #0
 800d432:	d09c      	beq.n	800d36e <_printf_float+0xae>
 800d434:	232d      	movs	r3, #45	; 0x2d
 800d436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d43a:	e798      	b.n	800d36e <_printf_float+0xae>
 800d43c:	9a06      	ldr	r2, [sp, #24]
 800d43e:	2a47      	cmp	r2, #71	; 0x47
 800d440:	d1be      	bne.n	800d3c0 <_printf_float+0x100>
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1bc      	bne.n	800d3c0 <_printf_float+0x100>
 800d446:	2301      	movs	r3, #1
 800d448:	e7b9      	b.n	800d3be <_printf_float+0xfe>
 800d44a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d44e:	d118      	bne.n	800d482 <_printf_float+0x1c2>
 800d450:	2900      	cmp	r1, #0
 800d452:	6863      	ldr	r3, [r4, #4]
 800d454:	dd0b      	ble.n	800d46e <_printf_float+0x1ae>
 800d456:	6121      	str	r1, [r4, #16]
 800d458:	b913      	cbnz	r3, 800d460 <_printf_float+0x1a0>
 800d45a:	6822      	ldr	r2, [r4, #0]
 800d45c:	07d0      	lsls	r0, r2, #31
 800d45e:	d502      	bpl.n	800d466 <_printf_float+0x1a6>
 800d460:	3301      	adds	r3, #1
 800d462:	440b      	add	r3, r1
 800d464:	6123      	str	r3, [r4, #16]
 800d466:	65a1      	str	r1, [r4, #88]	; 0x58
 800d468:	f04f 0900 	mov.w	r9, #0
 800d46c:	e7de      	b.n	800d42c <_printf_float+0x16c>
 800d46e:	b913      	cbnz	r3, 800d476 <_printf_float+0x1b6>
 800d470:	6822      	ldr	r2, [r4, #0]
 800d472:	07d2      	lsls	r2, r2, #31
 800d474:	d501      	bpl.n	800d47a <_printf_float+0x1ba>
 800d476:	3302      	adds	r3, #2
 800d478:	e7f4      	b.n	800d464 <_printf_float+0x1a4>
 800d47a:	2301      	movs	r3, #1
 800d47c:	e7f2      	b.n	800d464 <_printf_float+0x1a4>
 800d47e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d484:	4299      	cmp	r1, r3
 800d486:	db05      	blt.n	800d494 <_printf_float+0x1d4>
 800d488:	6823      	ldr	r3, [r4, #0]
 800d48a:	6121      	str	r1, [r4, #16]
 800d48c:	07d8      	lsls	r0, r3, #31
 800d48e:	d5ea      	bpl.n	800d466 <_printf_float+0x1a6>
 800d490:	1c4b      	adds	r3, r1, #1
 800d492:	e7e7      	b.n	800d464 <_printf_float+0x1a4>
 800d494:	2900      	cmp	r1, #0
 800d496:	bfd4      	ite	le
 800d498:	f1c1 0202 	rsble	r2, r1, #2
 800d49c:	2201      	movgt	r2, #1
 800d49e:	4413      	add	r3, r2
 800d4a0:	e7e0      	b.n	800d464 <_printf_float+0x1a4>
 800d4a2:	6823      	ldr	r3, [r4, #0]
 800d4a4:	055a      	lsls	r2, r3, #21
 800d4a6:	d407      	bmi.n	800d4b8 <_printf_float+0x1f8>
 800d4a8:	6923      	ldr	r3, [r4, #16]
 800d4aa:	4642      	mov	r2, r8
 800d4ac:	4631      	mov	r1, r6
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	47b8      	blx	r7
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	d12c      	bne.n	800d510 <_printf_float+0x250>
 800d4b6:	e764      	b.n	800d382 <_printf_float+0xc2>
 800d4b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d4bc:	f240 80e0 	bls.w	800d680 <_printf_float+0x3c0>
 800d4c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	f7f3 fb0e 	bl	8000ae8 <__aeabi_dcmpeq>
 800d4cc:	2800      	cmp	r0, #0
 800d4ce:	d034      	beq.n	800d53a <_printf_float+0x27a>
 800d4d0:	4a37      	ldr	r2, [pc, #220]	; (800d5b0 <_printf_float+0x2f0>)
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	4631      	mov	r1, r6
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	47b8      	blx	r7
 800d4da:	3001      	adds	r0, #1
 800d4dc:	f43f af51 	beq.w	800d382 <_printf_float+0xc2>
 800d4e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	db02      	blt.n	800d4ee <_printf_float+0x22e>
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	07d8      	lsls	r0, r3, #31
 800d4ec:	d510      	bpl.n	800d510 <_printf_float+0x250>
 800d4ee:	ee18 3a10 	vmov	r3, s16
 800d4f2:	4652      	mov	r2, sl
 800d4f4:	4631      	mov	r1, r6
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	47b8      	blx	r7
 800d4fa:	3001      	adds	r0, #1
 800d4fc:	f43f af41 	beq.w	800d382 <_printf_float+0xc2>
 800d500:	f04f 0800 	mov.w	r8, #0
 800d504:	f104 091a 	add.w	r9, r4, #26
 800d508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d50a:	3b01      	subs	r3, #1
 800d50c:	4543      	cmp	r3, r8
 800d50e:	dc09      	bgt.n	800d524 <_printf_float+0x264>
 800d510:	6823      	ldr	r3, [r4, #0]
 800d512:	079b      	lsls	r3, r3, #30
 800d514:	f100 8105 	bmi.w	800d722 <_printf_float+0x462>
 800d518:	68e0      	ldr	r0, [r4, #12]
 800d51a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d51c:	4298      	cmp	r0, r3
 800d51e:	bfb8      	it	lt
 800d520:	4618      	movlt	r0, r3
 800d522:	e730      	b.n	800d386 <_printf_float+0xc6>
 800d524:	2301      	movs	r3, #1
 800d526:	464a      	mov	r2, r9
 800d528:	4631      	mov	r1, r6
 800d52a:	4628      	mov	r0, r5
 800d52c:	47b8      	blx	r7
 800d52e:	3001      	adds	r0, #1
 800d530:	f43f af27 	beq.w	800d382 <_printf_float+0xc2>
 800d534:	f108 0801 	add.w	r8, r8, #1
 800d538:	e7e6      	b.n	800d508 <_printf_float+0x248>
 800d53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	dc39      	bgt.n	800d5b4 <_printf_float+0x2f4>
 800d540:	4a1b      	ldr	r2, [pc, #108]	; (800d5b0 <_printf_float+0x2f0>)
 800d542:	2301      	movs	r3, #1
 800d544:	4631      	mov	r1, r6
 800d546:	4628      	mov	r0, r5
 800d548:	47b8      	blx	r7
 800d54a:	3001      	adds	r0, #1
 800d54c:	f43f af19 	beq.w	800d382 <_printf_float+0xc2>
 800d550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d554:	4313      	orrs	r3, r2
 800d556:	d102      	bne.n	800d55e <_printf_float+0x29e>
 800d558:	6823      	ldr	r3, [r4, #0]
 800d55a:	07d9      	lsls	r1, r3, #31
 800d55c:	d5d8      	bpl.n	800d510 <_printf_float+0x250>
 800d55e:	ee18 3a10 	vmov	r3, s16
 800d562:	4652      	mov	r2, sl
 800d564:	4631      	mov	r1, r6
 800d566:	4628      	mov	r0, r5
 800d568:	47b8      	blx	r7
 800d56a:	3001      	adds	r0, #1
 800d56c:	f43f af09 	beq.w	800d382 <_printf_float+0xc2>
 800d570:	f04f 0900 	mov.w	r9, #0
 800d574:	f104 0a1a 	add.w	sl, r4, #26
 800d578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d57a:	425b      	negs	r3, r3
 800d57c:	454b      	cmp	r3, r9
 800d57e:	dc01      	bgt.n	800d584 <_printf_float+0x2c4>
 800d580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d582:	e792      	b.n	800d4aa <_printf_float+0x1ea>
 800d584:	2301      	movs	r3, #1
 800d586:	4652      	mov	r2, sl
 800d588:	4631      	mov	r1, r6
 800d58a:	4628      	mov	r0, r5
 800d58c:	47b8      	blx	r7
 800d58e:	3001      	adds	r0, #1
 800d590:	f43f aef7 	beq.w	800d382 <_printf_float+0xc2>
 800d594:	f109 0901 	add.w	r9, r9, #1
 800d598:	e7ee      	b.n	800d578 <_printf_float+0x2b8>
 800d59a:	bf00      	nop
 800d59c:	7fefffff 	.word	0x7fefffff
 800d5a0:	08012cac 	.word	0x08012cac
 800d5a4:	08012cb0 	.word	0x08012cb0
 800d5a8:	08012cb8 	.word	0x08012cb8
 800d5ac:	08012cb4 	.word	0x08012cb4
 800d5b0:	08012cbc 	.word	0x08012cbc
 800d5b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	bfa8      	it	ge
 800d5bc:	461a      	movge	r2, r3
 800d5be:	2a00      	cmp	r2, #0
 800d5c0:	4691      	mov	r9, r2
 800d5c2:	dc37      	bgt.n	800d634 <_printf_float+0x374>
 800d5c4:	f04f 0b00 	mov.w	fp, #0
 800d5c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5cc:	f104 021a 	add.w	r2, r4, #26
 800d5d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d5d2:	9305      	str	r3, [sp, #20]
 800d5d4:	eba3 0309 	sub.w	r3, r3, r9
 800d5d8:	455b      	cmp	r3, fp
 800d5da:	dc33      	bgt.n	800d644 <_printf_float+0x384>
 800d5dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	db3b      	blt.n	800d65c <_printf_float+0x39c>
 800d5e4:	6823      	ldr	r3, [r4, #0]
 800d5e6:	07da      	lsls	r2, r3, #31
 800d5e8:	d438      	bmi.n	800d65c <_printf_float+0x39c>
 800d5ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5ec:	9b05      	ldr	r3, [sp, #20]
 800d5ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5f0:	1ad3      	subs	r3, r2, r3
 800d5f2:	eba2 0901 	sub.w	r9, r2, r1
 800d5f6:	4599      	cmp	r9, r3
 800d5f8:	bfa8      	it	ge
 800d5fa:	4699      	movge	r9, r3
 800d5fc:	f1b9 0f00 	cmp.w	r9, #0
 800d600:	dc35      	bgt.n	800d66e <_printf_float+0x3ae>
 800d602:	f04f 0800 	mov.w	r8, #0
 800d606:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d60a:	f104 0a1a 	add.w	sl, r4, #26
 800d60e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d612:	1a9b      	subs	r3, r3, r2
 800d614:	eba3 0309 	sub.w	r3, r3, r9
 800d618:	4543      	cmp	r3, r8
 800d61a:	f77f af79 	ble.w	800d510 <_printf_float+0x250>
 800d61e:	2301      	movs	r3, #1
 800d620:	4652      	mov	r2, sl
 800d622:	4631      	mov	r1, r6
 800d624:	4628      	mov	r0, r5
 800d626:	47b8      	blx	r7
 800d628:	3001      	adds	r0, #1
 800d62a:	f43f aeaa 	beq.w	800d382 <_printf_float+0xc2>
 800d62e:	f108 0801 	add.w	r8, r8, #1
 800d632:	e7ec      	b.n	800d60e <_printf_float+0x34e>
 800d634:	4613      	mov	r3, r2
 800d636:	4631      	mov	r1, r6
 800d638:	4642      	mov	r2, r8
 800d63a:	4628      	mov	r0, r5
 800d63c:	47b8      	blx	r7
 800d63e:	3001      	adds	r0, #1
 800d640:	d1c0      	bne.n	800d5c4 <_printf_float+0x304>
 800d642:	e69e      	b.n	800d382 <_printf_float+0xc2>
 800d644:	2301      	movs	r3, #1
 800d646:	4631      	mov	r1, r6
 800d648:	4628      	mov	r0, r5
 800d64a:	9205      	str	r2, [sp, #20]
 800d64c:	47b8      	blx	r7
 800d64e:	3001      	adds	r0, #1
 800d650:	f43f ae97 	beq.w	800d382 <_printf_float+0xc2>
 800d654:	9a05      	ldr	r2, [sp, #20]
 800d656:	f10b 0b01 	add.w	fp, fp, #1
 800d65a:	e7b9      	b.n	800d5d0 <_printf_float+0x310>
 800d65c:	ee18 3a10 	vmov	r3, s16
 800d660:	4652      	mov	r2, sl
 800d662:	4631      	mov	r1, r6
 800d664:	4628      	mov	r0, r5
 800d666:	47b8      	blx	r7
 800d668:	3001      	adds	r0, #1
 800d66a:	d1be      	bne.n	800d5ea <_printf_float+0x32a>
 800d66c:	e689      	b.n	800d382 <_printf_float+0xc2>
 800d66e:	9a05      	ldr	r2, [sp, #20]
 800d670:	464b      	mov	r3, r9
 800d672:	4442      	add	r2, r8
 800d674:	4631      	mov	r1, r6
 800d676:	4628      	mov	r0, r5
 800d678:	47b8      	blx	r7
 800d67a:	3001      	adds	r0, #1
 800d67c:	d1c1      	bne.n	800d602 <_printf_float+0x342>
 800d67e:	e680      	b.n	800d382 <_printf_float+0xc2>
 800d680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d682:	2a01      	cmp	r2, #1
 800d684:	dc01      	bgt.n	800d68a <_printf_float+0x3ca>
 800d686:	07db      	lsls	r3, r3, #31
 800d688:	d538      	bpl.n	800d6fc <_printf_float+0x43c>
 800d68a:	2301      	movs	r3, #1
 800d68c:	4642      	mov	r2, r8
 800d68e:	4631      	mov	r1, r6
 800d690:	4628      	mov	r0, r5
 800d692:	47b8      	blx	r7
 800d694:	3001      	adds	r0, #1
 800d696:	f43f ae74 	beq.w	800d382 <_printf_float+0xc2>
 800d69a:	ee18 3a10 	vmov	r3, s16
 800d69e:	4652      	mov	r2, sl
 800d6a0:	4631      	mov	r1, r6
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	47b8      	blx	r7
 800d6a6:	3001      	adds	r0, #1
 800d6a8:	f43f ae6b 	beq.w	800d382 <_printf_float+0xc2>
 800d6ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	f7f3 fa18 	bl	8000ae8 <__aeabi_dcmpeq>
 800d6b8:	b9d8      	cbnz	r0, 800d6f2 <_printf_float+0x432>
 800d6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6bc:	f108 0201 	add.w	r2, r8, #1
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	4631      	mov	r1, r6
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	47b8      	blx	r7
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	d10e      	bne.n	800d6ea <_printf_float+0x42a>
 800d6cc:	e659      	b.n	800d382 <_printf_float+0xc2>
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	4652      	mov	r2, sl
 800d6d2:	4631      	mov	r1, r6
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	47b8      	blx	r7
 800d6d8:	3001      	adds	r0, #1
 800d6da:	f43f ae52 	beq.w	800d382 <_printf_float+0xc2>
 800d6de:	f108 0801 	add.w	r8, r8, #1
 800d6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	4543      	cmp	r3, r8
 800d6e8:	dcf1      	bgt.n	800d6ce <_printf_float+0x40e>
 800d6ea:	464b      	mov	r3, r9
 800d6ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d6f0:	e6dc      	b.n	800d4ac <_printf_float+0x1ec>
 800d6f2:	f04f 0800 	mov.w	r8, #0
 800d6f6:	f104 0a1a 	add.w	sl, r4, #26
 800d6fa:	e7f2      	b.n	800d6e2 <_printf_float+0x422>
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	4642      	mov	r2, r8
 800d700:	e7df      	b.n	800d6c2 <_printf_float+0x402>
 800d702:	2301      	movs	r3, #1
 800d704:	464a      	mov	r2, r9
 800d706:	4631      	mov	r1, r6
 800d708:	4628      	mov	r0, r5
 800d70a:	47b8      	blx	r7
 800d70c:	3001      	adds	r0, #1
 800d70e:	f43f ae38 	beq.w	800d382 <_printf_float+0xc2>
 800d712:	f108 0801 	add.w	r8, r8, #1
 800d716:	68e3      	ldr	r3, [r4, #12]
 800d718:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d71a:	1a5b      	subs	r3, r3, r1
 800d71c:	4543      	cmp	r3, r8
 800d71e:	dcf0      	bgt.n	800d702 <_printf_float+0x442>
 800d720:	e6fa      	b.n	800d518 <_printf_float+0x258>
 800d722:	f04f 0800 	mov.w	r8, #0
 800d726:	f104 0919 	add.w	r9, r4, #25
 800d72a:	e7f4      	b.n	800d716 <_printf_float+0x456>

0800d72c <_printf_common>:
 800d72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d730:	4616      	mov	r6, r2
 800d732:	4699      	mov	r9, r3
 800d734:	688a      	ldr	r2, [r1, #8]
 800d736:	690b      	ldr	r3, [r1, #16]
 800d738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d73c:	4293      	cmp	r3, r2
 800d73e:	bfb8      	it	lt
 800d740:	4613      	movlt	r3, r2
 800d742:	6033      	str	r3, [r6, #0]
 800d744:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d748:	4607      	mov	r7, r0
 800d74a:	460c      	mov	r4, r1
 800d74c:	b10a      	cbz	r2, 800d752 <_printf_common+0x26>
 800d74e:	3301      	adds	r3, #1
 800d750:	6033      	str	r3, [r6, #0]
 800d752:	6823      	ldr	r3, [r4, #0]
 800d754:	0699      	lsls	r1, r3, #26
 800d756:	bf42      	ittt	mi
 800d758:	6833      	ldrmi	r3, [r6, #0]
 800d75a:	3302      	addmi	r3, #2
 800d75c:	6033      	strmi	r3, [r6, #0]
 800d75e:	6825      	ldr	r5, [r4, #0]
 800d760:	f015 0506 	ands.w	r5, r5, #6
 800d764:	d106      	bne.n	800d774 <_printf_common+0x48>
 800d766:	f104 0a19 	add.w	sl, r4, #25
 800d76a:	68e3      	ldr	r3, [r4, #12]
 800d76c:	6832      	ldr	r2, [r6, #0]
 800d76e:	1a9b      	subs	r3, r3, r2
 800d770:	42ab      	cmp	r3, r5
 800d772:	dc26      	bgt.n	800d7c2 <_printf_common+0x96>
 800d774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d778:	1e13      	subs	r3, r2, #0
 800d77a:	6822      	ldr	r2, [r4, #0]
 800d77c:	bf18      	it	ne
 800d77e:	2301      	movne	r3, #1
 800d780:	0692      	lsls	r2, r2, #26
 800d782:	d42b      	bmi.n	800d7dc <_printf_common+0xb0>
 800d784:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d788:	4649      	mov	r1, r9
 800d78a:	4638      	mov	r0, r7
 800d78c:	47c0      	blx	r8
 800d78e:	3001      	adds	r0, #1
 800d790:	d01e      	beq.n	800d7d0 <_printf_common+0xa4>
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	68e5      	ldr	r5, [r4, #12]
 800d796:	6832      	ldr	r2, [r6, #0]
 800d798:	f003 0306 	and.w	r3, r3, #6
 800d79c:	2b04      	cmp	r3, #4
 800d79e:	bf08      	it	eq
 800d7a0:	1aad      	subeq	r5, r5, r2
 800d7a2:	68a3      	ldr	r3, [r4, #8]
 800d7a4:	6922      	ldr	r2, [r4, #16]
 800d7a6:	bf0c      	ite	eq
 800d7a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7ac:	2500      	movne	r5, #0
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	bfc4      	itt	gt
 800d7b2:	1a9b      	subgt	r3, r3, r2
 800d7b4:	18ed      	addgt	r5, r5, r3
 800d7b6:	2600      	movs	r6, #0
 800d7b8:	341a      	adds	r4, #26
 800d7ba:	42b5      	cmp	r5, r6
 800d7bc:	d11a      	bne.n	800d7f4 <_printf_common+0xc8>
 800d7be:	2000      	movs	r0, #0
 800d7c0:	e008      	b.n	800d7d4 <_printf_common+0xa8>
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	4652      	mov	r2, sl
 800d7c6:	4649      	mov	r1, r9
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	47c0      	blx	r8
 800d7cc:	3001      	adds	r0, #1
 800d7ce:	d103      	bne.n	800d7d8 <_printf_common+0xac>
 800d7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7d8:	3501      	adds	r5, #1
 800d7da:	e7c6      	b.n	800d76a <_printf_common+0x3e>
 800d7dc:	18e1      	adds	r1, r4, r3
 800d7de:	1c5a      	adds	r2, r3, #1
 800d7e0:	2030      	movs	r0, #48	; 0x30
 800d7e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7e6:	4422      	add	r2, r4
 800d7e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7f0:	3302      	adds	r3, #2
 800d7f2:	e7c7      	b.n	800d784 <_printf_common+0x58>
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	4622      	mov	r2, r4
 800d7f8:	4649      	mov	r1, r9
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	47c0      	blx	r8
 800d7fe:	3001      	adds	r0, #1
 800d800:	d0e6      	beq.n	800d7d0 <_printf_common+0xa4>
 800d802:	3601      	adds	r6, #1
 800d804:	e7d9      	b.n	800d7ba <_printf_common+0x8e>
	...

0800d808 <_printf_i>:
 800d808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d80c:	460c      	mov	r4, r1
 800d80e:	4691      	mov	r9, r2
 800d810:	7e27      	ldrb	r7, [r4, #24]
 800d812:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d814:	2f78      	cmp	r7, #120	; 0x78
 800d816:	4680      	mov	r8, r0
 800d818:	469a      	mov	sl, r3
 800d81a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d81e:	d807      	bhi.n	800d830 <_printf_i+0x28>
 800d820:	2f62      	cmp	r7, #98	; 0x62
 800d822:	d80a      	bhi.n	800d83a <_printf_i+0x32>
 800d824:	2f00      	cmp	r7, #0
 800d826:	f000 80d8 	beq.w	800d9da <_printf_i+0x1d2>
 800d82a:	2f58      	cmp	r7, #88	; 0x58
 800d82c:	f000 80a3 	beq.w	800d976 <_printf_i+0x16e>
 800d830:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d838:	e03a      	b.n	800d8b0 <_printf_i+0xa8>
 800d83a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d83e:	2b15      	cmp	r3, #21
 800d840:	d8f6      	bhi.n	800d830 <_printf_i+0x28>
 800d842:	a001      	add	r0, pc, #4	; (adr r0, 800d848 <_printf_i+0x40>)
 800d844:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d848:	0800d8a1 	.word	0x0800d8a1
 800d84c:	0800d8b5 	.word	0x0800d8b5
 800d850:	0800d831 	.word	0x0800d831
 800d854:	0800d831 	.word	0x0800d831
 800d858:	0800d831 	.word	0x0800d831
 800d85c:	0800d831 	.word	0x0800d831
 800d860:	0800d8b5 	.word	0x0800d8b5
 800d864:	0800d831 	.word	0x0800d831
 800d868:	0800d831 	.word	0x0800d831
 800d86c:	0800d831 	.word	0x0800d831
 800d870:	0800d831 	.word	0x0800d831
 800d874:	0800d9c1 	.word	0x0800d9c1
 800d878:	0800d8e5 	.word	0x0800d8e5
 800d87c:	0800d9a3 	.word	0x0800d9a3
 800d880:	0800d831 	.word	0x0800d831
 800d884:	0800d831 	.word	0x0800d831
 800d888:	0800d9e3 	.word	0x0800d9e3
 800d88c:	0800d831 	.word	0x0800d831
 800d890:	0800d8e5 	.word	0x0800d8e5
 800d894:	0800d831 	.word	0x0800d831
 800d898:	0800d831 	.word	0x0800d831
 800d89c:	0800d9ab 	.word	0x0800d9ab
 800d8a0:	680b      	ldr	r3, [r1, #0]
 800d8a2:	1d1a      	adds	r2, r3, #4
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	600a      	str	r2, [r1, #0]
 800d8a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d8ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e0a3      	b.n	800d9fc <_printf_i+0x1f4>
 800d8b4:	6825      	ldr	r5, [r4, #0]
 800d8b6:	6808      	ldr	r0, [r1, #0]
 800d8b8:	062e      	lsls	r6, r5, #24
 800d8ba:	f100 0304 	add.w	r3, r0, #4
 800d8be:	d50a      	bpl.n	800d8d6 <_printf_i+0xce>
 800d8c0:	6805      	ldr	r5, [r0, #0]
 800d8c2:	600b      	str	r3, [r1, #0]
 800d8c4:	2d00      	cmp	r5, #0
 800d8c6:	da03      	bge.n	800d8d0 <_printf_i+0xc8>
 800d8c8:	232d      	movs	r3, #45	; 0x2d
 800d8ca:	426d      	negs	r5, r5
 800d8cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8d0:	485e      	ldr	r0, [pc, #376]	; (800da4c <_printf_i+0x244>)
 800d8d2:	230a      	movs	r3, #10
 800d8d4:	e019      	b.n	800d90a <_printf_i+0x102>
 800d8d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d8da:	6805      	ldr	r5, [r0, #0]
 800d8dc:	600b      	str	r3, [r1, #0]
 800d8de:	bf18      	it	ne
 800d8e0:	b22d      	sxthne	r5, r5
 800d8e2:	e7ef      	b.n	800d8c4 <_printf_i+0xbc>
 800d8e4:	680b      	ldr	r3, [r1, #0]
 800d8e6:	6825      	ldr	r5, [r4, #0]
 800d8e8:	1d18      	adds	r0, r3, #4
 800d8ea:	6008      	str	r0, [r1, #0]
 800d8ec:	0628      	lsls	r0, r5, #24
 800d8ee:	d501      	bpl.n	800d8f4 <_printf_i+0xec>
 800d8f0:	681d      	ldr	r5, [r3, #0]
 800d8f2:	e002      	b.n	800d8fa <_printf_i+0xf2>
 800d8f4:	0669      	lsls	r1, r5, #25
 800d8f6:	d5fb      	bpl.n	800d8f0 <_printf_i+0xe8>
 800d8f8:	881d      	ldrh	r5, [r3, #0]
 800d8fa:	4854      	ldr	r0, [pc, #336]	; (800da4c <_printf_i+0x244>)
 800d8fc:	2f6f      	cmp	r7, #111	; 0x6f
 800d8fe:	bf0c      	ite	eq
 800d900:	2308      	moveq	r3, #8
 800d902:	230a      	movne	r3, #10
 800d904:	2100      	movs	r1, #0
 800d906:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d90a:	6866      	ldr	r6, [r4, #4]
 800d90c:	60a6      	str	r6, [r4, #8]
 800d90e:	2e00      	cmp	r6, #0
 800d910:	bfa2      	ittt	ge
 800d912:	6821      	ldrge	r1, [r4, #0]
 800d914:	f021 0104 	bicge.w	r1, r1, #4
 800d918:	6021      	strge	r1, [r4, #0]
 800d91a:	b90d      	cbnz	r5, 800d920 <_printf_i+0x118>
 800d91c:	2e00      	cmp	r6, #0
 800d91e:	d04d      	beq.n	800d9bc <_printf_i+0x1b4>
 800d920:	4616      	mov	r6, r2
 800d922:	fbb5 f1f3 	udiv	r1, r5, r3
 800d926:	fb03 5711 	mls	r7, r3, r1, r5
 800d92a:	5dc7      	ldrb	r7, [r0, r7]
 800d92c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d930:	462f      	mov	r7, r5
 800d932:	42bb      	cmp	r3, r7
 800d934:	460d      	mov	r5, r1
 800d936:	d9f4      	bls.n	800d922 <_printf_i+0x11a>
 800d938:	2b08      	cmp	r3, #8
 800d93a:	d10b      	bne.n	800d954 <_printf_i+0x14c>
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	07df      	lsls	r7, r3, #31
 800d940:	d508      	bpl.n	800d954 <_printf_i+0x14c>
 800d942:	6923      	ldr	r3, [r4, #16]
 800d944:	6861      	ldr	r1, [r4, #4]
 800d946:	4299      	cmp	r1, r3
 800d948:	bfde      	ittt	le
 800d94a:	2330      	movle	r3, #48	; 0x30
 800d94c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d950:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d954:	1b92      	subs	r2, r2, r6
 800d956:	6122      	str	r2, [r4, #16]
 800d958:	f8cd a000 	str.w	sl, [sp]
 800d95c:	464b      	mov	r3, r9
 800d95e:	aa03      	add	r2, sp, #12
 800d960:	4621      	mov	r1, r4
 800d962:	4640      	mov	r0, r8
 800d964:	f7ff fee2 	bl	800d72c <_printf_common>
 800d968:	3001      	adds	r0, #1
 800d96a:	d14c      	bne.n	800da06 <_printf_i+0x1fe>
 800d96c:	f04f 30ff 	mov.w	r0, #4294967295
 800d970:	b004      	add	sp, #16
 800d972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d976:	4835      	ldr	r0, [pc, #212]	; (800da4c <_printf_i+0x244>)
 800d978:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	680e      	ldr	r6, [r1, #0]
 800d980:	061f      	lsls	r7, r3, #24
 800d982:	f856 5b04 	ldr.w	r5, [r6], #4
 800d986:	600e      	str	r6, [r1, #0]
 800d988:	d514      	bpl.n	800d9b4 <_printf_i+0x1ac>
 800d98a:	07d9      	lsls	r1, r3, #31
 800d98c:	bf44      	itt	mi
 800d98e:	f043 0320 	orrmi.w	r3, r3, #32
 800d992:	6023      	strmi	r3, [r4, #0]
 800d994:	b91d      	cbnz	r5, 800d99e <_printf_i+0x196>
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	f023 0320 	bic.w	r3, r3, #32
 800d99c:	6023      	str	r3, [r4, #0]
 800d99e:	2310      	movs	r3, #16
 800d9a0:	e7b0      	b.n	800d904 <_printf_i+0xfc>
 800d9a2:	6823      	ldr	r3, [r4, #0]
 800d9a4:	f043 0320 	orr.w	r3, r3, #32
 800d9a8:	6023      	str	r3, [r4, #0]
 800d9aa:	2378      	movs	r3, #120	; 0x78
 800d9ac:	4828      	ldr	r0, [pc, #160]	; (800da50 <_printf_i+0x248>)
 800d9ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d9b2:	e7e3      	b.n	800d97c <_printf_i+0x174>
 800d9b4:	065e      	lsls	r6, r3, #25
 800d9b6:	bf48      	it	mi
 800d9b8:	b2ad      	uxthmi	r5, r5
 800d9ba:	e7e6      	b.n	800d98a <_printf_i+0x182>
 800d9bc:	4616      	mov	r6, r2
 800d9be:	e7bb      	b.n	800d938 <_printf_i+0x130>
 800d9c0:	680b      	ldr	r3, [r1, #0]
 800d9c2:	6826      	ldr	r6, [r4, #0]
 800d9c4:	6960      	ldr	r0, [r4, #20]
 800d9c6:	1d1d      	adds	r5, r3, #4
 800d9c8:	600d      	str	r5, [r1, #0]
 800d9ca:	0635      	lsls	r5, r6, #24
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	d501      	bpl.n	800d9d4 <_printf_i+0x1cc>
 800d9d0:	6018      	str	r0, [r3, #0]
 800d9d2:	e002      	b.n	800d9da <_printf_i+0x1d2>
 800d9d4:	0671      	lsls	r1, r6, #25
 800d9d6:	d5fb      	bpl.n	800d9d0 <_printf_i+0x1c8>
 800d9d8:	8018      	strh	r0, [r3, #0]
 800d9da:	2300      	movs	r3, #0
 800d9dc:	6123      	str	r3, [r4, #16]
 800d9de:	4616      	mov	r6, r2
 800d9e0:	e7ba      	b.n	800d958 <_printf_i+0x150>
 800d9e2:	680b      	ldr	r3, [r1, #0]
 800d9e4:	1d1a      	adds	r2, r3, #4
 800d9e6:	600a      	str	r2, [r1, #0]
 800d9e8:	681e      	ldr	r6, [r3, #0]
 800d9ea:	6862      	ldr	r2, [r4, #4]
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	f7f2 fc06 	bl	8000200 <memchr>
 800d9f4:	b108      	cbz	r0, 800d9fa <_printf_i+0x1f2>
 800d9f6:	1b80      	subs	r0, r0, r6
 800d9f8:	6060      	str	r0, [r4, #4]
 800d9fa:	6863      	ldr	r3, [r4, #4]
 800d9fc:	6123      	str	r3, [r4, #16]
 800d9fe:	2300      	movs	r3, #0
 800da00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da04:	e7a8      	b.n	800d958 <_printf_i+0x150>
 800da06:	6923      	ldr	r3, [r4, #16]
 800da08:	4632      	mov	r2, r6
 800da0a:	4649      	mov	r1, r9
 800da0c:	4640      	mov	r0, r8
 800da0e:	47d0      	blx	sl
 800da10:	3001      	adds	r0, #1
 800da12:	d0ab      	beq.n	800d96c <_printf_i+0x164>
 800da14:	6823      	ldr	r3, [r4, #0]
 800da16:	079b      	lsls	r3, r3, #30
 800da18:	d413      	bmi.n	800da42 <_printf_i+0x23a>
 800da1a:	68e0      	ldr	r0, [r4, #12]
 800da1c:	9b03      	ldr	r3, [sp, #12]
 800da1e:	4298      	cmp	r0, r3
 800da20:	bfb8      	it	lt
 800da22:	4618      	movlt	r0, r3
 800da24:	e7a4      	b.n	800d970 <_printf_i+0x168>
 800da26:	2301      	movs	r3, #1
 800da28:	4632      	mov	r2, r6
 800da2a:	4649      	mov	r1, r9
 800da2c:	4640      	mov	r0, r8
 800da2e:	47d0      	blx	sl
 800da30:	3001      	adds	r0, #1
 800da32:	d09b      	beq.n	800d96c <_printf_i+0x164>
 800da34:	3501      	adds	r5, #1
 800da36:	68e3      	ldr	r3, [r4, #12]
 800da38:	9903      	ldr	r1, [sp, #12]
 800da3a:	1a5b      	subs	r3, r3, r1
 800da3c:	42ab      	cmp	r3, r5
 800da3e:	dcf2      	bgt.n	800da26 <_printf_i+0x21e>
 800da40:	e7eb      	b.n	800da1a <_printf_i+0x212>
 800da42:	2500      	movs	r5, #0
 800da44:	f104 0619 	add.w	r6, r4, #25
 800da48:	e7f5      	b.n	800da36 <_printf_i+0x22e>
 800da4a:	bf00      	nop
 800da4c:	08012cbe 	.word	0x08012cbe
 800da50:	08012ccf 	.word	0x08012ccf

0800da54 <_scanf_float>:
 800da54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da58:	b087      	sub	sp, #28
 800da5a:	4617      	mov	r7, r2
 800da5c:	9303      	str	r3, [sp, #12]
 800da5e:	688b      	ldr	r3, [r1, #8]
 800da60:	1e5a      	subs	r2, r3, #1
 800da62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800da66:	bf83      	ittte	hi
 800da68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800da6c:	195b      	addhi	r3, r3, r5
 800da6e:	9302      	strhi	r3, [sp, #8]
 800da70:	2300      	movls	r3, #0
 800da72:	bf86      	itte	hi
 800da74:	f240 135d 	movwhi	r3, #349	; 0x15d
 800da78:	608b      	strhi	r3, [r1, #8]
 800da7a:	9302      	strls	r3, [sp, #8]
 800da7c:	680b      	ldr	r3, [r1, #0]
 800da7e:	468b      	mov	fp, r1
 800da80:	2500      	movs	r5, #0
 800da82:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800da86:	f84b 3b1c 	str.w	r3, [fp], #28
 800da8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800da8e:	4680      	mov	r8, r0
 800da90:	460c      	mov	r4, r1
 800da92:	465e      	mov	r6, fp
 800da94:	46aa      	mov	sl, r5
 800da96:	46a9      	mov	r9, r5
 800da98:	9501      	str	r5, [sp, #4]
 800da9a:	68a2      	ldr	r2, [r4, #8]
 800da9c:	b152      	cbz	r2, 800dab4 <_scanf_float+0x60>
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	2b4e      	cmp	r3, #78	; 0x4e
 800daa4:	d864      	bhi.n	800db70 <_scanf_float+0x11c>
 800daa6:	2b40      	cmp	r3, #64	; 0x40
 800daa8:	d83c      	bhi.n	800db24 <_scanf_float+0xd0>
 800daaa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800daae:	b2c8      	uxtb	r0, r1
 800dab0:	280e      	cmp	r0, #14
 800dab2:	d93a      	bls.n	800db2a <_scanf_float+0xd6>
 800dab4:	f1b9 0f00 	cmp.w	r9, #0
 800dab8:	d003      	beq.n	800dac2 <_scanf_float+0x6e>
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dac0:	6023      	str	r3, [r4, #0]
 800dac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dac6:	f1ba 0f01 	cmp.w	sl, #1
 800daca:	f200 8113 	bhi.w	800dcf4 <_scanf_float+0x2a0>
 800dace:	455e      	cmp	r6, fp
 800dad0:	f200 8105 	bhi.w	800dcde <_scanf_float+0x28a>
 800dad4:	2501      	movs	r5, #1
 800dad6:	4628      	mov	r0, r5
 800dad8:	b007      	add	sp, #28
 800dada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dade:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dae2:	2a0d      	cmp	r2, #13
 800dae4:	d8e6      	bhi.n	800dab4 <_scanf_float+0x60>
 800dae6:	a101      	add	r1, pc, #4	; (adr r1, 800daec <_scanf_float+0x98>)
 800dae8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800daec:	0800dc2b 	.word	0x0800dc2b
 800daf0:	0800dab5 	.word	0x0800dab5
 800daf4:	0800dab5 	.word	0x0800dab5
 800daf8:	0800dab5 	.word	0x0800dab5
 800dafc:	0800dc8b 	.word	0x0800dc8b
 800db00:	0800dc63 	.word	0x0800dc63
 800db04:	0800dab5 	.word	0x0800dab5
 800db08:	0800dab5 	.word	0x0800dab5
 800db0c:	0800dc39 	.word	0x0800dc39
 800db10:	0800dab5 	.word	0x0800dab5
 800db14:	0800dab5 	.word	0x0800dab5
 800db18:	0800dab5 	.word	0x0800dab5
 800db1c:	0800dab5 	.word	0x0800dab5
 800db20:	0800dbf1 	.word	0x0800dbf1
 800db24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800db28:	e7db      	b.n	800dae2 <_scanf_float+0x8e>
 800db2a:	290e      	cmp	r1, #14
 800db2c:	d8c2      	bhi.n	800dab4 <_scanf_float+0x60>
 800db2e:	a001      	add	r0, pc, #4	; (adr r0, 800db34 <_scanf_float+0xe0>)
 800db30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800db34:	0800dbe3 	.word	0x0800dbe3
 800db38:	0800dab5 	.word	0x0800dab5
 800db3c:	0800dbe3 	.word	0x0800dbe3
 800db40:	0800dc77 	.word	0x0800dc77
 800db44:	0800dab5 	.word	0x0800dab5
 800db48:	0800db91 	.word	0x0800db91
 800db4c:	0800dbcd 	.word	0x0800dbcd
 800db50:	0800dbcd 	.word	0x0800dbcd
 800db54:	0800dbcd 	.word	0x0800dbcd
 800db58:	0800dbcd 	.word	0x0800dbcd
 800db5c:	0800dbcd 	.word	0x0800dbcd
 800db60:	0800dbcd 	.word	0x0800dbcd
 800db64:	0800dbcd 	.word	0x0800dbcd
 800db68:	0800dbcd 	.word	0x0800dbcd
 800db6c:	0800dbcd 	.word	0x0800dbcd
 800db70:	2b6e      	cmp	r3, #110	; 0x6e
 800db72:	d809      	bhi.n	800db88 <_scanf_float+0x134>
 800db74:	2b60      	cmp	r3, #96	; 0x60
 800db76:	d8b2      	bhi.n	800dade <_scanf_float+0x8a>
 800db78:	2b54      	cmp	r3, #84	; 0x54
 800db7a:	d077      	beq.n	800dc6c <_scanf_float+0x218>
 800db7c:	2b59      	cmp	r3, #89	; 0x59
 800db7e:	d199      	bne.n	800dab4 <_scanf_float+0x60>
 800db80:	2d07      	cmp	r5, #7
 800db82:	d197      	bne.n	800dab4 <_scanf_float+0x60>
 800db84:	2508      	movs	r5, #8
 800db86:	e029      	b.n	800dbdc <_scanf_float+0x188>
 800db88:	2b74      	cmp	r3, #116	; 0x74
 800db8a:	d06f      	beq.n	800dc6c <_scanf_float+0x218>
 800db8c:	2b79      	cmp	r3, #121	; 0x79
 800db8e:	e7f6      	b.n	800db7e <_scanf_float+0x12a>
 800db90:	6821      	ldr	r1, [r4, #0]
 800db92:	05c8      	lsls	r0, r1, #23
 800db94:	d51a      	bpl.n	800dbcc <_scanf_float+0x178>
 800db96:	9b02      	ldr	r3, [sp, #8]
 800db98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800db9c:	6021      	str	r1, [r4, #0]
 800db9e:	f109 0901 	add.w	r9, r9, #1
 800dba2:	b11b      	cbz	r3, 800dbac <_scanf_float+0x158>
 800dba4:	3b01      	subs	r3, #1
 800dba6:	3201      	adds	r2, #1
 800dba8:	9302      	str	r3, [sp, #8]
 800dbaa:	60a2      	str	r2, [r4, #8]
 800dbac:	68a3      	ldr	r3, [r4, #8]
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	60a3      	str	r3, [r4, #8]
 800dbb2:	6923      	ldr	r3, [r4, #16]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	6123      	str	r3, [r4, #16]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	607b      	str	r3, [r7, #4]
 800dbc0:	f340 8084 	ble.w	800dccc <_scanf_float+0x278>
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	603b      	str	r3, [r7, #0]
 800dbca:	e766      	b.n	800da9a <_scanf_float+0x46>
 800dbcc:	eb1a 0f05 	cmn.w	sl, r5
 800dbd0:	f47f af70 	bne.w	800dab4 <_scanf_float+0x60>
 800dbd4:	6822      	ldr	r2, [r4, #0]
 800dbd6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800dbda:	6022      	str	r2, [r4, #0]
 800dbdc:	f806 3b01 	strb.w	r3, [r6], #1
 800dbe0:	e7e4      	b.n	800dbac <_scanf_float+0x158>
 800dbe2:	6822      	ldr	r2, [r4, #0]
 800dbe4:	0610      	lsls	r0, r2, #24
 800dbe6:	f57f af65 	bpl.w	800dab4 <_scanf_float+0x60>
 800dbea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbee:	e7f4      	b.n	800dbda <_scanf_float+0x186>
 800dbf0:	f1ba 0f00 	cmp.w	sl, #0
 800dbf4:	d10e      	bne.n	800dc14 <_scanf_float+0x1c0>
 800dbf6:	f1b9 0f00 	cmp.w	r9, #0
 800dbfa:	d10e      	bne.n	800dc1a <_scanf_float+0x1c6>
 800dbfc:	6822      	ldr	r2, [r4, #0]
 800dbfe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dc02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dc06:	d108      	bne.n	800dc1a <_scanf_float+0x1c6>
 800dc08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dc0c:	6022      	str	r2, [r4, #0]
 800dc0e:	f04f 0a01 	mov.w	sl, #1
 800dc12:	e7e3      	b.n	800dbdc <_scanf_float+0x188>
 800dc14:	f1ba 0f02 	cmp.w	sl, #2
 800dc18:	d055      	beq.n	800dcc6 <_scanf_float+0x272>
 800dc1a:	2d01      	cmp	r5, #1
 800dc1c:	d002      	beq.n	800dc24 <_scanf_float+0x1d0>
 800dc1e:	2d04      	cmp	r5, #4
 800dc20:	f47f af48 	bne.w	800dab4 <_scanf_float+0x60>
 800dc24:	3501      	adds	r5, #1
 800dc26:	b2ed      	uxtb	r5, r5
 800dc28:	e7d8      	b.n	800dbdc <_scanf_float+0x188>
 800dc2a:	f1ba 0f01 	cmp.w	sl, #1
 800dc2e:	f47f af41 	bne.w	800dab4 <_scanf_float+0x60>
 800dc32:	f04f 0a02 	mov.w	sl, #2
 800dc36:	e7d1      	b.n	800dbdc <_scanf_float+0x188>
 800dc38:	b97d      	cbnz	r5, 800dc5a <_scanf_float+0x206>
 800dc3a:	f1b9 0f00 	cmp.w	r9, #0
 800dc3e:	f47f af3c 	bne.w	800daba <_scanf_float+0x66>
 800dc42:	6822      	ldr	r2, [r4, #0]
 800dc44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dc48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dc4c:	f47f af39 	bne.w	800dac2 <_scanf_float+0x6e>
 800dc50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dc54:	6022      	str	r2, [r4, #0]
 800dc56:	2501      	movs	r5, #1
 800dc58:	e7c0      	b.n	800dbdc <_scanf_float+0x188>
 800dc5a:	2d03      	cmp	r5, #3
 800dc5c:	d0e2      	beq.n	800dc24 <_scanf_float+0x1d0>
 800dc5e:	2d05      	cmp	r5, #5
 800dc60:	e7de      	b.n	800dc20 <_scanf_float+0x1cc>
 800dc62:	2d02      	cmp	r5, #2
 800dc64:	f47f af26 	bne.w	800dab4 <_scanf_float+0x60>
 800dc68:	2503      	movs	r5, #3
 800dc6a:	e7b7      	b.n	800dbdc <_scanf_float+0x188>
 800dc6c:	2d06      	cmp	r5, #6
 800dc6e:	f47f af21 	bne.w	800dab4 <_scanf_float+0x60>
 800dc72:	2507      	movs	r5, #7
 800dc74:	e7b2      	b.n	800dbdc <_scanf_float+0x188>
 800dc76:	6822      	ldr	r2, [r4, #0]
 800dc78:	0591      	lsls	r1, r2, #22
 800dc7a:	f57f af1b 	bpl.w	800dab4 <_scanf_float+0x60>
 800dc7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800dc82:	6022      	str	r2, [r4, #0]
 800dc84:	f8cd 9004 	str.w	r9, [sp, #4]
 800dc88:	e7a8      	b.n	800dbdc <_scanf_float+0x188>
 800dc8a:	6822      	ldr	r2, [r4, #0]
 800dc8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800dc90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dc94:	d006      	beq.n	800dca4 <_scanf_float+0x250>
 800dc96:	0550      	lsls	r0, r2, #21
 800dc98:	f57f af0c 	bpl.w	800dab4 <_scanf_float+0x60>
 800dc9c:	f1b9 0f00 	cmp.w	r9, #0
 800dca0:	f43f af0f 	beq.w	800dac2 <_scanf_float+0x6e>
 800dca4:	0591      	lsls	r1, r2, #22
 800dca6:	bf58      	it	pl
 800dca8:	9901      	ldrpl	r1, [sp, #4]
 800dcaa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dcae:	bf58      	it	pl
 800dcb0:	eba9 0101 	subpl.w	r1, r9, r1
 800dcb4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800dcb8:	bf58      	it	pl
 800dcba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dcbe:	6022      	str	r2, [r4, #0]
 800dcc0:	f04f 0900 	mov.w	r9, #0
 800dcc4:	e78a      	b.n	800dbdc <_scanf_float+0x188>
 800dcc6:	f04f 0a03 	mov.w	sl, #3
 800dcca:	e787      	b.n	800dbdc <_scanf_float+0x188>
 800dccc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dcd0:	4639      	mov	r1, r7
 800dcd2:	4640      	mov	r0, r8
 800dcd4:	4798      	blx	r3
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	f43f aedf 	beq.w	800da9a <_scanf_float+0x46>
 800dcdc:	e6ea      	b.n	800dab4 <_scanf_float+0x60>
 800dcde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dce2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dce6:	463a      	mov	r2, r7
 800dce8:	4640      	mov	r0, r8
 800dcea:	4798      	blx	r3
 800dcec:	6923      	ldr	r3, [r4, #16]
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	6123      	str	r3, [r4, #16]
 800dcf2:	e6ec      	b.n	800dace <_scanf_float+0x7a>
 800dcf4:	1e6b      	subs	r3, r5, #1
 800dcf6:	2b06      	cmp	r3, #6
 800dcf8:	d825      	bhi.n	800dd46 <_scanf_float+0x2f2>
 800dcfa:	2d02      	cmp	r5, #2
 800dcfc:	d836      	bhi.n	800dd6c <_scanf_float+0x318>
 800dcfe:	455e      	cmp	r6, fp
 800dd00:	f67f aee8 	bls.w	800dad4 <_scanf_float+0x80>
 800dd04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd0c:	463a      	mov	r2, r7
 800dd0e:	4640      	mov	r0, r8
 800dd10:	4798      	blx	r3
 800dd12:	6923      	ldr	r3, [r4, #16]
 800dd14:	3b01      	subs	r3, #1
 800dd16:	6123      	str	r3, [r4, #16]
 800dd18:	e7f1      	b.n	800dcfe <_scanf_float+0x2aa>
 800dd1a:	9802      	ldr	r0, [sp, #8]
 800dd1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd20:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dd24:	9002      	str	r0, [sp, #8]
 800dd26:	463a      	mov	r2, r7
 800dd28:	4640      	mov	r0, r8
 800dd2a:	4798      	blx	r3
 800dd2c:	6923      	ldr	r3, [r4, #16]
 800dd2e:	3b01      	subs	r3, #1
 800dd30:	6123      	str	r3, [r4, #16]
 800dd32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd36:	fa5f fa8a 	uxtb.w	sl, sl
 800dd3a:	f1ba 0f02 	cmp.w	sl, #2
 800dd3e:	d1ec      	bne.n	800dd1a <_scanf_float+0x2c6>
 800dd40:	3d03      	subs	r5, #3
 800dd42:	b2ed      	uxtb	r5, r5
 800dd44:	1b76      	subs	r6, r6, r5
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	05da      	lsls	r2, r3, #23
 800dd4a:	d52f      	bpl.n	800ddac <_scanf_float+0x358>
 800dd4c:	055b      	lsls	r3, r3, #21
 800dd4e:	d510      	bpl.n	800dd72 <_scanf_float+0x31e>
 800dd50:	455e      	cmp	r6, fp
 800dd52:	f67f aebf 	bls.w	800dad4 <_scanf_float+0x80>
 800dd56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd5e:	463a      	mov	r2, r7
 800dd60:	4640      	mov	r0, r8
 800dd62:	4798      	blx	r3
 800dd64:	6923      	ldr	r3, [r4, #16]
 800dd66:	3b01      	subs	r3, #1
 800dd68:	6123      	str	r3, [r4, #16]
 800dd6a:	e7f1      	b.n	800dd50 <_scanf_float+0x2fc>
 800dd6c:	46aa      	mov	sl, r5
 800dd6e:	9602      	str	r6, [sp, #8]
 800dd70:	e7df      	b.n	800dd32 <_scanf_float+0x2de>
 800dd72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dd76:	6923      	ldr	r3, [r4, #16]
 800dd78:	2965      	cmp	r1, #101	; 0x65
 800dd7a:	f103 33ff 	add.w	r3, r3, #4294967295
 800dd7e:	f106 35ff 	add.w	r5, r6, #4294967295
 800dd82:	6123      	str	r3, [r4, #16]
 800dd84:	d00c      	beq.n	800dda0 <_scanf_float+0x34c>
 800dd86:	2945      	cmp	r1, #69	; 0x45
 800dd88:	d00a      	beq.n	800dda0 <_scanf_float+0x34c>
 800dd8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd8e:	463a      	mov	r2, r7
 800dd90:	4640      	mov	r0, r8
 800dd92:	4798      	blx	r3
 800dd94:	6923      	ldr	r3, [r4, #16]
 800dd96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	1eb5      	subs	r5, r6, #2
 800dd9e:	6123      	str	r3, [r4, #16]
 800dda0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dda4:	463a      	mov	r2, r7
 800dda6:	4640      	mov	r0, r8
 800dda8:	4798      	blx	r3
 800ddaa:	462e      	mov	r6, r5
 800ddac:	6825      	ldr	r5, [r4, #0]
 800ddae:	f015 0510 	ands.w	r5, r5, #16
 800ddb2:	d158      	bne.n	800de66 <_scanf_float+0x412>
 800ddb4:	7035      	strb	r5, [r6, #0]
 800ddb6:	6823      	ldr	r3, [r4, #0]
 800ddb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ddbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddc0:	d11c      	bne.n	800ddfc <_scanf_float+0x3a8>
 800ddc2:	9b01      	ldr	r3, [sp, #4]
 800ddc4:	454b      	cmp	r3, r9
 800ddc6:	eba3 0209 	sub.w	r2, r3, r9
 800ddca:	d124      	bne.n	800de16 <_scanf_float+0x3c2>
 800ddcc:	2200      	movs	r2, #0
 800ddce:	4659      	mov	r1, fp
 800ddd0:	4640      	mov	r0, r8
 800ddd2:	f000 ff0b 	bl	800ebec <_strtod_r>
 800ddd6:	9b03      	ldr	r3, [sp, #12]
 800ddd8:	6821      	ldr	r1, [r4, #0]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f011 0f02 	tst.w	r1, #2
 800dde0:	ec57 6b10 	vmov	r6, r7, d0
 800dde4:	f103 0204 	add.w	r2, r3, #4
 800dde8:	d020      	beq.n	800de2c <_scanf_float+0x3d8>
 800ddea:	9903      	ldr	r1, [sp, #12]
 800ddec:	600a      	str	r2, [r1, #0]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	e9c3 6700 	strd	r6, r7, [r3]
 800ddf4:	68e3      	ldr	r3, [r4, #12]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	60e3      	str	r3, [r4, #12]
 800ddfa:	e66c      	b.n	800dad6 <_scanf_float+0x82>
 800ddfc:	9b04      	ldr	r3, [sp, #16]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d0e4      	beq.n	800ddcc <_scanf_float+0x378>
 800de02:	9905      	ldr	r1, [sp, #20]
 800de04:	230a      	movs	r3, #10
 800de06:	462a      	mov	r2, r5
 800de08:	3101      	adds	r1, #1
 800de0a:	4640      	mov	r0, r8
 800de0c:	f000 ff78 	bl	800ed00 <_strtol_r>
 800de10:	9b04      	ldr	r3, [sp, #16]
 800de12:	9e05      	ldr	r6, [sp, #20]
 800de14:	1ac2      	subs	r2, r0, r3
 800de16:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800de1a:	429e      	cmp	r6, r3
 800de1c:	bf28      	it	cs
 800de1e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800de22:	4912      	ldr	r1, [pc, #72]	; (800de6c <_scanf_float+0x418>)
 800de24:	4630      	mov	r0, r6
 800de26:	f000 f83b 	bl	800dea0 <siprintf>
 800de2a:	e7cf      	b.n	800ddcc <_scanf_float+0x378>
 800de2c:	f011 0f04 	tst.w	r1, #4
 800de30:	9903      	ldr	r1, [sp, #12]
 800de32:	600a      	str	r2, [r1, #0]
 800de34:	d1db      	bne.n	800ddee <_scanf_float+0x39a>
 800de36:	f8d3 8000 	ldr.w	r8, [r3]
 800de3a:	ee10 2a10 	vmov	r2, s0
 800de3e:	ee10 0a10 	vmov	r0, s0
 800de42:	463b      	mov	r3, r7
 800de44:	4639      	mov	r1, r7
 800de46:	f7f2 fe81 	bl	8000b4c <__aeabi_dcmpun>
 800de4a:	b128      	cbz	r0, 800de58 <_scanf_float+0x404>
 800de4c:	4808      	ldr	r0, [pc, #32]	; (800de70 <_scanf_float+0x41c>)
 800de4e:	f000 f821 	bl	800de94 <nanf>
 800de52:	ed88 0a00 	vstr	s0, [r8]
 800de56:	e7cd      	b.n	800ddf4 <_scanf_float+0x3a0>
 800de58:	4630      	mov	r0, r6
 800de5a:	4639      	mov	r1, r7
 800de5c:	f7f2 fed4 	bl	8000c08 <__aeabi_d2f>
 800de60:	f8c8 0000 	str.w	r0, [r8]
 800de64:	e7c6      	b.n	800ddf4 <_scanf_float+0x3a0>
 800de66:	2500      	movs	r5, #0
 800de68:	e635      	b.n	800dad6 <_scanf_float+0x82>
 800de6a:	bf00      	nop
 800de6c:	08012ce0 	.word	0x08012ce0
 800de70:	08013058 	.word	0x08013058

0800de74 <_sbrk_r>:
 800de74:	b538      	push	{r3, r4, r5, lr}
 800de76:	4d06      	ldr	r5, [pc, #24]	; (800de90 <_sbrk_r+0x1c>)
 800de78:	2300      	movs	r3, #0
 800de7a:	4604      	mov	r4, r0
 800de7c:	4608      	mov	r0, r1
 800de7e:	602b      	str	r3, [r5, #0]
 800de80:	f7f6 f946 	bl	8004110 <_sbrk>
 800de84:	1c43      	adds	r3, r0, #1
 800de86:	d102      	bne.n	800de8e <_sbrk_r+0x1a>
 800de88:	682b      	ldr	r3, [r5, #0]
 800de8a:	b103      	cbz	r3, 800de8e <_sbrk_r+0x1a>
 800de8c:	6023      	str	r3, [r4, #0]
 800de8e:	bd38      	pop	{r3, r4, r5, pc}
 800de90:	20001a84 	.word	0x20001a84

0800de94 <nanf>:
 800de94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800de9c <nanf+0x8>
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	7fc00000 	.word	0x7fc00000

0800dea0 <siprintf>:
 800dea0:	b40e      	push	{r1, r2, r3}
 800dea2:	b500      	push	{lr}
 800dea4:	b09c      	sub	sp, #112	; 0x70
 800dea6:	ab1d      	add	r3, sp, #116	; 0x74
 800dea8:	9002      	str	r0, [sp, #8]
 800deaa:	9006      	str	r0, [sp, #24]
 800deac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800deb0:	4809      	ldr	r0, [pc, #36]	; (800ded8 <siprintf+0x38>)
 800deb2:	9107      	str	r1, [sp, #28]
 800deb4:	9104      	str	r1, [sp, #16]
 800deb6:	4909      	ldr	r1, [pc, #36]	; (800dedc <siprintf+0x3c>)
 800deb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800debc:	9105      	str	r1, [sp, #20]
 800debe:	6800      	ldr	r0, [r0, #0]
 800dec0:	9301      	str	r3, [sp, #4]
 800dec2:	a902      	add	r1, sp, #8
 800dec4:	f003 f9a4 	bl	8011210 <_svfiprintf_r>
 800dec8:	9b02      	ldr	r3, [sp, #8]
 800deca:	2200      	movs	r2, #0
 800decc:	701a      	strb	r2, [r3, #0]
 800dece:	b01c      	add	sp, #112	; 0x70
 800ded0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ded4:	b003      	add	sp, #12
 800ded6:	4770      	bx	lr
 800ded8:	20000028 	.word	0x20000028
 800dedc:	ffff0208 	.word	0xffff0208

0800dee0 <__sread>:
 800dee0:	b510      	push	{r4, lr}
 800dee2:	460c      	mov	r4, r1
 800dee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dee8:	f003 fbec 	bl	80116c4 <_read_r>
 800deec:	2800      	cmp	r0, #0
 800deee:	bfab      	itete	ge
 800def0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800def2:	89a3      	ldrhlt	r3, [r4, #12]
 800def4:	181b      	addge	r3, r3, r0
 800def6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800defa:	bfac      	ite	ge
 800defc:	6563      	strge	r3, [r4, #84]	; 0x54
 800defe:	81a3      	strhlt	r3, [r4, #12]
 800df00:	bd10      	pop	{r4, pc}

0800df02 <__swrite>:
 800df02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df06:	461f      	mov	r7, r3
 800df08:	898b      	ldrh	r3, [r1, #12]
 800df0a:	05db      	lsls	r3, r3, #23
 800df0c:	4605      	mov	r5, r0
 800df0e:	460c      	mov	r4, r1
 800df10:	4616      	mov	r6, r2
 800df12:	d505      	bpl.n	800df20 <__swrite+0x1e>
 800df14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df18:	2302      	movs	r3, #2
 800df1a:	2200      	movs	r2, #0
 800df1c:	f002 fbbe 	bl	801069c <_lseek_r>
 800df20:	89a3      	ldrh	r3, [r4, #12]
 800df22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df2a:	81a3      	strh	r3, [r4, #12]
 800df2c:	4632      	mov	r2, r6
 800df2e:	463b      	mov	r3, r7
 800df30:	4628      	mov	r0, r5
 800df32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df36:	f000 bf7b 	b.w	800ee30 <_write_r>

0800df3a <__sseek>:
 800df3a:	b510      	push	{r4, lr}
 800df3c:	460c      	mov	r4, r1
 800df3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df42:	f002 fbab 	bl	801069c <_lseek_r>
 800df46:	1c43      	adds	r3, r0, #1
 800df48:	89a3      	ldrh	r3, [r4, #12]
 800df4a:	bf15      	itete	ne
 800df4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800df4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df56:	81a3      	strheq	r3, [r4, #12]
 800df58:	bf18      	it	ne
 800df5a:	81a3      	strhne	r3, [r4, #12]
 800df5c:	bd10      	pop	{r4, pc}

0800df5e <__sclose>:
 800df5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df62:	f000 bfe5 	b.w	800ef30 <_close_r>

0800df66 <strcpy>:
 800df66:	4603      	mov	r3, r0
 800df68:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df6c:	f803 2b01 	strb.w	r2, [r3], #1
 800df70:	2a00      	cmp	r2, #0
 800df72:	d1f9      	bne.n	800df68 <strcpy+0x2>
 800df74:	4770      	bx	lr

0800df76 <strncmp>:
 800df76:	b510      	push	{r4, lr}
 800df78:	b16a      	cbz	r2, 800df96 <strncmp+0x20>
 800df7a:	3901      	subs	r1, #1
 800df7c:	1884      	adds	r4, r0, r2
 800df7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800df82:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800df86:	4293      	cmp	r3, r2
 800df88:	d103      	bne.n	800df92 <strncmp+0x1c>
 800df8a:	42a0      	cmp	r0, r4
 800df8c:	d001      	beq.n	800df92 <strncmp+0x1c>
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d1f5      	bne.n	800df7e <strncmp+0x8>
 800df92:	1a98      	subs	r0, r3, r2
 800df94:	bd10      	pop	{r4, pc}
 800df96:	4610      	mov	r0, r2
 800df98:	e7fc      	b.n	800df94 <strncmp+0x1e>

0800df9a <sulp>:
 800df9a:	b570      	push	{r4, r5, r6, lr}
 800df9c:	4604      	mov	r4, r0
 800df9e:	460d      	mov	r5, r1
 800dfa0:	ec45 4b10 	vmov	d0, r4, r5
 800dfa4:	4616      	mov	r6, r2
 800dfa6:	f002 ff79 	bl	8010e9c <__ulp>
 800dfaa:	ec51 0b10 	vmov	r0, r1, d0
 800dfae:	b17e      	cbz	r6, 800dfd0 <sulp+0x36>
 800dfb0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dfb4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	dd09      	ble.n	800dfd0 <sulp+0x36>
 800dfbc:	051b      	lsls	r3, r3, #20
 800dfbe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dfc2:	2400      	movs	r4, #0
 800dfc4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dfc8:	4622      	mov	r2, r4
 800dfca:	462b      	mov	r3, r5
 800dfcc:	f7f2 fb24 	bl	8000618 <__aeabi_dmul>
 800dfd0:	bd70      	pop	{r4, r5, r6, pc}
 800dfd2:	0000      	movs	r0, r0
 800dfd4:	0000      	movs	r0, r0
	...

0800dfd8 <_strtod_l>:
 800dfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfdc:	b0a3      	sub	sp, #140	; 0x8c
 800dfde:	461f      	mov	r7, r3
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	931e      	str	r3, [sp, #120]	; 0x78
 800dfe4:	4ba4      	ldr	r3, [pc, #656]	; (800e278 <_strtod_l+0x2a0>)
 800dfe6:	9219      	str	r2, [sp, #100]	; 0x64
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	9307      	str	r3, [sp, #28]
 800dfec:	4604      	mov	r4, r0
 800dfee:	4618      	mov	r0, r3
 800dff0:	4688      	mov	r8, r1
 800dff2:	f7f2 f8fd 	bl	80001f0 <strlen>
 800dff6:	f04f 0a00 	mov.w	sl, #0
 800dffa:	4605      	mov	r5, r0
 800dffc:	f04f 0b00 	mov.w	fp, #0
 800e000:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e006:	781a      	ldrb	r2, [r3, #0]
 800e008:	2a2b      	cmp	r2, #43	; 0x2b
 800e00a:	d04c      	beq.n	800e0a6 <_strtod_l+0xce>
 800e00c:	d839      	bhi.n	800e082 <_strtod_l+0xaa>
 800e00e:	2a0d      	cmp	r2, #13
 800e010:	d832      	bhi.n	800e078 <_strtod_l+0xa0>
 800e012:	2a08      	cmp	r2, #8
 800e014:	d832      	bhi.n	800e07c <_strtod_l+0xa4>
 800e016:	2a00      	cmp	r2, #0
 800e018:	d03c      	beq.n	800e094 <_strtod_l+0xbc>
 800e01a:	2300      	movs	r3, #0
 800e01c:	930e      	str	r3, [sp, #56]	; 0x38
 800e01e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e020:	7833      	ldrb	r3, [r6, #0]
 800e022:	2b30      	cmp	r3, #48	; 0x30
 800e024:	f040 80b4 	bne.w	800e190 <_strtod_l+0x1b8>
 800e028:	7873      	ldrb	r3, [r6, #1]
 800e02a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e02e:	2b58      	cmp	r3, #88	; 0x58
 800e030:	d16c      	bne.n	800e10c <_strtod_l+0x134>
 800e032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e034:	9301      	str	r3, [sp, #4]
 800e036:	ab1e      	add	r3, sp, #120	; 0x78
 800e038:	9702      	str	r7, [sp, #8]
 800e03a:	9300      	str	r3, [sp, #0]
 800e03c:	4a8f      	ldr	r2, [pc, #572]	; (800e27c <_strtod_l+0x2a4>)
 800e03e:	ab1f      	add	r3, sp, #124	; 0x7c
 800e040:	a91d      	add	r1, sp, #116	; 0x74
 800e042:	4620      	mov	r0, r4
 800e044:	f002 f81a 	bl	801007c <__gethex>
 800e048:	f010 0707 	ands.w	r7, r0, #7
 800e04c:	4605      	mov	r5, r0
 800e04e:	d005      	beq.n	800e05c <_strtod_l+0x84>
 800e050:	2f06      	cmp	r7, #6
 800e052:	d12a      	bne.n	800e0aa <_strtod_l+0xd2>
 800e054:	3601      	adds	r6, #1
 800e056:	2300      	movs	r3, #0
 800e058:	961d      	str	r6, [sp, #116]	; 0x74
 800e05a:	930e      	str	r3, [sp, #56]	; 0x38
 800e05c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e05e:	2b00      	cmp	r3, #0
 800e060:	f040 8596 	bne.w	800eb90 <_strtod_l+0xbb8>
 800e064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e066:	b1db      	cbz	r3, 800e0a0 <_strtod_l+0xc8>
 800e068:	4652      	mov	r2, sl
 800e06a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e06e:	ec43 2b10 	vmov	d0, r2, r3
 800e072:	b023      	add	sp, #140	; 0x8c
 800e074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e078:	2a20      	cmp	r2, #32
 800e07a:	d1ce      	bne.n	800e01a <_strtod_l+0x42>
 800e07c:	3301      	adds	r3, #1
 800e07e:	931d      	str	r3, [sp, #116]	; 0x74
 800e080:	e7c0      	b.n	800e004 <_strtod_l+0x2c>
 800e082:	2a2d      	cmp	r2, #45	; 0x2d
 800e084:	d1c9      	bne.n	800e01a <_strtod_l+0x42>
 800e086:	2201      	movs	r2, #1
 800e088:	920e      	str	r2, [sp, #56]	; 0x38
 800e08a:	1c5a      	adds	r2, r3, #1
 800e08c:	921d      	str	r2, [sp, #116]	; 0x74
 800e08e:	785b      	ldrb	r3, [r3, #1]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d1c4      	bne.n	800e01e <_strtod_l+0x46>
 800e094:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e096:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	f040 8576 	bne.w	800eb8c <_strtod_l+0xbb4>
 800e0a0:	4652      	mov	r2, sl
 800e0a2:	465b      	mov	r3, fp
 800e0a4:	e7e3      	b.n	800e06e <_strtod_l+0x96>
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	e7ee      	b.n	800e088 <_strtod_l+0xb0>
 800e0aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e0ac:	b13a      	cbz	r2, 800e0be <_strtod_l+0xe6>
 800e0ae:	2135      	movs	r1, #53	; 0x35
 800e0b0:	a820      	add	r0, sp, #128	; 0x80
 800e0b2:	f002 fffe 	bl	80110b2 <__copybits>
 800e0b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	f002 fbc3 	bl	8010844 <_Bfree>
 800e0be:	3f01      	subs	r7, #1
 800e0c0:	2f05      	cmp	r7, #5
 800e0c2:	d807      	bhi.n	800e0d4 <_strtod_l+0xfc>
 800e0c4:	e8df f007 	tbb	[pc, r7]
 800e0c8:	1d180b0e 	.word	0x1d180b0e
 800e0cc:	030e      	.short	0x030e
 800e0ce:	f04f 0b00 	mov.w	fp, #0
 800e0d2:	46da      	mov	sl, fp
 800e0d4:	0728      	lsls	r0, r5, #28
 800e0d6:	d5c1      	bpl.n	800e05c <_strtod_l+0x84>
 800e0d8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e0dc:	e7be      	b.n	800e05c <_strtod_l+0x84>
 800e0de:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e0e2:	e7f7      	b.n	800e0d4 <_strtod_l+0xfc>
 800e0e4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e0e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e0ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e0ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e0f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e0f6:	e7ed      	b.n	800e0d4 <_strtod_l+0xfc>
 800e0f8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e280 <_strtod_l+0x2a8>
 800e0fc:	f04f 0a00 	mov.w	sl, #0
 800e100:	e7e8      	b.n	800e0d4 <_strtod_l+0xfc>
 800e102:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e106:	f04f 3aff 	mov.w	sl, #4294967295
 800e10a:	e7e3      	b.n	800e0d4 <_strtod_l+0xfc>
 800e10c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e10e:	1c5a      	adds	r2, r3, #1
 800e110:	921d      	str	r2, [sp, #116]	; 0x74
 800e112:	785b      	ldrb	r3, [r3, #1]
 800e114:	2b30      	cmp	r3, #48	; 0x30
 800e116:	d0f9      	beq.n	800e10c <_strtod_l+0x134>
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d09f      	beq.n	800e05c <_strtod_l+0x84>
 800e11c:	2301      	movs	r3, #1
 800e11e:	f04f 0900 	mov.w	r9, #0
 800e122:	9304      	str	r3, [sp, #16]
 800e124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e126:	930a      	str	r3, [sp, #40]	; 0x28
 800e128:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e12c:	464f      	mov	r7, r9
 800e12e:	220a      	movs	r2, #10
 800e130:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e132:	7806      	ldrb	r6, [r0, #0]
 800e134:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e138:	b2d9      	uxtb	r1, r3
 800e13a:	2909      	cmp	r1, #9
 800e13c:	d92a      	bls.n	800e194 <_strtod_l+0x1bc>
 800e13e:	9907      	ldr	r1, [sp, #28]
 800e140:	462a      	mov	r2, r5
 800e142:	f7ff ff18 	bl	800df76 <strncmp>
 800e146:	b398      	cbz	r0, 800e1b0 <_strtod_l+0x1d8>
 800e148:	2000      	movs	r0, #0
 800e14a:	4633      	mov	r3, r6
 800e14c:	463d      	mov	r5, r7
 800e14e:	9007      	str	r0, [sp, #28]
 800e150:	4602      	mov	r2, r0
 800e152:	2b65      	cmp	r3, #101	; 0x65
 800e154:	d001      	beq.n	800e15a <_strtod_l+0x182>
 800e156:	2b45      	cmp	r3, #69	; 0x45
 800e158:	d118      	bne.n	800e18c <_strtod_l+0x1b4>
 800e15a:	b91d      	cbnz	r5, 800e164 <_strtod_l+0x18c>
 800e15c:	9b04      	ldr	r3, [sp, #16]
 800e15e:	4303      	orrs	r3, r0
 800e160:	d098      	beq.n	800e094 <_strtod_l+0xbc>
 800e162:	2500      	movs	r5, #0
 800e164:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e168:	f108 0301 	add.w	r3, r8, #1
 800e16c:	931d      	str	r3, [sp, #116]	; 0x74
 800e16e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e172:	2b2b      	cmp	r3, #43	; 0x2b
 800e174:	d075      	beq.n	800e262 <_strtod_l+0x28a>
 800e176:	2b2d      	cmp	r3, #45	; 0x2d
 800e178:	d07b      	beq.n	800e272 <_strtod_l+0x29a>
 800e17a:	f04f 0c00 	mov.w	ip, #0
 800e17e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e182:	2909      	cmp	r1, #9
 800e184:	f240 8082 	bls.w	800e28c <_strtod_l+0x2b4>
 800e188:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e18c:	2600      	movs	r6, #0
 800e18e:	e09d      	b.n	800e2cc <_strtod_l+0x2f4>
 800e190:	2300      	movs	r3, #0
 800e192:	e7c4      	b.n	800e11e <_strtod_l+0x146>
 800e194:	2f08      	cmp	r7, #8
 800e196:	bfd8      	it	le
 800e198:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e19a:	f100 0001 	add.w	r0, r0, #1
 800e19e:	bfda      	itte	le
 800e1a0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e1a4:	9309      	strle	r3, [sp, #36]	; 0x24
 800e1a6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e1aa:	3701      	adds	r7, #1
 800e1ac:	901d      	str	r0, [sp, #116]	; 0x74
 800e1ae:	e7bf      	b.n	800e130 <_strtod_l+0x158>
 800e1b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1b2:	195a      	adds	r2, r3, r5
 800e1b4:	921d      	str	r2, [sp, #116]	; 0x74
 800e1b6:	5d5b      	ldrb	r3, [r3, r5]
 800e1b8:	2f00      	cmp	r7, #0
 800e1ba:	d037      	beq.n	800e22c <_strtod_l+0x254>
 800e1bc:	9007      	str	r0, [sp, #28]
 800e1be:	463d      	mov	r5, r7
 800e1c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e1c4:	2a09      	cmp	r2, #9
 800e1c6:	d912      	bls.n	800e1ee <_strtod_l+0x216>
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	e7c2      	b.n	800e152 <_strtod_l+0x17a>
 800e1cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1ce:	1c5a      	adds	r2, r3, #1
 800e1d0:	921d      	str	r2, [sp, #116]	; 0x74
 800e1d2:	785b      	ldrb	r3, [r3, #1]
 800e1d4:	3001      	adds	r0, #1
 800e1d6:	2b30      	cmp	r3, #48	; 0x30
 800e1d8:	d0f8      	beq.n	800e1cc <_strtod_l+0x1f4>
 800e1da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e1de:	2a08      	cmp	r2, #8
 800e1e0:	f200 84db 	bhi.w	800eb9a <_strtod_l+0xbc2>
 800e1e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e1e6:	9007      	str	r0, [sp, #28]
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	920a      	str	r2, [sp, #40]	; 0x28
 800e1ec:	4605      	mov	r5, r0
 800e1ee:	3b30      	subs	r3, #48	; 0x30
 800e1f0:	f100 0201 	add.w	r2, r0, #1
 800e1f4:	d014      	beq.n	800e220 <_strtod_l+0x248>
 800e1f6:	9907      	ldr	r1, [sp, #28]
 800e1f8:	4411      	add	r1, r2
 800e1fa:	9107      	str	r1, [sp, #28]
 800e1fc:	462a      	mov	r2, r5
 800e1fe:	eb00 0e05 	add.w	lr, r0, r5
 800e202:	210a      	movs	r1, #10
 800e204:	4572      	cmp	r2, lr
 800e206:	d113      	bne.n	800e230 <_strtod_l+0x258>
 800e208:	182a      	adds	r2, r5, r0
 800e20a:	2a08      	cmp	r2, #8
 800e20c:	f105 0501 	add.w	r5, r5, #1
 800e210:	4405      	add	r5, r0
 800e212:	dc1c      	bgt.n	800e24e <_strtod_l+0x276>
 800e214:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e216:	220a      	movs	r2, #10
 800e218:	fb02 3301 	mla	r3, r2, r1, r3
 800e21c:	9309      	str	r3, [sp, #36]	; 0x24
 800e21e:	2200      	movs	r2, #0
 800e220:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e222:	1c59      	adds	r1, r3, #1
 800e224:	911d      	str	r1, [sp, #116]	; 0x74
 800e226:	785b      	ldrb	r3, [r3, #1]
 800e228:	4610      	mov	r0, r2
 800e22a:	e7c9      	b.n	800e1c0 <_strtod_l+0x1e8>
 800e22c:	4638      	mov	r0, r7
 800e22e:	e7d2      	b.n	800e1d6 <_strtod_l+0x1fe>
 800e230:	2a08      	cmp	r2, #8
 800e232:	dc04      	bgt.n	800e23e <_strtod_l+0x266>
 800e234:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e236:	434e      	muls	r6, r1
 800e238:	9609      	str	r6, [sp, #36]	; 0x24
 800e23a:	3201      	adds	r2, #1
 800e23c:	e7e2      	b.n	800e204 <_strtod_l+0x22c>
 800e23e:	f102 0c01 	add.w	ip, r2, #1
 800e242:	f1bc 0f10 	cmp.w	ip, #16
 800e246:	bfd8      	it	le
 800e248:	fb01 f909 	mulle.w	r9, r1, r9
 800e24c:	e7f5      	b.n	800e23a <_strtod_l+0x262>
 800e24e:	2d10      	cmp	r5, #16
 800e250:	bfdc      	itt	le
 800e252:	220a      	movle	r2, #10
 800e254:	fb02 3909 	mlale	r9, r2, r9, r3
 800e258:	e7e1      	b.n	800e21e <_strtod_l+0x246>
 800e25a:	2300      	movs	r3, #0
 800e25c:	9307      	str	r3, [sp, #28]
 800e25e:	2201      	movs	r2, #1
 800e260:	e77c      	b.n	800e15c <_strtod_l+0x184>
 800e262:	f04f 0c00 	mov.w	ip, #0
 800e266:	f108 0302 	add.w	r3, r8, #2
 800e26a:	931d      	str	r3, [sp, #116]	; 0x74
 800e26c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e270:	e785      	b.n	800e17e <_strtod_l+0x1a6>
 800e272:	f04f 0c01 	mov.w	ip, #1
 800e276:	e7f6      	b.n	800e266 <_strtod_l+0x28e>
 800e278:	08012e98 	.word	0x08012e98
 800e27c:	08012ce8 	.word	0x08012ce8
 800e280:	7ff00000 	.word	0x7ff00000
 800e284:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e286:	1c59      	adds	r1, r3, #1
 800e288:	911d      	str	r1, [sp, #116]	; 0x74
 800e28a:	785b      	ldrb	r3, [r3, #1]
 800e28c:	2b30      	cmp	r3, #48	; 0x30
 800e28e:	d0f9      	beq.n	800e284 <_strtod_l+0x2ac>
 800e290:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e294:	2908      	cmp	r1, #8
 800e296:	f63f af79 	bhi.w	800e18c <_strtod_l+0x1b4>
 800e29a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e29e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e2a0:	9308      	str	r3, [sp, #32]
 800e2a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e2a4:	1c59      	adds	r1, r3, #1
 800e2a6:	911d      	str	r1, [sp, #116]	; 0x74
 800e2a8:	785b      	ldrb	r3, [r3, #1]
 800e2aa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e2ae:	2e09      	cmp	r6, #9
 800e2b0:	d937      	bls.n	800e322 <_strtod_l+0x34a>
 800e2b2:	9e08      	ldr	r6, [sp, #32]
 800e2b4:	1b89      	subs	r1, r1, r6
 800e2b6:	2908      	cmp	r1, #8
 800e2b8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e2bc:	dc02      	bgt.n	800e2c4 <_strtod_l+0x2ec>
 800e2be:	4576      	cmp	r6, lr
 800e2c0:	bfa8      	it	ge
 800e2c2:	4676      	movge	r6, lr
 800e2c4:	f1bc 0f00 	cmp.w	ip, #0
 800e2c8:	d000      	beq.n	800e2cc <_strtod_l+0x2f4>
 800e2ca:	4276      	negs	r6, r6
 800e2cc:	2d00      	cmp	r5, #0
 800e2ce:	d14f      	bne.n	800e370 <_strtod_l+0x398>
 800e2d0:	9904      	ldr	r1, [sp, #16]
 800e2d2:	4301      	orrs	r1, r0
 800e2d4:	f47f aec2 	bne.w	800e05c <_strtod_l+0x84>
 800e2d8:	2a00      	cmp	r2, #0
 800e2da:	f47f aedb 	bne.w	800e094 <_strtod_l+0xbc>
 800e2de:	2b69      	cmp	r3, #105	; 0x69
 800e2e0:	d027      	beq.n	800e332 <_strtod_l+0x35a>
 800e2e2:	dc24      	bgt.n	800e32e <_strtod_l+0x356>
 800e2e4:	2b49      	cmp	r3, #73	; 0x49
 800e2e6:	d024      	beq.n	800e332 <_strtod_l+0x35a>
 800e2e8:	2b4e      	cmp	r3, #78	; 0x4e
 800e2ea:	f47f aed3 	bne.w	800e094 <_strtod_l+0xbc>
 800e2ee:	499e      	ldr	r1, [pc, #632]	; (800e568 <_strtod_l+0x590>)
 800e2f0:	a81d      	add	r0, sp, #116	; 0x74
 800e2f2:	f002 f91b 	bl	801052c <__match>
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	f43f aecc 	beq.w	800e094 <_strtod_l+0xbc>
 800e2fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	2b28      	cmp	r3, #40	; 0x28
 800e302:	d12d      	bne.n	800e360 <_strtod_l+0x388>
 800e304:	4999      	ldr	r1, [pc, #612]	; (800e56c <_strtod_l+0x594>)
 800e306:	aa20      	add	r2, sp, #128	; 0x80
 800e308:	a81d      	add	r0, sp, #116	; 0x74
 800e30a:	f002 f923 	bl	8010554 <__hexnan>
 800e30e:	2805      	cmp	r0, #5
 800e310:	d126      	bne.n	800e360 <_strtod_l+0x388>
 800e312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e314:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e318:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e31c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e320:	e69c      	b.n	800e05c <_strtod_l+0x84>
 800e322:	210a      	movs	r1, #10
 800e324:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e328:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e32c:	e7b9      	b.n	800e2a2 <_strtod_l+0x2ca>
 800e32e:	2b6e      	cmp	r3, #110	; 0x6e
 800e330:	e7db      	b.n	800e2ea <_strtod_l+0x312>
 800e332:	498f      	ldr	r1, [pc, #572]	; (800e570 <_strtod_l+0x598>)
 800e334:	a81d      	add	r0, sp, #116	; 0x74
 800e336:	f002 f8f9 	bl	801052c <__match>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	f43f aeaa 	beq.w	800e094 <_strtod_l+0xbc>
 800e340:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e342:	498c      	ldr	r1, [pc, #560]	; (800e574 <_strtod_l+0x59c>)
 800e344:	3b01      	subs	r3, #1
 800e346:	a81d      	add	r0, sp, #116	; 0x74
 800e348:	931d      	str	r3, [sp, #116]	; 0x74
 800e34a:	f002 f8ef 	bl	801052c <__match>
 800e34e:	b910      	cbnz	r0, 800e356 <_strtod_l+0x37e>
 800e350:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e352:	3301      	adds	r3, #1
 800e354:	931d      	str	r3, [sp, #116]	; 0x74
 800e356:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e584 <_strtod_l+0x5ac>
 800e35a:	f04f 0a00 	mov.w	sl, #0
 800e35e:	e67d      	b.n	800e05c <_strtod_l+0x84>
 800e360:	4885      	ldr	r0, [pc, #532]	; (800e578 <_strtod_l+0x5a0>)
 800e362:	f003 f9c1 	bl	80116e8 <nan>
 800e366:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e36a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e36e:	e675      	b.n	800e05c <_strtod_l+0x84>
 800e370:	9b07      	ldr	r3, [sp, #28]
 800e372:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e374:	1af3      	subs	r3, r6, r3
 800e376:	2f00      	cmp	r7, #0
 800e378:	bf08      	it	eq
 800e37a:	462f      	moveq	r7, r5
 800e37c:	2d10      	cmp	r5, #16
 800e37e:	9308      	str	r3, [sp, #32]
 800e380:	46a8      	mov	r8, r5
 800e382:	bfa8      	it	ge
 800e384:	f04f 0810 	movge.w	r8, #16
 800e388:	f7f2 f8cc 	bl	8000524 <__aeabi_ui2d>
 800e38c:	2d09      	cmp	r5, #9
 800e38e:	4682      	mov	sl, r0
 800e390:	468b      	mov	fp, r1
 800e392:	dd13      	ble.n	800e3bc <_strtod_l+0x3e4>
 800e394:	4b79      	ldr	r3, [pc, #484]	; (800e57c <_strtod_l+0x5a4>)
 800e396:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e39a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e39e:	f7f2 f93b 	bl	8000618 <__aeabi_dmul>
 800e3a2:	4682      	mov	sl, r0
 800e3a4:	4648      	mov	r0, r9
 800e3a6:	468b      	mov	fp, r1
 800e3a8:	f7f2 f8bc 	bl	8000524 <__aeabi_ui2d>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	4650      	mov	r0, sl
 800e3b2:	4659      	mov	r1, fp
 800e3b4:	f7f1 ff7a 	bl	80002ac <__adddf3>
 800e3b8:	4682      	mov	sl, r0
 800e3ba:	468b      	mov	fp, r1
 800e3bc:	2d0f      	cmp	r5, #15
 800e3be:	dc38      	bgt.n	800e432 <_strtod_l+0x45a>
 800e3c0:	9b08      	ldr	r3, [sp, #32]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	f43f ae4a 	beq.w	800e05c <_strtod_l+0x84>
 800e3c8:	dd24      	ble.n	800e414 <_strtod_l+0x43c>
 800e3ca:	2b16      	cmp	r3, #22
 800e3cc:	dc0b      	bgt.n	800e3e6 <_strtod_l+0x40e>
 800e3ce:	4d6b      	ldr	r5, [pc, #428]	; (800e57c <_strtod_l+0x5a4>)
 800e3d0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e3d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e3d8:	4652      	mov	r2, sl
 800e3da:	465b      	mov	r3, fp
 800e3dc:	f7f2 f91c 	bl	8000618 <__aeabi_dmul>
 800e3e0:	4682      	mov	sl, r0
 800e3e2:	468b      	mov	fp, r1
 800e3e4:	e63a      	b.n	800e05c <_strtod_l+0x84>
 800e3e6:	9a08      	ldr	r2, [sp, #32]
 800e3e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	db20      	blt.n	800e432 <_strtod_l+0x45a>
 800e3f0:	4c62      	ldr	r4, [pc, #392]	; (800e57c <_strtod_l+0x5a4>)
 800e3f2:	f1c5 050f 	rsb	r5, r5, #15
 800e3f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e3fa:	4652      	mov	r2, sl
 800e3fc:	465b      	mov	r3, fp
 800e3fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e402:	f7f2 f909 	bl	8000618 <__aeabi_dmul>
 800e406:	9b08      	ldr	r3, [sp, #32]
 800e408:	1b5d      	subs	r5, r3, r5
 800e40a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e40e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e412:	e7e3      	b.n	800e3dc <_strtod_l+0x404>
 800e414:	9b08      	ldr	r3, [sp, #32]
 800e416:	3316      	adds	r3, #22
 800e418:	db0b      	blt.n	800e432 <_strtod_l+0x45a>
 800e41a:	9b07      	ldr	r3, [sp, #28]
 800e41c:	4a57      	ldr	r2, [pc, #348]	; (800e57c <_strtod_l+0x5a4>)
 800e41e:	1b9e      	subs	r6, r3, r6
 800e420:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e424:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e428:	4650      	mov	r0, sl
 800e42a:	4659      	mov	r1, fp
 800e42c:	f7f2 fa1e 	bl	800086c <__aeabi_ddiv>
 800e430:	e7d6      	b.n	800e3e0 <_strtod_l+0x408>
 800e432:	9b08      	ldr	r3, [sp, #32]
 800e434:	eba5 0808 	sub.w	r8, r5, r8
 800e438:	4498      	add	r8, r3
 800e43a:	f1b8 0f00 	cmp.w	r8, #0
 800e43e:	dd71      	ble.n	800e524 <_strtod_l+0x54c>
 800e440:	f018 030f 	ands.w	r3, r8, #15
 800e444:	d00a      	beq.n	800e45c <_strtod_l+0x484>
 800e446:	494d      	ldr	r1, [pc, #308]	; (800e57c <_strtod_l+0x5a4>)
 800e448:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e44c:	4652      	mov	r2, sl
 800e44e:	465b      	mov	r3, fp
 800e450:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e454:	f7f2 f8e0 	bl	8000618 <__aeabi_dmul>
 800e458:	4682      	mov	sl, r0
 800e45a:	468b      	mov	fp, r1
 800e45c:	f038 080f 	bics.w	r8, r8, #15
 800e460:	d04d      	beq.n	800e4fe <_strtod_l+0x526>
 800e462:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e466:	dd22      	ble.n	800e4ae <_strtod_l+0x4d6>
 800e468:	2500      	movs	r5, #0
 800e46a:	462e      	mov	r6, r5
 800e46c:	9509      	str	r5, [sp, #36]	; 0x24
 800e46e:	9507      	str	r5, [sp, #28]
 800e470:	2322      	movs	r3, #34	; 0x22
 800e472:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e584 <_strtod_l+0x5ac>
 800e476:	6023      	str	r3, [r4, #0]
 800e478:	f04f 0a00 	mov.w	sl, #0
 800e47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e47e:	2b00      	cmp	r3, #0
 800e480:	f43f adec 	beq.w	800e05c <_strtod_l+0x84>
 800e484:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e486:	4620      	mov	r0, r4
 800e488:	f002 f9dc 	bl	8010844 <_Bfree>
 800e48c:	9907      	ldr	r1, [sp, #28]
 800e48e:	4620      	mov	r0, r4
 800e490:	f002 f9d8 	bl	8010844 <_Bfree>
 800e494:	4631      	mov	r1, r6
 800e496:	4620      	mov	r0, r4
 800e498:	f002 f9d4 	bl	8010844 <_Bfree>
 800e49c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e49e:	4620      	mov	r0, r4
 800e4a0:	f002 f9d0 	bl	8010844 <_Bfree>
 800e4a4:	4629      	mov	r1, r5
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	f002 f9cc 	bl	8010844 <_Bfree>
 800e4ac:	e5d6      	b.n	800e05c <_strtod_l+0x84>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e4b4:	4650      	mov	r0, sl
 800e4b6:	4659      	mov	r1, fp
 800e4b8:	4699      	mov	r9, r3
 800e4ba:	f1b8 0f01 	cmp.w	r8, #1
 800e4be:	dc21      	bgt.n	800e504 <_strtod_l+0x52c>
 800e4c0:	b10b      	cbz	r3, 800e4c6 <_strtod_l+0x4ee>
 800e4c2:	4682      	mov	sl, r0
 800e4c4:	468b      	mov	fp, r1
 800e4c6:	4b2e      	ldr	r3, [pc, #184]	; (800e580 <_strtod_l+0x5a8>)
 800e4c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e4cc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e4d0:	4652      	mov	r2, sl
 800e4d2:	465b      	mov	r3, fp
 800e4d4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e4d8:	f7f2 f89e 	bl	8000618 <__aeabi_dmul>
 800e4dc:	4b29      	ldr	r3, [pc, #164]	; (800e584 <_strtod_l+0x5ac>)
 800e4de:	460a      	mov	r2, r1
 800e4e0:	400b      	ands	r3, r1
 800e4e2:	4929      	ldr	r1, [pc, #164]	; (800e588 <_strtod_l+0x5b0>)
 800e4e4:	428b      	cmp	r3, r1
 800e4e6:	4682      	mov	sl, r0
 800e4e8:	d8be      	bhi.n	800e468 <_strtod_l+0x490>
 800e4ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e4ee:	428b      	cmp	r3, r1
 800e4f0:	bf86      	itte	hi
 800e4f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e58c <_strtod_l+0x5b4>
 800e4f6:	f04f 3aff 	movhi.w	sl, #4294967295
 800e4fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e4fe:	2300      	movs	r3, #0
 800e500:	9304      	str	r3, [sp, #16]
 800e502:	e081      	b.n	800e608 <_strtod_l+0x630>
 800e504:	f018 0f01 	tst.w	r8, #1
 800e508:	d007      	beq.n	800e51a <_strtod_l+0x542>
 800e50a:	4b1d      	ldr	r3, [pc, #116]	; (800e580 <_strtod_l+0x5a8>)
 800e50c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e514:	f7f2 f880 	bl	8000618 <__aeabi_dmul>
 800e518:	2301      	movs	r3, #1
 800e51a:	f109 0901 	add.w	r9, r9, #1
 800e51e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e522:	e7ca      	b.n	800e4ba <_strtod_l+0x4e2>
 800e524:	d0eb      	beq.n	800e4fe <_strtod_l+0x526>
 800e526:	f1c8 0800 	rsb	r8, r8, #0
 800e52a:	f018 020f 	ands.w	r2, r8, #15
 800e52e:	d00a      	beq.n	800e546 <_strtod_l+0x56e>
 800e530:	4b12      	ldr	r3, [pc, #72]	; (800e57c <_strtod_l+0x5a4>)
 800e532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e536:	4650      	mov	r0, sl
 800e538:	4659      	mov	r1, fp
 800e53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53e:	f7f2 f995 	bl	800086c <__aeabi_ddiv>
 800e542:	4682      	mov	sl, r0
 800e544:	468b      	mov	fp, r1
 800e546:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e54a:	d0d8      	beq.n	800e4fe <_strtod_l+0x526>
 800e54c:	f1b8 0f1f 	cmp.w	r8, #31
 800e550:	dd1e      	ble.n	800e590 <_strtod_l+0x5b8>
 800e552:	2500      	movs	r5, #0
 800e554:	462e      	mov	r6, r5
 800e556:	9509      	str	r5, [sp, #36]	; 0x24
 800e558:	9507      	str	r5, [sp, #28]
 800e55a:	2322      	movs	r3, #34	; 0x22
 800e55c:	f04f 0a00 	mov.w	sl, #0
 800e560:	f04f 0b00 	mov.w	fp, #0
 800e564:	6023      	str	r3, [r4, #0]
 800e566:	e789      	b.n	800e47c <_strtod_l+0x4a4>
 800e568:	08012cb9 	.word	0x08012cb9
 800e56c:	08012cfc 	.word	0x08012cfc
 800e570:	08012cb1 	.word	0x08012cb1
 800e574:	08012d3b 	.word	0x08012d3b
 800e578:	08013058 	.word	0x08013058
 800e57c:	08012f38 	.word	0x08012f38
 800e580:	08012f10 	.word	0x08012f10
 800e584:	7ff00000 	.word	0x7ff00000
 800e588:	7ca00000 	.word	0x7ca00000
 800e58c:	7fefffff 	.word	0x7fefffff
 800e590:	f018 0310 	ands.w	r3, r8, #16
 800e594:	bf18      	it	ne
 800e596:	236a      	movne	r3, #106	; 0x6a
 800e598:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e950 <_strtod_l+0x978>
 800e59c:	9304      	str	r3, [sp, #16]
 800e59e:	4650      	mov	r0, sl
 800e5a0:	4659      	mov	r1, fp
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	f018 0f01 	tst.w	r8, #1
 800e5a8:	d004      	beq.n	800e5b4 <_strtod_l+0x5dc>
 800e5aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e5ae:	f7f2 f833 	bl	8000618 <__aeabi_dmul>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e5b8:	f109 0908 	add.w	r9, r9, #8
 800e5bc:	d1f2      	bne.n	800e5a4 <_strtod_l+0x5cc>
 800e5be:	b10b      	cbz	r3, 800e5c4 <_strtod_l+0x5ec>
 800e5c0:	4682      	mov	sl, r0
 800e5c2:	468b      	mov	fp, r1
 800e5c4:	9b04      	ldr	r3, [sp, #16]
 800e5c6:	b1bb      	cbz	r3, 800e5f8 <_strtod_l+0x620>
 800e5c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e5cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	4659      	mov	r1, fp
 800e5d4:	dd10      	ble.n	800e5f8 <_strtod_l+0x620>
 800e5d6:	2b1f      	cmp	r3, #31
 800e5d8:	f340 8128 	ble.w	800e82c <_strtod_l+0x854>
 800e5dc:	2b34      	cmp	r3, #52	; 0x34
 800e5de:	bfde      	ittt	le
 800e5e0:	3b20      	suble	r3, #32
 800e5e2:	f04f 32ff 	movle.w	r2, #4294967295
 800e5e6:	fa02 f303 	lslle.w	r3, r2, r3
 800e5ea:	f04f 0a00 	mov.w	sl, #0
 800e5ee:	bfcc      	ite	gt
 800e5f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e5f4:	ea03 0b01 	andle.w	fp, r3, r1
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	4650      	mov	r0, sl
 800e5fe:	4659      	mov	r1, fp
 800e600:	f7f2 fa72 	bl	8000ae8 <__aeabi_dcmpeq>
 800e604:	2800      	cmp	r0, #0
 800e606:	d1a4      	bne.n	800e552 <_strtod_l+0x57a>
 800e608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e60a:	9300      	str	r3, [sp, #0]
 800e60c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e60e:	462b      	mov	r3, r5
 800e610:	463a      	mov	r2, r7
 800e612:	4620      	mov	r0, r4
 800e614:	f002 f982 	bl	801091c <__s2b>
 800e618:	9009      	str	r0, [sp, #36]	; 0x24
 800e61a:	2800      	cmp	r0, #0
 800e61c:	f43f af24 	beq.w	800e468 <_strtod_l+0x490>
 800e620:	9b07      	ldr	r3, [sp, #28]
 800e622:	1b9e      	subs	r6, r3, r6
 800e624:	9b08      	ldr	r3, [sp, #32]
 800e626:	2b00      	cmp	r3, #0
 800e628:	bfb4      	ite	lt
 800e62a:	4633      	movlt	r3, r6
 800e62c:	2300      	movge	r3, #0
 800e62e:	9310      	str	r3, [sp, #64]	; 0x40
 800e630:	9b08      	ldr	r3, [sp, #32]
 800e632:	2500      	movs	r5, #0
 800e634:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e638:	9318      	str	r3, [sp, #96]	; 0x60
 800e63a:	462e      	mov	r6, r5
 800e63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e63e:	4620      	mov	r0, r4
 800e640:	6859      	ldr	r1, [r3, #4]
 800e642:	f002 f8bf 	bl	80107c4 <_Balloc>
 800e646:	9007      	str	r0, [sp, #28]
 800e648:	2800      	cmp	r0, #0
 800e64a:	f43f af11 	beq.w	800e470 <_strtod_l+0x498>
 800e64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e650:	691a      	ldr	r2, [r3, #16]
 800e652:	3202      	adds	r2, #2
 800e654:	f103 010c 	add.w	r1, r3, #12
 800e658:	0092      	lsls	r2, r2, #2
 800e65a:	300c      	adds	r0, #12
 800e65c:	f7fe fcd0 	bl	800d000 <memcpy>
 800e660:	ec4b ab10 	vmov	d0, sl, fp
 800e664:	aa20      	add	r2, sp, #128	; 0x80
 800e666:	a91f      	add	r1, sp, #124	; 0x7c
 800e668:	4620      	mov	r0, r4
 800e66a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e66e:	f002 fc91 	bl	8010f94 <__d2b>
 800e672:	901e      	str	r0, [sp, #120]	; 0x78
 800e674:	2800      	cmp	r0, #0
 800e676:	f43f aefb 	beq.w	800e470 <_strtod_l+0x498>
 800e67a:	2101      	movs	r1, #1
 800e67c:	4620      	mov	r0, r4
 800e67e:	f002 f9e7 	bl	8010a50 <__i2b>
 800e682:	4606      	mov	r6, r0
 800e684:	2800      	cmp	r0, #0
 800e686:	f43f aef3 	beq.w	800e470 <_strtod_l+0x498>
 800e68a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e68c:	9904      	ldr	r1, [sp, #16]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	bfab      	itete	ge
 800e692:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e694:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e696:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e698:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e69c:	bfac      	ite	ge
 800e69e:	eb03 0902 	addge.w	r9, r3, r2
 800e6a2:	1ad7      	sublt	r7, r2, r3
 800e6a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e6a6:	eba3 0801 	sub.w	r8, r3, r1
 800e6aa:	4490      	add	r8, r2
 800e6ac:	4ba3      	ldr	r3, [pc, #652]	; (800e93c <_strtod_l+0x964>)
 800e6ae:	f108 38ff 	add.w	r8, r8, #4294967295
 800e6b2:	4598      	cmp	r8, r3
 800e6b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e6b8:	f280 80cc 	bge.w	800e854 <_strtod_l+0x87c>
 800e6bc:	eba3 0308 	sub.w	r3, r3, r8
 800e6c0:	2b1f      	cmp	r3, #31
 800e6c2:	eba2 0203 	sub.w	r2, r2, r3
 800e6c6:	f04f 0101 	mov.w	r1, #1
 800e6ca:	f300 80b6 	bgt.w	800e83a <_strtod_l+0x862>
 800e6ce:	fa01 f303 	lsl.w	r3, r1, r3
 800e6d2:	9311      	str	r3, [sp, #68]	; 0x44
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	930c      	str	r3, [sp, #48]	; 0x30
 800e6d8:	eb09 0802 	add.w	r8, r9, r2
 800e6dc:	9b04      	ldr	r3, [sp, #16]
 800e6de:	45c1      	cmp	r9, r8
 800e6e0:	4417      	add	r7, r2
 800e6e2:	441f      	add	r7, r3
 800e6e4:	464b      	mov	r3, r9
 800e6e6:	bfa8      	it	ge
 800e6e8:	4643      	movge	r3, r8
 800e6ea:	42bb      	cmp	r3, r7
 800e6ec:	bfa8      	it	ge
 800e6ee:	463b      	movge	r3, r7
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	bfc2      	ittt	gt
 800e6f4:	eba8 0803 	subgt.w	r8, r8, r3
 800e6f8:	1aff      	subgt	r7, r7, r3
 800e6fa:	eba9 0903 	subgt.w	r9, r9, r3
 800e6fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e700:	2b00      	cmp	r3, #0
 800e702:	dd17      	ble.n	800e734 <_strtod_l+0x75c>
 800e704:	4631      	mov	r1, r6
 800e706:	461a      	mov	r2, r3
 800e708:	4620      	mov	r0, r4
 800e70a:	f002 fa5d 	bl	8010bc8 <__pow5mult>
 800e70e:	4606      	mov	r6, r0
 800e710:	2800      	cmp	r0, #0
 800e712:	f43f aead 	beq.w	800e470 <_strtod_l+0x498>
 800e716:	4601      	mov	r1, r0
 800e718:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e71a:	4620      	mov	r0, r4
 800e71c:	f002 f9ae 	bl	8010a7c <__multiply>
 800e720:	900f      	str	r0, [sp, #60]	; 0x3c
 800e722:	2800      	cmp	r0, #0
 800e724:	f43f aea4 	beq.w	800e470 <_strtod_l+0x498>
 800e728:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e72a:	4620      	mov	r0, r4
 800e72c:	f002 f88a 	bl	8010844 <_Bfree>
 800e730:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e732:	931e      	str	r3, [sp, #120]	; 0x78
 800e734:	f1b8 0f00 	cmp.w	r8, #0
 800e738:	f300 8091 	bgt.w	800e85e <_strtod_l+0x886>
 800e73c:	9b08      	ldr	r3, [sp, #32]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	dd08      	ble.n	800e754 <_strtod_l+0x77c>
 800e742:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e744:	9907      	ldr	r1, [sp, #28]
 800e746:	4620      	mov	r0, r4
 800e748:	f002 fa3e 	bl	8010bc8 <__pow5mult>
 800e74c:	9007      	str	r0, [sp, #28]
 800e74e:	2800      	cmp	r0, #0
 800e750:	f43f ae8e 	beq.w	800e470 <_strtod_l+0x498>
 800e754:	2f00      	cmp	r7, #0
 800e756:	dd08      	ble.n	800e76a <_strtod_l+0x792>
 800e758:	9907      	ldr	r1, [sp, #28]
 800e75a:	463a      	mov	r2, r7
 800e75c:	4620      	mov	r0, r4
 800e75e:	f002 fa8d 	bl	8010c7c <__lshift>
 800e762:	9007      	str	r0, [sp, #28]
 800e764:	2800      	cmp	r0, #0
 800e766:	f43f ae83 	beq.w	800e470 <_strtod_l+0x498>
 800e76a:	f1b9 0f00 	cmp.w	r9, #0
 800e76e:	dd08      	ble.n	800e782 <_strtod_l+0x7aa>
 800e770:	4631      	mov	r1, r6
 800e772:	464a      	mov	r2, r9
 800e774:	4620      	mov	r0, r4
 800e776:	f002 fa81 	bl	8010c7c <__lshift>
 800e77a:	4606      	mov	r6, r0
 800e77c:	2800      	cmp	r0, #0
 800e77e:	f43f ae77 	beq.w	800e470 <_strtod_l+0x498>
 800e782:	9a07      	ldr	r2, [sp, #28]
 800e784:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e786:	4620      	mov	r0, r4
 800e788:	f002 fb00 	bl	8010d8c <__mdiff>
 800e78c:	4605      	mov	r5, r0
 800e78e:	2800      	cmp	r0, #0
 800e790:	f43f ae6e 	beq.w	800e470 <_strtod_l+0x498>
 800e794:	68c3      	ldr	r3, [r0, #12]
 800e796:	930f      	str	r3, [sp, #60]	; 0x3c
 800e798:	2300      	movs	r3, #0
 800e79a:	60c3      	str	r3, [r0, #12]
 800e79c:	4631      	mov	r1, r6
 800e79e:	f002 fad9 	bl	8010d54 <__mcmp>
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	da65      	bge.n	800e872 <_strtod_l+0x89a>
 800e7a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e7a8:	ea53 030a 	orrs.w	r3, r3, sl
 800e7ac:	f040 8087 	bne.w	800e8be <_strtod_l+0x8e6>
 800e7b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f040 8082 	bne.w	800e8be <_strtod_l+0x8e6>
 800e7ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e7be:	0d1b      	lsrs	r3, r3, #20
 800e7c0:	051b      	lsls	r3, r3, #20
 800e7c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e7c6:	d97a      	bls.n	800e8be <_strtod_l+0x8e6>
 800e7c8:	696b      	ldr	r3, [r5, #20]
 800e7ca:	b913      	cbnz	r3, 800e7d2 <_strtod_l+0x7fa>
 800e7cc:	692b      	ldr	r3, [r5, #16]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	dd75      	ble.n	800e8be <_strtod_l+0x8e6>
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	f002 fa50 	bl	8010c7c <__lshift>
 800e7dc:	4631      	mov	r1, r6
 800e7de:	4605      	mov	r5, r0
 800e7e0:	f002 fab8 	bl	8010d54 <__mcmp>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	dd6a      	ble.n	800e8be <_strtod_l+0x8e6>
 800e7e8:	9904      	ldr	r1, [sp, #16]
 800e7ea:	4a55      	ldr	r2, [pc, #340]	; (800e940 <_strtod_l+0x968>)
 800e7ec:	465b      	mov	r3, fp
 800e7ee:	2900      	cmp	r1, #0
 800e7f0:	f000 8085 	beq.w	800e8fe <_strtod_l+0x926>
 800e7f4:	ea02 010b 	and.w	r1, r2, fp
 800e7f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e7fc:	dc7f      	bgt.n	800e8fe <_strtod_l+0x926>
 800e7fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e802:	f77f aeaa 	ble.w	800e55a <_strtod_l+0x582>
 800e806:	4a4f      	ldr	r2, [pc, #316]	; (800e944 <_strtod_l+0x96c>)
 800e808:	2300      	movs	r3, #0
 800e80a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e80e:	4650      	mov	r0, sl
 800e810:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e814:	4659      	mov	r1, fp
 800e816:	f7f1 feff 	bl	8000618 <__aeabi_dmul>
 800e81a:	460b      	mov	r3, r1
 800e81c:	4303      	orrs	r3, r0
 800e81e:	bf08      	it	eq
 800e820:	2322      	moveq	r3, #34	; 0x22
 800e822:	4682      	mov	sl, r0
 800e824:	468b      	mov	fp, r1
 800e826:	bf08      	it	eq
 800e828:	6023      	streq	r3, [r4, #0]
 800e82a:	e62b      	b.n	800e484 <_strtod_l+0x4ac>
 800e82c:	f04f 32ff 	mov.w	r2, #4294967295
 800e830:	fa02 f303 	lsl.w	r3, r2, r3
 800e834:	ea03 0a0a 	and.w	sl, r3, sl
 800e838:	e6de      	b.n	800e5f8 <_strtod_l+0x620>
 800e83a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e83e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e842:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e846:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e84a:	fa01 f308 	lsl.w	r3, r1, r8
 800e84e:	930c      	str	r3, [sp, #48]	; 0x30
 800e850:	9111      	str	r1, [sp, #68]	; 0x44
 800e852:	e741      	b.n	800e6d8 <_strtod_l+0x700>
 800e854:	2300      	movs	r3, #0
 800e856:	930c      	str	r3, [sp, #48]	; 0x30
 800e858:	2301      	movs	r3, #1
 800e85a:	9311      	str	r3, [sp, #68]	; 0x44
 800e85c:	e73c      	b.n	800e6d8 <_strtod_l+0x700>
 800e85e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e860:	4642      	mov	r2, r8
 800e862:	4620      	mov	r0, r4
 800e864:	f002 fa0a 	bl	8010c7c <__lshift>
 800e868:	901e      	str	r0, [sp, #120]	; 0x78
 800e86a:	2800      	cmp	r0, #0
 800e86c:	f47f af66 	bne.w	800e73c <_strtod_l+0x764>
 800e870:	e5fe      	b.n	800e470 <_strtod_l+0x498>
 800e872:	465f      	mov	r7, fp
 800e874:	d16e      	bne.n	800e954 <_strtod_l+0x97c>
 800e876:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e878:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e87c:	b342      	cbz	r2, 800e8d0 <_strtod_l+0x8f8>
 800e87e:	4a32      	ldr	r2, [pc, #200]	; (800e948 <_strtod_l+0x970>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d128      	bne.n	800e8d6 <_strtod_l+0x8fe>
 800e884:	9b04      	ldr	r3, [sp, #16]
 800e886:	4650      	mov	r0, sl
 800e888:	b1eb      	cbz	r3, 800e8c6 <_strtod_l+0x8ee>
 800e88a:	4a2d      	ldr	r2, [pc, #180]	; (800e940 <_strtod_l+0x968>)
 800e88c:	403a      	ands	r2, r7
 800e88e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e892:	f04f 31ff 	mov.w	r1, #4294967295
 800e896:	d819      	bhi.n	800e8cc <_strtod_l+0x8f4>
 800e898:	0d12      	lsrs	r2, r2, #20
 800e89a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e89e:	fa01 f303 	lsl.w	r3, r1, r3
 800e8a2:	4298      	cmp	r0, r3
 800e8a4:	d117      	bne.n	800e8d6 <_strtod_l+0x8fe>
 800e8a6:	4b29      	ldr	r3, [pc, #164]	; (800e94c <_strtod_l+0x974>)
 800e8a8:	429f      	cmp	r7, r3
 800e8aa:	d102      	bne.n	800e8b2 <_strtod_l+0x8da>
 800e8ac:	3001      	adds	r0, #1
 800e8ae:	f43f addf 	beq.w	800e470 <_strtod_l+0x498>
 800e8b2:	4b23      	ldr	r3, [pc, #140]	; (800e940 <_strtod_l+0x968>)
 800e8b4:	403b      	ands	r3, r7
 800e8b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e8ba:	f04f 0a00 	mov.w	sl, #0
 800e8be:	9b04      	ldr	r3, [sp, #16]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d1a0      	bne.n	800e806 <_strtod_l+0x82e>
 800e8c4:	e5de      	b.n	800e484 <_strtod_l+0x4ac>
 800e8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ca:	e7ea      	b.n	800e8a2 <_strtod_l+0x8ca>
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	e7e8      	b.n	800e8a2 <_strtod_l+0x8ca>
 800e8d0:	ea53 030a 	orrs.w	r3, r3, sl
 800e8d4:	d088      	beq.n	800e7e8 <_strtod_l+0x810>
 800e8d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e8d8:	b1db      	cbz	r3, 800e912 <_strtod_l+0x93a>
 800e8da:	423b      	tst	r3, r7
 800e8dc:	d0ef      	beq.n	800e8be <_strtod_l+0x8e6>
 800e8de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e8e0:	9a04      	ldr	r2, [sp, #16]
 800e8e2:	4650      	mov	r0, sl
 800e8e4:	4659      	mov	r1, fp
 800e8e6:	b1c3      	cbz	r3, 800e91a <_strtod_l+0x942>
 800e8e8:	f7ff fb57 	bl	800df9a <sulp>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	460b      	mov	r3, r1
 800e8f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e8f4:	f7f1 fcda 	bl	80002ac <__adddf3>
 800e8f8:	4682      	mov	sl, r0
 800e8fa:	468b      	mov	fp, r1
 800e8fc:	e7df      	b.n	800e8be <_strtod_l+0x8e6>
 800e8fe:	4013      	ands	r3, r2
 800e900:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e904:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e908:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e90c:	f04f 3aff 	mov.w	sl, #4294967295
 800e910:	e7d5      	b.n	800e8be <_strtod_l+0x8e6>
 800e912:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e914:	ea13 0f0a 	tst.w	r3, sl
 800e918:	e7e0      	b.n	800e8dc <_strtod_l+0x904>
 800e91a:	f7ff fb3e 	bl	800df9a <sulp>
 800e91e:	4602      	mov	r2, r0
 800e920:	460b      	mov	r3, r1
 800e922:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e926:	f7f1 fcbf 	bl	80002a8 <__aeabi_dsub>
 800e92a:	2200      	movs	r2, #0
 800e92c:	2300      	movs	r3, #0
 800e92e:	4682      	mov	sl, r0
 800e930:	468b      	mov	fp, r1
 800e932:	f7f2 f8d9 	bl	8000ae8 <__aeabi_dcmpeq>
 800e936:	2800      	cmp	r0, #0
 800e938:	d0c1      	beq.n	800e8be <_strtod_l+0x8e6>
 800e93a:	e60e      	b.n	800e55a <_strtod_l+0x582>
 800e93c:	fffffc02 	.word	0xfffffc02
 800e940:	7ff00000 	.word	0x7ff00000
 800e944:	39500000 	.word	0x39500000
 800e948:	000fffff 	.word	0x000fffff
 800e94c:	7fefffff 	.word	0x7fefffff
 800e950:	08012d10 	.word	0x08012d10
 800e954:	4631      	mov	r1, r6
 800e956:	4628      	mov	r0, r5
 800e958:	f002 fb78 	bl	801104c <__ratio>
 800e95c:	ec59 8b10 	vmov	r8, r9, d0
 800e960:	ee10 0a10 	vmov	r0, s0
 800e964:	2200      	movs	r2, #0
 800e966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e96a:	4649      	mov	r1, r9
 800e96c:	f7f2 f8d0 	bl	8000b10 <__aeabi_dcmple>
 800e970:	2800      	cmp	r0, #0
 800e972:	d07c      	beq.n	800ea6e <_strtod_l+0xa96>
 800e974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e976:	2b00      	cmp	r3, #0
 800e978:	d04c      	beq.n	800ea14 <_strtod_l+0xa3c>
 800e97a:	4b95      	ldr	r3, [pc, #596]	; (800ebd0 <_strtod_l+0xbf8>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e982:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ebd0 <_strtod_l+0xbf8>
 800e986:	f04f 0800 	mov.w	r8, #0
 800e98a:	4b92      	ldr	r3, [pc, #584]	; (800ebd4 <_strtod_l+0xbfc>)
 800e98c:	403b      	ands	r3, r7
 800e98e:	9311      	str	r3, [sp, #68]	; 0x44
 800e990:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e992:	4b91      	ldr	r3, [pc, #580]	; (800ebd8 <_strtod_l+0xc00>)
 800e994:	429a      	cmp	r2, r3
 800e996:	f040 80b2 	bne.w	800eafe <_strtod_l+0xb26>
 800e99a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e99e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e9a2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e9a6:	ec4b ab10 	vmov	d0, sl, fp
 800e9aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e9ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e9b2:	f002 fa73 	bl	8010e9c <__ulp>
 800e9b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e9ba:	ec53 2b10 	vmov	r2, r3, d0
 800e9be:	f7f1 fe2b 	bl	8000618 <__aeabi_dmul>
 800e9c2:	4652      	mov	r2, sl
 800e9c4:	465b      	mov	r3, fp
 800e9c6:	f7f1 fc71 	bl	80002ac <__adddf3>
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	4981      	ldr	r1, [pc, #516]	; (800ebd4 <_strtod_l+0xbfc>)
 800e9ce:	4a83      	ldr	r2, [pc, #524]	; (800ebdc <_strtod_l+0xc04>)
 800e9d0:	4019      	ands	r1, r3
 800e9d2:	4291      	cmp	r1, r2
 800e9d4:	4682      	mov	sl, r0
 800e9d6:	d95e      	bls.n	800ea96 <_strtod_l+0xabe>
 800e9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d103      	bne.n	800e9ea <_strtod_l+0xa12>
 800e9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	f43f ad43 	beq.w	800e470 <_strtod_l+0x498>
 800e9ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800ebe8 <_strtod_l+0xc10>
 800e9ee:	f04f 3aff 	mov.w	sl, #4294967295
 800e9f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	f001 ff25 	bl	8010844 <_Bfree>
 800e9fa:	9907      	ldr	r1, [sp, #28]
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f001 ff21 	bl	8010844 <_Bfree>
 800ea02:	4631      	mov	r1, r6
 800ea04:	4620      	mov	r0, r4
 800ea06:	f001 ff1d 	bl	8010844 <_Bfree>
 800ea0a:	4629      	mov	r1, r5
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	f001 ff19 	bl	8010844 <_Bfree>
 800ea12:	e613      	b.n	800e63c <_strtod_l+0x664>
 800ea14:	f1ba 0f00 	cmp.w	sl, #0
 800ea18:	d11b      	bne.n	800ea52 <_strtod_l+0xa7a>
 800ea1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea1e:	b9f3      	cbnz	r3, 800ea5e <_strtod_l+0xa86>
 800ea20:	4b6b      	ldr	r3, [pc, #428]	; (800ebd0 <_strtod_l+0xbf8>)
 800ea22:	2200      	movs	r2, #0
 800ea24:	4640      	mov	r0, r8
 800ea26:	4649      	mov	r1, r9
 800ea28:	f7f2 f868 	bl	8000afc <__aeabi_dcmplt>
 800ea2c:	b9d0      	cbnz	r0, 800ea64 <_strtod_l+0xa8c>
 800ea2e:	4640      	mov	r0, r8
 800ea30:	4649      	mov	r1, r9
 800ea32:	4b6b      	ldr	r3, [pc, #428]	; (800ebe0 <_strtod_l+0xc08>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	f7f1 fdef 	bl	8000618 <__aeabi_dmul>
 800ea3a:	4680      	mov	r8, r0
 800ea3c:	4689      	mov	r9, r1
 800ea3e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ea42:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ea46:	931b      	str	r3, [sp, #108]	; 0x6c
 800ea48:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ea4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ea50:	e79b      	b.n	800e98a <_strtod_l+0x9b2>
 800ea52:	f1ba 0f01 	cmp.w	sl, #1
 800ea56:	d102      	bne.n	800ea5e <_strtod_l+0xa86>
 800ea58:	2f00      	cmp	r7, #0
 800ea5a:	f43f ad7e 	beq.w	800e55a <_strtod_l+0x582>
 800ea5e:	4b61      	ldr	r3, [pc, #388]	; (800ebe4 <_strtod_l+0xc0c>)
 800ea60:	2200      	movs	r2, #0
 800ea62:	e78c      	b.n	800e97e <_strtod_l+0x9a6>
 800ea64:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ebe0 <_strtod_l+0xc08>
 800ea68:	f04f 0800 	mov.w	r8, #0
 800ea6c:	e7e7      	b.n	800ea3e <_strtod_l+0xa66>
 800ea6e:	4b5c      	ldr	r3, [pc, #368]	; (800ebe0 <_strtod_l+0xc08>)
 800ea70:	4640      	mov	r0, r8
 800ea72:	4649      	mov	r1, r9
 800ea74:	2200      	movs	r2, #0
 800ea76:	f7f1 fdcf 	bl	8000618 <__aeabi_dmul>
 800ea7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea7c:	4680      	mov	r8, r0
 800ea7e:	4689      	mov	r9, r1
 800ea80:	b933      	cbnz	r3, 800ea90 <_strtod_l+0xab8>
 800ea82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea86:	9012      	str	r0, [sp, #72]	; 0x48
 800ea88:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ea8e:	e7dd      	b.n	800ea4c <_strtod_l+0xa74>
 800ea90:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800ea94:	e7f9      	b.n	800ea8a <_strtod_l+0xab2>
 800ea96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ea9a:	9b04      	ldr	r3, [sp, #16]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d1a8      	bne.n	800e9f2 <_strtod_l+0xa1a>
 800eaa0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eaa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eaa6:	0d1b      	lsrs	r3, r3, #20
 800eaa8:	051b      	lsls	r3, r3, #20
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d1a1      	bne.n	800e9f2 <_strtod_l+0xa1a>
 800eaae:	4640      	mov	r0, r8
 800eab0:	4649      	mov	r1, r9
 800eab2:	f7f2 f911 	bl	8000cd8 <__aeabi_d2lz>
 800eab6:	f7f1 fd81 	bl	80005bc <__aeabi_l2d>
 800eaba:	4602      	mov	r2, r0
 800eabc:	460b      	mov	r3, r1
 800eabe:	4640      	mov	r0, r8
 800eac0:	4649      	mov	r1, r9
 800eac2:	f7f1 fbf1 	bl	80002a8 <__aeabi_dsub>
 800eac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eac8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eacc:	ea43 030a 	orr.w	r3, r3, sl
 800ead0:	4313      	orrs	r3, r2
 800ead2:	4680      	mov	r8, r0
 800ead4:	4689      	mov	r9, r1
 800ead6:	d053      	beq.n	800eb80 <_strtod_l+0xba8>
 800ead8:	a335      	add	r3, pc, #212	; (adr r3, 800ebb0 <_strtod_l+0xbd8>)
 800eada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eade:	f7f2 f80d 	bl	8000afc <__aeabi_dcmplt>
 800eae2:	2800      	cmp	r0, #0
 800eae4:	f47f acce 	bne.w	800e484 <_strtod_l+0x4ac>
 800eae8:	a333      	add	r3, pc, #204	; (adr r3, 800ebb8 <_strtod_l+0xbe0>)
 800eaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaee:	4640      	mov	r0, r8
 800eaf0:	4649      	mov	r1, r9
 800eaf2:	f7f2 f821 	bl	8000b38 <__aeabi_dcmpgt>
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	f43f af7b 	beq.w	800e9f2 <_strtod_l+0xa1a>
 800eafc:	e4c2      	b.n	800e484 <_strtod_l+0x4ac>
 800eafe:	9b04      	ldr	r3, [sp, #16]
 800eb00:	b333      	cbz	r3, 800eb50 <_strtod_l+0xb78>
 800eb02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eb08:	d822      	bhi.n	800eb50 <_strtod_l+0xb78>
 800eb0a:	a32d      	add	r3, pc, #180	; (adr r3, 800ebc0 <_strtod_l+0xbe8>)
 800eb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb10:	4640      	mov	r0, r8
 800eb12:	4649      	mov	r1, r9
 800eb14:	f7f1 fffc 	bl	8000b10 <__aeabi_dcmple>
 800eb18:	b1a0      	cbz	r0, 800eb44 <_strtod_l+0xb6c>
 800eb1a:	4649      	mov	r1, r9
 800eb1c:	4640      	mov	r0, r8
 800eb1e:	f7f2 f853 	bl	8000bc8 <__aeabi_d2uiz>
 800eb22:	2801      	cmp	r0, #1
 800eb24:	bf38      	it	cc
 800eb26:	2001      	movcc	r0, #1
 800eb28:	f7f1 fcfc 	bl	8000524 <__aeabi_ui2d>
 800eb2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb2e:	4680      	mov	r8, r0
 800eb30:	4689      	mov	r9, r1
 800eb32:	bb13      	cbnz	r3, 800eb7a <_strtod_l+0xba2>
 800eb34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb38:	9014      	str	r0, [sp, #80]	; 0x50
 800eb3a:	9315      	str	r3, [sp, #84]	; 0x54
 800eb3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800eb40:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eb44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eb48:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800eb4c:	1a9b      	subs	r3, r3, r2
 800eb4e:	930d      	str	r3, [sp, #52]	; 0x34
 800eb50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb54:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800eb58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eb5c:	f002 f99e 	bl	8010e9c <__ulp>
 800eb60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb64:	ec53 2b10 	vmov	r2, r3, d0
 800eb68:	f7f1 fd56 	bl	8000618 <__aeabi_dmul>
 800eb6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eb70:	f7f1 fb9c 	bl	80002ac <__adddf3>
 800eb74:	4682      	mov	sl, r0
 800eb76:	468b      	mov	fp, r1
 800eb78:	e78f      	b.n	800ea9a <_strtod_l+0xac2>
 800eb7a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800eb7e:	e7dd      	b.n	800eb3c <_strtod_l+0xb64>
 800eb80:	a311      	add	r3, pc, #68	; (adr r3, 800ebc8 <_strtod_l+0xbf0>)
 800eb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb86:	f7f1 ffb9 	bl	8000afc <__aeabi_dcmplt>
 800eb8a:	e7b4      	b.n	800eaf6 <_strtod_l+0xb1e>
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	930e      	str	r3, [sp, #56]	; 0x38
 800eb90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eb92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eb94:	6013      	str	r3, [r2, #0]
 800eb96:	f7ff ba65 	b.w	800e064 <_strtod_l+0x8c>
 800eb9a:	2b65      	cmp	r3, #101	; 0x65
 800eb9c:	f43f ab5d 	beq.w	800e25a <_strtod_l+0x282>
 800eba0:	2b45      	cmp	r3, #69	; 0x45
 800eba2:	f43f ab5a 	beq.w	800e25a <_strtod_l+0x282>
 800eba6:	2201      	movs	r2, #1
 800eba8:	f7ff bb92 	b.w	800e2d0 <_strtod_l+0x2f8>
 800ebac:	f3af 8000 	nop.w
 800ebb0:	94a03595 	.word	0x94a03595
 800ebb4:	3fdfffff 	.word	0x3fdfffff
 800ebb8:	35afe535 	.word	0x35afe535
 800ebbc:	3fe00000 	.word	0x3fe00000
 800ebc0:	ffc00000 	.word	0xffc00000
 800ebc4:	41dfffff 	.word	0x41dfffff
 800ebc8:	94a03595 	.word	0x94a03595
 800ebcc:	3fcfffff 	.word	0x3fcfffff
 800ebd0:	3ff00000 	.word	0x3ff00000
 800ebd4:	7ff00000 	.word	0x7ff00000
 800ebd8:	7fe00000 	.word	0x7fe00000
 800ebdc:	7c9fffff 	.word	0x7c9fffff
 800ebe0:	3fe00000 	.word	0x3fe00000
 800ebe4:	bff00000 	.word	0xbff00000
 800ebe8:	7fefffff 	.word	0x7fefffff

0800ebec <_strtod_r>:
 800ebec:	4b01      	ldr	r3, [pc, #4]	; (800ebf4 <_strtod_r+0x8>)
 800ebee:	f7ff b9f3 	b.w	800dfd8 <_strtod_l>
 800ebf2:	bf00      	nop
 800ebf4:	20000090 	.word	0x20000090

0800ebf8 <_strtol_l.isra.0>:
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebfe:	d001      	beq.n	800ec04 <_strtol_l.isra.0+0xc>
 800ec00:	2b24      	cmp	r3, #36	; 0x24
 800ec02:	d906      	bls.n	800ec12 <_strtol_l.isra.0+0x1a>
 800ec04:	f7fe f9ca 	bl	800cf9c <__errno>
 800ec08:	2316      	movs	r3, #22
 800ec0a:	6003      	str	r3, [r0, #0]
 800ec0c:	2000      	movs	r0, #0
 800ec0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec12:	4f3a      	ldr	r7, [pc, #232]	; (800ecfc <_strtol_l.isra.0+0x104>)
 800ec14:	468e      	mov	lr, r1
 800ec16:	4676      	mov	r6, lr
 800ec18:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ec1c:	5de5      	ldrb	r5, [r4, r7]
 800ec1e:	f015 0508 	ands.w	r5, r5, #8
 800ec22:	d1f8      	bne.n	800ec16 <_strtol_l.isra.0+0x1e>
 800ec24:	2c2d      	cmp	r4, #45	; 0x2d
 800ec26:	d134      	bne.n	800ec92 <_strtol_l.isra.0+0x9a>
 800ec28:	f89e 4000 	ldrb.w	r4, [lr]
 800ec2c:	f04f 0801 	mov.w	r8, #1
 800ec30:	f106 0e02 	add.w	lr, r6, #2
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d05c      	beq.n	800ecf2 <_strtol_l.isra.0+0xfa>
 800ec38:	2b10      	cmp	r3, #16
 800ec3a:	d10c      	bne.n	800ec56 <_strtol_l.isra.0+0x5e>
 800ec3c:	2c30      	cmp	r4, #48	; 0x30
 800ec3e:	d10a      	bne.n	800ec56 <_strtol_l.isra.0+0x5e>
 800ec40:	f89e 4000 	ldrb.w	r4, [lr]
 800ec44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ec48:	2c58      	cmp	r4, #88	; 0x58
 800ec4a:	d14d      	bne.n	800ece8 <_strtol_l.isra.0+0xf0>
 800ec4c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ec50:	2310      	movs	r3, #16
 800ec52:	f10e 0e02 	add.w	lr, lr, #2
 800ec56:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ec5a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ec5e:	2600      	movs	r6, #0
 800ec60:	fbbc f9f3 	udiv	r9, ip, r3
 800ec64:	4635      	mov	r5, r6
 800ec66:	fb03 ca19 	mls	sl, r3, r9, ip
 800ec6a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ec6e:	2f09      	cmp	r7, #9
 800ec70:	d818      	bhi.n	800eca4 <_strtol_l.isra.0+0xac>
 800ec72:	463c      	mov	r4, r7
 800ec74:	42a3      	cmp	r3, r4
 800ec76:	dd24      	ble.n	800ecc2 <_strtol_l.isra.0+0xca>
 800ec78:	2e00      	cmp	r6, #0
 800ec7a:	db1f      	blt.n	800ecbc <_strtol_l.isra.0+0xc4>
 800ec7c:	45a9      	cmp	r9, r5
 800ec7e:	d31d      	bcc.n	800ecbc <_strtol_l.isra.0+0xc4>
 800ec80:	d101      	bne.n	800ec86 <_strtol_l.isra.0+0x8e>
 800ec82:	45a2      	cmp	sl, r4
 800ec84:	db1a      	blt.n	800ecbc <_strtol_l.isra.0+0xc4>
 800ec86:	fb05 4503 	mla	r5, r5, r3, r4
 800ec8a:	2601      	movs	r6, #1
 800ec8c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ec90:	e7eb      	b.n	800ec6a <_strtol_l.isra.0+0x72>
 800ec92:	2c2b      	cmp	r4, #43	; 0x2b
 800ec94:	bf08      	it	eq
 800ec96:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ec9a:	46a8      	mov	r8, r5
 800ec9c:	bf08      	it	eq
 800ec9e:	f106 0e02 	addeq.w	lr, r6, #2
 800eca2:	e7c7      	b.n	800ec34 <_strtol_l.isra.0+0x3c>
 800eca4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800eca8:	2f19      	cmp	r7, #25
 800ecaa:	d801      	bhi.n	800ecb0 <_strtol_l.isra.0+0xb8>
 800ecac:	3c37      	subs	r4, #55	; 0x37
 800ecae:	e7e1      	b.n	800ec74 <_strtol_l.isra.0+0x7c>
 800ecb0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ecb4:	2f19      	cmp	r7, #25
 800ecb6:	d804      	bhi.n	800ecc2 <_strtol_l.isra.0+0xca>
 800ecb8:	3c57      	subs	r4, #87	; 0x57
 800ecba:	e7db      	b.n	800ec74 <_strtol_l.isra.0+0x7c>
 800ecbc:	f04f 36ff 	mov.w	r6, #4294967295
 800ecc0:	e7e4      	b.n	800ec8c <_strtol_l.isra.0+0x94>
 800ecc2:	2e00      	cmp	r6, #0
 800ecc4:	da05      	bge.n	800ecd2 <_strtol_l.isra.0+0xda>
 800ecc6:	2322      	movs	r3, #34	; 0x22
 800ecc8:	6003      	str	r3, [r0, #0]
 800ecca:	4665      	mov	r5, ip
 800eccc:	b942      	cbnz	r2, 800ece0 <_strtol_l.isra.0+0xe8>
 800ecce:	4628      	mov	r0, r5
 800ecd0:	e79d      	b.n	800ec0e <_strtol_l.isra.0+0x16>
 800ecd2:	f1b8 0f00 	cmp.w	r8, #0
 800ecd6:	d000      	beq.n	800ecda <_strtol_l.isra.0+0xe2>
 800ecd8:	426d      	negs	r5, r5
 800ecda:	2a00      	cmp	r2, #0
 800ecdc:	d0f7      	beq.n	800ecce <_strtol_l.isra.0+0xd6>
 800ecde:	b10e      	cbz	r6, 800ece4 <_strtol_l.isra.0+0xec>
 800ece0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ece4:	6011      	str	r1, [r2, #0]
 800ece6:	e7f2      	b.n	800ecce <_strtol_l.isra.0+0xd6>
 800ece8:	2430      	movs	r4, #48	; 0x30
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d1b3      	bne.n	800ec56 <_strtol_l.isra.0+0x5e>
 800ecee:	2308      	movs	r3, #8
 800ecf0:	e7b1      	b.n	800ec56 <_strtol_l.isra.0+0x5e>
 800ecf2:	2c30      	cmp	r4, #48	; 0x30
 800ecf4:	d0a4      	beq.n	800ec40 <_strtol_l.isra.0+0x48>
 800ecf6:	230a      	movs	r3, #10
 800ecf8:	e7ad      	b.n	800ec56 <_strtol_l.isra.0+0x5e>
 800ecfa:	bf00      	nop
 800ecfc:	08012ba5 	.word	0x08012ba5

0800ed00 <_strtol_r>:
 800ed00:	f7ff bf7a 	b.w	800ebf8 <_strtol_l.isra.0>

0800ed04 <strtol>:
 800ed04:	4613      	mov	r3, r2
 800ed06:	460a      	mov	r2, r1
 800ed08:	4601      	mov	r1, r0
 800ed0a:	4802      	ldr	r0, [pc, #8]	; (800ed14 <strtol+0x10>)
 800ed0c:	6800      	ldr	r0, [r0, #0]
 800ed0e:	f7ff bf73 	b.w	800ebf8 <_strtol_l.isra.0>
 800ed12:	bf00      	nop
 800ed14:	20000028 	.word	0x20000028

0800ed18 <_vsniprintf_r>:
 800ed18:	b530      	push	{r4, r5, lr}
 800ed1a:	1e14      	subs	r4, r2, #0
 800ed1c:	4605      	mov	r5, r0
 800ed1e:	b09b      	sub	sp, #108	; 0x6c
 800ed20:	4618      	mov	r0, r3
 800ed22:	da05      	bge.n	800ed30 <_vsniprintf_r+0x18>
 800ed24:	238b      	movs	r3, #139	; 0x8b
 800ed26:	602b      	str	r3, [r5, #0]
 800ed28:	f04f 30ff 	mov.w	r0, #4294967295
 800ed2c:	b01b      	add	sp, #108	; 0x6c
 800ed2e:	bd30      	pop	{r4, r5, pc}
 800ed30:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ed34:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ed38:	bf14      	ite	ne
 800ed3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ed3e:	4623      	moveq	r3, r4
 800ed40:	9302      	str	r3, [sp, #8]
 800ed42:	9305      	str	r3, [sp, #20]
 800ed44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed48:	9100      	str	r1, [sp, #0]
 800ed4a:	9104      	str	r1, [sp, #16]
 800ed4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ed50:	4602      	mov	r2, r0
 800ed52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ed54:	4669      	mov	r1, sp
 800ed56:	4628      	mov	r0, r5
 800ed58:	f002 fa5a 	bl	8011210 <_svfiprintf_r>
 800ed5c:	1c43      	adds	r3, r0, #1
 800ed5e:	bfbc      	itt	lt
 800ed60:	238b      	movlt	r3, #139	; 0x8b
 800ed62:	602b      	strlt	r3, [r5, #0]
 800ed64:	2c00      	cmp	r4, #0
 800ed66:	d0e1      	beq.n	800ed2c <_vsniprintf_r+0x14>
 800ed68:	9b00      	ldr	r3, [sp, #0]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	701a      	strb	r2, [r3, #0]
 800ed6e:	e7dd      	b.n	800ed2c <_vsniprintf_r+0x14>

0800ed70 <vsniprintf>:
 800ed70:	b507      	push	{r0, r1, r2, lr}
 800ed72:	9300      	str	r3, [sp, #0]
 800ed74:	4613      	mov	r3, r2
 800ed76:	460a      	mov	r2, r1
 800ed78:	4601      	mov	r1, r0
 800ed7a:	4803      	ldr	r0, [pc, #12]	; (800ed88 <vsniprintf+0x18>)
 800ed7c:	6800      	ldr	r0, [r0, #0]
 800ed7e:	f7ff ffcb 	bl	800ed18 <_vsniprintf_r>
 800ed82:	b003      	add	sp, #12
 800ed84:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed88:	20000028 	.word	0x20000028

0800ed8c <__swbuf_r>:
 800ed8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8e:	460e      	mov	r6, r1
 800ed90:	4614      	mov	r4, r2
 800ed92:	4605      	mov	r5, r0
 800ed94:	b118      	cbz	r0, 800ed9e <__swbuf_r+0x12>
 800ed96:	6983      	ldr	r3, [r0, #24]
 800ed98:	b90b      	cbnz	r3, 800ed9e <__swbuf_r+0x12>
 800ed9a:	f001 f86b 	bl	800fe74 <__sinit>
 800ed9e:	4b21      	ldr	r3, [pc, #132]	; (800ee24 <__swbuf_r+0x98>)
 800eda0:	429c      	cmp	r4, r3
 800eda2:	d12b      	bne.n	800edfc <__swbuf_r+0x70>
 800eda4:	686c      	ldr	r4, [r5, #4]
 800eda6:	69a3      	ldr	r3, [r4, #24]
 800eda8:	60a3      	str	r3, [r4, #8]
 800edaa:	89a3      	ldrh	r3, [r4, #12]
 800edac:	071a      	lsls	r2, r3, #28
 800edae:	d52f      	bpl.n	800ee10 <__swbuf_r+0x84>
 800edb0:	6923      	ldr	r3, [r4, #16]
 800edb2:	b36b      	cbz	r3, 800ee10 <__swbuf_r+0x84>
 800edb4:	6923      	ldr	r3, [r4, #16]
 800edb6:	6820      	ldr	r0, [r4, #0]
 800edb8:	1ac0      	subs	r0, r0, r3
 800edba:	6963      	ldr	r3, [r4, #20]
 800edbc:	b2f6      	uxtb	r6, r6
 800edbe:	4283      	cmp	r3, r0
 800edc0:	4637      	mov	r7, r6
 800edc2:	dc04      	bgt.n	800edce <__swbuf_r+0x42>
 800edc4:	4621      	mov	r1, r4
 800edc6:	4628      	mov	r0, r5
 800edc8:	f000 ffc0 	bl	800fd4c <_fflush_r>
 800edcc:	bb30      	cbnz	r0, 800ee1c <__swbuf_r+0x90>
 800edce:	68a3      	ldr	r3, [r4, #8]
 800edd0:	3b01      	subs	r3, #1
 800edd2:	60a3      	str	r3, [r4, #8]
 800edd4:	6823      	ldr	r3, [r4, #0]
 800edd6:	1c5a      	adds	r2, r3, #1
 800edd8:	6022      	str	r2, [r4, #0]
 800edda:	701e      	strb	r6, [r3, #0]
 800eddc:	6963      	ldr	r3, [r4, #20]
 800edde:	3001      	adds	r0, #1
 800ede0:	4283      	cmp	r3, r0
 800ede2:	d004      	beq.n	800edee <__swbuf_r+0x62>
 800ede4:	89a3      	ldrh	r3, [r4, #12]
 800ede6:	07db      	lsls	r3, r3, #31
 800ede8:	d506      	bpl.n	800edf8 <__swbuf_r+0x6c>
 800edea:	2e0a      	cmp	r6, #10
 800edec:	d104      	bne.n	800edf8 <__swbuf_r+0x6c>
 800edee:	4621      	mov	r1, r4
 800edf0:	4628      	mov	r0, r5
 800edf2:	f000 ffab 	bl	800fd4c <_fflush_r>
 800edf6:	b988      	cbnz	r0, 800ee1c <__swbuf_r+0x90>
 800edf8:	4638      	mov	r0, r7
 800edfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edfc:	4b0a      	ldr	r3, [pc, #40]	; (800ee28 <__swbuf_r+0x9c>)
 800edfe:	429c      	cmp	r4, r3
 800ee00:	d101      	bne.n	800ee06 <__swbuf_r+0x7a>
 800ee02:	68ac      	ldr	r4, [r5, #8]
 800ee04:	e7cf      	b.n	800eda6 <__swbuf_r+0x1a>
 800ee06:	4b09      	ldr	r3, [pc, #36]	; (800ee2c <__swbuf_r+0xa0>)
 800ee08:	429c      	cmp	r4, r3
 800ee0a:	bf08      	it	eq
 800ee0c:	68ec      	ldreq	r4, [r5, #12]
 800ee0e:	e7ca      	b.n	800eda6 <__swbuf_r+0x1a>
 800ee10:	4621      	mov	r1, r4
 800ee12:	4628      	mov	r0, r5
 800ee14:	f000 f81e 	bl	800ee54 <__swsetup_r>
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	d0cb      	beq.n	800edb4 <__swbuf_r+0x28>
 800ee1c:	f04f 37ff 	mov.w	r7, #4294967295
 800ee20:	e7ea      	b.n	800edf8 <__swbuf_r+0x6c>
 800ee22:	bf00      	nop
 800ee24:	08012dec 	.word	0x08012dec
 800ee28:	08012e0c 	.word	0x08012e0c
 800ee2c:	08012dcc 	.word	0x08012dcc

0800ee30 <_write_r>:
 800ee30:	b538      	push	{r3, r4, r5, lr}
 800ee32:	4d07      	ldr	r5, [pc, #28]	; (800ee50 <_write_r+0x20>)
 800ee34:	4604      	mov	r4, r0
 800ee36:	4608      	mov	r0, r1
 800ee38:	4611      	mov	r1, r2
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	602a      	str	r2, [r5, #0]
 800ee3e:	461a      	mov	r2, r3
 800ee40:	f7f5 f915 	bl	800406e <_write>
 800ee44:	1c43      	adds	r3, r0, #1
 800ee46:	d102      	bne.n	800ee4e <_write_r+0x1e>
 800ee48:	682b      	ldr	r3, [r5, #0]
 800ee4a:	b103      	cbz	r3, 800ee4e <_write_r+0x1e>
 800ee4c:	6023      	str	r3, [r4, #0]
 800ee4e:	bd38      	pop	{r3, r4, r5, pc}
 800ee50:	20001a84 	.word	0x20001a84

0800ee54 <__swsetup_r>:
 800ee54:	4b32      	ldr	r3, [pc, #200]	; (800ef20 <__swsetup_r+0xcc>)
 800ee56:	b570      	push	{r4, r5, r6, lr}
 800ee58:	681d      	ldr	r5, [r3, #0]
 800ee5a:	4606      	mov	r6, r0
 800ee5c:	460c      	mov	r4, r1
 800ee5e:	b125      	cbz	r5, 800ee6a <__swsetup_r+0x16>
 800ee60:	69ab      	ldr	r3, [r5, #24]
 800ee62:	b913      	cbnz	r3, 800ee6a <__swsetup_r+0x16>
 800ee64:	4628      	mov	r0, r5
 800ee66:	f001 f805 	bl	800fe74 <__sinit>
 800ee6a:	4b2e      	ldr	r3, [pc, #184]	; (800ef24 <__swsetup_r+0xd0>)
 800ee6c:	429c      	cmp	r4, r3
 800ee6e:	d10f      	bne.n	800ee90 <__swsetup_r+0x3c>
 800ee70:	686c      	ldr	r4, [r5, #4]
 800ee72:	89a3      	ldrh	r3, [r4, #12]
 800ee74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee78:	0719      	lsls	r1, r3, #28
 800ee7a:	d42c      	bmi.n	800eed6 <__swsetup_r+0x82>
 800ee7c:	06dd      	lsls	r5, r3, #27
 800ee7e:	d411      	bmi.n	800eea4 <__swsetup_r+0x50>
 800ee80:	2309      	movs	r3, #9
 800ee82:	6033      	str	r3, [r6, #0]
 800ee84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee88:	81a3      	strh	r3, [r4, #12]
 800ee8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee8e:	e03e      	b.n	800ef0e <__swsetup_r+0xba>
 800ee90:	4b25      	ldr	r3, [pc, #148]	; (800ef28 <__swsetup_r+0xd4>)
 800ee92:	429c      	cmp	r4, r3
 800ee94:	d101      	bne.n	800ee9a <__swsetup_r+0x46>
 800ee96:	68ac      	ldr	r4, [r5, #8]
 800ee98:	e7eb      	b.n	800ee72 <__swsetup_r+0x1e>
 800ee9a:	4b24      	ldr	r3, [pc, #144]	; (800ef2c <__swsetup_r+0xd8>)
 800ee9c:	429c      	cmp	r4, r3
 800ee9e:	bf08      	it	eq
 800eea0:	68ec      	ldreq	r4, [r5, #12]
 800eea2:	e7e6      	b.n	800ee72 <__swsetup_r+0x1e>
 800eea4:	0758      	lsls	r0, r3, #29
 800eea6:	d512      	bpl.n	800eece <__swsetup_r+0x7a>
 800eea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eeaa:	b141      	cbz	r1, 800eebe <__swsetup_r+0x6a>
 800eeac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eeb0:	4299      	cmp	r1, r3
 800eeb2:	d002      	beq.n	800eeba <__swsetup_r+0x66>
 800eeb4:	4630      	mov	r0, r6
 800eeb6:	f7fe f8b9 	bl	800d02c <_free_r>
 800eeba:	2300      	movs	r3, #0
 800eebc:	6363      	str	r3, [r4, #52]	; 0x34
 800eebe:	89a3      	ldrh	r3, [r4, #12]
 800eec0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eec4:	81a3      	strh	r3, [r4, #12]
 800eec6:	2300      	movs	r3, #0
 800eec8:	6063      	str	r3, [r4, #4]
 800eeca:	6923      	ldr	r3, [r4, #16]
 800eecc:	6023      	str	r3, [r4, #0]
 800eece:	89a3      	ldrh	r3, [r4, #12]
 800eed0:	f043 0308 	orr.w	r3, r3, #8
 800eed4:	81a3      	strh	r3, [r4, #12]
 800eed6:	6923      	ldr	r3, [r4, #16]
 800eed8:	b94b      	cbnz	r3, 800eeee <__swsetup_r+0x9a>
 800eeda:	89a3      	ldrh	r3, [r4, #12]
 800eedc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eee4:	d003      	beq.n	800eeee <__swsetup_r+0x9a>
 800eee6:	4621      	mov	r1, r4
 800eee8:	4630      	mov	r0, r6
 800eeea:	f001 fc0d 	bl	8010708 <__smakebuf_r>
 800eeee:	89a0      	ldrh	r0, [r4, #12]
 800eef0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eef4:	f010 0301 	ands.w	r3, r0, #1
 800eef8:	d00a      	beq.n	800ef10 <__swsetup_r+0xbc>
 800eefa:	2300      	movs	r3, #0
 800eefc:	60a3      	str	r3, [r4, #8]
 800eefe:	6963      	ldr	r3, [r4, #20]
 800ef00:	425b      	negs	r3, r3
 800ef02:	61a3      	str	r3, [r4, #24]
 800ef04:	6923      	ldr	r3, [r4, #16]
 800ef06:	b943      	cbnz	r3, 800ef1a <__swsetup_r+0xc6>
 800ef08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef0c:	d1ba      	bne.n	800ee84 <__swsetup_r+0x30>
 800ef0e:	bd70      	pop	{r4, r5, r6, pc}
 800ef10:	0781      	lsls	r1, r0, #30
 800ef12:	bf58      	it	pl
 800ef14:	6963      	ldrpl	r3, [r4, #20]
 800ef16:	60a3      	str	r3, [r4, #8]
 800ef18:	e7f4      	b.n	800ef04 <__swsetup_r+0xb0>
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	e7f7      	b.n	800ef0e <__swsetup_r+0xba>
 800ef1e:	bf00      	nop
 800ef20:	20000028 	.word	0x20000028
 800ef24:	08012dec 	.word	0x08012dec
 800ef28:	08012e0c 	.word	0x08012e0c
 800ef2c:	08012dcc 	.word	0x08012dcc

0800ef30 <_close_r>:
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	4d06      	ldr	r5, [pc, #24]	; (800ef4c <_close_r+0x1c>)
 800ef34:	2300      	movs	r3, #0
 800ef36:	4604      	mov	r4, r0
 800ef38:	4608      	mov	r0, r1
 800ef3a:	602b      	str	r3, [r5, #0]
 800ef3c:	f7f5 f8b3 	bl	80040a6 <_close>
 800ef40:	1c43      	adds	r3, r0, #1
 800ef42:	d102      	bne.n	800ef4a <_close_r+0x1a>
 800ef44:	682b      	ldr	r3, [r5, #0]
 800ef46:	b103      	cbz	r3, 800ef4a <_close_r+0x1a>
 800ef48:	6023      	str	r3, [r4, #0]
 800ef4a:	bd38      	pop	{r3, r4, r5, pc}
 800ef4c:	20001a84 	.word	0x20001a84

0800ef50 <quorem>:
 800ef50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef54:	6903      	ldr	r3, [r0, #16]
 800ef56:	690c      	ldr	r4, [r1, #16]
 800ef58:	42a3      	cmp	r3, r4
 800ef5a:	4607      	mov	r7, r0
 800ef5c:	f2c0 8081 	blt.w	800f062 <quorem+0x112>
 800ef60:	3c01      	subs	r4, #1
 800ef62:	f101 0814 	add.w	r8, r1, #20
 800ef66:	f100 0514 	add.w	r5, r0, #20
 800ef6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef6e:	9301      	str	r3, [sp, #4]
 800ef70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ef80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef84:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef88:	d331      	bcc.n	800efee <quorem+0x9e>
 800ef8a:	f04f 0e00 	mov.w	lr, #0
 800ef8e:	4640      	mov	r0, r8
 800ef90:	46ac      	mov	ip, r5
 800ef92:	46f2      	mov	sl, lr
 800ef94:	f850 2b04 	ldr.w	r2, [r0], #4
 800ef98:	b293      	uxth	r3, r2
 800ef9a:	fb06 e303 	mla	r3, r6, r3, lr
 800ef9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	ebaa 0303 	sub.w	r3, sl, r3
 800efa8:	0c12      	lsrs	r2, r2, #16
 800efaa:	f8dc a000 	ldr.w	sl, [ip]
 800efae:	fb06 e202 	mla	r2, r6, r2, lr
 800efb2:	fa13 f38a 	uxtah	r3, r3, sl
 800efb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800efba:	fa1f fa82 	uxth.w	sl, r2
 800efbe:	f8dc 2000 	ldr.w	r2, [ip]
 800efc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800efc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800efca:	b29b      	uxth	r3, r3
 800efcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efd0:	4581      	cmp	r9, r0
 800efd2:	f84c 3b04 	str.w	r3, [ip], #4
 800efd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800efda:	d2db      	bcs.n	800ef94 <quorem+0x44>
 800efdc:	f855 300b 	ldr.w	r3, [r5, fp]
 800efe0:	b92b      	cbnz	r3, 800efee <quorem+0x9e>
 800efe2:	9b01      	ldr	r3, [sp, #4]
 800efe4:	3b04      	subs	r3, #4
 800efe6:	429d      	cmp	r5, r3
 800efe8:	461a      	mov	r2, r3
 800efea:	d32e      	bcc.n	800f04a <quorem+0xfa>
 800efec:	613c      	str	r4, [r7, #16]
 800efee:	4638      	mov	r0, r7
 800eff0:	f001 feb0 	bl	8010d54 <__mcmp>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	db24      	blt.n	800f042 <quorem+0xf2>
 800eff8:	3601      	adds	r6, #1
 800effa:	4628      	mov	r0, r5
 800effc:	f04f 0c00 	mov.w	ip, #0
 800f000:	f858 2b04 	ldr.w	r2, [r8], #4
 800f004:	f8d0 e000 	ldr.w	lr, [r0]
 800f008:	b293      	uxth	r3, r2
 800f00a:	ebac 0303 	sub.w	r3, ip, r3
 800f00e:	0c12      	lsrs	r2, r2, #16
 800f010:	fa13 f38e 	uxtah	r3, r3, lr
 800f014:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f018:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f01c:	b29b      	uxth	r3, r3
 800f01e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f022:	45c1      	cmp	r9, r8
 800f024:	f840 3b04 	str.w	r3, [r0], #4
 800f028:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f02c:	d2e8      	bcs.n	800f000 <quorem+0xb0>
 800f02e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f036:	b922      	cbnz	r2, 800f042 <quorem+0xf2>
 800f038:	3b04      	subs	r3, #4
 800f03a:	429d      	cmp	r5, r3
 800f03c:	461a      	mov	r2, r3
 800f03e:	d30a      	bcc.n	800f056 <quorem+0x106>
 800f040:	613c      	str	r4, [r7, #16]
 800f042:	4630      	mov	r0, r6
 800f044:	b003      	add	sp, #12
 800f046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f04a:	6812      	ldr	r2, [r2, #0]
 800f04c:	3b04      	subs	r3, #4
 800f04e:	2a00      	cmp	r2, #0
 800f050:	d1cc      	bne.n	800efec <quorem+0x9c>
 800f052:	3c01      	subs	r4, #1
 800f054:	e7c7      	b.n	800efe6 <quorem+0x96>
 800f056:	6812      	ldr	r2, [r2, #0]
 800f058:	3b04      	subs	r3, #4
 800f05a:	2a00      	cmp	r2, #0
 800f05c:	d1f0      	bne.n	800f040 <quorem+0xf0>
 800f05e:	3c01      	subs	r4, #1
 800f060:	e7eb      	b.n	800f03a <quorem+0xea>
 800f062:	2000      	movs	r0, #0
 800f064:	e7ee      	b.n	800f044 <quorem+0xf4>
	...

0800f068 <_dtoa_r>:
 800f068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f06c:	ed2d 8b02 	vpush	{d8}
 800f070:	ec57 6b10 	vmov	r6, r7, d0
 800f074:	b095      	sub	sp, #84	; 0x54
 800f076:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f078:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f07c:	9105      	str	r1, [sp, #20]
 800f07e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f082:	4604      	mov	r4, r0
 800f084:	9209      	str	r2, [sp, #36]	; 0x24
 800f086:	930f      	str	r3, [sp, #60]	; 0x3c
 800f088:	b975      	cbnz	r5, 800f0a8 <_dtoa_r+0x40>
 800f08a:	2010      	movs	r0, #16
 800f08c:	f7fd ffb0 	bl	800cff0 <malloc>
 800f090:	4602      	mov	r2, r0
 800f092:	6260      	str	r0, [r4, #36]	; 0x24
 800f094:	b920      	cbnz	r0, 800f0a0 <_dtoa_r+0x38>
 800f096:	4bb2      	ldr	r3, [pc, #712]	; (800f360 <_dtoa_r+0x2f8>)
 800f098:	21ea      	movs	r1, #234	; 0xea
 800f09a:	48b2      	ldr	r0, [pc, #712]	; (800f364 <_dtoa_r+0x2fc>)
 800f09c:	f002 fb3a 	bl	8011714 <__assert_func>
 800f0a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f0a4:	6005      	str	r5, [r0, #0]
 800f0a6:	60c5      	str	r5, [r0, #12]
 800f0a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0aa:	6819      	ldr	r1, [r3, #0]
 800f0ac:	b151      	cbz	r1, 800f0c4 <_dtoa_r+0x5c>
 800f0ae:	685a      	ldr	r2, [r3, #4]
 800f0b0:	604a      	str	r2, [r1, #4]
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	4093      	lsls	r3, r2
 800f0b6:	608b      	str	r3, [r1, #8]
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f001 fbc3 	bl	8010844 <_Bfree>
 800f0be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	601a      	str	r2, [r3, #0]
 800f0c4:	1e3b      	subs	r3, r7, #0
 800f0c6:	bfb9      	ittee	lt
 800f0c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f0cc:	9303      	strlt	r3, [sp, #12]
 800f0ce:	2300      	movge	r3, #0
 800f0d0:	f8c8 3000 	strge.w	r3, [r8]
 800f0d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f0d8:	4ba3      	ldr	r3, [pc, #652]	; (800f368 <_dtoa_r+0x300>)
 800f0da:	bfbc      	itt	lt
 800f0dc:	2201      	movlt	r2, #1
 800f0de:	f8c8 2000 	strlt.w	r2, [r8]
 800f0e2:	ea33 0309 	bics.w	r3, r3, r9
 800f0e6:	d11b      	bne.n	800f120 <_dtoa_r+0xb8>
 800f0e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800f0ee:	6013      	str	r3, [r2, #0]
 800f0f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f0f4:	4333      	orrs	r3, r6
 800f0f6:	f000 857a 	beq.w	800fbee <_dtoa_r+0xb86>
 800f0fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0fc:	b963      	cbnz	r3, 800f118 <_dtoa_r+0xb0>
 800f0fe:	4b9b      	ldr	r3, [pc, #620]	; (800f36c <_dtoa_r+0x304>)
 800f100:	e024      	b.n	800f14c <_dtoa_r+0xe4>
 800f102:	4b9b      	ldr	r3, [pc, #620]	; (800f370 <_dtoa_r+0x308>)
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	3308      	adds	r3, #8
 800f108:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f10a:	6013      	str	r3, [r2, #0]
 800f10c:	9800      	ldr	r0, [sp, #0]
 800f10e:	b015      	add	sp, #84	; 0x54
 800f110:	ecbd 8b02 	vpop	{d8}
 800f114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f118:	4b94      	ldr	r3, [pc, #592]	; (800f36c <_dtoa_r+0x304>)
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	3303      	adds	r3, #3
 800f11e:	e7f3      	b.n	800f108 <_dtoa_r+0xa0>
 800f120:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f124:	2200      	movs	r2, #0
 800f126:	ec51 0b17 	vmov	r0, r1, d7
 800f12a:	2300      	movs	r3, #0
 800f12c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f130:	f7f1 fcda 	bl	8000ae8 <__aeabi_dcmpeq>
 800f134:	4680      	mov	r8, r0
 800f136:	b158      	cbz	r0, 800f150 <_dtoa_r+0xe8>
 800f138:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f13a:	2301      	movs	r3, #1
 800f13c:	6013      	str	r3, [r2, #0]
 800f13e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f140:	2b00      	cmp	r3, #0
 800f142:	f000 8551 	beq.w	800fbe8 <_dtoa_r+0xb80>
 800f146:	488b      	ldr	r0, [pc, #556]	; (800f374 <_dtoa_r+0x30c>)
 800f148:	6018      	str	r0, [r3, #0]
 800f14a:	1e43      	subs	r3, r0, #1
 800f14c:	9300      	str	r3, [sp, #0]
 800f14e:	e7dd      	b.n	800f10c <_dtoa_r+0xa4>
 800f150:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f154:	aa12      	add	r2, sp, #72	; 0x48
 800f156:	a913      	add	r1, sp, #76	; 0x4c
 800f158:	4620      	mov	r0, r4
 800f15a:	f001 ff1b 	bl	8010f94 <__d2b>
 800f15e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f162:	4683      	mov	fp, r0
 800f164:	2d00      	cmp	r5, #0
 800f166:	d07c      	beq.n	800f262 <_dtoa_r+0x1fa>
 800f168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f16a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f16e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f172:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f176:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f17a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f17e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f182:	4b7d      	ldr	r3, [pc, #500]	; (800f378 <_dtoa_r+0x310>)
 800f184:	2200      	movs	r2, #0
 800f186:	4630      	mov	r0, r6
 800f188:	4639      	mov	r1, r7
 800f18a:	f7f1 f88d 	bl	80002a8 <__aeabi_dsub>
 800f18e:	a36e      	add	r3, pc, #440	; (adr r3, 800f348 <_dtoa_r+0x2e0>)
 800f190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f194:	f7f1 fa40 	bl	8000618 <__aeabi_dmul>
 800f198:	a36d      	add	r3, pc, #436	; (adr r3, 800f350 <_dtoa_r+0x2e8>)
 800f19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19e:	f7f1 f885 	bl	80002ac <__adddf3>
 800f1a2:	4606      	mov	r6, r0
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	460f      	mov	r7, r1
 800f1a8:	f7f1 f9cc 	bl	8000544 <__aeabi_i2d>
 800f1ac:	a36a      	add	r3, pc, #424	; (adr r3, 800f358 <_dtoa_r+0x2f0>)
 800f1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b2:	f7f1 fa31 	bl	8000618 <__aeabi_dmul>
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	460b      	mov	r3, r1
 800f1ba:	4630      	mov	r0, r6
 800f1bc:	4639      	mov	r1, r7
 800f1be:	f7f1 f875 	bl	80002ac <__adddf3>
 800f1c2:	4606      	mov	r6, r0
 800f1c4:	460f      	mov	r7, r1
 800f1c6:	f7f1 fcd7 	bl	8000b78 <__aeabi_d2iz>
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	4682      	mov	sl, r0
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	4630      	mov	r0, r6
 800f1d2:	4639      	mov	r1, r7
 800f1d4:	f7f1 fc92 	bl	8000afc <__aeabi_dcmplt>
 800f1d8:	b148      	cbz	r0, 800f1ee <_dtoa_r+0x186>
 800f1da:	4650      	mov	r0, sl
 800f1dc:	f7f1 f9b2 	bl	8000544 <__aeabi_i2d>
 800f1e0:	4632      	mov	r2, r6
 800f1e2:	463b      	mov	r3, r7
 800f1e4:	f7f1 fc80 	bl	8000ae8 <__aeabi_dcmpeq>
 800f1e8:	b908      	cbnz	r0, 800f1ee <_dtoa_r+0x186>
 800f1ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1ee:	f1ba 0f16 	cmp.w	sl, #22
 800f1f2:	d854      	bhi.n	800f29e <_dtoa_r+0x236>
 800f1f4:	4b61      	ldr	r3, [pc, #388]	; (800f37c <_dtoa_r+0x314>)
 800f1f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f202:	f7f1 fc7b 	bl	8000afc <__aeabi_dcmplt>
 800f206:	2800      	cmp	r0, #0
 800f208:	d04b      	beq.n	800f2a2 <_dtoa_r+0x23a>
 800f20a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f20e:	2300      	movs	r3, #0
 800f210:	930e      	str	r3, [sp, #56]	; 0x38
 800f212:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f214:	1b5d      	subs	r5, r3, r5
 800f216:	1e6b      	subs	r3, r5, #1
 800f218:	9304      	str	r3, [sp, #16]
 800f21a:	bf43      	ittte	mi
 800f21c:	2300      	movmi	r3, #0
 800f21e:	f1c5 0801 	rsbmi	r8, r5, #1
 800f222:	9304      	strmi	r3, [sp, #16]
 800f224:	f04f 0800 	movpl.w	r8, #0
 800f228:	f1ba 0f00 	cmp.w	sl, #0
 800f22c:	db3b      	blt.n	800f2a6 <_dtoa_r+0x23e>
 800f22e:	9b04      	ldr	r3, [sp, #16]
 800f230:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f234:	4453      	add	r3, sl
 800f236:	9304      	str	r3, [sp, #16]
 800f238:	2300      	movs	r3, #0
 800f23a:	9306      	str	r3, [sp, #24]
 800f23c:	9b05      	ldr	r3, [sp, #20]
 800f23e:	2b09      	cmp	r3, #9
 800f240:	d869      	bhi.n	800f316 <_dtoa_r+0x2ae>
 800f242:	2b05      	cmp	r3, #5
 800f244:	bfc4      	itt	gt
 800f246:	3b04      	subgt	r3, #4
 800f248:	9305      	strgt	r3, [sp, #20]
 800f24a:	9b05      	ldr	r3, [sp, #20]
 800f24c:	f1a3 0302 	sub.w	r3, r3, #2
 800f250:	bfcc      	ite	gt
 800f252:	2500      	movgt	r5, #0
 800f254:	2501      	movle	r5, #1
 800f256:	2b03      	cmp	r3, #3
 800f258:	d869      	bhi.n	800f32e <_dtoa_r+0x2c6>
 800f25a:	e8df f003 	tbb	[pc, r3]
 800f25e:	4e2c      	.short	0x4e2c
 800f260:	5a4c      	.short	0x5a4c
 800f262:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f266:	441d      	add	r5, r3
 800f268:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f26c:	2b20      	cmp	r3, #32
 800f26e:	bfc1      	itttt	gt
 800f270:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f274:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f278:	fa09 f303 	lslgt.w	r3, r9, r3
 800f27c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f280:	bfda      	itte	le
 800f282:	f1c3 0320 	rsble	r3, r3, #32
 800f286:	fa06 f003 	lslle.w	r0, r6, r3
 800f28a:	4318      	orrgt	r0, r3
 800f28c:	f7f1 f94a 	bl	8000524 <__aeabi_ui2d>
 800f290:	2301      	movs	r3, #1
 800f292:	4606      	mov	r6, r0
 800f294:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f298:	3d01      	subs	r5, #1
 800f29a:	9310      	str	r3, [sp, #64]	; 0x40
 800f29c:	e771      	b.n	800f182 <_dtoa_r+0x11a>
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e7b6      	b.n	800f210 <_dtoa_r+0x1a8>
 800f2a2:	900e      	str	r0, [sp, #56]	; 0x38
 800f2a4:	e7b5      	b.n	800f212 <_dtoa_r+0x1aa>
 800f2a6:	f1ca 0300 	rsb	r3, sl, #0
 800f2aa:	9306      	str	r3, [sp, #24]
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	eba8 080a 	sub.w	r8, r8, sl
 800f2b2:	930d      	str	r3, [sp, #52]	; 0x34
 800f2b4:	e7c2      	b.n	800f23c <_dtoa_r+0x1d4>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	9308      	str	r3, [sp, #32]
 800f2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	dc39      	bgt.n	800f334 <_dtoa_r+0x2cc>
 800f2c0:	f04f 0901 	mov.w	r9, #1
 800f2c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800f2c8:	464b      	mov	r3, r9
 800f2ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f2ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	6042      	str	r2, [r0, #4]
 800f2d4:	2204      	movs	r2, #4
 800f2d6:	f102 0614 	add.w	r6, r2, #20
 800f2da:	429e      	cmp	r6, r3
 800f2dc:	6841      	ldr	r1, [r0, #4]
 800f2de:	d92f      	bls.n	800f340 <_dtoa_r+0x2d8>
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f001 fa6f 	bl	80107c4 <_Balloc>
 800f2e6:	9000      	str	r0, [sp, #0]
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	d14b      	bne.n	800f384 <_dtoa_r+0x31c>
 800f2ec:	4b24      	ldr	r3, [pc, #144]	; (800f380 <_dtoa_r+0x318>)
 800f2ee:	4602      	mov	r2, r0
 800f2f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f2f4:	e6d1      	b.n	800f09a <_dtoa_r+0x32>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	e7de      	b.n	800f2b8 <_dtoa_r+0x250>
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	9308      	str	r3, [sp, #32]
 800f2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f300:	eb0a 0903 	add.w	r9, sl, r3
 800f304:	f109 0301 	add.w	r3, r9, #1
 800f308:	2b01      	cmp	r3, #1
 800f30a:	9301      	str	r3, [sp, #4]
 800f30c:	bfb8      	it	lt
 800f30e:	2301      	movlt	r3, #1
 800f310:	e7dd      	b.n	800f2ce <_dtoa_r+0x266>
 800f312:	2301      	movs	r3, #1
 800f314:	e7f2      	b.n	800f2fc <_dtoa_r+0x294>
 800f316:	2501      	movs	r5, #1
 800f318:	2300      	movs	r3, #0
 800f31a:	9305      	str	r3, [sp, #20]
 800f31c:	9508      	str	r5, [sp, #32]
 800f31e:	f04f 39ff 	mov.w	r9, #4294967295
 800f322:	2200      	movs	r2, #0
 800f324:	f8cd 9004 	str.w	r9, [sp, #4]
 800f328:	2312      	movs	r3, #18
 800f32a:	9209      	str	r2, [sp, #36]	; 0x24
 800f32c:	e7cf      	b.n	800f2ce <_dtoa_r+0x266>
 800f32e:	2301      	movs	r3, #1
 800f330:	9308      	str	r3, [sp, #32]
 800f332:	e7f4      	b.n	800f31e <_dtoa_r+0x2b6>
 800f334:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f338:	f8cd 9004 	str.w	r9, [sp, #4]
 800f33c:	464b      	mov	r3, r9
 800f33e:	e7c6      	b.n	800f2ce <_dtoa_r+0x266>
 800f340:	3101      	adds	r1, #1
 800f342:	6041      	str	r1, [r0, #4]
 800f344:	0052      	lsls	r2, r2, #1
 800f346:	e7c6      	b.n	800f2d6 <_dtoa_r+0x26e>
 800f348:	636f4361 	.word	0x636f4361
 800f34c:	3fd287a7 	.word	0x3fd287a7
 800f350:	8b60c8b3 	.word	0x8b60c8b3
 800f354:	3fc68a28 	.word	0x3fc68a28
 800f358:	509f79fb 	.word	0x509f79fb
 800f35c:	3fd34413 	.word	0x3fd34413
 800f360:	08012d45 	.word	0x08012d45
 800f364:	08012d5c 	.word	0x08012d5c
 800f368:	7ff00000 	.word	0x7ff00000
 800f36c:	08012d41 	.word	0x08012d41
 800f370:	08012d38 	.word	0x08012d38
 800f374:	08012cbd 	.word	0x08012cbd
 800f378:	3ff80000 	.word	0x3ff80000
 800f37c:	08012f38 	.word	0x08012f38
 800f380:	08012dbb 	.word	0x08012dbb
 800f384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f386:	9a00      	ldr	r2, [sp, #0]
 800f388:	601a      	str	r2, [r3, #0]
 800f38a:	9b01      	ldr	r3, [sp, #4]
 800f38c:	2b0e      	cmp	r3, #14
 800f38e:	f200 80ad 	bhi.w	800f4ec <_dtoa_r+0x484>
 800f392:	2d00      	cmp	r5, #0
 800f394:	f000 80aa 	beq.w	800f4ec <_dtoa_r+0x484>
 800f398:	f1ba 0f00 	cmp.w	sl, #0
 800f39c:	dd36      	ble.n	800f40c <_dtoa_r+0x3a4>
 800f39e:	4ac3      	ldr	r2, [pc, #780]	; (800f6ac <_dtoa_r+0x644>)
 800f3a0:	f00a 030f 	and.w	r3, sl, #15
 800f3a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f3a8:	ed93 7b00 	vldr	d7, [r3]
 800f3ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f3b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f3b4:	eeb0 8a47 	vmov.f32	s16, s14
 800f3b8:	eef0 8a67 	vmov.f32	s17, s15
 800f3bc:	d016      	beq.n	800f3ec <_dtoa_r+0x384>
 800f3be:	4bbc      	ldr	r3, [pc, #752]	; (800f6b0 <_dtoa_r+0x648>)
 800f3c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f3c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f3c8:	f7f1 fa50 	bl	800086c <__aeabi_ddiv>
 800f3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3d0:	f007 070f 	and.w	r7, r7, #15
 800f3d4:	2503      	movs	r5, #3
 800f3d6:	4eb6      	ldr	r6, [pc, #728]	; (800f6b0 <_dtoa_r+0x648>)
 800f3d8:	b957      	cbnz	r7, 800f3f0 <_dtoa_r+0x388>
 800f3da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3de:	ec53 2b18 	vmov	r2, r3, d8
 800f3e2:	f7f1 fa43 	bl	800086c <__aeabi_ddiv>
 800f3e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3ea:	e029      	b.n	800f440 <_dtoa_r+0x3d8>
 800f3ec:	2502      	movs	r5, #2
 800f3ee:	e7f2      	b.n	800f3d6 <_dtoa_r+0x36e>
 800f3f0:	07f9      	lsls	r1, r7, #31
 800f3f2:	d508      	bpl.n	800f406 <_dtoa_r+0x39e>
 800f3f4:	ec51 0b18 	vmov	r0, r1, d8
 800f3f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f3fc:	f7f1 f90c 	bl	8000618 <__aeabi_dmul>
 800f400:	ec41 0b18 	vmov	d8, r0, r1
 800f404:	3501      	adds	r5, #1
 800f406:	107f      	asrs	r7, r7, #1
 800f408:	3608      	adds	r6, #8
 800f40a:	e7e5      	b.n	800f3d8 <_dtoa_r+0x370>
 800f40c:	f000 80a6 	beq.w	800f55c <_dtoa_r+0x4f4>
 800f410:	f1ca 0600 	rsb	r6, sl, #0
 800f414:	4ba5      	ldr	r3, [pc, #660]	; (800f6ac <_dtoa_r+0x644>)
 800f416:	4fa6      	ldr	r7, [pc, #664]	; (800f6b0 <_dtoa_r+0x648>)
 800f418:	f006 020f 	and.w	r2, r6, #15
 800f41c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f424:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f428:	f7f1 f8f6 	bl	8000618 <__aeabi_dmul>
 800f42c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f430:	1136      	asrs	r6, r6, #4
 800f432:	2300      	movs	r3, #0
 800f434:	2502      	movs	r5, #2
 800f436:	2e00      	cmp	r6, #0
 800f438:	f040 8085 	bne.w	800f546 <_dtoa_r+0x4de>
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d1d2      	bne.n	800f3e6 <_dtoa_r+0x37e>
 800f440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f442:	2b00      	cmp	r3, #0
 800f444:	f000 808c 	beq.w	800f560 <_dtoa_r+0x4f8>
 800f448:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f44c:	4b99      	ldr	r3, [pc, #612]	; (800f6b4 <_dtoa_r+0x64c>)
 800f44e:	2200      	movs	r2, #0
 800f450:	4630      	mov	r0, r6
 800f452:	4639      	mov	r1, r7
 800f454:	f7f1 fb52 	bl	8000afc <__aeabi_dcmplt>
 800f458:	2800      	cmp	r0, #0
 800f45a:	f000 8081 	beq.w	800f560 <_dtoa_r+0x4f8>
 800f45e:	9b01      	ldr	r3, [sp, #4]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d07d      	beq.n	800f560 <_dtoa_r+0x4f8>
 800f464:	f1b9 0f00 	cmp.w	r9, #0
 800f468:	dd3c      	ble.n	800f4e4 <_dtoa_r+0x47c>
 800f46a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f46e:	9307      	str	r3, [sp, #28]
 800f470:	2200      	movs	r2, #0
 800f472:	4b91      	ldr	r3, [pc, #580]	; (800f6b8 <_dtoa_r+0x650>)
 800f474:	4630      	mov	r0, r6
 800f476:	4639      	mov	r1, r7
 800f478:	f7f1 f8ce 	bl	8000618 <__aeabi_dmul>
 800f47c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f480:	3501      	adds	r5, #1
 800f482:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f486:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f48a:	4628      	mov	r0, r5
 800f48c:	f7f1 f85a 	bl	8000544 <__aeabi_i2d>
 800f490:	4632      	mov	r2, r6
 800f492:	463b      	mov	r3, r7
 800f494:	f7f1 f8c0 	bl	8000618 <__aeabi_dmul>
 800f498:	4b88      	ldr	r3, [pc, #544]	; (800f6bc <_dtoa_r+0x654>)
 800f49a:	2200      	movs	r2, #0
 800f49c:	f7f0 ff06 	bl	80002ac <__adddf3>
 800f4a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f4a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4a8:	9303      	str	r3, [sp, #12]
 800f4aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d15c      	bne.n	800f56a <_dtoa_r+0x502>
 800f4b0:	4b83      	ldr	r3, [pc, #524]	; (800f6c0 <_dtoa_r+0x658>)
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	4630      	mov	r0, r6
 800f4b6:	4639      	mov	r1, r7
 800f4b8:	f7f0 fef6 	bl	80002a8 <__aeabi_dsub>
 800f4bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4c0:	4606      	mov	r6, r0
 800f4c2:	460f      	mov	r7, r1
 800f4c4:	f7f1 fb38 	bl	8000b38 <__aeabi_dcmpgt>
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	f040 8296 	bne.w	800f9fa <_dtoa_r+0x992>
 800f4ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4d8:	4639      	mov	r1, r7
 800f4da:	f7f1 fb0f 	bl	8000afc <__aeabi_dcmplt>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	f040 8288 	bne.w	800f9f4 <_dtoa_r+0x98c>
 800f4e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f4e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f4ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	f2c0 8158 	blt.w	800f7a4 <_dtoa_r+0x73c>
 800f4f4:	f1ba 0f0e 	cmp.w	sl, #14
 800f4f8:	f300 8154 	bgt.w	800f7a4 <_dtoa_r+0x73c>
 800f4fc:	4b6b      	ldr	r3, [pc, #428]	; (800f6ac <_dtoa_r+0x644>)
 800f4fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f502:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f280 80e3 	bge.w	800f6d4 <_dtoa_r+0x66c>
 800f50e:	9b01      	ldr	r3, [sp, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	f300 80df 	bgt.w	800f6d4 <_dtoa_r+0x66c>
 800f516:	f040 826d 	bne.w	800f9f4 <_dtoa_r+0x98c>
 800f51a:	4b69      	ldr	r3, [pc, #420]	; (800f6c0 <_dtoa_r+0x658>)
 800f51c:	2200      	movs	r2, #0
 800f51e:	4640      	mov	r0, r8
 800f520:	4649      	mov	r1, r9
 800f522:	f7f1 f879 	bl	8000618 <__aeabi_dmul>
 800f526:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f52a:	f7f1 fafb 	bl	8000b24 <__aeabi_dcmpge>
 800f52e:	9e01      	ldr	r6, [sp, #4]
 800f530:	4637      	mov	r7, r6
 800f532:	2800      	cmp	r0, #0
 800f534:	f040 8243 	bne.w	800f9be <_dtoa_r+0x956>
 800f538:	9d00      	ldr	r5, [sp, #0]
 800f53a:	2331      	movs	r3, #49	; 0x31
 800f53c:	f805 3b01 	strb.w	r3, [r5], #1
 800f540:	f10a 0a01 	add.w	sl, sl, #1
 800f544:	e23f      	b.n	800f9c6 <_dtoa_r+0x95e>
 800f546:	07f2      	lsls	r2, r6, #31
 800f548:	d505      	bpl.n	800f556 <_dtoa_r+0x4ee>
 800f54a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f54e:	f7f1 f863 	bl	8000618 <__aeabi_dmul>
 800f552:	3501      	adds	r5, #1
 800f554:	2301      	movs	r3, #1
 800f556:	1076      	asrs	r6, r6, #1
 800f558:	3708      	adds	r7, #8
 800f55a:	e76c      	b.n	800f436 <_dtoa_r+0x3ce>
 800f55c:	2502      	movs	r5, #2
 800f55e:	e76f      	b.n	800f440 <_dtoa_r+0x3d8>
 800f560:	9b01      	ldr	r3, [sp, #4]
 800f562:	f8cd a01c 	str.w	sl, [sp, #28]
 800f566:	930c      	str	r3, [sp, #48]	; 0x30
 800f568:	e78d      	b.n	800f486 <_dtoa_r+0x41e>
 800f56a:	9900      	ldr	r1, [sp, #0]
 800f56c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f56e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f570:	4b4e      	ldr	r3, [pc, #312]	; (800f6ac <_dtoa_r+0x644>)
 800f572:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f576:	4401      	add	r1, r0
 800f578:	9102      	str	r1, [sp, #8]
 800f57a:	9908      	ldr	r1, [sp, #32]
 800f57c:	eeb0 8a47 	vmov.f32	s16, s14
 800f580:	eef0 8a67 	vmov.f32	s17, s15
 800f584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f588:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f58c:	2900      	cmp	r1, #0
 800f58e:	d045      	beq.n	800f61c <_dtoa_r+0x5b4>
 800f590:	494c      	ldr	r1, [pc, #304]	; (800f6c4 <_dtoa_r+0x65c>)
 800f592:	2000      	movs	r0, #0
 800f594:	f7f1 f96a 	bl	800086c <__aeabi_ddiv>
 800f598:	ec53 2b18 	vmov	r2, r3, d8
 800f59c:	f7f0 fe84 	bl	80002a8 <__aeabi_dsub>
 800f5a0:	9d00      	ldr	r5, [sp, #0]
 800f5a2:	ec41 0b18 	vmov	d8, r0, r1
 800f5a6:	4639      	mov	r1, r7
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	f7f1 fae5 	bl	8000b78 <__aeabi_d2iz>
 800f5ae:	900c      	str	r0, [sp, #48]	; 0x30
 800f5b0:	f7f0 ffc8 	bl	8000544 <__aeabi_i2d>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	4630      	mov	r0, r6
 800f5ba:	4639      	mov	r1, r7
 800f5bc:	f7f0 fe74 	bl	80002a8 <__aeabi_dsub>
 800f5c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5c2:	3330      	adds	r3, #48	; 0x30
 800f5c4:	f805 3b01 	strb.w	r3, [r5], #1
 800f5c8:	ec53 2b18 	vmov	r2, r3, d8
 800f5cc:	4606      	mov	r6, r0
 800f5ce:	460f      	mov	r7, r1
 800f5d0:	f7f1 fa94 	bl	8000afc <__aeabi_dcmplt>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	d165      	bne.n	800f6a4 <_dtoa_r+0x63c>
 800f5d8:	4632      	mov	r2, r6
 800f5da:	463b      	mov	r3, r7
 800f5dc:	4935      	ldr	r1, [pc, #212]	; (800f6b4 <_dtoa_r+0x64c>)
 800f5de:	2000      	movs	r0, #0
 800f5e0:	f7f0 fe62 	bl	80002a8 <__aeabi_dsub>
 800f5e4:	ec53 2b18 	vmov	r2, r3, d8
 800f5e8:	f7f1 fa88 	bl	8000afc <__aeabi_dcmplt>
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	f040 80b9 	bne.w	800f764 <_dtoa_r+0x6fc>
 800f5f2:	9b02      	ldr	r3, [sp, #8]
 800f5f4:	429d      	cmp	r5, r3
 800f5f6:	f43f af75 	beq.w	800f4e4 <_dtoa_r+0x47c>
 800f5fa:	4b2f      	ldr	r3, [pc, #188]	; (800f6b8 <_dtoa_r+0x650>)
 800f5fc:	ec51 0b18 	vmov	r0, r1, d8
 800f600:	2200      	movs	r2, #0
 800f602:	f7f1 f809 	bl	8000618 <__aeabi_dmul>
 800f606:	4b2c      	ldr	r3, [pc, #176]	; (800f6b8 <_dtoa_r+0x650>)
 800f608:	ec41 0b18 	vmov	d8, r0, r1
 800f60c:	2200      	movs	r2, #0
 800f60e:	4630      	mov	r0, r6
 800f610:	4639      	mov	r1, r7
 800f612:	f7f1 f801 	bl	8000618 <__aeabi_dmul>
 800f616:	4606      	mov	r6, r0
 800f618:	460f      	mov	r7, r1
 800f61a:	e7c4      	b.n	800f5a6 <_dtoa_r+0x53e>
 800f61c:	ec51 0b17 	vmov	r0, r1, d7
 800f620:	f7f0 fffa 	bl	8000618 <__aeabi_dmul>
 800f624:	9b02      	ldr	r3, [sp, #8]
 800f626:	9d00      	ldr	r5, [sp, #0]
 800f628:	930c      	str	r3, [sp, #48]	; 0x30
 800f62a:	ec41 0b18 	vmov	d8, r0, r1
 800f62e:	4639      	mov	r1, r7
 800f630:	4630      	mov	r0, r6
 800f632:	f7f1 faa1 	bl	8000b78 <__aeabi_d2iz>
 800f636:	9011      	str	r0, [sp, #68]	; 0x44
 800f638:	f7f0 ff84 	bl	8000544 <__aeabi_i2d>
 800f63c:	4602      	mov	r2, r0
 800f63e:	460b      	mov	r3, r1
 800f640:	4630      	mov	r0, r6
 800f642:	4639      	mov	r1, r7
 800f644:	f7f0 fe30 	bl	80002a8 <__aeabi_dsub>
 800f648:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f64a:	3330      	adds	r3, #48	; 0x30
 800f64c:	f805 3b01 	strb.w	r3, [r5], #1
 800f650:	9b02      	ldr	r3, [sp, #8]
 800f652:	429d      	cmp	r5, r3
 800f654:	4606      	mov	r6, r0
 800f656:	460f      	mov	r7, r1
 800f658:	f04f 0200 	mov.w	r2, #0
 800f65c:	d134      	bne.n	800f6c8 <_dtoa_r+0x660>
 800f65e:	4b19      	ldr	r3, [pc, #100]	; (800f6c4 <_dtoa_r+0x65c>)
 800f660:	ec51 0b18 	vmov	r0, r1, d8
 800f664:	f7f0 fe22 	bl	80002ac <__adddf3>
 800f668:	4602      	mov	r2, r0
 800f66a:	460b      	mov	r3, r1
 800f66c:	4630      	mov	r0, r6
 800f66e:	4639      	mov	r1, r7
 800f670:	f7f1 fa62 	bl	8000b38 <__aeabi_dcmpgt>
 800f674:	2800      	cmp	r0, #0
 800f676:	d175      	bne.n	800f764 <_dtoa_r+0x6fc>
 800f678:	ec53 2b18 	vmov	r2, r3, d8
 800f67c:	4911      	ldr	r1, [pc, #68]	; (800f6c4 <_dtoa_r+0x65c>)
 800f67e:	2000      	movs	r0, #0
 800f680:	f7f0 fe12 	bl	80002a8 <__aeabi_dsub>
 800f684:	4602      	mov	r2, r0
 800f686:	460b      	mov	r3, r1
 800f688:	4630      	mov	r0, r6
 800f68a:	4639      	mov	r1, r7
 800f68c:	f7f1 fa36 	bl	8000afc <__aeabi_dcmplt>
 800f690:	2800      	cmp	r0, #0
 800f692:	f43f af27 	beq.w	800f4e4 <_dtoa_r+0x47c>
 800f696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f698:	1e6b      	subs	r3, r5, #1
 800f69a:	930c      	str	r3, [sp, #48]	; 0x30
 800f69c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f6a0:	2b30      	cmp	r3, #48	; 0x30
 800f6a2:	d0f8      	beq.n	800f696 <_dtoa_r+0x62e>
 800f6a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f6a8:	e04a      	b.n	800f740 <_dtoa_r+0x6d8>
 800f6aa:	bf00      	nop
 800f6ac:	08012f38 	.word	0x08012f38
 800f6b0:	08012f10 	.word	0x08012f10
 800f6b4:	3ff00000 	.word	0x3ff00000
 800f6b8:	40240000 	.word	0x40240000
 800f6bc:	401c0000 	.word	0x401c0000
 800f6c0:	40140000 	.word	0x40140000
 800f6c4:	3fe00000 	.word	0x3fe00000
 800f6c8:	4baf      	ldr	r3, [pc, #700]	; (800f988 <_dtoa_r+0x920>)
 800f6ca:	f7f0 ffa5 	bl	8000618 <__aeabi_dmul>
 800f6ce:	4606      	mov	r6, r0
 800f6d0:	460f      	mov	r7, r1
 800f6d2:	e7ac      	b.n	800f62e <_dtoa_r+0x5c6>
 800f6d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f6d8:	9d00      	ldr	r5, [sp, #0]
 800f6da:	4642      	mov	r2, r8
 800f6dc:	464b      	mov	r3, r9
 800f6de:	4630      	mov	r0, r6
 800f6e0:	4639      	mov	r1, r7
 800f6e2:	f7f1 f8c3 	bl	800086c <__aeabi_ddiv>
 800f6e6:	f7f1 fa47 	bl	8000b78 <__aeabi_d2iz>
 800f6ea:	9002      	str	r0, [sp, #8]
 800f6ec:	f7f0 ff2a 	bl	8000544 <__aeabi_i2d>
 800f6f0:	4642      	mov	r2, r8
 800f6f2:	464b      	mov	r3, r9
 800f6f4:	f7f0 ff90 	bl	8000618 <__aeabi_dmul>
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	4639      	mov	r1, r7
 800f700:	f7f0 fdd2 	bl	80002a8 <__aeabi_dsub>
 800f704:	9e02      	ldr	r6, [sp, #8]
 800f706:	9f01      	ldr	r7, [sp, #4]
 800f708:	3630      	adds	r6, #48	; 0x30
 800f70a:	f805 6b01 	strb.w	r6, [r5], #1
 800f70e:	9e00      	ldr	r6, [sp, #0]
 800f710:	1bae      	subs	r6, r5, r6
 800f712:	42b7      	cmp	r7, r6
 800f714:	4602      	mov	r2, r0
 800f716:	460b      	mov	r3, r1
 800f718:	d137      	bne.n	800f78a <_dtoa_r+0x722>
 800f71a:	f7f0 fdc7 	bl	80002ac <__adddf3>
 800f71e:	4642      	mov	r2, r8
 800f720:	464b      	mov	r3, r9
 800f722:	4606      	mov	r6, r0
 800f724:	460f      	mov	r7, r1
 800f726:	f7f1 fa07 	bl	8000b38 <__aeabi_dcmpgt>
 800f72a:	b9c8      	cbnz	r0, 800f760 <_dtoa_r+0x6f8>
 800f72c:	4642      	mov	r2, r8
 800f72e:	464b      	mov	r3, r9
 800f730:	4630      	mov	r0, r6
 800f732:	4639      	mov	r1, r7
 800f734:	f7f1 f9d8 	bl	8000ae8 <__aeabi_dcmpeq>
 800f738:	b110      	cbz	r0, 800f740 <_dtoa_r+0x6d8>
 800f73a:	9b02      	ldr	r3, [sp, #8]
 800f73c:	07d9      	lsls	r1, r3, #31
 800f73e:	d40f      	bmi.n	800f760 <_dtoa_r+0x6f8>
 800f740:	4620      	mov	r0, r4
 800f742:	4659      	mov	r1, fp
 800f744:	f001 f87e 	bl	8010844 <_Bfree>
 800f748:	2300      	movs	r3, #0
 800f74a:	702b      	strb	r3, [r5, #0]
 800f74c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f74e:	f10a 0001 	add.w	r0, sl, #1
 800f752:	6018      	str	r0, [r3, #0]
 800f754:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f756:	2b00      	cmp	r3, #0
 800f758:	f43f acd8 	beq.w	800f10c <_dtoa_r+0xa4>
 800f75c:	601d      	str	r5, [r3, #0]
 800f75e:	e4d5      	b.n	800f10c <_dtoa_r+0xa4>
 800f760:	f8cd a01c 	str.w	sl, [sp, #28]
 800f764:	462b      	mov	r3, r5
 800f766:	461d      	mov	r5, r3
 800f768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f76c:	2a39      	cmp	r2, #57	; 0x39
 800f76e:	d108      	bne.n	800f782 <_dtoa_r+0x71a>
 800f770:	9a00      	ldr	r2, [sp, #0]
 800f772:	429a      	cmp	r2, r3
 800f774:	d1f7      	bne.n	800f766 <_dtoa_r+0x6fe>
 800f776:	9a07      	ldr	r2, [sp, #28]
 800f778:	9900      	ldr	r1, [sp, #0]
 800f77a:	3201      	adds	r2, #1
 800f77c:	9207      	str	r2, [sp, #28]
 800f77e:	2230      	movs	r2, #48	; 0x30
 800f780:	700a      	strb	r2, [r1, #0]
 800f782:	781a      	ldrb	r2, [r3, #0]
 800f784:	3201      	adds	r2, #1
 800f786:	701a      	strb	r2, [r3, #0]
 800f788:	e78c      	b.n	800f6a4 <_dtoa_r+0x63c>
 800f78a:	4b7f      	ldr	r3, [pc, #508]	; (800f988 <_dtoa_r+0x920>)
 800f78c:	2200      	movs	r2, #0
 800f78e:	f7f0 ff43 	bl	8000618 <__aeabi_dmul>
 800f792:	2200      	movs	r2, #0
 800f794:	2300      	movs	r3, #0
 800f796:	4606      	mov	r6, r0
 800f798:	460f      	mov	r7, r1
 800f79a:	f7f1 f9a5 	bl	8000ae8 <__aeabi_dcmpeq>
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d09b      	beq.n	800f6da <_dtoa_r+0x672>
 800f7a2:	e7cd      	b.n	800f740 <_dtoa_r+0x6d8>
 800f7a4:	9a08      	ldr	r2, [sp, #32]
 800f7a6:	2a00      	cmp	r2, #0
 800f7a8:	f000 80c4 	beq.w	800f934 <_dtoa_r+0x8cc>
 800f7ac:	9a05      	ldr	r2, [sp, #20]
 800f7ae:	2a01      	cmp	r2, #1
 800f7b0:	f300 80a8 	bgt.w	800f904 <_dtoa_r+0x89c>
 800f7b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f7b6:	2a00      	cmp	r2, #0
 800f7b8:	f000 80a0 	beq.w	800f8fc <_dtoa_r+0x894>
 800f7bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f7c0:	9e06      	ldr	r6, [sp, #24]
 800f7c2:	4645      	mov	r5, r8
 800f7c4:	9a04      	ldr	r2, [sp, #16]
 800f7c6:	2101      	movs	r1, #1
 800f7c8:	441a      	add	r2, r3
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	4498      	add	r8, r3
 800f7ce:	9204      	str	r2, [sp, #16]
 800f7d0:	f001 f93e 	bl	8010a50 <__i2b>
 800f7d4:	4607      	mov	r7, r0
 800f7d6:	2d00      	cmp	r5, #0
 800f7d8:	dd0b      	ble.n	800f7f2 <_dtoa_r+0x78a>
 800f7da:	9b04      	ldr	r3, [sp, #16]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	dd08      	ble.n	800f7f2 <_dtoa_r+0x78a>
 800f7e0:	42ab      	cmp	r3, r5
 800f7e2:	9a04      	ldr	r2, [sp, #16]
 800f7e4:	bfa8      	it	ge
 800f7e6:	462b      	movge	r3, r5
 800f7e8:	eba8 0803 	sub.w	r8, r8, r3
 800f7ec:	1aed      	subs	r5, r5, r3
 800f7ee:	1ad3      	subs	r3, r2, r3
 800f7f0:	9304      	str	r3, [sp, #16]
 800f7f2:	9b06      	ldr	r3, [sp, #24]
 800f7f4:	b1fb      	cbz	r3, 800f836 <_dtoa_r+0x7ce>
 800f7f6:	9b08      	ldr	r3, [sp, #32]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	f000 809f 	beq.w	800f93c <_dtoa_r+0x8d4>
 800f7fe:	2e00      	cmp	r6, #0
 800f800:	dd11      	ble.n	800f826 <_dtoa_r+0x7be>
 800f802:	4639      	mov	r1, r7
 800f804:	4632      	mov	r2, r6
 800f806:	4620      	mov	r0, r4
 800f808:	f001 f9de 	bl	8010bc8 <__pow5mult>
 800f80c:	465a      	mov	r2, fp
 800f80e:	4601      	mov	r1, r0
 800f810:	4607      	mov	r7, r0
 800f812:	4620      	mov	r0, r4
 800f814:	f001 f932 	bl	8010a7c <__multiply>
 800f818:	4659      	mov	r1, fp
 800f81a:	9007      	str	r0, [sp, #28]
 800f81c:	4620      	mov	r0, r4
 800f81e:	f001 f811 	bl	8010844 <_Bfree>
 800f822:	9b07      	ldr	r3, [sp, #28]
 800f824:	469b      	mov	fp, r3
 800f826:	9b06      	ldr	r3, [sp, #24]
 800f828:	1b9a      	subs	r2, r3, r6
 800f82a:	d004      	beq.n	800f836 <_dtoa_r+0x7ce>
 800f82c:	4659      	mov	r1, fp
 800f82e:	4620      	mov	r0, r4
 800f830:	f001 f9ca 	bl	8010bc8 <__pow5mult>
 800f834:	4683      	mov	fp, r0
 800f836:	2101      	movs	r1, #1
 800f838:	4620      	mov	r0, r4
 800f83a:	f001 f909 	bl	8010a50 <__i2b>
 800f83e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f840:	2b00      	cmp	r3, #0
 800f842:	4606      	mov	r6, r0
 800f844:	dd7c      	ble.n	800f940 <_dtoa_r+0x8d8>
 800f846:	461a      	mov	r2, r3
 800f848:	4601      	mov	r1, r0
 800f84a:	4620      	mov	r0, r4
 800f84c:	f001 f9bc 	bl	8010bc8 <__pow5mult>
 800f850:	9b05      	ldr	r3, [sp, #20]
 800f852:	2b01      	cmp	r3, #1
 800f854:	4606      	mov	r6, r0
 800f856:	dd76      	ble.n	800f946 <_dtoa_r+0x8de>
 800f858:	2300      	movs	r3, #0
 800f85a:	9306      	str	r3, [sp, #24]
 800f85c:	6933      	ldr	r3, [r6, #16]
 800f85e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f862:	6918      	ldr	r0, [r3, #16]
 800f864:	f001 f8a4 	bl	80109b0 <__hi0bits>
 800f868:	f1c0 0020 	rsb	r0, r0, #32
 800f86c:	9b04      	ldr	r3, [sp, #16]
 800f86e:	4418      	add	r0, r3
 800f870:	f010 001f 	ands.w	r0, r0, #31
 800f874:	f000 8086 	beq.w	800f984 <_dtoa_r+0x91c>
 800f878:	f1c0 0320 	rsb	r3, r0, #32
 800f87c:	2b04      	cmp	r3, #4
 800f87e:	dd7f      	ble.n	800f980 <_dtoa_r+0x918>
 800f880:	f1c0 001c 	rsb	r0, r0, #28
 800f884:	9b04      	ldr	r3, [sp, #16]
 800f886:	4403      	add	r3, r0
 800f888:	4480      	add	r8, r0
 800f88a:	4405      	add	r5, r0
 800f88c:	9304      	str	r3, [sp, #16]
 800f88e:	f1b8 0f00 	cmp.w	r8, #0
 800f892:	dd05      	ble.n	800f8a0 <_dtoa_r+0x838>
 800f894:	4659      	mov	r1, fp
 800f896:	4642      	mov	r2, r8
 800f898:	4620      	mov	r0, r4
 800f89a:	f001 f9ef 	bl	8010c7c <__lshift>
 800f89e:	4683      	mov	fp, r0
 800f8a0:	9b04      	ldr	r3, [sp, #16]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	dd05      	ble.n	800f8b2 <_dtoa_r+0x84a>
 800f8a6:	4631      	mov	r1, r6
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	f001 f9e6 	bl	8010c7c <__lshift>
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d069      	beq.n	800f98c <_dtoa_r+0x924>
 800f8b8:	4631      	mov	r1, r6
 800f8ba:	4658      	mov	r0, fp
 800f8bc:	f001 fa4a 	bl	8010d54 <__mcmp>
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	da63      	bge.n	800f98c <_dtoa_r+0x924>
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	4659      	mov	r1, fp
 800f8c8:	220a      	movs	r2, #10
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	f000 ffdc 	bl	8010888 <__multadd>
 800f8d0:	9b08      	ldr	r3, [sp, #32]
 800f8d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8d6:	4683      	mov	fp, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	f000 818f 	beq.w	800fbfc <_dtoa_r+0xb94>
 800f8de:	4639      	mov	r1, r7
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	220a      	movs	r2, #10
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	f000 ffcf 	bl	8010888 <__multadd>
 800f8ea:	f1b9 0f00 	cmp.w	r9, #0
 800f8ee:	4607      	mov	r7, r0
 800f8f0:	f300 808e 	bgt.w	800fa10 <_dtoa_r+0x9a8>
 800f8f4:	9b05      	ldr	r3, [sp, #20]
 800f8f6:	2b02      	cmp	r3, #2
 800f8f8:	dc50      	bgt.n	800f99c <_dtoa_r+0x934>
 800f8fa:	e089      	b.n	800fa10 <_dtoa_r+0x9a8>
 800f8fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f8fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f902:	e75d      	b.n	800f7c0 <_dtoa_r+0x758>
 800f904:	9b01      	ldr	r3, [sp, #4]
 800f906:	1e5e      	subs	r6, r3, #1
 800f908:	9b06      	ldr	r3, [sp, #24]
 800f90a:	42b3      	cmp	r3, r6
 800f90c:	bfbf      	itttt	lt
 800f90e:	9b06      	ldrlt	r3, [sp, #24]
 800f910:	9606      	strlt	r6, [sp, #24]
 800f912:	1af2      	sublt	r2, r6, r3
 800f914:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f916:	bfb6      	itet	lt
 800f918:	189b      	addlt	r3, r3, r2
 800f91a:	1b9e      	subge	r6, r3, r6
 800f91c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f91e:	9b01      	ldr	r3, [sp, #4]
 800f920:	bfb8      	it	lt
 800f922:	2600      	movlt	r6, #0
 800f924:	2b00      	cmp	r3, #0
 800f926:	bfb5      	itete	lt
 800f928:	eba8 0503 	sublt.w	r5, r8, r3
 800f92c:	9b01      	ldrge	r3, [sp, #4]
 800f92e:	2300      	movlt	r3, #0
 800f930:	4645      	movge	r5, r8
 800f932:	e747      	b.n	800f7c4 <_dtoa_r+0x75c>
 800f934:	9e06      	ldr	r6, [sp, #24]
 800f936:	9f08      	ldr	r7, [sp, #32]
 800f938:	4645      	mov	r5, r8
 800f93a:	e74c      	b.n	800f7d6 <_dtoa_r+0x76e>
 800f93c:	9a06      	ldr	r2, [sp, #24]
 800f93e:	e775      	b.n	800f82c <_dtoa_r+0x7c4>
 800f940:	9b05      	ldr	r3, [sp, #20]
 800f942:	2b01      	cmp	r3, #1
 800f944:	dc18      	bgt.n	800f978 <_dtoa_r+0x910>
 800f946:	9b02      	ldr	r3, [sp, #8]
 800f948:	b9b3      	cbnz	r3, 800f978 <_dtoa_r+0x910>
 800f94a:	9b03      	ldr	r3, [sp, #12]
 800f94c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f950:	b9a3      	cbnz	r3, 800f97c <_dtoa_r+0x914>
 800f952:	9b03      	ldr	r3, [sp, #12]
 800f954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f958:	0d1b      	lsrs	r3, r3, #20
 800f95a:	051b      	lsls	r3, r3, #20
 800f95c:	b12b      	cbz	r3, 800f96a <_dtoa_r+0x902>
 800f95e:	9b04      	ldr	r3, [sp, #16]
 800f960:	3301      	adds	r3, #1
 800f962:	9304      	str	r3, [sp, #16]
 800f964:	f108 0801 	add.w	r8, r8, #1
 800f968:	2301      	movs	r3, #1
 800f96a:	9306      	str	r3, [sp, #24]
 800f96c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f96e:	2b00      	cmp	r3, #0
 800f970:	f47f af74 	bne.w	800f85c <_dtoa_r+0x7f4>
 800f974:	2001      	movs	r0, #1
 800f976:	e779      	b.n	800f86c <_dtoa_r+0x804>
 800f978:	2300      	movs	r3, #0
 800f97a:	e7f6      	b.n	800f96a <_dtoa_r+0x902>
 800f97c:	9b02      	ldr	r3, [sp, #8]
 800f97e:	e7f4      	b.n	800f96a <_dtoa_r+0x902>
 800f980:	d085      	beq.n	800f88e <_dtoa_r+0x826>
 800f982:	4618      	mov	r0, r3
 800f984:	301c      	adds	r0, #28
 800f986:	e77d      	b.n	800f884 <_dtoa_r+0x81c>
 800f988:	40240000 	.word	0x40240000
 800f98c:	9b01      	ldr	r3, [sp, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	dc38      	bgt.n	800fa04 <_dtoa_r+0x99c>
 800f992:	9b05      	ldr	r3, [sp, #20]
 800f994:	2b02      	cmp	r3, #2
 800f996:	dd35      	ble.n	800fa04 <_dtoa_r+0x99c>
 800f998:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f99c:	f1b9 0f00 	cmp.w	r9, #0
 800f9a0:	d10d      	bne.n	800f9be <_dtoa_r+0x956>
 800f9a2:	4631      	mov	r1, r6
 800f9a4:	464b      	mov	r3, r9
 800f9a6:	2205      	movs	r2, #5
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	f000 ff6d 	bl	8010888 <__multadd>
 800f9ae:	4601      	mov	r1, r0
 800f9b0:	4606      	mov	r6, r0
 800f9b2:	4658      	mov	r0, fp
 800f9b4:	f001 f9ce 	bl	8010d54 <__mcmp>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	f73f adbd 	bgt.w	800f538 <_dtoa_r+0x4d0>
 800f9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9c0:	9d00      	ldr	r5, [sp, #0]
 800f9c2:	ea6f 0a03 	mvn.w	sl, r3
 800f9c6:	f04f 0800 	mov.w	r8, #0
 800f9ca:	4631      	mov	r1, r6
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	f000 ff39 	bl	8010844 <_Bfree>
 800f9d2:	2f00      	cmp	r7, #0
 800f9d4:	f43f aeb4 	beq.w	800f740 <_dtoa_r+0x6d8>
 800f9d8:	f1b8 0f00 	cmp.w	r8, #0
 800f9dc:	d005      	beq.n	800f9ea <_dtoa_r+0x982>
 800f9de:	45b8      	cmp	r8, r7
 800f9e0:	d003      	beq.n	800f9ea <_dtoa_r+0x982>
 800f9e2:	4641      	mov	r1, r8
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	f000 ff2d 	bl	8010844 <_Bfree>
 800f9ea:	4639      	mov	r1, r7
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	f000 ff29 	bl	8010844 <_Bfree>
 800f9f2:	e6a5      	b.n	800f740 <_dtoa_r+0x6d8>
 800f9f4:	2600      	movs	r6, #0
 800f9f6:	4637      	mov	r7, r6
 800f9f8:	e7e1      	b.n	800f9be <_dtoa_r+0x956>
 800f9fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f9fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fa00:	4637      	mov	r7, r6
 800fa02:	e599      	b.n	800f538 <_dtoa_r+0x4d0>
 800fa04:	9b08      	ldr	r3, [sp, #32]
 800fa06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	f000 80fd 	beq.w	800fc0a <_dtoa_r+0xba2>
 800fa10:	2d00      	cmp	r5, #0
 800fa12:	dd05      	ble.n	800fa20 <_dtoa_r+0x9b8>
 800fa14:	4639      	mov	r1, r7
 800fa16:	462a      	mov	r2, r5
 800fa18:	4620      	mov	r0, r4
 800fa1a:	f001 f92f 	bl	8010c7c <__lshift>
 800fa1e:	4607      	mov	r7, r0
 800fa20:	9b06      	ldr	r3, [sp, #24]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d05c      	beq.n	800fae0 <_dtoa_r+0xa78>
 800fa26:	6879      	ldr	r1, [r7, #4]
 800fa28:	4620      	mov	r0, r4
 800fa2a:	f000 fecb 	bl	80107c4 <_Balloc>
 800fa2e:	4605      	mov	r5, r0
 800fa30:	b928      	cbnz	r0, 800fa3e <_dtoa_r+0x9d6>
 800fa32:	4b80      	ldr	r3, [pc, #512]	; (800fc34 <_dtoa_r+0xbcc>)
 800fa34:	4602      	mov	r2, r0
 800fa36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fa3a:	f7ff bb2e 	b.w	800f09a <_dtoa_r+0x32>
 800fa3e:	693a      	ldr	r2, [r7, #16]
 800fa40:	3202      	adds	r2, #2
 800fa42:	0092      	lsls	r2, r2, #2
 800fa44:	f107 010c 	add.w	r1, r7, #12
 800fa48:	300c      	adds	r0, #12
 800fa4a:	f7fd fad9 	bl	800d000 <memcpy>
 800fa4e:	2201      	movs	r2, #1
 800fa50:	4629      	mov	r1, r5
 800fa52:	4620      	mov	r0, r4
 800fa54:	f001 f912 	bl	8010c7c <__lshift>
 800fa58:	9b00      	ldr	r3, [sp, #0]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	9301      	str	r3, [sp, #4]
 800fa5e:	9b00      	ldr	r3, [sp, #0]
 800fa60:	444b      	add	r3, r9
 800fa62:	9307      	str	r3, [sp, #28]
 800fa64:	9b02      	ldr	r3, [sp, #8]
 800fa66:	f003 0301 	and.w	r3, r3, #1
 800fa6a:	46b8      	mov	r8, r7
 800fa6c:	9306      	str	r3, [sp, #24]
 800fa6e:	4607      	mov	r7, r0
 800fa70:	9b01      	ldr	r3, [sp, #4]
 800fa72:	4631      	mov	r1, r6
 800fa74:	3b01      	subs	r3, #1
 800fa76:	4658      	mov	r0, fp
 800fa78:	9302      	str	r3, [sp, #8]
 800fa7a:	f7ff fa69 	bl	800ef50 <quorem>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	3330      	adds	r3, #48	; 0x30
 800fa82:	9004      	str	r0, [sp, #16]
 800fa84:	4641      	mov	r1, r8
 800fa86:	4658      	mov	r0, fp
 800fa88:	9308      	str	r3, [sp, #32]
 800fa8a:	f001 f963 	bl	8010d54 <__mcmp>
 800fa8e:	463a      	mov	r2, r7
 800fa90:	4681      	mov	r9, r0
 800fa92:	4631      	mov	r1, r6
 800fa94:	4620      	mov	r0, r4
 800fa96:	f001 f979 	bl	8010d8c <__mdiff>
 800fa9a:	68c2      	ldr	r2, [r0, #12]
 800fa9c:	9b08      	ldr	r3, [sp, #32]
 800fa9e:	4605      	mov	r5, r0
 800faa0:	bb02      	cbnz	r2, 800fae4 <_dtoa_r+0xa7c>
 800faa2:	4601      	mov	r1, r0
 800faa4:	4658      	mov	r0, fp
 800faa6:	f001 f955 	bl	8010d54 <__mcmp>
 800faaa:	9b08      	ldr	r3, [sp, #32]
 800faac:	4602      	mov	r2, r0
 800faae:	4629      	mov	r1, r5
 800fab0:	4620      	mov	r0, r4
 800fab2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fab6:	f000 fec5 	bl	8010844 <_Bfree>
 800faba:	9b05      	ldr	r3, [sp, #20]
 800fabc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fabe:	9d01      	ldr	r5, [sp, #4]
 800fac0:	ea43 0102 	orr.w	r1, r3, r2
 800fac4:	9b06      	ldr	r3, [sp, #24]
 800fac6:	430b      	orrs	r3, r1
 800fac8:	9b08      	ldr	r3, [sp, #32]
 800faca:	d10d      	bne.n	800fae8 <_dtoa_r+0xa80>
 800facc:	2b39      	cmp	r3, #57	; 0x39
 800face:	d029      	beq.n	800fb24 <_dtoa_r+0xabc>
 800fad0:	f1b9 0f00 	cmp.w	r9, #0
 800fad4:	dd01      	ble.n	800fada <_dtoa_r+0xa72>
 800fad6:	9b04      	ldr	r3, [sp, #16]
 800fad8:	3331      	adds	r3, #49	; 0x31
 800fada:	9a02      	ldr	r2, [sp, #8]
 800fadc:	7013      	strb	r3, [r2, #0]
 800fade:	e774      	b.n	800f9ca <_dtoa_r+0x962>
 800fae0:	4638      	mov	r0, r7
 800fae2:	e7b9      	b.n	800fa58 <_dtoa_r+0x9f0>
 800fae4:	2201      	movs	r2, #1
 800fae6:	e7e2      	b.n	800faae <_dtoa_r+0xa46>
 800fae8:	f1b9 0f00 	cmp.w	r9, #0
 800faec:	db06      	blt.n	800fafc <_dtoa_r+0xa94>
 800faee:	9905      	ldr	r1, [sp, #20]
 800faf0:	ea41 0909 	orr.w	r9, r1, r9
 800faf4:	9906      	ldr	r1, [sp, #24]
 800faf6:	ea59 0101 	orrs.w	r1, r9, r1
 800fafa:	d120      	bne.n	800fb3e <_dtoa_r+0xad6>
 800fafc:	2a00      	cmp	r2, #0
 800fafe:	ddec      	ble.n	800fada <_dtoa_r+0xa72>
 800fb00:	4659      	mov	r1, fp
 800fb02:	2201      	movs	r2, #1
 800fb04:	4620      	mov	r0, r4
 800fb06:	9301      	str	r3, [sp, #4]
 800fb08:	f001 f8b8 	bl	8010c7c <__lshift>
 800fb0c:	4631      	mov	r1, r6
 800fb0e:	4683      	mov	fp, r0
 800fb10:	f001 f920 	bl	8010d54 <__mcmp>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	9b01      	ldr	r3, [sp, #4]
 800fb18:	dc02      	bgt.n	800fb20 <_dtoa_r+0xab8>
 800fb1a:	d1de      	bne.n	800fada <_dtoa_r+0xa72>
 800fb1c:	07da      	lsls	r2, r3, #31
 800fb1e:	d5dc      	bpl.n	800fada <_dtoa_r+0xa72>
 800fb20:	2b39      	cmp	r3, #57	; 0x39
 800fb22:	d1d8      	bne.n	800fad6 <_dtoa_r+0xa6e>
 800fb24:	9a02      	ldr	r2, [sp, #8]
 800fb26:	2339      	movs	r3, #57	; 0x39
 800fb28:	7013      	strb	r3, [r2, #0]
 800fb2a:	462b      	mov	r3, r5
 800fb2c:	461d      	mov	r5, r3
 800fb2e:	3b01      	subs	r3, #1
 800fb30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fb34:	2a39      	cmp	r2, #57	; 0x39
 800fb36:	d050      	beq.n	800fbda <_dtoa_r+0xb72>
 800fb38:	3201      	adds	r2, #1
 800fb3a:	701a      	strb	r2, [r3, #0]
 800fb3c:	e745      	b.n	800f9ca <_dtoa_r+0x962>
 800fb3e:	2a00      	cmp	r2, #0
 800fb40:	dd03      	ble.n	800fb4a <_dtoa_r+0xae2>
 800fb42:	2b39      	cmp	r3, #57	; 0x39
 800fb44:	d0ee      	beq.n	800fb24 <_dtoa_r+0xabc>
 800fb46:	3301      	adds	r3, #1
 800fb48:	e7c7      	b.n	800fada <_dtoa_r+0xa72>
 800fb4a:	9a01      	ldr	r2, [sp, #4]
 800fb4c:	9907      	ldr	r1, [sp, #28]
 800fb4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fb52:	428a      	cmp	r2, r1
 800fb54:	d02a      	beq.n	800fbac <_dtoa_r+0xb44>
 800fb56:	4659      	mov	r1, fp
 800fb58:	2300      	movs	r3, #0
 800fb5a:	220a      	movs	r2, #10
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	f000 fe93 	bl	8010888 <__multadd>
 800fb62:	45b8      	cmp	r8, r7
 800fb64:	4683      	mov	fp, r0
 800fb66:	f04f 0300 	mov.w	r3, #0
 800fb6a:	f04f 020a 	mov.w	r2, #10
 800fb6e:	4641      	mov	r1, r8
 800fb70:	4620      	mov	r0, r4
 800fb72:	d107      	bne.n	800fb84 <_dtoa_r+0xb1c>
 800fb74:	f000 fe88 	bl	8010888 <__multadd>
 800fb78:	4680      	mov	r8, r0
 800fb7a:	4607      	mov	r7, r0
 800fb7c:	9b01      	ldr	r3, [sp, #4]
 800fb7e:	3301      	adds	r3, #1
 800fb80:	9301      	str	r3, [sp, #4]
 800fb82:	e775      	b.n	800fa70 <_dtoa_r+0xa08>
 800fb84:	f000 fe80 	bl	8010888 <__multadd>
 800fb88:	4639      	mov	r1, r7
 800fb8a:	4680      	mov	r8, r0
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	220a      	movs	r2, #10
 800fb90:	4620      	mov	r0, r4
 800fb92:	f000 fe79 	bl	8010888 <__multadd>
 800fb96:	4607      	mov	r7, r0
 800fb98:	e7f0      	b.n	800fb7c <_dtoa_r+0xb14>
 800fb9a:	f1b9 0f00 	cmp.w	r9, #0
 800fb9e:	9a00      	ldr	r2, [sp, #0]
 800fba0:	bfcc      	ite	gt
 800fba2:	464d      	movgt	r5, r9
 800fba4:	2501      	movle	r5, #1
 800fba6:	4415      	add	r5, r2
 800fba8:	f04f 0800 	mov.w	r8, #0
 800fbac:	4659      	mov	r1, fp
 800fbae:	2201      	movs	r2, #1
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	9301      	str	r3, [sp, #4]
 800fbb4:	f001 f862 	bl	8010c7c <__lshift>
 800fbb8:	4631      	mov	r1, r6
 800fbba:	4683      	mov	fp, r0
 800fbbc:	f001 f8ca 	bl	8010d54 <__mcmp>
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	dcb2      	bgt.n	800fb2a <_dtoa_r+0xac2>
 800fbc4:	d102      	bne.n	800fbcc <_dtoa_r+0xb64>
 800fbc6:	9b01      	ldr	r3, [sp, #4]
 800fbc8:	07db      	lsls	r3, r3, #31
 800fbca:	d4ae      	bmi.n	800fb2a <_dtoa_r+0xac2>
 800fbcc:	462b      	mov	r3, r5
 800fbce:	461d      	mov	r5, r3
 800fbd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbd4:	2a30      	cmp	r2, #48	; 0x30
 800fbd6:	d0fa      	beq.n	800fbce <_dtoa_r+0xb66>
 800fbd8:	e6f7      	b.n	800f9ca <_dtoa_r+0x962>
 800fbda:	9a00      	ldr	r2, [sp, #0]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d1a5      	bne.n	800fb2c <_dtoa_r+0xac4>
 800fbe0:	f10a 0a01 	add.w	sl, sl, #1
 800fbe4:	2331      	movs	r3, #49	; 0x31
 800fbe6:	e779      	b.n	800fadc <_dtoa_r+0xa74>
 800fbe8:	4b13      	ldr	r3, [pc, #76]	; (800fc38 <_dtoa_r+0xbd0>)
 800fbea:	f7ff baaf 	b.w	800f14c <_dtoa_r+0xe4>
 800fbee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f47f aa86 	bne.w	800f102 <_dtoa_r+0x9a>
 800fbf6:	4b11      	ldr	r3, [pc, #68]	; (800fc3c <_dtoa_r+0xbd4>)
 800fbf8:	f7ff baa8 	b.w	800f14c <_dtoa_r+0xe4>
 800fbfc:	f1b9 0f00 	cmp.w	r9, #0
 800fc00:	dc03      	bgt.n	800fc0a <_dtoa_r+0xba2>
 800fc02:	9b05      	ldr	r3, [sp, #20]
 800fc04:	2b02      	cmp	r3, #2
 800fc06:	f73f aec9 	bgt.w	800f99c <_dtoa_r+0x934>
 800fc0a:	9d00      	ldr	r5, [sp, #0]
 800fc0c:	4631      	mov	r1, r6
 800fc0e:	4658      	mov	r0, fp
 800fc10:	f7ff f99e 	bl	800ef50 <quorem>
 800fc14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fc18:	f805 3b01 	strb.w	r3, [r5], #1
 800fc1c:	9a00      	ldr	r2, [sp, #0]
 800fc1e:	1aaa      	subs	r2, r5, r2
 800fc20:	4591      	cmp	r9, r2
 800fc22:	ddba      	ble.n	800fb9a <_dtoa_r+0xb32>
 800fc24:	4659      	mov	r1, fp
 800fc26:	2300      	movs	r3, #0
 800fc28:	220a      	movs	r2, #10
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	f000 fe2c 	bl	8010888 <__multadd>
 800fc30:	4683      	mov	fp, r0
 800fc32:	e7eb      	b.n	800fc0c <_dtoa_r+0xba4>
 800fc34:	08012dbb 	.word	0x08012dbb
 800fc38:	08012cbc 	.word	0x08012cbc
 800fc3c:	08012d38 	.word	0x08012d38

0800fc40 <__sflush_r>:
 800fc40:	898a      	ldrh	r2, [r1, #12]
 800fc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc46:	4605      	mov	r5, r0
 800fc48:	0710      	lsls	r0, r2, #28
 800fc4a:	460c      	mov	r4, r1
 800fc4c:	d458      	bmi.n	800fd00 <__sflush_r+0xc0>
 800fc4e:	684b      	ldr	r3, [r1, #4]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	dc05      	bgt.n	800fc60 <__sflush_r+0x20>
 800fc54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	dc02      	bgt.n	800fc60 <__sflush_r+0x20>
 800fc5a:	2000      	movs	r0, #0
 800fc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc62:	2e00      	cmp	r6, #0
 800fc64:	d0f9      	beq.n	800fc5a <__sflush_r+0x1a>
 800fc66:	2300      	movs	r3, #0
 800fc68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc6c:	682f      	ldr	r7, [r5, #0]
 800fc6e:	602b      	str	r3, [r5, #0]
 800fc70:	d032      	beq.n	800fcd8 <__sflush_r+0x98>
 800fc72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fc74:	89a3      	ldrh	r3, [r4, #12]
 800fc76:	075a      	lsls	r2, r3, #29
 800fc78:	d505      	bpl.n	800fc86 <__sflush_r+0x46>
 800fc7a:	6863      	ldr	r3, [r4, #4]
 800fc7c:	1ac0      	subs	r0, r0, r3
 800fc7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc80:	b10b      	cbz	r3, 800fc86 <__sflush_r+0x46>
 800fc82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc84:	1ac0      	subs	r0, r0, r3
 800fc86:	2300      	movs	r3, #0
 800fc88:	4602      	mov	r2, r0
 800fc8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc8c:	6a21      	ldr	r1, [r4, #32]
 800fc8e:	4628      	mov	r0, r5
 800fc90:	47b0      	blx	r6
 800fc92:	1c43      	adds	r3, r0, #1
 800fc94:	89a3      	ldrh	r3, [r4, #12]
 800fc96:	d106      	bne.n	800fca6 <__sflush_r+0x66>
 800fc98:	6829      	ldr	r1, [r5, #0]
 800fc9a:	291d      	cmp	r1, #29
 800fc9c:	d82c      	bhi.n	800fcf8 <__sflush_r+0xb8>
 800fc9e:	4a2a      	ldr	r2, [pc, #168]	; (800fd48 <__sflush_r+0x108>)
 800fca0:	40ca      	lsrs	r2, r1
 800fca2:	07d6      	lsls	r6, r2, #31
 800fca4:	d528      	bpl.n	800fcf8 <__sflush_r+0xb8>
 800fca6:	2200      	movs	r2, #0
 800fca8:	6062      	str	r2, [r4, #4]
 800fcaa:	04d9      	lsls	r1, r3, #19
 800fcac:	6922      	ldr	r2, [r4, #16]
 800fcae:	6022      	str	r2, [r4, #0]
 800fcb0:	d504      	bpl.n	800fcbc <__sflush_r+0x7c>
 800fcb2:	1c42      	adds	r2, r0, #1
 800fcb4:	d101      	bne.n	800fcba <__sflush_r+0x7a>
 800fcb6:	682b      	ldr	r3, [r5, #0]
 800fcb8:	b903      	cbnz	r3, 800fcbc <__sflush_r+0x7c>
 800fcba:	6560      	str	r0, [r4, #84]	; 0x54
 800fcbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcbe:	602f      	str	r7, [r5, #0]
 800fcc0:	2900      	cmp	r1, #0
 800fcc2:	d0ca      	beq.n	800fc5a <__sflush_r+0x1a>
 800fcc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fcc8:	4299      	cmp	r1, r3
 800fcca:	d002      	beq.n	800fcd2 <__sflush_r+0x92>
 800fccc:	4628      	mov	r0, r5
 800fcce:	f7fd f9ad 	bl	800d02c <_free_r>
 800fcd2:	2000      	movs	r0, #0
 800fcd4:	6360      	str	r0, [r4, #52]	; 0x34
 800fcd6:	e7c1      	b.n	800fc5c <__sflush_r+0x1c>
 800fcd8:	6a21      	ldr	r1, [r4, #32]
 800fcda:	2301      	movs	r3, #1
 800fcdc:	4628      	mov	r0, r5
 800fcde:	47b0      	blx	r6
 800fce0:	1c41      	adds	r1, r0, #1
 800fce2:	d1c7      	bne.n	800fc74 <__sflush_r+0x34>
 800fce4:	682b      	ldr	r3, [r5, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d0c4      	beq.n	800fc74 <__sflush_r+0x34>
 800fcea:	2b1d      	cmp	r3, #29
 800fcec:	d001      	beq.n	800fcf2 <__sflush_r+0xb2>
 800fcee:	2b16      	cmp	r3, #22
 800fcf0:	d101      	bne.n	800fcf6 <__sflush_r+0xb6>
 800fcf2:	602f      	str	r7, [r5, #0]
 800fcf4:	e7b1      	b.n	800fc5a <__sflush_r+0x1a>
 800fcf6:	89a3      	ldrh	r3, [r4, #12]
 800fcf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcfc:	81a3      	strh	r3, [r4, #12]
 800fcfe:	e7ad      	b.n	800fc5c <__sflush_r+0x1c>
 800fd00:	690f      	ldr	r7, [r1, #16]
 800fd02:	2f00      	cmp	r7, #0
 800fd04:	d0a9      	beq.n	800fc5a <__sflush_r+0x1a>
 800fd06:	0793      	lsls	r3, r2, #30
 800fd08:	680e      	ldr	r6, [r1, #0]
 800fd0a:	bf08      	it	eq
 800fd0c:	694b      	ldreq	r3, [r1, #20]
 800fd0e:	600f      	str	r7, [r1, #0]
 800fd10:	bf18      	it	ne
 800fd12:	2300      	movne	r3, #0
 800fd14:	eba6 0807 	sub.w	r8, r6, r7
 800fd18:	608b      	str	r3, [r1, #8]
 800fd1a:	f1b8 0f00 	cmp.w	r8, #0
 800fd1e:	dd9c      	ble.n	800fc5a <__sflush_r+0x1a>
 800fd20:	6a21      	ldr	r1, [r4, #32]
 800fd22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fd24:	4643      	mov	r3, r8
 800fd26:	463a      	mov	r2, r7
 800fd28:	4628      	mov	r0, r5
 800fd2a:	47b0      	blx	r6
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	dc06      	bgt.n	800fd3e <__sflush_r+0xfe>
 800fd30:	89a3      	ldrh	r3, [r4, #12]
 800fd32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd36:	81a3      	strh	r3, [r4, #12]
 800fd38:	f04f 30ff 	mov.w	r0, #4294967295
 800fd3c:	e78e      	b.n	800fc5c <__sflush_r+0x1c>
 800fd3e:	4407      	add	r7, r0
 800fd40:	eba8 0800 	sub.w	r8, r8, r0
 800fd44:	e7e9      	b.n	800fd1a <__sflush_r+0xda>
 800fd46:	bf00      	nop
 800fd48:	20400001 	.word	0x20400001

0800fd4c <_fflush_r>:
 800fd4c:	b538      	push	{r3, r4, r5, lr}
 800fd4e:	690b      	ldr	r3, [r1, #16]
 800fd50:	4605      	mov	r5, r0
 800fd52:	460c      	mov	r4, r1
 800fd54:	b913      	cbnz	r3, 800fd5c <_fflush_r+0x10>
 800fd56:	2500      	movs	r5, #0
 800fd58:	4628      	mov	r0, r5
 800fd5a:	bd38      	pop	{r3, r4, r5, pc}
 800fd5c:	b118      	cbz	r0, 800fd66 <_fflush_r+0x1a>
 800fd5e:	6983      	ldr	r3, [r0, #24]
 800fd60:	b90b      	cbnz	r3, 800fd66 <_fflush_r+0x1a>
 800fd62:	f000 f887 	bl	800fe74 <__sinit>
 800fd66:	4b14      	ldr	r3, [pc, #80]	; (800fdb8 <_fflush_r+0x6c>)
 800fd68:	429c      	cmp	r4, r3
 800fd6a:	d11b      	bne.n	800fda4 <_fflush_r+0x58>
 800fd6c:	686c      	ldr	r4, [r5, #4]
 800fd6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d0ef      	beq.n	800fd56 <_fflush_r+0xa>
 800fd76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fd78:	07d0      	lsls	r0, r2, #31
 800fd7a:	d404      	bmi.n	800fd86 <_fflush_r+0x3a>
 800fd7c:	0599      	lsls	r1, r3, #22
 800fd7e:	d402      	bmi.n	800fd86 <_fflush_r+0x3a>
 800fd80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd82:	f000 fc88 	bl	8010696 <__retarget_lock_acquire_recursive>
 800fd86:	4628      	mov	r0, r5
 800fd88:	4621      	mov	r1, r4
 800fd8a:	f7ff ff59 	bl	800fc40 <__sflush_r>
 800fd8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd90:	07da      	lsls	r2, r3, #31
 800fd92:	4605      	mov	r5, r0
 800fd94:	d4e0      	bmi.n	800fd58 <_fflush_r+0xc>
 800fd96:	89a3      	ldrh	r3, [r4, #12]
 800fd98:	059b      	lsls	r3, r3, #22
 800fd9a:	d4dd      	bmi.n	800fd58 <_fflush_r+0xc>
 800fd9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd9e:	f000 fc7b 	bl	8010698 <__retarget_lock_release_recursive>
 800fda2:	e7d9      	b.n	800fd58 <_fflush_r+0xc>
 800fda4:	4b05      	ldr	r3, [pc, #20]	; (800fdbc <_fflush_r+0x70>)
 800fda6:	429c      	cmp	r4, r3
 800fda8:	d101      	bne.n	800fdae <_fflush_r+0x62>
 800fdaa:	68ac      	ldr	r4, [r5, #8]
 800fdac:	e7df      	b.n	800fd6e <_fflush_r+0x22>
 800fdae:	4b04      	ldr	r3, [pc, #16]	; (800fdc0 <_fflush_r+0x74>)
 800fdb0:	429c      	cmp	r4, r3
 800fdb2:	bf08      	it	eq
 800fdb4:	68ec      	ldreq	r4, [r5, #12]
 800fdb6:	e7da      	b.n	800fd6e <_fflush_r+0x22>
 800fdb8:	08012dec 	.word	0x08012dec
 800fdbc:	08012e0c 	.word	0x08012e0c
 800fdc0:	08012dcc 	.word	0x08012dcc

0800fdc4 <std>:
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	b510      	push	{r4, lr}
 800fdc8:	4604      	mov	r4, r0
 800fdca:	e9c0 3300 	strd	r3, r3, [r0]
 800fdce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fdd2:	6083      	str	r3, [r0, #8]
 800fdd4:	8181      	strh	r1, [r0, #12]
 800fdd6:	6643      	str	r3, [r0, #100]	; 0x64
 800fdd8:	81c2      	strh	r2, [r0, #14]
 800fdda:	6183      	str	r3, [r0, #24]
 800fddc:	4619      	mov	r1, r3
 800fdde:	2208      	movs	r2, #8
 800fde0:	305c      	adds	r0, #92	; 0x5c
 800fde2:	f7fd f91b 	bl	800d01c <memset>
 800fde6:	4b05      	ldr	r3, [pc, #20]	; (800fdfc <std+0x38>)
 800fde8:	6263      	str	r3, [r4, #36]	; 0x24
 800fdea:	4b05      	ldr	r3, [pc, #20]	; (800fe00 <std+0x3c>)
 800fdec:	62a3      	str	r3, [r4, #40]	; 0x28
 800fdee:	4b05      	ldr	r3, [pc, #20]	; (800fe04 <std+0x40>)
 800fdf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fdf2:	4b05      	ldr	r3, [pc, #20]	; (800fe08 <std+0x44>)
 800fdf4:	6224      	str	r4, [r4, #32]
 800fdf6:	6323      	str	r3, [r4, #48]	; 0x30
 800fdf8:	bd10      	pop	{r4, pc}
 800fdfa:	bf00      	nop
 800fdfc:	0800dee1 	.word	0x0800dee1
 800fe00:	0800df03 	.word	0x0800df03
 800fe04:	0800df3b 	.word	0x0800df3b
 800fe08:	0800df5f 	.word	0x0800df5f

0800fe0c <_cleanup_r>:
 800fe0c:	4901      	ldr	r1, [pc, #4]	; (800fe14 <_cleanup_r+0x8>)
 800fe0e:	f000 b8af 	b.w	800ff70 <_fwalk_reent>
 800fe12:	bf00      	nop
 800fe14:	0800fd4d 	.word	0x0800fd4d

0800fe18 <__sfmoreglue>:
 800fe18:	b570      	push	{r4, r5, r6, lr}
 800fe1a:	1e4a      	subs	r2, r1, #1
 800fe1c:	2568      	movs	r5, #104	; 0x68
 800fe1e:	4355      	muls	r5, r2
 800fe20:	460e      	mov	r6, r1
 800fe22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fe26:	f7fd f951 	bl	800d0cc <_malloc_r>
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	b140      	cbz	r0, 800fe40 <__sfmoreglue+0x28>
 800fe2e:	2100      	movs	r1, #0
 800fe30:	e9c0 1600 	strd	r1, r6, [r0]
 800fe34:	300c      	adds	r0, #12
 800fe36:	60a0      	str	r0, [r4, #8]
 800fe38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fe3c:	f7fd f8ee 	bl	800d01c <memset>
 800fe40:	4620      	mov	r0, r4
 800fe42:	bd70      	pop	{r4, r5, r6, pc}

0800fe44 <__sfp_lock_acquire>:
 800fe44:	4801      	ldr	r0, [pc, #4]	; (800fe4c <__sfp_lock_acquire+0x8>)
 800fe46:	f000 bc26 	b.w	8010696 <__retarget_lock_acquire_recursive>
 800fe4a:	bf00      	nop
 800fe4c:	20001a80 	.word	0x20001a80

0800fe50 <__sfp_lock_release>:
 800fe50:	4801      	ldr	r0, [pc, #4]	; (800fe58 <__sfp_lock_release+0x8>)
 800fe52:	f000 bc21 	b.w	8010698 <__retarget_lock_release_recursive>
 800fe56:	bf00      	nop
 800fe58:	20001a80 	.word	0x20001a80

0800fe5c <__sinit_lock_acquire>:
 800fe5c:	4801      	ldr	r0, [pc, #4]	; (800fe64 <__sinit_lock_acquire+0x8>)
 800fe5e:	f000 bc1a 	b.w	8010696 <__retarget_lock_acquire_recursive>
 800fe62:	bf00      	nop
 800fe64:	20001a7b 	.word	0x20001a7b

0800fe68 <__sinit_lock_release>:
 800fe68:	4801      	ldr	r0, [pc, #4]	; (800fe70 <__sinit_lock_release+0x8>)
 800fe6a:	f000 bc15 	b.w	8010698 <__retarget_lock_release_recursive>
 800fe6e:	bf00      	nop
 800fe70:	20001a7b 	.word	0x20001a7b

0800fe74 <__sinit>:
 800fe74:	b510      	push	{r4, lr}
 800fe76:	4604      	mov	r4, r0
 800fe78:	f7ff fff0 	bl	800fe5c <__sinit_lock_acquire>
 800fe7c:	69a3      	ldr	r3, [r4, #24]
 800fe7e:	b11b      	cbz	r3, 800fe88 <__sinit+0x14>
 800fe80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe84:	f7ff bff0 	b.w	800fe68 <__sinit_lock_release>
 800fe88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fe8c:	6523      	str	r3, [r4, #80]	; 0x50
 800fe8e:	4b13      	ldr	r3, [pc, #76]	; (800fedc <__sinit+0x68>)
 800fe90:	4a13      	ldr	r2, [pc, #76]	; (800fee0 <__sinit+0x6c>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	62a2      	str	r2, [r4, #40]	; 0x28
 800fe96:	42a3      	cmp	r3, r4
 800fe98:	bf04      	itt	eq
 800fe9a:	2301      	moveq	r3, #1
 800fe9c:	61a3      	streq	r3, [r4, #24]
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f000 f820 	bl	800fee4 <__sfp>
 800fea4:	6060      	str	r0, [r4, #4]
 800fea6:	4620      	mov	r0, r4
 800fea8:	f000 f81c 	bl	800fee4 <__sfp>
 800feac:	60a0      	str	r0, [r4, #8]
 800feae:	4620      	mov	r0, r4
 800feb0:	f000 f818 	bl	800fee4 <__sfp>
 800feb4:	2200      	movs	r2, #0
 800feb6:	60e0      	str	r0, [r4, #12]
 800feb8:	2104      	movs	r1, #4
 800feba:	6860      	ldr	r0, [r4, #4]
 800febc:	f7ff ff82 	bl	800fdc4 <std>
 800fec0:	68a0      	ldr	r0, [r4, #8]
 800fec2:	2201      	movs	r2, #1
 800fec4:	2109      	movs	r1, #9
 800fec6:	f7ff ff7d 	bl	800fdc4 <std>
 800feca:	68e0      	ldr	r0, [r4, #12]
 800fecc:	2202      	movs	r2, #2
 800fece:	2112      	movs	r1, #18
 800fed0:	f7ff ff78 	bl	800fdc4 <std>
 800fed4:	2301      	movs	r3, #1
 800fed6:	61a3      	str	r3, [r4, #24]
 800fed8:	e7d2      	b.n	800fe80 <__sinit+0xc>
 800feda:	bf00      	nop
 800fedc:	08012ca8 	.word	0x08012ca8
 800fee0:	0800fe0d 	.word	0x0800fe0d

0800fee4 <__sfp>:
 800fee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fee6:	4607      	mov	r7, r0
 800fee8:	f7ff ffac 	bl	800fe44 <__sfp_lock_acquire>
 800feec:	4b1e      	ldr	r3, [pc, #120]	; (800ff68 <__sfp+0x84>)
 800feee:	681e      	ldr	r6, [r3, #0]
 800fef0:	69b3      	ldr	r3, [r6, #24]
 800fef2:	b913      	cbnz	r3, 800fefa <__sfp+0x16>
 800fef4:	4630      	mov	r0, r6
 800fef6:	f7ff ffbd 	bl	800fe74 <__sinit>
 800fefa:	3648      	adds	r6, #72	; 0x48
 800fefc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ff00:	3b01      	subs	r3, #1
 800ff02:	d503      	bpl.n	800ff0c <__sfp+0x28>
 800ff04:	6833      	ldr	r3, [r6, #0]
 800ff06:	b30b      	cbz	r3, 800ff4c <__sfp+0x68>
 800ff08:	6836      	ldr	r6, [r6, #0]
 800ff0a:	e7f7      	b.n	800fefc <__sfp+0x18>
 800ff0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ff10:	b9d5      	cbnz	r5, 800ff48 <__sfp+0x64>
 800ff12:	4b16      	ldr	r3, [pc, #88]	; (800ff6c <__sfp+0x88>)
 800ff14:	60e3      	str	r3, [r4, #12]
 800ff16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ff1a:	6665      	str	r5, [r4, #100]	; 0x64
 800ff1c:	f000 fbba 	bl	8010694 <__retarget_lock_init_recursive>
 800ff20:	f7ff ff96 	bl	800fe50 <__sfp_lock_release>
 800ff24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ff28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ff2c:	6025      	str	r5, [r4, #0]
 800ff2e:	61a5      	str	r5, [r4, #24]
 800ff30:	2208      	movs	r2, #8
 800ff32:	4629      	mov	r1, r5
 800ff34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ff38:	f7fd f870 	bl	800d01c <memset>
 800ff3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ff40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ff44:	4620      	mov	r0, r4
 800ff46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff48:	3468      	adds	r4, #104	; 0x68
 800ff4a:	e7d9      	b.n	800ff00 <__sfp+0x1c>
 800ff4c:	2104      	movs	r1, #4
 800ff4e:	4638      	mov	r0, r7
 800ff50:	f7ff ff62 	bl	800fe18 <__sfmoreglue>
 800ff54:	4604      	mov	r4, r0
 800ff56:	6030      	str	r0, [r6, #0]
 800ff58:	2800      	cmp	r0, #0
 800ff5a:	d1d5      	bne.n	800ff08 <__sfp+0x24>
 800ff5c:	f7ff ff78 	bl	800fe50 <__sfp_lock_release>
 800ff60:	230c      	movs	r3, #12
 800ff62:	603b      	str	r3, [r7, #0]
 800ff64:	e7ee      	b.n	800ff44 <__sfp+0x60>
 800ff66:	bf00      	nop
 800ff68:	08012ca8 	.word	0x08012ca8
 800ff6c:	ffff0001 	.word	0xffff0001

0800ff70 <_fwalk_reent>:
 800ff70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff74:	4606      	mov	r6, r0
 800ff76:	4688      	mov	r8, r1
 800ff78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ff7c:	2700      	movs	r7, #0
 800ff7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff82:	f1b9 0901 	subs.w	r9, r9, #1
 800ff86:	d505      	bpl.n	800ff94 <_fwalk_reent+0x24>
 800ff88:	6824      	ldr	r4, [r4, #0]
 800ff8a:	2c00      	cmp	r4, #0
 800ff8c:	d1f7      	bne.n	800ff7e <_fwalk_reent+0xe>
 800ff8e:	4638      	mov	r0, r7
 800ff90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff94:	89ab      	ldrh	r3, [r5, #12]
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	d907      	bls.n	800ffaa <_fwalk_reent+0x3a>
 800ff9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	d003      	beq.n	800ffaa <_fwalk_reent+0x3a>
 800ffa2:	4629      	mov	r1, r5
 800ffa4:	4630      	mov	r0, r6
 800ffa6:	47c0      	blx	r8
 800ffa8:	4307      	orrs	r7, r0
 800ffaa:	3568      	adds	r5, #104	; 0x68
 800ffac:	e7e9      	b.n	800ff82 <_fwalk_reent+0x12>

0800ffae <rshift>:
 800ffae:	6903      	ldr	r3, [r0, #16]
 800ffb0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ffb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffb8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ffbc:	f100 0414 	add.w	r4, r0, #20
 800ffc0:	dd45      	ble.n	801004e <rshift+0xa0>
 800ffc2:	f011 011f 	ands.w	r1, r1, #31
 800ffc6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ffca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ffce:	d10c      	bne.n	800ffea <rshift+0x3c>
 800ffd0:	f100 0710 	add.w	r7, r0, #16
 800ffd4:	4629      	mov	r1, r5
 800ffd6:	42b1      	cmp	r1, r6
 800ffd8:	d334      	bcc.n	8010044 <rshift+0x96>
 800ffda:	1a9b      	subs	r3, r3, r2
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	1eea      	subs	r2, r5, #3
 800ffe0:	4296      	cmp	r6, r2
 800ffe2:	bf38      	it	cc
 800ffe4:	2300      	movcc	r3, #0
 800ffe6:	4423      	add	r3, r4
 800ffe8:	e015      	b.n	8010016 <rshift+0x68>
 800ffea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ffee:	f1c1 0820 	rsb	r8, r1, #32
 800fff2:	40cf      	lsrs	r7, r1
 800fff4:	f105 0e04 	add.w	lr, r5, #4
 800fff8:	46a1      	mov	r9, r4
 800fffa:	4576      	cmp	r6, lr
 800fffc:	46f4      	mov	ip, lr
 800fffe:	d815      	bhi.n	801002c <rshift+0x7e>
 8010000:	1a9b      	subs	r3, r3, r2
 8010002:	009a      	lsls	r2, r3, #2
 8010004:	3a04      	subs	r2, #4
 8010006:	3501      	adds	r5, #1
 8010008:	42ae      	cmp	r6, r5
 801000a:	bf38      	it	cc
 801000c:	2200      	movcc	r2, #0
 801000e:	18a3      	adds	r3, r4, r2
 8010010:	50a7      	str	r7, [r4, r2]
 8010012:	b107      	cbz	r7, 8010016 <rshift+0x68>
 8010014:	3304      	adds	r3, #4
 8010016:	1b1a      	subs	r2, r3, r4
 8010018:	42a3      	cmp	r3, r4
 801001a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801001e:	bf08      	it	eq
 8010020:	2300      	moveq	r3, #0
 8010022:	6102      	str	r2, [r0, #16]
 8010024:	bf08      	it	eq
 8010026:	6143      	streq	r3, [r0, #20]
 8010028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801002c:	f8dc c000 	ldr.w	ip, [ip]
 8010030:	fa0c fc08 	lsl.w	ip, ip, r8
 8010034:	ea4c 0707 	orr.w	r7, ip, r7
 8010038:	f849 7b04 	str.w	r7, [r9], #4
 801003c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010040:	40cf      	lsrs	r7, r1
 8010042:	e7da      	b.n	800fffa <rshift+0x4c>
 8010044:	f851 cb04 	ldr.w	ip, [r1], #4
 8010048:	f847 cf04 	str.w	ip, [r7, #4]!
 801004c:	e7c3      	b.n	800ffd6 <rshift+0x28>
 801004e:	4623      	mov	r3, r4
 8010050:	e7e1      	b.n	8010016 <rshift+0x68>

08010052 <__hexdig_fun>:
 8010052:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010056:	2b09      	cmp	r3, #9
 8010058:	d802      	bhi.n	8010060 <__hexdig_fun+0xe>
 801005a:	3820      	subs	r0, #32
 801005c:	b2c0      	uxtb	r0, r0
 801005e:	4770      	bx	lr
 8010060:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010064:	2b05      	cmp	r3, #5
 8010066:	d801      	bhi.n	801006c <__hexdig_fun+0x1a>
 8010068:	3847      	subs	r0, #71	; 0x47
 801006a:	e7f7      	b.n	801005c <__hexdig_fun+0xa>
 801006c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010070:	2b05      	cmp	r3, #5
 8010072:	d801      	bhi.n	8010078 <__hexdig_fun+0x26>
 8010074:	3827      	subs	r0, #39	; 0x27
 8010076:	e7f1      	b.n	801005c <__hexdig_fun+0xa>
 8010078:	2000      	movs	r0, #0
 801007a:	4770      	bx	lr

0801007c <__gethex>:
 801007c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010080:	ed2d 8b02 	vpush	{d8}
 8010084:	b089      	sub	sp, #36	; 0x24
 8010086:	ee08 0a10 	vmov	s16, r0
 801008a:	9304      	str	r3, [sp, #16]
 801008c:	4bbc      	ldr	r3, [pc, #752]	; (8010380 <__gethex+0x304>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	9301      	str	r3, [sp, #4]
 8010092:	4618      	mov	r0, r3
 8010094:	468b      	mov	fp, r1
 8010096:	4690      	mov	r8, r2
 8010098:	f7f0 f8aa 	bl	80001f0 <strlen>
 801009c:	9b01      	ldr	r3, [sp, #4]
 801009e:	f8db 2000 	ldr.w	r2, [fp]
 80100a2:	4403      	add	r3, r0
 80100a4:	4682      	mov	sl, r0
 80100a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80100aa:	9305      	str	r3, [sp, #20]
 80100ac:	1c93      	adds	r3, r2, #2
 80100ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80100b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80100b6:	32fe      	adds	r2, #254	; 0xfe
 80100b8:	18d1      	adds	r1, r2, r3
 80100ba:	461f      	mov	r7, r3
 80100bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80100c0:	9100      	str	r1, [sp, #0]
 80100c2:	2830      	cmp	r0, #48	; 0x30
 80100c4:	d0f8      	beq.n	80100b8 <__gethex+0x3c>
 80100c6:	f7ff ffc4 	bl	8010052 <__hexdig_fun>
 80100ca:	4604      	mov	r4, r0
 80100cc:	2800      	cmp	r0, #0
 80100ce:	d13a      	bne.n	8010146 <__gethex+0xca>
 80100d0:	9901      	ldr	r1, [sp, #4]
 80100d2:	4652      	mov	r2, sl
 80100d4:	4638      	mov	r0, r7
 80100d6:	f7fd ff4e 	bl	800df76 <strncmp>
 80100da:	4605      	mov	r5, r0
 80100dc:	2800      	cmp	r0, #0
 80100de:	d168      	bne.n	80101b2 <__gethex+0x136>
 80100e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80100e4:	eb07 060a 	add.w	r6, r7, sl
 80100e8:	f7ff ffb3 	bl	8010052 <__hexdig_fun>
 80100ec:	2800      	cmp	r0, #0
 80100ee:	d062      	beq.n	80101b6 <__gethex+0x13a>
 80100f0:	4633      	mov	r3, r6
 80100f2:	7818      	ldrb	r0, [r3, #0]
 80100f4:	2830      	cmp	r0, #48	; 0x30
 80100f6:	461f      	mov	r7, r3
 80100f8:	f103 0301 	add.w	r3, r3, #1
 80100fc:	d0f9      	beq.n	80100f2 <__gethex+0x76>
 80100fe:	f7ff ffa8 	bl	8010052 <__hexdig_fun>
 8010102:	2301      	movs	r3, #1
 8010104:	fab0 f480 	clz	r4, r0
 8010108:	0964      	lsrs	r4, r4, #5
 801010a:	4635      	mov	r5, r6
 801010c:	9300      	str	r3, [sp, #0]
 801010e:	463a      	mov	r2, r7
 8010110:	4616      	mov	r6, r2
 8010112:	3201      	adds	r2, #1
 8010114:	7830      	ldrb	r0, [r6, #0]
 8010116:	f7ff ff9c 	bl	8010052 <__hexdig_fun>
 801011a:	2800      	cmp	r0, #0
 801011c:	d1f8      	bne.n	8010110 <__gethex+0x94>
 801011e:	9901      	ldr	r1, [sp, #4]
 8010120:	4652      	mov	r2, sl
 8010122:	4630      	mov	r0, r6
 8010124:	f7fd ff27 	bl	800df76 <strncmp>
 8010128:	b980      	cbnz	r0, 801014c <__gethex+0xd0>
 801012a:	b94d      	cbnz	r5, 8010140 <__gethex+0xc4>
 801012c:	eb06 050a 	add.w	r5, r6, sl
 8010130:	462a      	mov	r2, r5
 8010132:	4616      	mov	r6, r2
 8010134:	3201      	adds	r2, #1
 8010136:	7830      	ldrb	r0, [r6, #0]
 8010138:	f7ff ff8b 	bl	8010052 <__hexdig_fun>
 801013c:	2800      	cmp	r0, #0
 801013e:	d1f8      	bne.n	8010132 <__gethex+0xb6>
 8010140:	1bad      	subs	r5, r5, r6
 8010142:	00ad      	lsls	r5, r5, #2
 8010144:	e004      	b.n	8010150 <__gethex+0xd4>
 8010146:	2400      	movs	r4, #0
 8010148:	4625      	mov	r5, r4
 801014a:	e7e0      	b.n	801010e <__gethex+0x92>
 801014c:	2d00      	cmp	r5, #0
 801014e:	d1f7      	bne.n	8010140 <__gethex+0xc4>
 8010150:	7833      	ldrb	r3, [r6, #0]
 8010152:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010156:	2b50      	cmp	r3, #80	; 0x50
 8010158:	d13b      	bne.n	80101d2 <__gethex+0x156>
 801015a:	7873      	ldrb	r3, [r6, #1]
 801015c:	2b2b      	cmp	r3, #43	; 0x2b
 801015e:	d02c      	beq.n	80101ba <__gethex+0x13e>
 8010160:	2b2d      	cmp	r3, #45	; 0x2d
 8010162:	d02e      	beq.n	80101c2 <__gethex+0x146>
 8010164:	1c71      	adds	r1, r6, #1
 8010166:	f04f 0900 	mov.w	r9, #0
 801016a:	7808      	ldrb	r0, [r1, #0]
 801016c:	f7ff ff71 	bl	8010052 <__hexdig_fun>
 8010170:	1e43      	subs	r3, r0, #1
 8010172:	b2db      	uxtb	r3, r3
 8010174:	2b18      	cmp	r3, #24
 8010176:	d82c      	bhi.n	80101d2 <__gethex+0x156>
 8010178:	f1a0 0210 	sub.w	r2, r0, #16
 801017c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010180:	f7ff ff67 	bl	8010052 <__hexdig_fun>
 8010184:	1e43      	subs	r3, r0, #1
 8010186:	b2db      	uxtb	r3, r3
 8010188:	2b18      	cmp	r3, #24
 801018a:	d91d      	bls.n	80101c8 <__gethex+0x14c>
 801018c:	f1b9 0f00 	cmp.w	r9, #0
 8010190:	d000      	beq.n	8010194 <__gethex+0x118>
 8010192:	4252      	negs	r2, r2
 8010194:	4415      	add	r5, r2
 8010196:	f8cb 1000 	str.w	r1, [fp]
 801019a:	b1e4      	cbz	r4, 80101d6 <__gethex+0x15a>
 801019c:	9b00      	ldr	r3, [sp, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	bf14      	ite	ne
 80101a2:	2700      	movne	r7, #0
 80101a4:	2706      	moveq	r7, #6
 80101a6:	4638      	mov	r0, r7
 80101a8:	b009      	add	sp, #36	; 0x24
 80101aa:	ecbd 8b02 	vpop	{d8}
 80101ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101b2:	463e      	mov	r6, r7
 80101b4:	4625      	mov	r5, r4
 80101b6:	2401      	movs	r4, #1
 80101b8:	e7ca      	b.n	8010150 <__gethex+0xd4>
 80101ba:	f04f 0900 	mov.w	r9, #0
 80101be:	1cb1      	adds	r1, r6, #2
 80101c0:	e7d3      	b.n	801016a <__gethex+0xee>
 80101c2:	f04f 0901 	mov.w	r9, #1
 80101c6:	e7fa      	b.n	80101be <__gethex+0x142>
 80101c8:	230a      	movs	r3, #10
 80101ca:	fb03 0202 	mla	r2, r3, r2, r0
 80101ce:	3a10      	subs	r2, #16
 80101d0:	e7d4      	b.n	801017c <__gethex+0x100>
 80101d2:	4631      	mov	r1, r6
 80101d4:	e7df      	b.n	8010196 <__gethex+0x11a>
 80101d6:	1bf3      	subs	r3, r6, r7
 80101d8:	3b01      	subs	r3, #1
 80101da:	4621      	mov	r1, r4
 80101dc:	2b07      	cmp	r3, #7
 80101de:	dc0b      	bgt.n	80101f8 <__gethex+0x17c>
 80101e0:	ee18 0a10 	vmov	r0, s16
 80101e4:	f000 faee 	bl	80107c4 <_Balloc>
 80101e8:	4604      	mov	r4, r0
 80101ea:	b940      	cbnz	r0, 80101fe <__gethex+0x182>
 80101ec:	4b65      	ldr	r3, [pc, #404]	; (8010384 <__gethex+0x308>)
 80101ee:	4602      	mov	r2, r0
 80101f0:	21de      	movs	r1, #222	; 0xde
 80101f2:	4865      	ldr	r0, [pc, #404]	; (8010388 <__gethex+0x30c>)
 80101f4:	f001 fa8e 	bl	8011714 <__assert_func>
 80101f8:	3101      	adds	r1, #1
 80101fa:	105b      	asrs	r3, r3, #1
 80101fc:	e7ee      	b.n	80101dc <__gethex+0x160>
 80101fe:	f100 0914 	add.w	r9, r0, #20
 8010202:	f04f 0b00 	mov.w	fp, #0
 8010206:	f1ca 0301 	rsb	r3, sl, #1
 801020a:	f8cd 9008 	str.w	r9, [sp, #8]
 801020e:	f8cd b000 	str.w	fp, [sp]
 8010212:	9306      	str	r3, [sp, #24]
 8010214:	42b7      	cmp	r7, r6
 8010216:	d340      	bcc.n	801029a <__gethex+0x21e>
 8010218:	9802      	ldr	r0, [sp, #8]
 801021a:	9b00      	ldr	r3, [sp, #0]
 801021c:	f840 3b04 	str.w	r3, [r0], #4
 8010220:	eba0 0009 	sub.w	r0, r0, r9
 8010224:	1080      	asrs	r0, r0, #2
 8010226:	0146      	lsls	r6, r0, #5
 8010228:	6120      	str	r0, [r4, #16]
 801022a:	4618      	mov	r0, r3
 801022c:	f000 fbc0 	bl	80109b0 <__hi0bits>
 8010230:	1a30      	subs	r0, r6, r0
 8010232:	f8d8 6000 	ldr.w	r6, [r8]
 8010236:	42b0      	cmp	r0, r6
 8010238:	dd63      	ble.n	8010302 <__gethex+0x286>
 801023a:	1b87      	subs	r7, r0, r6
 801023c:	4639      	mov	r1, r7
 801023e:	4620      	mov	r0, r4
 8010240:	f000 ff5a 	bl	80110f8 <__any_on>
 8010244:	4682      	mov	sl, r0
 8010246:	b1a8      	cbz	r0, 8010274 <__gethex+0x1f8>
 8010248:	1e7b      	subs	r3, r7, #1
 801024a:	1159      	asrs	r1, r3, #5
 801024c:	f003 021f 	and.w	r2, r3, #31
 8010250:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010254:	f04f 0a01 	mov.w	sl, #1
 8010258:	fa0a f202 	lsl.w	r2, sl, r2
 801025c:	420a      	tst	r2, r1
 801025e:	d009      	beq.n	8010274 <__gethex+0x1f8>
 8010260:	4553      	cmp	r3, sl
 8010262:	dd05      	ble.n	8010270 <__gethex+0x1f4>
 8010264:	1eb9      	subs	r1, r7, #2
 8010266:	4620      	mov	r0, r4
 8010268:	f000 ff46 	bl	80110f8 <__any_on>
 801026c:	2800      	cmp	r0, #0
 801026e:	d145      	bne.n	80102fc <__gethex+0x280>
 8010270:	f04f 0a02 	mov.w	sl, #2
 8010274:	4639      	mov	r1, r7
 8010276:	4620      	mov	r0, r4
 8010278:	f7ff fe99 	bl	800ffae <rshift>
 801027c:	443d      	add	r5, r7
 801027e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010282:	42ab      	cmp	r3, r5
 8010284:	da4c      	bge.n	8010320 <__gethex+0x2a4>
 8010286:	ee18 0a10 	vmov	r0, s16
 801028a:	4621      	mov	r1, r4
 801028c:	f000 fada 	bl	8010844 <_Bfree>
 8010290:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010292:	2300      	movs	r3, #0
 8010294:	6013      	str	r3, [r2, #0]
 8010296:	27a3      	movs	r7, #163	; 0xa3
 8010298:	e785      	b.n	80101a6 <__gethex+0x12a>
 801029a:	1e73      	subs	r3, r6, #1
 801029c:	9a05      	ldr	r2, [sp, #20]
 801029e:	9303      	str	r3, [sp, #12]
 80102a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d019      	beq.n	80102dc <__gethex+0x260>
 80102a8:	f1bb 0f20 	cmp.w	fp, #32
 80102ac:	d107      	bne.n	80102be <__gethex+0x242>
 80102ae:	9b02      	ldr	r3, [sp, #8]
 80102b0:	9a00      	ldr	r2, [sp, #0]
 80102b2:	f843 2b04 	str.w	r2, [r3], #4
 80102b6:	9302      	str	r3, [sp, #8]
 80102b8:	2300      	movs	r3, #0
 80102ba:	9300      	str	r3, [sp, #0]
 80102bc:	469b      	mov	fp, r3
 80102be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80102c2:	f7ff fec6 	bl	8010052 <__hexdig_fun>
 80102c6:	9b00      	ldr	r3, [sp, #0]
 80102c8:	f000 000f 	and.w	r0, r0, #15
 80102cc:	fa00 f00b 	lsl.w	r0, r0, fp
 80102d0:	4303      	orrs	r3, r0
 80102d2:	9300      	str	r3, [sp, #0]
 80102d4:	f10b 0b04 	add.w	fp, fp, #4
 80102d8:	9b03      	ldr	r3, [sp, #12]
 80102da:	e00d      	b.n	80102f8 <__gethex+0x27c>
 80102dc:	9b03      	ldr	r3, [sp, #12]
 80102de:	9a06      	ldr	r2, [sp, #24]
 80102e0:	4413      	add	r3, r2
 80102e2:	42bb      	cmp	r3, r7
 80102e4:	d3e0      	bcc.n	80102a8 <__gethex+0x22c>
 80102e6:	4618      	mov	r0, r3
 80102e8:	9901      	ldr	r1, [sp, #4]
 80102ea:	9307      	str	r3, [sp, #28]
 80102ec:	4652      	mov	r2, sl
 80102ee:	f7fd fe42 	bl	800df76 <strncmp>
 80102f2:	9b07      	ldr	r3, [sp, #28]
 80102f4:	2800      	cmp	r0, #0
 80102f6:	d1d7      	bne.n	80102a8 <__gethex+0x22c>
 80102f8:	461e      	mov	r6, r3
 80102fa:	e78b      	b.n	8010214 <__gethex+0x198>
 80102fc:	f04f 0a03 	mov.w	sl, #3
 8010300:	e7b8      	b.n	8010274 <__gethex+0x1f8>
 8010302:	da0a      	bge.n	801031a <__gethex+0x29e>
 8010304:	1a37      	subs	r7, r6, r0
 8010306:	4621      	mov	r1, r4
 8010308:	ee18 0a10 	vmov	r0, s16
 801030c:	463a      	mov	r2, r7
 801030e:	f000 fcb5 	bl	8010c7c <__lshift>
 8010312:	1bed      	subs	r5, r5, r7
 8010314:	4604      	mov	r4, r0
 8010316:	f100 0914 	add.w	r9, r0, #20
 801031a:	f04f 0a00 	mov.w	sl, #0
 801031e:	e7ae      	b.n	801027e <__gethex+0x202>
 8010320:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010324:	42a8      	cmp	r0, r5
 8010326:	dd72      	ble.n	801040e <__gethex+0x392>
 8010328:	1b45      	subs	r5, r0, r5
 801032a:	42ae      	cmp	r6, r5
 801032c:	dc36      	bgt.n	801039c <__gethex+0x320>
 801032e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010332:	2b02      	cmp	r3, #2
 8010334:	d02a      	beq.n	801038c <__gethex+0x310>
 8010336:	2b03      	cmp	r3, #3
 8010338:	d02c      	beq.n	8010394 <__gethex+0x318>
 801033a:	2b01      	cmp	r3, #1
 801033c:	d115      	bne.n	801036a <__gethex+0x2ee>
 801033e:	42ae      	cmp	r6, r5
 8010340:	d113      	bne.n	801036a <__gethex+0x2ee>
 8010342:	2e01      	cmp	r6, #1
 8010344:	d10b      	bne.n	801035e <__gethex+0x2e2>
 8010346:	9a04      	ldr	r2, [sp, #16]
 8010348:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801034c:	6013      	str	r3, [r2, #0]
 801034e:	2301      	movs	r3, #1
 8010350:	6123      	str	r3, [r4, #16]
 8010352:	f8c9 3000 	str.w	r3, [r9]
 8010356:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010358:	2762      	movs	r7, #98	; 0x62
 801035a:	601c      	str	r4, [r3, #0]
 801035c:	e723      	b.n	80101a6 <__gethex+0x12a>
 801035e:	1e71      	subs	r1, r6, #1
 8010360:	4620      	mov	r0, r4
 8010362:	f000 fec9 	bl	80110f8 <__any_on>
 8010366:	2800      	cmp	r0, #0
 8010368:	d1ed      	bne.n	8010346 <__gethex+0x2ca>
 801036a:	ee18 0a10 	vmov	r0, s16
 801036e:	4621      	mov	r1, r4
 8010370:	f000 fa68 	bl	8010844 <_Bfree>
 8010374:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010376:	2300      	movs	r3, #0
 8010378:	6013      	str	r3, [r2, #0]
 801037a:	2750      	movs	r7, #80	; 0x50
 801037c:	e713      	b.n	80101a6 <__gethex+0x12a>
 801037e:	bf00      	nop
 8010380:	08012e98 	.word	0x08012e98
 8010384:	08012dbb 	.word	0x08012dbb
 8010388:	08012e2c 	.word	0x08012e2c
 801038c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801038e:	2b00      	cmp	r3, #0
 8010390:	d1eb      	bne.n	801036a <__gethex+0x2ee>
 8010392:	e7d8      	b.n	8010346 <__gethex+0x2ca>
 8010394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010396:	2b00      	cmp	r3, #0
 8010398:	d1d5      	bne.n	8010346 <__gethex+0x2ca>
 801039a:	e7e6      	b.n	801036a <__gethex+0x2ee>
 801039c:	1e6f      	subs	r7, r5, #1
 801039e:	f1ba 0f00 	cmp.w	sl, #0
 80103a2:	d131      	bne.n	8010408 <__gethex+0x38c>
 80103a4:	b127      	cbz	r7, 80103b0 <__gethex+0x334>
 80103a6:	4639      	mov	r1, r7
 80103a8:	4620      	mov	r0, r4
 80103aa:	f000 fea5 	bl	80110f8 <__any_on>
 80103ae:	4682      	mov	sl, r0
 80103b0:	117b      	asrs	r3, r7, #5
 80103b2:	2101      	movs	r1, #1
 80103b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80103b8:	f007 071f 	and.w	r7, r7, #31
 80103bc:	fa01 f707 	lsl.w	r7, r1, r7
 80103c0:	421f      	tst	r7, r3
 80103c2:	4629      	mov	r1, r5
 80103c4:	4620      	mov	r0, r4
 80103c6:	bf18      	it	ne
 80103c8:	f04a 0a02 	orrne.w	sl, sl, #2
 80103cc:	1b76      	subs	r6, r6, r5
 80103ce:	f7ff fdee 	bl	800ffae <rshift>
 80103d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80103d6:	2702      	movs	r7, #2
 80103d8:	f1ba 0f00 	cmp.w	sl, #0
 80103dc:	d048      	beq.n	8010470 <__gethex+0x3f4>
 80103de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80103e2:	2b02      	cmp	r3, #2
 80103e4:	d015      	beq.n	8010412 <__gethex+0x396>
 80103e6:	2b03      	cmp	r3, #3
 80103e8:	d017      	beq.n	801041a <__gethex+0x39e>
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	d109      	bne.n	8010402 <__gethex+0x386>
 80103ee:	f01a 0f02 	tst.w	sl, #2
 80103f2:	d006      	beq.n	8010402 <__gethex+0x386>
 80103f4:	f8d9 0000 	ldr.w	r0, [r9]
 80103f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80103fc:	f01a 0f01 	tst.w	sl, #1
 8010400:	d10e      	bne.n	8010420 <__gethex+0x3a4>
 8010402:	f047 0710 	orr.w	r7, r7, #16
 8010406:	e033      	b.n	8010470 <__gethex+0x3f4>
 8010408:	f04f 0a01 	mov.w	sl, #1
 801040c:	e7d0      	b.n	80103b0 <__gethex+0x334>
 801040e:	2701      	movs	r7, #1
 8010410:	e7e2      	b.n	80103d8 <__gethex+0x35c>
 8010412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010414:	f1c3 0301 	rsb	r3, r3, #1
 8010418:	9315      	str	r3, [sp, #84]	; 0x54
 801041a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801041c:	2b00      	cmp	r3, #0
 801041e:	d0f0      	beq.n	8010402 <__gethex+0x386>
 8010420:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010424:	f104 0314 	add.w	r3, r4, #20
 8010428:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801042c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010430:	f04f 0c00 	mov.w	ip, #0
 8010434:	4618      	mov	r0, r3
 8010436:	f853 2b04 	ldr.w	r2, [r3], #4
 801043a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801043e:	d01c      	beq.n	801047a <__gethex+0x3fe>
 8010440:	3201      	adds	r2, #1
 8010442:	6002      	str	r2, [r0, #0]
 8010444:	2f02      	cmp	r7, #2
 8010446:	f104 0314 	add.w	r3, r4, #20
 801044a:	d13f      	bne.n	80104cc <__gethex+0x450>
 801044c:	f8d8 2000 	ldr.w	r2, [r8]
 8010450:	3a01      	subs	r2, #1
 8010452:	42b2      	cmp	r2, r6
 8010454:	d10a      	bne.n	801046c <__gethex+0x3f0>
 8010456:	1171      	asrs	r1, r6, #5
 8010458:	2201      	movs	r2, #1
 801045a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801045e:	f006 061f 	and.w	r6, r6, #31
 8010462:	fa02 f606 	lsl.w	r6, r2, r6
 8010466:	421e      	tst	r6, r3
 8010468:	bf18      	it	ne
 801046a:	4617      	movne	r7, r2
 801046c:	f047 0720 	orr.w	r7, r7, #32
 8010470:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010472:	601c      	str	r4, [r3, #0]
 8010474:	9b04      	ldr	r3, [sp, #16]
 8010476:	601d      	str	r5, [r3, #0]
 8010478:	e695      	b.n	80101a6 <__gethex+0x12a>
 801047a:	4299      	cmp	r1, r3
 801047c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010480:	d8d8      	bhi.n	8010434 <__gethex+0x3b8>
 8010482:	68a3      	ldr	r3, [r4, #8]
 8010484:	459b      	cmp	fp, r3
 8010486:	db19      	blt.n	80104bc <__gethex+0x440>
 8010488:	6861      	ldr	r1, [r4, #4]
 801048a:	ee18 0a10 	vmov	r0, s16
 801048e:	3101      	adds	r1, #1
 8010490:	f000 f998 	bl	80107c4 <_Balloc>
 8010494:	4681      	mov	r9, r0
 8010496:	b918      	cbnz	r0, 80104a0 <__gethex+0x424>
 8010498:	4b1a      	ldr	r3, [pc, #104]	; (8010504 <__gethex+0x488>)
 801049a:	4602      	mov	r2, r0
 801049c:	2184      	movs	r1, #132	; 0x84
 801049e:	e6a8      	b.n	80101f2 <__gethex+0x176>
 80104a0:	6922      	ldr	r2, [r4, #16]
 80104a2:	3202      	adds	r2, #2
 80104a4:	f104 010c 	add.w	r1, r4, #12
 80104a8:	0092      	lsls	r2, r2, #2
 80104aa:	300c      	adds	r0, #12
 80104ac:	f7fc fda8 	bl	800d000 <memcpy>
 80104b0:	4621      	mov	r1, r4
 80104b2:	ee18 0a10 	vmov	r0, s16
 80104b6:	f000 f9c5 	bl	8010844 <_Bfree>
 80104ba:	464c      	mov	r4, r9
 80104bc:	6923      	ldr	r3, [r4, #16]
 80104be:	1c5a      	adds	r2, r3, #1
 80104c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80104c4:	6122      	str	r2, [r4, #16]
 80104c6:	2201      	movs	r2, #1
 80104c8:	615a      	str	r2, [r3, #20]
 80104ca:	e7bb      	b.n	8010444 <__gethex+0x3c8>
 80104cc:	6922      	ldr	r2, [r4, #16]
 80104ce:	455a      	cmp	r2, fp
 80104d0:	dd0b      	ble.n	80104ea <__gethex+0x46e>
 80104d2:	2101      	movs	r1, #1
 80104d4:	4620      	mov	r0, r4
 80104d6:	f7ff fd6a 	bl	800ffae <rshift>
 80104da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80104de:	3501      	adds	r5, #1
 80104e0:	42ab      	cmp	r3, r5
 80104e2:	f6ff aed0 	blt.w	8010286 <__gethex+0x20a>
 80104e6:	2701      	movs	r7, #1
 80104e8:	e7c0      	b.n	801046c <__gethex+0x3f0>
 80104ea:	f016 061f 	ands.w	r6, r6, #31
 80104ee:	d0fa      	beq.n	80104e6 <__gethex+0x46a>
 80104f0:	449a      	add	sl, r3
 80104f2:	f1c6 0620 	rsb	r6, r6, #32
 80104f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80104fa:	f000 fa59 	bl	80109b0 <__hi0bits>
 80104fe:	42b0      	cmp	r0, r6
 8010500:	dbe7      	blt.n	80104d2 <__gethex+0x456>
 8010502:	e7f0      	b.n	80104e6 <__gethex+0x46a>
 8010504:	08012dbb 	.word	0x08012dbb

08010508 <L_shift>:
 8010508:	f1c2 0208 	rsb	r2, r2, #8
 801050c:	0092      	lsls	r2, r2, #2
 801050e:	b570      	push	{r4, r5, r6, lr}
 8010510:	f1c2 0620 	rsb	r6, r2, #32
 8010514:	6843      	ldr	r3, [r0, #4]
 8010516:	6804      	ldr	r4, [r0, #0]
 8010518:	fa03 f506 	lsl.w	r5, r3, r6
 801051c:	432c      	orrs	r4, r5
 801051e:	40d3      	lsrs	r3, r2
 8010520:	6004      	str	r4, [r0, #0]
 8010522:	f840 3f04 	str.w	r3, [r0, #4]!
 8010526:	4288      	cmp	r0, r1
 8010528:	d3f4      	bcc.n	8010514 <L_shift+0xc>
 801052a:	bd70      	pop	{r4, r5, r6, pc}

0801052c <__match>:
 801052c:	b530      	push	{r4, r5, lr}
 801052e:	6803      	ldr	r3, [r0, #0]
 8010530:	3301      	adds	r3, #1
 8010532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010536:	b914      	cbnz	r4, 801053e <__match+0x12>
 8010538:	6003      	str	r3, [r0, #0]
 801053a:	2001      	movs	r0, #1
 801053c:	bd30      	pop	{r4, r5, pc}
 801053e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010542:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010546:	2d19      	cmp	r5, #25
 8010548:	bf98      	it	ls
 801054a:	3220      	addls	r2, #32
 801054c:	42a2      	cmp	r2, r4
 801054e:	d0f0      	beq.n	8010532 <__match+0x6>
 8010550:	2000      	movs	r0, #0
 8010552:	e7f3      	b.n	801053c <__match+0x10>

08010554 <__hexnan>:
 8010554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010558:	680b      	ldr	r3, [r1, #0]
 801055a:	6801      	ldr	r1, [r0, #0]
 801055c:	115e      	asrs	r6, r3, #5
 801055e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010562:	f013 031f 	ands.w	r3, r3, #31
 8010566:	b087      	sub	sp, #28
 8010568:	bf18      	it	ne
 801056a:	3604      	addne	r6, #4
 801056c:	2500      	movs	r5, #0
 801056e:	1f37      	subs	r7, r6, #4
 8010570:	4682      	mov	sl, r0
 8010572:	4690      	mov	r8, r2
 8010574:	9301      	str	r3, [sp, #4]
 8010576:	f846 5c04 	str.w	r5, [r6, #-4]
 801057a:	46b9      	mov	r9, r7
 801057c:	463c      	mov	r4, r7
 801057e:	9502      	str	r5, [sp, #8]
 8010580:	46ab      	mov	fp, r5
 8010582:	784a      	ldrb	r2, [r1, #1]
 8010584:	1c4b      	adds	r3, r1, #1
 8010586:	9303      	str	r3, [sp, #12]
 8010588:	b342      	cbz	r2, 80105dc <__hexnan+0x88>
 801058a:	4610      	mov	r0, r2
 801058c:	9105      	str	r1, [sp, #20]
 801058e:	9204      	str	r2, [sp, #16]
 8010590:	f7ff fd5f 	bl	8010052 <__hexdig_fun>
 8010594:	2800      	cmp	r0, #0
 8010596:	d14f      	bne.n	8010638 <__hexnan+0xe4>
 8010598:	9a04      	ldr	r2, [sp, #16]
 801059a:	9905      	ldr	r1, [sp, #20]
 801059c:	2a20      	cmp	r2, #32
 801059e:	d818      	bhi.n	80105d2 <__hexnan+0x7e>
 80105a0:	9b02      	ldr	r3, [sp, #8]
 80105a2:	459b      	cmp	fp, r3
 80105a4:	dd13      	ble.n	80105ce <__hexnan+0x7a>
 80105a6:	454c      	cmp	r4, r9
 80105a8:	d206      	bcs.n	80105b8 <__hexnan+0x64>
 80105aa:	2d07      	cmp	r5, #7
 80105ac:	dc04      	bgt.n	80105b8 <__hexnan+0x64>
 80105ae:	462a      	mov	r2, r5
 80105b0:	4649      	mov	r1, r9
 80105b2:	4620      	mov	r0, r4
 80105b4:	f7ff ffa8 	bl	8010508 <L_shift>
 80105b8:	4544      	cmp	r4, r8
 80105ba:	d950      	bls.n	801065e <__hexnan+0x10a>
 80105bc:	2300      	movs	r3, #0
 80105be:	f1a4 0904 	sub.w	r9, r4, #4
 80105c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80105c6:	f8cd b008 	str.w	fp, [sp, #8]
 80105ca:	464c      	mov	r4, r9
 80105cc:	461d      	mov	r5, r3
 80105ce:	9903      	ldr	r1, [sp, #12]
 80105d0:	e7d7      	b.n	8010582 <__hexnan+0x2e>
 80105d2:	2a29      	cmp	r2, #41	; 0x29
 80105d4:	d156      	bne.n	8010684 <__hexnan+0x130>
 80105d6:	3102      	adds	r1, #2
 80105d8:	f8ca 1000 	str.w	r1, [sl]
 80105dc:	f1bb 0f00 	cmp.w	fp, #0
 80105e0:	d050      	beq.n	8010684 <__hexnan+0x130>
 80105e2:	454c      	cmp	r4, r9
 80105e4:	d206      	bcs.n	80105f4 <__hexnan+0xa0>
 80105e6:	2d07      	cmp	r5, #7
 80105e8:	dc04      	bgt.n	80105f4 <__hexnan+0xa0>
 80105ea:	462a      	mov	r2, r5
 80105ec:	4649      	mov	r1, r9
 80105ee:	4620      	mov	r0, r4
 80105f0:	f7ff ff8a 	bl	8010508 <L_shift>
 80105f4:	4544      	cmp	r4, r8
 80105f6:	d934      	bls.n	8010662 <__hexnan+0x10e>
 80105f8:	f1a8 0204 	sub.w	r2, r8, #4
 80105fc:	4623      	mov	r3, r4
 80105fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8010602:	f842 1f04 	str.w	r1, [r2, #4]!
 8010606:	429f      	cmp	r7, r3
 8010608:	d2f9      	bcs.n	80105fe <__hexnan+0xaa>
 801060a:	1b3b      	subs	r3, r7, r4
 801060c:	f023 0303 	bic.w	r3, r3, #3
 8010610:	3304      	adds	r3, #4
 8010612:	3401      	adds	r4, #1
 8010614:	3e03      	subs	r6, #3
 8010616:	42b4      	cmp	r4, r6
 8010618:	bf88      	it	hi
 801061a:	2304      	movhi	r3, #4
 801061c:	4443      	add	r3, r8
 801061e:	2200      	movs	r2, #0
 8010620:	f843 2b04 	str.w	r2, [r3], #4
 8010624:	429f      	cmp	r7, r3
 8010626:	d2fb      	bcs.n	8010620 <__hexnan+0xcc>
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	b91b      	cbnz	r3, 8010634 <__hexnan+0xe0>
 801062c:	4547      	cmp	r7, r8
 801062e:	d127      	bne.n	8010680 <__hexnan+0x12c>
 8010630:	2301      	movs	r3, #1
 8010632:	603b      	str	r3, [r7, #0]
 8010634:	2005      	movs	r0, #5
 8010636:	e026      	b.n	8010686 <__hexnan+0x132>
 8010638:	3501      	adds	r5, #1
 801063a:	2d08      	cmp	r5, #8
 801063c:	f10b 0b01 	add.w	fp, fp, #1
 8010640:	dd06      	ble.n	8010650 <__hexnan+0xfc>
 8010642:	4544      	cmp	r4, r8
 8010644:	d9c3      	bls.n	80105ce <__hexnan+0x7a>
 8010646:	2300      	movs	r3, #0
 8010648:	f844 3c04 	str.w	r3, [r4, #-4]
 801064c:	2501      	movs	r5, #1
 801064e:	3c04      	subs	r4, #4
 8010650:	6822      	ldr	r2, [r4, #0]
 8010652:	f000 000f 	and.w	r0, r0, #15
 8010656:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801065a:	6022      	str	r2, [r4, #0]
 801065c:	e7b7      	b.n	80105ce <__hexnan+0x7a>
 801065e:	2508      	movs	r5, #8
 8010660:	e7b5      	b.n	80105ce <__hexnan+0x7a>
 8010662:	9b01      	ldr	r3, [sp, #4]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d0df      	beq.n	8010628 <__hexnan+0xd4>
 8010668:	f04f 32ff 	mov.w	r2, #4294967295
 801066c:	f1c3 0320 	rsb	r3, r3, #32
 8010670:	fa22 f303 	lsr.w	r3, r2, r3
 8010674:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010678:	401a      	ands	r2, r3
 801067a:	f846 2c04 	str.w	r2, [r6, #-4]
 801067e:	e7d3      	b.n	8010628 <__hexnan+0xd4>
 8010680:	3f04      	subs	r7, #4
 8010682:	e7d1      	b.n	8010628 <__hexnan+0xd4>
 8010684:	2004      	movs	r0, #4
 8010686:	b007      	add	sp, #28
 8010688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801068c <_localeconv_r>:
 801068c:	4800      	ldr	r0, [pc, #0]	; (8010690 <_localeconv_r+0x4>)
 801068e:	4770      	bx	lr
 8010690:	20000180 	.word	0x20000180

08010694 <__retarget_lock_init_recursive>:
 8010694:	4770      	bx	lr

08010696 <__retarget_lock_acquire_recursive>:
 8010696:	4770      	bx	lr

08010698 <__retarget_lock_release_recursive>:
 8010698:	4770      	bx	lr
	...

0801069c <_lseek_r>:
 801069c:	b538      	push	{r3, r4, r5, lr}
 801069e:	4d07      	ldr	r5, [pc, #28]	; (80106bc <_lseek_r+0x20>)
 80106a0:	4604      	mov	r4, r0
 80106a2:	4608      	mov	r0, r1
 80106a4:	4611      	mov	r1, r2
 80106a6:	2200      	movs	r2, #0
 80106a8:	602a      	str	r2, [r5, #0]
 80106aa:	461a      	mov	r2, r3
 80106ac:	f7f3 fd22 	bl	80040f4 <_lseek>
 80106b0:	1c43      	adds	r3, r0, #1
 80106b2:	d102      	bne.n	80106ba <_lseek_r+0x1e>
 80106b4:	682b      	ldr	r3, [r5, #0]
 80106b6:	b103      	cbz	r3, 80106ba <_lseek_r+0x1e>
 80106b8:	6023      	str	r3, [r4, #0]
 80106ba:	bd38      	pop	{r3, r4, r5, pc}
 80106bc:	20001a84 	.word	0x20001a84

080106c0 <__swhatbuf_r>:
 80106c0:	b570      	push	{r4, r5, r6, lr}
 80106c2:	460e      	mov	r6, r1
 80106c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106c8:	2900      	cmp	r1, #0
 80106ca:	b096      	sub	sp, #88	; 0x58
 80106cc:	4614      	mov	r4, r2
 80106ce:	461d      	mov	r5, r3
 80106d0:	da07      	bge.n	80106e2 <__swhatbuf_r+0x22>
 80106d2:	2300      	movs	r3, #0
 80106d4:	602b      	str	r3, [r5, #0]
 80106d6:	89b3      	ldrh	r3, [r6, #12]
 80106d8:	061a      	lsls	r2, r3, #24
 80106da:	d410      	bmi.n	80106fe <__swhatbuf_r+0x3e>
 80106dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106e0:	e00e      	b.n	8010700 <__swhatbuf_r+0x40>
 80106e2:	466a      	mov	r2, sp
 80106e4:	f001 f846 	bl	8011774 <_fstat_r>
 80106e8:	2800      	cmp	r0, #0
 80106ea:	dbf2      	blt.n	80106d2 <__swhatbuf_r+0x12>
 80106ec:	9a01      	ldr	r2, [sp, #4]
 80106ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80106f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80106f6:	425a      	negs	r2, r3
 80106f8:	415a      	adcs	r2, r3
 80106fa:	602a      	str	r2, [r5, #0]
 80106fc:	e7ee      	b.n	80106dc <__swhatbuf_r+0x1c>
 80106fe:	2340      	movs	r3, #64	; 0x40
 8010700:	2000      	movs	r0, #0
 8010702:	6023      	str	r3, [r4, #0]
 8010704:	b016      	add	sp, #88	; 0x58
 8010706:	bd70      	pop	{r4, r5, r6, pc}

08010708 <__smakebuf_r>:
 8010708:	898b      	ldrh	r3, [r1, #12]
 801070a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801070c:	079d      	lsls	r5, r3, #30
 801070e:	4606      	mov	r6, r0
 8010710:	460c      	mov	r4, r1
 8010712:	d507      	bpl.n	8010724 <__smakebuf_r+0x1c>
 8010714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010718:	6023      	str	r3, [r4, #0]
 801071a:	6123      	str	r3, [r4, #16]
 801071c:	2301      	movs	r3, #1
 801071e:	6163      	str	r3, [r4, #20]
 8010720:	b002      	add	sp, #8
 8010722:	bd70      	pop	{r4, r5, r6, pc}
 8010724:	ab01      	add	r3, sp, #4
 8010726:	466a      	mov	r2, sp
 8010728:	f7ff ffca 	bl	80106c0 <__swhatbuf_r>
 801072c:	9900      	ldr	r1, [sp, #0]
 801072e:	4605      	mov	r5, r0
 8010730:	4630      	mov	r0, r6
 8010732:	f7fc fccb 	bl	800d0cc <_malloc_r>
 8010736:	b948      	cbnz	r0, 801074c <__smakebuf_r+0x44>
 8010738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801073c:	059a      	lsls	r2, r3, #22
 801073e:	d4ef      	bmi.n	8010720 <__smakebuf_r+0x18>
 8010740:	f023 0303 	bic.w	r3, r3, #3
 8010744:	f043 0302 	orr.w	r3, r3, #2
 8010748:	81a3      	strh	r3, [r4, #12]
 801074a:	e7e3      	b.n	8010714 <__smakebuf_r+0xc>
 801074c:	4b0d      	ldr	r3, [pc, #52]	; (8010784 <__smakebuf_r+0x7c>)
 801074e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010750:	89a3      	ldrh	r3, [r4, #12]
 8010752:	6020      	str	r0, [r4, #0]
 8010754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010758:	81a3      	strh	r3, [r4, #12]
 801075a:	9b00      	ldr	r3, [sp, #0]
 801075c:	6163      	str	r3, [r4, #20]
 801075e:	9b01      	ldr	r3, [sp, #4]
 8010760:	6120      	str	r0, [r4, #16]
 8010762:	b15b      	cbz	r3, 801077c <__smakebuf_r+0x74>
 8010764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010768:	4630      	mov	r0, r6
 801076a:	f001 f815 	bl	8011798 <_isatty_r>
 801076e:	b128      	cbz	r0, 801077c <__smakebuf_r+0x74>
 8010770:	89a3      	ldrh	r3, [r4, #12]
 8010772:	f023 0303 	bic.w	r3, r3, #3
 8010776:	f043 0301 	orr.w	r3, r3, #1
 801077a:	81a3      	strh	r3, [r4, #12]
 801077c:	89a0      	ldrh	r0, [r4, #12]
 801077e:	4305      	orrs	r5, r0
 8010780:	81a5      	strh	r5, [r4, #12]
 8010782:	e7cd      	b.n	8010720 <__smakebuf_r+0x18>
 8010784:	0800fe0d 	.word	0x0800fe0d

08010788 <__ascii_mbtowc>:
 8010788:	b082      	sub	sp, #8
 801078a:	b901      	cbnz	r1, 801078e <__ascii_mbtowc+0x6>
 801078c:	a901      	add	r1, sp, #4
 801078e:	b142      	cbz	r2, 80107a2 <__ascii_mbtowc+0x1a>
 8010790:	b14b      	cbz	r3, 80107a6 <__ascii_mbtowc+0x1e>
 8010792:	7813      	ldrb	r3, [r2, #0]
 8010794:	600b      	str	r3, [r1, #0]
 8010796:	7812      	ldrb	r2, [r2, #0]
 8010798:	1e10      	subs	r0, r2, #0
 801079a:	bf18      	it	ne
 801079c:	2001      	movne	r0, #1
 801079e:	b002      	add	sp, #8
 80107a0:	4770      	bx	lr
 80107a2:	4610      	mov	r0, r2
 80107a4:	e7fb      	b.n	801079e <__ascii_mbtowc+0x16>
 80107a6:	f06f 0001 	mvn.w	r0, #1
 80107aa:	e7f8      	b.n	801079e <__ascii_mbtowc+0x16>

080107ac <__malloc_lock>:
 80107ac:	4801      	ldr	r0, [pc, #4]	; (80107b4 <__malloc_lock+0x8>)
 80107ae:	f7ff bf72 	b.w	8010696 <__retarget_lock_acquire_recursive>
 80107b2:	bf00      	nop
 80107b4:	20001a7c 	.word	0x20001a7c

080107b8 <__malloc_unlock>:
 80107b8:	4801      	ldr	r0, [pc, #4]	; (80107c0 <__malloc_unlock+0x8>)
 80107ba:	f7ff bf6d 	b.w	8010698 <__retarget_lock_release_recursive>
 80107be:	bf00      	nop
 80107c0:	20001a7c 	.word	0x20001a7c

080107c4 <_Balloc>:
 80107c4:	b570      	push	{r4, r5, r6, lr}
 80107c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80107c8:	4604      	mov	r4, r0
 80107ca:	460d      	mov	r5, r1
 80107cc:	b976      	cbnz	r6, 80107ec <_Balloc+0x28>
 80107ce:	2010      	movs	r0, #16
 80107d0:	f7fc fc0e 	bl	800cff0 <malloc>
 80107d4:	4602      	mov	r2, r0
 80107d6:	6260      	str	r0, [r4, #36]	; 0x24
 80107d8:	b920      	cbnz	r0, 80107e4 <_Balloc+0x20>
 80107da:	4b18      	ldr	r3, [pc, #96]	; (801083c <_Balloc+0x78>)
 80107dc:	4818      	ldr	r0, [pc, #96]	; (8010840 <_Balloc+0x7c>)
 80107de:	2166      	movs	r1, #102	; 0x66
 80107e0:	f000 ff98 	bl	8011714 <__assert_func>
 80107e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80107e8:	6006      	str	r6, [r0, #0]
 80107ea:	60c6      	str	r6, [r0, #12]
 80107ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80107ee:	68f3      	ldr	r3, [r6, #12]
 80107f0:	b183      	cbz	r3, 8010814 <_Balloc+0x50>
 80107f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107f4:	68db      	ldr	r3, [r3, #12]
 80107f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80107fa:	b9b8      	cbnz	r0, 801082c <_Balloc+0x68>
 80107fc:	2101      	movs	r1, #1
 80107fe:	fa01 f605 	lsl.w	r6, r1, r5
 8010802:	1d72      	adds	r2, r6, #5
 8010804:	0092      	lsls	r2, r2, #2
 8010806:	4620      	mov	r0, r4
 8010808:	f000 fc97 	bl	801113a <_calloc_r>
 801080c:	b160      	cbz	r0, 8010828 <_Balloc+0x64>
 801080e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010812:	e00e      	b.n	8010832 <_Balloc+0x6e>
 8010814:	2221      	movs	r2, #33	; 0x21
 8010816:	2104      	movs	r1, #4
 8010818:	4620      	mov	r0, r4
 801081a:	f000 fc8e 	bl	801113a <_calloc_r>
 801081e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010820:	60f0      	str	r0, [r6, #12]
 8010822:	68db      	ldr	r3, [r3, #12]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d1e4      	bne.n	80107f2 <_Balloc+0x2e>
 8010828:	2000      	movs	r0, #0
 801082a:	bd70      	pop	{r4, r5, r6, pc}
 801082c:	6802      	ldr	r2, [r0, #0]
 801082e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010832:	2300      	movs	r3, #0
 8010834:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010838:	e7f7      	b.n	801082a <_Balloc+0x66>
 801083a:	bf00      	nop
 801083c:	08012d45 	.word	0x08012d45
 8010840:	08012eac 	.word	0x08012eac

08010844 <_Bfree>:
 8010844:	b570      	push	{r4, r5, r6, lr}
 8010846:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010848:	4605      	mov	r5, r0
 801084a:	460c      	mov	r4, r1
 801084c:	b976      	cbnz	r6, 801086c <_Bfree+0x28>
 801084e:	2010      	movs	r0, #16
 8010850:	f7fc fbce 	bl	800cff0 <malloc>
 8010854:	4602      	mov	r2, r0
 8010856:	6268      	str	r0, [r5, #36]	; 0x24
 8010858:	b920      	cbnz	r0, 8010864 <_Bfree+0x20>
 801085a:	4b09      	ldr	r3, [pc, #36]	; (8010880 <_Bfree+0x3c>)
 801085c:	4809      	ldr	r0, [pc, #36]	; (8010884 <_Bfree+0x40>)
 801085e:	218a      	movs	r1, #138	; 0x8a
 8010860:	f000 ff58 	bl	8011714 <__assert_func>
 8010864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010868:	6006      	str	r6, [r0, #0]
 801086a:	60c6      	str	r6, [r0, #12]
 801086c:	b13c      	cbz	r4, 801087e <_Bfree+0x3a>
 801086e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010870:	6862      	ldr	r2, [r4, #4]
 8010872:	68db      	ldr	r3, [r3, #12]
 8010874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010878:	6021      	str	r1, [r4, #0]
 801087a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801087e:	bd70      	pop	{r4, r5, r6, pc}
 8010880:	08012d45 	.word	0x08012d45
 8010884:	08012eac 	.word	0x08012eac

08010888 <__multadd>:
 8010888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801088c:	690e      	ldr	r6, [r1, #16]
 801088e:	4607      	mov	r7, r0
 8010890:	4698      	mov	r8, r3
 8010892:	460c      	mov	r4, r1
 8010894:	f101 0014 	add.w	r0, r1, #20
 8010898:	2300      	movs	r3, #0
 801089a:	6805      	ldr	r5, [r0, #0]
 801089c:	b2a9      	uxth	r1, r5
 801089e:	fb02 8101 	mla	r1, r2, r1, r8
 80108a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80108a6:	0c2d      	lsrs	r5, r5, #16
 80108a8:	fb02 c505 	mla	r5, r2, r5, ip
 80108ac:	b289      	uxth	r1, r1
 80108ae:	3301      	adds	r3, #1
 80108b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80108b4:	429e      	cmp	r6, r3
 80108b6:	f840 1b04 	str.w	r1, [r0], #4
 80108ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80108be:	dcec      	bgt.n	801089a <__multadd+0x12>
 80108c0:	f1b8 0f00 	cmp.w	r8, #0
 80108c4:	d022      	beq.n	801090c <__multadd+0x84>
 80108c6:	68a3      	ldr	r3, [r4, #8]
 80108c8:	42b3      	cmp	r3, r6
 80108ca:	dc19      	bgt.n	8010900 <__multadd+0x78>
 80108cc:	6861      	ldr	r1, [r4, #4]
 80108ce:	4638      	mov	r0, r7
 80108d0:	3101      	adds	r1, #1
 80108d2:	f7ff ff77 	bl	80107c4 <_Balloc>
 80108d6:	4605      	mov	r5, r0
 80108d8:	b928      	cbnz	r0, 80108e6 <__multadd+0x5e>
 80108da:	4602      	mov	r2, r0
 80108dc:	4b0d      	ldr	r3, [pc, #52]	; (8010914 <__multadd+0x8c>)
 80108de:	480e      	ldr	r0, [pc, #56]	; (8010918 <__multadd+0x90>)
 80108e0:	21b5      	movs	r1, #181	; 0xb5
 80108e2:	f000 ff17 	bl	8011714 <__assert_func>
 80108e6:	6922      	ldr	r2, [r4, #16]
 80108e8:	3202      	adds	r2, #2
 80108ea:	f104 010c 	add.w	r1, r4, #12
 80108ee:	0092      	lsls	r2, r2, #2
 80108f0:	300c      	adds	r0, #12
 80108f2:	f7fc fb85 	bl	800d000 <memcpy>
 80108f6:	4621      	mov	r1, r4
 80108f8:	4638      	mov	r0, r7
 80108fa:	f7ff ffa3 	bl	8010844 <_Bfree>
 80108fe:	462c      	mov	r4, r5
 8010900:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010904:	3601      	adds	r6, #1
 8010906:	f8c3 8014 	str.w	r8, [r3, #20]
 801090a:	6126      	str	r6, [r4, #16]
 801090c:	4620      	mov	r0, r4
 801090e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010912:	bf00      	nop
 8010914:	08012dbb 	.word	0x08012dbb
 8010918:	08012eac 	.word	0x08012eac

0801091c <__s2b>:
 801091c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010920:	460c      	mov	r4, r1
 8010922:	4615      	mov	r5, r2
 8010924:	461f      	mov	r7, r3
 8010926:	2209      	movs	r2, #9
 8010928:	3308      	adds	r3, #8
 801092a:	4606      	mov	r6, r0
 801092c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010930:	2100      	movs	r1, #0
 8010932:	2201      	movs	r2, #1
 8010934:	429a      	cmp	r2, r3
 8010936:	db09      	blt.n	801094c <__s2b+0x30>
 8010938:	4630      	mov	r0, r6
 801093a:	f7ff ff43 	bl	80107c4 <_Balloc>
 801093e:	b940      	cbnz	r0, 8010952 <__s2b+0x36>
 8010940:	4602      	mov	r2, r0
 8010942:	4b19      	ldr	r3, [pc, #100]	; (80109a8 <__s2b+0x8c>)
 8010944:	4819      	ldr	r0, [pc, #100]	; (80109ac <__s2b+0x90>)
 8010946:	21ce      	movs	r1, #206	; 0xce
 8010948:	f000 fee4 	bl	8011714 <__assert_func>
 801094c:	0052      	lsls	r2, r2, #1
 801094e:	3101      	adds	r1, #1
 8010950:	e7f0      	b.n	8010934 <__s2b+0x18>
 8010952:	9b08      	ldr	r3, [sp, #32]
 8010954:	6143      	str	r3, [r0, #20]
 8010956:	2d09      	cmp	r5, #9
 8010958:	f04f 0301 	mov.w	r3, #1
 801095c:	6103      	str	r3, [r0, #16]
 801095e:	dd16      	ble.n	801098e <__s2b+0x72>
 8010960:	f104 0909 	add.w	r9, r4, #9
 8010964:	46c8      	mov	r8, r9
 8010966:	442c      	add	r4, r5
 8010968:	f818 3b01 	ldrb.w	r3, [r8], #1
 801096c:	4601      	mov	r1, r0
 801096e:	3b30      	subs	r3, #48	; 0x30
 8010970:	220a      	movs	r2, #10
 8010972:	4630      	mov	r0, r6
 8010974:	f7ff ff88 	bl	8010888 <__multadd>
 8010978:	45a0      	cmp	r8, r4
 801097a:	d1f5      	bne.n	8010968 <__s2b+0x4c>
 801097c:	f1a5 0408 	sub.w	r4, r5, #8
 8010980:	444c      	add	r4, r9
 8010982:	1b2d      	subs	r5, r5, r4
 8010984:	1963      	adds	r3, r4, r5
 8010986:	42bb      	cmp	r3, r7
 8010988:	db04      	blt.n	8010994 <__s2b+0x78>
 801098a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801098e:	340a      	adds	r4, #10
 8010990:	2509      	movs	r5, #9
 8010992:	e7f6      	b.n	8010982 <__s2b+0x66>
 8010994:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010998:	4601      	mov	r1, r0
 801099a:	3b30      	subs	r3, #48	; 0x30
 801099c:	220a      	movs	r2, #10
 801099e:	4630      	mov	r0, r6
 80109a0:	f7ff ff72 	bl	8010888 <__multadd>
 80109a4:	e7ee      	b.n	8010984 <__s2b+0x68>
 80109a6:	bf00      	nop
 80109a8:	08012dbb 	.word	0x08012dbb
 80109ac:	08012eac 	.word	0x08012eac

080109b0 <__hi0bits>:
 80109b0:	0c03      	lsrs	r3, r0, #16
 80109b2:	041b      	lsls	r3, r3, #16
 80109b4:	b9d3      	cbnz	r3, 80109ec <__hi0bits+0x3c>
 80109b6:	0400      	lsls	r0, r0, #16
 80109b8:	2310      	movs	r3, #16
 80109ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80109be:	bf04      	itt	eq
 80109c0:	0200      	lsleq	r0, r0, #8
 80109c2:	3308      	addeq	r3, #8
 80109c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80109c8:	bf04      	itt	eq
 80109ca:	0100      	lsleq	r0, r0, #4
 80109cc:	3304      	addeq	r3, #4
 80109ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80109d2:	bf04      	itt	eq
 80109d4:	0080      	lsleq	r0, r0, #2
 80109d6:	3302      	addeq	r3, #2
 80109d8:	2800      	cmp	r0, #0
 80109da:	db05      	blt.n	80109e8 <__hi0bits+0x38>
 80109dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80109e0:	f103 0301 	add.w	r3, r3, #1
 80109e4:	bf08      	it	eq
 80109e6:	2320      	moveq	r3, #32
 80109e8:	4618      	mov	r0, r3
 80109ea:	4770      	bx	lr
 80109ec:	2300      	movs	r3, #0
 80109ee:	e7e4      	b.n	80109ba <__hi0bits+0xa>

080109f0 <__lo0bits>:
 80109f0:	6803      	ldr	r3, [r0, #0]
 80109f2:	f013 0207 	ands.w	r2, r3, #7
 80109f6:	4601      	mov	r1, r0
 80109f8:	d00b      	beq.n	8010a12 <__lo0bits+0x22>
 80109fa:	07da      	lsls	r2, r3, #31
 80109fc:	d424      	bmi.n	8010a48 <__lo0bits+0x58>
 80109fe:	0798      	lsls	r0, r3, #30
 8010a00:	bf49      	itett	mi
 8010a02:	085b      	lsrmi	r3, r3, #1
 8010a04:	089b      	lsrpl	r3, r3, #2
 8010a06:	2001      	movmi	r0, #1
 8010a08:	600b      	strmi	r3, [r1, #0]
 8010a0a:	bf5c      	itt	pl
 8010a0c:	600b      	strpl	r3, [r1, #0]
 8010a0e:	2002      	movpl	r0, #2
 8010a10:	4770      	bx	lr
 8010a12:	b298      	uxth	r0, r3
 8010a14:	b9b0      	cbnz	r0, 8010a44 <__lo0bits+0x54>
 8010a16:	0c1b      	lsrs	r3, r3, #16
 8010a18:	2010      	movs	r0, #16
 8010a1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010a1e:	bf04      	itt	eq
 8010a20:	0a1b      	lsreq	r3, r3, #8
 8010a22:	3008      	addeq	r0, #8
 8010a24:	071a      	lsls	r2, r3, #28
 8010a26:	bf04      	itt	eq
 8010a28:	091b      	lsreq	r3, r3, #4
 8010a2a:	3004      	addeq	r0, #4
 8010a2c:	079a      	lsls	r2, r3, #30
 8010a2e:	bf04      	itt	eq
 8010a30:	089b      	lsreq	r3, r3, #2
 8010a32:	3002      	addeq	r0, #2
 8010a34:	07da      	lsls	r2, r3, #31
 8010a36:	d403      	bmi.n	8010a40 <__lo0bits+0x50>
 8010a38:	085b      	lsrs	r3, r3, #1
 8010a3a:	f100 0001 	add.w	r0, r0, #1
 8010a3e:	d005      	beq.n	8010a4c <__lo0bits+0x5c>
 8010a40:	600b      	str	r3, [r1, #0]
 8010a42:	4770      	bx	lr
 8010a44:	4610      	mov	r0, r2
 8010a46:	e7e8      	b.n	8010a1a <__lo0bits+0x2a>
 8010a48:	2000      	movs	r0, #0
 8010a4a:	4770      	bx	lr
 8010a4c:	2020      	movs	r0, #32
 8010a4e:	4770      	bx	lr

08010a50 <__i2b>:
 8010a50:	b510      	push	{r4, lr}
 8010a52:	460c      	mov	r4, r1
 8010a54:	2101      	movs	r1, #1
 8010a56:	f7ff feb5 	bl	80107c4 <_Balloc>
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	b928      	cbnz	r0, 8010a6a <__i2b+0x1a>
 8010a5e:	4b05      	ldr	r3, [pc, #20]	; (8010a74 <__i2b+0x24>)
 8010a60:	4805      	ldr	r0, [pc, #20]	; (8010a78 <__i2b+0x28>)
 8010a62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010a66:	f000 fe55 	bl	8011714 <__assert_func>
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	6144      	str	r4, [r0, #20]
 8010a6e:	6103      	str	r3, [r0, #16]
 8010a70:	bd10      	pop	{r4, pc}
 8010a72:	bf00      	nop
 8010a74:	08012dbb 	.word	0x08012dbb
 8010a78:	08012eac 	.word	0x08012eac

08010a7c <__multiply>:
 8010a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a80:	4614      	mov	r4, r2
 8010a82:	690a      	ldr	r2, [r1, #16]
 8010a84:	6923      	ldr	r3, [r4, #16]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	bfb8      	it	lt
 8010a8a:	460b      	movlt	r3, r1
 8010a8c:	460d      	mov	r5, r1
 8010a8e:	bfbc      	itt	lt
 8010a90:	4625      	movlt	r5, r4
 8010a92:	461c      	movlt	r4, r3
 8010a94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010a98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010a9c:	68ab      	ldr	r3, [r5, #8]
 8010a9e:	6869      	ldr	r1, [r5, #4]
 8010aa0:	eb0a 0709 	add.w	r7, sl, r9
 8010aa4:	42bb      	cmp	r3, r7
 8010aa6:	b085      	sub	sp, #20
 8010aa8:	bfb8      	it	lt
 8010aaa:	3101      	addlt	r1, #1
 8010aac:	f7ff fe8a 	bl	80107c4 <_Balloc>
 8010ab0:	b930      	cbnz	r0, 8010ac0 <__multiply+0x44>
 8010ab2:	4602      	mov	r2, r0
 8010ab4:	4b42      	ldr	r3, [pc, #264]	; (8010bc0 <__multiply+0x144>)
 8010ab6:	4843      	ldr	r0, [pc, #268]	; (8010bc4 <__multiply+0x148>)
 8010ab8:	f240 115d 	movw	r1, #349	; 0x15d
 8010abc:	f000 fe2a 	bl	8011714 <__assert_func>
 8010ac0:	f100 0614 	add.w	r6, r0, #20
 8010ac4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010ac8:	4633      	mov	r3, r6
 8010aca:	2200      	movs	r2, #0
 8010acc:	4543      	cmp	r3, r8
 8010ace:	d31e      	bcc.n	8010b0e <__multiply+0x92>
 8010ad0:	f105 0c14 	add.w	ip, r5, #20
 8010ad4:	f104 0314 	add.w	r3, r4, #20
 8010ad8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010adc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010ae0:	9202      	str	r2, [sp, #8]
 8010ae2:	ebac 0205 	sub.w	r2, ip, r5
 8010ae6:	3a15      	subs	r2, #21
 8010ae8:	f022 0203 	bic.w	r2, r2, #3
 8010aec:	3204      	adds	r2, #4
 8010aee:	f105 0115 	add.w	r1, r5, #21
 8010af2:	458c      	cmp	ip, r1
 8010af4:	bf38      	it	cc
 8010af6:	2204      	movcc	r2, #4
 8010af8:	9201      	str	r2, [sp, #4]
 8010afa:	9a02      	ldr	r2, [sp, #8]
 8010afc:	9303      	str	r3, [sp, #12]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d808      	bhi.n	8010b14 <__multiply+0x98>
 8010b02:	2f00      	cmp	r7, #0
 8010b04:	dc55      	bgt.n	8010bb2 <__multiply+0x136>
 8010b06:	6107      	str	r7, [r0, #16]
 8010b08:	b005      	add	sp, #20
 8010b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b0e:	f843 2b04 	str.w	r2, [r3], #4
 8010b12:	e7db      	b.n	8010acc <__multiply+0x50>
 8010b14:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b18:	f1ba 0f00 	cmp.w	sl, #0
 8010b1c:	d020      	beq.n	8010b60 <__multiply+0xe4>
 8010b1e:	f105 0e14 	add.w	lr, r5, #20
 8010b22:	46b1      	mov	r9, r6
 8010b24:	2200      	movs	r2, #0
 8010b26:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010b2a:	f8d9 b000 	ldr.w	fp, [r9]
 8010b2e:	b2a1      	uxth	r1, r4
 8010b30:	fa1f fb8b 	uxth.w	fp, fp
 8010b34:	fb0a b101 	mla	r1, sl, r1, fp
 8010b38:	4411      	add	r1, r2
 8010b3a:	f8d9 2000 	ldr.w	r2, [r9]
 8010b3e:	0c24      	lsrs	r4, r4, #16
 8010b40:	0c12      	lsrs	r2, r2, #16
 8010b42:	fb0a 2404 	mla	r4, sl, r4, r2
 8010b46:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010b4a:	b289      	uxth	r1, r1
 8010b4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010b50:	45f4      	cmp	ip, lr
 8010b52:	f849 1b04 	str.w	r1, [r9], #4
 8010b56:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010b5a:	d8e4      	bhi.n	8010b26 <__multiply+0xaa>
 8010b5c:	9901      	ldr	r1, [sp, #4]
 8010b5e:	5072      	str	r2, [r6, r1]
 8010b60:	9a03      	ldr	r2, [sp, #12]
 8010b62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010b66:	3304      	adds	r3, #4
 8010b68:	f1b9 0f00 	cmp.w	r9, #0
 8010b6c:	d01f      	beq.n	8010bae <__multiply+0x132>
 8010b6e:	6834      	ldr	r4, [r6, #0]
 8010b70:	f105 0114 	add.w	r1, r5, #20
 8010b74:	46b6      	mov	lr, r6
 8010b76:	f04f 0a00 	mov.w	sl, #0
 8010b7a:	880a      	ldrh	r2, [r1, #0]
 8010b7c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010b80:	fb09 b202 	mla	r2, r9, r2, fp
 8010b84:	4492      	add	sl, r2
 8010b86:	b2a4      	uxth	r4, r4
 8010b88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010b8c:	f84e 4b04 	str.w	r4, [lr], #4
 8010b90:	f851 4b04 	ldr.w	r4, [r1], #4
 8010b94:	f8be 2000 	ldrh.w	r2, [lr]
 8010b98:	0c24      	lsrs	r4, r4, #16
 8010b9a:	fb09 2404 	mla	r4, r9, r4, r2
 8010b9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010ba2:	458c      	cmp	ip, r1
 8010ba4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010ba8:	d8e7      	bhi.n	8010b7a <__multiply+0xfe>
 8010baa:	9a01      	ldr	r2, [sp, #4]
 8010bac:	50b4      	str	r4, [r6, r2]
 8010bae:	3604      	adds	r6, #4
 8010bb0:	e7a3      	b.n	8010afa <__multiply+0x7e>
 8010bb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d1a5      	bne.n	8010b06 <__multiply+0x8a>
 8010bba:	3f01      	subs	r7, #1
 8010bbc:	e7a1      	b.n	8010b02 <__multiply+0x86>
 8010bbe:	bf00      	nop
 8010bc0:	08012dbb 	.word	0x08012dbb
 8010bc4:	08012eac 	.word	0x08012eac

08010bc8 <__pow5mult>:
 8010bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bcc:	4615      	mov	r5, r2
 8010bce:	f012 0203 	ands.w	r2, r2, #3
 8010bd2:	4606      	mov	r6, r0
 8010bd4:	460f      	mov	r7, r1
 8010bd6:	d007      	beq.n	8010be8 <__pow5mult+0x20>
 8010bd8:	4c25      	ldr	r4, [pc, #148]	; (8010c70 <__pow5mult+0xa8>)
 8010bda:	3a01      	subs	r2, #1
 8010bdc:	2300      	movs	r3, #0
 8010bde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010be2:	f7ff fe51 	bl	8010888 <__multadd>
 8010be6:	4607      	mov	r7, r0
 8010be8:	10ad      	asrs	r5, r5, #2
 8010bea:	d03d      	beq.n	8010c68 <__pow5mult+0xa0>
 8010bec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010bee:	b97c      	cbnz	r4, 8010c10 <__pow5mult+0x48>
 8010bf0:	2010      	movs	r0, #16
 8010bf2:	f7fc f9fd 	bl	800cff0 <malloc>
 8010bf6:	4602      	mov	r2, r0
 8010bf8:	6270      	str	r0, [r6, #36]	; 0x24
 8010bfa:	b928      	cbnz	r0, 8010c08 <__pow5mult+0x40>
 8010bfc:	4b1d      	ldr	r3, [pc, #116]	; (8010c74 <__pow5mult+0xac>)
 8010bfe:	481e      	ldr	r0, [pc, #120]	; (8010c78 <__pow5mult+0xb0>)
 8010c00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010c04:	f000 fd86 	bl	8011714 <__assert_func>
 8010c08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c0c:	6004      	str	r4, [r0, #0]
 8010c0e:	60c4      	str	r4, [r0, #12]
 8010c10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010c14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c18:	b94c      	cbnz	r4, 8010c2e <__pow5mult+0x66>
 8010c1a:	f240 2171 	movw	r1, #625	; 0x271
 8010c1e:	4630      	mov	r0, r6
 8010c20:	f7ff ff16 	bl	8010a50 <__i2b>
 8010c24:	2300      	movs	r3, #0
 8010c26:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	6003      	str	r3, [r0, #0]
 8010c2e:	f04f 0900 	mov.w	r9, #0
 8010c32:	07eb      	lsls	r3, r5, #31
 8010c34:	d50a      	bpl.n	8010c4c <__pow5mult+0x84>
 8010c36:	4639      	mov	r1, r7
 8010c38:	4622      	mov	r2, r4
 8010c3a:	4630      	mov	r0, r6
 8010c3c:	f7ff ff1e 	bl	8010a7c <__multiply>
 8010c40:	4639      	mov	r1, r7
 8010c42:	4680      	mov	r8, r0
 8010c44:	4630      	mov	r0, r6
 8010c46:	f7ff fdfd 	bl	8010844 <_Bfree>
 8010c4a:	4647      	mov	r7, r8
 8010c4c:	106d      	asrs	r5, r5, #1
 8010c4e:	d00b      	beq.n	8010c68 <__pow5mult+0xa0>
 8010c50:	6820      	ldr	r0, [r4, #0]
 8010c52:	b938      	cbnz	r0, 8010c64 <__pow5mult+0x9c>
 8010c54:	4622      	mov	r2, r4
 8010c56:	4621      	mov	r1, r4
 8010c58:	4630      	mov	r0, r6
 8010c5a:	f7ff ff0f 	bl	8010a7c <__multiply>
 8010c5e:	6020      	str	r0, [r4, #0]
 8010c60:	f8c0 9000 	str.w	r9, [r0]
 8010c64:	4604      	mov	r4, r0
 8010c66:	e7e4      	b.n	8010c32 <__pow5mult+0x6a>
 8010c68:	4638      	mov	r0, r7
 8010c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c6e:	bf00      	nop
 8010c70:	08013000 	.word	0x08013000
 8010c74:	08012d45 	.word	0x08012d45
 8010c78:	08012eac 	.word	0x08012eac

08010c7c <__lshift>:
 8010c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c80:	460c      	mov	r4, r1
 8010c82:	6849      	ldr	r1, [r1, #4]
 8010c84:	6923      	ldr	r3, [r4, #16]
 8010c86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010c8a:	68a3      	ldr	r3, [r4, #8]
 8010c8c:	4607      	mov	r7, r0
 8010c8e:	4691      	mov	r9, r2
 8010c90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c94:	f108 0601 	add.w	r6, r8, #1
 8010c98:	42b3      	cmp	r3, r6
 8010c9a:	db0b      	blt.n	8010cb4 <__lshift+0x38>
 8010c9c:	4638      	mov	r0, r7
 8010c9e:	f7ff fd91 	bl	80107c4 <_Balloc>
 8010ca2:	4605      	mov	r5, r0
 8010ca4:	b948      	cbnz	r0, 8010cba <__lshift+0x3e>
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	4b28      	ldr	r3, [pc, #160]	; (8010d4c <__lshift+0xd0>)
 8010caa:	4829      	ldr	r0, [pc, #164]	; (8010d50 <__lshift+0xd4>)
 8010cac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010cb0:	f000 fd30 	bl	8011714 <__assert_func>
 8010cb4:	3101      	adds	r1, #1
 8010cb6:	005b      	lsls	r3, r3, #1
 8010cb8:	e7ee      	b.n	8010c98 <__lshift+0x1c>
 8010cba:	2300      	movs	r3, #0
 8010cbc:	f100 0114 	add.w	r1, r0, #20
 8010cc0:	f100 0210 	add.w	r2, r0, #16
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	4553      	cmp	r3, sl
 8010cc8:	db33      	blt.n	8010d32 <__lshift+0xb6>
 8010cca:	6920      	ldr	r0, [r4, #16]
 8010ccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010cd0:	f104 0314 	add.w	r3, r4, #20
 8010cd4:	f019 091f 	ands.w	r9, r9, #31
 8010cd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010cdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010ce0:	d02b      	beq.n	8010d3a <__lshift+0xbe>
 8010ce2:	f1c9 0e20 	rsb	lr, r9, #32
 8010ce6:	468a      	mov	sl, r1
 8010ce8:	2200      	movs	r2, #0
 8010cea:	6818      	ldr	r0, [r3, #0]
 8010cec:	fa00 f009 	lsl.w	r0, r0, r9
 8010cf0:	4302      	orrs	r2, r0
 8010cf2:	f84a 2b04 	str.w	r2, [sl], #4
 8010cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cfa:	459c      	cmp	ip, r3
 8010cfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d00:	d8f3      	bhi.n	8010cea <__lshift+0x6e>
 8010d02:	ebac 0304 	sub.w	r3, ip, r4
 8010d06:	3b15      	subs	r3, #21
 8010d08:	f023 0303 	bic.w	r3, r3, #3
 8010d0c:	3304      	adds	r3, #4
 8010d0e:	f104 0015 	add.w	r0, r4, #21
 8010d12:	4584      	cmp	ip, r0
 8010d14:	bf38      	it	cc
 8010d16:	2304      	movcc	r3, #4
 8010d18:	50ca      	str	r2, [r1, r3]
 8010d1a:	b10a      	cbz	r2, 8010d20 <__lshift+0xa4>
 8010d1c:	f108 0602 	add.w	r6, r8, #2
 8010d20:	3e01      	subs	r6, #1
 8010d22:	4638      	mov	r0, r7
 8010d24:	612e      	str	r6, [r5, #16]
 8010d26:	4621      	mov	r1, r4
 8010d28:	f7ff fd8c 	bl	8010844 <_Bfree>
 8010d2c:	4628      	mov	r0, r5
 8010d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d32:	f842 0f04 	str.w	r0, [r2, #4]!
 8010d36:	3301      	adds	r3, #1
 8010d38:	e7c5      	b.n	8010cc6 <__lshift+0x4a>
 8010d3a:	3904      	subs	r1, #4
 8010d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d40:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d44:	459c      	cmp	ip, r3
 8010d46:	d8f9      	bhi.n	8010d3c <__lshift+0xc0>
 8010d48:	e7ea      	b.n	8010d20 <__lshift+0xa4>
 8010d4a:	bf00      	nop
 8010d4c:	08012dbb 	.word	0x08012dbb
 8010d50:	08012eac 	.word	0x08012eac

08010d54 <__mcmp>:
 8010d54:	b530      	push	{r4, r5, lr}
 8010d56:	6902      	ldr	r2, [r0, #16]
 8010d58:	690c      	ldr	r4, [r1, #16]
 8010d5a:	1b12      	subs	r2, r2, r4
 8010d5c:	d10e      	bne.n	8010d7c <__mcmp+0x28>
 8010d5e:	f100 0314 	add.w	r3, r0, #20
 8010d62:	3114      	adds	r1, #20
 8010d64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010d68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010d6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010d70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010d74:	42a5      	cmp	r5, r4
 8010d76:	d003      	beq.n	8010d80 <__mcmp+0x2c>
 8010d78:	d305      	bcc.n	8010d86 <__mcmp+0x32>
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	4610      	mov	r0, r2
 8010d7e:	bd30      	pop	{r4, r5, pc}
 8010d80:	4283      	cmp	r3, r0
 8010d82:	d3f3      	bcc.n	8010d6c <__mcmp+0x18>
 8010d84:	e7fa      	b.n	8010d7c <__mcmp+0x28>
 8010d86:	f04f 32ff 	mov.w	r2, #4294967295
 8010d8a:	e7f7      	b.n	8010d7c <__mcmp+0x28>

08010d8c <__mdiff>:
 8010d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d90:	460c      	mov	r4, r1
 8010d92:	4606      	mov	r6, r0
 8010d94:	4611      	mov	r1, r2
 8010d96:	4620      	mov	r0, r4
 8010d98:	4617      	mov	r7, r2
 8010d9a:	f7ff ffdb 	bl	8010d54 <__mcmp>
 8010d9e:	1e05      	subs	r5, r0, #0
 8010da0:	d110      	bne.n	8010dc4 <__mdiff+0x38>
 8010da2:	4629      	mov	r1, r5
 8010da4:	4630      	mov	r0, r6
 8010da6:	f7ff fd0d 	bl	80107c4 <_Balloc>
 8010daa:	b930      	cbnz	r0, 8010dba <__mdiff+0x2e>
 8010dac:	4b39      	ldr	r3, [pc, #228]	; (8010e94 <__mdiff+0x108>)
 8010dae:	4602      	mov	r2, r0
 8010db0:	f240 2132 	movw	r1, #562	; 0x232
 8010db4:	4838      	ldr	r0, [pc, #224]	; (8010e98 <__mdiff+0x10c>)
 8010db6:	f000 fcad 	bl	8011714 <__assert_func>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dc4:	bfa4      	itt	ge
 8010dc6:	463b      	movge	r3, r7
 8010dc8:	4627      	movge	r7, r4
 8010dca:	4630      	mov	r0, r6
 8010dcc:	6879      	ldr	r1, [r7, #4]
 8010dce:	bfa6      	itte	ge
 8010dd0:	461c      	movge	r4, r3
 8010dd2:	2500      	movge	r5, #0
 8010dd4:	2501      	movlt	r5, #1
 8010dd6:	f7ff fcf5 	bl	80107c4 <_Balloc>
 8010dda:	b920      	cbnz	r0, 8010de6 <__mdiff+0x5a>
 8010ddc:	4b2d      	ldr	r3, [pc, #180]	; (8010e94 <__mdiff+0x108>)
 8010dde:	4602      	mov	r2, r0
 8010de0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010de4:	e7e6      	b.n	8010db4 <__mdiff+0x28>
 8010de6:	693e      	ldr	r6, [r7, #16]
 8010de8:	60c5      	str	r5, [r0, #12]
 8010dea:	6925      	ldr	r5, [r4, #16]
 8010dec:	f107 0114 	add.w	r1, r7, #20
 8010df0:	f104 0914 	add.w	r9, r4, #20
 8010df4:	f100 0e14 	add.w	lr, r0, #20
 8010df8:	f107 0210 	add.w	r2, r7, #16
 8010dfc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010e00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010e04:	46f2      	mov	sl, lr
 8010e06:	2700      	movs	r7, #0
 8010e08:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010e10:	fa1f f883 	uxth.w	r8, r3
 8010e14:	fa17 f78b 	uxtah	r7, r7, fp
 8010e18:	0c1b      	lsrs	r3, r3, #16
 8010e1a:	eba7 0808 	sub.w	r8, r7, r8
 8010e1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010e22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010e26:	fa1f f888 	uxth.w	r8, r8
 8010e2a:	141f      	asrs	r7, r3, #16
 8010e2c:	454d      	cmp	r5, r9
 8010e2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010e32:	f84a 3b04 	str.w	r3, [sl], #4
 8010e36:	d8e7      	bhi.n	8010e08 <__mdiff+0x7c>
 8010e38:	1b2b      	subs	r3, r5, r4
 8010e3a:	3b15      	subs	r3, #21
 8010e3c:	f023 0303 	bic.w	r3, r3, #3
 8010e40:	3304      	adds	r3, #4
 8010e42:	3415      	adds	r4, #21
 8010e44:	42a5      	cmp	r5, r4
 8010e46:	bf38      	it	cc
 8010e48:	2304      	movcc	r3, #4
 8010e4a:	4419      	add	r1, r3
 8010e4c:	4473      	add	r3, lr
 8010e4e:	469e      	mov	lr, r3
 8010e50:	460d      	mov	r5, r1
 8010e52:	4565      	cmp	r5, ip
 8010e54:	d30e      	bcc.n	8010e74 <__mdiff+0xe8>
 8010e56:	f10c 0203 	add.w	r2, ip, #3
 8010e5a:	1a52      	subs	r2, r2, r1
 8010e5c:	f022 0203 	bic.w	r2, r2, #3
 8010e60:	3903      	subs	r1, #3
 8010e62:	458c      	cmp	ip, r1
 8010e64:	bf38      	it	cc
 8010e66:	2200      	movcc	r2, #0
 8010e68:	441a      	add	r2, r3
 8010e6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010e6e:	b17b      	cbz	r3, 8010e90 <__mdiff+0x104>
 8010e70:	6106      	str	r6, [r0, #16]
 8010e72:	e7a5      	b.n	8010dc0 <__mdiff+0x34>
 8010e74:	f855 8b04 	ldr.w	r8, [r5], #4
 8010e78:	fa17 f488 	uxtah	r4, r7, r8
 8010e7c:	1422      	asrs	r2, r4, #16
 8010e7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010e82:	b2a4      	uxth	r4, r4
 8010e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010e88:	f84e 4b04 	str.w	r4, [lr], #4
 8010e8c:	1417      	asrs	r7, r2, #16
 8010e8e:	e7e0      	b.n	8010e52 <__mdiff+0xc6>
 8010e90:	3e01      	subs	r6, #1
 8010e92:	e7ea      	b.n	8010e6a <__mdiff+0xde>
 8010e94:	08012dbb 	.word	0x08012dbb
 8010e98:	08012eac 	.word	0x08012eac

08010e9c <__ulp>:
 8010e9c:	b082      	sub	sp, #8
 8010e9e:	ed8d 0b00 	vstr	d0, [sp]
 8010ea2:	9b01      	ldr	r3, [sp, #4]
 8010ea4:	4912      	ldr	r1, [pc, #72]	; (8010ef0 <__ulp+0x54>)
 8010ea6:	4019      	ands	r1, r3
 8010ea8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010eac:	2900      	cmp	r1, #0
 8010eae:	dd05      	ble.n	8010ebc <__ulp+0x20>
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	ec43 2b10 	vmov	d0, r2, r3
 8010eb8:	b002      	add	sp, #8
 8010eba:	4770      	bx	lr
 8010ebc:	4249      	negs	r1, r1
 8010ebe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010ec2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010ec6:	f04f 0200 	mov.w	r2, #0
 8010eca:	f04f 0300 	mov.w	r3, #0
 8010ece:	da04      	bge.n	8010eda <__ulp+0x3e>
 8010ed0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010ed4:	fa41 f300 	asr.w	r3, r1, r0
 8010ed8:	e7ec      	b.n	8010eb4 <__ulp+0x18>
 8010eda:	f1a0 0114 	sub.w	r1, r0, #20
 8010ede:	291e      	cmp	r1, #30
 8010ee0:	bfda      	itte	le
 8010ee2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010ee6:	fa20 f101 	lsrle.w	r1, r0, r1
 8010eea:	2101      	movgt	r1, #1
 8010eec:	460a      	mov	r2, r1
 8010eee:	e7e1      	b.n	8010eb4 <__ulp+0x18>
 8010ef0:	7ff00000 	.word	0x7ff00000

08010ef4 <__b2d>:
 8010ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ef6:	6905      	ldr	r5, [r0, #16]
 8010ef8:	f100 0714 	add.w	r7, r0, #20
 8010efc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010f00:	1f2e      	subs	r6, r5, #4
 8010f02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010f06:	4620      	mov	r0, r4
 8010f08:	f7ff fd52 	bl	80109b0 <__hi0bits>
 8010f0c:	f1c0 0320 	rsb	r3, r0, #32
 8010f10:	280a      	cmp	r0, #10
 8010f12:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010f90 <__b2d+0x9c>
 8010f16:	600b      	str	r3, [r1, #0]
 8010f18:	dc14      	bgt.n	8010f44 <__b2d+0x50>
 8010f1a:	f1c0 0e0b 	rsb	lr, r0, #11
 8010f1e:	fa24 f10e 	lsr.w	r1, r4, lr
 8010f22:	42b7      	cmp	r7, r6
 8010f24:	ea41 030c 	orr.w	r3, r1, ip
 8010f28:	bf34      	ite	cc
 8010f2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010f2e:	2100      	movcs	r1, #0
 8010f30:	3015      	adds	r0, #21
 8010f32:	fa04 f000 	lsl.w	r0, r4, r0
 8010f36:	fa21 f10e 	lsr.w	r1, r1, lr
 8010f3a:	ea40 0201 	orr.w	r2, r0, r1
 8010f3e:	ec43 2b10 	vmov	d0, r2, r3
 8010f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f44:	42b7      	cmp	r7, r6
 8010f46:	bf3a      	itte	cc
 8010f48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010f4c:	f1a5 0608 	subcc.w	r6, r5, #8
 8010f50:	2100      	movcs	r1, #0
 8010f52:	380b      	subs	r0, #11
 8010f54:	d017      	beq.n	8010f86 <__b2d+0x92>
 8010f56:	f1c0 0c20 	rsb	ip, r0, #32
 8010f5a:	fa04 f500 	lsl.w	r5, r4, r0
 8010f5e:	42be      	cmp	r6, r7
 8010f60:	fa21 f40c 	lsr.w	r4, r1, ip
 8010f64:	ea45 0504 	orr.w	r5, r5, r4
 8010f68:	bf8c      	ite	hi
 8010f6a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010f6e:	2400      	movls	r4, #0
 8010f70:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010f74:	fa01 f000 	lsl.w	r0, r1, r0
 8010f78:	fa24 f40c 	lsr.w	r4, r4, ip
 8010f7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010f80:	ea40 0204 	orr.w	r2, r0, r4
 8010f84:	e7db      	b.n	8010f3e <__b2d+0x4a>
 8010f86:	ea44 030c 	orr.w	r3, r4, ip
 8010f8a:	460a      	mov	r2, r1
 8010f8c:	e7d7      	b.n	8010f3e <__b2d+0x4a>
 8010f8e:	bf00      	nop
 8010f90:	3ff00000 	.word	0x3ff00000

08010f94 <__d2b>:
 8010f94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f98:	4689      	mov	r9, r1
 8010f9a:	2101      	movs	r1, #1
 8010f9c:	ec57 6b10 	vmov	r6, r7, d0
 8010fa0:	4690      	mov	r8, r2
 8010fa2:	f7ff fc0f 	bl	80107c4 <_Balloc>
 8010fa6:	4604      	mov	r4, r0
 8010fa8:	b930      	cbnz	r0, 8010fb8 <__d2b+0x24>
 8010faa:	4602      	mov	r2, r0
 8010fac:	4b25      	ldr	r3, [pc, #148]	; (8011044 <__d2b+0xb0>)
 8010fae:	4826      	ldr	r0, [pc, #152]	; (8011048 <__d2b+0xb4>)
 8010fb0:	f240 310a 	movw	r1, #778	; 0x30a
 8010fb4:	f000 fbae 	bl	8011714 <__assert_func>
 8010fb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010fbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010fc0:	bb35      	cbnz	r5, 8011010 <__d2b+0x7c>
 8010fc2:	2e00      	cmp	r6, #0
 8010fc4:	9301      	str	r3, [sp, #4]
 8010fc6:	d028      	beq.n	801101a <__d2b+0x86>
 8010fc8:	4668      	mov	r0, sp
 8010fca:	9600      	str	r6, [sp, #0]
 8010fcc:	f7ff fd10 	bl	80109f0 <__lo0bits>
 8010fd0:	9900      	ldr	r1, [sp, #0]
 8010fd2:	b300      	cbz	r0, 8011016 <__d2b+0x82>
 8010fd4:	9a01      	ldr	r2, [sp, #4]
 8010fd6:	f1c0 0320 	rsb	r3, r0, #32
 8010fda:	fa02 f303 	lsl.w	r3, r2, r3
 8010fde:	430b      	orrs	r3, r1
 8010fe0:	40c2      	lsrs	r2, r0
 8010fe2:	6163      	str	r3, [r4, #20]
 8010fe4:	9201      	str	r2, [sp, #4]
 8010fe6:	9b01      	ldr	r3, [sp, #4]
 8010fe8:	61a3      	str	r3, [r4, #24]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	bf14      	ite	ne
 8010fee:	2202      	movne	r2, #2
 8010ff0:	2201      	moveq	r2, #1
 8010ff2:	6122      	str	r2, [r4, #16]
 8010ff4:	b1d5      	cbz	r5, 801102c <__d2b+0x98>
 8010ff6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010ffa:	4405      	add	r5, r0
 8010ffc:	f8c9 5000 	str.w	r5, [r9]
 8011000:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011004:	f8c8 0000 	str.w	r0, [r8]
 8011008:	4620      	mov	r0, r4
 801100a:	b003      	add	sp, #12
 801100c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011014:	e7d5      	b.n	8010fc2 <__d2b+0x2e>
 8011016:	6161      	str	r1, [r4, #20]
 8011018:	e7e5      	b.n	8010fe6 <__d2b+0x52>
 801101a:	a801      	add	r0, sp, #4
 801101c:	f7ff fce8 	bl	80109f0 <__lo0bits>
 8011020:	9b01      	ldr	r3, [sp, #4]
 8011022:	6163      	str	r3, [r4, #20]
 8011024:	2201      	movs	r2, #1
 8011026:	6122      	str	r2, [r4, #16]
 8011028:	3020      	adds	r0, #32
 801102a:	e7e3      	b.n	8010ff4 <__d2b+0x60>
 801102c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011030:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011034:	f8c9 0000 	str.w	r0, [r9]
 8011038:	6918      	ldr	r0, [r3, #16]
 801103a:	f7ff fcb9 	bl	80109b0 <__hi0bits>
 801103e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011042:	e7df      	b.n	8011004 <__d2b+0x70>
 8011044:	08012dbb 	.word	0x08012dbb
 8011048:	08012eac 	.word	0x08012eac

0801104c <__ratio>:
 801104c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011050:	4688      	mov	r8, r1
 8011052:	4669      	mov	r1, sp
 8011054:	4681      	mov	r9, r0
 8011056:	f7ff ff4d 	bl	8010ef4 <__b2d>
 801105a:	a901      	add	r1, sp, #4
 801105c:	4640      	mov	r0, r8
 801105e:	ec55 4b10 	vmov	r4, r5, d0
 8011062:	f7ff ff47 	bl	8010ef4 <__b2d>
 8011066:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801106a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801106e:	eba3 0c02 	sub.w	ip, r3, r2
 8011072:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011076:	1a9b      	subs	r3, r3, r2
 8011078:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801107c:	ec51 0b10 	vmov	r0, r1, d0
 8011080:	2b00      	cmp	r3, #0
 8011082:	bfd6      	itet	le
 8011084:	460a      	movle	r2, r1
 8011086:	462a      	movgt	r2, r5
 8011088:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801108c:	468b      	mov	fp, r1
 801108e:	462f      	mov	r7, r5
 8011090:	bfd4      	ite	le
 8011092:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011096:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801109a:	4620      	mov	r0, r4
 801109c:	ee10 2a10 	vmov	r2, s0
 80110a0:	465b      	mov	r3, fp
 80110a2:	4639      	mov	r1, r7
 80110a4:	f7ef fbe2 	bl	800086c <__aeabi_ddiv>
 80110a8:	ec41 0b10 	vmov	d0, r0, r1
 80110ac:	b003      	add	sp, #12
 80110ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110b2 <__copybits>:
 80110b2:	3901      	subs	r1, #1
 80110b4:	b570      	push	{r4, r5, r6, lr}
 80110b6:	1149      	asrs	r1, r1, #5
 80110b8:	6914      	ldr	r4, [r2, #16]
 80110ba:	3101      	adds	r1, #1
 80110bc:	f102 0314 	add.w	r3, r2, #20
 80110c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80110c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80110c8:	1f05      	subs	r5, r0, #4
 80110ca:	42a3      	cmp	r3, r4
 80110cc:	d30c      	bcc.n	80110e8 <__copybits+0x36>
 80110ce:	1aa3      	subs	r3, r4, r2
 80110d0:	3b11      	subs	r3, #17
 80110d2:	f023 0303 	bic.w	r3, r3, #3
 80110d6:	3211      	adds	r2, #17
 80110d8:	42a2      	cmp	r2, r4
 80110da:	bf88      	it	hi
 80110dc:	2300      	movhi	r3, #0
 80110de:	4418      	add	r0, r3
 80110e0:	2300      	movs	r3, #0
 80110e2:	4288      	cmp	r0, r1
 80110e4:	d305      	bcc.n	80110f2 <__copybits+0x40>
 80110e6:	bd70      	pop	{r4, r5, r6, pc}
 80110e8:	f853 6b04 	ldr.w	r6, [r3], #4
 80110ec:	f845 6f04 	str.w	r6, [r5, #4]!
 80110f0:	e7eb      	b.n	80110ca <__copybits+0x18>
 80110f2:	f840 3b04 	str.w	r3, [r0], #4
 80110f6:	e7f4      	b.n	80110e2 <__copybits+0x30>

080110f8 <__any_on>:
 80110f8:	f100 0214 	add.w	r2, r0, #20
 80110fc:	6900      	ldr	r0, [r0, #16]
 80110fe:	114b      	asrs	r3, r1, #5
 8011100:	4298      	cmp	r0, r3
 8011102:	b510      	push	{r4, lr}
 8011104:	db11      	blt.n	801112a <__any_on+0x32>
 8011106:	dd0a      	ble.n	801111e <__any_on+0x26>
 8011108:	f011 011f 	ands.w	r1, r1, #31
 801110c:	d007      	beq.n	801111e <__any_on+0x26>
 801110e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011112:	fa24 f001 	lsr.w	r0, r4, r1
 8011116:	fa00 f101 	lsl.w	r1, r0, r1
 801111a:	428c      	cmp	r4, r1
 801111c:	d10b      	bne.n	8011136 <__any_on+0x3e>
 801111e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011122:	4293      	cmp	r3, r2
 8011124:	d803      	bhi.n	801112e <__any_on+0x36>
 8011126:	2000      	movs	r0, #0
 8011128:	bd10      	pop	{r4, pc}
 801112a:	4603      	mov	r3, r0
 801112c:	e7f7      	b.n	801111e <__any_on+0x26>
 801112e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011132:	2900      	cmp	r1, #0
 8011134:	d0f5      	beq.n	8011122 <__any_on+0x2a>
 8011136:	2001      	movs	r0, #1
 8011138:	e7f6      	b.n	8011128 <__any_on+0x30>

0801113a <_calloc_r>:
 801113a:	b513      	push	{r0, r1, r4, lr}
 801113c:	434a      	muls	r2, r1
 801113e:	4611      	mov	r1, r2
 8011140:	9201      	str	r2, [sp, #4]
 8011142:	f7fb ffc3 	bl	800d0cc <_malloc_r>
 8011146:	4604      	mov	r4, r0
 8011148:	b118      	cbz	r0, 8011152 <_calloc_r+0x18>
 801114a:	9a01      	ldr	r2, [sp, #4]
 801114c:	2100      	movs	r1, #0
 801114e:	f7fb ff65 	bl	800d01c <memset>
 8011152:	4620      	mov	r0, r4
 8011154:	b002      	add	sp, #8
 8011156:	bd10      	pop	{r4, pc}

08011158 <__ssputs_r>:
 8011158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801115c:	688e      	ldr	r6, [r1, #8]
 801115e:	429e      	cmp	r6, r3
 8011160:	4682      	mov	sl, r0
 8011162:	460c      	mov	r4, r1
 8011164:	4690      	mov	r8, r2
 8011166:	461f      	mov	r7, r3
 8011168:	d838      	bhi.n	80111dc <__ssputs_r+0x84>
 801116a:	898a      	ldrh	r2, [r1, #12]
 801116c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011170:	d032      	beq.n	80111d8 <__ssputs_r+0x80>
 8011172:	6825      	ldr	r5, [r4, #0]
 8011174:	6909      	ldr	r1, [r1, #16]
 8011176:	eba5 0901 	sub.w	r9, r5, r1
 801117a:	6965      	ldr	r5, [r4, #20]
 801117c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011180:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011184:	3301      	adds	r3, #1
 8011186:	444b      	add	r3, r9
 8011188:	106d      	asrs	r5, r5, #1
 801118a:	429d      	cmp	r5, r3
 801118c:	bf38      	it	cc
 801118e:	461d      	movcc	r5, r3
 8011190:	0553      	lsls	r3, r2, #21
 8011192:	d531      	bpl.n	80111f8 <__ssputs_r+0xa0>
 8011194:	4629      	mov	r1, r5
 8011196:	f7fb ff99 	bl	800d0cc <_malloc_r>
 801119a:	4606      	mov	r6, r0
 801119c:	b950      	cbnz	r0, 80111b4 <__ssputs_r+0x5c>
 801119e:	230c      	movs	r3, #12
 80111a0:	f8ca 3000 	str.w	r3, [sl]
 80111a4:	89a3      	ldrh	r3, [r4, #12]
 80111a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111aa:	81a3      	strh	r3, [r4, #12]
 80111ac:	f04f 30ff 	mov.w	r0, #4294967295
 80111b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111b4:	6921      	ldr	r1, [r4, #16]
 80111b6:	464a      	mov	r2, r9
 80111b8:	f7fb ff22 	bl	800d000 <memcpy>
 80111bc:	89a3      	ldrh	r3, [r4, #12]
 80111be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80111c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111c6:	81a3      	strh	r3, [r4, #12]
 80111c8:	6126      	str	r6, [r4, #16]
 80111ca:	6165      	str	r5, [r4, #20]
 80111cc:	444e      	add	r6, r9
 80111ce:	eba5 0509 	sub.w	r5, r5, r9
 80111d2:	6026      	str	r6, [r4, #0]
 80111d4:	60a5      	str	r5, [r4, #8]
 80111d6:	463e      	mov	r6, r7
 80111d8:	42be      	cmp	r6, r7
 80111da:	d900      	bls.n	80111de <__ssputs_r+0x86>
 80111dc:	463e      	mov	r6, r7
 80111de:	4632      	mov	r2, r6
 80111e0:	6820      	ldr	r0, [r4, #0]
 80111e2:	4641      	mov	r1, r8
 80111e4:	f000 fae8 	bl	80117b8 <memmove>
 80111e8:	68a3      	ldr	r3, [r4, #8]
 80111ea:	6822      	ldr	r2, [r4, #0]
 80111ec:	1b9b      	subs	r3, r3, r6
 80111ee:	4432      	add	r2, r6
 80111f0:	60a3      	str	r3, [r4, #8]
 80111f2:	6022      	str	r2, [r4, #0]
 80111f4:	2000      	movs	r0, #0
 80111f6:	e7db      	b.n	80111b0 <__ssputs_r+0x58>
 80111f8:	462a      	mov	r2, r5
 80111fa:	f000 faf7 	bl	80117ec <_realloc_r>
 80111fe:	4606      	mov	r6, r0
 8011200:	2800      	cmp	r0, #0
 8011202:	d1e1      	bne.n	80111c8 <__ssputs_r+0x70>
 8011204:	6921      	ldr	r1, [r4, #16]
 8011206:	4650      	mov	r0, sl
 8011208:	f7fb ff10 	bl	800d02c <_free_r>
 801120c:	e7c7      	b.n	801119e <__ssputs_r+0x46>
	...

08011210 <_svfiprintf_r>:
 8011210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011214:	4698      	mov	r8, r3
 8011216:	898b      	ldrh	r3, [r1, #12]
 8011218:	061b      	lsls	r3, r3, #24
 801121a:	b09d      	sub	sp, #116	; 0x74
 801121c:	4607      	mov	r7, r0
 801121e:	460d      	mov	r5, r1
 8011220:	4614      	mov	r4, r2
 8011222:	d50e      	bpl.n	8011242 <_svfiprintf_r+0x32>
 8011224:	690b      	ldr	r3, [r1, #16]
 8011226:	b963      	cbnz	r3, 8011242 <_svfiprintf_r+0x32>
 8011228:	2140      	movs	r1, #64	; 0x40
 801122a:	f7fb ff4f 	bl	800d0cc <_malloc_r>
 801122e:	6028      	str	r0, [r5, #0]
 8011230:	6128      	str	r0, [r5, #16]
 8011232:	b920      	cbnz	r0, 801123e <_svfiprintf_r+0x2e>
 8011234:	230c      	movs	r3, #12
 8011236:	603b      	str	r3, [r7, #0]
 8011238:	f04f 30ff 	mov.w	r0, #4294967295
 801123c:	e0d1      	b.n	80113e2 <_svfiprintf_r+0x1d2>
 801123e:	2340      	movs	r3, #64	; 0x40
 8011240:	616b      	str	r3, [r5, #20]
 8011242:	2300      	movs	r3, #0
 8011244:	9309      	str	r3, [sp, #36]	; 0x24
 8011246:	2320      	movs	r3, #32
 8011248:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801124c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011250:	2330      	movs	r3, #48	; 0x30
 8011252:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80113fc <_svfiprintf_r+0x1ec>
 8011256:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801125a:	f04f 0901 	mov.w	r9, #1
 801125e:	4623      	mov	r3, r4
 8011260:	469a      	mov	sl, r3
 8011262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011266:	b10a      	cbz	r2, 801126c <_svfiprintf_r+0x5c>
 8011268:	2a25      	cmp	r2, #37	; 0x25
 801126a:	d1f9      	bne.n	8011260 <_svfiprintf_r+0x50>
 801126c:	ebba 0b04 	subs.w	fp, sl, r4
 8011270:	d00b      	beq.n	801128a <_svfiprintf_r+0x7a>
 8011272:	465b      	mov	r3, fp
 8011274:	4622      	mov	r2, r4
 8011276:	4629      	mov	r1, r5
 8011278:	4638      	mov	r0, r7
 801127a:	f7ff ff6d 	bl	8011158 <__ssputs_r>
 801127e:	3001      	adds	r0, #1
 8011280:	f000 80aa 	beq.w	80113d8 <_svfiprintf_r+0x1c8>
 8011284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011286:	445a      	add	r2, fp
 8011288:	9209      	str	r2, [sp, #36]	; 0x24
 801128a:	f89a 3000 	ldrb.w	r3, [sl]
 801128e:	2b00      	cmp	r3, #0
 8011290:	f000 80a2 	beq.w	80113d8 <_svfiprintf_r+0x1c8>
 8011294:	2300      	movs	r3, #0
 8011296:	f04f 32ff 	mov.w	r2, #4294967295
 801129a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801129e:	f10a 0a01 	add.w	sl, sl, #1
 80112a2:	9304      	str	r3, [sp, #16]
 80112a4:	9307      	str	r3, [sp, #28]
 80112a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112aa:	931a      	str	r3, [sp, #104]	; 0x68
 80112ac:	4654      	mov	r4, sl
 80112ae:	2205      	movs	r2, #5
 80112b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112b4:	4851      	ldr	r0, [pc, #324]	; (80113fc <_svfiprintf_r+0x1ec>)
 80112b6:	f7ee ffa3 	bl	8000200 <memchr>
 80112ba:	9a04      	ldr	r2, [sp, #16]
 80112bc:	b9d8      	cbnz	r0, 80112f6 <_svfiprintf_r+0xe6>
 80112be:	06d0      	lsls	r0, r2, #27
 80112c0:	bf44      	itt	mi
 80112c2:	2320      	movmi	r3, #32
 80112c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112c8:	0711      	lsls	r1, r2, #28
 80112ca:	bf44      	itt	mi
 80112cc:	232b      	movmi	r3, #43	; 0x2b
 80112ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112d2:	f89a 3000 	ldrb.w	r3, [sl]
 80112d6:	2b2a      	cmp	r3, #42	; 0x2a
 80112d8:	d015      	beq.n	8011306 <_svfiprintf_r+0xf6>
 80112da:	9a07      	ldr	r2, [sp, #28]
 80112dc:	4654      	mov	r4, sl
 80112de:	2000      	movs	r0, #0
 80112e0:	f04f 0c0a 	mov.w	ip, #10
 80112e4:	4621      	mov	r1, r4
 80112e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112ea:	3b30      	subs	r3, #48	; 0x30
 80112ec:	2b09      	cmp	r3, #9
 80112ee:	d94e      	bls.n	801138e <_svfiprintf_r+0x17e>
 80112f0:	b1b0      	cbz	r0, 8011320 <_svfiprintf_r+0x110>
 80112f2:	9207      	str	r2, [sp, #28]
 80112f4:	e014      	b.n	8011320 <_svfiprintf_r+0x110>
 80112f6:	eba0 0308 	sub.w	r3, r0, r8
 80112fa:	fa09 f303 	lsl.w	r3, r9, r3
 80112fe:	4313      	orrs	r3, r2
 8011300:	9304      	str	r3, [sp, #16]
 8011302:	46a2      	mov	sl, r4
 8011304:	e7d2      	b.n	80112ac <_svfiprintf_r+0x9c>
 8011306:	9b03      	ldr	r3, [sp, #12]
 8011308:	1d19      	adds	r1, r3, #4
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	9103      	str	r1, [sp, #12]
 801130e:	2b00      	cmp	r3, #0
 8011310:	bfbb      	ittet	lt
 8011312:	425b      	neglt	r3, r3
 8011314:	f042 0202 	orrlt.w	r2, r2, #2
 8011318:	9307      	strge	r3, [sp, #28]
 801131a:	9307      	strlt	r3, [sp, #28]
 801131c:	bfb8      	it	lt
 801131e:	9204      	strlt	r2, [sp, #16]
 8011320:	7823      	ldrb	r3, [r4, #0]
 8011322:	2b2e      	cmp	r3, #46	; 0x2e
 8011324:	d10c      	bne.n	8011340 <_svfiprintf_r+0x130>
 8011326:	7863      	ldrb	r3, [r4, #1]
 8011328:	2b2a      	cmp	r3, #42	; 0x2a
 801132a:	d135      	bne.n	8011398 <_svfiprintf_r+0x188>
 801132c:	9b03      	ldr	r3, [sp, #12]
 801132e:	1d1a      	adds	r2, r3, #4
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	9203      	str	r2, [sp, #12]
 8011334:	2b00      	cmp	r3, #0
 8011336:	bfb8      	it	lt
 8011338:	f04f 33ff 	movlt.w	r3, #4294967295
 801133c:	3402      	adds	r4, #2
 801133e:	9305      	str	r3, [sp, #20]
 8011340:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801140c <_svfiprintf_r+0x1fc>
 8011344:	7821      	ldrb	r1, [r4, #0]
 8011346:	2203      	movs	r2, #3
 8011348:	4650      	mov	r0, sl
 801134a:	f7ee ff59 	bl	8000200 <memchr>
 801134e:	b140      	cbz	r0, 8011362 <_svfiprintf_r+0x152>
 8011350:	2340      	movs	r3, #64	; 0x40
 8011352:	eba0 000a 	sub.w	r0, r0, sl
 8011356:	fa03 f000 	lsl.w	r0, r3, r0
 801135a:	9b04      	ldr	r3, [sp, #16]
 801135c:	4303      	orrs	r3, r0
 801135e:	3401      	adds	r4, #1
 8011360:	9304      	str	r3, [sp, #16]
 8011362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011366:	4826      	ldr	r0, [pc, #152]	; (8011400 <_svfiprintf_r+0x1f0>)
 8011368:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801136c:	2206      	movs	r2, #6
 801136e:	f7ee ff47 	bl	8000200 <memchr>
 8011372:	2800      	cmp	r0, #0
 8011374:	d038      	beq.n	80113e8 <_svfiprintf_r+0x1d8>
 8011376:	4b23      	ldr	r3, [pc, #140]	; (8011404 <_svfiprintf_r+0x1f4>)
 8011378:	bb1b      	cbnz	r3, 80113c2 <_svfiprintf_r+0x1b2>
 801137a:	9b03      	ldr	r3, [sp, #12]
 801137c:	3307      	adds	r3, #7
 801137e:	f023 0307 	bic.w	r3, r3, #7
 8011382:	3308      	adds	r3, #8
 8011384:	9303      	str	r3, [sp, #12]
 8011386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011388:	4433      	add	r3, r6
 801138a:	9309      	str	r3, [sp, #36]	; 0x24
 801138c:	e767      	b.n	801125e <_svfiprintf_r+0x4e>
 801138e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011392:	460c      	mov	r4, r1
 8011394:	2001      	movs	r0, #1
 8011396:	e7a5      	b.n	80112e4 <_svfiprintf_r+0xd4>
 8011398:	2300      	movs	r3, #0
 801139a:	3401      	adds	r4, #1
 801139c:	9305      	str	r3, [sp, #20]
 801139e:	4619      	mov	r1, r3
 80113a0:	f04f 0c0a 	mov.w	ip, #10
 80113a4:	4620      	mov	r0, r4
 80113a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113aa:	3a30      	subs	r2, #48	; 0x30
 80113ac:	2a09      	cmp	r2, #9
 80113ae:	d903      	bls.n	80113b8 <_svfiprintf_r+0x1a8>
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d0c5      	beq.n	8011340 <_svfiprintf_r+0x130>
 80113b4:	9105      	str	r1, [sp, #20]
 80113b6:	e7c3      	b.n	8011340 <_svfiprintf_r+0x130>
 80113b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80113bc:	4604      	mov	r4, r0
 80113be:	2301      	movs	r3, #1
 80113c0:	e7f0      	b.n	80113a4 <_svfiprintf_r+0x194>
 80113c2:	ab03      	add	r3, sp, #12
 80113c4:	9300      	str	r3, [sp, #0]
 80113c6:	462a      	mov	r2, r5
 80113c8:	4b0f      	ldr	r3, [pc, #60]	; (8011408 <_svfiprintf_r+0x1f8>)
 80113ca:	a904      	add	r1, sp, #16
 80113cc:	4638      	mov	r0, r7
 80113ce:	f7fb ff77 	bl	800d2c0 <_printf_float>
 80113d2:	1c42      	adds	r2, r0, #1
 80113d4:	4606      	mov	r6, r0
 80113d6:	d1d6      	bne.n	8011386 <_svfiprintf_r+0x176>
 80113d8:	89ab      	ldrh	r3, [r5, #12]
 80113da:	065b      	lsls	r3, r3, #25
 80113dc:	f53f af2c 	bmi.w	8011238 <_svfiprintf_r+0x28>
 80113e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113e2:	b01d      	add	sp, #116	; 0x74
 80113e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113e8:	ab03      	add	r3, sp, #12
 80113ea:	9300      	str	r3, [sp, #0]
 80113ec:	462a      	mov	r2, r5
 80113ee:	4b06      	ldr	r3, [pc, #24]	; (8011408 <_svfiprintf_r+0x1f8>)
 80113f0:	a904      	add	r1, sp, #16
 80113f2:	4638      	mov	r0, r7
 80113f4:	f7fc fa08 	bl	800d808 <_printf_i>
 80113f8:	e7eb      	b.n	80113d2 <_svfiprintf_r+0x1c2>
 80113fa:	bf00      	nop
 80113fc:	0801300c 	.word	0x0801300c
 8011400:	08013016 	.word	0x08013016
 8011404:	0800d2c1 	.word	0x0800d2c1
 8011408:	08011159 	.word	0x08011159
 801140c:	08013012 	.word	0x08013012

08011410 <__sfputc_r>:
 8011410:	6893      	ldr	r3, [r2, #8]
 8011412:	3b01      	subs	r3, #1
 8011414:	2b00      	cmp	r3, #0
 8011416:	b410      	push	{r4}
 8011418:	6093      	str	r3, [r2, #8]
 801141a:	da08      	bge.n	801142e <__sfputc_r+0x1e>
 801141c:	6994      	ldr	r4, [r2, #24]
 801141e:	42a3      	cmp	r3, r4
 8011420:	db01      	blt.n	8011426 <__sfputc_r+0x16>
 8011422:	290a      	cmp	r1, #10
 8011424:	d103      	bne.n	801142e <__sfputc_r+0x1e>
 8011426:	f85d 4b04 	ldr.w	r4, [sp], #4
 801142a:	f7fd bcaf 	b.w	800ed8c <__swbuf_r>
 801142e:	6813      	ldr	r3, [r2, #0]
 8011430:	1c58      	adds	r0, r3, #1
 8011432:	6010      	str	r0, [r2, #0]
 8011434:	7019      	strb	r1, [r3, #0]
 8011436:	4608      	mov	r0, r1
 8011438:	f85d 4b04 	ldr.w	r4, [sp], #4
 801143c:	4770      	bx	lr

0801143e <__sfputs_r>:
 801143e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011440:	4606      	mov	r6, r0
 8011442:	460f      	mov	r7, r1
 8011444:	4614      	mov	r4, r2
 8011446:	18d5      	adds	r5, r2, r3
 8011448:	42ac      	cmp	r4, r5
 801144a:	d101      	bne.n	8011450 <__sfputs_r+0x12>
 801144c:	2000      	movs	r0, #0
 801144e:	e007      	b.n	8011460 <__sfputs_r+0x22>
 8011450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011454:	463a      	mov	r2, r7
 8011456:	4630      	mov	r0, r6
 8011458:	f7ff ffda 	bl	8011410 <__sfputc_r>
 801145c:	1c43      	adds	r3, r0, #1
 801145e:	d1f3      	bne.n	8011448 <__sfputs_r+0xa>
 8011460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011464 <_vfiprintf_r>:
 8011464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011468:	460d      	mov	r5, r1
 801146a:	b09d      	sub	sp, #116	; 0x74
 801146c:	4614      	mov	r4, r2
 801146e:	4698      	mov	r8, r3
 8011470:	4606      	mov	r6, r0
 8011472:	b118      	cbz	r0, 801147c <_vfiprintf_r+0x18>
 8011474:	6983      	ldr	r3, [r0, #24]
 8011476:	b90b      	cbnz	r3, 801147c <_vfiprintf_r+0x18>
 8011478:	f7fe fcfc 	bl	800fe74 <__sinit>
 801147c:	4b89      	ldr	r3, [pc, #548]	; (80116a4 <_vfiprintf_r+0x240>)
 801147e:	429d      	cmp	r5, r3
 8011480:	d11b      	bne.n	80114ba <_vfiprintf_r+0x56>
 8011482:	6875      	ldr	r5, [r6, #4]
 8011484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011486:	07d9      	lsls	r1, r3, #31
 8011488:	d405      	bmi.n	8011496 <_vfiprintf_r+0x32>
 801148a:	89ab      	ldrh	r3, [r5, #12]
 801148c:	059a      	lsls	r2, r3, #22
 801148e:	d402      	bmi.n	8011496 <_vfiprintf_r+0x32>
 8011490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011492:	f7ff f900 	bl	8010696 <__retarget_lock_acquire_recursive>
 8011496:	89ab      	ldrh	r3, [r5, #12]
 8011498:	071b      	lsls	r3, r3, #28
 801149a:	d501      	bpl.n	80114a0 <_vfiprintf_r+0x3c>
 801149c:	692b      	ldr	r3, [r5, #16]
 801149e:	b9eb      	cbnz	r3, 80114dc <_vfiprintf_r+0x78>
 80114a0:	4629      	mov	r1, r5
 80114a2:	4630      	mov	r0, r6
 80114a4:	f7fd fcd6 	bl	800ee54 <__swsetup_r>
 80114a8:	b1c0      	cbz	r0, 80114dc <_vfiprintf_r+0x78>
 80114aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114ac:	07dc      	lsls	r4, r3, #31
 80114ae:	d50e      	bpl.n	80114ce <_vfiprintf_r+0x6a>
 80114b0:	f04f 30ff 	mov.w	r0, #4294967295
 80114b4:	b01d      	add	sp, #116	; 0x74
 80114b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ba:	4b7b      	ldr	r3, [pc, #492]	; (80116a8 <_vfiprintf_r+0x244>)
 80114bc:	429d      	cmp	r5, r3
 80114be:	d101      	bne.n	80114c4 <_vfiprintf_r+0x60>
 80114c0:	68b5      	ldr	r5, [r6, #8]
 80114c2:	e7df      	b.n	8011484 <_vfiprintf_r+0x20>
 80114c4:	4b79      	ldr	r3, [pc, #484]	; (80116ac <_vfiprintf_r+0x248>)
 80114c6:	429d      	cmp	r5, r3
 80114c8:	bf08      	it	eq
 80114ca:	68f5      	ldreq	r5, [r6, #12]
 80114cc:	e7da      	b.n	8011484 <_vfiprintf_r+0x20>
 80114ce:	89ab      	ldrh	r3, [r5, #12]
 80114d0:	0598      	lsls	r0, r3, #22
 80114d2:	d4ed      	bmi.n	80114b0 <_vfiprintf_r+0x4c>
 80114d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114d6:	f7ff f8df 	bl	8010698 <__retarget_lock_release_recursive>
 80114da:	e7e9      	b.n	80114b0 <_vfiprintf_r+0x4c>
 80114dc:	2300      	movs	r3, #0
 80114de:	9309      	str	r3, [sp, #36]	; 0x24
 80114e0:	2320      	movs	r3, #32
 80114e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80114ea:	2330      	movs	r3, #48	; 0x30
 80114ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80116b0 <_vfiprintf_r+0x24c>
 80114f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80114f4:	f04f 0901 	mov.w	r9, #1
 80114f8:	4623      	mov	r3, r4
 80114fa:	469a      	mov	sl, r3
 80114fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011500:	b10a      	cbz	r2, 8011506 <_vfiprintf_r+0xa2>
 8011502:	2a25      	cmp	r2, #37	; 0x25
 8011504:	d1f9      	bne.n	80114fa <_vfiprintf_r+0x96>
 8011506:	ebba 0b04 	subs.w	fp, sl, r4
 801150a:	d00b      	beq.n	8011524 <_vfiprintf_r+0xc0>
 801150c:	465b      	mov	r3, fp
 801150e:	4622      	mov	r2, r4
 8011510:	4629      	mov	r1, r5
 8011512:	4630      	mov	r0, r6
 8011514:	f7ff ff93 	bl	801143e <__sfputs_r>
 8011518:	3001      	adds	r0, #1
 801151a:	f000 80aa 	beq.w	8011672 <_vfiprintf_r+0x20e>
 801151e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011520:	445a      	add	r2, fp
 8011522:	9209      	str	r2, [sp, #36]	; 0x24
 8011524:	f89a 3000 	ldrb.w	r3, [sl]
 8011528:	2b00      	cmp	r3, #0
 801152a:	f000 80a2 	beq.w	8011672 <_vfiprintf_r+0x20e>
 801152e:	2300      	movs	r3, #0
 8011530:	f04f 32ff 	mov.w	r2, #4294967295
 8011534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011538:	f10a 0a01 	add.w	sl, sl, #1
 801153c:	9304      	str	r3, [sp, #16]
 801153e:	9307      	str	r3, [sp, #28]
 8011540:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011544:	931a      	str	r3, [sp, #104]	; 0x68
 8011546:	4654      	mov	r4, sl
 8011548:	2205      	movs	r2, #5
 801154a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801154e:	4858      	ldr	r0, [pc, #352]	; (80116b0 <_vfiprintf_r+0x24c>)
 8011550:	f7ee fe56 	bl	8000200 <memchr>
 8011554:	9a04      	ldr	r2, [sp, #16]
 8011556:	b9d8      	cbnz	r0, 8011590 <_vfiprintf_r+0x12c>
 8011558:	06d1      	lsls	r1, r2, #27
 801155a:	bf44      	itt	mi
 801155c:	2320      	movmi	r3, #32
 801155e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011562:	0713      	lsls	r3, r2, #28
 8011564:	bf44      	itt	mi
 8011566:	232b      	movmi	r3, #43	; 0x2b
 8011568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801156c:	f89a 3000 	ldrb.w	r3, [sl]
 8011570:	2b2a      	cmp	r3, #42	; 0x2a
 8011572:	d015      	beq.n	80115a0 <_vfiprintf_r+0x13c>
 8011574:	9a07      	ldr	r2, [sp, #28]
 8011576:	4654      	mov	r4, sl
 8011578:	2000      	movs	r0, #0
 801157a:	f04f 0c0a 	mov.w	ip, #10
 801157e:	4621      	mov	r1, r4
 8011580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011584:	3b30      	subs	r3, #48	; 0x30
 8011586:	2b09      	cmp	r3, #9
 8011588:	d94e      	bls.n	8011628 <_vfiprintf_r+0x1c4>
 801158a:	b1b0      	cbz	r0, 80115ba <_vfiprintf_r+0x156>
 801158c:	9207      	str	r2, [sp, #28]
 801158e:	e014      	b.n	80115ba <_vfiprintf_r+0x156>
 8011590:	eba0 0308 	sub.w	r3, r0, r8
 8011594:	fa09 f303 	lsl.w	r3, r9, r3
 8011598:	4313      	orrs	r3, r2
 801159a:	9304      	str	r3, [sp, #16]
 801159c:	46a2      	mov	sl, r4
 801159e:	e7d2      	b.n	8011546 <_vfiprintf_r+0xe2>
 80115a0:	9b03      	ldr	r3, [sp, #12]
 80115a2:	1d19      	adds	r1, r3, #4
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	9103      	str	r1, [sp, #12]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	bfbb      	ittet	lt
 80115ac:	425b      	neglt	r3, r3
 80115ae:	f042 0202 	orrlt.w	r2, r2, #2
 80115b2:	9307      	strge	r3, [sp, #28]
 80115b4:	9307      	strlt	r3, [sp, #28]
 80115b6:	bfb8      	it	lt
 80115b8:	9204      	strlt	r2, [sp, #16]
 80115ba:	7823      	ldrb	r3, [r4, #0]
 80115bc:	2b2e      	cmp	r3, #46	; 0x2e
 80115be:	d10c      	bne.n	80115da <_vfiprintf_r+0x176>
 80115c0:	7863      	ldrb	r3, [r4, #1]
 80115c2:	2b2a      	cmp	r3, #42	; 0x2a
 80115c4:	d135      	bne.n	8011632 <_vfiprintf_r+0x1ce>
 80115c6:	9b03      	ldr	r3, [sp, #12]
 80115c8:	1d1a      	adds	r2, r3, #4
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	9203      	str	r2, [sp, #12]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	bfb8      	it	lt
 80115d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80115d6:	3402      	adds	r4, #2
 80115d8:	9305      	str	r3, [sp, #20]
 80115da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80116c0 <_vfiprintf_r+0x25c>
 80115de:	7821      	ldrb	r1, [r4, #0]
 80115e0:	2203      	movs	r2, #3
 80115e2:	4650      	mov	r0, sl
 80115e4:	f7ee fe0c 	bl	8000200 <memchr>
 80115e8:	b140      	cbz	r0, 80115fc <_vfiprintf_r+0x198>
 80115ea:	2340      	movs	r3, #64	; 0x40
 80115ec:	eba0 000a 	sub.w	r0, r0, sl
 80115f0:	fa03 f000 	lsl.w	r0, r3, r0
 80115f4:	9b04      	ldr	r3, [sp, #16]
 80115f6:	4303      	orrs	r3, r0
 80115f8:	3401      	adds	r4, #1
 80115fa:	9304      	str	r3, [sp, #16]
 80115fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011600:	482c      	ldr	r0, [pc, #176]	; (80116b4 <_vfiprintf_r+0x250>)
 8011602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011606:	2206      	movs	r2, #6
 8011608:	f7ee fdfa 	bl	8000200 <memchr>
 801160c:	2800      	cmp	r0, #0
 801160e:	d03f      	beq.n	8011690 <_vfiprintf_r+0x22c>
 8011610:	4b29      	ldr	r3, [pc, #164]	; (80116b8 <_vfiprintf_r+0x254>)
 8011612:	bb1b      	cbnz	r3, 801165c <_vfiprintf_r+0x1f8>
 8011614:	9b03      	ldr	r3, [sp, #12]
 8011616:	3307      	adds	r3, #7
 8011618:	f023 0307 	bic.w	r3, r3, #7
 801161c:	3308      	adds	r3, #8
 801161e:	9303      	str	r3, [sp, #12]
 8011620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011622:	443b      	add	r3, r7
 8011624:	9309      	str	r3, [sp, #36]	; 0x24
 8011626:	e767      	b.n	80114f8 <_vfiprintf_r+0x94>
 8011628:	fb0c 3202 	mla	r2, ip, r2, r3
 801162c:	460c      	mov	r4, r1
 801162e:	2001      	movs	r0, #1
 8011630:	e7a5      	b.n	801157e <_vfiprintf_r+0x11a>
 8011632:	2300      	movs	r3, #0
 8011634:	3401      	adds	r4, #1
 8011636:	9305      	str	r3, [sp, #20]
 8011638:	4619      	mov	r1, r3
 801163a:	f04f 0c0a 	mov.w	ip, #10
 801163e:	4620      	mov	r0, r4
 8011640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011644:	3a30      	subs	r2, #48	; 0x30
 8011646:	2a09      	cmp	r2, #9
 8011648:	d903      	bls.n	8011652 <_vfiprintf_r+0x1ee>
 801164a:	2b00      	cmp	r3, #0
 801164c:	d0c5      	beq.n	80115da <_vfiprintf_r+0x176>
 801164e:	9105      	str	r1, [sp, #20]
 8011650:	e7c3      	b.n	80115da <_vfiprintf_r+0x176>
 8011652:	fb0c 2101 	mla	r1, ip, r1, r2
 8011656:	4604      	mov	r4, r0
 8011658:	2301      	movs	r3, #1
 801165a:	e7f0      	b.n	801163e <_vfiprintf_r+0x1da>
 801165c:	ab03      	add	r3, sp, #12
 801165e:	9300      	str	r3, [sp, #0]
 8011660:	462a      	mov	r2, r5
 8011662:	4b16      	ldr	r3, [pc, #88]	; (80116bc <_vfiprintf_r+0x258>)
 8011664:	a904      	add	r1, sp, #16
 8011666:	4630      	mov	r0, r6
 8011668:	f7fb fe2a 	bl	800d2c0 <_printf_float>
 801166c:	4607      	mov	r7, r0
 801166e:	1c78      	adds	r0, r7, #1
 8011670:	d1d6      	bne.n	8011620 <_vfiprintf_r+0x1bc>
 8011672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011674:	07d9      	lsls	r1, r3, #31
 8011676:	d405      	bmi.n	8011684 <_vfiprintf_r+0x220>
 8011678:	89ab      	ldrh	r3, [r5, #12]
 801167a:	059a      	lsls	r2, r3, #22
 801167c:	d402      	bmi.n	8011684 <_vfiprintf_r+0x220>
 801167e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011680:	f7ff f80a 	bl	8010698 <__retarget_lock_release_recursive>
 8011684:	89ab      	ldrh	r3, [r5, #12]
 8011686:	065b      	lsls	r3, r3, #25
 8011688:	f53f af12 	bmi.w	80114b0 <_vfiprintf_r+0x4c>
 801168c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801168e:	e711      	b.n	80114b4 <_vfiprintf_r+0x50>
 8011690:	ab03      	add	r3, sp, #12
 8011692:	9300      	str	r3, [sp, #0]
 8011694:	462a      	mov	r2, r5
 8011696:	4b09      	ldr	r3, [pc, #36]	; (80116bc <_vfiprintf_r+0x258>)
 8011698:	a904      	add	r1, sp, #16
 801169a:	4630      	mov	r0, r6
 801169c:	f7fc f8b4 	bl	800d808 <_printf_i>
 80116a0:	e7e4      	b.n	801166c <_vfiprintf_r+0x208>
 80116a2:	bf00      	nop
 80116a4:	08012dec 	.word	0x08012dec
 80116a8:	08012e0c 	.word	0x08012e0c
 80116ac:	08012dcc 	.word	0x08012dcc
 80116b0:	0801300c 	.word	0x0801300c
 80116b4:	08013016 	.word	0x08013016
 80116b8:	0800d2c1 	.word	0x0800d2c1
 80116bc:	0801143f 	.word	0x0801143f
 80116c0:	08013012 	.word	0x08013012

080116c4 <_read_r>:
 80116c4:	b538      	push	{r3, r4, r5, lr}
 80116c6:	4d07      	ldr	r5, [pc, #28]	; (80116e4 <_read_r+0x20>)
 80116c8:	4604      	mov	r4, r0
 80116ca:	4608      	mov	r0, r1
 80116cc:	4611      	mov	r1, r2
 80116ce:	2200      	movs	r2, #0
 80116d0:	602a      	str	r2, [r5, #0]
 80116d2:	461a      	mov	r2, r3
 80116d4:	f7f2 fcae 	bl	8004034 <_read>
 80116d8:	1c43      	adds	r3, r0, #1
 80116da:	d102      	bne.n	80116e2 <_read_r+0x1e>
 80116dc:	682b      	ldr	r3, [r5, #0]
 80116de:	b103      	cbz	r3, 80116e2 <_read_r+0x1e>
 80116e0:	6023      	str	r3, [r4, #0]
 80116e2:	bd38      	pop	{r3, r4, r5, pc}
 80116e4:	20001a84 	.word	0x20001a84

080116e8 <nan>:
 80116e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80116f0 <nan+0x8>
 80116ec:	4770      	bx	lr
 80116ee:	bf00      	nop
 80116f0:	00000000 	.word	0x00000000
 80116f4:	7ff80000 	.word	0x7ff80000

080116f8 <__ascii_wctomb>:
 80116f8:	b149      	cbz	r1, 801170e <__ascii_wctomb+0x16>
 80116fa:	2aff      	cmp	r2, #255	; 0xff
 80116fc:	bf85      	ittet	hi
 80116fe:	238a      	movhi	r3, #138	; 0x8a
 8011700:	6003      	strhi	r3, [r0, #0]
 8011702:	700a      	strbls	r2, [r1, #0]
 8011704:	f04f 30ff 	movhi.w	r0, #4294967295
 8011708:	bf98      	it	ls
 801170a:	2001      	movls	r0, #1
 801170c:	4770      	bx	lr
 801170e:	4608      	mov	r0, r1
 8011710:	4770      	bx	lr
	...

08011714 <__assert_func>:
 8011714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011716:	4614      	mov	r4, r2
 8011718:	461a      	mov	r2, r3
 801171a:	4b09      	ldr	r3, [pc, #36]	; (8011740 <__assert_func+0x2c>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	4605      	mov	r5, r0
 8011720:	68d8      	ldr	r0, [r3, #12]
 8011722:	b14c      	cbz	r4, 8011738 <__assert_func+0x24>
 8011724:	4b07      	ldr	r3, [pc, #28]	; (8011744 <__assert_func+0x30>)
 8011726:	9100      	str	r1, [sp, #0]
 8011728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801172c:	4906      	ldr	r1, [pc, #24]	; (8011748 <__assert_func+0x34>)
 801172e:	462b      	mov	r3, r5
 8011730:	f000 f80e 	bl	8011750 <fiprintf>
 8011734:	f000 f880 	bl	8011838 <abort>
 8011738:	4b04      	ldr	r3, [pc, #16]	; (801174c <__assert_func+0x38>)
 801173a:	461c      	mov	r4, r3
 801173c:	e7f3      	b.n	8011726 <__assert_func+0x12>
 801173e:	bf00      	nop
 8011740:	20000028 	.word	0x20000028
 8011744:	0801301d 	.word	0x0801301d
 8011748:	0801302a 	.word	0x0801302a
 801174c:	08013058 	.word	0x08013058

08011750 <fiprintf>:
 8011750:	b40e      	push	{r1, r2, r3}
 8011752:	b503      	push	{r0, r1, lr}
 8011754:	4601      	mov	r1, r0
 8011756:	ab03      	add	r3, sp, #12
 8011758:	4805      	ldr	r0, [pc, #20]	; (8011770 <fiprintf+0x20>)
 801175a:	f853 2b04 	ldr.w	r2, [r3], #4
 801175e:	6800      	ldr	r0, [r0, #0]
 8011760:	9301      	str	r3, [sp, #4]
 8011762:	f7ff fe7f 	bl	8011464 <_vfiprintf_r>
 8011766:	b002      	add	sp, #8
 8011768:	f85d eb04 	ldr.w	lr, [sp], #4
 801176c:	b003      	add	sp, #12
 801176e:	4770      	bx	lr
 8011770:	20000028 	.word	0x20000028

08011774 <_fstat_r>:
 8011774:	b538      	push	{r3, r4, r5, lr}
 8011776:	4d07      	ldr	r5, [pc, #28]	; (8011794 <_fstat_r+0x20>)
 8011778:	2300      	movs	r3, #0
 801177a:	4604      	mov	r4, r0
 801177c:	4608      	mov	r0, r1
 801177e:	4611      	mov	r1, r2
 8011780:	602b      	str	r3, [r5, #0]
 8011782:	f7f2 fc9c 	bl	80040be <_fstat>
 8011786:	1c43      	adds	r3, r0, #1
 8011788:	d102      	bne.n	8011790 <_fstat_r+0x1c>
 801178a:	682b      	ldr	r3, [r5, #0]
 801178c:	b103      	cbz	r3, 8011790 <_fstat_r+0x1c>
 801178e:	6023      	str	r3, [r4, #0]
 8011790:	bd38      	pop	{r3, r4, r5, pc}
 8011792:	bf00      	nop
 8011794:	20001a84 	.word	0x20001a84

08011798 <_isatty_r>:
 8011798:	b538      	push	{r3, r4, r5, lr}
 801179a:	4d06      	ldr	r5, [pc, #24]	; (80117b4 <_isatty_r+0x1c>)
 801179c:	2300      	movs	r3, #0
 801179e:	4604      	mov	r4, r0
 80117a0:	4608      	mov	r0, r1
 80117a2:	602b      	str	r3, [r5, #0]
 80117a4:	f7f2 fc9b 	bl	80040de <_isatty>
 80117a8:	1c43      	adds	r3, r0, #1
 80117aa:	d102      	bne.n	80117b2 <_isatty_r+0x1a>
 80117ac:	682b      	ldr	r3, [r5, #0]
 80117ae:	b103      	cbz	r3, 80117b2 <_isatty_r+0x1a>
 80117b0:	6023      	str	r3, [r4, #0]
 80117b2:	bd38      	pop	{r3, r4, r5, pc}
 80117b4:	20001a84 	.word	0x20001a84

080117b8 <memmove>:
 80117b8:	4288      	cmp	r0, r1
 80117ba:	b510      	push	{r4, lr}
 80117bc:	eb01 0402 	add.w	r4, r1, r2
 80117c0:	d902      	bls.n	80117c8 <memmove+0x10>
 80117c2:	4284      	cmp	r4, r0
 80117c4:	4623      	mov	r3, r4
 80117c6:	d807      	bhi.n	80117d8 <memmove+0x20>
 80117c8:	1e43      	subs	r3, r0, #1
 80117ca:	42a1      	cmp	r1, r4
 80117cc:	d008      	beq.n	80117e0 <memmove+0x28>
 80117ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80117d6:	e7f8      	b.n	80117ca <memmove+0x12>
 80117d8:	4402      	add	r2, r0
 80117da:	4601      	mov	r1, r0
 80117dc:	428a      	cmp	r2, r1
 80117de:	d100      	bne.n	80117e2 <memmove+0x2a>
 80117e0:	bd10      	pop	{r4, pc}
 80117e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80117ea:	e7f7      	b.n	80117dc <memmove+0x24>

080117ec <_realloc_r>:
 80117ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ee:	4607      	mov	r7, r0
 80117f0:	4614      	mov	r4, r2
 80117f2:	460e      	mov	r6, r1
 80117f4:	b921      	cbnz	r1, 8011800 <_realloc_r+0x14>
 80117f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80117fa:	4611      	mov	r1, r2
 80117fc:	f7fb bc66 	b.w	800d0cc <_malloc_r>
 8011800:	b922      	cbnz	r2, 801180c <_realloc_r+0x20>
 8011802:	f7fb fc13 	bl	800d02c <_free_r>
 8011806:	4625      	mov	r5, r4
 8011808:	4628      	mov	r0, r5
 801180a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801180c:	f000 f81b 	bl	8011846 <_malloc_usable_size_r>
 8011810:	42a0      	cmp	r0, r4
 8011812:	d20f      	bcs.n	8011834 <_realloc_r+0x48>
 8011814:	4621      	mov	r1, r4
 8011816:	4638      	mov	r0, r7
 8011818:	f7fb fc58 	bl	800d0cc <_malloc_r>
 801181c:	4605      	mov	r5, r0
 801181e:	2800      	cmp	r0, #0
 8011820:	d0f2      	beq.n	8011808 <_realloc_r+0x1c>
 8011822:	4631      	mov	r1, r6
 8011824:	4622      	mov	r2, r4
 8011826:	f7fb fbeb 	bl	800d000 <memcpy>
 801182a:	4631      	mov	r1, r6
 801182c:	4638      	mov	r0, r7
 801182e:	f7fb fbfd 	bl	800d02c <_free_r>
 8011832:	e7e9      	b.n	8011808 <_realloc_r+0x1c>
 8011834:	4635      	mov	r5, r6
 8011836:	e7e7      	b.n	8011808 <_realloc_r+0x1c>

08011838 <abort>:
 8011838:	b508      	push	{r3, lr}
 801183a:	2006      	movs	r0, #6
 801183c:	f000 f834 	bl	80118a8 <raise>
 8011840:	2001      	movs	r0, #1
 8011842:	f7f2 fbed 	bl	8004020 <_exit>

08011846 <_malloc_usable_size_r>:
 8011846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801184a:	1f18      	subs	r0, r3, #4
 801184c:	2b00      	cmp	r3, #0
 801184e:	bfbc      	itt	lt
 8011850:	580b      	ldrlt	r3, [r1, r0]
 8011852:	18c0      	addlt	r0, r0, r3
 8011854:	4770      	bx	lr

08011856 <_raise_r>:
 8011856:	291f      	cmp	r1, #31
 8011858:	b538      	push	{r3, r4, r5, lr}
 801185a:	4604      	mov	r4, r0
 801185c:	460d      	mov	r5, r1
 801185e:	d904      	bls.n	801186a <_raise_r+0x14>
 8011860:	2316      	movs	r3, #22
 8011862:	6003      	str	r3, [r0, #0]
 8011864:	f04f 30ff 	mov.w	r0, #4294967295
 8011868:	bd38      	pop	{r3, r4, r5, pc}
 801186a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801186c:	b112      	cbz	r2, 8011874 <_raise_r+0x1e>
 801186e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011872:	b94b      	cbnz	r3, 8011888 <_raise_r+0x32>
 8011874:	4620      	mov	r0, r4
 8011876:	f000 f831 	bl	80118dc <_getpid_r>
 801187a:	462a      	mov	r2, r5
 801187c:	4601      	mov	r1, r0
 801187e:	4620      	mov	r0, r4
 8011880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011884:	f000 b818 	b.w	80118b8 <_kill_r>
 8011888:	2b01      	cmp	r3, #1
 801188a:	d00a      	beq.n	80118a2 <_raise_r+0x4c>
 801188c:	1c59      	adds	r1, r3, #1
 801188e:	d103      	bne.n	8011898 <_raise_r+0x42>
 8011890:	2316      	movs	r3, #22
 8011892:	6003      	str	r3, [r0, #0]
 8011894:	2001      	movs	r0, #1
 8011896:	e7e7      	b.n	8011868 <_raise_r+0x12>
 8011898:	2400      	movs	r4, #0
 801189a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801189e:	4628      	mov	r0, r5
 80118a0:	4798      	blx	r3
 80118a2:	2000      	movs	r0, #0
 80118a4:	e7e0      	b.n	8011868 <_raise_r+0x12>
	...

080118a8 <raise>:
 80118a8:	4b02      	ldr	r3, [pc, #8]	; (80118b4 <raise+0xc>)
 80118aa:	4601      	mov	r1, r0
 80118ac:	6818      	ldr	r0, [r3, #0]
 80118ae:	f7ff bfd2 	b.w	8011856 <_raise_r>
 80118b2:	bf00      	nop
 80118b4:	20000028 	.word	0x20000028

080118b8 <_kill_r>:
 80118b8:	b538      	push	{r3, r4, r5, lr}
 80118ba:	4d07      	ldr	r5, [pc, #28]	; (80118d8 <_kill_r+0x20>)
 80118bc:	2300      	movs	r3, #0
 80118be:	4604      	mov	r4, r0
 80118c0:	4608      	mov	r0, r1
 80118c2:	4611      	mov	r1, r2
 80118c4:	602b      	str	r3, [r5, #0]
 80118c6:	f7f2 fb9b 	bl	8004000 <_kill>
 80118ca:	1c43      	adds	r3, r0, #1
 80118cc:	d102      	bne.n	80118d4 <_kill_r+0x1c>
 80118ce:	682b      	ldr	r3, [r5, #0]
 80118d0:	b103      	cbz	r3, 80118d4 <_kill_r+0x1c>
 80118d2:	6023      	str	r3, [r4, #0]
 80118d4:	bd38      	pop	{r3, r4, r5, pc}
 80118d6:	bf00      	nop
 80118d8:	20001a84 	.word	0x20001a84

080118dc <_getpid_r>:
 80118dc:	f7f2 bb88 	b.w	8003ff0 <_getpid>

080118e0 <pow>:
 80118e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118e4:	ec59 8b10 	vmov	r8, r9, d0
 80118e8:	ec57 6b11 	vmov	r6, r7, d1
 80118ec:	f000 f8a8 	bl	8011a40 <__ieee754_pow>
 80118f0:	4b4e      	ldr	r3, [pc, #312]	; (8011a2c <pow+0x14c>)
 80118f2:	f993 3000 	ldrsb.w	r3, [r3]
 80118f6:	3301      	adds	r3, #1
 80118f8:	ec55 4b10 	vmov	r4, r5, d0
 80118fc:	d015      	beq.n	801192a <pow+0x4a>
 80118fe:	4632      	mov	r2, r6
 8011900:	463b      	mov	r3, r7
 8011902:	4630      	mov	r0, r6
 8011904:	4639      	mov	r1, r7
 8011906:	f7ef f921 	bl	8000b4c <__aeabi_dcmpun>
 801190a:	b970      	cbnz	r0, 801192a <pow+0x4a>
 801190c:	4642      	mov	r2, r8
 801190e:	464b      	mov	r3, r9
 8011910:	4640      	mov	r0, r8
 8011912:	4649      	mov	r1, r9
 8011914:	f7ef f91a 	bl	8000b4c <__aeabi_dcmpun>
 8011918:	2200      	movs	r2, #0
 801191a:	2300      	movs	r3, #0
 801191c:	b148      	cbz	r0, 8011932 <pow+0x52>
 801191e:	4630      	mov	r0, r6
 8011920:	4639      	mov	r1, r7
 8011922:	f7ef f8e1 	bl	8000ae8 <__aeabi_dcmpeq>
 8011926:	2800      	cmp	r0, #0
 8011928:	d17d      	bne.n	8011a26 <pow+0x146>
 801192a:	ec45 4b10 	vmov	d0, r4, r5
 801192e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011932:	4640      	mov	r0, r8
 8011934:	4649      	mov	r1, r9
 8011936:	f7ef f8d7 	bl	8000ae8 <__aeabi_dcmpeq>
 801193a:	b1e0      	cbz	r0, 8011976 <pow+0x96>
 801193c:	2200      	movs	r2, #0
 801193e:	2300      	movs	r3, #0
 8011940:	4630      	mov	r0, r6
 8011942:	4639      	mov	r1, r7
 8011944:	f7ef f8d0 	bl	8000ae8 <__aeabi_dcmpeq>
 8011948:	2800      	cmp	r0, #0
 801194a:	d16c      	bne.n	8011a26 <pow+0x146>
 801194c:	ec47 6b10 	vmov	d0, r6, r7
 8011950:	f000 fe55 	bl	80125fe <finite>
 8011954:	2800      	cmp	r0, #0
 8011956:	d0e8      	beq.n	801192a <pow+0x4a>
 8011958:	2200      	movs	r2, #0
 801195a:	2300      	movs	r3, #0
 801195c:	4630      	mov	r0, r6
 801195e:	4639      	mov	r1, r7
 8011960:	f7ef f8cc 	bl	8000afc <__aeabi_dcmplt>
 8011964:	2800      	cmp	r0, #0
 8011966:	d0e0      	beq.n	801192a <pow+0x4a>
 8011968:	f7fb fb18 	bl	800cf9c <__errno>
 801196c:	2321      	movs	r3, #33	; 0x21
 801196e:	6003      	str	r3, [r0, #0]
 8011970:	2400      	movs	r4, #0
 8011972:	4d2f      	ldr	r5, [pc, #188]	; (8011a30 <pow+0x150>)
 8011974:	e7d9      	b.n	801192a <pow+0x4a>
 8011976:	ec45 4b10 	vmov	d0, r4, r5
 801197a:	f000 fe40 	bl	80125fe <finite>
 801197e:	bbb8      	cbnz	r0, 80119f0 <pow+0x110>
 8011980:	ec49 8b10 	vmov	d0, r8, r9
 8011984:	f000 fe3b 	bl	80125fe <finite>
 8011988:	b390      	cbz	r0, 80119f0 <pow+0x110>
 801198a:	ec47 6b10 	vmov	d0, r6, r7
 801198e:	f000 fe36 	bl	80125fe <finite>
 8011992:	b368      	cbz	r0, 80119f0 <pow+0x110>
 8011994:	4622      	mov	r2, r4
 8011996:	462b      	mov	r3, r5
 8011998:	4620      	mov	r0, r4
 801199a:	4629      	mov	r1, r5
 801199c:	f7ef f8d6 	bl	8000b4c <__aeabi_dcmpun>
 80119a0:	b160      	cbz	r0, 80119bc <pow+0xdc>
 80119a2:	f7fb fafb 	bl	800cf9c <__errno>
 80119a6:	2321      	movs	r3, #33	; 0x21
 80119a8:	6003      	str	r3, [r0, #0]
 80119aa:	2200      	movs	r2, #0
 80119ac:	2300      	movs	r3, #0
 80119ae:	4610      	mov	r0, r2
 80119b0:	4619      	mov	r1, r3
 80119b2:	f7ee ff5b 	bl	800086c <__aeabi_ddiv>
 80119b6:	4604      	mov	r4, r0
 80119b8:	460d      	mov	r5, r1
 80119ba:	e7b6      	b.n	801192a <pow+0x4a>
 80119bc:	f7fb faee 	bl	800cf9c <__errno>
 80119c0:	2322      	movs	r3, #34	; 0x22
 80119c2:	6003      	str	r3, [r0, #0]
 80119c4:	2200      	movs	r2, #0
 80119c6:	2300      	movs	r3, #0
 80119c8:	4640      	mov	r0, r8
 80119ca:	4649      	mov	r1, r9
 80119cc:	f7ef f896 	bl	8000afc <__aeabi_dcmplt>
 80119d0:	2400      	movs	r4, #0
 80119d2:	b158      	cbz	r0, 80119ec <pow+0x10c>
 80119d4:	ec47 6b10 	vmov	d0, r6, r7
 80119d8:	f000 fe1c 	bl	8012614 <rint>
 80119dc:	4632      	mov	r2, r6
 80119de:	ec51 0b10 	vmov	r0, r1, d0
 80119e2:	463b      	mov	r3, r7
 80119e4:	f7ef f880 	bl	8000ae8 <__aeabi_dcmpeq>
 80119e8:	2800      	cmp	r0, #0
 80119ea:	d0c2      	beq.n	8011972 <pow+0x92>
 80119ec:	4d11      	ldr	r5, [pc, #68]	; (8011a34 <pow+0x154>)
 80119ee:	e79c      	b.n	801192a <pow+0x4a>
 80119f0:	2200      	movs	r2, #0
 80119f2:	2300      	movs	r3, #0
 80119f4:	4620      	mov	r0, r4
 80119f6:	4629      	mov	r1, r5
 80119f8:	f7ef f876 	bl	8000ae8 <__aeabi_dcmpeq>
 80119fc:	2800      	cmp	r0, #0
 80119fe:	d094      	beq.n	801192a <pow+0x4a>
 8011a00:	ec49 8b10 	vmov	d0, r8, r9
 8011a04:	f000 fdfb 	bl	80125fe <finite>
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	d08e      	beq.n	801192a <pow+0x4a>
 8011a0c:	ec47 6b10 	vmov	d0, r6, r7
 8011a10:	f000 fdf5 	bl	80125fe <finite>
 8011a14:	2800      	cmp	r0, #0
 8011a16:	d088      	beq.n	801192a <pow+0x4a>
 8011a18:	f7fb fac0 	bl	800cf9c <__errno>
 8011a1c:	2322      	movs	r3, #34	; 0x22
 8011a1e:	6003      	str	r3, [r0, #0]
 8011a20:	2400      	movs	r4, #0
 8011a22:	2500      	movs	r5, #0
 8011a24:	e781      	b.n	801192a <pow+0x4a>
 8011a26:	4d04      	ldr	r5, [pc, #16]	; (8011a38 <pow+0x158>)
 8011a28:	2400      	movs	r4, #0
 8011a2a:	e77e      	b.n	801192a <pow+0x4a>
 8011a2c:	200001fc 	.word	0x200001fc
 8011a30:	fff00000 	.word	0xfff00000
 8011a34:	7ff00000 	.word	0x7ff00000
 8011a38:	3ff00000 	.word	0x3ff00000
 8011a3c:	00000000 	.word	0x00000000

08011a40 <__ieee754_pow>:
 8011a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a44:	ed2d 8b06 	vpush	{d8-d10}
 8011a48:	b08d      	sub	sp, #52	; 0x34
 8011a4a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011a4e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8011a52:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8011a56:	ea56 0100 	orrs.w	r1, r6, r0
 8011a5a:	ec53 2b10 	vmov	r2, r3, d0
 8011a5e:	f000 84d1 	beq.w	8012404 <__ieee754_pow+0x9c4>
 8011a62:	497f      	ldr	r1, [pc, #508]	; (8011c60 <__ieee754_pow+0x220>)
 8011a64:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011a68:	428c      	cmp	r4, r1
 8011a6a:	ee10 8a10 	vmov	r8, s0
 8011a6e:	4699      	mov	r9, r3
 8011a70:	dc09      	bgt.n	8011a86 <__ieee754_pow+0x46>
 8011a72:	d103      	bne.n	8011a7c <__ieee754_pow+0x3c>
 8011a74:	b97a      	cbnz	r2, 8011a96 <__ieee754_pow+0x56>
 8011a76:	42a6      	cmp	r6, r4
 8011a78:	dd02      	ble.n	8011a80 <__ieee754_pow+0x40>
 8011a7a:	e00c      	b.n	8011a96 <__ieee754_pow+0x56>
 8011a7c:	428e      	cmp	r6, r1
 8011a7e:	dc02      	bgt.n	8011a86 <__ieee754_pow+0x46>
 8011a80:	428e      	cmp	r6, r1
 8011a82:	d110      	bne.n	8011aa6 <__ieee754_pow+0x66>
 8011a84:	b178      	cbz	r0, 8011aa6 <__ieee754_pow+0x66>
 8011a86:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011a8a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011a8e:	ea54 0308 	orrs.w	r3, r4, r8
 8011a92:	f000 84b7 	beq.w	8012404 <__ieee754_pow+0x9c4>
 8011a96:	4873      	ldr	r0, [pc, #460]	; (8011c64 <__ieee754_pow+0x224>)
 8011a98:	b00d      	add	sp, #52	; 0x34
 8011a9a:	ecbd 8b06 	vpop	{d8-d10}
 8011a9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa2:	f7ff be21 	b.w	80116e8 <nan>
 8011aa6:	f1b9 0f00 	cmp.w	r9, #0
 8011aaa:	da36      	bge.n	8011b1a <__ieee754_pow+0xda>
 8011aac:	496e      	ldr	r1, [pc, #440]	; (8011c68 <__ieee754_pow+0x228>)
 8011aae:	428e      	cmp	r6, r1
 8011ab0:	dc51      	bgt.n	8011b56 <__ieee754_pow+0x116>
 8011ab2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8011ab6:	428e      	cmp	r6, r1
 8011ab8:	f340 84af 	ble.w	801241a <__ieee754_pow+0x9da>
 8011abc:	1531      	asrs	r1, r6, #20
 8011abe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011ac2:	2914      	cmp	r1, #20
 8011ac4:	dd0f      	ble.n	8011ae6 <__ieee754_pow+0xa6>
 8011ac6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8011aca:	fa20 fc01 	lsr.w	ip, r0, r1
 8011ace:	fa0c f101 	lsl.w	r1, ip, r1
 8011ad2:	4281      	cmp	r1, r0
 8011ad4:	f040 84a1 	bne.w	801241a <__ieee754_pow+0x9da>
 8011ad8:	f00c 0c01 	and.w	ip, ip, #1
 8011adc:	f1cc 0102 	rsb	r1, ip, #2
 8011ae0:	9100      	str	r1, [sp, #0]
 8011ae2:	b180      	cbz	r0, 8011b06 <__ieee754_pow+0xc6>
 8011ae4:	e059      	b.n	8011b9a <__ieee754_pow+0x15a>
 8011ae6:	2800      	cmp	r0, #0
 8011ae8:	d155      	bne.n	8011b96 <__ieee754_pow+0x156>
 8011aea:	f1c1 0114 	rsb	r1, r1, #20
 8011aee:	fa46 fc01 	asr.w	ip, r6, r1
 8011af2:	fa0c f101 	lsl.w	r1, ip, r1
 8011af6:	42b1      	cmp	r1, r6
 8011af8:	f040 848c 	bne.w	8012414 <__ieee754_pow+0x9d4>
 8011afc:	f00c 0c01 	and.w	ip, ip, #1
 8011b00:	f1cc 0102 	rsb	r1, ip, #2
 8011b04:	9100      	str	r1, [sp, #0]
 8011b06:	4959      	ldr	r1, [pc, #356]	; (8011c6c <__ieee754_pow+0x22c>)
 8011b08:	428e      	cmp	r6, r1
 8011b0a:	d12d      	bne.n	8011b68 <__ieee754_pow+0x128>
 8011b0c:	2f00      	cmp	r7, #0
 8011b0e:	da79      	bge.n	8011c04 <__ieee754_pow+0x1c4>
 8011b10:	4956      	ldr	r1, [pc, #344]	; (8011c6c <__ieee754_pow+0x22c>)
 8011b12:	2000      	movs	r0, #0
 8011b14:	f7ee feaa 	bl	800086c <__aeabi_ddiv>
 8011b18:	e016      	b.n	8011b48 <__ieee754_pow+0x108>
 8011b1a:	2100      	movs	r1, #0
 8011b1c:	9100      	str	r1, [sp, #0]
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	d13b      	bne.n	8011b9a <__ieee754_pow+0x15a>
 8011b22:	494f      	ldr	r1, [pc, #316]	; (8011c60 <__ieee754_pow+0x220>)
 8011b24:	428e      	cmp	r6, r1
 8011b26:	d1ee      	bne.n	8011b06 <__ieee754_pow+0xc6>
 8011b28:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011b2c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011b30:	ea53 0308 	orrs.w	r3, r3, r8
 8011b34:	f000 8466 	beq.w	8012404 <__ieee754_pow+0x9c4>
 8011b38:	4b4d      	ldr	r3, [pc, #308]	; (8011c70 <__ieee754_pow+0x230>)
 8011b3a:	429c      	cmp	r4, r3
 8011b3c:	dd0d      	ble.n	8011b5a <__ieee754_pow+0x11a>
 8011b3e:	2f00      	cmp	r7, #0
 8011b40:	f280 8464 	bge.w	801240c <__ieee754_pow+0x9cc>
 8011b44:	2000      	movs	r0, #0
 8011b46:	2100      	movs	r1, #0
 8011b48:	ec41 0b10 	vmov	d0, r0, r1
 8011b4c:	b00d      	add	sp, #52	; 0x34
 8011b4e:	ecbd 8b06 	vpop	{d8-d10}
 8011b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b56:	2102      	movs	r1, #2
 8011b58:	e7e0      	b.n	8011b1c <__ieee754_pow+0xdc>
 8011b5a:	2f00      	cmp	r7, #0
 8011b5c:	daf2      	bge.n	8011b44 <__ieee754_pow+0x104>
 8011b5e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8011b62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011b66:	e7ef      	b.n	8011b48 <__ieee754_pow+0x108>
 8011b68:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8011b6c:	d104      	bne.n	8011b78 <__ieee754_pow+0x138>
 8011b6e:	4610      	mov	r0, r2
 8011b70:	4619      	mov	r1, r3
 8011b72:	f7ee fd51 	bl	8000618 <__aeabi_dmul>
 8011b76:	e7e7      	b.n	8011b48 <__ieee754_pow+0x108>
 8011b78:	493e      	ldr	r1, [pc, #248]	; (8011c74 <__ieee754_pow+0x234>)
 8011b7a:	428f      	cmp	r7, r1
 8011b7c:	d10d      	bne.n	8011b9a <__ieee754_pow+0x15a>
 8011b7e:	f1b9 0f00 	cmp.w	r9, #0
 8011b82:	db0a      	blt.n	8011b9a <__ieee754_pow+0x15a>
 8011b84:	ec43 2b10 	vmov	d0, r2, r3
 8011b88:	b00d      	add	sp, #52	; 0x34
 8011b8a:	ecbd 8b06 	vpop	{d8-d10}
 8011b8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b92:	f000 bc77 	b.w	8012484 <__ieee754_sqrt>
 8011b96:	2100      	movs	r1, #0
 8011b98:	9100      	str	r1, [sp, #0]
 8011b9a:	ec43 2b10 	vmov	d0, r2, r3
 8011b9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011ba2:	f000 fd23 	bl	80125ec <fabs>
 8011ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011baa:	ec51 0b10 	vmov	r0, r1, d0
 8011bae:	f1b8 0f00 	cmp.w	r8, #0
 8011bb2:	d12a      	bne.n	8011c0a <__ieee754_pow+0x1ca>
 8011bb4:	b12c      	cbz	r4, 8011bc2 <__ieee754_pow+0x182>
 8011bb6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8011c6c <__ieee754_pow+0x22c>
 8011bba:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8011bbe:	45e6      	cmp	lr, ip
 8011bc0:	d123      	bne.n	8011c0a <__ieee754_pow+0x1ca>
 8011bc2:	2f00      	cmp	r7, #0
 8011bc4:	da05      	bge.n	8011bd2 <__ieee754_pow+0x192>
 8011bc6:	4602      	mov	r2, r0
 8011bc8:	460b      	mov	r3, r1
 8011bca:	2000      	movs	r0, #0
 8011bcc:	4927      	ldr	r1, [pc, #156]	; (8011c6c <__ieee754_pow+0x22c>)
 8011bce:	f7ee fe4d 	bl	800086c <__aeabi_ddiv>
 8011bd2:	f1b9 0f00 	cmp.w	r9, #0
 8011bd6:	dab7      	bge.n	8011b48 <__ieee754_pow+0x108>
 8011bd8:	9b00      	ldr	r3, [sp, #0]
 8011bda:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011bde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011be2:	4323      	orrs	r3, r4
 8011be4:	d108      	bne.n	8011bf8 <__ieee754_pow+0x1b8>
 8011be6:	4602      	mov	r2, r0
 8011be8:	460b      	mov	r3, r1
 8011bea:	4610      	mov	r0, r2
 8011bec:	4619      	mov	r1, r3
 8011bee:	f7ee fb5b 	bl	80002a8 <__aeabi_dsub>
 8011bf2:	4602      	mov	r2, r0
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	e78d      	b.n	8011b14 <__ieee754_pow+0xd4>
 8011bf8:	9b00      	ldr	r3, [sp, #0]
 8011bfa:	2b01      	cmp	r3, #1
 8011bfc:	d1a4      	bne.n	8011b48 <__ieee754_pow+0x108>
 8011bfe:	4602      	mov	r2, r0
 8011c00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c04:	4610      	mov	r0, r2
 8011c06:	4619      	mov	r1, r3
 8011c08:	e79e      	b.n	8011b48 <__ieee754_pow+0x108>
 8011c0a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8011c0e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8011c12:	950a      	str	r5, [sp, #40]	; 0x28
 8011c14:	9d00      	ldr	r5, [sp, #0]
 8011c16:	46ac      	mov	ip, r5
 8011c18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011c1a:	ea5c 0505 	orrs.w	r5, ip, r5
 8011c1e:	d0e4      	beq.n	8011bea <__ieee754_pow+0x1aa>
 8011c20:	4b15      	ldr	r3, [pc, #84]	; (8011c78 <__ieee754_pow+0x238>)
 8011c22:	429e      	cmp	r6, r3
 8011c24:	f340 80fc 	ble.w	8011e20 <__ieee754_pow+0x3e0>
 8011c28:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011c2c:	429e      	cmp	r6, r3
 8011c2e:	4b10      	ldr	r3, [pc, #64]	; (8011c70 <__ieee754_pow+0x230>)
 8011c30:	dd07      	ble.n	8011c42 <__ieee754_pow+0x202>
 8011c32:	429c      	cmp	r4, r3
 8011c34:	dc0a      	bgt.n	8011c4c <__ieee754_pow+0x20c>
 8011c36:	2f00      	cmp	r7, #0
 8011c38:	da84      	bge.n	8011b44 <__ieee754_pow+0x104>
 8011c3a:	a307      	add	r3, pc, #28	; (adr r3, 8011c58 <__ieee754_pow+0x218>)
 8011c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c40:	e795      	b.n	8011b6e <__ieee754_pow+0x12e>
 8011c42:	429c      	cmp	r4, r3
 8011c44:	dbf7      	blt.n	8011c36 <__ieee754_pow+0x1f6>
 8011c46:	4b09      	ldr	r3, [pc, #36]	; (8011c6c <__ieee754_pow+0x22c>)
 8011c48:	429c      	cmp	r4, r3
 8011c4a:	dd17      	ble.n	8011c7c <__ieee754_pow+0x23c>
 8011c4c:	2f00      	cmp	r7, #0
 8011c4e:	dcf4      	bgt.n	8011c3a <__ieee754_pow+0x1fa>
 8011c50:	e778      	b.n	8011b44 <__ieee754_pow+0x104>
 8011c52:	bf00      	nop
 8011c54:	f3af 8000 	nop.w
 8011c58:	8800759c 	.word	0x8800759c
 8011c5c:	7e37e43c 	.word	0x7e37e43c
 8011c60:	7ff00000 	.word	0x7ff00000
 8011c64:	08013058 	.word	0x08013058
 8011c68:	433fffff 	.word	0x433fffff
 8011c6c:	3ff00000 	.word	0x3ff00000
 8011c70:	3fefffff 	.word	0x3fefffff
 8011c74:	3fe00000 	.word	0x3fe00000
 8011c78:	41e00000 	.word	0x41e00000
 8011c7c:	4b64      	ldr	r3, [pc, #400]	; (8011e10 <__ieee754_pow+0x3d0>)
 8011c7e:	2200      	movs	r2, #0
 8011c80:	f7ee fb12 	bl	80002a8 <__aeabi_dsub>
 8011c84:	a356      	add	r3, pc, #344	; (adr r3, 8011de0 <__ieee754_pow+0x3a0>)
 8011c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8a:	4604      	mov	r4, r0
 8011c8c:	460d      	mov	r5, r1
 8011c8e:	f7ee fcc3 	bl	8000618 <__aeabi_dmul>
 8011c92:	a355      	add	r3, pc, #340	; (adr r3, 8011de8 <__ieee754_pow+0x3a8>)
 8011c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c98:	4606      	mov	r6, r0
 8011c9a:	460f      	mov	r7, r1
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	4629      	mov	r1, r5
 8011ca0:	f7ee fcba 	bl	8000618 <__aeabi_dmul>
 8011ca4:	4b5b      	ldr	r3, [pc, #364]	; (8011e14 <__ieee754_pow+0x3d4>)
 8011ca6:	4682      	mov	sl, r0
 8011ca8:	468b      	mov	fp, r1
 8011caa:	2200      	movs	r2, #0
 8011cac:	4620      	mov	r0, r4
 8011cae:	4629      	mov	r1, r5
 8011cb0:	f7ee fcb2 	bl	8000618 <__aeabi_dmul>
 8011cb4:	4602      	mov	r2, r0
 8011cb6:	460b      	mov	r3, r1
 8011cb8:	a14d      	add	r1, pc, #308	; (adr r1, 8011df0 <__ieee754_pow+0x3b0>)
 8011cba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cbe:	f7ee faf3 	bl	80002a8 <__aeabi_dsub>
 8011cc2:	4622      	mov	r2, r4
 8011cc4:	462b      	mov	r3, r5
 8011cc6:	f7ee fca7 	bl	8000618 <__aeabi_dmul>
 8011cca:	4602      	mov	r2, r0
 8011ccc:	460b      	mov	r3, r1
 8011cce:	2000      	movs	r0, #0
 8011cd0:	4951      	ldr	r1, [pc, #324]	; (8011e18 <__ieee754_pow+0x3d8>)
 8011cd2:	f7ee fae9 	bl	80002a8 <__aeabi_dsub>
 8011cd6:	4622      	mov	r2, r4
 8011cd8:	4680      	mov	r8, r0
 8011cda:	4689      	mov	r9, r1
 8011cdc:	462b      	mov	r3, r5
 8011cde:	4620      	mov	r0, r4
 8011ce0:	4629      	mov	r1, r5
 8011ce2:	f7ee fc99 	bl	8000618 <__aeabi_dmul>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	460b      	mov	r3, r1
 8011cea:	4640      	mov	r0, r8
 8011cec:	4649      	mov	r1, r9
 8011cee:	f7ee fc93 	bl	8000618 <__aeabi_dmul>
 8011cf2:	a341      	add	r3, pc, #260	; (adr r3, 8011df8 <__ieee754_pow+0x3b8>)
 8011cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf8:	f7ee fc8e 	bl	8000618 <__aeabi_dmul>
 8011cfc:	4602      	mov	r2, r0
 8011cfe:	460b      	mov	r3, r1
 8011d00:	4650      	mov	r0, sl
 8011d02:	4659      	mov	r1, fp
 8011d04:	f7ee fad0 	bl	80002a8 <__aeabi_dsub>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	4680      	mov	r8, r0
 8011d0e:	4689      	mov	r9, r1
 8011d10:	4630      	mov	r0, r6
 8011d12:	4639      	mov	r1, r7
 8011d14:	f7ee faca 	bl	80002ac <__adddf3>
 8011d18:	2400      	movs	r4, #0
 8011d1a:	4632      	mov	r2, r6
 8011d1c:	463b      	mov	r3, r7
 8011d1e:	4620      	mov	r0, r4
 8011d20:	460d      	mov	r5, r1
 8011d22:	f7ee fac1 	bl	80002a8 <__aeabi_dsub>
 8011d26:	4602      	mov	r2, r0
 8011d28:	460b      	mov	r3, r1
 8011d2a:	4640      	mov	r0, r8
 8011d2c:	4649      	mov	r1, r9
 8011d2e:	f7ee fabb 	bl	80002a8 <__aeabi_dsub>
 8011d32:	9b00      	ldr	r3, [sp, #0]
 8011d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d36:	3b01      	subs	r3, #1
 8011d38:	4313      	orrs	r3, r2
 8011d3a:	4682      	mov	sl, r0
 8011d3c:	468b      	mov	fp, r1
 8011d3e:	f040 81f1 	bne.w	8012124 <__ieee754_pow+0x6e4>
 8011d42:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011e00 <__ieee754_pow+0x3c0>
 8011d46:	eeb0 8a47 	vmov.f32	s16, s14
 8011d4a:	eef0 8a67 	vmov.f32	s17, s15
 8011d4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011d52:	2600      	movs	r6, #0
 8011d54:	4632      	mov	r2, r6
 8011d56:	463b      	mov	r3, r7
 8011d58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d5c:	f7ee faa4 	bl	80002a8 <__aeabi_dsub>
 8011d60:	4622      	mov	r2, r4
 8011d62:	462b      	mov	r3, r5
 8011d64:	f7ee fc58 	bl	8000618 <__aeabi_dmul>
 8011d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011d6c:	4680      	mov	r8, r0
 8011d6e:	4689      	mov	r9, r1
 8011d70:	4650      	mov	r0, sl
 8011d72:	4659      	mov	r1, fp
 8011d74:	f7ee fc50 	bl	8000618 <__aeabi_dmul>
 8011d78:	4602      	mov	r2, r0
 8011d7a:	460b      	mov	r3, r1
 8011d7c:	4640      	mov	r0, r8
 8011d7e:	4649      	mov	r1, r9
 8011d80:	f7ee fa94 	bl	80002ac <__adddf3>
 8011d84:	4632      	mov	r2, r6
 8011d86:	463b      	mov	r3, r7
 8011d88:	4680      	mov	r8, r0
 8011d8a:	4689      	mov	r9, r1
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	4629      	mov	r1, r5
 8011d90:	f7ee fc42 	bl	8000618 <__aeabi_dmul>
 8011d94:	460b      	mov	r3, r1
 8011d96:	4604      	mov	r4, r0
 8011d98:	460d      	mov	r5, r1
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	4649      	mov	r1, r9
 8011d9e:	4640      	mov	r0, r8
 8011da0:	f7ee fa84 	bl	80002ac <__adddf3>
 8011da4:	4b1d      	ldr	r3, [pc, #116]	; (8011e1c <__ieee754_pow+0x3dc>)
 8011da6:	4299      	cmp	r1, r3
 8011da8:	ec45 4b19 	vmov	d9, r4, r5
 8011dac:	4606      	mov	r6, r0
 8011dae:	460f      	mov	r7, r1
 8011db0:	468b      	mov	fp, r1
 8011db2:	f340 82fe 	ble.w	80123b2 <__ieee754_pow+0x972>
 8011db6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011dba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011dbe:	4303      	orrs	r3, r0
 8011dc0:	f000 81f0 	beq.w	80121a4 <__ieee754_pow+0x764>
 8011dc4:	a310      	add	r3, pc, #64	; (adr r3, 8011e08 <__ieee754_pow+0x3c8>)
 8011dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dca:	ec51 0b18 	vmov	r0, r1, d8
 8011dce:	f7ee fc23 	bl	8000618 <__aeabi_dmul>
 8011dd2:	a30d      	add	r3, pc, #52	; (adr r3, 8011e08 <__ieee754_pow+0x3c8>)
 8011dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd8:	e6cb      	b.n	8011b72 <__ieee754_pow+0x132>
 8011dda:	bf00      	nop
 8011ddc:	f3af 8000 	nop.w
 8011de0:	60000000 	.word	0x60000000
 8011de4:	3ff71547 	.word	0x3ff71547
 8011de8:	f85ddf44 	.word	0xf85ddf44
 8011dec:	3e54ae0b 	.word	0x3e54ae0b
 8011df0:	55555555 	.word	0x55555555
 8011df4:	3fd55555 	.word	0x3fd55555
 8011df8:	652b82fe 	.word	0x652b82fe
 8011dfc:	3ff71547 	.word	0x3ff71547
 8011e00:	00000000 	.word	0x00000000
 8011e04:	bff00000 	.word	0xbff00000
 8011e08:	8800759c 	.word	0x8800759c
 8011e0c:	7e37e43c 	.word	0x7e37e43c
 8011e10:	3ff00000 	.word	0x3ff00000
 8011e14:	3fd00000 	.word	0x3fd00000
 8011e18:	3fe00000 	.word	0x3fe00000
 8011e1c:	408fffff 	.word	0x408fffff
 8011e20:	4bd7      	ldr	r3, [pc, #860]	; (8012180 <__ieee754_pow+0x740>)
 8011e22:	ea03 0309 	and.w	r3, r3, r9
 8011e26:	2200      	movs	r2, #0
 8011e28:	b92b      	cbnz	r3, 8011e36 <__ieee754_pow+0x3f6>
 8011e2a:	4bd6      	ldr	r3, [pc, #856]	; (8012184 <__ieee754_pow+0x744>)
 8011e2c:	f7ee fbf4 	bl	8000618 <__aeabi_dmul>
 8011e30:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011e34:	460c      	mov	r4, r1
 8011e36:	1523      	asrs	r3, r4, #20
 8011e38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011e3c:	4413      	add	r3, r2
 8011e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8011e40:	4bd1      	ldr	r3, [pc, #836]	; (8012188 <__ieee754_pow+0x748>)
 8011e42:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011e46:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011e4a:	429c      	cmp	r4, r3
 8011e4c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011e50:	dd08      	ble.n	8011e64 <__ieee754_pow+0x424>
 8011e52:	4bce      	ldr	r3, [pc, #824]	; (801218c <__ieee754_pow+0x74c>)
 8011e54:	429c      	cmp	r4, r3
 8011e56:	f340 8163 	ble.w	8012120 <__ieee754_pow+0x6e0>
 8011e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8011e60:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011e64:	2400      	movs	r4, #0
 8011e66:	00e3      	lsls	r3, r4, #3
 8011e68:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e6a:	4bc9      	ldr	r3, [pc, #804]	; (8012190 <__ieee754_pow+0x750>)
 8011e6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011e70:	ed93 7b00 	vldr	d7, [r3]
 8011e74:	4629      	mov	r1, r5
 8011e76:	ec53 2b17 	vmov	r2, r3, d7
 8011e7a:	eeb0 8a47 	vmov.f32	s16, s14
 8011e7e:	eef0 8a67 	vmov.f32	s17, s15
 8011e82:	4682      	mov	sl, r0
 8011e84:	f7ee fa10 	bl	80002a8 <__aeabi_dsub>
 8011e88:	4652      	mov	r2, sl
 8011e8a:	4606      	mov	r6, r0
 8011e8c:	460f      	mov	r7, r1
 8011e8e:	462b      	mov	r3, r5
 8011e90:	ec51 0b18 	vmov	r0, r1, d8
 8011e94:	f7ee fa0a 	bl	80002ac <__adddf3>
 8011e98:	4602      	mov	r2, r0
 8011e9a:	460b      	mov	r3, r1
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	49bd      	ldr	r1, [pc, #756]	; (8012194 <__ieee754_pow+0x754>)
 8011ea0:	f7ee fce4 	bl	800086c <__aeabi_ddiv>
 8011ea4:	ec41 0b19 	vmov	d9, r0, r1
 8011ea8:	4602      	mov	r2, r0
 8011eaa:	460b      	mov	r3, r1
 8011eac:	4630      	mov	r0, r6
 8011eae:	4639      	mov	r1, r7
 8011eb0:	f7ee fbb2 	bl	8000618 <__aeabi_dmul>
 8011eb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011eb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011ebc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	9304      	str	r3, [sp, #16]
 8011ec4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011ec8:	46ab      	mov	fp, r5
 8011eca:	106d      	asrs	r5, r5, #1
 8011ecc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011ed0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011ed4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011ed8:	2200      	movs	r2, #0
 8011eda:	4640      	mov	r0, r8
 8011edc:	4649      	mov	r1, r9
 8011ede:	4614      	mov	r4, r2
 8011ee0:	461d      	mov	r5, r3
 8011ee2:	f7ee fb99 	bl	8000618 <__aeabi_dmul>
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	460b      	mov	r3, r1
 8011eea:	4630      	mov	r0, r6
 8011eec:	4639      	mov	r1, r7
 8011eee:	f7ee f9db 	bl	80002a8 <__aeabi_dsub>
 8011ef2:	ec53 2b18 	vmov	r2, r3, d8
 8011ef6:	4606      	mov	r6, r0
 8011ef8:	460f      	mov	r7, r1
 8011efa:	4620      	mov	r0, r4
 8011efc:	4629      	mov	r1, r5
 8011efe:	f7ee f9d3 	bl	80002a8 <__aeabi_dsub>
 8011f02:	4602      	mov	r2, r0
 8011f04:	460b      	mov	r3, r1
 8011f06:	4650      	mov	r0, sl
 8011f08:	4659      	mov	r1, fp
 8011f0a:	f7ee f9cd 	bl	80002a8 <__aeabi_dsub>
 8011f0e:	4642      	mov	r2, r8
 8011f10:	464b      	mov	r3, r9
 8011f12:	f7ee fb81 	bl	8000618 <__aeabi_dmul>
 8011f16:	4602      	mov	r2, r0
 8011f18:	460b      	mov	r3, r1
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	4639      	mov	r1, r7
 8011f1e:	f7ee f9c3 	bl	80002a8 <__aeabi_dsub>
 8011f22:	ec53 2b19 	vmov	r2, r3, d9
 8011f26:	f7ee fb77 	bl	8000618 <__aeabi_dmul>
 8011f2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011f2e:	ec41 0b18 	vmov	d8, r0, r1
 8011f32:	4610      	mov	r0, r2
 8011f34:	4619      	mov	r1, r3
 8011f36:	f7ee fb6f 	bl	8000618 <__aeabi_dmul>
 8011f3a:	a37d      	add	r3, pc, #500	; (adr r3, 8012130 <__ieee754_pow+0x6f0>)
 8011f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f40:	4604      	mov	r4, r0
 8011f42:	460d      	mov	r5, r1
 8011f44:	f7ee fb68 	bl	8000618 <__aeabi_dmul>
 8011f48:	a37b      	add	r3, pc, #492	; (adr r3, 8012138 <__ieee754_pow+0x6f8>)
 8011f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4e:	f7ee f9ad 	bl	80002ac <__adddf3>
 8011f52:	4622      	mov	r2, r4
 8011f54:	462b      	mov	r3, r5
 8011f56:	f7ee fb5f 	bl	8000618 <__aeabi_dmul>
 8011f5a:	a379      	add	r3, pc, #484	; (adr r3, 8012140 <__ieee754_pow+0x700>)
 8011f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f60:	f7ee f9a4 	bl	80002ac <__adddf3>
 8011f64:	4622      	mov	r2, r4
 8011f66:	462b      	mov	r3, r5
 8011f68:	f7ee fb56 	bl	8000618 <__aeabi_dmul>
 8011f6c:	a376      	add	r3, pc, #472	; (adr r3, 8012148 <__ieee754_pow+0x708>)
 8011f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f72:	f7ee f99b 	bl	80002ac <__adddf3>
 8011f76:	4622      	mov	r2, r4
 8011f78:	462b      	mov	r3, r5
 8011f7a:	f7ee fb4d 	bl	8000618 <__aeabi_dmul>
 8011f7e:	a374      	add	r3, pc, #464	; (adr r3, 8012150 <__ieee754_pow+0x710>)
 8011f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f84:	f7ee f992 	bl	80002ac <__adddf3>
 8011f88:	4622      	mov	r2, r4
 8011f8a:	462b      	mov	r3, r5
 8011f8c:	f7ee fb44 	bl	8000618 <__aeabi_dmul>
 8011f90:	a371      	add	r3, pc, #452	; (adr r3, 8012158 <__ieee754_pow+0x718>)
 8011f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f96:	f7ee f989 	bl	80002ac <__adddf3>
 8011f9a:	4622      	mov	r2, r4
 8011f9c:	4606      	mov	r6, r0
 8011f9e:	460f      	mov	r7, r1
 8011fa0:	462b      	mov	r3, r5
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	4629      	mov	r1, r5
 8011fa6:	f7ee fb37 	bl	8000618 <__aeabi_dmul>
 8011faa:	4602      	mov	r2, r0
 8011fac:	460b      	mov	r3, r1
 8011fae:	4630      	mov	r0, r6
 8011fb0:	4639      	mov	r1, r7
 8011fb2:	f7ee fb31 	bl	8000618 <__aeabi_dmul>
 8011fb6:	4642      	mov	r2, r8
 8011fb8:	4604      	mov	r4, r0
 8011fba:	460d      	mov	r5, r1
 8011fbc:	464b      	mov	r3, r9
 8011fbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011fc2:	f7ee f973 	bl	80002ac <__adddf3>
 8011fc6:	ec53 2b18 	vmov	r2, r3, d8
 8011fca:	f7ee fb25 	bl	8000618 <__aeabi_dmul>
 8011fce:	4622      	mov	r2, r4
 8011fd0:	462b      	mov	r3, r5
 8011fd2:	f7ee f96b 	bl	80002ac <__adddf3>
 8011fd6:	4642      	mov	r2, r8
 8011fd8:	4682      	mov	sl, r0
 8011fda:	468b      	mov	fp, r1
 8011fdc:	464b      	mov	r3, r9
 8011fde:	4640      	mov	r0, r8
 8011fe0:	4649      	mov	r1, r9
 8011fe2:	f7ee fb19 	bl	8000618 <__aeabi_dmul>
 8011fe6:	4b6c      	ldr	r3, [pc, #432]	; (8012198 <__ieee754_pow+0x758>)
 8011fe8:	2200      	movs	r2, #0
 8011fea:	4606      	mov	r6, r0
 8011fec:	460f      	mov	r7, r1
 8011fee:	f7ee f95d 	bl	80002ac <__adddf3>
 8011ff2:	4652      	mov	r2, sl
 8011ff4:	465b      	mov	r3, fp
 8011ff6:	f7ee f959 	bl	80002ac <__adddf3>
 8011ffa:	9c04      	ldr	r4, [sp, #16]
 8011ffc:	460d      	mov	r5, r1
 8011ffe:	4622      	mov	r2, r4
 8012000:	460b      	mov	r3, r1
 8012002:	4640      	mov	r0, r8
 8012004:	4649      	mov	r1, r9
 8012006:	f7ee fb07 	bl	8000618 <__aeabi_dmul>
 801200a:	4b63      	ldr	r3, [pc, #396]	; (8012198 <__ieee754_pow+0x758>)
 801200c:	4680      	mov	r8, r0
 801200e:	4689      	mov	r9, r1
 8012010:	2200      	movs	r2, #0
 8012012:	4620      	mov	r0, r4
 8012014:	4629      	mov	r1, r5
 8012016:	f7ee f947 	bl	80002a8 <__aeabi_dsub>
 801201a:	4632      	mov	r2, r6
 801201c:	463b      	mov	r3, r7
 801201e:	f7ee f943 	bl	80002a8 <__aeabi_dsub>
 8012022:	4602      	mov	r2, r0
 8012024:	460b      	mov	r3, r1
 8012026:	4650      	mov	r0, sl
 8012028:	4659      	mov	r1, fp
 801202a:	f7ee f93d 	bl	80002a8 <__aeabi_dsub>
 801202e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012032:	f7ee faf1 	bl	8000618 <__aeabi_dmul>
 8012036:	4622      	mov	r2, r4
 8012038:	4606      	mov	r6, r0
 801203a:	460f      	mov	r7, r1
 801203c:	462b      	mov	r3, r5
 801203e:	ec51 0b18 	vmov	r0, r1, d8
 8012042:	f7ee fae9 	bl	8000618 <__aeabi_dmul>
 8012046:	4602      	mov	r2, r0
 8012048:	460b      	mov	r3, r1
 801204a:	4630      	mov	r0, r6
 801204c:	4639      	mov	r1, r7
 801204e:	f7ee f92d 	bl	80002ac <__adddf3>
 8012052:	4606      	mov	r6, r0
 8012054:	460f      	mov	r7, r1
 8012056:	4602      	mov	r2, r0
 8012058:	460b      	mov	r3, r1
 801205a:	4640      	mov	r0, r8
 801205c:	4649      	mov	r1, r9
 801205e:	f7ee f925 	bl	80002ac <__adddf3>
 8012062:	9c04      	ldr	r4, [sp, #16]
 8012064:	a33e      	add	r3, pc, #248	; (adr r3, 8012160 <__ieee754_pow+0x720>)
 8012066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206a:	4620      	mov	r0, r4
 801206c:	460d      	mov	r5, r1
 801206e:	f7ee fad3 	bl	8000618 <__aeabi_dmul>
 8012072:	4642      	mov	r2, r8
 8012074:	ec41 0b18 	vmov	d8, r0, r1
 8012078:	464b      	mov	r3, r9
 801207a:	4620      	mov	r0, r4
 801207c:	4629      	mov	r1, r5
 801207e:	f7ee f913 	bl	80002a8 <__aeabi_dsub>
 8012082:	4602      	mov	r2, r0
 8012084:	460b      	mov	r3, r1
 8012086:	4630      	mov	r0, r6
 8012088:	4639      	mov	r1, r7
 801208a:	f7ee f90d 	bl	80002a8 <__aeabi_dsub>
 801208e:	a336      	add	r3, pc, #216	; (adr r3, 8012168 <__ieee754_pow+0x728>)
 8012090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012094:	f7ee fac0 	bl	8000618 <__aeabi_dmul>
 8012098:	a335      	add	r3, pc, #212	; (adr r3, 8012170 <__ieee754_pow+0x730>)
 801209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209e:	4606      	mov	r6, r0
 80120a0:	460f      	mov	r7, r1
 80120a2:	4620      	mov	r0, r4
 80120a4:	4629      	mov	r1, r5
 80120a6:	f7ee fab7 	bl	8000618 <__aeabi_dmul>
 80120aa:	4602      	mov	r2, r0
 80120ac:	460b      	mov	r3, r1
 80120ae:	4630      	mov	r0, r6
 80120b0:	4639      	mov	r1, r7
 80120b2:	f7ee f8fb 	bl	80002ac <__adddf3>
 80120b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80120b8:	4b38      	ldr	r3, [pc, #224]	; (801219c <__ieee754_pow+0x75c>)
 80120ba:	4413      	add	r3, r2
 80120bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c0:	f7ee f8f4 	bl	80002ac <__adddf3>
 80120c4:	4682      	mov	sl, r0
 80120c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120c8:	468b      	mov	fp, r1
 80120ca:	f7ee fa3b 	bl	8000544 <__aeabi_i2d>
 80120ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80120d0:	4b33      	ldr	r3, [pc, #204]	; (80121a0 <__ieee754_pow+0x760>)
 80120d2:	4413      	add	r3, r2
 80120d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80120d8:	4606      	mov	r6, r0
 80120da:	460f      	mov	r7, r1
 80120dc:	4652      	mov	r2, sl
 80120de:	465b      	mov	r3, fp
 80120e0:	ec51 0b18 	vmov	r0, r1, d8
 80120e4:	f7ee f8e2 	bl	80002ac <__adddf3>
 80120e8:	4642      	mov	r2, r8
 80120ea:	464b      	mov	r3, r9
 80120ec:	f7ee f8de 	bl	80002ac <__adddf3>
 80120f0:	4632      	mov	r2, r6
 80120f2:	463b      	mov	r3, r7
 80120f4:	f7ee f8da 	bl	80002ac <__adddf3>
 80120f8:	9c04      	ldr	r4, [sp, #16]
 80120fa:	4632      	mov	r2, r6
 80120fc:	463b      	mov	r3, r7
 80120fe:	4620      	mov	r0, r4
 8012100:	460d      	mov	r5, r1
 8012102:	f7ee f8d1 	bl	80002a8 <__aeabi_dsub>
 8012106:	4642      	mov	r2, r8
 8012108:	464b      	mov	r3, r9
 801210a:	f7ee f8cd 	bl	80002a8 <__aeabi_dsub>
 801210e:	ec53 2b18 	vmov	r2, r3, d8
 8012112:	f7ee f8c9 	bl	80002a8 <__aeabi_dsub>
 8012116:	4602      	mov	r2, r0
 8012118:	460b      	mov	r3, r1
 801211a:	4650      	mov	r0, sl
 801211c:	4659      	mov	r1, fp
 801211e:	e606      	b.n	8011d2e <__ieee754_pow+0x2ee>
 8012120:	2401      	movs	r4, #1
 8012122:	e6a0      	b.n	8011e66 <__ieee754_pow+0x426>
 8012124:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012178 <__ieee754_pow+0x738>
 8012128:	e60d      	b.n	8011d46 <__ieee754_pow+0x306>
 801212a:	bf00      	nop
 801212c:	f3af 8000 	nop.w
 8012130:	4a454eef 	.word	0x4a454eef
 8012134:	3fca7e28 	.word	0x3fca7e28
 8012138:	93c9db65 	.word	0x93c9db65
 801213c:	3fcd864a 	.word	0x3fcd864a
 8012140:	a91d4101 	.word	0xa91d4101
 8012144:	3fd17460 	.word	0x3fd17460
 8012148:	518f264d 	.word	0x518f264d
 801214c:	3fd55555 	.word	0x3fd55555
 8012150:	db6fabff 	.word	0xdb6fabff
 8012154:	3fdb6db6 	.word	0x3fdb6db6
 8012158:	33333303 	.word	0x33333303
 801215c:	3fe33333 	.word	0x3fe33333
 8012160:	e0000000 	.word	0xe0000000
 8012164:	3feec709 	.word	0x3feec709
 8012168:	dc3a03fd 	.word	0xdc3a03fd
 801216c:	3feec709 	.word	0x3feec709
 8012170:	145b01f5 	.word	0x145b01f5
 8012174:	be3e2fe0 	.word	0xbe3e2fe0
 8012178:	00000000 	.word	0x00000000
 801217c:	3ff00000 	.word	0x3ff00000
 8012180:	7ff00000 	.word	0x7ff00000
 8012184:	43400000 	.word	0x43400000
 8012188:	0003988e 	.word	0x0003988e
 801218c:	000bb679 	.word	0x000bb679
 8012190:	08013060 	.word	0x08013060
 8012194:	3ff00000 	.word	0x3ff00000
 8012198:	40080000 	.word	0x40080000
 801219c:	08013080 	.word	0x08013080
 80121a0:	08013070 	.word	0x08013070
 80121a4:	a3b5      	add	r3, pc, #724	; (adr r3, 801247c <__ieee754_pow+0xa3c>)
 80121a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121aa:	4640      	mov	r0, r8
 80121ac:	4649      	mov	r1, r9
 80121ae:	f7ee f87d 	bl	80002ac <__adddf3>
 80121b2:	4622      	mov	r2, r4
 80121b4:	ec41 0b1a 	vmov	d10, r0, r1
 80121b8:	462b      	mov	r3, r5
 80121ba:	4630      	mov	r0, r6
 80121bc:	4639      	mov	r1, r7
 80121be:	f7ee f873 	bl	80002a8 <__aeabi_dsub>
 80121c2:	4602      	mov	r2, r0
 80121c4:	460b      	mov	r3, r1
 80121c6:	ec51 0b1a 	vmov	r0, r1, d10
 80121ca:	f7ee fcb5 	bl	8000b38 <__aeabi_dcmpgt>
 80121ce:	2800      	cmp	r0, #0
 80121d0:	f47f adf8 	bne.w	8011dc4 <__ieee754_pow+0x384>
 80121d4:	4aa4      	ldr	r2, [pc, #656]	; (8012468 <__ieee754_pow+0xa28>)
 80121d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80121da:	4293      	cmp	r3, r2
 80121dc:	f340 810b 	ble.w	80123f6 <__ieee754_pow+0x9b6>
 80121e0:	151b      	asrs	r3, r3, #20
 80121e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80121e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80121ea:	fa4a f303 	asr.w	r3, sl, r3
 80121ee:	445b      	add	r3, fp
 80121f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80121f4:	4e9d      	ldr	r6, [pc, #628]	; (801246c <__ieee754_pow+0xa2c>)
 80121f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80121fa:	4116      	asrs	r6, r2
 80121fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012200:	2000      	movs	r0, #0
 8012202:	ea23 0106 	bic.w	r1, r3, r6
 8012206:	f1c2 0214 	rsb	r2, r2, #20
 801220a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801220e:	fa4a fa02 	asr.w	sl, sl, r2
 8012212:	f1bb 0f00 	cmp.w	fp, #0
 8012216:	4602      	mov	r2, r0
 8012218:	460b      	mov	r3, r1
 801221a:	4620      	mov	r0, r4
 801221c:	4629      	mov	r1, r5
 801221e:	bfb8      	it	lt
 8012220:	f1ca 0a00 	rsblt	sl, sl, #0
 8012224:	f7ee f840 	bl	80002a8 <__aeabi_dsub>
 8012228:	ec41 0b19 	vmov	d9, r0, r1
 801222c:	4642      	mov	r2, r8
 801222e:	464b      	mov	r3, r9
 8012230:	ec51 0b19 	vmov	r0, r1, d9
 8012234:	f7ee f83a 	bl	80002ac <__adddf3>
 8012238:	2400      	movs	r4, #0
 801223a:	a379      	add	r3, pc, #484	; (adr r3, 8012420 <__ieee754_pow+0x9e0>)
 801223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012240:	4620      	mov	r0, r4
 8012242:	460d      	mov	r5, r1
 8012244:	f7ee f9e8 	bl	8000618 <__aeabi_dmul>
 8012248:	ec53 2b19 	vmov	r2, r3, d9
 801224c:	4606      	mov	r6, r0
 801224e:	460f      	mov	r7, r1
 8012250:	4620      	mov	r0, r4
 8012252:	4629      	mov	r1, r5
 8012254:	f7ee f828 	bl	80002a8 <__aeabi_dsub>
 8012258:	4602      	mov	r2, r0
 801225a:	460b      	mov	r3, r1
 801225c:	4640      	mov	r0, r8
 801225e:	4649      	mov	r1, r9
 8012260:	f7ee f822 	bl	80002a8 <__aeabi_dsub>
 8012264:	a370      	add	r3, pc, #448	; (adr r3, 8012428 <__ieee754_pow+0x9e8>)
 8012266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226a:	f7ee f9d5 	bl	8000618 <__aeabi_dmul>
 801226e:	a370      	add	r3, pc, #448	; (adr r3, 8012430 <__ieee754_pow+0x9f0>)
 8012270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012274:	4680      	mov	r8, r0
 8012276:	4689      	mov	r9, r1
 8012278:	4620      	mov	r0, r4
 801227a:	4629      	mov	r1, r5
 801227c:	f7ee f9cc 	bl	8000618 <__aeabi_dmul>
 8012280:	4602      	mov	r2, r0
 8012282:	460b      	mov	r3, r1
 8012284:	4640      	mov	r0, r8
 8012286:	4649      	mov	r1, r9
 8012288:	f7ee f810 	bl	80002ac <__adddf3>
 801228c:	4604      	mov	r4, r0
 801228e:	460d      	mov	r5, r1
 8012290:	4602      	mov	r2, r0
 8012292:	460b      	mov	r3, r1
 8012294:	4630      	mov	r0, r6
 8012296:	4639      	mov	r1, r7
 8012298:	f7ee f808 	bl	80002ac <__adddf3>
 801229c:	4632      	mov	r2, r6
 801229e:	463b      	mov	r3, r7
 80122a0:	4680      	mov	r8, r0
 80122a2:	4689      	mov	r9, r1
 80122a4:	f7ee f800 	bl	80002a8 <__aeabi_dsub>
 80122a8:	4602      	mov	r2, r0
 80122aa:	460b      	mov	r3, r1
 80122ac:	4620      	mov	r0, r4
 80122ae:	4629      	mov	r1, r5
 80122b0:	f7ed fffa 	bl	80002a8 <__aeabi_dsub>
 80122b4:	4642      	mov	r2, r8
 80122b6:	4606      	mov	r6, r0
 80122b8:	460f      	mov	r7, r1
 80122ba:	464b      	mov	r3, r9
 80122bc:	4640      	mov	r0, r8
 80122be:	4649      	mov	r1, r9
 80122c0:	f7ee f9aa 	bl	8000618 <__aeabi_dmul>
 80122c4:	a35c      	add	r3, pc, #368	; (adr r3, 8012438 <__ieee754_pow+0x9f8>)
 80122c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ca:	4604      	mov	r4, r0
 80122cc:	460d      	mov	r5, r1
 80122ce:	f7ee f9a3 	bl	8000618 <__aeabi_dmul>
 80122d2:	a35b      	add	r3, pc, #364	; (adr r3, 8012440 <__ieee754_pow+0xa00>)
 80122d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d8:	f7ed ffe6 	bl	80002a8 <__aeabi_dsub>
 80122dc:	4622      	mov	r2, r4
 80122de:	462b      	mov	r3, r5
 80122e0:	f7ee f99a 	bl	8000618 <__aeabi_dmul>
 80122e4:	a358      	add	r3, pc, #352	; (adr r3, 8012448 <__ieee754_pow+0xa08>)
 80122e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ea:	f7ed ffdf 	bl	80002ac <__adddf3>
 80122ee:	4622      	mov	r2, r4
 80122f0:	462b      	mov	r3, r5
 80122f2:	f7ee f991 	bl	8000618 <__aeabi_dmul>
 80122f6:	a356      	add	r3, pc, #344	; (adr r3, 8012450 <__ieee754_pow+0xa10>)
 80122f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122fc:	f7ed ffd4 	bl	80002a8 <__aeabi_dsub>
 8012300:	4622      	mov	r2, r4
 8012302:	462b      	mov	r3, r5
 8012304:	f7ee f988 	bl	8000618 <__aeabi_dmul>
 8012308:	a353      	add	r3, pc, #332	; (adr r3, 8012458 <__ieee754_pow+0xa18>)
 801230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230e:	f7ed ffcd 	bl	80002ac <__adddf3>
 8012312:	4622      	mov	r2, r4
 8012314:	462b      	mov	r3, r5
 8012316:	f7ee f97f 	bl	8000618 <__aeabi_dmul>
 801231a:	4602      	mov	r2, r0
 801231c:	460b      	mov	r3, r1
 801231e:	4640      	mov	r0, r8
 8012320:	4649      	mov	r1, r9
 8012322:	f7ed ffc1 	bl	80002a8 <__aeabi_dsub>
 8012326:	4604      	mov	r4, r0
 8012328:	460d      	mov	r5, r1
 801232a:	4602      	mov	r2, r0
 801232c:	460b      	mov	r3, r1
 801232e:	4640      	mov	r0, r8
 8012330:	4649      	mov	r1, r9
 8012332:	f7ee f971 	bl	8000618 <__aeabi_dmul>
 8012336:	2200      	movs	r2, #0
 8012338:	ec41 0b19 	vmov	d9, r0, r1
 801233c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012340:	4620      	mov	r0, r4
 8012342:	4629      	mov	r1, r5
 8012344:	f7ed ffb0 	bl	80002a8 <__aeabi_dsub>
 8012348:	4602      	mov	r2, r0
 801234a:	460b      	mov	r3, r1
 801234c:	ec51 0b19 	vmov	r0, r1, d9
 8012350:	f7ee fa8c 	bl	800086c <__aeabi_ddiv>
 8012354:	4632      	mov	r2, r6
 8012356:	4604      	mov	r4, r0
 8012358:	460d      	mov	r5, r1
 801235a:	463b      	mov	r3, r7
 801235c:	4640      	mov	r0, r8
 801235e:	4649      	mov	r1, r9
 8012360:	f7ee f95a 	bl	8000618 <__aeabi_dmul>
 8012364:	4632      	mov	r2, r6
 8012366:	463b      	mov	r3, r7
 8012368:	f7ed ffa0 	bl	80002ac <__adddf3>
 801236c:	4602      	mov	r2, r0
 801236e:	460b      	mov	r3, r1
 8012370:	4620      	mov	r0, r4
 8012372:	4629      	mov	r1, r5
 8012374:	f7ed ff98 	bl	80002a8 <__aeabi_dsub>
 8012378:	4642      	mov	r2, r8
 801237a:	464b      	mov	r3, r9
 801237c:	f7ed ff94 	bl	80002a8 <__aeabi_dsub>
 8012380:	460b      	mov	r3, r1
 8012382:	4602      	mov	r2, r0
 8012384:	493a      	ldr	r1, [pc, #232]	; (8012470 <__ieee754_pow+0xa30>)
 8012386:	2000      	movs	r0, #0
 8012388:	f7ed ff8e 	bl	80002a8 <__aeabi_dsub>
 801238c:	e9cd 0100 	strd	r0, r1, [sp]
 8012390:	9b01      	ldr	r3, [sp, #4]
 8012392:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801239a:	da2f      	bge.n	80123fc <__ieee754_pow+0x9bc>
 801239c:	4650      	mov	r0, sl
 801239e:	ed9d 0b00 	vldr	d0, [sp]
 80123a2:	f000 f9c1 	bl	8012728 <scalbn>
 80123a6:	ec51 0b10 	vmov	r0, r1, d0
 80123aa:	ec53 2b18 	vmov	r2, r3, d8
 80123ae:	f7ff bbe0 	b.w	8011b72 <__ieee754_pow+0x132>
 80123b2:	4b30      	ldr	r3, [pc, #192]	; (8012474 <__ieee754_pow+0xa34>)
 80123b4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80123b8:	429e      	cmp	r6, r3
 80123ba:	f77f af0b 	ble.w	80121d4 <__ieee754_pow+0x794>
 80123be:	4b2e      	ldr	r3, [pc, #184]	; (8012478 <__ieee754_pow+0xa38>)
 80123c0:	440b      	add	r3, r1
 80123c2:	4303      	orrs	r3, r0
 80123c4:	d00b      	beq.n	80123de <__ieee754_pow+0x99e>
 80123c6:	a326      	add	r3, pc, #152	; (adr r3, 8012460 <__ieee754_pow+0xa20>)
 80123c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123cc:	ec51 0b18 	vmov	r0, r1, d8
 80123d0:	f7ee f922 	bl	8000618 <__aeabi_dmul>
 80123d4:	a322      	add	r3, pc, #136	; (adr r3, 8012460 <__ieee754_pow+0xa20>)
 80123d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123da:	f7ff bbca 	b.w	8011b72 <__ieee754_pow+0x132>
 80123de:	4622      	mov	r2, r4
 80123e0:	462b      	mov	r3, r5
 80123e2:	f7ed ff61 	bl	80002a8 <__aeabi_dsub>
 80123e6:	4642      	mov	r2, r8
 80123e8:	464b      	mov	r3, r9
 80123ea:	f7ee fb9b 	bl	8000b24 <__aeabi_dcmpge>
 80123ee:	2800      	cmp	r0, #0
 80123f0:	f43f aef0 	beq.w	80121d4 <__ieee754_pow+0x794>
 80123f4:	e7e7      	b.n	80123c6 <__ieee754_pow+0x986>
 80123f6:	f04f 0a00 	mov.w	sl, #0
 80123fa:	e717      	b.n	801222c <__ieee754_pow+0x7ec>
 80123fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012400:	4619      	mov	r1, r3
 8012402:	e7d2      	b.n	80123aa <__ieee754_pow+0x96a>
 8012404:	491a      	ldr	r1, [pc, #104]	; (8012470 <__ieee754_pow+0xa30>)
 8012406:	2000      	movs	r0, #0
 8012408:	f7ff bb9e 	b.w	8011b48 <__ieee754_pow+0x108>
 801240c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012410:	f7ff bb9a 	b.w	8011b48 <__ieee754_pow+0x108>
 8012414:	9000      	str	r0, [sp, #0]
 8012416:	f7ff bb76 	b.w	8011b06 <__ieee754_pow+0xc6>
 801241a:	2100      	movs	r1, #0
 801241c:	f7ff bb60 	b.w	8011ae0 <__ieee754_pow+0xa0>
 8012420:	00000000 	.word	0x00000000
 8012424:	3fe62e43 	.word	0x3fe62e43
 8012428:	fefa39ef 	.word	0xfefa39ef
 801242c:	3fe62e42 	.word	0x3fe62e42
 8012430:	0ca86c39 	.word	0x0ca86c39
 8012434:	be205c61 	.word	0xbe205c61
 8012438:	72bea4d0 	.word	0x72bea4d0
 801243c:	3e663769 	.word	0x3e663769
 8012440:	c5d26bf1 	.word	0xc5d26bf1
 8012444:	3ebbbd41 	.word	0x3ebbbd41
 8012448:	af25de2c 	.word	0xaf25de2c
 801244c:	3f11566a 	.word	0x3f11566a
 8012450:	16bebd93 	.word	0x16bebd93
 8012454:	3f66c16c 	.word	0x3f66c16c
 8012458:	5555553e 	.word	0x5555553e
 801245c:	3fc55555 	.word	0x3fc55555
 8012460:	c2f8f359 	.word	0xc2f8f359
 8012464:	01a56e1f 	.word	0x01a56e1f
 8012468:	3fe00000 	.word	0x3fe00000
 801246c:	000fffff 	.word	0x000fffff
 8012470:	3ff00000 	.word	0x3ff00000
 8012474:	4090cbff 	.word	0x4090cbff
 8012478:	3f6f3400 	.word	0x3f6f3400
 801247c:	652b82fe 	.word	0x652b82fe
 8012480:	3c971547 	.word	0x3c971547

08012484 <__ieee754_sqrt>:
 8012484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012488:	ec55 4b10 	vmov	r4, r5, d0
 801248c:	4e56      	ldr	r6, [pc, #344]	; (80125e8 <__ieee754_sqrt+0x164>)
 801248e:	43ae      	bics	r6, r5
 8012490:	ee10 0a10 	vmov	r0, s0
 8012494:	ee10 3a10 	vmov	r3, s0
 8012498:	4629      	mov	r1, r5
 801249a:	462a      	mov	r2, r5
 801249c:	d110      	bne.n	80124c0 <__ieee754_sqrt+0x3c>
 801249e:	ee10 2a10 	vmov	r2, s0
 80124a2:	462b      	mov	r3, r5
 80124a4:	f7ee f8b8 	bl	8000618 <__aeabi_dmul>
 80124a8:	4602      	mov	r2, r0
 80124aa:	460b      	mov	r3, r1
 80124ac:	4620      	mov	r0, r4
 80124ae:	4629      	mov	r1, r5
 80124b0:	f7ed fefc 	bl	80002ac <__adddf3>
 80124b4:	4604      	mov	r4, r0
 80124b6:	460d      	mov	r5, r1
 80124b8:	ec45 4b10 	vmov	d0, r4, r5
 80124bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c0:	2d00      	cmp	r5, #0
 80124c2:	dc10      	bgt.n	80124e6 <__ieee754_sqrt+0x62>
 80124c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80124c8:	4330      	orrs	r0, r6
 80124ca:	d0f5      	beq.n	80124b8 <__ieee754_sqrt+0x34>
 80124cc:	b15d      	cbz	r5, 80124e6 <__ieee754_sqrt+0x62>
 80124ce:	ee10 2a10 	vmov	r2, s0
 80124d2:	462b      	mov	r3, r5
 80124d4:	ee10 0a10 	vmov	r0, s0
 80124d8:	f7ed fee6 	bl	80002a8 <__aeabi_dsub>
 80124dc:	4602      	mov	r2, r0
 80124de:	460b      	mov	r3, r1
 80124e0:	f7ee f9c4 	bl	800086c <__aeabi_ddiv>
 80124e4:	e7e6      	b.n	80124b4 <__ieee754_sqrt+0x30>
 80124e6:	1509      	asrs	r1, r1, #20
 80124e8:	d076      	beq.n	80125d8 <__ieee754_sqrt+0x154>
 80124ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80124ee:	07ce      	lsls	r6, r1, #31
 80124f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80124f4:	bf5e      	ittt	pl
 80124f6:	0fda      	lsrpl	r2, r3, #31
 80124f8:	005b      	lslpl	r3, r3, #1
 80124fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80124fe:	0fda      	lsrs	r2, r3, #31
 8012500:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8012504:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8012508:	2000      	movs	r0, #0
 801250a:	106d      	asrs	r5, r5, #1
 801250c:	005b      	lsls	r3, r3, #1
 801250e:	f04f 0e16 	mov.w	lr, #22
 8012512:	4684      	mov	ip, r0
 8012514:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012518:	eb0c 0401 	add.w	r4, ip, r1
 801251c:	4294      	cmp	r4, r2
 801251e:	bfde      	ittt	le
 8012520:	1b12      	suble	r2, r2, r4
 8012522:	eb04 0c01 	addle.w	ip, r4, r1
 8012526:	1840      	addle	r0, r0, r1
 8012528:	0052      	lsls	r2, r2, #1
 801252a:	f1be 0e01 	subs.w	lr, lr, #1
 801252e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8012532:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012536:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801253a:	d1ed      	bne.n	8012518 <__ieee754_sqrt+0x94>
 801253c:	4671      	mov	r1, lr
 801253e:	2720      	movs	r7, #32
 8012540:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012544:	4562      	cmp	r2, ip
 8012546:	eb04 060e 	add.w	r6, r4, lr
 801254a:	dc02      	bgt.n	8012552 <__ieee754_sqrt+0xce>
 801254c:	d113      	bne.n	8012576 <__ieee754_sqrt+0xf2>
 801254e:	429e      	cmp	r6, r3
 8012550:	d811      	bhi.n	8012576 <__ieee754_sqrt+0xf2>
 8012552:	2e00      	cmp	r6, #0
 8012554:	eb06 0e04 	add.w	lr, r6, r4
 8012558:	da43      	bge.n	80125e2 <__ieee754_sqrt+0x15e>
 801255a:	f1be 0f00 	cmp.w	lr, #0
 801255e:	db40      	blt.n	80125e2 <__ieee754_sqrt+0x15e>
 8012560:	f10c 0801 	add.w	r8, ip, #1
 8012564:	eba2 020c 	sub.w	r2, r2, ip
 8012568:	429e      	cmp	r6, r3
 801256a:	bf88      	it	hi
 801256c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8012570:	1b9b      	subs	r3, r3, r6
 8012572:	4421      	add	r1, r4
 8012574:	46c4      	mov	ip, r8
 8012576:	0052      	lsls	r2, r2, #1
 8012578:	3f01      	subs	r7, #1
 801257a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801257e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012582:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012586:	d1dd      	bne.n	8012544 <__ieee754_sqrt+0xc0>
 8012588:	4313      	orrs	r3, r2
 801258a:	d006      	beq.n	801259a <__ieee754_sqrt+0x116>
 801258c:	1c4c      	adds	r4, r1, #1
 801258e:	bf13      	iteet	ne
 8012590:	3101      	addne	r1, #1
 8012592:	3001      	addeq	r0, #1
 8012594:	4639      	moveq	r1, r7
 8012596:	f021 0101 	bicne.w	r1, r1, #1
 801259a:	1043      	asrs	r3, r0, #1
 801259c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80125a0:	0849      	lsrs	r1, r1, #1
 80125a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80125a6:	07c2      	lsls	r2, r0, #31
 80125a8:	bf48      	it	mi
 80125aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80125ae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80125b2:	460c      	mov	r4, r1
 80125b4:	463d      	mov	r5, r7
 80125b6:	e77f      	b.n	80124b8 <__ieee754_sqrt+0x34>
 80125b8:	0ada      	lsrs	r2, r3, #11
 80125ba:	3815      	subs	r0, #21
 80125bc:	055b      	lsls	r3, r3, #21
 80125be:	2a00      	cmp	r2, #0
 80125c0:	d0fa      	beq.n	80125b8 <__ieee754_sqrt+0x134>
 80125c2:	02d7      	lsls	r7, r2, #11
 80125c4:	d50a      	bpl.n	80125dc <__ieee754_sqrt+0x158>
 80125c6:	f1c1 0420 	rsb	r4, r1, #32
 80125ca:	fa23 f404 	lsr.w	r4, r3, r4
 80125ce:	1e4d      	subs	r5, r1, #1
 80125d0:	408b      	lsls	r3, r1
 80125d2:	4322      	orrs	r2, r4
 80125d4:	1b41      	subs	r1, r0, r5
 80125d6:	e788      	b.n	80124ea <__ieee754_sqrt+0x66>
 80125d8:	4608      	mov	r0, r1
 80125da:	e7f0      	b.n	80125be <__ieee754_sqrt+0x13a>
 80125dc:	0052      	lsls	r2, r2, #1
 80125de:	3101      	adds	r1, #1
 80125e0:	e7ef      	b.n	80125c2 <__ieee754_sqrt+0x13e>
 80125e2:	46e0      	mov	r8, ip
 80125e4:	e7be      	b.n	8012564 <__ieee754_sqrt+0xe0>
 80125e6:	bf00      	nop
 80125e8:	7ff00000 	.word	0x7ff00000

080125ec <fabs>:
 80125ec:	ec51 0b10 	vmov	r0, r1, d0
 80125f0:	ee10 2a10 	vmov	r2, s0
 80125f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80125f8:	ec43 2b10 	vmov	d0, r2, r3
 80125fc:	4770      	bx	lr

080125fe <finite>:
 80125fe:	b082      	sub	sp, #8
 8012600:	ed8d 0b00 	vstr	d0, [sp]
 8012604:	9801      	ldr	r0, [sp, #4]
 8012606:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801260a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801260e:	0fc0      	lsrs	r0, r0, #31
 8012610:	b002      	add	sp, #8
 8012612:	4770      	bx	lr

08012614 <rint>:
 8012614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012616:	ec51 0b10 	vmov	r0, r1, d0
 801261a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801261e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012622:	2e13      	cmp	r6, #19
 8012624:	ee10 4a10 	vmov	r4, s0
 8012628:	460b      	mov	r3, r1
 801262a:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801262e:	dc58      	bgt.n	80126e2 <rint+0xce>
 8012630:	2e00      	cmp	r6, #0
 8012632:	da2b      	bge.n	801268c <rint+0x78>
 8012634:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012638:	4302      	orrs	r2, r0
 801263a:	d023      	beq.n	8012684 <rint+0x70>
 801263c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012640:	4302      	orrs	r2, r0
 8012642:	4254      	negs	r4, r2
 8012644:	4314      	orrs	r4, r2
 8012646:	0c4b      	lsrs	r3, r1, #17
 8012648:	0b24      	lsrs	r4, r4, #12
 801264a:	045b      	lsls	r3, r3, #17
 801264c:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012650:	ea44 0103 	orr.w	r1, r4, r3
 8012654:	4b32      	ldr	r3, [pc, #200]	; (8012720 <rint+0x10c>)
 8012656:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801265a:	e9d3 6700 	ldrd	r6, r7, [r3]
 801265e:	4602      	mov	r2, r0
 8012660:	460b      	mov	r3, r1
 8012662:	4630      	mov	r0, r6
 8012664:	4639      	mov	r1, r7
 8012666:	f7ed fe21 	bl	80002ac <__adddf3>
 801266a:	e9cd 0100 	strd	r0, r1, [sp]
 801266e:	463b      	mov	r3, r7
 8012670:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012674:	4632      	mov	r2, r6
 8012676:	f7ed fe17 	bl	80002a8 <__aeabi_dsub>
 801267a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801267e:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012682:	4639      	mov	r1, r7
 8012684:	ec41 0b10 	vmov	d0, r0, r1
 8012688:	b003      	add	sp, #12
 801268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801268c:	4a25      	ldr	r2, [pc, #148]	; (8012724 <rint+0x110>)
 801268e:	4132      	asrs	r2, r6
 8012690:	ea01 0702 	and.w	r7, r1, r2
 8012694:	4307      	orrs	r7, r0
 8012696:	d0f5      	beq.n	8012684 <rint+0x70>
 8012698:	0851      	lsrs	r1, r2, #1
 801269a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801269e:	4314      	orrs	r4, r2
 80126a0:	d00c      	beq.n	80126bc <rint+0xa8>
 80126a2:	ea23 0201 	bic.w	r2, r3, r1
 80126a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80126aa:	2e13      	cmp	r6, #19
 80126ac:	fa43 f606 	asr.w	r6, r3, r6
 80126b0:	bf0c      	ite	eq
 80126b2:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80126b6:	2400      	movne	r4, #0
 80126b8:	ea42 0306 	orr.w	r3, r2, r6
 80126bc:	4918      	ldr	r1, [pc, #96]	; (8012720 <rint+0x10c>)
 80126be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80126c2:	4622      	mov	r2, r4
 80126c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80126c8:	4620      	mov	r0, r4
 80126ca:	4629      	mov	r1, r5
 80126cc:	f7ed fdee 	bl	80002ac <__adddf3>
 80126d0:	e9cd 0100 	strd	r0, r1, [sp]
 80126d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126d8:	4622      	mov	r2, r4
 80126da:	462b      	mov	r3, r5
 80126dc:	f7ed fde4 	bl	80002a8 <__aeabi_dsub>
 80126e0:	e7d0      	b.n	8012684 <rint+0x70>
 80126e2:	2e33      	cmp	r6, #51	; 0x33
 80126e4:	dd07      	ble.n	80126f6 <rint+0xe2>
 80126e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80126ea:	d1cb      	bne.n	8012684 <rint+0x70>
 80126ec:	ee10 2a10 	vmov	r2, s0
 80126f0:	f7ed fddc 	bl	80002ac <__adddf3>
 80126f4:	e7c6      	b.n	8012684 <rint+0x70>
 80126f6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80126fa:	f04f 36ff 	mov.w	r6, #4294967295
 80126fe:	40d6      	lsrs	r6, r2
 8012700:	4230      	tst	r0, r6
 8012702:	d0bf      	beq.n	8012684 <rint+0x70>
 8012704:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8012708:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801270c:	bf1f      	itttt	ne
 801270e:	ea24 0101 	bicne.w	r1, r4, r1
 8012712:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012716:	fa44 f202 	asrne.w	r2, r4, r2
 801271a:	ea41 0402 	orrne.w	r4, r1, r2
 801271e:	e7cd      	b.n	80126bc <rint+0xa8>
 8012720:	08013090 	.word	0x08013090
 8012724:	000fffff 	.word	0x000fffff

08012728 <scalbn>:
 8012728:	b570      	push	{r4, r5, r6, lr}
 801272a:	ec55 4b10 	vmov	r4, r5, d0
 801272e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012732:	4606      	mov	r6, r0
 8012734:	462b      	mov	r3, r5
 8012736:	b99a      	cbnz	r2, 8012760 <scalbn+0x38>
 8012738:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801273c:	4323      	orrs	r3, r4
 801273e:	d036      	beq.n	80127ae <scalbn+0x86>
 8012740:	4b39      	ldr	r3, [pc, #228]	; (8012828 <scalbn+0x100>)
 8012742:	4629      	mov	r1, r5
 8012744:	ee10 0a10 	vmov	r0, s0
 8012748:	2200      	movs	r2, #0
 801274a:	f7ed ff65 	bl	8000618 <__aeabi_dmul>
 801274e:	4b37      	ldr	r3, [pc, #220]	; (801282c <scalbn+0x104>)
 8012750:	429e      	cmp	r6, r3
 8012752:	4604      	mov	r4, r0
 8012754:	460d      	mov	r5, r1
 8012756:	da10      	bge.n	801277a <scalbn+0x52>
 8012758:	a32b      	add	r3, pc, #172	; (adr r3, 8012808 <scalbn+0xe0>)
 801275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801275e:	e03a      	b.n	80127d6 <scalbn+0xae>
 8012760:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012764:	428a      	cmp	r2, r1
 8012766:	d10c      	bne.n	8012782 <scalbn+0x5a>
 8012768:	ee10 2a10 	vmov	r2, s0
 801276c:	4620      	mov	r0, r4
 801276e:	4629      	mov	r1, r5
 8012770:	f7ed fd9c 	bl	80002ac <__adddf3>
 8012774:	4604      	mov	r4, r0
 8012776:	460d      	mov	r5, r1
 8012778:	e019      	b.n	80127ae <scalbn+0x86>
 801277a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801277e:	460b      	mov	r3, r1
 8012780:	3a36      	subs	r2, #54	; 0x36
 8012782:	4432      	add	r2, r6
 8012784:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012788:	428a      	cmp	r2, r1
 801278a:	dd08      	ble.n	801279e <scalbn+0x76>
 801278c:	2d00      	cmp	r5, #0
 801278e:	a120      	add	r1, pc, #128	; (adr r1, 8012810 <scalbn+0xe8>)
 8012790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012794:	da1c      	bge.n	80127d0 <scalbn+0xa8>
 8012796:	a120      	add	r1, pc, #128	; (adr r1, 8012818 <scalbn+0xf0>)
 8012798:	e9d1 0100 	ldrd	r0, r1, [r1]
 801279c:	e018      	b.n	80127d0 <scalbn+0xa8>
 801279e:	2a00      	cmp	r2, #0
 80127a0:	dd08      	ble.n	80127b4 <scalbn+0x8c>
 80127a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80127a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80127aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80127ae:	ec45 4b10 	vmov	d0, r4, r5
 80127b2:	bd70      	pop	{r4, r5, r6, pc}
 80127b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80127b8:	da19      	bge.n	80127ee <scalbn+0xc6>
 80127ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80127be:	429e      	cmp	r6, r3
 80127c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80127c4:	dd0a      	ble.n	80127dc <scalbn+0xb4>
 80127c6:	a112      	add	r1, pc, #72	; (adr r1, 8012810 <scalbn+0xe8>)
 80127c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d1e2      	bne.n	8012796 <scalbn+0x6e>
 80127d0:	a30f      	add	r3, pc, #60	; (adr r3, 8012810 <scalbn+0xe8>)
 80127d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d6:	f7ed ff1f 	bl	8000618 <__aeabi_dmul>
 80127da:	e7cb      	b.n	8012774 <scalbn+0x4c>
 80127dc:	a10a      	add	r1, pc, #40	; (adr r1, 8012808 <scalbn+0xe0>)
 80127de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d0b8      	beq.n	8012758 <scalbn+0x30>
 80127e6:	a10e      	add	r1, pc, #56	; (adr r1, 8012820 <scalbn+0xf8>)
 80127e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127ec:	e7b4      	b.n	8012758 <scalbn+0x30>
 80127ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80127f2:	3236      	adds	r2, #54	; 0x36
 80127f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80127f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80127fc:	4620      	mov	r0, r4
 80127fe:	4b0c      	ldr	r3, [pc, #48]	; (8012830 <scalbn+0x108>)
 8012800:	2200      	movs	r2, #0
 8012802:	e7e8      	b.n	80127d6 <scalbn+0xae>
 8012804:	f3af 8000 	nop.w
 8012808:	c2f8f359 	.word	0xc2f8f359
 801280c:	01a56e1f 	.word	0x01a56e1f
 8012810:	8800759c 	.word	0x8800759c
 8012814:	7e37e43c 	.word	0x7e37e43c
 8012818:	8800759c 	.word	0x8800759c
 801281c:	fe37e43c 	.word	0xfe37e43c
 8012820:	c2f8f359 	.word	0xc2f8f359
 8012824:	81a56e1f 	.word	0x81a56e1f
 8012828:	43500000 	.word	0x43500000
 801282c:	ffff3cb0 	.word	0xffff3cb0
 8012830:	3c900000 	.word	0x3c900000

08012834 <_init>:
 8012834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012836:	bf00      	nop
 8012838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801283a:	bc08      	pop	{r3}
 801283c:	469e      	mov	lr, r3
 801283e:	4770      	bx	lr

08012840 <_fini>:
 8012840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012842:	bf00      	nop
 8012844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012846:	bc08      	pop	{r3}
 8012848:	469e      	mov	lr, r3
 801284a:	4770      	bx	lr
