
f437_fc_v4.3_megaloop_no_ejection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000908  080144a0  080144a0  000244a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014da8  08014da8  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08014da8  08014da8  00024da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014db0  08014db0  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014db0  08014db0  00024db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014db4  08014db4  00024db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08014db8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          0000169c  20000200  20000200  00030200  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000189c  2000189c  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003bd4a  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e54  00000000  00000000  0006bf7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002520  00000000  00000000  00071dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022b0  00000000  00000000  000742f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c95d  00000000  00000000  000765a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029bcd  00000000  00000000  000a2efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4dad  00000000  00000000  000ccaca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c1877  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b4e4  00000000  00000000  001c18cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014484 	.word	0x08014484

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	08014484 	.word	0x08014484

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <Max31855_Read_Temp>:
uint32_t sign=0;									  	// Sign bit
uint8_t DATARX[4];                                    	// Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};         	// Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); 	// Low State for SPI Communication
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001038:	482c      	ldr	r0, [pc, #176]	; (80010ec <Max31855_Read_Temp+0xc0>)
 800103a:	f005 f877 	bl	800612c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);         	// DATA Transfer
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	2204      	movs	r2, #4
 8001044:	492a      	ldr	r1, [pc, #168]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001046:	482b      	ldr	r0, [pc, #172]	; (80010f4 <Max31855_Read_Temp+0xc8>)
 8001048:	f007 fb04 	bl	8008654 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET);   	// High State for SPI Communication
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001052:	4826      	ldr	r0, [pc, #152]	; (80010ec <Max31855_Read_Temp+0xc0>)
 8001054:	f005 f86a 	bl	800612c <HAL_GPIO_WritePin>

	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 800105a:	78db      	ldrb	r3, [r3, #3]
 800105c:	461a      	mov	r2, r3
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001060:	789b      	ldrb	r3, [r3, #2]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	431a      	orrs	r2, r3
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001068:	785b      	ldrb	r3, [r3, #1]
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	431a      	orrs	r2, r3
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	061b      	lsls	r3, r3, #24
 8001074:	4313      	orrs	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]

	Error = v & 0x07;								  	// Error Detection
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <Max31855_Read_Temp+0xcc>)
 8001084:	701a      	strb	r2, [r3, #0]

	if (v & 0x7) {
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <Max31855_Read_Temp+0x68>
		// uh oh, a serious problem!
		return -99999;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <Max31855_Read_Temp+0xd0>)
 8001092:	e024      	b.n	80010de <Max31855_Read_Temp+0xb2>
	}

	if (v & 0x80000000) {
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	da07      	bge.n	80010aa <Max31855_Read_Temp+0x7e>
		// Negative value, drop the lower 18 bits and explicitly extend sign bits.
		v = 0xFFFFC000 | ((v >> 18) & 0x00003FFF);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	0c9b      	lsrs	r3, r3, #18
 800109e:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80010a2:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e002      	b.n	80010b0 <Max31855_Read_Temp+0x84>
	} else {
		// Positive value, just drop the lower 18 bits.
		v >>= 18;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	0c9b      	lsrs	r3, r3, #18
 80010ae:	60fb      	str	r3, [r7, #12]
	}

	double centigrade = v;
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f7ff fa47 	bl	8000544 <__aeabi_ui2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	e9c7 2300 	strd	r2, r3, [r7]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <Max31855_Read_Temp+0xd4>)
 80010c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010c8:	f7ff fab6 	bl	8000638 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	e9c7 2300 	strd	r2, r3, [r7]
	return centigrade;
 80010d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010d8:	f7ff fda6 	bl	8000c28 <__aeabi_d2f>
 80010dc:	4603      	mov	r3, r0
 80010de:	ee07 3a90 	vmov	s15, r3
}
 80010e2:	eeb0 0a67 	vmov.f32	s0, s15
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40021000 	.word	0x40021000
 80010f0:	200004fc 	.word	0x200004fc
 80010f4:	20000500 	.word	0x20000500
 80010f8:	2000021c 	.word	0x2000021c
 80010fc:	c7c34f80 	.word	0xc7c34f80
 8001100:	3fd00000 	.word	0x3fd00000

08001104 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001118:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <MX_ADC1_Init+0xa0>)
 800111a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800111c:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800111e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001122:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001132:	2200      	movs	r2, #0
 8001134:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001148:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001156:	2201      	movs	r2, #1
 8001158:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_ADC1_Init+0x9c>)
 8001164:	2201      	movs	r2, #1
 8001166:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001168:	480d      	ldr	r0, [pc, #52]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800116a:	f003 ff05 	bl	8004f78 <HAL_ADC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001174:	f002 fb32 	bl	80037dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001178:	2306      	movs	r3, #6
 800117a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001180:	2305      	movs	r3, #5
 8001182:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001184:	463b      	mov	r3, r7
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800118a:	f003 ff39 	bl	8005000 <HAL_ADC_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001194:	f002 fb22 	bl	80037dc <Error_Handler>
  }

}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000558 	.word	0x20000558
 80011a4:	40012000 	.word	0x40012000

080011a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <HAL_ADC_MspInit+0xd8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d156      	bne.n	8001278 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_ADC_MspInit+0xdc>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a2c      	ldr	r2, [pc, #176]	; (8001284 <HAL_ADC_MspInit+0xdc>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <HAL_ADC_MspInit+0xdc>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_ADC_MspInit+0xdc>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a25      	ldr	r2, [pc, #148]	; (8001284 <HAL_ADC_MspInit+0xdc>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <HAL_ADC_MspInit+0xdc>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8001202:	2340      	movs	r3, #64	; 0x40
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	481c      	ldr	r0, [pc, #112]	; (8001288 <HAL_ADC_MspInit+0xe0>)
 8001216:	f004 fdc5 	bl	8005da4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <HAL_ADC_MspInit+0xe4>)
 800121c:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <HAL_ADC_MspInit+0xe8>)
 800121e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_ADC_MspInit+0xe4>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001238:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_ADC_MspInit+0xe4>)
 800123c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001240:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001244:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001248:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_ADC_MspInit+0xe4>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <HAL_ADC_MspInit+0xe4>)
 800125e:	f004 fa0f 	bl	8005680 <HAL_DMA_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001268:	f002 fab8 	bl	80037dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
 8001272:	4a06      	ldr	r2, [pc, #24]	; (800128c <HAL_ADC_MspInit+0xe4>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40012000 	.word	0x40012000
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000
 800128c:	200005a0 	.word	0x200005a0
 8001290:	40026410 	.word	0x40026410

08001294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <MX_DMA_Init+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <MX_DMA_Init+0x88>)
 80012a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_DMA_Init+0x88>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_DMA_Init+0x88>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a17      	ldr	r2, [pc, #92]	; (800131c <MX_DMA_Init+0x88>)
 80012c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_DMA_Init+0x88>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 15, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	210f      	movs	r1, #15
 80012d6:	200c      	movs	r0, #12
 80012d8:	f004 f99b 	bl	8005612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012dc:	200c      	movs	r0, #12
 80012de:	f004 f9b4 	bl	800564a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	200e      	movs	r0, #14
 80012e8:	f004 f993 	bl	8005612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80012ec:	200e      	movs	r0, #14
 80012ee:	f004 f9ac 	bl	800564a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2038      	movs	r0, #56	; 0x38
 80012f8:	f004 f98b 	bl	8005612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012fc:	2038      	movs	r0, #56	; 0x38
 80012fe:	f004 f9a4 	bl	800564a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2039      	movs	r0, #57	; 0x39
 8001308:	f004 f983 	bl	8005612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800130c:	2039      	movs	r0, #57	; 0x39
 800130e:	f004 f99c 	bl	800564a <HAL_NVIC_EnableIRQ>

}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
 800133a:	4bb4      	ldr	r3, [pc, #720]	; (800160c <MX_GPIO_Init+0x2ec>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4ab3      	ldr	r2, [pc, #716]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4bb1      	ldr	r3, [pc, #708]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	623b      	str	r3, [r7, #32]
 8001350:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	4bad      	ldr	r3, [pc, #692]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4aac      	ldr	r2, [pc, #688]	; (800160c <MX_GPIO_Init+0x2ec>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4baa      	ldr	r3, [pc, #680]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	4ba6      	ldr	r3, [pc, #664]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4aa5      	ldr	r2, [pc, #660]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001378:	f043 0320 	orr.w	r3, r3, #32
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4ba3      	ldr	r3, [pc, #652]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	4b9f      	ldr	r3, [pc, #636]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a9e      	ldr	r2, [pc, #632]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b9c      	ldr	r3, [pc, #624]	; (800160c <MX_GPIO_Init+0x2ec>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b98      	ldr	r3, [pc, #608]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a97      	ldr	r2, [pc, #604]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b95      	ldr	r3, [pc, #596]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b91      	ldr	r3, [pc, #580]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a90      	ldr	r2, [pc, #576]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b8e      	ldr	r3, [pc, #568]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	4b8a      	ldr	r3, [pc, #552]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a89      	ldr	r2, [pc, #548]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b87      	ldr	r3, [pc, #540]	; (800160c <MX_GPIO_Init+0x2ec>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b83      	ldr	r3, [pc, #524]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a82      	ldr	r2, [pc, #520]	; (800160c <MX_GPIO_Init+0x2ec>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b80      	ldr	r3, [pc, #512]	; (800160c <MX_GPIO_Init+0x2ec>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f248 4184 	movw	r1, #33924	; 0x8484
 800141c:	487c      	ldr	r0, [pc, #496]	; (8001610 <MX_GPIO_Init+0x2f0>)
 800141e:	f004 fe85 	bl	800612c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001428:	487a      	ldr	r0, [pc, #488]	; (8001614 <MX_GPIO_Init+0x2f4>)
 800142a:	f004 fe7f 	bl	800612c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001434:	4878      	ldr	r0, [pc, #480]	; (8001618 <MX_GPIO_Init+0x2f8>)
 8001436:	f004 fe79 	bl	800612c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2108      	movs	r1, #8
 800143e:	4877      	ldr	r0, [pc, #476]	; (800161c <MX_GPIO_Init+0x2fc>)
 8001440:	f004 fe74 	bl	800612c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800144a:	4872      	ldr	r0, [pc, #456]	; (8001614 <MX_GPIO_Init+0x2f4>)
 800144c:	f004 fe6e 	bl	800612c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 8001450:	2200      	movs	r2, #0
 8001452:	f645 2126 	movw	r1, #23078	; 0x5a26
 8001456:	4872      	ldr	r0, [pc, #456]	; (8001620 <MX_GPIO_Init+0x300>)
 8001458:	f004 fe68 	bl	800612c <HAL_GPIO_WritePin>
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_NSS_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001462:	4870      	ldr	r0, [pc, #448]	; (8001624 <MX_GPIO_Init+0x304>)
 8001464:	f004 fe62 	bl	800612c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 41f9 	mov.w	r1, #31872	; 0x7c80
 800146e:	486e      	ldr	r0, [pc, #440]	; (8001628 <MX_GPIO_Init+0x308>)
 8001470:	f004 fe5c 	bl	800612c <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|VR_CTRL_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	2170      	movs	r1, #112	; 0x70
 8001478:	486b      	ldr	r0, [pc, #428]	; (8001628 <MX_GPIO_Init+0x308>)
 800147a:	f004 fe57 	bl	800612c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin;
 800147e:	f248 4384 	movw	r3, #33924	; 0x8484
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	485e      	ldr	r0, [pc, #376]	; (8001610 <MX_GPIO_Init+0x2f0>)
 8001498:	f004 fc84 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI_SW4_Pin;
 800149c:	2310      	movs	r3, #16
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a0:	4b62      	ldr	r3, [pc, #392]	; (800162c <MX_GPIO_Init+0x30c>)
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_EXTI_SW4_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ac:	4619      	mov	r1, r3
 80014ae:	4858      	ldr	r0, [pc, #352]	; (8001610 <MX_GPIO_Init+0x2f0>)
 80014b0:	f004 fc78 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80014b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014be:	2301      	movs	r3, #1
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	4619      	mov	r1, r3
 80014cc:	4851      	ldr	r0, [pc, #324]	; (8001614 <MX_GPIO_Init+0x2f4>)
 80014ce:	f004 fc69 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 80014d2:	2301      	movs	r3, #1
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d6:	4b55      	ldr	r3, [pc, #340]	; (800162c <MX_GPIO_Init+0x30c>)
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	4619      	mov	r1, r3
 80014e4:	484c      	ldr	r0, [pc, #304]	; (8001618 <MX_GPIO_Init+0x2f8>)
 80014e6:	f004 fc5d 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin;
 80014ea:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	4619      	mov	r1, r3
 8001502:	4845      	ldr	r0, [pc, #276]	; (8001618 <MX_GPIO_Init+0x2f8>)
 8001504:	f004 fc4e 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDF_Pin;
 8001508:	2308      	movs	r3, #8
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LEDF_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	483f      	ldr	r0, [pc, #252]	; (800161c <MX_GPIO_Init+0x2fc>)
 8001520:	f004 fc40 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001524:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	4837      	ldr	r0, [pc, #220]	; (8001618 <MX_GPIO_Init+0x2f8>)
 800153a:	f004 fc33 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800153e:	2302      	movs	r3, #2
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	4834      	ldr	r0, [pc, #208]	; (8001624 <MX_GPIO_Init+0x304>)
 8001552:	f004 fc27 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 8001556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	482a      	ldr	r0, [pc, #168]	; (8001614 <MX_GPIO_Init+0x2f4>)
 800156c:	f004 fc1a 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 8001570:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	4822      	ldr	r0, [pc, #136]	; (8001614 <MX_GPIO_Init+0x2f4>)
 800158a:	f004 fc0b 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|Rcov_Cont_Main_Pin
 800158e:	f242 4319 	movw	r3, #9241	; 0x2419
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Cont_Drogue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	481f      	ldr	r0, [pc, #124]	; (8001620 <MX_GPIO_Init+0x300>)
 80015a4:	f004 fbfe 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 80015a8:	f645 2326 	movw	r3, #23078	; 0x5a26
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4817      	ldr	r0, [pc, #92]	; (8001620 <MX_GPIO_Init+0x300>)
 80015c2:	f004 fbef 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Payload_EN_Pin|IN_XTend_Continuity_Pin;
 80015c6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	480d      	ldr	r0, [pc, #52]	; (8001610 <MX_GPIO_Init+0x2f0>)
 80015dc:	f004 fbe2 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_NSS_Pin;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SX_NSS_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <MX_GPIO_Init+0x304>)
 80015fa:	f004 fbd3 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80015fe:	f44f 43f9 	mov.w	r3, #31872	; 0x7c80
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|VR_CTRL_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	e011      	b.n	8001630 <MX_GPIO_Init+0x310>
 800160c:	40023800 	.word	0x40023800
 8001610:	40021000 	.word	0x40021000
 8001614:	40021400 	.word	0x40021400
 8001618:	40020800 	.word	0x40020800
 800161c:	40020000 	.word	0x40020000
 8001620:	40021800 	.word	0x40021800
 8001624:	40020400 	.word	0x40020400
 8001628:	40020c00 	.word	0x40020c00
 800162c:	10110000 	.word	0x10110000
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	482d      	ldr	r0, [pc, #180]	; (80016f4 <MX_GPIO_Init+0x3d4>)
 800163e:	f004 fbb1 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	4827      	ldr	r0, [pc, #156]	; (80016f4 <MX_GPIO_Init+0x3d4>)
 8001658:	f004 fba4 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 800165c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <MX_GPIO_Init+0x3d8>)
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4619      	mov	r1, r3
 8001670:	4822      	ldr	r0, [pc, #136]	; (80016fc <MX_GPIO_Init+0x3dc>)
 8001672:	f004 fb97 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = FLASH_IO3_Pin|FLASH_WP_Pin;
 8001676:	2330      	movs	r3, #48	; 0x30
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167e:	2301      	movs	r3, #1
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001682:	2302      	movs	r3, #2
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	4819      	ldr	r0, [pc, #100]	; (80016f4 <MX_GPIO_Init+0x3d4>)
 800168e:	f004 fb89 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001692:	2340      	movs	r3, #64	; 0x40
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169a:	2301      	movs	r3, #1
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	4812      	ldr	r0, [pc, #72]	; (80016f4 <MX_GPIO_Init+0x3d4>)
 80016aa:	f004 fb7b 	bl	8005da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c4:	4619      	mov	r1, r3
 80016c6:	480e      	ldr	r0, [pc, #56]	; (8001700 <MX_GPIO_Init+0x3e0>)
 80016c8:	f004 fb6c 	bl	8005da4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	2006      	movs	r0, #6
 80016d2:	f003 ff9e 	bl	8005612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016d6:	2006      	movs	r0, #6
 80016d8:	f003 ffb7 	bl	800564a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	200a      	movs	r0, #10
 80016e2:	f003 ff96 	bl	8005612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80016e6:	200a      	movs	r0, #10
 80016e8:	f003 ffaf 	bl	800564a <HAL_NVIC_EnableIRQ>

}
 80016ec:	bf00      	nop
 80016ee:	3738      	adds	r7, #56	; 0x38
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40020c00 	.word	0x40020c00
 80016f8:	10110000 	.word	0x10110000
 80016fc:	40021800 	.word	0x40021800
 8001700:	40020400 	.word	0x40020400

08001704 <GPS_ParseBuffer>:
 * 		2. use memcpy to extract string between '$' and '\n' found
 * 		3. parse
 * 				a. if valid gps coordinates are found, stop
 * 				b. else repeat with rest of buffer
 */
void GPS_ParseBuffer(double *latitude, double *longitude, float *time) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b0ba      	sub	sp, #232	; 0xe8
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
	// debugging: print full buffer first
	HAL_UART_Transmit(&huart8, rx_buf, strlen(rx_buf), HAL_MAX_DELAY);
	#endif

	// limits on the DMA buffer
	uint16_t buf_end = GPS_RX_DMA_BUF_LEN + 1; // +1 for null terminator
 8001710:	23b0      	movs	r3, #176	; 0xb0
 8001712:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	uint8_t valid_string_found = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1

	// for extracting substrings to be parsed
	char current_substring[200]; // max size of valid NMEA string is 75 for the validate function
	memset(current_substring, 0, 200);
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	22c8      	movs	r2, #200	; 0xc8
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f00c fe59 	bl	800e3dc <memset>

	// need to know where we are in the buffer to be able to loop automatically
	char *head_of_parse_buffer = gps_rx_buf;
 800172a:	4b35      	ldr	r3, [pc, #212]	; (8001800 <GPS_ParseBuffer+0xfc>)
 800172c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	char *dollar;
	char *newline;

	while (head_of_parse_buffer != NULL) {
 8001730:	e057      	b.n	80017e2 <GPS_ParseBuffer+0xde>

		// get index of '$' and '\n'. note: gps_rx_buf MUST be null terminated!
		dollar = strchr(head_of_parse_buffer, '$');
 8001732:	2124      	movs	r1, #36	; 0x24
 8001734:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001738:	f00d fe23 	bl	800f382 <strchr>
 800173c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		newline = strchr(dollar, '\n'); // start after $ sign
 8001740:	210a      	movs	r1, #10
 8001742:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001746:	f00d fe1c 	bl	800f382 <strchr>
 800174a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8

		if (dollar != NULL && newline != NULL) {
 800174e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001752:	2b00      	cmp	r3, #0
 8001754:	d049      	beq.n	80017ea <GPS_ParseBuffer+0xe6>
 8001756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d045      	beq.n	80017ea <GPS_ParseBuffer+0xe6>
			// copy substring into string
			memcpy(current_substring, dollar, (newline - dollar));
 800175e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	461a      	mov	r2, r3
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001772:	4618      	mov	r0, r3
 8001774:	f00c fe24 	bl	800e3c0 <memcpy>
		else {
			break;
		}

		// parse
		if (GPS_validate((char*) current_substring)) {
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	4618      	mov	r0, r3
 800177e:	f000 f843 	bl	8001808 <GPS_validate>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01b      	beq.n	80017c0 <GPS_ParseBuffer+0xbc>
			if (GPS_parse((char*) current_substring)) {
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f89d 	bl	80018cc <GPS_parse>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <GPS_ParseBuffer+0xbc>
				*latitude = GPS.dec_latitude;
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <GPS_ParseBuffer+0x100>)
 800179a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800179e:	68f9      	ldr	r1, [r7, #12]
 80017a0:	e9c1 2300 	strd	r2, r3, [r1]
				*longitude = GPS.dec_longitude;
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <GPS_ParseBuffer+0x100>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	68b9      	ldr	r1, [r7, #8]
 80017ac:	e9c1 2300 	strd	r2, r3, [r1]
				*time = GPS.utc_time;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <GPS_ParseBuffer+0x100>)
 80017b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	601a      	str	r2, [r3, #0]
				valid_string_found = 1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1

				break; // got valid coordinates, stop parsing
 80017be:	e014      	b.n	80017ea <GPS_ParseBuffer+0xe6>
			}
		}

		memset(current_substring, 0, (newline - dollar) + 10);
 80017c0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80017c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	330a      	adds	r3, #10
 80017cc:	461a      	mov	r2, r3
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00c fe01 	bl	800e3dc <memset>
		head_of_parse_buffer = newline; // move head of buffer to newline character found
 80017da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	while (head_of_parse_buffer != NULL) {
 80017e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1a3      	bne.n	8001732 <GPS_ParseBuffer+0x2e>
	}


	memset(gps_rx_buf, 0, buf_end);
 80017ea:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 80017ee:	461a      	mov	r2, r3
 80017f0:	2100      	movs	r1, #0
 80017f2:	4803      	ldr	r0, [pc, #12]	; (8001800 <GPS_ParseBuffer+0xfc>)
 80017f4:	f00c fdf2 	bl	800e3dc <memset>

}
 80017f8:	bf00      	nop
 80017fa:	37e8      	adds	r7, #232	; 0xe8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000954 	.word	0x20000954
 8001804:	20000600 	.word	0x20000600

08001808 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$'){
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b24      	cmp	r3, #36	; 0x24
 8001822:	d103      	bne.n	800182c <GPS_validate+0x24>
        i++;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
    } else {
        return 0;
    }

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800182a:	e00c      	b.n	8001846 <GPS_validate+0x3e>
        return 0;
 800182c:	2300      	movs	r3, #0
 800182e:	e047      	b.n	80018c0 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4053      	eors	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        i++;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <GPS_validate+0x5c>
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b2a      	cmp	r3, #42	; 0x2a
 800185c:	d002      	beq.n	8001864 <GPS_validate+0x5c>
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b4a      	cmp	r3, #74	; 0x4a
 8001862:	dde5      	ble.n	8001830 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b4a      	cmp	r3, #74	; 0x4a
 8001868:	dd01      	ble.n	800186e <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800186a:	2300      	movs	r3, #0
 800186c:	e028      	b.n	80018c0 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b2a      	cmp	r3, #42	; 0x2a
 8001878:	d119      	bne.n	80018ae <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3301      	adds	r3, #1
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3302      	adds	r3, #2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	490a      	ldr	r1, [pc, #40]	; (80018c8 <GPS_validate+0xc0>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f00d fcde 	bl	800f260 <siprintf>
    return((checkcalcstr[0] == check[0])
 80018a4:	7a3a      	ldrb	r2, [r7, #8]
 80018a6:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d108      	bne.n	80018be <GPS_validate+0xb6>
 80018ac:	e001      	b.n	80018b2 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80018ae:	2300      	movs	r3, #0
 80018b0:	e006      	b.n	80018c0 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80018b2:	7a7a      	ldrb	r2, [r7, #9]
 80018b4:	7b7b      	ldrb	r3, [r7, #13]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d101      	bne.n	80018be <GPS_validate+0xb6>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <GPS_validate+0xb8>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	080144a0 	.word	0x080144a0

080018cc <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af08      	add	r7, sp, #32
 80018d2:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80018d4:	2206      	movs	r2, #6
 80018d6:	497d      	ldr	r1, [pc, #500]	; (8001acc <GPS_parse+0x200>)
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f00d fd67 	bl	800f3ac <strncmp>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d143      	bne.n	800196c <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%lf,%c,%lf,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80018e4:	4b7a      	ldr	r3, [pc, #488]	; (8001ad0 <GPS_parse+0x204>)
 80018e6:	9307      	str	r3, [sp, #28]
 80018e8:	4b7a      	ldr	r3, [pc, #488]	; (8001ad4 <GPS_parse+0x208>)
 80018ea:	9306      	str	r3, [sp, #24]
 80018ec:	4b7a      	ldr	r3, [pc, #488]	; (8001ad8 <GPS_parse+0x20c>)
 80018ee:	9305      	str	r3, [sp, #20]
 80018f0:	4b7a      	ldr	r3, [pc, #488]	; (8001adc <GPS_parse+0x210>)
 80018f2:	9304      	str	r3, [sp, #16]
 80018f4:	4b7a      	ldr	r3, [pc, #488]	; (8001ae0 <GPS_parse+0x214>)
 80018f6:	9303      	str	r3, [sp, #12]
 80018f8:	4b7a      	ldr	r3, [pc, #488]	; (8001ae4 <GPS_parse+0x218>)
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	4b7a      	ldr	r3, [pc, #488]	; (8001ae8 <GPS_parse+0x21c>)
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	4b7a      	ldr	r3, [pc, #488]	; (8001aec <GPS_parse+0x220>)
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4b7a      	ldr	r3, [pc, #488]	; (8001af0 <GPS_parse+0x224>)
 8001906:	4a7b      	ldr	r2, [pc, #492]	; (8001af4 <GPS_parse+0x228>)
 8001908:	497b      	ldr	r1, [pc, #492]	; (8001af8 <GPS_parse+0x22c>)
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f00d fcc8 	bl	800f2a0 <siscanf>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	f340 80d4 	ble.w	8001ac0 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001918:	4b78      	ldr	r3, [pc, #480]	; (8001afc <GPS_parse+0x230>)
 800191a:	ed93 7b08 	vldr	d7, [r3, #32]
 800191e:	4b77      	ldr	r3, [pc, #476]	; (8001afc <GPS_parse+0x230>)
 8001920:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001924:	4618      	mov	r0, r3
 8001926:	eeb0 0a47 	vmov.f32	s0, s14
 800192a:	eef0 0a67 	vmov.f32	s1, s15
 800192e:	f000 f909 	bl	8001b44 <GPS_nmea_to_dec>
 8001932:	eeb0 7a40 	vmov.f32	s14, s0
 8001936:	eef0 7a60 	vmov.f32	s15, s1
 800193a:	4b70      	ldr	r3, [pc, #448]	; (8001afc <GPS_parse+0x230>)
 800193c:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001940:	4b6e      	ldr	r3, [pc, #440]	; (8001afc <GPS_parse+0x230>)
 8001942:	ed93 7b06 	vldr	d7, [r3, #24]
 8001946:	4b6d      	ldr	r3, [pc, #436]	; (8001afc <GPS_parse+0x230>)
 8001948:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800194c:	4618      	mov	r0, r3
 800194e:	eeb0 0a47 	vmov.f32	s0, s14
 8001952:	eef0 0a67 	vmov.f32	s1, s15
 8001956:	f000 f8f5 	bl	8001b44 <GPS_nmea_to_dec>
 800195a:	eeb0 7a40 	vmov.f32	s14, s0
 800195e:	eef0 7a60 	vmov.f32	s15, s1
 8001962:	4b66      	ldr	r3, [pc, #408]	; (8001afc <GPS_parse+0x230>)
 8001964:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 8001968:	2301      	movs	r3, #1
 800196a:	e0aa      	b.n	8001ac2 <GPS_parse+0x1f6>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 800196c:	2206      	movs	r2, #6
 800196e:	4964      	ldr	r1, [pc, #400]	; (8001b00 <GPS_parse+0x234>)
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f00d fd1b 	bl	800f3ac <strncmp>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d13f      	bne.n	80019fc <GPS_parse+0x130>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%lf,%c,%lf,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 800197c:	4b61      	ldr	r3, [pc, #388]	; (8001b04 <GPS_parse+0x238>)
 800197e:	9305      	str	r3, [sp, #20]
 8001980:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <GPS_parse+0x23c>)
 8001982:	9304      	str	r3, [sp, #16]
 8001984:	4b61      	ldr	r3, [pc, #388]	; (8001b0c <GPS_parse+0x240>)
 8001986:	9303      	str	r3, [sp, #12]
 8001988:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <GPS_parse+0x218>)
 800198a:	9302      	str	r3, [sp, #8]
 800198c:	4b56      	ldr	r3, [pc, #344]	; (8001ae8 <GPS_parse+0x21c>)
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	4b56      	ldr	r3, [pc, #344]	; (8001aec <GPS_parse+0x220>)
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <GPS_parse+0x224>)
 8001996:	4a57      	ldr	r2, [pc, #348]	; (8001af4 <GPS_parse+0x228>)
 8001998:	495d      	ldr	r1, [pc, #372]	; (8001b10 <GPS_parse+0x244>)
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f00d fc80 	bl	800f2a0 <siscanf>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f340 808c 	ble.w	8001ac0 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80019a8:	4b54      	ldr	r3, [pc, #336]	; (8001afc <GPS_parse+0x230>)
 80019aa:	ed93 7b08 	vldr	d7, [r3, #32]
 80019ae:	4b53      	ldr	r3, [pc, #332]	; (8001afc <GPS_parse+0x230>)
 80019b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019b4:	4618      	mov	r0, r3
 80019b6:	eeb0 0a47 	vmov.f32	s0, s14
 80019ba:	eef0 0a67 	vmov.f32	s1, s15
 80019be:	f000 f8c1 	bl	8001b44 <GPS_nmea_to_dec>
 80019c2:	eeb0 7a40 	vmov.f32	s14, s0
 80019c6:	eef0 7a60 	vmov.f32	s15, s1
 80019ca:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <GPS_parse+0x230>)
 80019cc:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80019d0:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <GPS_parse+0x230>)
 80019d2:	ed93 7b06 	vldr	d7, [r3, #24]
 80019d6:	4b49      	ldr	r3, [pc, #292]	; (8001afc <GPS_parse+0x230>)
 80019d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80019dc:	4618      	mov	r0, r3
 80019de:	eeb0 0a47 	vmov.f32	s0, s14
 80019e2:	eef0 0a67 	vmov.f32	s1, s15
 80019e6:	f000 f8ad 	bl	8001b44 <GPS_nmea_to_dec>
 80019ea:	eeb0 7a40 	vmov.f32	s14, s0
 80019ee:	eef0 7a60 	vmov.f32	s15, s1
 80019f2:	4b42      	ldr	r3, [pc, #264]	; (8001afc <GPS_parse+0x230>)
 80019f4:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e062      	b.n	8001ac2 <GPS_parse+0x1f6>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80019fc:	2206      	movs	r2, #6
 80019fe:	4945      	ldr	r1, [pc, #276]	; (8001b14 <GPS_parse+0x248>)
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f00d fcd3 	bl	800f3ac <strncmp>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d13a      	bne.n	8001a82 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNGLL,%lf,%c,%lf,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8001a0c:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <GPS_parse+0x24c>)
 8001a0e:	9303      	str	r3, [sp, #12]
 8001a10:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <GPS_parse+0x228>)
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <GPS_parse+0x218>)
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <GPS_parse+0x21c>)
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	4b33      	ldr	r3, [pc, #204]	; (8001aec <GPS_parse+0x220>)
 8001a1e:	4a34      	ldr	r2, [pc, #208]	; (8001af0 <GPS_parse+0x224>)
 8001a20:	493e      	ldr	r1, [pc, #248]	; (8001b1c <GPS_parse+0x250>)
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f00d fc3c 	bl	800f2a0 <siscanf>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	dd48      	ble.n	8001ac0 <GPS_parse+0x1f4>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001a2e:	4b33      	ldr	r3, [pc, #204]	; (8001afc <GPS_parse+0x230>)
 8001a30:	ed93 7b08 	vldr	d7, [r3, #32]
 8001a34:	4b31      	ldr	r3, [pc, #196]	; (8001afc <GPS_parse+0x230>)
 8001a36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a40:	eef0 0a67 	vmov.f32	s1, s15
 8001a44:	f000 f87e 	bl	8001b44 <GPS_nmea_to_dec>
 8001a48:	eeb0 7a40 	vmov.f32	s14, s0
 8001a4c:	eef0 7a60 	vmov.f32	s15, s1
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <GPS_parse+0x230>)
 8001a52:	ed83 7b02 	vstr	d7, [r3, #8]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001a56:	4b29      	ldr	r3, [pc, #164]	; (8001afc <GPS_parse+0x230>)
 8001a58:	ed93 7b06 	vldr	d7, [r3, #24]
 8001a5c:	4b27      	ldr	r3, [pc, #156]	; (8001afc <GPS_parse+0x230>)
 8001a5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a62:	4618      	mov	r0, r3
 8001a64:	eeb0 0a47 	vmov.f32	s0, s14
 8001a68:	eef0 0a67 	vmov.f32	s1, s15
 8001a6c:	f000 f86a 	bl	8001b44 <GPS_nmea_to_dec>
 8001a70:	eeb0 7a40 	vmov.f32	s14, s0
 8001a74:	eef0 7a60 	vmov.f32	s15, s1
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <GPS_parse+0x230>)
 8001a7a:	ed83 7b00 	vstr	d7, [r3]
        	return 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e01f      	b.n	8001ac2 <GPS_parse+0x1f6>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8001a82:	2206      	movs	r2, #6
 8001a84:	4926      	ldr	r1, [pc, #152]	; (8001b20 <GPS_parse+0x254>)
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f00d fc90 	bl	800f3ac <strncmp>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d116      	bne.n	8001ac0 <GPS_parse+0x1f4>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <GPS_parse+0x258>)
 8001a94:	9305      	str	r3, [sp, #20]
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <GPS_parse+0x25c>)
 8001a98:	9304      	str	r3, [sp, #16]
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <GPS_parse+0x260>)
 8001a9c:	9303      	str	r3, [sp, #12]
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <GPS_parse+0x240>)
 8001aa0:	9302      	str	r3, [sp, #8]
 8001aa2:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <GPS_parse+0x264>)
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <GPS_parse+0x268>)
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <GPS_parse+0x26c>)
 8001aac:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <GPS_parse+0x270>)
 8001aae:	4924      	ldr	r1, [pc, #144]	; (8001b40 <GPS_parse+0x274>)
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f00d fbf5 	bl	800f2a0 <siscanf>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	dd01      	ble.n	8001ac0 <GPS_parse+0x1f4>
            return 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e000      	b.n	8001ac2 <GPS_parse+0x1f6>
    }
    return 0;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	080144a8 	.word	0x080144a8
 8001ad0:	20000640 	.word	0x20000640
 8001ad4:	2000063c 	.word	0x2000063c
 8001ad8:	20000638 	.word	0x20000638
 8001adc:	20000634 	.word	0x20000634
 8001ae0:	20000630 	.word	0x20000630
 8001ae4:	2000062d 	.word	0x2000062d
 8001ae8:	20000618 	.word	0x20000618
 8001aec:	2000062c 	.word	0x2000062c
 8001af0:	20000620 	.word	0x20000620
 8001af4:	20000628 	.word	0x20000628
 8001af8:	080144b0 	.word	0x080144b0
 8001afc:	20000600 	.word	0x20000600
 8001b00:	080144d8 	.word	0x080144d8
 8001b04:	2000064c 	.word	0x2000064c
 8001b08:	20000648 	.word	0x20000648
 8001b0c:	20000644 	.word	0x20000644
 8001b10:	080144e0 	.word	0x080144e0
 8001b14:	08014504 	.word	0x08014504
 8001b18:	20000650 	.word	0x20000650
 8001b1c:	0801450c 	.word	0x0801450c
 8001b20:	08014528 	.word	0x08014528
 8001b24:	20000668 	.word	0x20000668
 8001b28:	20000664 	.word	0x20000664
 8001b2c:	20000661 	.word	0x20000661
 8001b30:	20000660 	.word	0x20000660
 8001b34:	2000065c 	.word	0x2000065c
 8001b38:	20000658 	.word	0x20000658
 8001b3c:	20000654 	.word	0x20000654
 8001b40:	08014530 	.word	0x08014530

08001b44 <GPS_nmea_to_dec>:

double GPS_nmea_to_dec(double deg_coord, char nsew) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
    int degree = (int)(deg_coord/100);
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <GPS_nmea_to_dec+0xac>)
 8001b58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b5c:	f7fe fe96 	bl	800088c <__aeabi_ddiv>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7ff f816 	bl	8000b98 <__aeabi_d2iz>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
    double minutes = deg_coord - degree*100;
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	2264      	movs	r2, #100	; 0x64
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fcf3 	bl	8000564 <__aeabi_i2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b86:	f7fe fb9f 	bl	80002c8 <__aeabi_dsub>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double dec_deg = minutes / 60;
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <GPS_nmea_to_dec+0xb0>)
 8001b98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b9c:	f7fe fe76 	bl	800088c <__aeabi_ddiv>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double decimal = degree + dec_deg;
 8001ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001baa:	f7fe fcdb 	bl	8000564 <__aeabi_i2d>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bb6:	f7fe fb89 	bl	80002cc <__adddf3>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b53      	cmp	r3, #83	; 0x53
 8001bc6:	d002      	beq.n	8001bce <GPS_nmea_to_dec+0x8a>
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	2b57      	cmp	r3, #87	; 0x57
 8001bcc:	d105      	bne.n	8001bda <GPS_nmea_to_dec+0x96>
        decimal *= -1;
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    return decimal;
 8001bda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bde:	ec43 2b17 	vmov	d7, r2, r3
}
 8001be2:	eeb0 0a47 	vmov.f32	s0, s14
 8001be6:	eef0 0a67 	vmov.f32	s1, s15
 8001bea:	3730      	adds	r7, #48	; 0x30
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40590000 	.word	0x40590000
 8001bf4:	404e0000 	.word	0x404e0000

08001bf8 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001bfe:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <MX_I2C2_Init+0x78>)
 8001c00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c04:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <MX_I2C2_Init+0x7c>)
 8001c06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c28:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c34:	480d      	ldr	r0, [pc, #52]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c36:	f004 fac5 	bl	80061c4 <HAL_I2C_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c40:	f001 fdcc 	bl	80037dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c44:	2100      	movs	r1, #0
 8001c46:	4809      	ldr	r0, [pc, #36]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c48:	f005 fa7b 	bl	8007142 <HAL_I2CEx_ConfigAnalogFilter>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001c52:	f001 fdc3 	bl	80037dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c56:	2100      	movs	r1, #0
 8001c58:	4804      	ldr	r0, [pc, #16]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c5a:	f005 faae 	bl	80071ba <HAL_I2CEx_ConfigDigitalFilter>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001c64:	f001 fdba 	bl	80037dc <Error_Handler>
  }

}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200006c4 	.word	0x200006c4
 8001c70:	40005800 	.word	0x40005800
 8001c74:	000186a0 	.word	0x000186a0

08001c78 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <MX_I2C3_Init+0x74>)
 8001c7e:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <MX_I2C3_Init+0x78>)
 8001c80:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <MX_I2C3_Init+0x74>)
 8001c84:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <MX_I2C3_Init+0x7c>)
 8001c86:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_I2C3_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <MX_I2C3_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MX_I2C3_Init+0x74>)
 8001c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c9a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <MX_I2C3_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <MX_I2C3_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <MX_I2C3_Init+0x74>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <MX_I2C3_Init+0x74>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001cb4:	480d      	ldr	r0, [pc, #52]	; (8001cec <MX_I2C3_Init+0x74>)
 8001cb6:	f004 fa85 	bl	80061c4 <HAL_I2C_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001cc0:	f001 fd8c 	bl	80037dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4809      	ldr	r0, [pc, #36]	; (8001cec <MX_I2C3_Init+0x74>)
 8001cc8:	f005 fa3b 	bl	8007142 <HAL_I2CEx_ConfigAnalogFilter>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001cd2:	f001 fd83 	bl	80037dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4804      	ldr	r0, [pc, #16]	; (8001cec <MX_I2C3_Init+0x74>)
 8001cda:	f005 fa6e 	bl	80071ba <HAL_I2CEx_ConfigDigitalFilter>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001ce4:	f001 fd7a 	bl	80037dc <Error_Handler>
  }

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000670 	.word	0x20000670
 8001cf0:	40005c00 	.word	0x40005c00
 8001cf4:	000186a0 	.word	0x000186a0

08001cf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	; 0x30
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a42      	ldr	r2, [pc, #264]	; (8001e20 <HAL_I2C_MspInit+0x128>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12d      	bne.n	8001d76 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a40      	ldr	r2, [pc, #256]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3c:	2312      	movs	r3, #18
 8001d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	4619      	mov	r1, r3
 8001d52:	4835      	ldr	r0, [pc, #212]	; (8001e28 <HAL_I2C_MspInit+0x130>)
 8001d54:	f004 f826 	bl	8005da4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	4a30      	ldr	r2, [pc, #192]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001d62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d66:	6413      	str	r3, [r2, #64]	; 0x40
 8001d68:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001d74:	e050      	b.n	8001e18 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a2c      	ldr	r2, [pc, #176]	; (8001e2c <HAL_I2C_MspInit+0x134>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d14b      	bne.n	8001e18 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4a26      	ldr	r2, [pc, #152]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbe:	2312      	movs	r3, #18
 8001dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dca:	2304      	movs	r3, #4
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4816      	ldr	r0, [pc, #88]	; (8001e30 <HAL_I2C_MspInit+0x138>)
 8001dd6:	f003 ffe5 	bl	8005da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de0:	2312      	movs	r3, #18
 8001de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dec:	2304      	movs	r3, #4
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	4619      	mov	r1, r3
 8001df6:	480f      	ldr	r0, [pc, #60]	; (8001e34 <HAL_I2C_MspInit+0x13c>)
 8001df8:	f003 ffd4 	bl	8005da4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001e06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_I2C_MspInit+0x12c>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
}
 8001e18:	bf00      	nop
 8001e1a:	3730      	adds	r7, #48	; 0x30
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40005800 	.word	0x40005800
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020400 	.word	0x40020400
 8001e2c:	40005c00 	.word	0x40005c00
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40020000 	.word	0x40020000

08001e38 <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <lsm6dsl_init+0xcc>)
 8001e42:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 8001e44:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <lsm6dsl_init+0xd0>)
 8001e46:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 8001e48:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <lsm6dsl_init+0xd4>)
 8001e4a:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001e4c:	200a      	movs	r0, #10
 8001e4e:	f000 f9e7 	bl	8002220 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001e52:	f107 030c 	add.w	r3, r7, #12
 8001e56:	492e      	ldr	r1, [pc, #184]	; (8001f10 <lsm6dsl_init+0xd8>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fd09 	bl	8002870 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <lsm6dsl_init+0xd8>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b6a      	cmp	r3, #106	; 0x6a
 8001e64:	d007      	beq.n	8001e76 <lsm6dsl_init+0x3e>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2102      	movs	r1, #2
 8001e6a:	482a      	ldr	r0, [pc, #168]	; (8001f14 <lsm6dsl_init+0xdc>)
 8001e6c:	f004 f95e 	bl	800612c <HAL_GPIO_WritePin>
		__BKPT();
 8001e70:	be00      	bkpt	0x0000
		Error_Handler();
 8001e72:	f001 fcb3 	bl	80037dc <Error_Handler>
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fd08 	bl	8002892 <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	4924      	ldr	r1, [pc, #144]	; (8001f18 <lsm6dsl_init+0xe0>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fd28 	bl	80028de <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <lsm6dsl_init+0xe0>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f5      	bne.n	8001e82 <lsm6dsl_init+0x4a>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 fbf9 	bl	8002694 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fb81 	bl	80025b0 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fbc7 	bl	8002648 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	2103      	movs	r1, #3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fb4f 	bl	8002564 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	2106      	movs	r1, #6
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fb95 	bl	80025fc <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	2111      	movs	r1, #17
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fd19 	bl	8002910 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	21a8      	movs	r1, #168	; 0xa8
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fd4a 	bl	800297e <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	461c      	mov	r4, r3
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ef6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd90      	pop	{r4, r7, pc}
 8001f02:	bf00      	nop
 8001f04:	08002139 	.word	0x08002139
 8001f08:	08002173 	.word	0x08002173
 8001f0c:	20000670 	.word	0x20000670
 8001f10:	2000022e 	.word	0x2000022e
 8001f14:	40020800 	.word	0x40020800
 8001f18:	2000022f 	.word	0x2000022f

08001f1c <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	1d3c      	adds	r4, r7, #4
 8001f24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f28:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001f2a:	f107 0217 	add.w	r2, r7, #23
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fbd4 	bl	80026e0 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d02d      	beq.n	8001f9a <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001f3e:	2206      	movs	r2, #6
 8001f40:	2100      	movs	r1, #0
 8001f42:	4818      	ldr	r0, [pc, #96]	; (8001fa4 <get_acceleration+0x88>)
 8001f44:	f00c fa4a 	bl	800e3dc <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	4916      	ldr	r1, [pc, #88]	; (8001fa4 <get_acceleration+0x88>)
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fc44 	bl	80027da <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <get_acceleration+0x88>)
 8001f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 fad3 	bl	8002504 <lsm6dsl_from_fs8g_to_mg>
 8001f5e:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <get_acceleration+0x88>)
 8001f6a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001f72:	4610      	mov	r0, r2
 8001f74:	f000 fac6 	bl	8002504 <lsm6dsl_from_fs8g_to_mg>
 8001f78:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 8001f7c:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <get_acceleration+0x88>)
 8001f82:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f000 fab9 	bl	8002504 <lsm6dsl_from_fs8g_to_mg>
 8001f92:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 8001f96:	edc4 7a00 	vstr	s15, [r4]
	}

}
 8001f9a:	bf00      	nop
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd90      	pop	{r4, r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000220 	.word	0x20000220

08001fa8 <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	1d3c      	adds	r4, r7, #4
 8001fb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001fb4:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001fb6:	f107 0217 	add.w	r2, r7, #23
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fba7 	bl	8002712 <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 8001fc4:	7dfb      	ldrb	r3, [r7, #23]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d02d      	beq.n	8002026 <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001fca:	2206      	movs	r2, #6
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4818      	ldr	r0, [pc, #96]	; (8002030 <get_angvelocity+0x88>)
 8001fd0:	f00c fa04 	bl	800e3dc <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	4916      	ldr	r1, [pc, #88]	; (8002030 <get_angvelocity+0x88>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fbb3 	bl	8002744 <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001fde:	4b14      	ldr	r3, [pc, #80]	; (8002030 <get_angvelocity+0x88>)
 8001fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 faa5 	bl	8002534 <lsm6dsl_from_fs2000dps_to_mdps>
 8001fea:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <get_angvelocity+0x88>)
 8001ff6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001ffe:	4610      	mov	r0, r2
 8002000:	f000 fa98 	bl	8002534 <lsm6dsl_from_fs2000dps_to_mdps>
 8002004:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 8002008:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <get_angvelocity+0x88>)
 800200e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8002018:	4610      	mov	r0, r2
 800201a:	f000 fa8b 	bl	8002534 <lsm6dsl_from_fs2000dps_to_mdps>
 800201e:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 8002022:	edc4 7a00 	vstr	s15, [r4]
	}
}
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	bf00      	nop
 8002030:	20000228 	.word	0x20000228

08002034 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 800203c:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <lps22hh_init+0x94>)
 800203e:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 8002040:	4b22      	ldr	r3, [pc, #136]	; (80020cc <lps22hh_init+0x98>)
 8002042:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 8002044:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <lps22hh_init+0x9c>)
 8002046:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8002048:	200a      	movs	r0, #10
 800204a:	f000 f8e9 	bl	8002220 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 800204e:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <lps22hh_init+0xa0>)
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	491e      	ldr	r1, [pc, #120]	; (80020d4 <lps22hh_init+0xa0>)
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f9d1 	bl	8002402 <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <lps22hh_init+0xa0>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2bb3      	cmp	r3, #179	; 0xb3
 8002066:	d007      	beq.n	8002078 <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002068:	2201      	movs	r2, #1
 800206a:	2104      	movs	r1, #4
 800206c:	481a      	ldr	r0, [pc, #104]	; (80020d8 <lps22hh_init+0xa4>)
 800206e:	f004 f85d 	bl	800612c <HAL_GPIO_WritePin>
		__BKPT();
 8002072:	be00      	bkpt	0x0000
		Error_Handler();
 8002074:	f001 fbb2 	bl	80037dc <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	2101      	movs	r1, #1
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f9d0 	bl	8002424 <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	4914      	ldr	r1, [pc, #80]	; (80020dc <lps22hh_init+0xa8>)
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f9f0 	bl	8002470 <lps22hh_reset_get>
	} while (rst_lps22hh);
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <lps22hh_init+0xa8>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f5      	bne.n	8002084 <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	2101      	movs	r1, #1
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f912 	bl	80022c8 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_200_Hz);
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	2107      	movs	r1, #7
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f932 	bl	8002314 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	461c      	mov	r4, r3
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd90      	pop	{r4, r7, pc}
 80020c8:	080021ad 	.word	0x080021ad
 80020cc:	080021e7 	.word	0x080021e7
 80020d0:	20000670 	.word	0x20000670
 80020d4:	20000234 	.word	0x20000234
 80020d8:	40020800 	.word	0x40020800
 80020dc:	20000235 	.word	0x20000235

080020e0 <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	1d3c      	adds	r4, r7, #4
 80020e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020ec:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80020ee:	f107 0214 	add.w	r2, r7, #20
 80020f2:	1d38      	adds	r0, r7, #4
 80020f4:	2301      	movs	r3, #1
 80020f6:	2127      	movs	r1, #39	; 0x27
 80020f8:	f000 f89d 	bl	8002236 <lps22hh_read_reg>

	if (reg.status.p_da) {
 80020fc:	7d3b      	ldrb	r3, [r7, #20]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d011      	beq.n	800212c <get_pressure+0x4c>
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <get_pressure+0x54>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	4908      	ldr	r1, [pc, #32]	; (8002134 <get_pressure+0x54>)
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f94c 	bl	80023b0 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <get_pressure+0x54>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f8bb 	bl	8002298 <lps22hh_from_lsb_to_hpa>
 8002122:	eef0 7a40 	vmov.f32	s15, s0
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800212c:	bf00      	nop
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	bd90      	pop	{r4, r7, pc}
 8002134:	20000230 	.word	0x20000230

08002138 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af04      	add	r7, sp, #16
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	461a      	mov	r2, r3
 8002144:	460b      	mov	r3, r1
 8002146:	72fb      	strb	r3, [r7, #11]
 8002148:	4613      	mov	r3, r2
 800214a:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 800214c:	7afb      	ldrb	r3, [r7, #11]
 800214e:	b29a      	uxth	r2, r3
 8002150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002154:	9302      	str	r3, [sp, #8]
 8002156:	893b      	ldrh	r3, [r7, #8]
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2301      	movs	r3, #1
 8002160:	21d5      	movs	r1, #213	; 0xd5
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f004 f972 	bl	800644c <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b088      	sub	sp, #32
 8002176:	af04      	add	r7, sp, #16
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	461a      	mov	r2, r3
 800217e:	460b      	mov	r3, r1
 8002180:	72fb      	strb	r3, [r7, #11]
 8002182:	4613      	mov	r3, r2
 8002184:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 8002186:	7afb      	ldrb	r3, [r7, #11]
 8002188:	b29a      	uxth	r2, r3
 800218a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218e:	9302      	str	r3, [sp, #8]
 8002190:	893b      	ldrh	r3, [r7, #8]
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2301      	movs	r3, #1
 800219a:	21d5      	movs	r1, #213	; 0xd5
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f004 fa4f 	bl	8006640 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af04      	add	r7, sp, #16
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	461a      	mov	r2, r3
 80021b8:	460b      	mov	r3, r1
 80021ba:	72fb      	strb	r3, [r7, #11]
 80021bc:	4613      	mov	r3, r2
 80021be:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 80021c0:	7afb      	ldrb	r3, [r7, #11]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	893b      	ldrh	r3, [r7, #8]
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	2301      	movs	r3, #1
 80021d4:	21b9      	movs	r1, #185	; 0xb9
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f004 f938 	bl	800644c <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b088      	sub	sp, #32
 80021ea:	af04      	add	r7, sp, #16
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	461a      	mov	r2, r3
 80021f2:	460b      	mov	r3, r1
 80021f4:	72fb      	strb	r3, [r7, #11]
 80021f6:	4613      	mov	r3, r2
 80021f8:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 80021fa:	7afb      	ldrb	r3, [r7, #11]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002202:	9302      	str	r3, [sp, #8]
 8002204:	893b      	ldrh	r3, [r7, #8]
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	21b9      	movs	r1, #185	; 0xb9
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f004 fa15 	bl	8006640 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f002 fe81 	bl	8004f30 <HAL_Delay>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002236:	b590      	push	{r4, r7, lr}
 8002238:	b087      	sub	sp, #28
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	461a      	mov	r2, r3
 8002242:	460b      	mov	r3, r1
 8002244:	72fb      	strb	r3, [r7, #11]
 8002246:	4613      	mov	r3, r2
 8002248:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685c      	ldr	r4, [r3, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6898      	ldr	r0, [r3, #8]
 8002252:	893b      	ldrh	r3, [r7, #8]
 8002254:	7af9      	ldrb	r1, [r7, #11]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	47a0      	blx	r4
 800225a:	6178      	str	r0, [r7, #20]

  return ret;
 800225c:	697b      	ldr	r3, [r7, #20]
}
 800225e:	4618      	mov	r0, r3
 8002260:	371c      	adds	r7, #28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd90      	pop	{r4, r7, pc}

08002266 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002266:	b590      	push	{r4, r7, lr}
 8002268:	b087      	sub	sp, #28
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	461a      	mov	r2, r3
 8002272:	460b      	mov	r3, r1
 8002274:	72fb      	strb	r3, [r7, #11]
 8002276:	4613      	mov	r3, r2
 8002278:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681c      	ldr	r4, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6898      	ldr	r0, [r3, #8]
 8002282:	893b      	ldrh	r3, [r7, #8]
 8002284:	7af9      	ldrb	r1, [r7, #11]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	47a0      	blx	r4
 800228a:	6178      	str	r0, [r7, #20]

  return ret;
 800228c:	697b      	ldr	r3, [r7, #20]
}
 800228e:	4618      	mov	r0, r3
 8002290:	371c      	adds	r7, #28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd90      	pop	{r4, r7, pc}
	...

08002298 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	ee07 3a90 	vmov	s15, r3
 80022a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80022c4 <lps22hh_from_lsb_to_hpa+0x2c>
 80022ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80022b6:	eeb0 0a67 	vmov.f32	s0, s15
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	49800000 	.word	0x49800000

080022c8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80022d4:	f107 0208 	add.w	r2, r7, #8
 80022d8:	2301      	movs	r3, #1
 80022da:	2110      	movs	r1, #16
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ffaa 	bl	8002236 <lps22hh_read_reg>
 80022e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10f      	bne.n	800230a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	7a3b      	ldrb	r3, [r7, #8]
 80022f4:	f362 0341 	bfi	r3, r2, #1, #1
 80022f8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80022fa:	f107 0208 	add.w	r2, r7, #8
 80022fe:	2301      	movs	r3, #1
 8002300:	2110      	movs	r1, #16
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ffaf 	bl	8002266 <lps22hh_write_reg>
 8002308:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002320:	f107 0210 	add.w	r2, r7, #16
 8002324:	2301      	movs	r3, #1
 8002326:	2110      	movs	r1, #16
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff84 	bl	8002236 <lps22hh_read_reg>
 800232e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d107      	bne.n	8002346 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002336:	f107 020c 	add.w	r2, r7, #12
 800233a:	2301      	movs	r3, #1
 800233c:	2111      	movs	r1, #17
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ff79 	bl	8002236 <lps22hh_read_reg>
 8002344:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	b2da      	uxtb	r2, r3
 8002354:	7c3b      	ldrb	r3, [r7, #16]
 8002356:	f362 1306 	bfi	r3, r2, #4, #3
 800235a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800235c:	f107 0210 	add.w	r2, r7, #16
 8002360:	2301      	movs	r3, #1
 8002362:	2110      	movs	r1, #16
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff7e 	bl	8002266 <lps22hh_write_reg>
 800236a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d119      	bne.n	80023a6 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	b2da      	uxtb	r2, r3
 800237c:	7b3b      	ldrb	r3, [r7, #12]
 800237e:	f362 0341 	bfi	r3, r2, #1, #1
 8002382:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	08db      	lsrs	r3, r3, #3
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	b2da      	uxtb	r2, r3
 800238e:	7b3b      	ldrb	r3, [r7, #12]
 8002390:	f362 0300 	bfi	r3, r2, #0, #1
 8002394:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002396:	f107 020c 	add.w	r2, r7, #12
 800239a:	2301      	movs	r3, #1
 800239c:	2111      	movs	r1, #17
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ff61 	bl	8002266 <lps22hh_write_reg>
 80023a4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80023a6:	697b      	ldr	r3, [r7, #20]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80023ba:	f107 0208 	add.w	r2, r7, #8
 80023be:	2303      	movs	r3, #3
 80023c0:	2128      	movs	r1, #40	; 0x28
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ff37 	bl	8002236 <lps22hh_read_reg>
 80023c8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80023ca:	7abb      	ldrb	r3, [r7, #10]
 80023cc:	461a      	mov	r2, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	7a7a      	ldrb	r2, [r7, #9]
 80023da:	441a      	add	r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	7a3a      	ldrb	r2, [r7, #8]
 80023e8:	441a      	add	r2, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	021a      	lsls	r2, r3, #8
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	601a      	str	r2, [r3, #0]

  return ret;
 80023f8:	68fb      	ldr	r3, [r7, #12]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800240c:	2301      	movs	r3, #1
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	210f      	movs	r1, #15
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff0f 	bl	8002236 <lps22hh_read_reg>
 8002418:	60f8      	str	r0, [r7, #12]

  return ret;
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8002430:	f107 0208 	add.w	r2, r7, #8
 8002434:	2301      	movs	r3, #1
 8002436:	2111      	movs	r1, #17
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff fefc 	bl	8002236 <lps22hh_read_reg>
 800243e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10f      	bne.n	8002466 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	b2da      	uxtb	r2, r3
 800244e:	7a3b      	ldrb	r3, [r7, #8]
 8002450:	f362 0382 	bfi	r3, r2, #2, #1
 8002454:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8002456:	f107 0208 	add.w	r2, r7, #8
 800245a:	2301      	movs	r3, #1
 800245c:	2111      	movs	r1, #17
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ff01 	bl	8002266 <lps22hh_write_reg>
 8002464:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800247a:	f107 0208 	add.w	r2, r7, #8
 800247e:	2301      	movs	r3, #1
 8002480:	2111      	movs	r1, #17
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff fed7 	bl	8002236 <lps22hh_read_reg>
 8002488:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 800248a:	7a3b      	ldrb	r3, [r7, #8]
 800248c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	701a      	strb	r2, [r3, #0]

  return ret;
 8002498:	68fb      	ldr	r3, [r7, #12]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80024a2:	b590      	push	{r4, r7, lr}
 80024a4:	b087      	sub	sp, #28
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	461a      	mov	r2, r3
 80024ae:	460b      	mov	r3, r1
 80024b0:	72fb      	strb	r3, [r7, #11]
 80024b2:	4613      	mov	r3, r2
 80024b4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	685c      	ldr	r4, [r3, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6898      	ldr	r0, [r3, #8]
 80024be:	893b      	ldrh	r3, [r7, #8]
 80024c0:	7af9      	ldrb	r1, [r7, #11]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	47a0      	blx	r4
 80024c6:	6178      	str	r0, [r7, #20]

  return ret;
 80024c8:	697b      	ldr	r3, [r7, #20]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}

080024d2 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80024d2:	b590      	push	{r4, r7, lr}
 80024d4:	b087      	sub	sp, #28
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	461a      	mov	r2, r3
 80024de:	460b      	mov	r3, r1
 80024e0:	72fb      	strb	r3, [r7, #11]
 80024e2:	4613      	mov	r3, r2
 80024e4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681c      	ldr	r4, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6898      	ldr	r0, [r3, #8]
 80024ee:	893b      	ldrh	r3, [r7, #8]
 80024f0:	7af9      	ldrb	r1, [r7, #11]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	47a0      	blx	r4
 80024f6:	6178      	str	r0, [r7, #20]

  return ret;
 80024f8:	697b      	ldr	r3, [r7, #20]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd90      	pop	{r4, r7, pc}
	...

08002504 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 800250e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002530 <lsm6dsl_from_fs8g_to_mg+0x2c>
 800251e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002522:	eeb0 0a67 	vmov.f32	s0, s15
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	3e79db23 	.word	0x3e79db23

08002534 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800253e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800254a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002560 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 800254e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002552:	eeb0 0a67 	vmov.f32	s0, s15
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	428c0000 	.word	0x428c0000

08002564 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002570:	f107 0208 	add.w	r2, r7, #8
 8002574:	2301      	movs	r3, #1
 8002576:	2110      	movs	r1, #16
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ff92 	bl	80024a2 <lsm6dsl_read_reg>
 800257e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	b2da      	uxtb	r2, r3
 800258e:	7a3b      	ldrb	r3, [r7, #8]
 8002590:	f362 0383 	bfi	r3, r2, #2, #2
 8002594:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002596:	f107 0208 	add.w	r2, r7, #8
 800259a:	2301      	movs	r3, #1
 800259c:	2110      	movs	r1, #16
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff ff97 	bl	80024d2 <lsm6dsl_write_reg>
 80025a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80025bc:	f107 0208 	add.w	r2, r7, #8
 80025c0:	2301      	movs	r3, #1
 80025c2:	2110      	movs	r1, #16
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ff6c 	bl	80024a2 <lsm6dsl_read_reg>
 80025ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10f      	bne.n	80025f2 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	7a3b      	ldrb	r3, [r7, #8]
 80025dc:	f362 1307 	bfi	r3, r2, #4, #4
 80025e0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80025e2:	f107 0208 	add.w	r2, r7, #8
 80025e6:	2301      	movs	r3, #1
 80025e8:	2110      	movs	r1, #16
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff71 	bl	80024d2 <lsm6dsl_write_reg>
 80025f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025f2:	68fb      	ldr	r3, [r7, #12]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002608:	f107 0208 	add.w	r2, r7, #8
 800260c:	2301      	movs	r3, #1
 800260e:	2111      	movs	r1, #17
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff46 	bl	80024a2 <lsm6dsl_read_reg>
 8002616:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10f      	bne.n	800263e <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	b2da      	uxtb	r2, r3
 8002626:	7a3b      	ldrb	r3, [r7, #8]
 8002628:	f362 0343 	bfi	r3, r2, #1, #3
 800262c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800262e:	f107 0208 	add.w	r2, r7, #8
 8002632:	2301      	movs	r3, #1
 8002634:	2111      	movs	r1, #17
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff ff4b 	bl	80024d2 <lsm6dsl_write_reg>
 800263c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002654:	f107 0208 	add.w	r2, r7, #8
 8002658:	2301      	movs	r3, #1
 800265a:	2111      	movs	r1, #17
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ff20 	bl	80024a2 <lsm6dsl_read_reg>
 8002662:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	b2da      	uxtb	r2, r3
 8002672:	7a3b      	ldrb	r3, [r7, #8]
 8002674:	f362 1307 	bfi	r3, r2, #4, #4
 8002678:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800267a:	f107 0208 	add.w	r2, r7, #8
 800267e:	2301      	movs	r3, #1
 8002680:	2111      	movs	r1, #17
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ff25 	bl	80024d2 <lsm6dsl_write_reg>
 8002688:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80026a0:	f107 0208 	add.w	r2, r7, #8
 80026a4:	2301      	movs	r3, #1
 80026a6:	2112      	movs	r1, #18
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff fefa 	bl	80024a2 <lsm6dsl_read_reg>
 80026ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	7a3b      	ldrb	r3, [r7, #8]
 80026c0:	f362 1386 	bfi	r3, r2, #6, #1
 80026c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80026c6:	f107 0208 	add.w	r2, r7, #8
 80026ca:	2301      	movs	r3, #1
 80026cc:	2112      	movs	r1, #18
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff feff 	bl	80024d2 <lsm6dsl_write_reg>
 80026d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80026d6:	68fb      	ldr	r3, [r7, #12]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 80026ea:	f107 0208 	add.w	r2, r7, #8
 80026ee:	2301      	movs	r3, #1
 80026f0:	211e      	movs	r1, #30
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fed5 	bl	80024a2 <lsm6dsl_read_reg>
 80026f8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80026fa:	7a3b      	ldrb	r3, [r7, #8]
 80026fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	701a      	strb	r2, [r3, #0]

  return ret;
 8002708:	68fb      	ldr	r3, [r7, #12]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 800271c:	f107 0208 	add.w	r2, r7, #8
 8002720:	2301      	movs	r3, #1
 8002722:	211e      	movs	r1, #30
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff febc 	bl	80024a2 <lsm6dsl_read_reg>
 800272a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 800272c:	7a3b      	ldrb	r3, [r7, #8]
 800272e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	701a      	strb	r2, [r3, #0]

  return ret;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800274e:	f107 020c 	add.w	r2, r7, #12
 8002752:	2306      	movs	r3, #6
 8002754:	2122      	movs	r1, #34	; 0x22
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff fea3 	bl	80024a2 <lsm6dsl_read_reg>
 800275c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800275e:	7b7b      	ldrb	r3, [r7, #13]
 8002760:	b21a      	sxth	r2, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800276c:	b29b      	uxth	r3, r3
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	b29a      	uxth	r2, r3
 8002772:	7b3b      	ldrb	r3, [r7, #12]
 8002774:	b29b      	uxth	r3, r3
 8002776:	4413      	add	r3, r2
 8002778:	b29b      	uxth	r3, r3
 800277a:	b21a      	sxth	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	3302      	adds	r3, #2
 8002786:	b212      	sxth	r2, r2
 8002788:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	3302      	adds	r3, #2
 800278e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002792:	b29b      	uxth	r3, r3
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	b29a      	uxth	r2, r3
 8002798:	7bbb      	ldrb	r3, [r7, #14]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4413      	add	r3, r2
 800279e:	b29a      	uxth	r2, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	3302      	adds	r3, #2
 80027a4:	b212      	sxth	r2, r2
 80027a6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80027a8:	7c7a      	ldrb	r2, [r7, #17]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	3304      	adds	r3, #4
 80027ae:	b212      	sxth	r2, r2
 80027b0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	3304      	adds	r3, #4
 80027b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	b29a      	uxth	r2, r3
 80027c0:	7c3b      	ldrb	r3, [r7, #16]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	3304      	adds	r3, #4
 80027cc:	b212      	sxth	r2, r2
 80027ce:	801a      	strh	r2, [r3, #0]

  return ret;
 80027d0:	697b      	ldr	r3, [r7, #20]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80027e4:	f107 020c 	add.w	r2, r7, #12
 80027e8:	2306      	movs	r3, #6
 80027ea:	2128      	movs	r1, #40	; 0x28
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff fe58 	bl	80024a2 <lsm6dsl_read_reg>
 80027f2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80027f4:	7b7b      	ldrb	r3, [r7, #13]
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002802:	b29b      	uxth	r3, r3
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	b29a      	uxth	r2, r3
 8002808:	7b3b      	ldrb	r3, [r7, #12]
 800280a:	b29b      	uxth	r3, r3
 800280c:	4413      	add	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	b21a      	sxth	r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002816:	7bfa      	ldrb	r2, [r7, #15]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	3302      	adds	r3, #2
 800281c:	b212      	sxth	r2, r2
 800281e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	3302      	adds	r3, #2
 8002824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002828:	b29b      	uxth	r3, r3
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	b29a      	uxth	r2, r3
 800282e:	7bbb      	ldrb	r3, [r7, #14]
 8002830:	b29b      	uxth	r3, r3
 8002832:	4413      	add	r3, r2
 8002834:	b29a      	uxth	r2, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	3302      	adds	r3, #2
 800283a:	b212      	sxth	r2, r2
 800283c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800283e:	7c7a      	ldrb	r2, [r7, #17]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	3304      	adds	r3, #4
 8002844:	b212      	sxth	r2, r2
 8002846:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	3304      	adds	r3, #4
 800284c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002850:	b29b      	uxth	r3, r3
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	b29a      	uxth	r2, r3
 8002856:	7c3b      	ldrb	r3, [r7, #16]
 8002858:	b29b      	uxth	r3, r3
 800285a:	4413      	add	r3, r2
 800285c:	b29a      	uxth	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	3304      	adds	r3, #4
 8002862:	b212      	sxth	r2, r2
 8002864:	801a      	strh	r2, [r3, #0]

  return ret;
 8002866:	697b      	ldr	r3, [r7, #20]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800287a:	2301      	movs	r3, #1
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	210f      	movs	r1, #15
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff fe0e 	bl	80024a2 <lsm6dsl_read_reg>
 8002886:	60f8      	str	r0, [r7, #12]

  return ret;
 8002888:	68fb      	ldr	r3, [r7, #12]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800289e:	f107 0208 	add.w	r2, r7, #8
 80028a2:	2301      	movs	r3, #1
 80028a4:	2112      	movs	r1, #18
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fdfb 	bl	80024a2 <lsm6dsl_read_reg>
 80028ac:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10f      	bne.n	80028d4 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	7a3b      	ldrb	r3, [r7, #8]
 80028be:	f362 0300 	bfi	r3, r2, #0, #1
 80028c2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80028c4:	f107 0208 	add.w	r2, r7, #8
 80028c8:	2301      	movs	r3, #1
 80028ca:	2112      	movs	r1, #18
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff fe00 	bl	80024d2 <lsm6dsl_write_reg>
 80028d2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028d4:	68fb      	ldr	r3, [r7, #12]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80028e8:	f107 0208 	add.w	r2, r7, #8
 80028ec:	2301      	movs	r3, #1
 80028ee:	2112      	movs	r1, #18
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fdd6 	bl	80024a2 <lsm6dsl_read_reg>
 80028f6:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80028f8:	7a3b      	ldrb	r3, [r7, #8]
 80028fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	701a      	strb	r2, [r3, #0]

  return ret;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 800291c:	f107 0208 	add.w	r2, r7, #8
 8002920:	2301      	movs	r3, #1
 8002922:	2117      	movs	r1, #23
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff fdbc 	bl	80024a2 <lsm6dsl_read_reg>
 800292a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d120      	bne.n	8002974 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	b2da      	uxtb	r2, r3
 800293c:	7a3b      	ldrb	r3, [r7, #8]
 800293e:	f362 03c3 	bfi	r3, r2, #3, #1
 8002942:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	b2da      	uxtb	r2, r3
 800294c:	7a3b      	ldrb	r3, [r7, #8]
 800294e:	f362 1346 	bfi	r3, r2, #5, #2
 8002952:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8002954:	7a3b      	ldrb	r3, [r7, #8]
 8002956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 800295c:	7a3b      	ldrb	r3, [r7, #8]
 800295e:	f36f 0382 	bfc	r3, #2, #1
 8002962:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8002964:	f107 0208 	add.w	r2, r7, #8
 8002968:	2301      	movs	r3, #1
 800296a:	2117      	movs	r1, #23
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff fdb0 	bl	80024d2 <lsm6dsl_write_reg>
 8002972:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002974:	68fb      	ldr	r3, [r7, #12]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800298a:	f107 0208 	add.w	r2, r7, #8
 800298e:	2301      	movs	r3, #1
 8002990:	2116      	movs	r1, #22
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff fd85 	bl	80024a2 <lsm6dsl_read_reg>
 8002998:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d157      	bne.n	8002a50 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	7a3b      	ldrb	r3, [r7, #8]
 80029ac:	f362 1305 	bfi	r3, r2, #4, #2
 80029b0:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	09db      	lsrs	r3, r3, #7
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	7a3b      	ldrb	r3, [r7, #8]
 80029c0:	f362 1386 	bfi	r3, r2, #6, #1
 80029c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80029c6:	f107 0208 	add.w	r2, r7, #8
 80029ca:	2301      	movs	r3, #1
 80029cc:	2116      	movs	r1, #22
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff fd7f 	bl	80024d2 <lsm6dsl_write_reg>
 80029d4:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d139      	bne.n	8002a50 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80029dc:	f107 020c 	add.w	r2, r7, #12
 80029e0:	2301      	movs	r3, #1
 80029e2:	2115      	movs	r1, #21
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff fd5c 	bl	80024a2 <lsm6dsl_read_reg>
 80029ea:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d12e      	bne.n	8002a50 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	7b3b      	ldrb	r3, [r7, #12]
 80029fc:	f362 0301 	bfi	r3, r2, #0, #2
 8002a00:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8002a02:	f107 020c 	add.w	r2, r7, #12
 8002a06:	2301      	movs	r3, #1
 8002a08:	2115      	movs	r1, #21
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff fd61 	bl	80024d2 <lsm6dsl_write_reg>
 8002a10:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d11b      	bne.n	8002a50 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8002a18:	f107 0210 	add.w	r2, r7, #16
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	2113      	movs	r1, #19
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fd3e 	bl	80024a2 <lsm6dsl_read_reg>
 8002a26:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d110      	bne.n	8002a50 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	08db      	lsrs	r3, r3, #3
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	7c3b      	ldrb	r3, [r7, #16]
 8002a3a:	f362 0341 	bfi	r3, r2, #1, #1
 8002a3e:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8002a40:	f107 0210 	add.w	r2, r7, #16
 8002a44:	2301      	movs	r3, #1
 8002a46:	2113      	movs	r1, #19
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff fd42 	bl	80024d2 <lsm6dsl_write_reg>
 8002a4e:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002a50:	697b      	ldr	r3, [r7, #20]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <radio_tx>:
#endif

// radio transmission wrapper
#ifdef USING_XTEND
// reception using UART DMA
void radio_tx(uint8_t *msg_buffer, uint16_t size) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
//	HAL_UART_Transmit(&huart3, msg_buffer, size, HAL_MAX_DELAY);
	HAL_UART_Transmit_DMA(&huart3, msg_buffer, size);
 8002a68:	887b      	ldrh	r3, [r7, #2]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4803      	ldr	r0, [pc, #12]	; (8002a7c <radio_tx+0x20>)
 8002a70:	f007 f9e2 	bl	8009e38 <HAL_UART_Transmit_DMA>

	#ifdef DEBUG_MODE
	debug_tx_uart(msg_buffer);
	#endif
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	200012f8 	.word	0x200012f8

08002a80 <tone>:
	#endif
}
#endif

// helper functions for buzzing
void tone(uint32_t duration, uint32_t repeats) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < repeats; i++) {
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	e013      	b.n	8002ab8 <tone+0x38>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002a90:	2108      	movs	r1, #8
 8002a92:	480e      	ldr	r0, [pc, #56]	; (8002acc <tone+0x4c>)
 8002a94:	f006 f9fa 	bl	8008e8c <HAL_TIM_PWM_Start>
		HAL_Delay(duration);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f002 fa49 	bl	8004f30 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002a9e:	2108      	movs	r1, #8
 8002aa0:	480a      	ldr	r0, [pc, #40]	; (8002acc <tone+0x4c>)
 8002aa2:	f006 fa31 	bl	8008f08 <HAL_TIM_PWM_Stop>
		if (repeats > 1)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d902      	bls.n	8002ab2 <tone+0x32>
			HAL_Delay(duration);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f002 fa3f 	bl	8004f30 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d3e7      	bcc.n	8002a90 <tone+0x10>
	}
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	200011f8 	.word	0x200011f8

08002ad0 <buzz_failure>:
void buzz_success(void) { tone(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS); };
void buzz_failure(void) { tone(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS); };
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ada:	f7ff ffd1 	bl	8002a80 <tone>
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aea:	f002 f9af 	bl	8004e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aee:	f000 f9c7 	bl	8002e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002af2:	f7fe fc15 	bl	8001320 <MX_GPIO_Init>
  MX_DMA_Init();
 8002af6:	f7fe fbcd 	bl	8001294 <MX_DMA_Init>
  MX_ADC1_Init();
 8002afa:	f7fe fb03 	bl	8001104 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002afe:	f7ff f87b 	bl	8001bf8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002b02:	f7ff f8b9 	bl	8001c78 <MX_I2C3_Init>
  MX_SPI2_Init();
 8002b06:	f001 fa51 	bl	8003fac <MX_SPI2_Init>
  MX_SPI4_Init();
 8002b0a:	f001 fa85 	bl	8004018 <MX_SPI4_Init>
  MX_SPI5_Init();
 8002b0e:	f001 fab9 	bl	8004084 <MX_SPI5_Init>
  MX_TIM2_Init();
 8002b12:	f001 fd33 	bl	800457c <MX_TIM2_Init>
  MX_UART8_Init();
 8002b16:	f001 ff3d 	bl	8004994 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8002b1a:	f001 ff65 	bl	80049e8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002b1e:	f001 ff8d 	bl	8004a3c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8002b22:	f008 f973 	bl	800ae0c <MX_FATFS_Init>
  MX_RTC_Init();
 8002b26:	f000 ff91 	bl	8003a4c <MX_RTC_Init>
  MX_TIM4_Init();
 8002b2a:	f001 fdeb 	bl	8004704 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002b2e:	f001 fd9b 	bl	8004668 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002b32:	f001 fe35 	bl	80047a0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // *** IMPORTANT: DMA Init function must be called before peripheral init! *** //

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, SET);
 8002b36:	2201      	movs	r2, #1
 8002b38:	2140      	movs	r1, #64	; 0x40
 8002b3a:	48aa      	ldr	r0, [pc, #680]	; (8002de4 <main+0x300>)
 8002b3c:	f003 faf6 	bl	800612c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, SET);
 8002b40:	2201      	movs	r2, #1
 8002b42:	2120      	movs	r1, #32
 8002b44:	48a7      	ldr	r0, [pc, #668]	; (8002de4 <main+0x300>)
 8002b46:	f003 faf1 	bl	800612c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_IO3_GPIO_Port, FLASH_IO3_Pin, SET);
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	2110      	movs	r1, #16
 8002b4e:	48a5      	ldr	r0, [pc, #660]	; (8002de4 <main+0x300>)
 8002b50:	f003 faec 	bl	800612c <HAL_GPIO_WritePin>

  // set other SPI CS pins high
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, SET);
 8002b54:	2201      	movs	r2, #1
 8002b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b5a:	48a3      	ldr	r0, [pc, #652]	; (8002de8 <main+0x304>)
 8002b5c:	f003 fae6 	bl	800612c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TH_CS_GPIO_Port, TH_CS_Pin, SET);
 8002b60:	2201      	movs	r2, #1
 8002b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b66:	48a1      	ldr	r0, [pc, #644]	; (8002dec <main+0x308>)
 8002b68:	f003 fae0 	bl	800612c <HAL_GPIO_WritePin>

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2102      	movs	r1, #2
 8002b70:	489f      	ldr	r0, [pc, #636]	; (8002df0 <main+0x30c>)
 8002b72:	f003 fadb 	bl	800612c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2104      	movs	r1, #4
 8002b7a:	489d      	ldr	r0, [pc, #628]	; (8002df0 <main+0x30c>)
 8002b7c:	f003 fad6 	bl	800612c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002b80:	2200      	movs	r2, #0
 8002b82:	2108      	movs	r1, #8
 8002b84:	489a      	ldr	r0, [pc, #616]	; (8002df0 <main+0x30c>)
 8002b86:	f003 fad1 	bl	800612c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, RESET);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2108      	movs	r1, #8
 8002b8e:	4899      	ldr	r0, [pc, #612]	; (8002df4 <main+0x310>)
 8002b90:	f003 facc 	bl	800612c <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8002b94:	2200      	movs	r2, #0
 8002b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b9a:	4897      	ldr	r0, [pc, #604]	; (8002df8 <main+0x314>)
 8002b9c:	f003 fac6 	bl	800612c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ba6:	4894      	ldr	r0, [pc, #592]	; (8002df8 <main+0x314>)
 8002ba8:	f003 fac0 	bl	800612c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8002bac:	2200      	movs	r2, #0
 8002bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bb2:	4891      	ldr	r0, [pc, #580]	; (8002df8 <main+0x314>)
 8002bb4:	f003 faba 	bl	800612c <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2102      	movs	r1, #2
 8002bbc:	488e      	ldr	r0, [pc, #568]	; (8002df8 <main+0x314>)
 8002bbe:	f003 fab5 	bl	800612c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bc8:	4887      	ldr	r0, [pc, #540]	; (8002de8 <main+0x304>)
 8002bca:	f003 faaf 	bl	800612c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bd4:	4884      	ldr	r0, [pc, #528]	; (8002de8 <main+0x304>)
 8002bd6:	f003 faa9 	bl	800612c <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2104      	movs	r1, #4
 8002bde:	4883      	ldr	r0, [pc, #524]	; (8002dec <main+0x308>)
 8002be0:	f003 faa4 	bl	800612c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2180      	movs	r1, #128	; 0x80
 8002be8:	4880      	ldr	r0, [pc, #512]	; (8002dec <main+0x308>)
 8002bea:	f003 fa9f 	bl	800612c <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bf4:	487d      	ldr	r0, [pc, #500]	; (8002dec <main+0x308>)
 8002bf6:	f003 fa99 	bl	800612c <HAL_GPIO_WritePin>

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c00:	487d      	ldr	r0, [pc, #500]	; (8002df8 <main+0x314>)
 8002c02:	f003 fa93 	bl	800612c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	4876      	ldr	r0, [pc, #472]	; (8002de4 <main+0x300>)
 8002c0c:	f003 fa8e 	bl	800612c <HAL_GPIO_WritePin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
  Tx_setup();
#endif

  // init i2c sensors and data storage
  dev_ctx_lsm = lsm6dsl_init();
 8002c10:	4c7a      	ldr	r4, [pc, #488]	; (8002dfc <main+0x318>)
 8002c12:	463b      	mov	r3, r7
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff f90f 	bl	8001e38 <lsm6dsl_init>
 8002c1a:	463b      	mov	r3, r7
 8002c1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dev_ctx_lps = lps22hh_init();
 8002c24:	4c76      	ldr	r4, [pc, #472]	; (8002e00 <main+0x31c>)
 8002c26:	463b      	mov	r3, r7
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fa03 	bl	8002034 <lps22hh_init>
 8002c2e:	463b      	mov	r3, r7
 8002c30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  // init FLASH
//  if (!W25qxx_Init()) Error_Handler();
//  buzz_success();

  // check if SD card is inserted
  if (HAL_GPIO_ReadPin(IN_SD_CARD_DETECT_GPIO_Port, IN_SD_CARD_DETECT_Pin) == GPIO_PIN_RESET) {
 8002c38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c3c:	486c      	ldr	r0, [pc, #432]	; (8002df0 <main+0x30c>)
 8002c3e:	f003 fa5d 	bl	80060fc <HAL_GPIO_ReadPin>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10f      	bne.n	8002c68 <main+0x184>
	  // init sd card with dynamic filename
	  fres = sd_init_dynamic_filename("FC", sd_file_header, filename);
 8002c48:	4a6e      	ldr	r2, [pc, #440]	; (8002e04 <main+0x320>)
 8002c4a:	496f      	ldr	r1, [pc, #444]	; (8002e08 <main+0x324>)
 8002c4c:	486f      	ldr	r0, [pc, #444]	; (8002e0c <main+0x328>)
 8002c4e:	f000 ff85 	bl	8003b5c <sd_init_dynamic_filename>
 8002c52:	4603      	mov	r3, r0
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b6e      	ldr	r3, [pc, #440]	; (8002e10 <main+0x32c>)
 8002c58:	701a      	strb	r2, [r3, #0]
	  if (fres != FR_OK) {
 8002c5a:	4b6d      	ldr	r3, [pc, #436]	; (8002e10 <main+0x32c>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <main+0x188>
			buzz_failure();
 8002c62:	f7ff ff35 	bl	8002ad0 <buzz_failure>
 8002c66:	e001      	b.n	8002c6c <main+0x188>
	  }
  }
  else {
	  buzz_failure();
 8002c68:	f7ff ff32 	bl	8002ad0 <buzz_failure>
//  if (save_flash) {
//	  buzz_failure();
//  }

  // get ground altitude
  for (uint8_t i = 0; i < 100; i++) {
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	75fb      	strb	r3, [r7, #23]
 8002c70:	e00e      	b.n	8002c90 <main+0x1ac>
	  alt_ground += getAltitude();
 8002c72:	f000 fa39 	bl	80030e8 <getAltitude>
 8002c76:	eeb0 7a40 	vmov.f32	s14, s0
 8002c7a:	4b66      	ldr	r3, [pc, #408]	; (8002e14 <main+0x330>)
 8002c7c:	edd3 7a00 	vldr	s15, [r3]
 8002c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c84:	4b63      	ldr	r3, [pc, #396]	; (8002e14 <main+0x330>)
 8002c86:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 100; i++) {
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	75fb      	strb	r3, [r7, #23]
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b63      	cmp	r3, #99	; 0x63
 8002c94:	d9ed      	bls.n	8002c72 <main+0x18e>
  }
  alt_ground /= 100.0;
 8002c96:	4b5f      	ldr	r3, [pc, #380]	; (8002e14 <main+0x330>)
 8002c98:	ed93 7a00 	vldr	s14, [r3]
 8002c9c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8002e18 <main+0x334>
 8002ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca4:	4b5b      	ldr	r3, [pc, #364]	; (8002e14 <main+0x330>)
 8002ca6:	edc3 7a00 	vstr	s15, [r3]
  alt_current = alt_ground;
 8002caa:	4b5a      	ldr	r3, [pc, #360]	; (8002e14 <main+0x330>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a5b      	ldr	r2, [pc, #364]	; (8002e1c <main+0x338>)
 8002cb0:	6013      	str	r3, [r2, #0]

  // initial DMA requests:
//  HAL_UART_Receive_DMA(&huart6, gps_rx_buf, GPS_RX_DMA_BUF_LEN); // GPS
  memset(xtend_rx_buf, 0, 10);
 8002cb2:	220a      	movs	r2, #10
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	485a      	ldr	r0, [pc, #360]	; (8002e20 <main+0x33c>)
 8002cb8:	f00b fb90 	bl	800e3dc <memset>
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)xtend_rx_buf, XTEND_RX_DMA_CMD_LEN); // XTend
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	4958      	ldr	r1, [pc, #352]	; (8002e20 <main+0x33c>)
 8002cc0:	4858      	ldr	r0, [pc, #352]	; (8002e24 <main+0x340>)
 8002cc2:	f007 f925 	bl	8009f10 <HAL_UART_Receive_DMA>
//  HAL_ADC_Start_DMA(&hadc1, tank_pressure_buf, PROP_TANK_PRESSURE_ADC_BUF_LEN); // ADC for propulsion

  // initialize avionics and propulsion xtend buffers with *something* so DMA can happen without zero length error
  telemetry_format_avionics();
 8002cc6:	f000 fcc7 	bl	8003658 <telemetry_format_avionics>
  telemetry_format_propulsion();
 8002cca:	f000 fd4d 	bl	8003768 <telemetry_format_propulsion>

  HAL_UART_Transmit(&huart8, "start!\r\n", 8, 100);
 8002cce:	2364      	movs	r3, #100	; 0x64
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	4955      	ldr	r1, [pc, #340]	; (8002e28 <main+0x344>)
 8002cd4:	4855      	ldr	r0, [pc, #340]	; (8002e2c <main+0x348>)
 8002cd6:	f007 f816 	bl	8009d06 <HAL_UART_Transmit>
  ITM_Port32(31) = 1;
  for (uint32_t i = 2; i < 2+10; i++)
#endif
  {
//	    buzz_success();
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4844      	ldr	r0, [pc, #272]	; (8002df0 <main+0x30c>)
 8002cde:	f003 fa3e 	bl	800615e <HAL_GPIO_TogglePin>

		// check for launch command -- do not do this in the callback because VR commands require HAL_Delay
		if (xtend_rx_dma_ready) {
 8002ce2:	4b53      	ldr	r3, [pc, #332]	; (8002e30 <main+0x34c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d014      	beq.n	8002d16 <main+0x232>
			// go check what the command is
			radio_command cmd = xtend_parse_dma_command();
 8002cec:	f000 fd84 	bl	80037f8 <xtend_parse_dma_command>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	75bb      	strb	r3, [r7, #22]

			// prep for next command to be sent
			memset(xtend_rx_buf, 0, 10);
 8002cf4:	220a      	movs	r2, #10
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4849      	ldr	r0, [pc, #292]	; (8002e20 <main+0x33c>)
 8002cfa:	f00b fb6f 	bl	800e3dc <memset>
			HAL_UART_Receive_DMA(&huart3, xtend_rx_buf, XTEND_RX_DMA_CMD_LEN);
 8002cfe:	2204      	movs	r2, #4
 8002d00:	4947      	ldr	r1, [pc, #284]	; (8002e20 <main+0x33c>)
 8002d02:	4848      	ldr	r0, [pc, #288]	; (8002e24 <main+0x340>)
 8002d04:	f007 f904 	bl	8009f10 <HAL_UART_Receive_DMA>
			xtend_rx_dma_ready = 0;
 8002d08:	4b49      	ldr	r3, [pc, #292]	; (8002e30 <main+0x34c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]

			execute_parsed_command(cmd);
 8002d0e:	7dbb      	ldrb	r3, [r7, #22]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fddb 	bl	80038cc <execute_parsed_command>
		}

		// -----  GATHER TELEMETRY ----- //
		get_acceleration(dev_ctx_lsm, acceleration_mg);
 8002d16:	4a39      	ldr	r2, [pc, #228]	; (8002dfc <main+0x318>)
 8002d18:	4b46      	ldr	r3, [pc, #280]	; (8002e34 <main+0x350>)
 8002d1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d1c:	f7ff f8fe 	bl	8001f1c <get_acceleration>
		get_angvelocity(dev_ctx_lsm, angular_rate_mdps);
 8002d20:	4a36      	ldr	r2, [pc, #216]	; (8002dfc <main+0x318>)
 8002d22:	4b45      	ldr	r3, [pc, #276]	; (8002e38 <main+0x354>)
 8002d24:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d26:	f7ff f93f 	bl	8001fa8 <get_angvelocity>
		alt_current = getAltitude(); // calls get_pressure();
 8002d2a:	f000 f9dd 	bl	80030e8 <getAltitude>
 8002d2e:	eef0 7a40 	vmov.f32	s15, s0
 8002d32:	4b3a      	ldr	r3, [pc, #232]	; (8002e1c <main+0x338>)
 8002d34:	edc3 7a00 	vstr	s15, [r3]

		HAL_RTC_GetTime(&hrtc, &stimeget, RTC_FORMAT_BIN);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4940      	ldr	r1, [pc, #256]	; (8002e3c <main+0x358>)
 8002d3c:	4840      	ldr	r0, [pc, #256]	; (8002e40 <main+0x35c>)
 8002d3e:	f005 fa41 	bl	80081c4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sdateget, RTC_FORMAT_BIN); // have to call GetDate for the time to be correct
 8002d42:	2200      	movs	r2, #0
 8002d44:	493f      	ldr	r1, [pc, #252]	; (8002e44 <main+0x360>)
 8002d46:	483e      	ldr	r0, [pc, #248]	; (8002e40 <main+0x35c>)
 8002d48:	f005 fb41 	bl	80083ce <HAL_RTC_GetDate>

		continuity = get_continuity();
 8002d4c:	f000 fa1c 	bl	8003188 <get_continuity>
 8002d50:	4603      	mov	r3, r0
 8002d52:	461a      	mov	r2, r3
 8002d54:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <main+0x364>)
 8002d56:	701a      	strb	r2, [r3, #0]

		// gps
		if (gps_dma_ready) {
 8002d58:	4b3c      	ldr	r3, [pc, #240]	; (8002e4c <main+0x368>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <main+0x298>
			gps_dma_ready = 0;
 8002d62:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <main+0x368>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
			GPS_ParseBuffer(&latitude, &longitude, &time);
 8002d68:	4a39      	ldr	r2, [pc, #228]	; (8002e50 <main+0x36c>)
 8002d6a:	493a      	ldr	r1, [pc, #232]	; (8002e54 <main+0x370>)
 8002d6c:	483a      	ldr	r0, [pc, #232]	; (8002e58 <main+0x374>)
 8002d6e:	f7fe fcc9 	bl	8001704 <GPS_ParseBuffer>

			// start new DMA request
			HAL_UART_Receive_DMA(&huart6, gps_rx_buf, GPS_RX_DMA_BUF_LEN);
 8002d72:	22af      	movs	r2, #175	; 0xaf
 8002d74:	4939      	ldr	r1, [pc, #228]	; (8002e5c <main+0x378>)
 8002d76:	483a      	ldr	r0, [pc, #232]	; (8002e60 <main+0x37c>)
 8002d78:	f007 f8ca 	bl	8009f10 <HAL_UART_Receive_DMA>
		}

		// propulsion data (not needed after apogee)
		if (state < FLIGHT_STATE_PRE_MAIN) {
 8002d7c:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <main+0x380>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d810      	bhi.n	8002da8 <main+0x2c4>
			tank_temperature = Max31855_Read_Temp();
 8002d86:	f7fe f951 	bl	800102c <Max31855_Read_Temp>
 8002d8a:	eef0 7a40 	vmov.f32	s15, s0
 8002d8e:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <main+0x384>)
 8002d90:	edc3 7a00 	vstr	s15, [r3]
//				sprintf(msg_buffer_av, "tank pressure = %f\r\n", tank_pressure);
//				debug_tx_uart(msg_buffer_av);
//				HAL_Delay(10);
//			}

			valve_state = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port, IN_Prop_ActuatedVent_Feedback_Pin);
 8002d94:	2102      	movs	r1, #2
 8002d96:	4835      	ldr	r0, [pc, #212]	; (8002e6c <main+0x388>)
 8002d98:	f003 f9b0 	bl	80060fc <HAL_GPIO_ReadPin>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <main+0x38c>)
 8002da2:	701a      	strb	r2, [r3, #0]

			#ifdef TIMING_ITM
				ITM_Port32(31) = 300; // start of pr sprintf
			#endif

			telemetry_format_propulsion();
 8002da4:	f000 fce0 	bl	8003768 <telemetry_format_propulsion>
		// avionics message
		#ifdef TIMING_ITM
			ITM_Port32(31) = 400; // start of av sprintf
		#endif

		telemetry_format_avionics();
 8002da8:	f000 fc56 	bl	8003658 <telemetry_format_avionics>
		#ifdef TIMING_ITM
			ITM_Port32(31) = 401; // end of av sprintf
		#endif

		// save to sd and flash
		fres = sd_open_file(filename);
 8002dac:	4815      	ldr	r0, [pc, #84]	; (8002e04 <main+0x320>)
 8002dae:	f000 ff55 	bl	8003c5c <sd_open_file>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <main+0x32c>)
 8002db8:	701a      	strb	r2, [r3, #0]
		sd_write(&fil, msg_buffer_av);
 8002dba:	492e      	ldr	r1, [pc, #184]	; (8002e74 <main+0x390>)
 8002dbc:	482e      	ldr	r0, [pc, #184]	; (8002e78 <main+0x394>)
 8002dbe:	f000 ff65 	bl	8003c8c <sd_write>
		if (state < FLIGHT_STATE_PRE_MAIN) {
 8002dc2:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <main+0x380>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d803      	bhi.n	8002dd4 <main+0x2f0>
			sd_write(&fil, msg_buffer_pr);
 8002dcc:	492b      	ldr	r1, [pc, #172]	; (8002e7c <main+0x398>)
 8002dce:	482a      	ldr	r0, [pc, #168]	; (8002e78 <main+0x394>)
 8002dd0:	f000 ff5c 	bl	8003c8c <sd_write>
		}
		f_close(&fil);
 8002dd4:	4828      	ldr	r0, [pc, #160]	; (8002e78 <main+0x394>)
 8002dd6:	f00a ff5c 	bl	800dc92 <f_close>
			debug_tx_uart(msg_buffer_av);
			debug_tx_uart(msg_buffer_pr);
		#endif

		// check which state of flight we are in
		check_flight_state(&state);
 8002dda:	4822      	ldr	r0, [pc, #136]	; (8002e64 <main+0x380>)
 8002ddc:	f000 fa0c 	bl	80031f8 <check_flight_state>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002de0:	e77b      	b.n	8002cda <main+0x1f6>
 8002de2:	bf00      	nop
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	40021400 	.word	0x40021400
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40020800 	.word	0x40020800
 8002df4:	40020000 	.word	0x40020000
 8002df8:	40021800 	.word	0x40021800
 8002dfc:	20000a20 	.word	0x20000a20
 8002e00:	20000a2c 	.word	0x20000a2c
 8002e04:	20000378 	.word	0x20000378
 8002e08:	080147a8 	.word	0x080147a8
 8002e0c:	08014550 	.word	0x08014550
 8002e10:	20000a38 	.word	0x20000a38
 8002e14:	20000388 	.word	0x20000388
 8002e18:	42c80000 	.word	0x42c80000
 8002e1c:	2000038c 	.word	0x2000038c
 8002e20:	20000718 	.word	0x20000718
 8002e24:	200012f8 	.word	0x200012f8
 8002e28:	08014554 	.word	0x08014554
 8002e2c:	20001398 	.word	0x20001398
 8002e30:	2000039d 	.word	0x2000039d
 8002e34:	20000238 	.word	0x20000238
 8002e38:	20000244 	.word	0x20000244
 8002e3c:	20000264 	.word	0x20000264
 8002e40:	20000c80 	.word	0x20000c80
 8002e44:	20000278 	.word	0x20000278
 8002e48:	20000237 	.word	0x20000237
 8002e4c:	20000254 	.word	0x20000254
 8002e50:	20000a10 	.word	0x20000a10
 8002e54:	20000a08 	.word	0x20000a08
 8002e58:	20000a18 	.word	0x20000a18
 8002e5c:	20000954 	.word	0x20000954
 8002e60:	200013d8 	.word	0x200013d8
 8002e64:	20000385 	.word	0x20000385
 8002e68:	20000258 	.word	0x20000258
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	2000025c 	.word	0x2000025c
 8002e74:	2000027c 	.word	0x2000027c
 8002e78:	20000a50 	.word	0x20000a50
 8002e7c:	20000344 	.word	0x20000344

08002e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b0a0      	sub	sp, #128	; 0x80
 8002e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e8a:	2230      	movs	r2, #48	; 0x30
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f00b faa4 	bl	800e3dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ea4:	f107 030c 	add.w	r3, r7, #12
 8002ea8:	2230      	movs	r2, #48	; 0x30
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f00b fa95 	bl	800e3dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <SystemClock_Config+0x108>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a33      	ldr	r2, [pc, #204]	; (8002f88 <SystemClock_Config+0x108>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec2:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <SystemClock_Config+0x108>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	607b      	str	r3, [r7, #4]
 8002ed2:	4b2e      	ldr	r3, [pc, #184]	; (8002f8c <SystemClock_Config+0x10c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a2d      	ldr	r2, [pc, #180]	; (8002f8c <SystemClock_Config+0x10c>)
 8002ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <SystemClock_Config+0x10c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002eea:	2309      	movs	r3, #9
 8002eec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ef2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002efc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f00:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f02:	2308      	movs	r3, #8
 8002f04:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002f06:	23b4      	movs	r3, #180	; 0xb4
 8002f08:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f0e:	2304      	movs	r3, #4
 8002f10:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f16:	4618      	mov	r0, r3
 8002f18:	f004 f9de 	bl	80072d8 <HAL_RCC_OscConfig>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002f22:	f000 fc5b 	bl	80037dc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f26:	f004 f987 	bl	8007238 <HAL_PWREx_EnableOverDrive>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002f30:	f000 fc54 	bl	80037dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f34:	230f      	movs	r3, #15
 8002f36:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002f46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f4a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f50:	2105      	movs	r1, #5
 8002f52:	4618      	mov	r0, r3
 8002f54:	f004 fc30 	bl	80077b8 <HAL_RCC_ClockConfig>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002f5e:	f000 fc3d 	bl	80037dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f62:	2320      	movs	r3, #32
 8002f64:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f6c:	f107 030c 	add.w	r3, r7, #12
 8002f70:	4618      	mov	r0, r3
 8002f72:	f004 fe1b 	bl	8007bac <HAL_RCCEx_PeriphCLKConfig>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8002f7c:	f000 fc2e 	bl	80037dc <Error_Handler>
  }
}
 8002f80:	bf00      	nop
 8002f82:	3780      	adds	r7, #128	; 0x80
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40007000 	.word	0x40007000

08002f90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IN_Button_Pin) {
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d110      	bne.n	8002fc2 <HAL_GPIO_EXTI_Callback+0x32>
		button_pressed = 1;
 8002fa0:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <HAL_GPIO_EXTI_Callback+0x48>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
		state++;
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <HAL_GPIO_EXTI_Callback+0x4c>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_GPIO_EXTI_Callback+0x4c>)
 8002fb2:	701a      	strb	r2, [r3, #0]

		__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_GPIO_EXTI_Callback+0x50>)
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <HAL_GPIO_EXTI_Callback+0x50>)
 8002fba:	f043 0310 	orr.w	r3, r3, #16
 8002fbe:	6113      	str	r3, [r2, #16]
	}
	else if (GPIO_Pin == EXTI_SWIER_SWIER4) { // software interrupt to change timer settings
		update_radio_timer_params(&state);
	}
}
 8002fc0:	e005      	b.n	8002fce <HAL_GPIO_EXTI_Callback+0x3e>
	else if (GPIO_Pin == EXTI_SWIER_SWIER4) { // software interrupt to change timer settings
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d102      	bne.n	8002fce <HAL_GPIO_EXTI_Callback+0x3e>
		update_radio_timer_params(&state);
 8002fc8:	4804      	ldr	r0, [pc, #16]	; (8002fdc <HAL_GPIO_EXTI_Callback+0x4c>)
 8002fca:	f000 fae3 	bl	8003594 <update_radio_timer_params>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000236 	.word	0x20000236
 8002fdc:	20000385 	.word	0x20000385
 8002fe0:	40013c00 	.word	0x40013c00

08002fe4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) { // gps
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a15      	ldr	r2, [pc, #84]	; (8003044 <HAL_UART_RxCpltCallback+0x60>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d107      	bne.n	8003004 <HAL_UART_RxCpltCallback+0x20>
		// insert null termination and indicate buffer is ready to parse
		// (total buffer length is GPS_RX_DMA_BUF_LEN + 1)
		gps_rx_buf[GPS_RX_DMA_BUF_LEN] = '\0';
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <HAL_UART_RxCpltCallback+0x64>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		gps_dma_ready = 1;
 8002ffc:	4b13      	ldr	r3, [pc, #76]	; (800304c <HAL_UART_RxCpltCallback+0x68>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
			arming_recovery();
		}

		// main loop will clear the buffer and start new DMA request
	}
}
 8003002:	e01b      	b.n	800303c <HAL_UART_RxCpltCallback+0x58>
	else if (huart == &huart3) { // xtend radio
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a12      	ldr	r2, [pc, #72]	; (8003050 <HAL_UART_RxCpltCallback+0x6c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d117      	bne.n	800303c <HAL_UART_RxCpltCallback+0x58>
		xtend_rx_dma_ready = 1;
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_UART_RxCpltCallback+0x70>)
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
		radio_command cmd = xtend_parse_dma_command();
 8003012:	f000 fbf1 	bl	80037f8 <xtend_parse_dma_command>
 8003016:	4603      	mov	r3, r0
 8003018:	73fb      	strb	r3, [r7, #15]
		if (cmd == LAUNCH) {
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d102      	bne.n	8003026 <HAL_UART_RxCpltCallback+0x42>
			rocket_launch();
 8003020:	f000 fcb0 	bl	8003984 <rocket_launch>
}
 8003024:	e00a      	b.n	800303c <HAL_UART_RxCpltCallback+0x58>
		else if (cmd == ARM_PROP) {
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d102      	bne.n	8003032 <HAL_UART_RxCpltCallback+0x4e>
			arming_propulsion();
 800302c:	f000 fcc4 	bl	80039b8 <arming_propulsion>
}
 8003030:	e004      	b.n	800303c <HAL_UART_RxCpltCallback+0x58>
		else if (cmd == ARM_RCOV) {
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d101      	bne.n	800303c <HAL_UART_RxCpltCallback+0x58>
			arming_recovery();
 8003038:	f000 fcca 	bl	80039d0 <arming_recovery>
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	200013d8 	.word	0x200013d8
 8003048:	20000954 	.word	0x20000954
 800304c:	20000254 	.word	0x20000254
 8003050:	200012f8 	.word	0x200012f8
 8003054:	2000039d 	.word	0x2000039d

08003058 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a0f      	ldr	r2, [pc, #60]	; (80030a0 <HAL_UART_TxCpltCallback+0x48>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d114      	bne.n	8003092 <HAL_UART_TxCpltCallback+0x3a>
//		#ifdef TIMING_ITM
//			ITM_Port32(31) = 200;
//		#endif
		// don't care who started it, transmit is complete
		xtend_tx_start_av = 0;
 8003068:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <HAL_UART_TxCpltCallback+0x4c>)
 800306a:	2200      	movs	r2, #0
 800306c:	701a      	strb	r2, [r3, #0]
		xtend_tx_start_pr = 0;
 800306e:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <HAL_UART_TxCpltCallback+0x50>)
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]

		num_radio_transmissions++;
 8003074:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <HAL_UART_TxCpltCallback+0x54>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	3301      	adds	r3, #1
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_UART_TxCpltCallback+0x54>)
 8003080:	701a      	strb	r2, [r3, #0]
		if (num_radio_transmissions == 10) {
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <HAL_UART_TxCpltCallback+0x54>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b0a      	cmp	r3, #10
 800308a:	d102      	bne.n	8003092 <HAL_UART_TxCpltCallback+0x3a>
			num_radio_transmissions = 0;
 800308c:	4b07      	ldr	r3, [pc, #28]	; (80030ac <HAL_UART_TxCpltCallback+0x54>)
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	200012f8 	.word	0x200012f8
 80030a4:	2000039e 	.word	0x2000039e
 80030a8:	2000039f 	.word	0x2000039f
 80030ac:	20000386 	.word	0x20000386

080030b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d106      	bne.n	80030ce <HAL_TIM_PeriodElapsedCallback+0x1e>
//		#ifdef TIMING_ITM
//			ITM_Port32(31) = 100;
//		#endif

		HAL_GPIO_TogglePin(LEDF_GPIO_Port, LEDF_Pin);
 80030c0:	2108      	movs	r1, #8
 80030c2:	4806      	ldr	r0, [pc, #24]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80030c4:	f003 f84b 	bl	800615e <HAL_GPIO_TogglePin>
		xtend_transmit_telemetry(&state);
 80030c8:	4805      	ldr	r0, [pc, #20]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80030ca:	f000 f9c7 	bl	800345c <xtend_transmit_telemetry>
	}
//	else if (htim == &htim8) {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
////		HAL_ADC_Start_DMA(&hadc1, tank_pressure_buf, PROP_TANK_PRESSURE_ADC_BUF_LEN);
//	}
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200011b8 	.word	0x200011b8
 80030dc:	40020000 	.word	0x40020000
 80030e0:	20000385 	.word	0x20000385
 80030e4:	00000000 	.word	0x00000000

080030e8 <getAltitude>:
//
//	HAL_ADC_Start_DMA(&hadc1, tank_pressure_buf, PROP_TANK_PRESSURE_ADC_BUF_LEN);
//}


float getAltitude(void) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
	get_pressure(dev_ctx_lps, &pressure_hPa);
 80030ee:	4a22      	ldr	r2, [pc, #136]	; (8003178 <getAltitude+0x90>)
 80030f0:	4b22      	ldr	r3, [pc, #136]	; (800317c <getAltitude+0x94>)
 80030f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80030f4:	f7fe fff4 	bl	80020e0 <get_pressure>
	uint32_t altitude = 145442.1609 * (1.0 - pow(pressure_hPa/local_pressure, 0.190266436));
 80030f8:	4b20      	ldr	r3, [pc, #128]	; (800317c <getAltitude+0x94>)
 80030fa:	ed93 7a00 	vldr	s14, [r3]
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <getAltitude+0x98>)
 8003100:	edd3 7a00 	vldr	s15, [r3]
 8003104:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003108:	ee16 0a90 	vmov	r0, s13
 800310c:	f7fd fa3c 	bl	8000588 <__aeabi_f2d>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8003168 <getAltitude+0x80>
 8003118:	ec43 2b10 	vmov	d0, r2, r3
 800311c:	f010 fa0a 	bl	8013534 <pow>
 8003120:	ec53 2b10 	vmov	r2, r3, d0
 8003124:	f04f 0000 	mov.w	r0, #0
 8003128:	4916      	ldr	r1, [pc, #88]	; (8003184 <getAltitude+0x9c>)
 800312a:	f7fd f8cd 	bl	80002c8 <__aeabi_dsub>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	a30e      	add	r3, pc, #56	; (adr r3, 8003170 <getAltitude+0x88>)
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f7fd fa7c 	bl	8000638 <__aeabi_dmul>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f7fd fd4e 	bl	8000be8 <__aeabi_d2uiz>
 800314c:	4603      	mov	r3, r0
 800314e:	607b      	str	r3, [r7, #4]
	return altitude;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800315a:	eeb0 0a67 	vmov.f32	s0, s15
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	f3af 8000 	nop.w
 8003168:	8c12bfc3 	.word	0x8c12bfc3
 800316c:	3fc85aa6 	.word	0x3fc85aa6
 8003170:	4985f06f 	.word	0x4985f06f
 8003174:	4101c111 	.word	0x4101c111
 8003178:	20000a2c 	.word	0x20000a2c
 800317c:	20000250 	.word	0x20000250
 8003180:	20000000 	.word	0x20000000
 8003184:	3ff00000 	.word	0x3ff00000

08003188 <get_continuity>:
	W25qxx_WriteBlock(msg_buffer, block_address, block_offset, strlen((const char *)msg_buffer));
	flash_write_address += strlen((const char *)msg_buffer);
	return flash_write_address;
}

uint8_t get_continuity(void) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
	// read pins
	GPIO_PinState drogue = HAL_GPIO_ReadPin(Rcov_Cont_Drogue_GPIO_Port, Rcov_Cont_Drogue_Pin);
 800318e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003192:	4817      	ldr	r0, [pc, #92]	; (80031f0 <get_continuity+0x68>)
 8003194:	f002 ffb2 	bl	80060fc <HAL_GPIO_ReadPin>
 8003198:	4603      	mov	r3, r0
 800319a:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState main = HAL_GPIO_ReadPin(Rcov_Cont_Main_GPIO_Port, Rcov_Cont_Main_Pin);
 800319c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031a0:	4813      	ldr	r0, [pc, #76]	; (80031f0 <get_continuity+0x68>)
 80031a2:	f002 ffab 	bl	80060fc <HAL_GPIO_ReadPin>
 80031a6:	4603      	mov	r3, r0
 80031a8:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState prop_1 = HAL_GPIO_ReadPin(Prop_Cont_1_GPIO_Port, Prop_Cont_1_Pin);
 80031aa:	2101      	movs	r1, #1
 80031ac:	4810      	ldr	r0, [pc, #64]	; (80031f0 <get_continuity+0x68>)
 80031ae:	f002 ffa5 	bl	80060fc <HAL_GPIO_ReadPin>
 80031b2:	4603      	mov	r3, r0
 80031b4:	717b      	strb	r3, [r7, #5]
	GPIO_PinState prop_2 = HAL_GPIO_ReadPin(Prop_Cont_2_GPIO_Port, Prop_Cont_2_Pin);
 80031b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031ba:	480e      	ldr	r0, [pc, #56]	; (80031f4 <get_continuity+0x6c>)
 80031bc:	f002 ff9e 	bl	80060fc <HAL_GPIO_ReadPin>
 80031c0:	4603      	mov	r3, r0
 80031c2:	713b      	strb	r3, [r7, #4]

	uint8_t continuity = (drogue) + (main * 2) + (prop_1 * 4) + (prop_2 * 8);
 80031c4:	793b      	ldrb	r3, [r7, #4]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	797b      	ldrb	r3, [r7, #5]
 80031cc:	4413      	add	r3, r2
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	79bb      	ldrb	r3, [r7, #6]
 80031d6:	4413      	add	r3, r2
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	4413      	add	r3, r2
 80031e2:	70fb      	strb	r3, [r7, #3]
	return continuity;
 80031e4:	78fb      	ldrb	r3, [r7, #3]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40021800 	.word	0x40021800
 80031f4:	40021400 	.word	0x40021400

080031f8 <check_flight_state>:

	return pressure;
}

// logic to change states of flight
void check_flight_state(volatile uint8_t *state) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	switch (*state) {
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b04      	cmp	r3, #4
 8003208:	f200 80ff 	bhi.w	800340a <check_flight_state+0x212>
 800320c:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <check_flight_state+0x1c>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003229 	.word	0x08003229
 8003218:	08003279 	.word	0x08003279
 800321c:	080032eb 	.word	0x080032eb
 8003220:	08003359 	.word	0x08003359
 8003224:	080033fd 	.word	0x080033fd
	case FLIGHT_STATE_PAD: // launch pad, waiting. prioritize prop data

		// check current state
		if (alt_current - alt_ground > LAUNCH_ALT_CHANGE_THRESHOLD) { // launched
 8003228:	4b7c      	ldr	r3, [pc, #496]	; (800341c <check_flight_state+0x224>)
 800322a:	ed93 7a00 	vldr	s14, [r3]
 800322e:	4b7c      	ldr	r3, [pc, #496]	; (8003420 <check_flight_state+0x228>)
 8003230:	edd3 7a00 	vldr	s15, [r3]
 8003234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003238:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003424 <check_flight_state+0x22c>
 800323c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003244:	dc00      	bgt.n	8003248 <check_flight_state+0x50>

			// generate software interrupt to change TIM3 update rate
			__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
		}

		break;
 8003246:	e0e5      	b.n	8003414 <check_flight_state+0x21c>
			*state = FLIGHT_STATE_PRE_APOGEE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
			fres = sd_open_file(filename);
 800324e:	4876      	ldr	r0, [pc, #472]	; (8003428 <check_flight_state+0x230>)
 8003250:	f000 fd04 	bl	8003c5c <sd_open_file>
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	4b74      	ldr	r3, [pc, #464]	; (800342c <check_flight_state+0x234>)
 800325a:	701a      	strb	r2, [r3, #0]
			sd_write(&fil, (uint8_t *)"launched\r\n");
 800325c:	4974      	ldr	r1, [pc, #464]	; (8003430 <check_flight_state+0x238>)
 800325e:	4875      	ldr	r0, [pc, #468]	; (8003434 <check_flight_state+0x23c>)
 8003260:	f000 fd14 	bl	8003c8c <sd_write>
			f_close(&fil);
 8003264:	4873      	ldr	r0, [pc, #460]	; (8003434 <check_flight_state+0x23c>)
 8003266:	f00a fd14 	bl	800dc92 <f_close>
			__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 800326a:	4b73      	ldr	r3, [pc, #460]	; (8003438 <check_flight_state+0x240>)
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	4a72      	ldr	r2, [pc, #456]	; (8003438 <check_flight_state+0x240>)
 8003270:	f043 0310 	orr.w	r3, r3, #16
 8003274:	6113      	str	r3, [r2, #16]
		break;
 8003276:	e0cd      	b.n	8003414 <check_flight_state+0x21c>

	case FLIGHT_STATE_PRE_APOGEE: // pre-apogee

		// check current state
		if (alt_current > alt_apogee) {
 8003278:	4b68      	ldr	r3, [pc, #416]	; (800341c <check_flight_state+0x224>)
 800327a:	ed93 7a00 	vldr	s14, [r3]
 800327e:	4b6f      	ldr	r3, [pc, #444]	; (800343c <check_flight_state+0x244>)
 8003280:	edd3 7a00 	vldr	s15, [r3]
 8003284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	dd07      	ble.n	800329e <check_flight_state+0xa6>
			alt_apogee = alt_current;
 800328e:	4b63      	ldr	r3, [pc, #396]	; (800341c <check_flight_state+0x224>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6a      	ldr	r2, [pc, #424]	; (800343c <check_flight_state+0x244>)
 8003294:	6013      	str	r3, [r2, #0]
			num_descending_samples = 0;
 8003296:	4b6a      	ldr	r3, [pc, #424]	; (8003440 <check_flight_state+0x248>)
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
				// generate software interrupt to change TIM3 update rate
				__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
			}
		}

		break;
 800329c:	e0b7      	b.n	800340e <check_flight_state+0x216>
			num_descending_samples++;
 800329e:	4b68      	ldr	r3, [pc, #416]	; (8003440 <check_flight_state+0x248>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	4b66      	ldr	r3, [pc, #408]	; (8003440 <check_flight_state+0x248>)
 80032a8:	701a      	strb	r2, [r3, #0]
			if (num_descending_samples > APOGEE_NUM_DESCENDING_SAMPLES) {
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <check_flight_state+0x248>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b1e      	cmp	r3, #30
 80032b0:	f240 80ad 	bls.w	800340e <check_flight_state+0x216>
				*state = FLIGHT_STATE_PRE_MAIN; // passed apogee
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	701a      	strb	r2, [r3, #0]
				num_descending_samples = 0;
 80032ba:	4b61      	ldr	r3, [pc, #388]	; (8003440 <check_flight_state+0x248>)
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]
				fres = sd_open_file(filename);
 80032c0:	4859      	ldr	r0, [pc, #356]	; (8003428 <check_flight_state+0x230>)
 80032c2:	f000 fccb 	bl	8003c5c <sd_open_file>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b58      	ldr	r3, [pc, #352]	; (800342c <check_flight_state+0x234>)
 80032cc:	701a      	strb	r2, [r3, #0]
				sd_write(&fil, (uint8_t *)"apogee\r\n");
 80032ce:	495d      	ldr	r1, [pc, #372]	; (8003444 <check_flight_state+0x24c>)
 80032d0:	4858      	ldr	r0, [pc, #352]	; (8003434 <check_flight_state+0x23c>)
 80032d2:	f000 fcdb 	bl	8003c8c <sd_write>
				f_close(&fil);
 80032d6:	4857      	ldr	r0, [pc, #348]	; (8003434 <check_flight_state+0x23c>)
 80032d8:	f00a fcdb 	bl	800dc92 <f_close>
				__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 80032dc:	4b56      	ldr	r3, [pc, #344]	; (8003438 <check_flight_state+0x240>)
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	4a55      	ldr	r2, [pc, #340]	; (8003438 <check_flight_state+0x240>)
 80032e2:	f043 0310 	orr.w	r3, r3, #16
 80032e6:	6113      	str	r3, [r2, #16]
		break;
 80032e8:	e091      	b.n	800340e <check_flight_state+0x216>

	case FLIGHT_STATE_PRE_MAIN: // post-apogee

		// check current state
		if (alt_current < MAIN_DEPLOY_ALTITUDE) {
 80032ea:	4b4c      	ldr	r3, [pc, #304]	; (800341c <check_flight_state+0x224>)
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003448 <check_flight_state+0x250>
 80032f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fc:	d528      	bpl.n	8003350 <check_flight_state+0x158>
			num_descending_samples++;
 80032fe:	4b50      	ldr	r3, [pc, #320]	; (8003440 <check_flight_state+0x248>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	3301      	adds	r3, #1
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4b4e      	ldr	r3, [pc, #312]	; (8003440 <check_flight_state+0x248>)
 8003308:	701a      	strb	r2, [r3, #0]

			if (num_descending_samples > MAIN_NUM_DESCENDING_SAMPLES) {
 800330a:	4b4d      	ldr	r3, [pc, #308]	; (8003440 <check_flight_state+0x248>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b0a      	cmp	r3, #10
 8003310:	d97f      	bls.n	8003412 <check_flight_state+0x21a>
				*state = FLIGHT_STATE_PRE_LANDED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2203      	movs	r2, #3
 8003316:	701a      	strb	r2, [r3, #0]
				alt_prev = alt_current; // in next stage we need to know the previous altitude
 8003318:	4b40      	ldr	r3, [pc, #256]	; (800341c <check_flight_state+0x224>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a4b      	ldr	r2, [pc, #300]	; (800344c <check_flight_state+0x254>)
 800331e:	6013      	str	r3, [r2, #0]
				num_descending_samples = 0;
 8003320:	4b47      	ldr	r3, [pc, #284]	; (8003440 <check_flight_state+0x248>)
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]

				fres = sd_open_file(filename);
 8003326:	4840      	ldr	r0, [pc, #256]	; (8003428 <check_flight_state+0x230>)
 8003328:	f000 fc98 	bl	8003c5c <sd_open_file>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	4b3e      	ldr	r3, [pc, #248]	; (800342c <check_flight_state+0x234>)
 8003332:	701a      	strb	r2, [r3, #0]
				sd_write(&fil, (uint8_t *)"main deployed\r\n");
 8003334:	4946      	ldr	r1, [pc, #280]	; (8003450 <check_flight_state+0x258>)
 8003336:	483f      	ldr	r0, [pc, #252]	; (8003434 <check_flight_state+0x23c>)
 8003338:	f000 fca8 	bl	8003c8c <sd_write>
				f_close(&fil);
 800333c:	483d      	ldr	r0, [pc, #244]	; (8003434 <check_flight_state+0x23c>)
 800333e:	f00a fca8 	bl	800dc92 <f_close>
				#ifdef DEBUG_MODE
					HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, SET);
				#endif

				// generate software interrupt to change TIM3 update rate
				__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <check_flight_state+0x240>)
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	4a3c      	ldr	r2, [pc, #240]	; (8003438 <check_flight_state+0x240>)
 8003348:	f043 0310 	orr.w	r3, r3, #16
 800334c:	6113      	str	r3, [r2, #16]
			}
		} else {
			num_descending_samples = 0;
		}

		break;
 800334e:	e060      	b.n	8003412 <check_flight_state+0x21a>
			num_descending_samples = 0;
 8003350:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <check_flight_state+0x248>)
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
		break;
 8003356:	e05c      	b.n	8003412 <check_flight_state+0x21a>

	case FLIGHT_STATE_PRE_LANDED:
		// post main deploy, want to transmit data fast to maximize possibility of getting good GPS coordinates

		// check current state
		alt_diff = alt_current - alt_prev;
 8003358:	4b30      	ldr	r3, [pc, #192]	; (800341c <check_flight_state+0x224>)
 800335a:	ed93 7a00 	vldr	s14, [r3]
 800335e:	4b3b      	ldr	r3, [pc, #236]	; (800344c <check_flight_state+0x254>)
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003368:	4b3a      	ldr	r3, [pc, #232]	; (8003454 <check_flight_state+0x25c>)
 800336a:	edc3 7a00 	vstr	s15, [r3]
		if (alt_diff < 0) {
 800336e:	4b39      	ldr	r3, [pc, #228]	; (8003454 <check_flight_state+0x25c>)
 8003370:	edd3 7a00 	vldr	s15, [r3]
 8003374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337c:	d507      	bpl.n	800338e <check_flight_state+0x196>
			alt_diff *= -1; // absolute value
 800337e:	4b35      	ldr	r3, [pc, #212]	; (8003454 <check_flight_state+0x25c>)
 8003380:	edd3 7a00 	vldr	s15, [r3]
 8003384:	eef1 7a67 	vneg.f32	s15, s15
 8003388:	4b32      	ldr	r3, [pc, #200]	; (8003454 <check_flight_state+0x25c>)
 800338a:	edc3 7a00 	vstr	s15, [r3]
		}

		if (alt_diff < LANDING_ALT_CHANGE_THRESHOLD) {
 800338e:	4b31      	ldr	r3, [pc, #196]	; (8003454 <check_flight_state+0x25c>)
 8003390:	edd3 7a00 	vldr	s15, [r3]
 8003394:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a0:	d524      	bpl.n	80033ec <check_flight_state+0x1f4>
			num_descending_samples++;
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <check_flight_state+0x248>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	3301      	adds	r3, #1
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	4b25      	ldr	r3, [pc, #148]	; (8003440 <check_flight_state+0x248>)
 80033ac:	701a      	strb	r2, [r3, #0]

			if (num_descending_samples > LANDING_NUM_DESCENDING_SAMPLES) {
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <check_flight_state+0x248>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b14      	cmp	r3, #20
 80033b4:	d91d      	bls.n	80033f2 <check_flight_state+0x1fa>
				*state = FLIGHT_STATE_LANDED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2204      	movs	r2, #4
 80033ba:	701a      	strb	r2, [r3, #0]
				num_descending_samples = 0;
 80033bc:	4b20      	ldr	r3, [pc, #128]	; (8003440 <check_flight_state+0x248>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]

				fres = sd_open_file(filename);
 80033c2:	4819      	ldr	r0, [pc, #100]	; (8003428 <check_flight_state+0x230>)
 80033c4:	f000 fc4a 	bl	8003c5c <sd_open_file>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b17      	ldr	r3, [pc, #92]	; (800342c <check_flight_state+0x234>)
 80033ce:	701a      	strb	r2, [r3, #0]
				sd_write(&fil, (uint8_t *)"landed\r\n");
 80033d0:	4921      	ldr	r1, [pc, #132]	; (8003458 <check_flight_state+0x260>)
 80033d2:	4818      	ldr	r0, [pc, #96]	; (8003434 <check_flight_state+0x23c>)
 80033d4:	f000 fc5a 	bl	8003c8c <sd_write>
				f_close(&fil);
 80033d8:	4816      	ldr	r0, [pc, #88]	; (8003434 <check_flight_state+0x23c>)
 80033da:	f00a fc5a 	bl	800dc92 <f_close>
				#ifdef DEBUG_MODE
					HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, SET);
				#endif

				// generate software interrupt to change TIM3 update rate
				__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 80033de:	4b16      	ldr	r3, [pc, #88]	; (8003438 <check_flight_state+0x240>)
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	4a15      	ldr	r2, [pc, #84]	; (8003438 <check_flight_state+0x240>)
 80033e4:	f043 0310 	orr.w	r3, r3, #16
 80033e8:	6113      	str	r3, [r2, #16]
 80033ea:	e002      	b.n	80033f2 <check_flight_state+0x1fa>
			}
		} else {
			num_descending_samples = 0;
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <check_flight_state+0x248>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
		}

		alt_prev = alt_current;
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <check_flight_state+0x224>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a15      	ldr	r2, [pc, #84]	; (800344c <check_flight_state+0x254>)
 80033f8:	6013      	str	r3, [r2, #0]
		break;
 80033fa:	e00b      	b.n	8003414 <check_flight_state+0x21c>

	case FLIGHT_STATE_LANDED: // landed
		__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 80033fc:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <check_flight_state+0x240>)
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <check_flight_state+0x240>)
 8003402:	f043 0310 	orr.w	r3, r3, #16
 8003406:	6113      	str	r3, [r2, #16]
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
				HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, SET);
			}
		#endif

		break;
 8003408:	e004      	b.n	8003414 <check_flight_state+0x21c>

	default:

		break;
 800340a:	bf00      	nop
 800340c:	e002      	b.n	8003414 <check_flight_state+0x21c>
		break;
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <check_flight_state+0x21c>
		break;
 8003412:	bf00      	nop
	}
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	2000038c 	.word	0x2000038c
 8003420:	20000388 	.word	0x20000388
 8003424:	42960000 	.word	0x42960000
 8003428:	20000378 	.word	0x20000378
 800342c:	20000a38 	.word	0x20000a38
 8003430:	08014560 	.word	0x08014560
 8003434:	20000a50 	.word	0x20000a50
 8003438:	40013c00 	.word	0x40013c00
 800343c:	20000398 	.word	0x20000398
 8003440:	2000039c 	.word	0x2000039c
 8003444:	0801456c 	.word	0x0801456c
 8003448:	44bb8000 	.word	0x44bb8000
 800344c:	20000390 	.word	0x20000390
 8003450:	08014578 	.word	0x08014578
 8003454:	20000394 	.word	0x20000394
 8003458:	08014588 	.word	0x08014588

0800345c <xtend_transmit_telemetry>:

// sends an avionics or propulsion string depending on the situation
void xtend_transmit_telemetry(volatile uint8_t *state) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	switch (*state) {
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <xtend_transmit_telemetry+0x18>
 800346e:	2b01      	cmp	r3, #1
 8003470:	d036      	beq.n	80034e0 <xtend_transmit_telemetry+0x84>
 8003472:	e06d      	b.n	8003550 <xtend_transmit_telemetry+0xf4>
	case FLIGHT_STATE_PAD:

		// send av
		if (num_radio_transmissions % 2 == 0 && xtend_tx_start_pr == 0 && xtend_tx_start_av == 0) {
 8003474:	4b42      	ldr	r3, [pc, #264]	; (8003580 <xtend_transmit_telemetry+0x124>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d116      	bne.n	80034b2 <xtend_transmit_telemetry+0x56>
 8003484:	4b3f      	ldr	r3, [pc, #252]	; (8003584 <xtend_transmit_telemetry+0x128>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d111      	bne.n	80034b2 <xtend_transmit_telemetry+0x56>
 800348e:	4b3e      	ldr	r3, [pc, #248]	; (8003588 <xtend_transmit_telemetry+0x12c>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10c      	bne.n	80034b2 <xtend_transmit_telemetry+0x56>
			radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 8003498:	483c      	ldr	r0, [pc, #240]	; (800358c <xtend_transmit_telemetry+0x130>)
 800349a:	f7fc feb3 	bl	8000204 <strlen>
 800349e:	4603      	mov	r3, r0
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	4619      	mov	r1, r3
 80034a4:	4839      	ldr	r0, [pc, #228]	; (800358c <xtend_transmit_telemetry+0x130>)
 80034a6:	f7ff fad9 	bl	8002a5c <radio_tx>
			xtend_tx_start_av = 1;
 80034aa:	4b37      	ldr	r3, [pc, #220]	; (8003588 <xtend_transmit_telemetry+0x12c>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
		// send prop
		else if (xtend_tx_start_av == 0 && xtend_tx_start_pr == 0) {
			radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
			xtend_tx_start_pr = 1;
		}
		break;
 80034b0:	e05d      	b.n	800356e <xtend_transmit_telemetry+0x112>
		else if (xtend_tx_start_av == 0 && xtend_tx_start_pr == 0) {
 80034b2:	4b35      	ldr	r3, [pc, #212]	; (8003588 <xtend_transmit_telemetry+0x12c>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d158      	bne.n	800356e <xtend_transmit_telemetry+0x112>
 80034bc:	4b31      	ldr	r3, [pc, #196]	; (8003584 <xtend_transmit_telemetry+0x128>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d153      	bne.n	800356e <xtend_transmit_telemetry+0x112>
			radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
 80034c6:	4832      	ldr	r0, [pc, #200]	; (8003590 <xtend_transmit_telemetry+0x134>)
 80034c8:	f7fc fe9c 	bl	8000204 <strlen>
 80034cc:	4603      	mov	r3, r0
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	4619      	mov	r1, r3
 80034d2:	482f      	ldr	r0, [pc, #188]	; (8003590 <xtend_transmit_telemetry+0x134>)
 80034d4:	f7ff fac2 	bl	8002a5c <radio_tx>
			xtend_tx_start_pr = 1;
 80034d8:	4b2a      	ldr	r3, [pc, #168]	; (8003584 <xtend_transmit_telemetry+0x128>)
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]
		break;
 80034de:	e046      	b.n	800356e <xtend_transmit_telemetry+0x112>

	case FLIGHT_STATE_PRE_APOGEE:
		// transmit avionics and prop at equal priority
		if (xtend_tx_start_pr == 0 && xtend_tx_start_av == 0 && num_radio_transmissions % 2 == 0) {
 80034e0:	4b28      	ldr	r3, [pc, #160]	; (8003584 <xtend_transmit_telemetry+0x128>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d116      	bne.n	8003518 <xtend_transmit_telemetry+0xbc>
 80034ea:	4b27      	ldr	r3, [pc, #156]	; (8003588 <xtend_transmit_telemetry+0x12c>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d111      	bne.n	8003518 <xtend_transmit_telemetry+0xbc>
 80034f4:	4b22      	ldr	r3, [pc, #136]	; (8003580 <xtend_transmit_telemetry+0x124>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <xtend_transmit_telemetry+0xbc>
			radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 8003504:	4821      	ldr	r0, [pc, #132]	; (800358c <xtend_transmit_telemetry+0x130>)
 8003506:	f7fc fe7d 	bl	8000204 <strlen>
 800350a:	4603      	mov	r3, r0
 800350c:	b29b      	uxth	r3, r3
 800350e:	4619      	mov	r1, r3
 8003510:	481e      	ldr	r0, [pc, #120]	; (800358c <xtend_transmit_telemetry+0x130>)
 8003512:	f7ff faa3 	bl	8002a5c <radio_tx>
		}
		else if (xtend_tx_start_pr == 0 && xtend_tx_start_av == 0 && num_radio_transmissions % 2 == 1) {
			radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
		}
		break;
 8003516:	e02c      	b.n	8003572 <xtend_transmit_telemetry+0x116>
		else if (xtend_tx_start_pr == 0 && xtend_tx_start_av == 0 && num_radio_transmissions % 2 == 1) {
 8003518:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <xtend_transmit_telemetry+0x128>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d127      	bne.n	8003572 <xtend_transmit_telemetry+0x116>
 8003522:	4b19      	ldr	r3, [pc, #100]	; (8003588 <xtend_transmit_telemetry+0x12c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d122      	bne.n	8003572 <xtend_transmit_telemetry+0x116>
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <xtend_transmit_telemetry+0x124>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d11a      	bne.n	8003572 <xtend_transmit_telemetry+0x116>
			radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
 800353c:	4814      	ldr	r0, [pc, #80]	; (8003590 <xtend_transmit_telemetry+0x134>)
 800353e:	f7fc fe61 	bl	8000204 <strlen>
 8003542:	4603      	mov	r3, r0
 8003544:	b29b      	uxth	r3, r3
 8003546:	4619      	mov	r1, r3
 8003548:	4811      	ldr	r0, [pc, #68]	; (8003590 <xtend_transmit_telemetry+0x134>)
 800354a:	f7ff fa87 	bl	8002a5c <radio_tx>
		break;
 800354e:	e010      	b.n	8003572 <xtend_transmit_telemetry+0x116>

	default:
		if (xtend_tx_start_av == 0) {
 8003550:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <xtend_transmit_telemetry+0x12c>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10d      	bne.n	8003576 <xtend_transmit_telemetry+0x11a>
			radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 800355a:	480c      	ldr	r0, [pc, #48]	; (800358c <xtend_transmit_telemetry+0x130>)
 800355c:	f7fc fe52 	bl	8000204 <strlen>
 8003560:	4603      	mov	r3, r0
 8003562:	b29b      	uxth	r3, r3
 8003564:	4619      	mov	r1, r3
 8003566:	4809      	ldr	r0, [pc, #36]	; (800358c <xtend_transmit_telemetry+0x130>)
 8003568:	f7ff fa78 	bl	8002a5c <radio_tx>
		}
		break;
 800356c:	e003      	b.n	8003576 <xtend_transmit_telemetry+0x11a>
		break;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <xtend_transmit_telemetry+0x11c>
		break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <xtend_transmit_telemetry+0x11c>
		break;
 8003576:	bf00      	nop
	}
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000386 	.word	0x20000386
 8003584:	2000039f 	.word	0x2000039f
 8003588:	2000039e 	.word	0x2000039e
 800358c:	2000027c 	.word	0x2000027c
 8003590:	20000344 	.word	0x20000344

08003594 <update_radio_timer_params>:

// updates settings for TIM3 depending on the state of the flight.
// TIM3 controls the rate of XTend radio transmission
void update_radio_timer_params(volatile uint8_t *state) {
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	switch (*state) {
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d843      	bhi.n	800362e <update_radio_timer_params+0x9a>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <update_radio_timer_params+0x18>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035c1 	.word	0x080035c1
 80035b0:	080035d7 	.word	0x080035d7
 80035b4:	080035ed 	.word	0x080035ed
 80035b8:	08003603 	.word	0x08003603
 80035bc:	08003619 	.word	0x08003619
	// 		 5 Hz -> ARR = 2000
	// 		 2 Hz -> ARR = 5000
	// 		 1 Hz -> ARR = 10000

	case FLIGHT_STATE_PAD:
		TIM3->ARR = 1000-1;
 80035c0:	4b24      	ldr	r3, [pc, #144]	; (8003654 <update_radio_timer_params+0xc0>)
 80035c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->EGR |= TIM_EGR_UG;
 80035c8:	4b22      	ldr	r3, [pc, #136]	; (8003654 <update_radio_timer_params+0xc0>)
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	4a21      	ldr	r2, [pc, #132]	; (8003654 <update_radio_timer_params+0xc0>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6153      	str	r3, [r2, #20]
//		debug_tx_uart("10hz\r\n");
		break;
 80035d4:	e038      	b.n	8003648 <update_radio_timer_params+0xb4>

	case FLIGHT_STATE_PRE_APOGEE:
		TIM3->ARR = 5000-1;
 80035d6:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <update_radio_timer_params+0xc0>)
 80035d8:	f241 3287 	movw	r2, #4999	; 0x1387
 80035dc:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->EGR |= TIM_EGR_UG;
 80035de:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <update_radio_timer_params+0xc0>)
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <update_radio_timer_params+0xc0>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	6153      	str	r3, [r2, #20]
//		debug_tx_uart("02hz\r\n");
		break;
 80035ea:	e02d      	b.n	8003648 <update_radio_timer_params+0xb4>

	case FLIGHT_STATE_PRE_MAIN:
		TIM3->ARR = 2000-1;
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <update_radio_timer_params+0xc0>)
 80035ee:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->EGR |= TIM_EGR_UG;
 80035f4:	4b17      	ldr	r3, [pc, #92]	; (8003654 <update_radio_timer_params+0xc0>)
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	4a16      	ldr	r2, [pc, #88]	; (8003654 <update_radio_timer_params+0xc0>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6153      	str	r3, [r2, #20]
//		debug_tx_uart("05hz\r\n");
		break;
 8003600:	e022      	b.n	8003648 <update_radio_timer_params+0xb4>

	case FLIGHT_STATE_PRE_LANDED:
		TIM3->ARR = 1000-1;
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <update_radio_timer_params+0xc0>)
 8003604:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003608:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->EGR |= TIM_EGR_UG;
 800360a:	4b12      	ldr	r3, [pc, #72]	; (8003654 <update_radio_timer_params+0xc0>)
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	4a11      	ldr	r2, [pc, #68]	; (8003654 <update_radio_timer_params+0xc0>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6153      	str	r3, [r2, #20]
//		debug_tx_uart("10hz\r\n");
		break;
 8003616:	e017      	b.n	8003648 <update_radio_timer_params+0xb4>

	case FLIGHT_STATE_LANDED:
		TIM3->ARR = 20000-1;
 8003618:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <update_radio_timer_params+0xc0>)
 800361a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->EGR |= TIM_EGR_UG;
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <update_radio_timer_params+0xc0>)
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	4a0b      	ldr	r2, [pc, #44]	; (8003654 <update_radio_timer_params+0xc0>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6153      	str	r3, [r2, #20]
//		debug_tx_uart("01hz\r\n");
		break;
 800362c:	e00c      	b.n	8003648 <update_radio_timer_params+0xb4>

	default:
		TIM3->ARR = 1000-1;
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <update_radio_timer_params+0xc0>)
 8003630:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003634:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->EGR |= TIM_EGR_UG;
 8003636:	4b07      	ldr	r3, [pc, #28]	; (8003654 <update_radio_timer_params+0xc0>)
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4a06      	ldr	r2, [pc, #24]	; (8003654 <update_radio_timer_params+0xc0>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	6153      	str	r3, [r2, #20]
//		debug_tx_uart("10hz\r\n");
		state = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]
		break;
 8003646:	bf00      	nop
	}
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	40000400 	.word	0x40000400

08003658 <telemetry_format_avionics>:

// formats avionics telemetry string using sprintf
void telemetry_format_avionics(void) {
 8003658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365c:	b0a3      	sub	sp, #140	; 0x8c
 800365e:	af16      	add	r7, sp, #88	; 0x58
	sprintf((char*) msg_buffer_av,
			"S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
			acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8003660:	4b37      	ldr	r3, [pc, #220]	; (8003740 <telemetry_format_avionics+0xe8>)
 8003662:	681b      	ldr	r3, [r3, #0]
	sprintf((char*) msg_buffer_av,
 8003664:	4618      	mov	r0, r3
 8003666:	f7fc ff8f 	bl	8000588 <__aeabi_f2d>
 800366a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 800366e:	4b34      	ldr	r3, [pc, #208]	; (8003740 <telemetry_format_avionics+0xe8>)
 8003670:	685b      	ldr	r3, [r3, #4]
	sprintf((char*) msg_buffer_av,
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc ff88 	bl	8000588 <__aeabi_f2d>
 8003678:	e9c7 0108 	strd	r0, r1, [r7, #32]
			acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 800367c:	4b30      	ldr	r3, [pc, #192]	; (8003740 <telemetry_format_avionics+0xe8>)
 800367e:	689b      	ldr	r3, [r3, #8]
	sprintf((char*) msg_buffer_av,
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc ff81 	bl	8000588 <__aeabi_f2d>
 8003686:	e9c7 0106 	strd	r0, r1, [r7, #24]
			angular_rate_mdps[0], angular_rate_mdps[1],
 800368a:	4b2e      	ldr	r3, [pc, #184]	; (8003744 <telemetry_format_avionics+0xec>)
 800368c:	681b      	ldr	r3, [r3, #0]
	sprintf((char*) msg_buffer_av,
 800368e:	4618      	mov	r0, r3
 8003690:	f7fc ff7a 	bl	8000588 <__aeabi_f2d>
 8003694:	e9c7 0104 	strd	r0, r1, [r7, #16]
			angular_rate_mdps[0], angular_rate_mdps[1],
 8003698:	4b2a      	ldr	r3, [pc, #168]	; (8003744 <telemetry_format_avionics+0xec>)
 800369a:	685b      	ldr	r3, [r3, #4]
	sprintf((char*) msg_buffer_av,
 800369c:	4618      	mov	r0, r3
 800369e:	f7fc ff73 	bl	8000588 <__aeabi_f2d>
 80036a2:	e9c7 0102 	strd	r0, r1, [r7, #8]
			angular_rate_mdps[2], pressure_hPa, latitude, longitude,
 80036a6:	4b27      	ldr	r3, [pc, #156]	; (8003744 <telemetry_format_avionics+0xec>)
 80036a8:	689b      	ldr	r3, [r3, #8]
	sprintf((char*) msg_buffer_av,
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fc ff6c 	bl	8000588 <__aeabi_f2d>
 80036b0:	4605      	mov	r5, r0
 80036b2:	460e      	mov	r6, r1
 80036b4:	4b24      	ldr	r3, [pc, #144]	; (8003748 <telemetry_format_avionics+0xf0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fc ff65 	bl	8000588 <__aeabi_f2d>
 80036be:	4682      	mov	sl, r0
 80036c0:	468b      	mov	fp, r1
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <telemetry_format_avionics+0xf4>)
 80036c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80036c8:	4b21      	ldr	r3, [pc, #132]	; (8003750 <telemetry_format_avionics+0xf8>)
 80036ca:	e9d3 0100 	ldrd	r0, r1, [r3]
			stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <telemetry_format_avionics+0xfc>)
 80036d0:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) msg_buffer_av,
 80036d2:	607b      	str	r3, [r7, #4]
			stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 80036d4:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <telemetry_format_avionics+0xfc>)
 80036d6:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*) msg_buffer_av,
 80036d8:	603b      	str	r3, [r7, #0]
 80036da:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <telemetry_format_avionics+0xfc>)
 80036dc:	685c      	ldr	r4, [r3, #4]
 80036de:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <telemetry_format_avionics+0x100>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b1d      	ldr	r3, [pc, #116]	; (800375c <telemetry_format_avionics+0x104>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	9314      	str	r3, [sp, #80]	; 0x50
 80036ee:	9213      	str	r2, [sp, #76]	; 0x4c
 80036f0:	9412      	str	r4, [sp, #72]	; 0x48
 80036f2:	683c      	ldr	r4, [r7, #0]
 80036f4:	9411      	str	r4, [sp, #68]	; 0x44
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	9310      	str	r3, [sp, #64]	; 0x40
 80036fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80036fe:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003702:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003706:	e9cd 5608 	strd	r5, r6, [sp, #32]
 800370a:	ed97 7b02 	vldr	d7, [r7, #8]
 800370e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003712:	ed97 7b04 	vldr	d7, [r7, #16]
 8003716:	ed8d 7b04 	vstr	d7, [sp, #16]
 800371a:	ed97 7b06 	vldr	d7, [r7, #24]
 800371e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003722:	ed97 7b08 	vldr	d7, [r7, #32]
 8003726:	ed8d 7b00 	vstr	d7, [sp]
 800372a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800372e:	490c      	ldr	r1, [pc, #48]	; (8003760 <telemetry_format_avionics+0x108>)
 8003730:	480c      	ldr	r0, [pc, #48]	; (8003764 <telemetry_format_avionics+0x10c>)
 8003732:	f00b fd95 	bl	800f260 <siprintf>
			continuity, state);
}
 8003736:	bf00      	nop
 8003738:	3734      	adds	r7, #52	; 0x34
 800373a:	46bd      	mov	sp, r7
 800373c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003740:	20000238 	.word	0x20000238
 8003744:	20000244 	.word	0x20000244
 8003748:	20000250 	.word	0x20000250
 800374c:	20000a18 	.word	0x20000a18
 8003750:	20000a08 	.word	0x20000a08
 8003754:	20000264 	.word	0x20000264
 8003758:	20000237 	.word	0x20000237
 800375c:	20000385 	.word	0x20000385
 8003760:	08014594 	.word	0x08014594
 8003764:	2000027c 	.word	0x2000027c

08003768 <telemetry_format_propulsion>:

// formats propulsion telemetry string using sprintf
void telemetry_format_propulsion(void) {
 8003768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376a:	b089      	sub	sp, #36	; 0x24
 800376c:	af06      	add	r7, sp, #24
	sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <telemetry_format_propulsion+0x5c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fc ff08 	bl	8000588 <__aeabi_f2d>
 8003778:	4604      	mov	r4, r0
 800377a:	460d      	mov	r5, r1
 800377c:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <telemetry_format_propulsion+0x60>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7fc ff01 	bl	8000588 <__aeabi_f2d>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4910      	ldr	r1, [pc, #64]	; (80037cc <telemetry_format_propulsion+0x64>)
 800378c:	7809      	ldrb	r1, [r1, #0]
 800378e:	4608      	mov	r0, r1
			tank_pressure, tank_temperature, valve_state, stimeget.Minutes,
 8003790:	490f      	ldr	r1, [pc, #60]	; (80037d0 <telemetry_format_propulsion+0x68>)
 8003792:	7849      	ldrb	r1, [r1, #1]
	sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8003794:	460e      	mov	r6, r1
			stimeget.Seconds, stimeget.SubSeconds);
 8003796:	490e      	ldr	r1, [pc, #56]	; (80037d0 <telemetry_format_propulsion+0x68>)
 8003798:	7889      	ldrb	r1, [r1, #2]
	sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 800379a:	6079      	str	r1, [r7, #4]
 800379c:	490c      	ldr	r1, [pc, #48]	; (80037d0 <telemetry_format_propulsion+0x68>)
 800379e:	6849      	ldr	r1, [r1, #4]
 80037a0:	9105      	str	r1, [sp, #20]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	9104      	str	r1, [sp, #16]
 80037a6:	9603      	str	r6, [sp, #12]
 80037a8:	9002      	str	r0, [sp, #8]
 80037aa:	e9cd 2300 	strd	r2, r3, [sp]
 80037ae:	4622      	mov	r2, r4
 80037b0:	462b      	mov	r3, r5
 80037b2:	4908      	ldr	r1, [pc, #32]	; (80037d4 <telemetry_format_propulsion+0x6c>)
 80037b4:	4808      	ldr	r0, [pc, #32]	; (80037d8 <telemetry_format_propulsion+0x70>)
 80037b6:	f00b fd53 	bl	800f260 <siprintf>
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000260 	.word	0x20000260
 80037c8:	20000258 	.word	0x20000258
 80037cc:	2000025c 	.word	0x2000025c
 80037d0:	20000264 	.word	0x20000264
 80037d4:	080145f0 	.word	0x080145f0
 80037d8:	20000344 	.word	0x20000344

080037dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_SET);
 80037e0:	2201      	movs	r2, #1
 80037e2:	2108      	movs	r1, #8
 80037e4:	4803      	ldr	r0, [pc, #12]	; (80037f4 <Error_Handler+0x18>)
 80037e6:	f002 fca1 	bl	800612c <HAL_GPIO_WritePin>
	buzz_failure();
 80037ea:	f7ff f971 	bl	8002ad0 <buzz_failure>
	__BKPT();
 80037ee:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40020000 	.word	0x40020000

080037f8 <xtend_parse_dma_command>:

extern UART_HandleTypeDef huart8;

extern volatile char xtend_rx_buf[10]; // dma buffer

radio_command xtend_parse_dma_command(void) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0

	if (strcmp(xtend_rx_buf, "lr") == 0) { // launch command
 80037fc:	4929      	ldr	r1, [pc, #164]	; (80038a4 <xtend_parse_dma_command+0xac>)
 80037fe:	482a      	ldr	r0, [pc, #168]	; (80038a8 <xtend_parse_dma_command+0xb0>)
 8003800:	f7fc fcf6 	bl	80001f0 <strcmp>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <xtend_parse_dma_command+0x16>
		return LAUNCH;
 800380a:	2301      	movs	r3, #1
 800380c:	e047      	b.n	800389e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "ap") == 0) { // arm propulsion
 800380e:	4927      	ldr	r1, [pc, #156]	; (80038ac <xtend_parse_dma_command+0xb4>)
 8003810:	4825      	ldr	r0, [pc, #148]	; (80038a8 <xtend_parse_dma_command+0xb0>)
 8003812:	f7fc fced 	bl	80001f0 <strcmp>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <xtend_parse_dma_command+0x28>
		return ARM_PROP;
 800381c:	2302      	movs	r3, #2
 800381e:	e03e      	b.n	800389e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "ar") == 0) { // arm recovery
 8003820:	4923      	ldr	r1, [pc, #140]	; (80038b0 <xtend_parse_dma_command+0xb8>)
 8003822:	4821      	ldr	r0, [pc, #132]	; (80038a8 <xtend_parse_dma_command+0xb0>)
 8003824:	f7fc fce4 	bl	80001f0 <strcmp>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <xtend_parse_dma_command+0x3a>
		return ARM_RCOV;
 800382e:	2303      	movs	r3, #3
 8003830:	e035      	b.n	800389e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "dp") == 0) { // disarm propulsion
 8003832:	4920      	ldr	r1, [pc, #128]	; (80038b4 <xtend_parse_dma_command+0xbc>)
 8003834:	481c      	ldr	r0, [pc, #112]	; (80038a8 <xtend_parse_dma_command+0xb0>)
 8003836:	f7fc fcdb 	bl	80001f0 <strcmp>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <xtend_parse_dma_command+0x4c>
		return DISARM_PROP;
 8003840:	2304      	movs	r3, #4
 8003842:	e02c      	b.n	800389e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "dr") == 0) { // disarm recovery
 8003844:	491c      	ldr	r1, [pc, #112]	; (80038b8 <xtend_parse_dma_command+0xc0>)
 8003846:	4818      	ldr	r0, [pc, #96]	; (80038a8 <xtend_parse_dma_command+0xb0>)
 8003848:	f7fc fcd2 	bl	80001f0 <strcmp>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <xtend_parse_dma_command+0x5e>
		return DISARM_RCOV;
 8003852:	2305      	movs	r3, #5
 8003854:	e023      	b.n	800389e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "v1") == 0) { // vr power on
 8003856:	4919      	ldr	r1, [pc, #100]	; (80038bc <xtend_parse_dma_command+0xc4>)
 8003858:	4813      	ldr	r0, [pc, #76]	; (80038a8 <xtend_parse_dma_command+0xb0>)
 800385a:	f7fc fcc9 	bl	80001f0 <strcmp>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <xtend_parse_dma_command+0x70>
		return VR_POWER_ON;
 8003864:	2306      	movs	r3, #6
 8003866:	e01a      	b.n	800389e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "v2") == 0) { // vr start
 8003868:	4915      	ldr	r1, [pc, #84]	; (80038c0 <xtend_parse_dma_command+0xc8>)
 800386a:	480f      	ldr	r0, [pc, #60]	; (80038a8 <xtend_parse_dma_command+0xb0>)
 800386c:	f7fc fcc0 	bl	80001f0 <strcmp>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <xtend_parse_dma_command+0x82>
		return VR_REC_START;
 8003876:	2307      	movs	r3, #7
 8003878:	e011      	b.n	800389e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "v3") == 0) { // vr stop
 800387a:	4912      	ldr	r1, [pc, #72]	; (80038c4 <xtend_parse_dma_command+0xcc>)
 800387c:	480a      	ldr	r0, [pc, #40]	; (80038a8 <xtend_parse_dma_command+0xb0>)
 800387e:	f7fc fcb7 	bl	80001f0 <strcmp>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <xtend_parse_dma_command+0x94>
		return VR_REC_STOP;
 8003888:	2308      	movs	r3, #8
 800388a:	e008      	b.n	800389e <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "v4") == 0) { // vr power off
 800388c:	490e      	ldr	r1, [pc, #56]	; (80038c8 <xtend_parse_dma_command+0xd0>)
 800388e:	4806      	ldr	r0, [pc, #24]	; (80038a8 <xtend_parse_dma_command+0xb0>)
 8003890:	f7fc fcae 	bl	80001f0 <strcmp>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <xtend_parse_dma_command+0xa6>
		return VR_POWER_OFF;
 800389a:	2309      	movs	r3, #9
 800389c:	e7ff      	b.n	800389e <xtend_parse_dma_command+0xa6>
	}

	// all other commands are invalid, ignore.
}
 800389e:	4618      	mov	r0, r3
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	08014618 	.word	0x08014618
 80038a8:	20000718 	.word	0x20000718
 80038ac:	0801461c 	.word	0x0801461c
 80038b0:	08014620 	.word	0x08014620
 80038b4:	08014624 	.word	0x08014624
 80038b8:	08014628 	.word	0x08014628
 80038bc:	0801462c 	.word	0x0801462c
 80038c0:	08014630 	.word	0x08014630
 80038c4:	08014634 	.word	0x08014634
 80038c8:	08014638 	.word	0x08014638

080038cc <execute_parsed_command>:

void execute_parsed_command(radio_command cmd) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
	// TODO: decide whether we want to send an ack back to ground station, maybe as special event message
	switch (cmd) {
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	3b01      	subs	r3, #1
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d844      	bhi.n	8003968 <execute_parsed_command+0x9c>
 80038de:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <execute_parsed_command+0x18>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	08003909 	.word	0x08003909
 80038e8:	0800391d 	.word	0x0800391d
 80038ec:	08003931 	.word	0x08003931
 80038f0:	08003945 	.word	0x08003945
 80038f4:	0800394b 	.word	0x0800394b
 80038f8:	08003951 	.word	0x08003951
 80038fc:	08003957 	.word	0x08003957
 8003900:	0800395d 	.word	0x0800395d
 8003904:	08003963 	.word	0x08003963
	case LAUNCH:
		rocket_launch();
 8003908:	f000 f83c 	bl	8003984 <rocket_launch>
		HAL_UART_Transmit(&huart8, "launch\r\n", 8, HAL_MAX_DELAY);
 800390c:	f04f 33ff 	mov.w	r3, #4294967295
 8003910:	2208      	movs	r2, #8
 8003912:	4918      	ldr	r1, [pc, #96]	; (8003974 <execute_parsed_command+0xa8>)
 8003914:	4818      	ldr	r0, [pc, #96]	; (8003978 <execute_parsed_command+0xac>)
 8003916:	f006 f9f6 	bl	8009d06 <HAL_UART_Transmit>
		break;
 800391a:	e026      	b.n	800396a <execute_parsed_command+0x9e>

	case ARM_PROP:
		arming_propulsion();
 800391c:	f000 f84c 	bl	80039b8 <arming_propulsion>
		HAL_UART_Transmit(&huart8, "arm pr\r\n", 8, HAL_MAX_DELAY);
 8003920:	f04f 33ff 	mov.w	r3, #4294967295
 8003924:	2208      	movs	r2, #8
 8003926:	4915      	ldr	r1, [pc, #84]	; (800397c <execute_parsed_command+0xb0>)
 8003928:	4813      	ldr	r0, [pc, #76]	; (8003978 <execute_parsed_command+0xac>)
 800392a:	f006 f9ec 	bl	8009d06 <HAL_UART_Transmit>
		break;
 800392e:	e01c      	b.n	800396a <execute_parsed_command+0x9e>

	case ARM_RCOV:
		arming_recovery();
 8003930:	f000 f84e 	bl	80039d0 <arming_recovery>
		HAL_UART_Transmit(&huart8, "arm rc\r\n", 8, HAL_MAX_DELAY);
 8003934:	f04f 33ff 	mov.w	r3, #4294967295
 8003938:	2208      	movs	r2, #8
 800393a:	4911      	ldr	r1, [pc, #68]	; (8003980 <execute_parsed_command+0xb4>)
 800393c:	480e      	ldr	r0, [pc, #56]	; (8003978 <execute_parsed_command+0xac>)
 800393e:	f006 f9e2 	bl	8009d06 <HAL_UART_Transmit>
		break;
 8003942:	e012      	b.n	800396a <execute_parsed_command+0x9e>

	case DISARM_PROP:
		disarm_propulsion();
 8003944:	f000 f850 	bl	80039e8 <disarm_propulsion>
		break;
 8003948:	e00f      	b.n	800396a <execute_parsed_command+0x9e>

	case DISARM_RCOV:
		disarm_recovery();
 800394a:	f000 f867 	bl	8003a1c <disarm_recovery>
		break;
 800394e:	e00c      	b.n	800396a <execute_parsed_command+0x9e>

	case VR_POWER_ON:	// TODO: figure out how to make non-blocking
		VR_Power_On();
 8003950:	f001 f9fc 	bl	8004d4c <VR_Power_On>
		break;
 8003954:	e009      	b.n	800396a <execute_parsed_command+0x9e>

	case VR_REC_START:	// TODO: figure out how to make non-blocking
		VR_Start_Rec();
 8003956:	f001 fa15 	bl	8004d84 <VR_Start_Rec>
		break;
 800395a:	e006      	b.n	800396a <execute_parsed_command+0x9e>

	case VR_REC_STOP:	// TODO: figure out how to make non-blocking
		VR_Stop_Rec();
 800395c:	f001 fa38 	bl	8004dd0 <VR_Stop_Rec>
		break;
 8003960:	e003      	b.n	800396a <execute_parsed_command+0x9e>

	case VR_POWER_OFF:
		VR_Power_Off();
 8003962:	f001 fa03 	bl	8004d6c <VR_Power_Off>
		break;
 8003966:	e000      	b.n	800396a <execute_parsed_command+0x9e>

	default:
		break;
 8003968:	bf00      	nop
	}
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	0801463c 	.word	0x0801463c
 8003978:	20001398 	.word	0x20001398
 800397c:	08014648 	.word	0x08014648
 8003980:	08014654 	.word	0x08014654

08003984 <rocket_launch>:

void rocket_launch(void) {
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
	// just to be safe, set arming pin high to ensure pyro channels are armed
	HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, SET);
 8003988:	2201      	movs	r2, #1
 800398a:	2102      	movs	r1, #2
 800398c:	4808      	ldr	r0, [pc, #32]	; (80039b0 <rocket_launch+0x2c>)
 800398e:	f002 fbcd 	bl	800612c <HAL_GPIO_WritePin>

	// open valve by firing the prop pyro ejection channels
	HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, SET);
 8003992:	2201      	movs	r2, #1
 8003994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003998:	4806      	ldr	r0, [pc, #24]	; (80039b4 <rocket_launch+0x30>)
 800399a:	f002 fbc7 	bl	800612c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, SET);
 800399e:	2201      	movs	r2, #1
 80039a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039a4:	4803      	ldr	r0, [pc, #12]	; (80039b4 <rocket_launch+0x30>)
 80039a6:	f002 fbc1 	bl	800612c <HAL_GPIO_WritePin>
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40021800 	.word	0x40021800
 80039b4:	40021400 	.word	0x40021400

080039b8 <arming_propulsion>:

void arming_propulsion(void) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, SET);
 80039bc:	2201      	movs	r2, #1
 80039be:	2102      	movs	r1, #2
 80039c0:	4802      	ldr	r0, [pc, #8]	; (80039cc <arming_propulsion+0x14>)
 80039c2:	f002 fbb3 	bl	800612c <HAL_GPIO_WritePin>
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40021800 	.word	0x40021800

080039d0 <arming_recovery>:

void arming_recovery(void) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, SET);
 80039d4:	2201      	movs	r2, #1
 80039d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039da:	4802      	ldr	r0, [pc, #8]	; (80039e4 <arming_recovery+0x14>)
 80039dc:	f002 fba6 	bl	800612c <HAL_GPIO_WritePin>
}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021800 	.word	0x40021800

080039e8 <disarm_propulsion>:

void disarm_propulsion(void) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 80039ec:	2200      	movs	r2, #0
 80039ee:	2102      	movs	r1, #2
 80039f0:	4808      	ldr	r0, [pc, #32]	; (8003a14 <disarm_propulsion+0x2c>)
 80039f2:	f002 fb9b 	bl	800612c <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 80039f6:	2200      	movs	r2, #0
 80039f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039fc:	4806      	ldr	r0, [pc, #24]	; (8003a18 <disarm_propulsion+0x30>)
 80039fe:	f002 fb95 	bl	800612c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8003a02:	2200      	movs	r2, #0
 8003a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a08:	4803      	ldr	r0, [pc, #12]	; (8003a18 <disarm_propulsion+0x30>)
 8003a0a:	f002 fb8f 	bl	800612c <HAL_GPIO_WritePin>
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40021800 	.word	0x40021800
 8003a18:	40021400 	.word	0x40021400

08003a1c <disarm_recovery>:

void disarm_recovery(void) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8003a20:	2200      	movs	r2, #0
 8003a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a26:	4808      	ldr	r0, [pc, #32]	; (8003a48 <disarm_recovery+0x2c>)
 8003a28:	f002 fb80 	bl	800612c <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a32:	4805      	ldr	r0, [pc, #20]	; (8003a48 <disarm_recovery+0x2c>)
 8003a34:	f002 fb7a 	bl	800612c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a3e:	4802      	ldr	r0, [pc, #8]	; (8003a48 <disarm_recovery+0x2c>)
 8003a40:	f002 fb74 	bl	800612c <HAL_GPIO_WritePin>
}
 8003a44:	bf00      	nop
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021800 	.word	0x40021800

08003a4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003a60:	2300      	movs	r3, #0
 8003a62:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003a64:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <MX_RTC_Init+0xac>)
 8003a66:	4a25      	ldr	r2, [pc, #148]	; (8003afc <MX_RTC_Init+0xb0>)
 8003a68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a6a:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <MX_RTC_Init+0xac>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003a70:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <MX_RTC_Init+0xac>)
 8003a72:	227f      	movs	r2, #127	; 0x7f
 8003a74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <MX_RTC_Init+0xac>)
 8003a78:	22ff      	movs	r2, #255	; 0xff
 8003a7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <MX_RTC_Init+0xac>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <MX_RTC_Init+0xac>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a88:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <MX_RTC_Init+0xac>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a8e:	481a      	ldr	r0, [pc, #104]	; (8003af8 <MX_RTC_Init+0xac>)
 8003a90:	f004 fa4a 	bl	8007f28 <HAL_RTC_Init>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003a9a:	f7ff fe9f 	bl	80037dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8003a9e:	2310      	movs	r3, #16
 8003aa0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 8003aa2:	2320      	movs	r3, #32
 8003aa4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8003aa6:	2330      	movs	r3, #48	; 0x30
 8003aa8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003ab2:	1d3b      	adds	r3, r7, #4
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	480f      	ldr	r0, [pc, #60]	; (8003af8 <MX_RTC_Init+0xac>)
 8003aba:	f004 fac6 	bl	800804a <HAL_RTC_SetTime>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003ac4:	f7ff fe8a 	bl	80037dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8003acc:	2302      	movs	r3, #2
 8003ace:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8003ad0:	2312      	movs	r3, #18
 8003ad2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8003ad4:	2321      	movs	r3, #33	; 0x21
 8003ad6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003ad8:	463b      	mov	r3, r7
 8003ada:	2201      	movs	r2, #1
 8003adc:	4619      	mov	r1, r3
 8003ade:	4806      	ldr	r0, [pc, #24]	; (8003af8 <MX_RTC_Init+0xac>)
 8003ae0:	f004 fbce 	bl	8008280 <HAL_RTC_SetDate>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003aea:	f7ff fe77 	bl	80037dc <Error_Handler>
  }

}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000c80 	.word	0x20000c80
 8003afc:	40002800 	.word	0x40002800

08003b00 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <HAL_RTC_MspInit+0x24>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d102      	bne.n	8003b18 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RTC_MspInit+0x28>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	40002800 	.word	0x40002800
 8003b28:	42470e3c 	.word	0x42470e3c

08003b2c <myprintf>:
extern FRESULT fres;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8003b2c:	b40f      	push	{r0, r1, r2, r3}
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b42:	4805      	ldr	r0, [pc, #20]	; (8003b58 <myprintf+0x2c>)
 8003b44:	f00c fb2c 	bl	80101a0 <vsniprintf>
  va_end(args);

//  int len = strlen(buffer);
//  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, len, -1);

}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b52:	b004      	add	sp, #16
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	200003a0 	.word	0x200003a0

08003b5c <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	; 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8003b68:	2201      	movs	r2, #1
 8003b6a:	4933      	ldr	r1, [pc, #204]	; (8003c38 <sd_init_dynamic_filename+0xdc>)
 8003b6c:	4833      	ldr	r0, [pc, #204]	; (8003c3c <sd_init_dynamic_filename+0xe0>)
 8003b6e:	f009 fc99 	bl	800d4a4 <f_mount>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8003b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d009      	beq.n	8003b94 <sd_init_dynamic_filename+0x38>
		myprintf("f_mount error (%i)\r\n", fres);
 8003b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b84:	4619      	mov	r1, r3
 8003b86:	482e      	ldr	r0, [pc, #184]	; (8003c40 <sd_init_dynamic_filename+0xe4>)
 8003b88:	f7ff ffd0 	bl	8003b2c <myprintf>
		__BKPT();
 8003b8c:	be00      	bkpt	0x0000
		return fres;
 8003b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b92:	e04c      	b.n	8003c2e <sd_init_dynamic_filename+0xd2>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8003b98:	f107 0320 	add.w	r3, r7, #32
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	68f9      	ldr	r1, [r7, #12]
 8003ba0:	4825      	ldr	r0, [pc, #148]	; (8003c38 <sd_init_dynamic_filename+0xdc>)
 8003ba2:	f000 f89d 	bl	8003ce0 <scan_files>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	f107 0310 	add.w	r3, r7, #16
 8003bb4:	4923      	ldr	r1, [pc, #140]	; (8003c44 <sd_init_dynamic_filename+0xe8>)
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f00b fb52 	bl	800f260 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8003bbc:	f107 0310 	add.w	r3, r7, #16
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f00b fbea 	bl	800f39c <strcpy>
 8003bc8:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8003bca:	f107 0310 	add.w	r3, r7, #16
 8003bce:	221a      	movs	r2, #26
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	481d      	ldr	r0, [pc, #116]	; (8003c48 <sd_init_dynamic_filename+0xec>)
 8003bd4:	f009 fcac 	bl	800d530 <f_open>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8003bde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11a      	bne.n	8003c1c <sd_init_dynamic_filename+0xc0>
		myprintf("I was able to open filename.txt for writing\r\n");
 8003be6:	4819      	ldr	r0, [pc, #100]	; (8003c4c <sd_init_dynamic_filename+0xf0>)
 8003be8:	f7ff ffa0 	bl	8003b2c <myprintf>
		myprintf("f_open error (%i)\r\n", fres);
		__BKPT();
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8003bec:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <sd_init_dynamic_filename+0xec>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4815      	ldr	r0, [pc, #84]	; (8003c48 <sd_init_dynamic_filename+0xec>)
 8003bf4:	f00a f877 	bl	800dce6 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8003bf8:	4915      	ldr	r1, [pc, #84]	; (8003c50 <sd_init_dynamic_filename+0xf4>)
 8003bfa:	4816      	ldr	r0, [pc, #88]	; (8003c54 <sd_init_dynamic_filename+0xf8>)
 8003bfc:	f00b fb30 	bl	800f260 <siprintf>
	sd_write(&fil, msg_buffer);
 8003c00:	4914      	ldr	r1, [pc, #80]	; (8003c54 <sd_init_dynamic_filename+0xf8>)
 8003c02:	4811      	ldr	r0, [pc, #68]	; (8003c48 <sd_init_dynamic_filename+0xec>)
 8003c04:	f000 f842 	bl	8003c8c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	480f      	ldr	r0, [pc, #60]	; (8003c48 <sd_init_dynamic_filename+0xec>)
 8003c0c:	f000 f83e 	bl	8003c8c <sd_write>
	f_close(&fil);
 8003c10:	480d      	ldr	r0, [pc, #52]	; (8003c48 <sd_init_dynamic_filename+0xec>)
 8003c12:	f00a f83e 	bl	800dc92 <f_close>

	return fres;
 8003c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c1a:	e008      	b.n	8003c2e <sd_init_dynamic_filename+0xd2>
		myprintf("f_open error (%i)\r\n", fres);
 8003c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c20:	4619      	mov	r1, r3
 8003c22:	480d      	ldr	r0, [pc, #52]	; (8003c58 <sd_init_dynamic_filename+0xfc>)
 8003c24:	f7ff ff82 	bl	8003b2c <myprintf>
		__BKPT();
 8003c28:	be00      	bkpt	0x0000
		return fres;
 8003c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3728      	adds	r7, #40	; 0x28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	08014660 	.word	0x08014660
 8003c3c:	20000724 	.word	0x20000724
 8003c40:	08014664 	.word	0x08014664
 8003c44:	080146e0 	.word	0x080146e0
 8003c48:	20000a50 	.word	0x20000a50
 8003c4c:	0801467c 	.word	0x0801467c
 8003c50:	080146c0 	.word	0x080146c0
 8003c54:	20000ca0 	.word	0x20000ca0
 8003c58:	080146ac 	.word	0x080146ac

08003c5c <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8003c64:	2212      	movs	r2, #18
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4807      	ldr	r0, [pc, #28]	; (8003c88 <sd_open_file+0x2c>)
 8003c6a:	f009 fc61 	bl	800d530 <f_open>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <sd_open_file+0x2c>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4619      	mov	r1, r3
 8003c78:	4803      	ldr	r0, [pc, #12]	; (8003c88 <sd_open_file+0x2c>)
 8003c7a:	f00a f834 	bl	800dce6 <f_lseek>

	return fres;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000a50 	.word	0x20000a50

08003c8c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8003c96:	6838      	ldr	r0, [r7, #0]
 8003c98:	f7fc fab4 	bl	8000204 <strlen>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	f107 0308 	add.w	r3, r7, #8
 8003ca2:	6839      	ldr	r1, [r7, #0]
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f009 fe01 	bl	800d8ac <f_write>
 8003caa:	4603      	mov	r3, r0
 8003cac:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d107      	bne.n	8003cc4 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4807      	ldr	r0, [pc, #28]	; (8003cd8 <sd_write+0x4c>)
 8003cba:	f7ff ff37 	bl	8003b2c <myprintf>
		return bytesWrote;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	b25b      	sxtb	r3, r3
 8003cc2:	e004      	b.n	8003cce <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8003cc4:	4805      	ldr	r0, [pc, #20]	; (8003cdc <sd_write+0x50>)
 8003cc6:	f7ff ff31 	bl	8003b2c <myprintf>
		return -1;
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	080146ec 	.word	0x080146ec
 8003cdc:	08014710 	.word	0x08014710

08003ce0 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8003ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce2:	b099      	sub	sp, #100	; 0x64
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	466b      	mov	r3, sp
 8003cee:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8003cf0:	68b8      	ldr	r0, [r7, #8]
 8003cf2:	f7fc fa87 	bl	8000204 <strlen>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8003cfc:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8003d00:	4623      	mov	r3, r4
 8003d02:	3b01      	subs	r3, #1
 8003d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d06:	b2e0      	uxtb	r0, r4
 8003d08:	f04f 0100 	mov.w	r1, #0
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	00cb      	lsls	r3, r1, #3
 8003d16:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003d1a:	00c2      	lsls	r2, r0, #3
 8003d1c:	b2e0      	uxtb	r0, r4
 8003d1e:	f04f 0100 	mov.w	r1, #0
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	00cb      	lsls	r3, r1, #3
 8003d2c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003d30:	00c2      	lsls	r2, r0, #3
 8003d32:	4623      	mov	r3, r4
 8003d34:	3307      	adds	r3, #7
 8003d36:	08db      	lsrs	r3, r3, #3
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	ebad 0d03 	sub.w	sp, sp, r3
 8003d3e:	466b      	mov	r3, sp
 8003d40:	3300      	adds	r3, #0
 8003d42:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8003d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d46:	4619      	mov	r1, r3
 8003d48:	68b8      	ldr	r0, [r7, #8]
 8003d4a:	f000 f8ff 	bl	8003f4c <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8003d58:	f107 0318 	add.w	r3, r7, #24
 8003d5c:	68f9      	ldr	r1, [r7, #12]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f00a f9ca 	bl	800e0f8 <f_opendir>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8003d6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d16c      	bne.n	8003e4c <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003d72:	f107 0318 	add.w	r3, r7, #24
 8003d76:	4939      	ldr	r1, [pc, #228]	; (8003e5c <scan_files+0x17c>)
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f00a fa56 	bl	800e22a <f_readdir>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8003d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d15a      	bne.n	8003e42 <scan_files+0x162>
 8003d8c:	4b33      	ldr	r3, [pc, #204]	; (8003e5c <scan_files+0x17c>)
 8003d8e:	7a5b      	ldrb	r3, [r3, #9]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d056      	beq.n	8003e42 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8003d94:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <scan_files+0x17c>)
 8003d96:	7a1b      	ldrb	r3, [r3, #8]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d14e      	bne.n	8003e3e <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8003da0:	466b      	mov	r3, sp
 8003da2:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8003da4:	482e      	ldr	r0, [pc, #184]	; (8003e60 <scan_files+0x180>)
 8003da6:	f7fc fa2d 	bl	8000204 <strlen>
 8003daa:	4604      	mov	r4, r0
 8003dac:	4623      	mov	r3, r4
 8003dae:	3b01      	subs	r3, #1
 8003db0:	653b      	str	r3, [r7, #80]	; 0x50
 8003db2:	4620      	mov	r0, r4
 8003db4:	f04f 0100 	mov.w	r1, #0
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	00cb      	lsls	r3, r1, #3
 8003dc2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003dc6:	00c2      	lsls	r2, r0, #3
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f04f 0100 	mov.w	r1, #0
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	00cb      	lsls	r3, r1, #3
 8003dd8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003ddc:	00c2      	lsls	r2, r0, #3
 8003dde:	1de3      	adds	r3, r4, #7
 8003de0:	08db      	lsrs	r3, r3, #3
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	ebad 0d03 	sub.w	sp, sp, r3
 8003de8:	466b      	mov	r3, sp
 8003dea:	3300      	adds	r3, #0
 8003dec:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8003dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df0:	4619      	mov	r1, r3
 8003df2:	481b      	ldr	r0, [pc, #108]	; (8003e60 <scan_files+0x180>)
 8003df4:	f000 f8aa 	bl	8003f4c <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8003df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfa:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4817      	ldr	r0, [pc, #92]	; (8003e60 <scan_files+0x180>)
 8003e02:	f00b fad3 	bl	800f3ac <strncmp>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8003e0c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d112      	bne.n	8003e3a <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8003e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e16:	f107 0214 	add.w	r2, r7, #20
 8003e1a:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f820 	bl	8003e64 <extract_filename_suffix>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d202      	bcs.n	8003e3a <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	46b5      	mov	sp, r6
 8003e3c:	e799      	b.n	8003d72 <scan_files+0x92>
            	continue; // don't enter directory
 8003e3e:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003e40:	e797      	b.n	8003d72 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8003e42:	f107 0318 	add.w	r3, r7, #24
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00a f9c9 	bl	800e1de <f_closedir>
    }

    return res;
 8003e4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e50:	46ad      	mov	sp, r5
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3764      	adds	r7, #100	; 0x64
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200004a0 	.word	0x200004a0
 8003e60:	200004a9 	.word	0x200004a9

08003e64 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8003e64:	b5b0      	push	{r4, r5, r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	72fb      	strb	r3, [r7, #11]
 8003e72:	466b      	mov	r3, sp
 8003e74:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7fc f9c4 	bl	8000204 <strlen>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8003e80:	2308      	movs	r3, #8
 8003e82:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8003e84:	7f7c      	ldrb	r4, [r7, #29]
 8003e86:	4623      	mov	r3, r4
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	61bb      	str	r3, [r7, #24]
 8003e8c:	b2e0      	uxtb	r0, r4
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	00cb      	lsls	r3, r1, #3
 8003e9c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003ea0:	00c2      	lsls	r2, r0, #3
 8003ea2:	b2e0      	uxtb	r0, r4
 8003ea4:	f04f 0100 	mov.w	r1, #0
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	00cb      	lsls	r3, r1, #3
 8003eb2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003eb6:	00c2      	lsls	r2, r0, #3
 8003eb8:	4623      	mov	r3, r4
 8003eba:	3307      	adds	r3, #7
 8003ebc:	08db      	lsrs	r3, r3, #3
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	ebad 0d03 	sub.w	sp, sp, r3
 8003ec4:	466b      	mov	r3, sp
 8003ec6:	3300      	adds	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	77fb      	strb	r3, [r7, #31]
 8003ece:	e014      	b.n	8003efa <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8003ed0:	7afb      	ldrb	r3, [r7, #11]
 8003ed2:	1e5a      	subs	r2, r3, #1
 8003ed4:	7ffb      	ldrb	r3, [r7, #31]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	7fbb      	ldrb	r3, [r7, #30]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	429a      	cmp	r2, r3
 8003ede:	da11      	bge.n	8003f04 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8003ee0:	7afa      	ldrb	r2, [r7, #11]
 8003ee2:	7ffb      	ldrb	r3, [r7, #31]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	441a      	add	r2, r3
 8003eec:	7ffb      	ldrb	r3, [r7, #31]
 8003eee:	7811      	ldrb	r1, [r2, #0]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8003ef4:	7ffb      	ldrb	r3, [r7, #31]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	7ffa      	ldrb	r2, [r7, #31]
 8003efc:	7f7b      	ldrb	r3, [r7, #29]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d3e6      	bcc.n	8003ed0 <extract_filename_suffix+0x6c>
 8003f02:	e000      	b.n	8003f06 <extract_filename_suffix+0xa2>
		}
		else break;
 8003f04:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f107 0110 	add.w	r1, r7, #16
 8003f0c:	220a      	movs	r2, #10
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f00c f910 	bl	8010134 <strtol>
 8003f14:	4603      	mov	r3, r0
 8003f16:	461a      	mov	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d00a      	beq.n	8003f3a <extract_filename_suffix+0xd6>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f2c:	d005      	beq.n	8003f3a <extract_filename_suffix+0xd6>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <extract_filename_suffix+0xda>
	{
		return 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <extract_filename_suffix+0xdc>
	}

	return 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	46ad      	mov	sp, r5
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003f4c <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
 8003f5a:	e019      	b.n	8003f90 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	73bb      	strb	r3, [r7, #14]
 8003f66:	7bbb      	ldrb	r3, [r7, #14]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	4a0f      	ldr	r2, [pc, #60]	; (8003fa8 <str2upper+0x5c>)
 8003f6c:	4413      	add	r3, r2
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d102      	bne.n	8003f7e <str2upper+0x32>
 8003f78:	7bbb      	ldrb	r3, [r7, #14]
 8003f7a:	3b20      	subs	r3, #32
 8003f7c:	e000      	b.n	8003f80 <str2upper+0x34>
 8003f7e:	7bbb      	ldrb	r3, [r7, #14]
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	6839      	ldr	r1, [r7, #0]
 8003f84:	440a      	add	r2, r1
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	7bfc      	ldrb	r4, [r7, #15]
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fc f936 	bl	8000204 <strlen>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	429c      	cmp	r4, r3
 8003f9c:	d3de      	bcc.n	8003f5c <str2upper+0x10>
	}
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd90      	pop	{r4, r7, pc}
 8003fa8:	08014898 	.word	0x08014898

08003fac <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003fb0:	4b17      	ldr	r3, [pc, #92]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fb2:	4a18      	ldr	r2, [pc, #96]	; (8004014 <MX_SPI2_Init+0x68>)
 8003fb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003fb6:	4b16      	ldr	r3, [pc, #88]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003fbe:	4b14      	ldr	r3, [pc, #80]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fc4:	4b12      	ldr	r3, [pc, #72]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fca:	4b11      	ldr	r3, [pc, #68]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fdc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ff0:	4b07      	ldr	r3, [pc, #28]	; (8004010 <MX_SPI2_Init+0x64>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <MX_SPI2_Init+0x64>)
 8003ff8:	220a      	movs	r2, #10
 8003ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003ffc:	4804      	ldr	r0, [pc, #16]	; (8004010 <MX_SPI2_Init+0x64>)
 8003ffe:	f004 fac5 	bl	800858c <HAL_SPI_Init>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004008:	f7ff fbe8 	bl	80037dc <Error_Handler>
  }

}
 800400c:	bf00      	nop
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20001088 	.word	0x20001088
 8004014:	40003800 	.word	0x40003800

08004018 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 800401c:	4b17      	ldr	r3, [pc, #92]	; (800407c <MX_SPI4_Init+0x64>)
 800401e:	4a18      	ldr	r2, [pc, #96]	; (8004080 <MX_SPI4_Init+0x68>)
 8004020:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004022:	4b16      	ldr	r3, [pc, #88]	; (800407c <MX_SPI4_Init+0x64>)
 8004024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004028:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800402a:	4b14      	ldr	r3, [pc, #80]	; (800407c <MX_SPI4_Init+0x64>)
 800402c:	2200      	movs	r2, #0
 800402e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <MX_SPI4_Init+0x64>)
 8004032:	2200      	movs	r2, #0
 8004034:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <MX_SPI4_Init+0x64>)
 8004038:	2200      	movs	r2, #0
 800403a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800403c:	4b0f      	ldr	r3, [pc, #60]	; (800407c <MX_SPI4_Init+0x64>)
 800403e:	2200      	movs	r2, #0
 8004040:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <MX_SPI4_Init+0x64>)
 8004044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004048:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <MX_SPI4_Init+0x64>)
 800404c:	2228      	movs	r2, #40	; 0x28
 800404e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004050:	4b0a      	ldr	r3, [pc, #40]	; (800407c <MX_SPI4_Init+0x64>)
 8004052:	2200      	movs	r2, #0
 8004054:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <MX_SPI4_Init+0x64>)
 8004058:	2200      	movs	r2, #0
 800405a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800405c:	4b07      	ldr	r3, [pc, #28]	; (800407c <MX_SPI4_Init+0x64>)
 800405e:	2200      	movs	r2, #0
 8004060:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8004062:	4b06      	ldr	r3, [pc, #24]	; (800407c <MX_SPI4_Init+0x64>)
 8004064:	220a      	movs	r2, #10
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004068:	4804      	ldr	r0, [pc, #16]	; (800407c <MX_SPI4_Init+0x64>)
 800406a:	f004 fa8f 	bl	800858c <HAL_SPI_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004074:	f7ff fbb2 	bl	80037dc <Error_Handler>
  }

}
 8004078:	bf00      	nop
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000500 	.word	0x20000500
 8004080:	40013400 	.word	0x40013400

08004084 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8004088:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <MX_SPI5_Init+0x64>)
 800408a:	4a18      	ldr	r2, [pc, #96]	; (80040ec <MX_SPI5_Init+0x68>)
 800408c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800408e:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <MX_SPI5_Init+0x64>)
 8004090:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004094:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004096:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <MX_SPI5_Init+0x64>)
 8004098:	2200      	movs	r2, #0
 800409a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800409c:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <MX_SPI5_Init+0x64>)
 800409e:	2200      	movs	r2, #0
 80040a0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <MX_SPI5_Init+0x64>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040a8:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <MX_SPI5_Init+0x64>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80040ae:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <MX_SPI5_Init+0x64>)
 80040b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <MX_SPI5_Init+0x64>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040bc:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <MX_SPI5_Init+0x64>)
 80040be:	2200      	movs	r2, #0
 80040c0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80040c2:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <MX_SPI5_Init+0x64>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040c8:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <MX_SPI5_Init+0x64>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <MX_SPI5_Init+0x64>)
 80040d0:	220a      	movs	r2, #10
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80040d4:	4804      	ldr	r0, [pc, #16]	; (80040e8 <MX_SPI5_Init+0x64>)
 80040d6:	f004 fa59 	bl	800858c <HAL_SPI_Init>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80040e0:	f7ff fb7c 	bl	80037dc <Error_Handler>
  }

}
 80040e4:	bf00      	nop
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	200010e0 	.word	0x200010e0
 80040ec:	40015000 	.word	0x40015000

080040f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08e      	sub	sp, #56	; 0x38
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a4c      	ldr	r2, [pc, #304]	; (8004240 <HAL_SPI_MspInit+0x150>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d12d      	bne.n	800416e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	623b      	str	r3, [r7, #32]
 8004116:	4b4b      	ldr	r3, [pc, #300]	; (8004244 <HAL_SPI_MspInit+0x154>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	4a4a      	ldr	r2, [pc, #296]	; (8004244 <HAL_SPI_MspInit+0x154>)
 800411c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004120:	6413      	str	r3, [r2, #64]	; 0x40
 8004122:	4b48      	ldr	r3, [pc, #288]	; (8004244 <HAL_SPI_MspInit+0x154>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412a:	623b      	str	r3, [r7, #32]
 800412c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	4b44      	ldr	r3, [pc, #272]	; (8004244 <HAL_SPI_MspInit+0x154>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4a43      	ldr	r2, [pc, #268]	; (8004244 <HAL_SPI_MspInit+0x154>)
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	6313      	str	r3, [r2, #48]	; 0x30
 800413e:	4b41      	ldr	r3, [pc, #260]	; (8004244 <HAL_SPI_MspInit+0x154>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800414a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004150:	2302      	movs	r3, #2
 8004152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004154:	2301      	movs	r3, #1
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004158:	2303      	movs	r3, #3
 800415a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800415c:	2305      	movs	r3, #5
 800415e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004164:	4619      	mov	r1, r3
 8004166:	4838      	ldr	r0, [pc, #224]	; (8004248 <HAL_SPI_MspInit+0x158>)
 8004168:	f001 fe1c 	bl	8005da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800416c:	e064      	b.n	8004238 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a36      	ldr	r2, [pc, #216]	; (800424c <HAL_SPI_MspInit+0x15c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d12d      	bne.n	80041d4 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004178:	2300      	movs	r3, #0
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	4b31      	ldr	r3, [pc, #196]	; (8004244 <HAL_SPI_MspInit+0x154>)
 800417e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004180:	4a30      	ldr	r2, [pc, #192]	; (8004244 <HAL_SPI_MspInit+0x154>)
 8004182:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004186:	6453      	str	r3, [r2, #68]	; 0x44
 8004188:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <HAL_SPI_MspInit+0x154>)
 800418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <HAL_SPI_MspInit+0x154>)
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	4a29      	ldr	r2, [pc, #164]	; (8004244 <HAL_SPI_MspInit+0x154>)
 800419e:	f043 0310 	orr.w	r3, r3, #16
 80041a2:	6313      	str	r3, [r2, #48]	; 0x30
 80041a4:	4b27      	ldr	r3, [pc, #156]	; (8004244 <HAL_SPI_MspInit+0x154>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80041b0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b6:	2302      	movs	r3, #2
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041be:	2303      	movs	r3, #3
 80041c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80041c2:	2305      	movs	r3, #5
 80041c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ca:	4619      	mov	r1, r3
 80041cc:	4820      	ldr	r0, [pc, #128]	; (8004250 <HAL_SPI_MspInit+0x160>)
 80041ce:	f001 fde9 	bl	8005da4 <HAL_GPIO_Init>
}
 80041d2:	e031      	b.n	8004238 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <HAL_SPI_MspInit+0x164>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d12c      	bne.n	8004238 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_SPI_MspInit+0x154>)
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	4a17      	ldr	r2, [pc, #92]	; (8004244 <HAL_SPI_MspInit+0x154>)
 80041e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ec:	6453      	str	r3, [r2, #68]	; 0x44
 80041ee:	4b15      	ldr	r3, [pc, #84]	; (8004244 <HAL_SPI_MspInit+0x154>)
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <HAL_SPI_MspInit+0x154>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	4a10      	ldr	r2, [pc, #64]	; (8004244 <HAL_SPI_MspInit+0x154>)
 8004204:	f043 0320 	orr.w	r3, r3, #32
 8004208:	6313      	str	r3, [r2, #48]	; 0x30
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_SPI_MspInit+0x154>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004216:	f44f 7360 	mov.w	r3, #896	; 0x380
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421c:	2302      	movs	r3, #2
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004220:	2301      	movs	r3, #1
 8004222:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004224:	2303      	movs	r3, #3
 8004226:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004228:	2305      	movs	r3, #5
 800422a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800422c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004230:	4619      	mov	r1, r3
 8004232:	4809      	ldr	r0, [pc, #36]	; (8004258 <HAL_SPI_MspInit+0x168>)
 8004234:	f001 fdb6 	bl	8005da4 <HAL_GPIO_Init>
}
 8004238:	bf00      	nop
 800423a:	3738      	adds	r7, #56	; 0x38
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40003800 	.word	0x40003800
 8004244:	40023800 	.word	0x40023800
 8004248:	40020400 	.word	0x40020400
 800424c:	40013400 	.word	0x40013400
 8004250:	40021000 	.word	0x40021000
 8004254:	40015000 	.word	0x40015000
 8004258:	40021400 	.word	0x40021400

0800425c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <HAL_MspInit+0x4c>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	4a0f      	ldr	r2, [pc, #60]	; (80042a8 <HAL_MspInit+0x4c>)
 800426c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004270:	6453      	str	r3, [r2, #68]	; 0x44
 8004272:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <HAL_MspInit+0x4c>)
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_MspInit+0x4c>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <HAL_MspInit+0x4c>)
 8004288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428c:	6413      	str	r3, [r2, #64]	; 0x40
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_MspInit+0x4c>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800

080042ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ba:	b480      	push	{r7}
 80042bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042be:	e7fe      	b.n	80042be <HardFault_Handler+0x4>

080042c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042c4:	e7fe      	b.n	80042c4 <MemManage_Handler+0x4>

080042c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042c6:	b480      	push	{r7}
 80042c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042ca:	e7fe      	b.n	80042ca <BusFault_Handler+0x4>

080042cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042d0:	e7fe      	b.n	80042d0 <UsageFault_Handler+0x4>

080042d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042d2:	b480      	push	{r7}
 80042d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042d6:	bf00      	nop
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042ee:	b480      	push	{r7}
 80042f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004300:	f000 fdf6 	bl	8004ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004304:	bf00      	nop
 8004306:	bd80      	pop	{r7, pc}

08004308 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800430c:	2001      	movs	r0, #1
 800430e:	f001 ff41 	bl	8006194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}

08004316 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800431a:	2010      	movs	r0, #16
 800431c:	f001 ff3a 	bl	8006194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004320:	bf00      	nop
 8004322:	bd80      	pop	{r7, pc}

08004324 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004328:	4802      	ldr	r0, [pc, #8]	; (8004334 <DMA1_Stream1_IRQHandler+0x10>)
 800432a:	f001 fad1 	bl	80058d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20001298 	.word	0x20001298

08004338 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800433c:	4802      	ldr	r0, [pc, #8]	; (8004348 <DMA1_Stream3_IRQHandler+0x10>)
 800433e:	f001 fac7 	bl	80058d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20001338 	.word	0x20001338

0800434c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004350:	4802      	ldr	r0, [pc, #8]	; (800435c <TIM3_IRQHandler+0x10>)
 8004352:	f004 fe31 	bl	8008fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	200011b8 	.word	0x200011b8

08004360 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004364:	4802      	ldr	r0, [pc, #8]	; (8004370 <USART3_IRQHandler+0x10>)
 8004366:	f005 fe53 	bl	800a010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	200012f8 	.word	0x200012f8

08004374 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004378:	4802      	ldr	r0, [pc, #8]	; (8004384 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800437a:	f004 fe1d 	bl	8008fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20001138 	.word	0x20001138

08004388 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800438c:	4802      	ldr	r0, [pc, #8]	; (8004398 <DMA2_Stream0_IRQHandler+0x10>)
 800438e:	f001 fa9f 	bl	80058d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	200005a0 	.word	0x200005a0

0800439c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80043a0:	4802      	ldr	r0, [pc, #8]	; (80043ac <DMA2_Stream1_IRQHandler+0x10>)
 80043a2:	f001 fa95 	bl	80058d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20001238 	.word	0x20001238

080043b0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80043b4:	4802      	ldr	r0, [pc, #8]	; (80043c0 <USART6_IRQHandler+0x10>)
 80043b6:	f005 fe2b 	bl	800a010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	200013d8 	.word	0x200013d8

080043c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
	return 1;
 80043c8:	2301      	movs	r3, #1
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <_kill>:

int _kill(int pid, int sig)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80043de:	f009 ffbd 	bl	800e35c <__errno>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2216      	movs	r2, #22
 80043e6:	601a      	str	r2, [r3, #0]
	return -1;
 80043e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <_exit>:

void _exit (int status)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80043fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ffe7 	bl	80043d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004406:	e7fe      	b.n	8004406 <_exit+0x12>

08004408 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	e00a      	b.n	8004430 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800441a:	f3af 8000 	nop.w
 800441e:	4601      	mov	r1, r0
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	60ba      	str	r2, [r7, #8]
 8004426:	b2ca      	uxtb	r2, r1
 8004428:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	3301      	adds	r3, #1
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	dbf0      	blt.n	800441a <_read+0x12>
	}

return len;
 8004438:	687b      	ldr	r3, [r7, #4]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e009      	b.n	8004468 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	60ba      	str	r2, [r7, #8]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	3301      	adds	r3, #1
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	dbf1      	blt.n	8004454 <_write+0x12>
	}
	return len;
 8004470:	687b      	ldr	r3, [r7, #4]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <_close>:

int _close(int file)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
	return -1;
 8004482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044a2:	605a      	str	r2, [r3, #4]
	return 0;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <_isatty>:

int _isatty(int file)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
	return 1;
 80044ba:	2301      	movs	r3, #1
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
	return 0;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044ec:	4a14      	ldr	r2, [pc, #80]	; (8004540 <_sbrk+0x5c>)
 80044ee:	4b15      	ldr	r3, [pc, #84]	; (8004544 <_sbrk+0x60>)
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044f8:	4b13      	ldr	r3, [pc, #76]	; (8004548 <_sbrk+0x64>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d102      	bne.n	8004506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004500:	4b11      	ldr	r3, [pc, #68]	; (8004548 <_sbrk+0x64>)
 8004502:	4a12      	ldr	r2, [pc, #72]	; (800454c <_sbrk+0x68>)
 8004504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <_sbrk+0x64>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	429a      	cmp	r2, r3
 8004512:	d207      	bcs.n	8004524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004514:	f009 ff22 	bl	800e35c <__errno>
 8004518:	4603      	mov	r3, r0
 800451a:	220c      	movs	r2, #12
 800451c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800451e:	f04f 33ff 	mov.w	r3, #4294967295
 8004522:	e009      	b.n	8004538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004524:	4b08      	ldr	r3, [pc, #32]	; (8004548 <_sbrk+0x64>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <_sbrk+0x64>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	4a05      	ldr	r2, [pc, #20]	; (8004548 <_sbrk+0x64>)
 8004534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004536:	68fb      	ldr	r3, [r7, #12]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20030000 	.word	0x20030000
 8004544:	00000400 	.word	0x00000400
 8004548:	200004b8 	.word	0x200004b8
 800454c:	200018a0 	.word	0x200018a0

08004550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004554:	4b08      	ldr	r3, [pc, #32]	; (8004578 <SystemInit+0x28>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	4a07      	ldr	r2, [pc, #28]	; (8004578 <SystemInit+0x28>)
 800455c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <SystemInit+0x28>)
 8004566:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800456a:	609a      	str	r2, [r3, #8]
#endif
}
 800456c:	bf00      	nop
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08e      	sub	sp, #56	; 0x38
 8004580:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	605a      	str	r2, [r3, #4]
 800458c:	609a      	str	r2, [r3, #8]
 800458e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004590:	f107 0320 	add.w	r3, r7, #32
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800459a:	1d3b      	adds	r3, r7, #4
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	609a      	str	r2, [r3, #8]
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	611a      	str	r2, [r3, #16]
 80045a8:	615a      	str	r2, [r3, #20]
 80045aa:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80045ac:	4b2d      	ldr	r3, [pc, #180]	; (8004664 <MX_TIM2_Init+0xe8>)
 80045ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80045b4:	4b2b      	ldr	r3, [pc, #172]	; (8004664 <MX_TIM2_Init+0xe8>)
 80045b6:	2259      	movs	r2, #89	; 0x59
 80045b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ba:	4b2a      	ldr	r3, [pc, #168]	; (8004664 <MX_TIM2_Init+0xe8>)
 80045bc:	2200      	movs	r2, #0
 80045be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80045c0:	4b28      	ldr	r3, [pc, #160]	; (8004664 <MX_TIM2_Init+0xe8>)
 80045c2:	f240 128f 	movw	r2, #399	; 0x18f
 80045c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045c8:	4b26      	ldr	r3, [pc, #152]	; (8004664 <MX_TIM2_Init+0xe8>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ce:	4b25      	ldr	r3, [pc, #148]	; (8004664 <MX_TIM2_Init+0xe8>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80045d4:	4823      	ldr	r0, [pc, #140]	; (8004664 <MX_TIM2_Init+0xe8>)
 80045d6:	f004 fbf9 	bl	8008dcc <HAL_TIM_Base_Init>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80045e0:	f7ff f8fc 	bl	80037dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80045ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045ee:	4619      	mov	r1, r3
 80045f0:	481c      	ldr	r0, [pc, #112]	; (8004664 <MX_TIM2_Init+0xe8>)
 80045f2:	f004 feaf 	bl	8009354 <HAL_TIM_ConfigClockSource>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80045fc:	f7ff f8ee 	bl	80037dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004600:	4818      	ldr	r0, [pc, #96]	; (8004664 <MX_TIM2_Init+0xe8>)
 8004602:	f004 fc0e 	bl	8008e22 <HAL_TIM_PWM_Init>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800460c:	f7ff f8e6 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004610:	2320      	movs	r3, #32
 8004612:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004614:	2300      	movs	r3, #0
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004618:	f107 0320 	add.w	r3, r7, #32
 800461c:	4619      	mov	r1, r3
 800461e:	4811      	ldr	r0, [pc, #68]	; (8004664 <MX_TIM2_Init+0xe8>)
 8004620:	f005 fa94 	bl	8009b4c <HAL_TIMEx_MasterConfigSynchronization>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800462a:	f7ff f8d7 	bl	80037dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800462e:	2360      	movs	r3, #96	; 0x60
 8004630:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8004632:	2364      	movs	r3, #100	; 0x64
 8004634:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	2208      	movs	r2, #8
 8004642:	4619      	mov	r1, r3
 8004644:	4807      	ldr	r0, [pc, #28]	; (8004664 <MX_TIM2_Init+0xe8>)
 8004646:	f004 fdbf 	bl	80091c8 <HAL_TIM_PWM_ConfigChannel>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004650:	f7ff f8c4 	bl	80037dc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8004654:	4803      	ldr	r0, [pc, #12]	; (8004664 <MX_TIM2_Init+0xe8>)
 8004656:	f000 f965 	bl	8004924 <HAL_TIM_MspPostInit>

}
 800465a:	bf00      	nop
 800465c:	3738      	adds	r7, #56	; 0x38
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	200011f8 	.word	0x200011f8

08004668 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800466e:	f107 0308 	add.w	r3, r7, #8
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	605a      	str	r2, [r3, #4]
 8004678:	609a      	str	r2, [r3, #8]
 800467a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800467c:	463b      	mov	r3, r7
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8004684:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <MX_TIM3_Init+0x94>)
 8004686:	4a1e      	ldr	r2, [pc, #120]	; (8004700 <MX_TIM3_Init+0x98>)
 8004688:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000-1;
 800468a:	4b1c      	ldr	r3, [pc, #112]	; (80046fc <MX_TIM3_Init+0x94>)
 800468c:	f242 3227 	movw	r2, #8999	; 0x2327
 8004690:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004692:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <MX_TIM3_Init+0x94>)
 8004694:	2200      	movs	r2, #0
 8004696:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8004698:	4b18      	ldr	r3, [pc, #96]	; (80046fc <MX_TIM3_Init+0x94>)
 800469a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800469e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046a0:	4b16      	ldr	r3, [pc, #88]	; (80046fc <MX_TIM3_Init+0x94>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046a6:	4b15      	ldr	r3, [pc, #84]	; (80046fc <MX_TIM3_Init+0x94>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046ac:	4813      	ldr	r0, [pc, #76]	; (80046fc <MX_TIM3_Init+0x94>)
 80046ae:	f004 fb8d 	bl	8008dcc <HAL_TIM_Base_Init>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80046b8:	f7ff f890 	bl	80037dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80046c2:	f107 0308 	add.w	r3, r7, #8
 80046c6:	4619      	mov	r1, r3
 80046c8:	480c      	ldr	r0, [pc, #48]	; (80046fc <MX_TIM3_Init+0x94>)
 80046ca:	f004 fe43 	bl	8009354 <HAL_TIM_ConfigClockSource>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80046d4:	f7ff f882 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046d8:	2300      	movs	r3, #0
 80046da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046dc:	2300      	movs	r3, #0
 80046de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80046e0:	463b      	mov	r3, r7
 80046e2:	4619      	mov	r1, r3
 80046e4:	4805      	ldr	r0, [pc, #20]	; (80046fc <MX_TIM3_Init+0x94>)
 80046e6:	f005 fa31 	bl	8009b4c <HAL_TIMEx_MasterConfigSynchronization>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80046f0:	f7ff f874 	bl	80037dc <Error_Handler>
  }

}
 80046f4:	bf00      	nop
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	200011b8 	.word	0x200011b8
 8004700:	40000400 	.word	0x40000400

08004704 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800470a:	f107 0308 	add.w	r3, r7, #8
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	605a      	str	r2, [r3, #4]
 8004714:	609a      	str	r2, [r3, #8]
 8004716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004718:	463b      	mov	r3, r7
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8004720:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <MX_TIM4_Init+0x94>)
 8004722:	4a1e      	ldr	r2, [pc, #120]	; (800479c <MX_TIM4_Init+0x98>)
 8004724:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000-1;
 8004726:	4b1c      	ldr	r3, [pc, #112]	; (8004798 <MX_TIM4_Init+0x94>)
 8004728:	f242 3227 	movw	r2, #8999	; 0x2327
 800472c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800472e:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <MX_TIM4_Init+0x94>)
 8004730:	2200      	movs	r2, #0
 8004732:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8004734:	4b18      	ldr	r3, [pc, #96]	; (8004798 <MX_TIM4_Init+0x94>)
 8004736:	f240 12f3 	movw	r2, #499	; 0x1f3
 800473a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800473c:	4b16      	ldr	r3, [pc, #88]	; (8004798 <MX_TIM4_Init+0x94>)
 800473e:	2200      	movs	r2, #0
 8004740:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004742:	4b15      	ldr	r3, [pc, #84]	; (8004798 <MX_TIM4_Init+0x94>)
 8004744:	2200      	movs	r2, #0
 8004746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004748:	4813      	ldr	r0, [pc, #76]	; (8004798 <MX_TIM4_Init+0x94>)
 800474a:	f004 fb3f 	bl	8008dcc <HAL_TIM_Base_Init>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004754:	f7ff f842 	bl	80037dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800475c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800475e:	f107 0308 	add.w	r3, r7, #8
 8004762:	4619      	mov	r1, r3
 8004764:	480c      	ldr	r0, [pc, #48]	; (8004798 <MX_TIM4_Init+0x94>)
 8004766:	f004 fdf5 	bl	8009354 <HAL_TIM_ConfigClockSource>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004770:	f7ff f834 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004774:	2320      	movs	r3, #32
 8004776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004778:	2300      	movs	r3, #0
 800477a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800477c:	463b      	mov	r3, r7
 800477e:	4619      	mov	r1, r3
 8004780:	4805      	ldr	r0, [pc, #20]	; (8004798 <MX_TIM4_Init+0x94>)
 8004782:	f005 f9e3 	bl	8009b4c <HAL_TIMEx_MasterConfigSynchronization>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800478c:	f7ff f826 	bl	80037dc <Error_Handler>
  }

}
 8004790:	bf00      	nop
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20001178 	.word	0x20001178
 800479c:	40000800 	.word	0x40000800

080047a0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047a6:	f107 0308 	add.w	r3, r7, #8
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	605a      	str	r2, [r3, #4]
 80047b0:	609a      	str	r2, [r3, #8]
 80047b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047b4:	463b      	mov	r3, r7
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 80047bc:	4b1f      	ldr	r3, [pc, #124]	; (800483c <MX_TIM8_Init+0x9c>)
 80047be:	4a20      	ldr	r2, [pc, #128]	; (8004840 <MX_TIM8_Init+0xa0>)
 80047c0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7200-1;
 80047c2:	4b1e      	ldr	r3, [pc, #120]	; (800483c <MX_TIM8_Init+0x9c>)
 80047c4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80047c8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047ca:	4b1c      	ldr	r3, [pc, #112]	; (800483c <MX_TIM8_Init+0x9c>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 500-1;
 80047d0:	4b1a      	ldr	r3, [pc, #104]	; (800483c <MX_TIM8_Init+0x9c>)
 80047d2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80047d6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047d8:	4b18      	ldr	r3, [pc, #96]	; (800483c <MX_TIM8_Init+0x9c>)
 80047da:	2200      	movs	r2, #0
 80047dc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80047de:	4b17      	ldr	r3, [pc, #92]	; (800483c <MX_TIM8_Init+0x9c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047e4:	4b15      	ldr	r3, [pc, #84]	; (800483c <MX_TIM8_Init+0x9c>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80047ea:	4814      	ldr	r0, [pc, #80]	; (800483c <MX_TIM8_Init+0x9c>)
 80047ec:	f004 faee 	bl	8008dcc <HAL_TIM_Base_Init>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80047f6:	f7fe fff1 	bl	80037dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004800:	f107 0308 	add.w	r3, r7, #8
 8004804:	4619      	mov	r1, r3
 8004806:	480d      	ldr	r0, [pc, #52]	; (800483c <MX_TIM8_Init+0x9c>)
 8004808:	f004 fda4 	bl	8009354 <HAL_TIM_ConfigClockSource>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8004812:	f7fe ffe3 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004816:	2320      	movs	r3, #32
 8004818:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800481a:	2300      	movs	r3, #0
 800481c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800481e:	463b      	mov	r3, r7
 8004820:	4619      	mov	r1, r3
 8004822:	4806      	ldr	r0, [pc, #24]	; (800483c <MX_TIM8_Init+0x9c>)
 8004824:	f005 f992 	bl	8009b4c <HAL_TIMEx_MasterConfigSynchronization>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800482e:	f7fe ffd5 	bl	80037dc <Error_Handler>
  }

}
 8004832:	bf00      	nop
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20001138 	.word	0x20001138
 8004840:	40010400 	.word	0x40010400

08004844 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004854:	d10e      	bne.n	8004874 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	4b2e      	ldr	r3, [pc, #184]	; (8004914 <HAL_TIM_Base_MspInit+0xd0>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	4a2d      	ldr	r2, [pc, #180]	; (8004914 <HAL_TIM_Base_MspInit+0xd0>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	6413      	str	r3, [r2, #64]	; 0x40
 8004866:	4b2b      	ldr	r3, [pc, #172]	; (8004914 <HAL_TIM_Base_MspInit+0xd0>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004872:	e04a      	b.n	800490a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a27      	ldr	r2, [pc, #156]	; (8004918 <HAL_TIM_Base_MspInit+0xd4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d116      	bne.n	80048ac <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	4b24      	ldr	r3, [pc, #144]	; (8004914 <HAL_TIM_Base_MspInit+0xd0>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	4a23      	ldr	r2, [pc, #140]	; (8004914 <HAL_TIM_Base_MspInit+0xd0>)
 8004888:	f043 0302 	orr.w	r3, r3, #2
 800488c:	6413      	str	r3, [r2, #64]	; 0x40
 800488e:	4b21      	ldr	r3, [pc, #132]	; (8004914 <HAL_TIM_Base_MspInit+0xd0>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800489a:	2200      	movs	r2, #0
 800489c:	2100      	movs	r1, #0
 800489e:	201d      	movs	r0, #29
 80048a0:	f000 feb7 	bl	8005612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048a4:	201d      	movs	r0, #29
 80048a6:	f000 fed0 	bl	800564a <HAL_NVIC_EnableIRQ>
}
 80048aa:	e02e      	b.n	800490a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1a      	ldr	r2, [pc, #104]	; (800491c <HAL_TIM_Base_MspInit+0xd8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d10e      	bne.n	80048d4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	4b16      	ldr	r3, [pc, #88]	; (8004914 <HAL_TIM_Base_MspInit+0xd0>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	4a15      	ldr	r2, [pc, #84]	; (8004914 <HAL_TIM_Base_MspInit+0xd0>)
 80048c0:	f043 0304 	orr.w	r3, r3, #4
 80048c4:	6413      	str	r3, [r2, #64]	; 0x40
 80048c6:	4b13      	ldr	r3, [pc, #76]	; (8004914 <HAL_TIM_Base_MspInit+0xd0>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
}
 80048d2:	e01a      	b.n	800490a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM8)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a11      	ldr	r2, [pc, #68]	; (8004920 <HAL_TIM_Base_MspInit+0xdc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d115      	bne.n	800490a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	60bb      	str	r3, [r7, #8]
 80048e2:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <HAL_TIM_Base_MspInit+0xd0>)
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	4a0b      	ldr	r2, [pc, #44]	; (8004914 <HAL_TIM_Base_MspInit+0xd0>)
 80048e8:	f043 0302 	orr.w	r3, r3, #2
 80048ec:	6453      	str	r3, [r2, #68]	; 0x44
 80048ee:	4b09      	ldr	r3, [pc, #36]	; (8004914 <HAL_TIM_Base_MspInit+0xd0>)
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	60bb      	str	r3, [r7, #8]
 80048f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80048fa:	2200      	movs	r2, #0
 80048fc:	2100      	movs	r1, #0
 80048fe:	202c      	movs	r0, #44	; 0x2c
 8004900:	f000 fe87 	bl	8005612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004904:	202c      	movs	r0, #44	; 0x2c
 8004906:	f000 fea0 	bl	800564a <HAL_NVIC_EnableIRQ>
}
 800490a:	bf00      	nop
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40010400 	.word	0x40010400

08004924 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800492c:	f107 030c 	add.w	r3, r7, #12
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	605a      	str	r2, [r3, #4]
 8004936:	609a      	str	r2, [r3, #8]
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004944:	d11d      	bne.n	8004982 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_TIM_MspPostInit+0x68>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	4a0f      	ldr	r2, [pc, #60]	; (800498c <HAL_TIM_MspPostInit+0x68>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6313      	str	r3, [r2, #48]	; 0x30
 8004956:	4b0d      	ldr	r3, [pc, #52]	; (800498c <HAL_TIM_MspPostInit+0x68>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8004962:	2304      	movs	r3, #4
 8004964:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004966:	2302      	movs	r3, #2
 8004968:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800496e:	2300      	movs	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004972:	2301      	movs	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8004976:	f107 030c 	add.w	r3, r7, #12
 800497a:	4619      	mov	r1, r3
 800497c:	4804      	ldr	r0, [pc, #16]	; (8004990 <HAL_TIM_MspPostInit+0x6c>)
 800497e:	f001 fa11 	bl	8005da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004982:	bf00      	nop
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800
 8004990:	40020000 	.word	0x40020000

08004994 <MX_UART8_Init>:
DMA_HandleTypeDef hdma_usart3_tx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8004998:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <MX_UART8_Init+0x4c>)
 800499a:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <MX_UART8_Init+0x50>)
 800499c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 800499e:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <MX_UART8_Init+0x4c>)
 80049a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80049a4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80049a6:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <MX_UART8_Init+0x4c>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80049ac:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <MX_UART8_Init+0x4c>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <MX_UART8_Init+0x4c>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <MX_UART8_Init+0x4c>)
 80049ba:	220c      	movs	r2, #12
 80049bc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049be:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <MX_UART8_Init+0x4c>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <MX_UART8_Init+0x4c>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80049ca:	4805      	ldr	r0, [pc, #20]	; (80049e0 <MX_UART8_Init+0x4c>)
 80049cc:	f005 f94e 	bl	8009c6c <HAL_UART_Init>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80049d6:	f7fe ff01 	bl	80037dc <Error_Handler>
  }

}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20001398 	.word	0x20001398
 80049e4:	40007c00 	.word	0x40007c00

080049e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80049ec:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <MX_USART3_UART_Init+0x4c>)
 80049ee:	4a12      	ldr	r2, [pc, #72]	; (8004a38 <MX_USART3_UART_Init+0x50>)
 80049f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <MX_USART3_UART_Init+0x4c>)
 80049f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80049f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80049fa:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <MX_USART3_UART_Init+0x4c>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <MX_USART3_UART_Init+0x4c>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <MX_USART3_UART_Init+0x4c>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <MX_USART3_UART_Init+0x4c>)
 8004a0e:	220c      	movs	r2, #12
 8004a10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a12:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <MX_USART3_UART_Init+0x4c>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <MX_USART3_UART_Init+0x4c>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a1e:	4805      	ldr	r0, [pc, #20]	; (8004a34 <MX_USART3_UART_Init+0x4c>)
 8004a20:	f005 f924 	bl	8009c6c <HAL_UART_Init>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004a2a:	f7fe fed7 	bl	80037dc <Error_Handler>
  }

}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	200012f8 	.word	0x200012f8
 8004a38:	40004800 	.word	0x40004800

08004a3c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8004a40:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <MX_USART6_UART_Init+0x4c>)
 8004a42:	4a12      	ldr	r2, [pc, #72]	; (8004a8c <MX_USART6_UART_Init+0x50>)
 8004a44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004a46:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <MX_USART6_UART_Init+0x4c>)
 8004a48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004a4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004a4e:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <MX_USART6_UART_Init+0x4c>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <MX_USART6_UART_Init+0x4c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <MX_USART6_UART_Init+0x4c>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <MX_USART6_UART_Init+0x4c>)
 8004a62:	220c      	movs	r2, #12
 8004a64:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <MX_USART6_UART_Init+0x4c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <MX_USART6_UART_Init+0x4c>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004a72:	4805      	ldr	r0, [pc, #20]	; (8004a88 <MX_USART6_UART_Init+0x4c>)
 8004a74:	f005 f8fa 	bl	8009c6c <HAL_UART_Init>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004a7e:	f7fe fead 	bl	80037dc <Error_Handler>
  }

}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	200013d8 	.word	0x200013d8
 8004a8c:	40011400 	.word	0x40011400

08004a90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08e      	sub	sp, #56	; 0x38
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a9a      	ldr	r2, [pc, #616]	; (8004d18 <HAL_UART_MspInit+0x288>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d12c      	bne.n	8004b0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	623b      	str	r3, [r7, #32]
 8004ab6:	4b99      	ldr	r3, [pc, #612]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	4a98      	ldr	r2, [pc, #608]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac2:	4b96      	ldr	r3, [pc, #600]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aca:	623b      	str	r3, [r7, #32]
 8004acc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	4b92      	ldr	r3, [pc, #584]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	4a91      	ldr	r2, [pc, #580]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004ad8:	f043 0310 	orr.w	r3, r3, #16
 8004adc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ade:	4b8f      	ldr	r3, [pc, #572]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	61fb      	str	r3, [r7, #28]
 8004ae8:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8004aea:	2303      	movs	r3, #3
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aee:	2302      	movs	r3, #2
 8004af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004af2:	2301      	movs	r3, #1
 8004af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af6:	2303      	movs	r3, #3
 8004af8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004afa:	2308      	movs	r3, #8
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b02:	4619      	mov	r1, r3
 8004b04:	4886      	ldr	r0, [pc, #536]	; (8004d20 <HAL_UART_MspInit+0x290>)
 8004b06:	f001 f94d 	bl	8005da4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004b0a:	e100      	b.n	8004d0e <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART3)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a84      	ldr	r2, [pc, #528]	; (8004d24 <HAL_UART_MspInit+0x294>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	f040 8093 	bne.w	8004c3e <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61bb      	str	r3, [r7, #24]
 8004b1c:	4b7f      	ldr	r3, [pc, #508]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	4a7e      	ldr	r2, [pc, #504]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004b22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b26:	6413      	str	r3, [r2, #64]	; 0x40
 8004b28:	4b7c      	ldr	r3, [pc, #496]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	4b78      	ldr	r3, [pc, #480]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	4a77      	ldr	r2, [pc, #476]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004b3e:	f043 0308 	orr.w	r3, r3, #8
 8004b42:	6313      	str	r3, [r2, #48]	; 0x30
 8004b44:	4b75      	ldr	r3, [pc, #468]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8004b50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b56:	2302      	movs	r3, #2
 8004b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004b62:	2307      	movs	r3, #7
 8004b64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	486e      	ldr	r0, [pc, #440]	; (8004d28 <HAL_UART_MspInit+0x298>)
 8004b6e:	f001 f919 	bl	8005da4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004b72:	4b6e      	ldr	r3, [pc, #440]	; (8004d2c <HAL_UART_MspInit+0x29c>)
 8004b74:	4a6e      	ldr	r2, [pc, #440]	; (8004d30 <HAL_UART_MspInit+0x2a0>)
 8004b76:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004b78:	4b6c      	ldr	r3, [pc, #432]	; (8004d2c <HAL_UART_MspInit+0x29c>)
 8004b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b7e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b80:	4b6a      	ldr	r3, [pc, #424]	; (8004d2c <HAL_UART_MspInit+0x29c>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b86:	4b69      	ldr	r3, [pc, #420]	; (8004d2c <HAL_UART_MspInit+0x29c>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b8c:	4b67      	ldr	r3, [pc, #412]	; (8004d2c <HAL_UART_MspInit+0x29c>)
 8004b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b92:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b94:	4b65      	ldr	r3, [pc, #404]	; (8004d2c <HAL_UART_MspInit+0x29c>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b9a:	4b64      	ldr	r3, [pc, #400]	; (8004d2c <HAL_UART_MspInit+0x29c>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004ba0:	4b62      	ldr	r3, [pc, #392]	; (8004d2c <HAL_UART_MspInit+0x29c>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004ba6:	4b61      	ldr	r3, [pc, #388]	; (8004d2c <HAL_UART_MspInit+0x29c>)
 8004ba8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004bac:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bae:	4b5f      	ldr	r3, [pc, #380]	; (8004d2c <HAL_UART_MspInit+0x29c>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004bb4:	485d      	ldr	r0, [pc, #372]	; (8004d2c <HAL_UART_MspInit+0x29c>)
 8004bb6:	f000 fd63 	bl	8005680 <HAL_DMA_Init>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8004bc0:	f7fe fe0c 	bl	80037dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a59      	ldr	r2, [pc, #356]	; (8004d2c <HAL_UART_MspInit+0x29c>)
 8004bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8004bca:	4a58      	ldr	r2, [pc, #352]	; (8004d2c <HAL_UART_MspInit+0x29c>)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004bd0:	4b58      	ldr	r3, [pc, #352]	; (8004d34 <HAL_UART_MspInit+0x2a4>)
 8004bd2:	4a59      	ldr	r2, [pc, #356]	; (8004d38 <HAL_UART_MspInit+0x2a8>)
 8004bd4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004bd6:	4b57      	ldr	r3, [pc, #348]	; (8004d34 <HAL_UART_MspInit+0x2a4>)
 8004bd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bdc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bde:	4b55      	ldr	r3, [pc, #340]	; (8004d34 <HAL_UART_MspInit+0x2a4>)
 8004be0:	2240      	movs	r2, #64	; 0x40
 8004be2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004be4:	4b53      	ldr	r3, [pc, #332]	; (8004d34 <HAL_UART_MspInit+0x2a4>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bea:	4b52      	ldr	r3, [pc, #328]	; (8004d34 <HAL_UART_MspInit+0x2a4>)
 8004bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bf0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bf2:	4b50      	ldr	r3, [pc, #320]	; (8004d34 <HAL_UART_MspInit+0x2a4>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bf8:	4b4e      	ldr	r3, [pc, #312]	; (8004d34 <HAL_UART_MspInit+0x2a4>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004bfe:	4b4d      	ldr	r3, [pc, #308]	; (8004d34 <HAL_UART_MspInit+0x2a4>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c04:	4b4b      	ldr	r3, [pc, #300]	; (8004d34 <HAL_UART_MspInit+0x2a4>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c0a:	4b4a      	ldr	r3, [pc, #296]	; (8004d34 <HAL_UART_MspInit+0x2a4>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004c10:	4848      	ldr	r0, [pc, #288]	; (8004d34 <HAL_UART_MspInit+0x2a4>)
 8004c12:	f000 fd35 	bl	8005680 <HAL_DMA_Init>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8004c1c:	f7fe fdde 	bl	80037dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a44      	ldr	r2, [pc, #272]	; (8004d34 <HAL_UART_MspInit+0x2a4>)
 8004c24:	631a      	str	r2, [r3, #48]	; 0x30
 8004c26:	4a43      	ldr	r2, [pc, #268]	; (8004d34 <HAL_UART_MspInit+0x2a4>)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2100      	movs	r1, #0
 8004c30:	2027      	movs	r0, #39	; 0x27
 8004c32:	f000 fcee 	bl	8005612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004c36:	2027      	movs	r0, #39	; 0x27
 8004c38:	f000 fd07 	bl	800564a <HAL_NVIC_EnableIRQ>
}
 8004c3c:	e067      	b.n	8004d0e <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART6)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a3e      	ldr	r2, [pc, #248]	; (8004d3c <HAL_UART_MspInit+0x2ac>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d162      	bne.n	8004d0e <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004c48:	2300      	movs	r3, #0
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	4b33      	ldr	r3, [pc, #204]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c50:	4a32      	ldr	r2, [pc, #200]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004c52:	f043 0320 	orr.w	r3, r3, #32
 8004c56:	6453      	str	r3, [r2, #68]	; 0x44
 8004c58:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	4b2c      	ldr	r3, [pc, #176]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	4a2b      	ldr	r2, [pc, #172]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004c6e:	f043 0304 	orr.w	r3, r3, #4
 8004c72:	6313      	str	r3, [r2, #48]	; 0x30
 8004c74:	4b29      	ldr	r3, [pc, #164]	; (8004d1c <HAL_UART_MspInit+0x28c>)
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8004c80:	23c0      	movs	r3, #192	; 0xc0
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c84:	2302      	movs	r3, #2
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004c90:	2308      	movs	r3, #8
 8004c92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4829      	ldr	r0, [pc, #164]	; (8004d40 <HAL_UART_MspInit+0x2b0>)
 8004c9c:	f001 f882 	bl	8005da4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004ca0:	4b28      	ldr	r3, [pc, #160]	; (8004d44 <HAL_UART_MspInit+0x2b4>)
 8004ca2:	4a29      	ldr	r2, [pc, #164]	; (8004d48 <HAL_UART_MspInit+0x2b8>)
 8004ca4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004ca6:	4b27      	ldr	r3, [pc, #156]	; (8004d44 <HAL_UART_MspInit+0x2b4>)
 8004ca8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004cac:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cae:	4b25      	ldr	r3, [pc, #148]	; (8004d44 <HAL_UART_MspInit+0x2b4>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cb4:	4b23      	ldr	r3, [pc, #140]	; (8004d44 <HAL_UART_MspInit+0x2b4>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cba:	4b22      	ldr	r3, [pc, #136]	; (8004d44 <HAL_UART_MspInit+0x2b4>)
 8004cbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cc0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cc2:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <HAL_UART_MspInit+0x2b4>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cc8:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <HAL_UART_MspInit+0x2b4>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004cce:	4b1d      	ldr	r3, [pc, #116]	; (8004d44 <HAL_UART_MspInit+0x2b4>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004cd4:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <HAL_UART_MspInit+0x2b4>)
 8004cd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004cda:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cdc:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <HAL_UART_MspInit+0x2b4>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004ce2:	4818      	ldr	r0, [pc, #96]	; (8004d44 <HAL_UART_MspInit+0x2b4>)
 8004ce4:	f000 fccc 	bl	8005680 <HAL_DMA_Init>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_UART_MspInit+0x262>
      Error_Handler();
 8004cee:	f7fe fd75 	bl	80037dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <HAL_UART_MspInit+0x2b4>)
 8004cf6:	635a      	str	r2, [r3, #52]	; 0x34
 8004cf8:	4a12      	ldr	r2, [pc, #72]	; (8004d44 <HAL_UART_MspInit+0x2b4>)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2100      	movs	r1, #0
 8004d02:	2047      	movs	r0, #71	; 0x47
 8004d04:	f000 fc85 	bl	8005612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004d08:	2047      	movs	r0, #71	; 0x47
 8004d0a:	f000 fc9e 	bl	800564a <HAL_NVIC_EnableIRQ>
}
 8004d0e:	bf00      	nop
 8004d10:	3738      	adds	r7, #56	; 0x38
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40007c00 	.word	0x40007c00
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	40021000 	.word	0x40021000
 8004d24:	40004800 	.word	0x40004800
 8004d28:	40020c00 	.word	0x40020c00
 8004d2c:	20001298 	.word	0x20001298
 8004d30:	40026028 	.word	0x40026028
 8004d34:	20001338 	.word	0x20001338
 8004d38:	40026058 	.word	0x40026058
 8004d3c:	40011400 	.word	0x40011400
 8004d40:	40020800 	.word	0x40020800
 8004d44:	20001238 	.word	0x20001238
 8004d48:	40026428 	.word	0x40026428

08004d4c <VR_Power_On>:


#include "main.h"


void VR_Power_On(void) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, SET);
 8004d50:	2201      	movs	r2, #1
 8004d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d56:	4804      	ldr	r0, [pc, #16]	; (8004d68 <VR_Power_On+0x1c>)
 8004d58:	f001 f9e8 	bl	800612c <HAL_GPIO_WritePin>
	// note that runcam needs around 3-5 seconds to fully power on
	HAL_Delay(5000);
 8004d5c:	f241 3088 	movw	r0, #5000	; 0x1388
 8004d60:	f000 f8e6 	bl	8004f30 <HAL_Delay>
}
 8004d64:	bf00      	nop
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40021800 	.word	0x40021800

08004d6c <VR_Power_Off>:

void VR_Power_Off(void) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8004d70:	2200      	movs	r2, #0
 8004d72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d76:	4802      	ldr	r0, [pc, #8]	; (8004d80 <VR_Power_Off+0x14>)
 8004d78:	f001 f9d8 	bl	800612c <HAL_GPIO_WritePin>
}
 8004d7c:	bf00      	nop
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40021800 	.word	0x40021800

08004d84 <VR_Start_Rec>:

void VR_Start_Rec(void) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0

	// specific sequence of SET/RESET to start recording
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
 8004d88:	2201      	movs	r2, #1
 8004d8a:	2180      	movs	r1, #128	; 0x80
 8004d8c:	480f      	ldr	r0, [pc, #60]	; (8004dcc <VR_Start_Rec+0x48>)
 8004d8e:	f001 f9cd 	bl	800612c <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8004d92:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004d96:	f000 f8cb 	bl	8004f30 <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2180      	movs	r1, #128	; 0x80
 8004d9e:	480b      	ldr	r0, [pc, #44]	; (8004dcc <VR_Start_Rec+0x48>)
 8004da0:	f001 f9c4 	bl	800612c <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8004da4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004da8:	f000 f8c2 	bl	8004f30 <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
 8004dac:	2201      	movs	r2, #1
 8004dae:	2180      	movs	r1, #128	; 0x80
 8004db0:	4806      	ldr	r0, [pc, #24]	; (8004dcc <VR_Start_Rec+0x48>)
 8004db2:	f001 f9bb 	bl	800612c <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8004db6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004dba:	f000 f8b9 	bl	8004f30 <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2180      	movs	r1, #128	; 0x80
 8004dc2:	4802      	ldr	r0, [pc, #8]	; (8004dcc <VR_Start_Rec+0x48>)
 8004dc4:	f001 f9b2 	bl	800612c <HAL_GPIO_WritePin>

}
 8004dc8:	bf00      	nop
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40020c00 	.word	0x40020c00

08004dd0 <VR_Stop_Rec>:

void VR_Stop_Rec(void) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	2180      	movs	r1, #128	; 0x80
 8004dd8:	4806      	ldr	r0, [pc, #24]	; (8004df4 <VR_Stop_Rec+0x24>)
 8004dda:	f001 f9a7 	bl	800612c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8004dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004de2:	f000 f8a5 	bl	8004f30 <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8004de6:	2200      	movs	r2, #0
 8004de8:	2180      	movs	r1, #128	; 0x80
 8004dea:	4802      	ldr	r0, [pc, #8]	; (8004df4 <VR_Stop_Rec+0x24>)
 8004dec:	f001 f99e 	bl	800612c <HAL_GPIO_WritePin>
}
 8004df0:	bf00      	nop
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40020c00 	.word	0x40020c00

08004df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004dfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004dfe:	e003      	b.n	8004e08 <LoopCopyDataInit>

08004e00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004e02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004e04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004e06:	3104      	adds	r1, #4

08004e08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004e08:	480b      	ldr	r0, [pc, #44]	; (8004e38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004e0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004e0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004e10:	d3f6      	bcc.n	8004e00 <CopyDataInit>
  ldr  r2, =_sbss
 8004e12:	4a0b      	ldr	r2, [pc, #44]	; (8004e40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004e14:	e002      	b.n	8004e1c <LoopFillZerobss>

08004e16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004e16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004e18:	f842 3b04 	str.w	r3, [r2], #4

08004e1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004e1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e20:	d3f9      	bcc.n	8004e16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004e22:	f7ff fb95 	bl	8004550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e26:	f009 fa9f 	bl	800e368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e2a:	f7fd fe5b 	bl	8002ae4 <main>
  bx  lr    
 8004e2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004e30:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004e34:	08014db8 	.word	0x08014db8
  ldr  r0, =_sdata
 8004e38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004e3c:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8004e40:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8004e44:	2000189c 	.word	0x2000189c

08004e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e48:	e7fe      	b.n	8004e48 <ADC_IRQHandler>
	...

08004e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e50:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <HAL_Init+0x40>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a0d      	ldr	r2, [pc, #52]	; (8004e8c <HAL_Init+0x40>)
 8004e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <HAL_Init+0x40>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <HAL_Init+0x40>)
 8004e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e68:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <HAL_Init+0x40>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a07      	ldr	r2, [pc, #28]	; (8004e8c <HAL_Init+0x40>)
 8004e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e74:	2003      	movs	r0, #3
 8004e76:	f000 fbc1 	bl	80055fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f000 f808 	bl	8004e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e80:	f7ff f9ec 	bl	800425c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40023c00 	.word	0x40023c00

08004e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e98:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <HAL_InitTick+0x54>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <HAL_InitTick+0x58>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fbd9 	bl	8005666 <HAL_SYSTICK_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e00e      	b.n	8004edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b0f      	cmp	r3, #15
 8004ec2:	d80a      	bhi.n	8004eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ecc:	f000 fba1 	bl	8005612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ed0:	4a06      	ldr	r2, [pc, #24]	; (8004eec <HAL_InitTick+0x5c>)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e000      	b.n	8004edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20000004 	.word	0x20000004
 8004ee8:	2000000c 	.word	0x2000000c
 8004eec:	20000008 	.word	0x20000008

08004ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ef4:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <HAL_IncTick+0x20>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <HAL_IncTick+0x24>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4413      	add	r3, r2
 8004f00:	4a04      	ldr	r2, [pc, #16]	; (8004f14 <HAL_IncTick+0x24>)
 8004f02:	6013      	str	r3, [r2, #0]
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	2000000c 	.word	0x2000000c
 8004f14:	20001418 	.word	0x20001418

08004f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f1c:	4b03      	ldr	r3, [pc, #12]	; (8004f2c <HAL_GetTick+0x14>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	20001418 	.word	0x20001418

08004f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f38:	f7ff ffee 	bl	8004f18 <HAL_GetTick>
 8004f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d005      	beq.n	8004f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f4a:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <HAL_Delay+0x44>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f56:	bf00      	nop
 8004f58:	f7ff ffde 	bl	8004f18 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d8f7      	bhi.n	8004f58 <HAL_Delay+0x28>
  {
  }
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	2000000c 	.word	0x2000000c

08004f78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e033      	b.n	8004ff6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fc f906 	bl	80011a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d118      	bne.n	8004fe8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004fbe:	f023 0302 	bic.w	r3, r3, #2
 8004fc2:	f043 0202 	orr.w	r2, r3, #2
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f94a 	bl	8005264 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	f043 0201 	orr.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
 8004fe6:	e001      	b.n	8004fec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_ADC_ConfigChannel+0x1c>
 8005018:	2302      	movs	r3, #2
 800501a:	e113      	b.n	8005244 <HAL_ADC_ConfigChannel+0x244>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b09      	cmp	r3, #9
 800502a:	d925      	bls.n	8005078 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68d9      	ldr	r1, [r3, #12]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	4613      	mov	r3, r2
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	4413      	add	r3, r2
 8005040:	3b1e      	subs	r3, #30
 8005042:	2207      	movs	r2, #7
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	43da      	mvns	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	400a      	ands	r2, r1
 8005050:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68d9      	ldr	r1, [r3, #12]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	4618      	mov	r0, r3
 8005064:	4603      	mov	r3, r0
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	4403      	add	r3, r0
 800506a:	3b1e      	subs	r3, #30
 800506c:	409a      	lsls	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	60da      	str	r2, [r3, #12]
 8005076:	e022      	b.n	80050be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6919      	ldr	r1, [r3, #16]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	4613      	mov	r3, r2
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4413      	add	r3, r2
 800508c:	2207      	movs	r2, #7
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43da      	mvns	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	400a      	ands	r2, r1
 800509a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6919      	ldr	r1, [r3, #16]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	4618      	mov	r0, r3
 80050ae:	4603      	mov	r3, r0
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	4403      	add	r3, r0
 80050b4:	409a      	lsls	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b06      	cmp	r3, #6
 80050c4:	d824      	bhi.n	8005110 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	3b05      	subs	r3, #5
 80050d8:	221f      	movs	r2, #31
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43da      	mvns	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	400a      	ands	r2, r1
 80050e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	4618      	mov	r0, r3
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	3b05      	subs	r3, #5
 8005102:	fa00 f203 	lsl.w	r2, r0, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	635a      	str	r2, [r3, #52]	; 0x34
 800510e:	e04c      	b.n	80051aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b0c      	cmp	r3, #12
 8005116:	d824      	bhi.n	8005162 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	3b23      	subs	r3, #35	; 0x23
 800512a:	221f      	movs	r2, #31
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	43da      	mvns	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	400a      	ands	r2, r1
 8005138:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	4618      	mov	r0, r3
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	3b23      	subs	r3, #35	; 0x23
 8005154:	fa00 f203 	lsl.w	r2, r0, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	631a      	str	r2, [r3, #48]	; 0x30
 8005160:	e023      	b.n	80051aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	3b41      	subs	r3, #65	; 0x41
 8005174:	221f      	movs	r2, #31
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43da      	mvns	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	400a      	ands	r2, r1
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	4618      	mov	r0, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	3b41      	subs	r3, #65	; 0x41
 800519e:	fa00 f203 	lsl.w	r2, r0, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051aa:	4b29      	ldr	r3, [pc, #164]	; (8005250 <HAL_ADC_ConfigChannel+0x250>)
 80051ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a28      	ldr	r2, [pc, #160]	; (8005254 <HAL_ADC_ConfigChannel+0x254>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d10f      	bne.n	80051d8 <HAL_ADC_ConfigChannel+0x1d8>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b12      	cmp	r3, #18
 80051be:	d10b      	bne.n	80051d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <HAL_ADC_ConfigChannel+0x254>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d12b      	bne.n	800523a <HAL_ADC_ConfigChannel+0x23a>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a1c      	ldr	r2, [pc, #112]	; (8005258 <HAL_ADC_ConfigChannel+0x258>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <HAL_ADC_ConfigChannel+0x1f4>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b11      	cmp	r3, #17
 80051f2:	d122      	bne.n	800523a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a11      	ldr	r2, [pc, #68]	; (8005258 <HAL_ADC_ConfigChannel+0x258>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d111      	bne.n	800523a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005216:	4b11      	ldr	r3, [pc, #68]	; (800525c <HAL_ADC_ConfigChannel+0x25c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a11      	ldr	r2, [pc, #68]	; (8005260 <HAL_ADC_ConfigChannel+0x260>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	0c9a      	lsrs	r2, r3, #18
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800522c:	e002      	b.n	8005234 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	3b01      	subs	r3, #1
 8005232:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f9      	bne.n	800522e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40012300 	.word	0x40012300
 8005254:	40012000 	.word	0x40012000
 8005258:	10000012 	.word	0x10000012
 800525c:	20000004 	.word	0x20000004
 8005260:	431bde83 	.word	0x431bde83

08005264 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800526c:	4b79      	ldr	r3, [pc, #484]	; (8005454 <ADC_Init+0x1f0>)
 800526e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	431a      	orrs	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005298:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6859      	ldr	r1, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	021a      	lsls	r2, r3, #8
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80052bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6859      	ldr	r1, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6899      	ldr	r1, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	4a58      	ldr	r2, [pc, #352]	; (8005458 <ADC_Init+0x1f4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d022      	beq.n	8005342 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800530a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6899      	ldr	r1, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800532c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6899      	ldr	r1, [r3, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	609a      	str	r2, [r3, #8]
 8005340:	e00f      	b.n	8005362 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005360:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0202 	bic.w	r2, r2, #2
 8005370:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6899      	ldr	r1, [r3, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	7e1b      	ldrb	r3, [r3, #24]
 800537c:	005a      	lsls	r2, r3, #1
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3020 	ldrb.w	r3, [r3, #32]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01b      	beq.n	80053c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800539e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80053ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6859      	ldr	r1, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	3b01      	subs	r3, #1
 80053bc:	035a      	lsls	r2, r3, #13
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	e007      	b.n	80053d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	051a      	lsls	r2, r3, #20
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800540c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6899      	ldr	r1, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800541a:	025a      	lsls	r2, r3, #9
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6899      	ldr	r1, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	029a      	lsls	r2, r3, #10
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	609a      	str	r2, [r3, #8]
}
 8005448:	bf00      	nop
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	40012300 	.word	0x40012300
 8005458:	0f000001 	.word	0x0f000001

0800545c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800546c:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <__NVIC_SetPriorityGrouping+0x44>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005478:	4013      	ands	r3, r2
 800547a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800548c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800548e:	4a04      	ldr	r2, [pc, #16]	; (80054a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	60d3      	str	r3, [r2, #12]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	e000ed00 	.word	0xe000ed00

080054a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054a8:	4b04      	ldr	r3, [pc, #16]	; (80054bc <__NVIC_GetPriorityGrouping+0x18>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	0a1b      	lsrs	r3, r3, #8
 80054ae:	f003 0307 	and.w	r3, r3, #7
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	e000ed00 	.word	0xe000ed00

080054c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	db0b      	blt.n	80054ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	f003 021f 	and.w	r2, r3, #31
 80054d8:	4907      	ldr	r1, [pc, #28]	; (80054f8 <__NVIC_EnableIRQ+0x38>)
 80054da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	2001      	movs	r0, #1
 80054e2:	fa00 f202 	lsl.w	r2, r0, r2
 80054e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	e000e100 	.word	0xe000e100

080054fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	6039      	str	r1, [r7, #0]
 8005506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800550c:	2b00      	cmp	r3, #0
 800550e:	db0a      	blt.n	8005526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	b2da      	uxtb	r2, r3
 8005514:	490c      	ldr	r1, [pc, #48]	; (8005548 <__NVIC_SetPriority+0x4c>)
 8005516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551a:	0112      	lsls	r2, r2, #4
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	440b      	add	r3, r1
 8005520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005524:	e00a      	b.n	800553c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	b2da      	uxtb	r2, r3
 800552a:	4908      	ldr	r1, [pc, #32]	; (800554c <__NVIC_SetPriority+0x50>)
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	3b04      	subs	r3, #4
 8005534:	0112      	lsls	r2, r2, #4
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	440b      	add	r3, r1
 800553a:	761a      	strb	r2, [r3, #24]
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	e000e100 	.word	0xe000e100
 800554c:	e000ed00 	.word	0xe000ed00

08005550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	; 0x24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f1c3 0307 	rsb	r3, r3, #7
 800556a:	2b04      	cmp	r3, #4
 800556c:	bf28      	it	cs
 800556e:	2304      	movcs	r3, #4
 8005570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3304      	adds	r3, #4
 8005576:	2b06      	cmp	r3, #6
 8005578:	d902      	bls.n	8005580 <NVIC_EncodePriority+0x30>
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	3b03      	subs	r3, #3
 800557e:	e000      	b.n	8005582 <NVIC_EncodePriority+0x32>
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005584:	f04f 32ff 	mov.w	r2, #4294967295
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43da      	mvns	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	401a      	ands	r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005598:	f04f 31ff 	mov.w	r1, #4294967295
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	fa01 f303 	lsl.w	r3, r1, r3
 80055a2:	43d9      	mvns	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a8:	4313      	orrs	r3, r2
         );
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3724      	adds	r7, #36	; 0x24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055c8:	d301      	bcc.n	80055ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055ca:	2301      	movs	r3, #1
 80055cc:	e00f      	b.n	80055ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ce:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <SysTick_Config+0x40>)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055d6:	210f      	movs	r1, #15
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	f7ff ff8e 	bl	80054fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <SysTick_Config+0x40>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055e6:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <SysTick_Config+0x40>)
 80055e8:	2207      	movs	r2, #7
 80055ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	e000e010 	.word	0xe000e010

080055fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ff29 	bl	800545c <__NVIC_SetPriorityGrouping>
}
 800560a:	bf00      	nop
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005612:	b580      	push	{r7, lr}
 8005614:	b086      	sub	sp, #24
 8005616:	af00      	add	r7, sp, #0
 8005618:	4603      	mov	r3, r0
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005624:	f7ff ff3e 	bl	80054a4 <__NVIC_GetPriorityGrouping>
 8005628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	6978      	ldr	r0, [r7, #20]
 8005630:	f7ff ff8e 	bl	8005550 <NVIC_EncodePriority>
 8005634:	4602      	mov	r2, r0
 8005636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff ff5d 	bl	80054fc <__NVIC_SetPriority>
}
 8005642:	bf00      	nop
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	4603      	mov	r3, r0
 8005652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff ff31 	bl	80054c0 <__NVIC_EnableIRQ>
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff ffa2 	bl	80055b8 <SysTick_Config>
 8005674:	4603      	mov	r3, r0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800568c:	f7ff fc44 	bl	8004f18 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e099      	b.n	80057d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056bc:	e00f      	b.n	80056de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056be:	f7ff fc2b 	bl	8004f18 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	d908      	bls.n	80056de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2203      	movs	r2, #3
 80056d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e078      	b.n	80057d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e8      	bne.n	80056be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4b38      	ldr	r3, [pc, #224]	; (80057d8 <HAL_DMA_Init+0x158>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800570a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	2b04      	cmp	r3, #4
 8005736:	d107      	bne.n	8005748 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	4313      	orrs	r3, r2
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f023 0307 	bic.w	r3, r3, #7
 800575e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	2b04      	cmp	r3, #4
 8005770:	d117      	bne.n	80057a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00e      	beq.n	80057a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fa91 	bl	8005cac <DMA_CheckFifoParam>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d008      	beq.n	80057a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2240      	movs	r2, #64	; 0x40
 8005794:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800579e:	2301      	movs	r3, #1
 80057a0:	e016      	b.n	80057d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fa48 	bl	8005c40 <DMA_CalcBaseAndBitshift>
 80057b0:	4603      	mov	r3, r0
 80057b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b8:	223f      	movs	r2, #63	; 0x3f
 80057ba:	409a      	lsls	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	f010803f 	.word	0xf010803f

080057dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_DMA_Start_IT+0x26>
 80057fe:	2302      	movs	r3, #2
 8005800:	e040      	b.n	8005884 <HAL_DMA_Start_IT+0xa8>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d12f      	bne.n	8005876 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2202      	movs	r2, #2
 800581a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f9da 	bl	8005be4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005834:	223f      	movs	r2, #63	; 0x3f
 8005836:	409a      	lsls	r2, r3
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0216 	orr.w	r2, r2, #22
 800584a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0208 	orr.w	r2, r2, #8
 8005862:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e005      	b.n	8005882 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800587e:	2302      	movs	r3, #2
 8005880:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005882:	7dfb      	ldrb	r3, [r7, #23]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d004      	beq.n	80058aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2280      	movs	r2, #128	; 0x80
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e00c      	b.n	80058c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2205      	movs	r2, #5
 80058ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0201 	bic.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058dc:	4b92      	ldr	r3, [pc, #584]	; (8005b28 <HAL_DMA_IRQHandler+0x258>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a92      	ldr	r2, [pc, #584]	; (8005b2c <HAL_DMA_IRQHandler+0x25c>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	0a9b      	lsrs	r3, r3, #10
 80058e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fa:	2208      	movs	r2, #8
 80058fc:	409a      	lsls	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4013      	ands	r3, r2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01a      	beq.n	800593c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d013      	beq.n	800593c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0204 	bic.w	r2, r2, #4
 8005922:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005928:	2208      	movs	r2, #8
 800592a:	409a      	lsls	r2, r3
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	f043 0201 	orr.w	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005940:	2201      	movs	r2, #1
 8005942:	409a      	lsls	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4013      	ands	r3, r2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d012      	beq.n	8005972 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00b      	beq.n	8005972 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595e:	2201      	movs	r2, #1
 8005960:	409a      	lsls	r2, r3
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596a:	f043 0202 	orr.w	r2, r3, #2
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005976:	2204      	movs	r2, #4
 8005978:	409a      	lsls	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4013      	ands	r3, r2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d012      	beq.n	80059a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00b      	beq.n	80059a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005994:	2204      	movs	r2, #4
 8005996:	409a      	lsls	r2, r3
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a0:	f043 0204 	orr.w	r2, r3, #4
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ac:	2210      	movs	r2, #16
 80059ae:	409a      	lsls	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d043      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d03c      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ca:	2210      	movs	r2, #16
 80059cc:	409a      	lsls	r2, r3
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d018      	beq.n	8005a12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d108      	bne.n	8005a00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d024      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	4798      	blx	r3
 80059fe:	e01f      	b.n	8005a40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01b      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	4798      	blx	r3
 8005a10:	e016      	b.n	8005a40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d107      	bne.n	8005a30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0208 	bic.w	r2, r2, #8
 8005a2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a44:	2220      	movs	r2, #32
 8005a46:	409a      	lsls	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 808e 	beq.w	8005b6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8086 	beq.w	8005b6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a66:	2220      	movs	r2, #32
 8005a68:	409a      	lsls	r2, r3
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b05      	cmp	r3, #5
 8005a78:	d136      	bne.n	8005ae8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0216 	bic.w	r2, r2, #22
 8005a88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695a      	ldr	r2, [r3, #20]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d103      	bne.n	8005aaa <HAL_DMA_IRQHandler+0x1da>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0208 	bic.w	r2, r2, #8
 8005ab8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abe:	223f      	movs	r2, #63	; 0x3f
 8005ac0:	409a      	lsls	r2, r3
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d07d      	beq.n	8005bda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	4798      	blx	r3
        }
        return;
 8005ae6:	e078      	b.n	8005bda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01c      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d108      	bne.n	8005b16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d030      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	4798      	blx	r3
 8005b14:	e02b      	b.n	8005b6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d027      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
 8005b26:	e022      	b.n	8005b6e <HAL_DMA_IRQHandler+0x29e>
 8005b28:	20000004 	.word	0x20000004
 8005b2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10f      	bne.n	8005b5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0210 	bic.w	r2, r2, #16
 8005b4c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d032      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d022      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2205      	movs	r2, #5
 8005b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0201 	bic.w	r2, r2, #1
 8005b98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	60bb      	str	r3, [r7, #8]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d307      	bcc.n	8005bb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f2      	bne.n	8005b9a <HAL_DMA_IRQHandler+0x2ca>
 8005bb4:	e000      	b.n	8005bb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005bb6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3
 8005bd8:	e000      	b.n	8005bdc <HAL_DMA_IRQHandler+0x30c>
        return;
 8005bda:	bf00      	nop
    }
  }
}
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop

08005be4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b40      	cmp	r3, #64	; 0x40
 8005c10:	d108      	bne.n	8005c24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c22:	e007      	b.n	8005c34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	60da      	str	r2, [r3, #12]
}
 8005c34:	bf00      	nop
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	3b10      	subs	r3, #16
 8005c50:	4a14      	ldr	r2, [pc, #80]	; (8005ca4 <DMA_CalcBaseAndBitshift+0x64>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	091b      	lsrs	r3, r3, #4
 8005c58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c5a:	4a13      	ldr	r2, [pc, #76]	; (8005ca8 <DMA_CalcBaseAndBitshift+0x68>)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d909      	bls.n	8005c82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	1d1a      	adds	r2, r3, #4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	659a      	str	r2, [r3, #88]	; 0x58
 8005c80:	e007      	b.n	8005c92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	aaaaaaab 	.word	0xaaaaaaab
 8005ca8:	08014810 	.word	0x08014810

08005cac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d11f      	bne.n	8005d06 <DMA_CheckFifoParam+0x5a>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d856      	bhi.n	8005d7a <DMA_CheckFifoParam+0xce>
 8005ccc:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <DMA_CheckFifoParam+0x28>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005cf7 	.word	0x08005cf7
 8005cdc:	08005ce5 	.word	0x08005ce5
 8005ce0:	08005d7b 	.word	0x08005d7b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d046      	beq.n	8005d7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cf4:	e043      	b.n	8005d7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cfe:	d140      	bne.n	8005d82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d04:	e03d      	b.n	8005d82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d0e:	d121      	bne.n	8005d54 <DMA_CheckFifoParam+0xa8>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d837      	bhi.n	8005d86 <DMA_CheckFifoParam+0xda>
 8005d16:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <DMA_CheckFifoParam+0x70>)
 8005d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1c:	08005d2d 	.word	0x08005d2d
 8005d20:	08005d33 	.word	0x08005d33
 8005d24:	08005d2d 	.word	0x08005d2d
 8005d28:	08005d45 	.word	0x08005d45
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d30:	e030      	b.n	8005d94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d025      	beq.n	8005d8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d42:	e022      	b.n	8005d8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d4c:	d11f      	bne.n	8005d8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d52:	e01c      	b.n	8005d8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d903      	bls.n	8005d62 <DMA_CheckFifoParam+0xb6>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d003      	beq.n	8005d68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d60:	e018      	b.n	8005d94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	73fb      	strb	r3, [r7, #15]
      break;
 8005d66:	e015      	b.n	8005d94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00e      	beq.n	8005d92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	73fb      	strb	r3, [r7, #15]
      break;
 8005d78:	e00b      	b.n	8005d92 <DMA_CheckFifoParam+0xe6>
      break;
 8005d7a:	bf00      	nop
 8005d7c:	e00a      	b.n	8005d94 <DMA_CheckFifoParam+0xe8>
      break;
 8005d7e:	bf00      	nop
 8005d80:	e008      	b.n	8005d94 <DMA_CheckFifoParam+0xe8>
      break;
 8005d82:	bf00      	nop
 8005d84:	e006      	b.n	8005d94 <DMA_CheckFifoParam+0xe8>
      break;
 8005d86:	bf00      	nop
 8005d88:	e004      	b.n	8005d94 <DMA_CheckFifoParam+0xe8>
      break;
 8005d8a:	bf00      	nop
 8005d8c:	e002      	b.n	8005d94 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d8e:	bf00      	nop
 8005d90:	e000      	b.n	8005d94 <DMA_CheckFifoParam+0xe8>
      break;
 8005d92:	bf00      	nop
    }
  } 
  
  return status; 
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop

08005da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b089      	sub	sp, #36	; 0x24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
 8005dbe:	e177      	b.n	80060b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	f040 8166 	bne.w	80060aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d00b      	beq.n	8005dfe <HAL_GPIO_Init+0x5a>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d007      	beq.n	8005dfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005df2:	2b11      	cmp	r3, #17
 8005df4:	d003      	beq.n	8005dfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b12      	cmp	r3, #18
 8005dfc:	d130      	bne.n	8005e60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	2203      	movs	r2, #3
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4013      	ands	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e34:	2201      	movs	r2, #1
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	4013      	ands	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	091b      	lsrs	r3, r3, #4
 8005e4a:	f003 0201 	and.w	r2, r3, #1
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	43db      	mvns	r3, r3
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	4013      	ands	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d003      	beq.n	8005ea0 <HAL_GPIO_Init+0xfc>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b12      	cmp	r3, #18
 8005e9e:	d123      	bne.n	8005ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	08da      	lsrs	r2, r3, #3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3208      	adds	r2, #8
 8005ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	220f      	movs	r2, #15
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	08da      	lsrs	r2, r3, #3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3208      	adds	r2, #8
 8005ee2:	69b9      	ldr	r1, [r7, #24]
 8005ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	2203      	movs	r2, #3
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	4013      	ands	r3, r2
 8005efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f003 0203 	and.w	r2, r3, #3
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80c0 	beq.w	80060aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	4b66      	ldr	r3, [pc, #408]	; (80060c8 <HAL_GPIO_Init+0x324>)
 8005f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f32:	4a65      	ldr	r2, [pc, #404]	; (80060c8 <HAL_GPIO_Init+0x324>)
 8005f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f38:	6453      	str	r3, [r2, #68]	; 0x44
 8005f3a:	4b63      	ldr	r3, [pc, #396]	; (80060c8 <HAL_GPIO_Init+0x324>)
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f46:	4a61      	ldr	r2, [pc, #388]	; (80060cc <HAL_GPIO_Init+0x328>)
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	089b      	lsrs	r3, r3, #2
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	220f      	movs	r2, #15
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	43db      	mvns	r3, r3
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4013      	ands	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a58      	ldr	r2, [pc, #352]	; (80060d0 <HAL_GPIO_Init+0x32c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d037      	beq.n	8005fe2 <HAL_GPIO_Init+0x23e>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a57      	ldr	r2, [pc, #348]	; (80060d4 <HAL_GPIO_Init+0x330>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d031      	beq.n	8005fde <HAL_GPIO_Init+0x23a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a56      	ldr	r2, [pc, #344]	; (80060d8 <HAL_GPIO_Init+0x334>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d02b      	beq.n	8005fda <HAL_GPIO_Init+0x236>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a55      	ldr	r2, [pc, #340]	; (80060dc <HAL_GPIO_Init+0x338>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d025      	beq.n	8005fd6 <HAL_GPIO_Init+0x232>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a54      	ldr	r2, [pc, #336]	; (80060e0 <HAL_GPIO_Init+0x33c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01f      	beq.n	8005fd2 <HAL_GPIO_Init+0x22e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a53      	ldr	r2, [pc, #332]	; (80060e4 <HAL_GPIO_Init+0x340>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d019      	beq.n	8005fce <HAL_GPIO_Init+0x22a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a52      	ldr	r2, [pc, #328]	; (80060e8 <HAL_GPIO_Init+0x344>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d013      	beq.n	8005fca <HAL_GPIO_Init+0x226>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a51      	ldr	r2, [pc, #324]	; (80060ec <HAL_GPIO_Init+0x348>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00d      	beq.n	8005fc6 <HAL_GPIO_Init+0x222>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a50      	ldr	r2, [pc, #320]	; (80060f0 <HAL_GPIO_Init+0x34c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <HAL_GPIO_Init+0x21e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a4f      	ldr	r2, [pc, #316]	; (80060f4 <HAL_GPIO_Init+0x350>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d101      	bne.n	8005fbe <HAL_GPIO_Init+0x21a>
 8005fba:	2309      	movs	r3, #9
 8005fbc:	e012      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fbe:	230a      	movs	r3, #10
 8005fc0:	e010      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fc2:	2308      	movs	r3, #8
 8005fc4:	e00e      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fc6:	2307      	movs	r3, #7
 8005fc8:	e00c      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fca:	2306      	movs	r3, #6
 8005fcc:	e00a      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fce:	2305      	movs	r3, #5
 8005fd0:	e008      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fd2:	2304      	movs	r3, #4
 8005fd4:	e006      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e004      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e002      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	f002 0203 	and.w	r2, r2, #3
 8005fea:	0092      	lsls	r2, r2, #2
 8005fec:	4093      	lsls	r3, r2
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ff4:	4935      	ldr	r1, [pc, #212]	; (80060cc <HAL_GPIO_Init+0x328>)
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	089b      	lsrs	r3, r3, #2
 8005ffa:	3302      	adds	r3, #2
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006002:	4b3d      	ldr	r3, [pc, #244]	; (80060f8 <HAL_GPIO_Init+0x354>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	43db      	mvns	r3, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	4013      	ands	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4313      	orrs	r3, r2
 8006024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006026:	4a34      	ldr	r2, [pc, #208]	; (80060f8 <HAL_GPIO_Init+0x354>)
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800602c:	4b32      	ldr	r3, [pc, #200]	; (80060f8 <HAL_GPIO_Init+0x354>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	43db      	mvns	r3, r3
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	4013      	ands	r3, r2
 800603a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006050:	4a29      	ldr	r2, [pc, #164]	; (80060f8 <HAL_GPIO_Init+0x354>)
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006056:	4b28      	ldr	r3, [pc, #160]	; (80060f8 <HAL_GPIO_Init+0x354>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	43db      	mvns	r3, r3
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	4013      	ands	r3, r2
 8006064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800607a:	4a1f      	ldr	r2, [pc, #124]	; (80060f8 <HAL_GPIO_Init+0x354>)
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006080:	4b1d      	ldr	r3, [pc, #116]	; (80060f8 <HAL_GPIO_Init+0x354>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	43db      	mvns	r3, r3
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	4013      	ands	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060a4:	4a14      	ldr	r2, [pc, #80]	; (80060f8 <HAL_GPIO_Init+0x354>)
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	3301      	adds	r3, #1
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	2b0f      	cmp	r3, #15
 80060b4:	f67f ae84 	bls.w	8005dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	3724      	adds	r7, #36	; 0x24
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40023800 	.word	0x40023800
 80060cc:	40013800 	.word	0x40013800
 80060d0:	40020000 	.word	0x40020000
 80060d4:	40020400 	.word	0x40020400
 80060d8:	40020800 	.word	0x40020800
 80060dc:	40020c00 	.word	0x40020c00
 80060e0:	40021000 	.word	0x40021000
 80060e4:	40021400 	.word	0x40021400
 80060e8:	40021800 	.word	0x40021800
 80060ec:	40021c00 	.word	0x40021c00
 80060f0:	40022000 	.word	0x40022000
 80060f4:	40022400 	.word	0x40022400
 80060f8:	40013c00 	.word	0x40013c00

080060fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	887b      	ldrh	r3, [r7, #2]
 800610e:	4013      	ands	r3, r2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
 8006118:	e001      	b.n	800611e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800611a:	2300      	movs	r3, #0
 800611c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800611e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	807b      	strh	r3, [r7, #2]
 8006138:	4613      	mov	r3, r2
 800613a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800613c:	787b      	ldrb	r3, [r7, #1]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006142:	887a      	ldrh	r2, [r7, #2]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006148:	e003      	b.n	8006152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800614a:	887b      	ldrh	r3, [r7, #2]
 800614c:	041a      	lsls	r2, r3, #16
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	619a      	str	r2, [r3, #24]
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695a      	ldr	r2, [r3, #20]
 800616e:	887b      	ldrh	r3, [r7, #2]
 8006170:	401a      	ands	r2, r3
 8006172:	887b      	ldrh	r3, [r7, #2]
 8006174:	429a      	cmp	r2, r3
 8006176:	d104      	bne.n	8006182 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006178:	887b      	ldrh	r3, [r7, #2]
 800617a:	041a      	lsls	r2, r3, #16
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006180:	e002      	b.n	8006188 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006182:	887a      	ldrh	r2, [r7, #2]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	619a      	str	r2, [r3, #24]
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800619e:	4b08      	ldr	r3, [pc, #32]	; (80061c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061a0:	695a      	ldr	r2, [r3, #20]
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d006      	beq.n	80061b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061aa:	4a05      	ldr	r2, [pc, #20]	; (80061c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061ac:	88fb      	ldrh	r3, [r7, #6]
 80061ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fc feec 	bl	8002f90 <HAL_GPIO_EXTI_Callback>
  }
}
 80061b8:	bf00      	nop
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40013c00 	.word	0x40013c00

080061c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e12b      	b.n	800642e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fb fd84 	bl	8001cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2224      	movs	r2, #36	; 0x24
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0201 	bic.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006228:	f001 fc98 	bl	8007b5c <HAL_RCC_GetPCLK1Freq>
 800622c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	4a81      	ldr	r2, [pc, #516]	; (8006438 <HAL_I2C_Init+0x274>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d807      	bhi.n	8006248 <HAL_I2C_Init+0x84>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4a80      	ldr	r2, [pc, #512]	; (800643c <HAL_I2C_Init+0x278>)
 800623c:	4293      	cmp	r3, r2
 800623e:	bf94      	ite	ls
 8006240:	2301      	movls	r3, #1
 8006242:	2300      	movhi	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e006      	b.n	8006256 <HAL_I2C_Init+0x92>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a7d      	ldr	r2, [pc, #500]	; (8006440 <HAL_I2C_Init+0x27c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	bf94      	ite	ls
 8006250:	2301      	movls	r3, #1
 8006252:	2300      	movhi	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e0e7      	b.n	800642e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4a78      	ldr	r2, [pc, #480]	; (8006444 <HAL_I2C_Init+0x280>)
 8006262:	fba2 2303 	umull	r2, r3, r2, r3
 8006266:	0c9b      	lsrs	r3, r3, #18
 8006268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4a6a      	ldr	r2, [pc, #424]	; (8006438 <HAL_I2C_Init+0x274>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d802      	bhi.n	8006298 <HAL_I2C_Init+0xd4>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	3301      	adds	r3, #1
 8006296:	e009      	b.n	80062ac <HAL_I2C_Init+0xe8>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800629e:	fb02 f303 	mul.w	r3, r2, r3
 80062a2:	4a69      	ldr	r2, [pc, #420]	; (8006448 <HAL_I2C_Init+0x284>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	099b      	lsrs	r3, r3, #6
 80062aa:	3301      	adds	r3, #1
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6812      	ldr	r2, [r2, #0]
 80062b0:	430b      	orrs	r3, r1
 80062b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80062be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	495c      	ldr	r1, [pc, #368]	; (8006438 <HAL_I2C_Init+0x274>)
 80062c8:	428b      	cmp	r3, r1
 80062ca:	d819      	bhi.n	8006300 <HAL_I2C_Init+0x13c>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	1e59      	subs	r1, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80062da:	1c59      	adds	r1, r3, #1
 80062dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80062e0:	400b      	ands	r3, r1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <HAL_I2C_Init+0x138>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1e59      	subs	r1, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80062f4:	3301      	adds	r3, #1
 80062f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fa:	e051      	b.n	80063a0 <HAL_I2C_Init+0x1dc>
 80062fc:	2304      	movs	r3, #4
 80062fe:	e04f      	b.n	80063a0 <HAL_I2C_Init+0x1dc>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d111      	bne.n	800632c <HAL_I2C_Init+0x168>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1e58      	subs	r0, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6859      	ldr	r1, [r3, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	440b      	add	r3, r1
 8006316:	fbb0 f3f3 	udiv	r3, r0, r3
 800631a:	3301      	adds	r3, #1
 800631c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006320:	2b00      	cmp	r3, #0
 8006322:	bf0c      	ite	eq
 8006324:	2301      	moveq	r3, #1
 8006326:	2300      	movne	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	e012      	b.n	8006352 <HAL_I2C_Init+0x18e>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1e58      	subs	r0, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6859      	ldr	r1, [r3, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	0099      	lsls	r1, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006342:	3301      	adds	r3, #1
 8006344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006348:	2b00      	cmp	r3, #0
 800634a:	bf0c      	ite	eq
 800634c:	2301      	moveq	r3, #1
 800634e:	2300      	movne	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <HAL_I2C_Init+0x196>
 8006356:	2301      	movs	r3, #1
 8006358:	e022      	b.n	80063a0 <HAL_I2C_Init+0x1dc>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10e      	bne.n	8006380 <HAL_I2C_Init+0x1bc>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1e58      	subs	r0, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6859      	ldr	r1, [r3, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	440b      	add	r3, r1
 8006370:	fbb0 f3f3 	udiv	r3, r0, r3
 8006374:	3301      	adds	r3, #1
 8006376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800637a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800637e:	e00f      	b.n	80063a0 <HAL_I2C_Init+0x1dc>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	1e58      	subs	r0, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6859      	ldr	r1, [r3, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	0099      	lsls	r1, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	fbb0 f3f3 	udiv	r3, r0, r3
 8006396:	3301      	adds	r3, #1
 8006398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800639c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	6809      	ldr	r1, [r1, #0]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69da      	ldr	r2, [r3, #28]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80063ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6911      	ldr	r1, [r2, #16]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	68d2      	ldr	r2, [r2, #12]
 80063da:	4311      	orrs	r1, r2
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	430b      	orrs	r3, r1
 80063e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695a      	ldr	r2, [r3, #20]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2220      	movs	r2, #32
 800641a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	000186a0 	.word	0x000186a0
 800643c:	001e847f 	.word	0x001e847f
 8006440:	003d08ff 	.word	0x003d08ff
 8006444:	431bde83 	.word	0x431bde83
 8006448:	10624dd3 	.word	0x10624dd3

0800644c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b088      	sub	sp, #32
 8006450:	af02      	add	r7, sp, #8
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	4608      	mov	r0, r1
 8006456:	4611      	mov	r1, r2
 8006458:	461a      	mov	r2, r3
 800645a:	4603      	mov	r3, r0
 800645c:	817b      	strh	r3, [r7, #10]
 800645e:	460b      	mov	r3, r1
 8006460:	813b      	strh	r3, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006466:	f7fe fd57 	bl	8004f18 <HAL_GetTick>
 800646a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b20      	cmp	r3, #32
 8006476:	f040 80d9 	bne.w	800662c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	2319      	movs	r3, #25
 8006480:	2201      	movs	r2, #1
 8006482:	496d      	ldr	r1, [pc, #436]	; (8006638 <HAL_I2C_Mem_Write+0x1ec>)
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fc7f 	bl	8006d88 <I2C_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006490:	2302      	movs	r3, #2
 8006492:	e0cc      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_I2C_Mem_Write+0x56>
 800649e:	2302      	movs	r3, #2
 80064a0:	e0c5      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d007      	beq.n	80064c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0201 	orr.w	r2, r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2221      	movs	r2, #33	; 0x21
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2240      	movs	r2, #64	; 0x40
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4a4d      	ldr	r2, [pc, #308]	; (800663c <HAL_I2C_Mem_Write+0x1f0>)
 8006508:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800650a:	88f8      	ldrh	r0, [r7, #6]
 800650c:	893a      	ldrh	r2, [r7, #8]
 800650e:	8979      	ldrh	r1, [r7, #10]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	4603      	mov	r3, r0
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fab6 	bl	8006a8c <I2C_RequestMemoryWrite>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d052      	beq.n	80065cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e081      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 fd00 	bl	8006f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00d      	beq.n	8006556 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	2b04      	cmp	r3, #4
 8006540:	d107      	bne.n	8006552 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006550:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e06b      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	781a      	ldrb	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b04      	cmp	r3, #4
 8006592:	d11b      	bne.n	80065cc <HAL_I2C_Mem_Write+0x180>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006598:	2b00      	cmp	r3, #0
 800659a:	d017      	beq.n	80065cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	781a      	ldrb	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1aa      	bne.n	800652a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fcec 	bl	8006fb6 <I2C_WaitOnBTFFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00d      	beq.n	8006600 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d107      	bne.n	80065fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e016      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800660e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	e000      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800662c:	2302      	movs	r3, #2
  }
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	00100002 	.word	0x00100002
 800663c:	ffff0000 	.word	0xffff0000

08006640 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08c      	sub	sp, #48	; 0x30
 8006644:	af02      	add	r7, sp, #8
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	4608      	mov	r0, r1
 800664a:	4611      	mov	r1, r2
 800664c:	461a      	mov	r2, r3
 800664e:	4603      	mov	r3, r0
 8006650:	817b      	strh	r3, [r7, #10]
 8006652:	460b      	mov	r3, r1
 8006654:	813b      	strh	r3, [r7, #8]
 8006656:	4613      	mov	r3, r2
 8006658:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800665a:	f7fe fc5d 	bl	8004f18 <HAL_GetTick>
 800665e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b20      	cmp	r3, #32
 800666a:	f040 8208 	bne.w	8006a7e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	2319      	movs	r3, #25
 8006674:	2201      	movs	r2, #1
 8006676:	497b      	ldr	r1, [pc, #492]	; (8006864 <HAL_I2C_Mem_Read+0x224>)
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 fb85 	bl	8006d88 <I2C_WaitOnFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006684:	2302      	movs	r3, #2
 8006686:	e1fb      	b.n	8006a80 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_I2C_Mem_Read+0x56>
 8006692:	2302      	movs	r3, #2
 8006694:	e1f4      	b.n	8006a80 <HAL_I2C_Mem_Read+0x440>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d007      	beq.n	80066bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2222      	movs	r2, #34	; 0x22
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2240      	movs	r2, #64	; 0x40
 80066d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80066ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a5b      	ldr	r2, [pc, #364]	; (8006868 <HAL_I2C_Mem_Read+0x228>)
 80066fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066fe:	88f8      	ldrh	r0, [r7, #6]
 8006700:	893a      	ldrh	r2, [r7, #8]
 8006702:	8979      	ldrh	r1, [r7, #10]
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	4603      	mov	r3, r0
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 fa52 	bl	8006bb8 <I2C_RequestMemoryRead>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e1b0      	b.n	8006a80 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006722:	2b00      	cmp	r3, #0
 8006724:	d113      	bne.n	800674e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006726:	2300      	movs	r3, #0
 8006728:	623b      	str	r3, [r7, #32]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	623b      	str	r3, [r7, #32]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	623b      	str	r3, [r7, #32]
 800673a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	e184      	b.n	8006a58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006752:	2b01      	cmp	r3, #1
 8006754:	d11b      	bne.n	800678e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006764:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	61fb      	str	r3, [r7, #28]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	61fb      	str	r3, [r7, #28]
 800677a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e164      	b.n	8006a58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006792:	2b02      	cmp	r3, #2
 8006794:	d11b      	bne.n	80067ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067b6:	2300      	movs	r3, #0
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	61bb      	str	r3, [r7, #24]
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	e144      	b.n	8006a58 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ce:	2300      	movs	r3, #0
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80067e4:	e138      	b.n	8006a58 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	f200 80f1 	bhi.w	80069d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d123      	bne.n	8006840 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fc1b 	bl	8007038 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e139      	b.n	8006a80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800683e:	e10b      	b.n	8006a58 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006844:	2b02      	cmp	r3, #2
 8006846:	d14e      	bne.n	80068e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	2200      	movs	r2, #0
 8006850:	4906      	ldr	r1, [pc, #24]	; (800686c <HAL_I2C_Mem_Read+0x22c>)
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 fa98 	bl	8006d88 <I2C_WaitOnFlagUntilTimeout>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d008      	beq.n	8006870 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e10e      	b.n	8006a80 <HAL_I2C_Mem_Read+0x440>
 8006862:	bf00      	nop
 8006864:	00100002 	.word	0x00100002
 8006868:	ffff0000 	.word	0xffff0000
 800686c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800687e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691a      	ldr	r2, [r3, #16]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689c:	3b01      	subs	r3, #1
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068da:	b29b      	uxth	r3, r3
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068e4:	e0b8      	b.n	8006a58 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ec:	2200      	movs	r2, #0
 80068ee:	4966      	ldr	r1, [pc, #408]	; (8006a88 <HAL_I2C_Mem_Read+0x448>)
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 fa49 	bl	8006d88 <I2C_WaitOnFlagUntilTimeout>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0bf      	b.n	8006a80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800690e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006948:	2200      	movs	r2, #0
 800694a:	494f      	ldr	r1, [pc, #316]	; (8006a88 <HAL_I2C_Mem_Read+0x448>)
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 fa1b 	bl	8006d88 <I2C_WaitOnFlagUntilTimeout>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e091      	b.n	8006a80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800696a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691a      	ldr	r2, [r3, #16]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006988:	3b01      	subs	r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069d0:	e042      	b.n	8006a58 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fb2e 	bl	8007038 <I2C_WaitOnRXNEFlagUntilTimeout>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e04c      	b.n	8006a80 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	b2d2      	uxtb	r2, r2
 80069f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d118      	bne.n	8006a58 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691a      	ldr	r2, [r3, #16]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f47f aec2 	bne.w	80067e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e000      	b.n	8006a80 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006a7e:	2302      	movs	r3, #2
  }
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3728      	adds	r7, #40	; 0x28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	00010004 	.word	0x00010004

08006a8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af02      	add	r7, sp, #8
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	4608      	mov	r0, r1
 8006a96:	4611      	mov	r1, r2
 8006a98:	461a      	mov	r2, r3
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	817b      	strh	r3, [r7, #10]
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	813b      	strh	r3, [r7, #8]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ab4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 f960 	bl	8006d88 <I2C_WaitOnFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00d      	beq.n	8006aea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006adc:	d103      	bne.n	8006ae6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e05f      	b.n	8006baa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006aea:	897b      	ldrh	r3, [r7, #10]
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006af8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	6a3a      	ldr	r2, [r7, #32]
 8006afe:	492d      	ldr	r1, [pc, #180]	; (8006bb4 <I2C_RequestMemoryWrite+0x128>)
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f998 	bl	8006e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e04c      	b.n	8006baa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b28:	6a39      	ldr	r1, [r7, #32]
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 fa02 	bl	8006f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00d      	beq.n	8006b52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d107      	bne.n	8006b4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e02b      	b.n	8006baa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b52:	88fb      	ldrh	r3, [r7, #6]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d105      	bne.n	8006b64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b58:	893b      	ldrh	r3, [r7, #8]
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	611a      	str	r2, [r3, #16]
 8006b62:	e021      	b.n	8006ba8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b64:	893b      	ldrh	r3, [r7, #8]
 8006b66:	0a1b      	lsrs	r3, r3, #8
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b74:	6a39      	ldr	r1, [r7, #32]
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 f9dc 	bl	8006f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00d      	beq.n	8006b9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d107      	bne.n	8006b9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e005      	b.n	8006baa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b9e:	893b      	ldrh	r3, [r7, #8]
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	00010002 	.word	0x00010002

08006bb8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	4608      	mov	r0, r1
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	817b      	strh	r3, [r7, #10]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	813b      	strh	r3, [r7, #8]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006be0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 f8c2 	bl	8006d88 <I2C_WaitOnFlagUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00d      	beq.n	8006c26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c18:	d103      	bne.n	8006c22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e0aa      	b.n	8006d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c26:	897b      	ldrh	r3, [r7, #10]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	6a3a      	ldr	r2, [r7, #32]
 8006c3a:	4952      	ldr	r1, [pc, #328]	; (8006d84 <I2C_RequestMemoryRead+0x1cc>)
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f8fa 	bl	8006e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e097      	b.n	8006d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c64:	6a39      	ldr	r1, [r7, #32]
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f964 	bl	8006f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00d      	beq.n	8006c8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d107      	bne.n	8006c8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e076      	b.n	8006d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c8e:	88fb      	ldrh	r3, [r7, #6]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d105      	bne.n	8006ca0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c94:	893b      	ldrh	r3, [r7, #8]
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	611a      	str	r2, [r3, #16]
 8006c9e:	e021      	b.n	8006ce4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ca0:	893b      	ldrh	r3, [r7, #8]
 8006ca2:	0a1b      	lsrs	r3, r3, #8
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb0:	6a39      	ldr	r1, [r7, #32]
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 f93e 	bl	8006f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00d      	beq.n	8006cda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d107      	bne.n	8006cd6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e050      	b.n	8006d7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cda:	893b      	ldrh	r3, [r7, #8]
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce6:	6a39      	ldr	r1, [r7, #32]
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f923 	bl	8006f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00d      	beq.n	8006d10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	d107      	bne.n	8006d0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e035      	b.n	8006d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f82b 	bl	8006d88 <I2C_WaitOnFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00d      	beq.n	8006d54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d46:	d103      	bne.n	8006d50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e013      	b.n	8006d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d54:	897b      	ldrh	r3, [r7, #10]
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	f043 0301 	orr.w	r3, r3, #1
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	6a3a      	ldr	r2, [r7, #32]
 8006d68:	4906      	ldr	r1, [pc, #24]	; (8006d84 <I2C_RequestMemoryRead+0x1cc>)
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 f863 	bl	8006e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e000      	b.n	8006d7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	00010002 	.word	0x00010002

08006d88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	603b      	str	r3, [r7, #0]
 8006d94:	4613      	mov	r3, r2
 8006d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d98:	e025      	b.n	8006de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da0:	d021      	beq.n	8006de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da2:	f7fe f8b9 	bl	8004f18 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d302      	bcc.n	8006db8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d116      	bne.n	8006de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f043 0220 	orr.w	r2, r3, #32
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e023      	b.n	8006e2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	0c1b      	lsrs	r3, r3, #16
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d10d      	bne.n	8006e0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	43da      	mvns	r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf0c      	ite	eq
 8006e02:	2301      	moveq	r3, #1
 8006e04:	2300      	movne	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	e00c      	b.n	8006e26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	43da      	mvns	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	4013      	ands	r3, r2
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	bf0c      	ite	eq
 8006e1e:	2301      	moveq	r3, #1
 8006e20:	2300      	movne	r3, #0
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	79fb      	ldrb	r3, [r7, #7]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d0b6      	beq.n	8006d9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	607a      	str	r2, [r7, #4]
 8006e42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e44:	e051      	b.n	8006eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e54:	d123      	bne.n	8006e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	f043 0204 	orr.w	r2, r3, #4
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e046      	b.n	8006f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea4:	d021      	beq.n	8006eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea6:	f7fe f837 	bl	8004f18 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d116      	bne.n	8006eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	f043 0220 	orr.w	r2, r3, #32
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e020      	b.n	8006f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	0c1b      	lsrs	r3, r3, #16
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d10c      	bne.n	8006f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	43da      	mvns	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4013      	ands	r3, r2
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bf14      	ite	ne
 8006f06:	2301      	movne	r3, #1
 8006f08:	2300      	moveq	r3, #0
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	e00b      	b.n	8006f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	43da      	mvns	r2, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	4013      	ands	r3, r2
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	bf14      	ite	ne
 8006f20:	2301      	movne	r3, #1
 8006f22:	2300      	moveq	r3, #0
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d18d      	bne.n	8006e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f40:	e02d      	b.n	8006f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 f8ce 	bl	80070e4 <I2C_IsAcknowledgeFailed>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e02d      	b.n	8006fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d021      	beq.n	8006f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f5a:	f7fd ffdd 	bl	8004f18 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d302      	bcc.n	8006f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d116      	bne.n	8006f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	f043 0220 	orr.w	r2, r3, #32
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e007      	b.n	8006fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa8:	2b80      	cmp	r3, #128	; 0x80
 8006faa:	d1ca      	bne.n	8006f42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fc2:	e02d      	b.n	8007020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 f88d 	bl	80070e4 <I2C_IsAcknowledgeFailed>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e02d      	b.n	8007030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fda:	d021      	beq.n	8007020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fdc:	f7fd ff9c 	bl	8004f18 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d302      	bcc.n	8006ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d116      	bne.n	8007020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	f043 0220 	orr.w	r2, r3, #32
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e007      	b.n	8007030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	f003 0304 	and.w	r3, r3, #4
 800702a:	2b04      	cmp	r3, #4
 800702c:	d1ca      	bne.n	8006fc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007044:	e042      	b.n	80070cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	f003 0310 	and.w	r3, r3, #16
 8007050:	2b10      	cmp	r3, #16
 8007052:	d119      	bne.n	8007088 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f06f 0210 	mvn.w	r2, #16
 800705c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e029      	b.n	80070dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007088:	f7fd ff46 	bl	8004f18 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	429a      	cmp	r2, r3
 8007096:	d302      	bcc.n	800709e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d116      	bne.n	80070cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	f043 0220 	orr.w	r2, r3, #32
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e007      	b.n	80070dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d6:	2b40      	cmp	r3, #64	; 0x40
 80070d8:	d1b5      	bne.n	8007046 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070fa:	d11b      	bne.n	8007134 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007104:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007120:	f043 0204 	orr.w	r2, r3, #4
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e000      	b.n	8007136 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b20      	cmp	r3, #32
 8007156:	d129      	bne.n	80071ac <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2224      	movs	r2, #36	; 0x24
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0201 	bic.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0210 	bic.w	r2, r2, #16
 800717e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0201 	orr.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	e000      	b.n	80071ae <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80071ac:	2302      	movs	r3, #2
  }
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	d12a      	bne.n	800722a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2224      	movs	r2, #36	; 0x24
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0201 	bic.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80071f4:	89fb      	ldrh	r3, [r7, #14]
 80071f6:	f023 030f 	bic.w	r3, r3, #15
 80071fa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	b29a      	uxth	r2, r3
 8007200:	89fb      	ldrh	r3, [r7, #14]
 8007202:	4313      	orrs	r3, r2
 8007204:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	89fa      	ldrh	r2, [r7, #14]
 800720c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0201 	orr.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	e000      	b.n	800722c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800722a:	2302      	movs	r3, #2
  }
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007242:	2300      	movs	r3, #0
 8007244:	603b      	str	r3, [r7, #0]
 8007246:	4b20      	ldr	r3, [pc, #128]	; (80072c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	4a1f      	ldr	r2, [pc, #124]	; (80072c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800724c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007250:	6413      	str	r3, [r2, #64]	; 0x40
 8007252:	4b1d      	ldr	r3, [pc, #116]	; (80072c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800725e:	4b1b      	ldr	r3, [pc, #108]	; (80072cc <HAL_PWREx_EnableOverDrive+0x94>)
 8007260:	2201      	movs	r2, #1
 8007262:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007264:	f7fd fe58 	bl	8004f18 <HAL_GetTick>
 8007268:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800726a:	e009      	b.n	8007280 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800726c:	f7fd fe54 	bl	8004f18 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800727a:	d901      	bls.n	8007280 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e01f      	b.n	80072c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007280:	4b13      	ldr	r3, [pc, #76]	; (80072d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800728c:	d1ee      	bne.n	800726c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800728e:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007290:	2201      	movs	r2, #1
 8007292:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007294:	f7fd fe40 	bl	8004f18 <HAL_GetTick>
 8007298:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800729a:	e009      	b.n	80072b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800729c:	f7fd fe3c 	bl	8004f18 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072aa:	d901      	bls.n	80072b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e007      	b.n	80072c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80072b0:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072bc:	d1ee      	bne.n	800729c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	40023800 	.word	0x40023800
 80072cc:	420e0040 	.word	0x420e0040
 80072d0:	40007000 	.word	0x40007000
 80072d4:	420e0044 	.word	0x420e0044

080072d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e25b      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d075      	beq.n	80073e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072f6:	4ba3      	ldr	r3, [pc, #652]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 030c 	and.w	r3, r3, #12
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d00c      	beq.n	800731c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007302:	4ba0      	ldr	r3, [pc, #640]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800730a:	2b08      	cmp	r3, #8
 800730c:	d112      	bne.n	8007334 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800730e:	4b9d      	ldr	r3, [pc, #628]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800731a:	d10b      	bne.n	8007334 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800731c:	4b99      	ldr	r3, [pc, #612]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d05b      	beq.n	80073e0 <HAL_RCC_OscConfig+0x108>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d157      	bne.n	80073e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e236      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800733c:	d106      	bne.n	800734c <HAL_RCC_OscConfig+0x74>
 800733e:	4b91      	ldr	r3, [pc, #580]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a90      	ldr	r2, [pc, #576]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	e01d      	b.n	8007388 <HAL_RCC_OscConfig+0xb0>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007354:	d10c      	bne.n	8007370 <HAL_RCC_OscConfig+0x98>
 8007356:	4b8b      	ldr	r3, [pc, #556]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a8a      	ldr	r2, [pc, #552]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 800735c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	4b88      	ldr	r3, [pc, #544]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a87      	ldr	r2, [pc, #540]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	e00b      	b.n	8007388 <HAL_RCC_OscConfig+0xb0>
 8007370:	4b84      	ldr	r3, [pc, #528]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a83      	ldr	r2, [pc, #524]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	4b81      	ldr	r3, [pc, #516]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a80      	ldr	r2, [pc, #512]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d013      	beq.n	80073b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007390:	f7fd fdc2 	bl	8004f18 <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007396:	e008      	b.n	80073aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007398:	f7fd fdbe 	bl	8004f18 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b64      	cmp	r3, #100	; 0x64
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e1fb      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073aa:	4b76      	ldr	r3, [pc, #472]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0f0      	beq.n	8007398 <HAL_RCC_OscConfig+0xc0>
 80073b6:	e014      	b.n	80073e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b8:	f7fd fdae 	bl	8004f18 <HAL_GetTick>
 80073bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073c0:	f7fd fdaa 	bl	8004f18 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b64      	cmp	r3, #100	; 0x64
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e1e7      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073d2:	4b6c      	ldr	r3, [pc, #432]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f0      	bne.n	80073c0 <HAL_RCC_OscConfig+0xe8>
 80073de:	e000      	b.n	80073e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d063      	beq.n	80074b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073ee:	4b65      	ldr	r3, [pc, #404]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f003 030c 	and.w	r3, r3, #12
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00b      	beq.n	8007412 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073fa:	4b62      	ldr	r3, [pc, #392]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007402:	2b08      	cmp	r3, #8
 8007404:	d11c      	bne.n	8007440 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007406:	4b5f      	ldr	r3, [pc, #380]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d116      	bne.n	8007440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007412:	4b5c      	ldr	r3, [pc, #368]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d005      	beq.n	800742a <HAL_RCC_OscConfig+0x152>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d001      	beq.n	800742a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e1bb      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800742a:	4b56      	ldr	r3, [pc, #344]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	4952      	ldr	r1, [pc, #328]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 800743a:	4313      	orrs	r3, r2
 800743c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800743e:	e03a      	b.n	80074b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d020      	beq.n	800748a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007448:	4b4f      	ldr	r3, [pc, #316]	; (8007588 <HAL_RCC_OscConfig+0x2b0>)
 800744a:	2201      	movs	r2, #1
 800744c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744e:	f7fd fd63 	bl	8004f18 <HAL_GetTick>
 8007452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007454:	e008      	b.n	8007468 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007456:	f7fd fd5f 	bl	8004f18 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d901      	bls.n	8007468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e19c      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007468:	4b46      	ldr	r3, [pc, #280]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0f0      	beq.n	8007456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007474:	4b43      	ldr	r3, [pc, #268]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	4940      	ldr	r1, [pc, #256]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007484:	4313      	orrs	r3, r2
 8007486:	600b      	str	r3, [r1, #0]
 8007488:	e015      	b.n	80074b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800748a:	4b3f      	ldr	r3, [pc, #252]	; (8007588 <HAL_RCC_OscConfig+0x2b0>)
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007490:	f7fd fd42 	bl	8004f18 <HAL_GetTick>
 8007494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007496:	e008      	b.n	80074aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007498:	f7fd fd3e 	bl	8004f18 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d901      	bls.n	80074aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e17b      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074aa:	4b36      	ldr	r3, [pc, #216]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1f0      	bne.n	8007498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0308 	and.w	r3, r3, #8
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d030      	beq.n	8007524 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d016      	beq.n	80074f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074ca:	4b30      	ldr	r3, [pc, #192]	; (800758c <HAL_RCC_OscConfig+0x2b4>)
 80074cc:	2201      	movs	r2, #1
 80074ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d0:	f7fd fd22 	bl	8004f18 <HAL_GetTick>
 80074d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074d6:	e008      	b.n	80074ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074d8:	f7fd fd1e 	bl	8004f18 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e15b      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074ea:	4b26      	ldr	r3, [pc, #152]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 80074ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0f0      	beq.n	80074d8 <HAL_RCC_OscConfig+0x200>
 80074f6:	e015      	b.n	8007524 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074f8:	4b24      	ldr	r3, [pc, #144]	; (800758c <HAL_RCC_OscConfig+0x2b4>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074fe:	f7fd fd0b 	bl	8004f18 <HAL_GetTick>
 8007502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007504:	e008      	b.n	8007518 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007506:	f7fd fd07 	bl	8004f18 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b02      	cmp	r3, #2
 8007512:	d901      	bls.n	8007518 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e144      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007518:	4b1a      	ldr	r3, [pc, #104]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 800751a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1f0      	bne.n	8007506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 80a0 	beq.w	8007672 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007532:	2300      	movs	r3, #0
 8007534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007536:	4b13      	ldr	r3, [pc, #76]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10f      	bne.n	8007562 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007542:	2300      	movs	r3, #0
 8007544:	60bb      	str	r3, [r7, #8]
 8007546:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	4a0e      	ldr	r2, [pc, #56]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 800754c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007550:	6413      	str	r3, [r2, #64]	; 0x40
 8007552:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <HAL_RCC_OscConfig+0x2ac>)
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755a:	60bb      	str	r3, [r7, #8]
 800755c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800755e:	2301      	movs	r3, #1
 8007560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007562:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <HAL_RCC_OscConfig+0x2b8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756a:	2b00      	cmp	r3, #0
 800756c:	d121      	bne.n	80075b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800756e:	4b08      	ldr	r3, [pc, #32]	; (8007590 <HAL_RCC_OscConfig+0x2b8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a07      	ldr	r2, [pc, #28]	; (8007590 <HAL_RCC_OscConfig+0x2b8>)
 8007574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800757a:	f7fd fccd 	bl	8004f18 <HAL_GetTick>
 800757e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007580:	e011      	b.n	80075a6 <HAL_RCC_OscConfig+0x2ce>
 8007582:	bf00      	nop
 8007584:	40023800 	.word	0x40023800
 8007588:	42470000 	.word	0x42470000
 800758c:	42470e80 	.word	0x42470e80
 8007590:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007594:	f7fd fcc0 	bl	8004f18 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d901      	bls.n	80075a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e0fd      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075a6:	4b81      	ldr	r3, [pc, #516]	; (80077ac <HAL_RCC_OscConfig+0x4d4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d0f0      	beq.n	8007594 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d106      	bne.n	80075c8 <HAL_RCC_OscConfig+0x2f0>
 80075ba:	4b7d      	ldr	r3, [pc, #500]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	4a7c      	ldr	r2, [pc, #496]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 80075c0:	f043 0301 	orr.w	r3, r3, #1
 80075c4:	6713      	str	r3, [r2, #112]	; 0x70
 80075c6:	e01c      	b.n	8007602 <HAL_RCC_OscConfig+0x32a>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	2b05      	cmp	r3, #5
 80075ce:	d10c      	bne.n	80075ea <HAL_RCC_OscConfig+0x312>
 80075d0:	4b77      	ldr	r3, [pc, #476]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 80075d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d4:	4a76      	ldr	r2, [pc, #472]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 80075d6:	f043 0304 	orr.w	r3, r3, #4
 80075da:	6713      	str	r3, [r2, #112]	; 0x70
 80075dc:	4b74      	ldr	r3, [pc, #464]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 80075de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e0:	4a73      	ldr	r2, [pc, #460]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 80075e2:	f043 0301 	orr.w	r3, r3, #1
 80075e6:	6713      	str	r3, [r2, #112]	; 0x70
 80075e8:	e00b      	b.n	8007602 <HAL_RCC_OscConfig+0x32a>
 80075ea:	4b71      	ldr	r3, [pc, #452]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 80075ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ee:	4a70      	ldr	r2, [pc, #448]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 80075f0:	f023 0301 	bic.w	r3, r3, #1
 80075f4:	6713      	str	r3, [r2, #112]	; 0x70
 80075f6:	4b6e      	ldr	r3, [pc, #440]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 80075f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fa:	4a6d      	ldr	r2, [pc, #436]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 80075fc:	f023 0304 	bic.w	r3, r3, #4
 8007600:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d015      	beq.n	8007636 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800760a:	f7fd fc85 	bl	8004f18 <HAL_GetTick>
 800760e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007610:	e00a      	b.n	8007628 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007612:	f7fd fc81 	bl	8004f18 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007620:	4293      	cmp	r3, r2
 8007622:	d901      	bls.n	8007628 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e0bc      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007628:	4b61      	ldr	r3, [pc, #388]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 800762a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0ee      	beq.n	8007612 <HAL_RCC_OscConfig+0x33a>
 8007634:	e014      	b.n	8007660 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007636:	f7fd fc6f 	bl	8004f18 <HAL_GetTick>
 800763a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800763c:	e00a      	b.n	8007654 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800763e:	f7fd fc6b 	bl	8004f18 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	f241 3288 	movw	r2, #5000	; 0x1388
 800764c:	4293      	cmp	r3, r2
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e0a6      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007654:	4b56      	ldr	r3, [pc, #344]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 8007656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1ee      	bne.n	800763e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d105      	bne.n	8007672 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007666:	4b52      	ldr	r3, [pc, #328]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	4a51      	ldr	r2, [pc, #324]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 800766c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007670:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 8092 	beq.w	80077a0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800767c:	4b4c      	ldr	r3, [pc, #304]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f003 030c 	and.w	r3, r3, #12
 8007684:	2b08      	cmp	r3, #8
 8007686:	d05c      	beq.n	8007742 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	2b02      	cmp	r3, #2
 800768e:	d141      	bne.n	8007714 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007690:	4b48      	ldr	r3, [pc, #288]	; (80077b4 <HAL_RCC_OscConfig+0x4dc>)
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007696:	f7fd fc3f 	bl	8004f18 <HAL_GetTick>
 800769a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800769c:	e008      	b.n	80076b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800769e:	f7fd fc3b 	bl	8004f18 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d901      	bls.n	80076b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e078      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076b0:	4b3f      	ldr	r3, [pc, #252]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1f0      	bne.n	800769e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	69da      	ldr	r2, [r3, #28]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	431a      	orrs	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	019b      	lsls	r3, r3, #6
 80076cc:	431a      	orrs	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	085b      	lsrs	r3, r3, #1
 80076d4:	3b01      	subs	r3, #1
 80076d6:	041b      	lsls	r3, r3, #16
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	061b      	lsls	r3, r3, #24
 80076e0:	4933      	ldr	r1, [pc, #204]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076e6:	4b33      	ldr	r3, [pc, #204]	; (80077b4 <HAL_RCC_OscConfig+0x4dc>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ec:	f7fd fc14 	bl	8004f18 <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076f2:	e008      	b.n	8007706 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076f4:	f7fd fc10 	bl	8004f18 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e04d      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007706:	4b2a      	ldr	r3, [pc, #168]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0f0      	beq.n	80076f4 <HAL_RCC_OscConfig+0x41c>
 8007712:	e045      	b.n	80077a0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007714:	4b27      	ldr	r3, [pc, #156]	; (80077b4 <HAL_RCC_OscConfig+0x4dc>)
 8007716:	2200      	movs	r2, #0
 8007718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800771a:	f7fd fbfd 	bl	8004f18 <HAL_GetTick>
 800771e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007720:	e008      	b.n	8007734 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007722:	f7fd fbf9 	bl	8004f18 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b02      	cmp	r3, #2
 800772e:	d901      	bls.n	8007734 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e036      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007734:	4b1e      	ldr	r3, [pc, #120]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1f0      	bne.n	8007722 <HAL_RCC_OscConfig+0x44a>
 8007740:	e02e      	b.n	80077a0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d101      	bne.n	800774e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e029      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800774e:	4b18      	ldr	r3, [pc, #96]	; (80077b0 <HAL_RCC_OscConfig+0x4d8>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	429a      	cmp	r2, r3
 8007760:	d11c      	bne.n	800779c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800776c:	429a      	cmp	r2, r3
 800776e:	d115      	bne.n	800779c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007776:	4013      	ands	r3, r2
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800777c:	4293      	cmp	r3, r2
 800777e:	d10d      	bne.n	800779c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800778a:	429a      	cmp	r2, r3
 800778c:	d106      	bne.n	800779c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007798:	429a      	cmp	r2, r3
 800779a:	d001      	beq.n	80077a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e000      	b.n	80077a2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	40007000 	.word	0x40007000
 80077b0:	40023800 	.word	0x40023800
 80077b4:	42470060 	.word	0x42470060

080077b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e0cc      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077cc:	4b68      	ldr	r3, [pc, #416]	; (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 030f 	and.w	r3, r3, #15
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d90c      	bls.n	80077f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077da:	4b65      	ldr	r3, [pc, #404]	; (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	b2d2      	uxtb	r2, r2
 80077e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077e2:	4b63      	ldr	r3, [pc, #396]	; (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d001      	beq.n	80077f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e0b8      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d020      	beq.n	8007842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800780c:	4b59      	ldr	r3, [pc, #356]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	4a58      	ldr	r2, [pc, #352]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007824:	4b53      	ldr	r3, [pc, #332]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4a52      	ldr	r2, [pc, #328]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800782a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800782e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007830:	4b50      	ldr	r3, [pc, #320]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	494d      	ldr	r1, [pc, #308]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800783e:	4313      	orrs	r3, r2
 8007840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d044      	beq.n	80078d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d107      	bne.n	8007866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007856:	4b47      	ldr	r3, [pc, #284]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d119      	bne.n	8007896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e07f      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d003      	beq.n	8007876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007872:	2b03      	cmp	r3, #3
 8007874:	d107      	bne.n	8007886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007876:	4b3f      	ldr	r3, [pc, #252]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e06f      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007886:	4b3b      	ldr	r3, [pc, #236]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e067      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007896:	4b37      	ldr	r3, [pc, #220]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f023 0203 	bic.w	r2, r3, #3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	4934      	ldr	r1, [pc, #208]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078a8:	f7fd fb36 	bl	8004f18 <HAL_GetTick>
 80078ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ae:	e00a      	b.n	80078c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078b0:	f7fd fb32 	bl	8004f18 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80078be:	4293      	cmp	r3, r2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e04f      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078c6:	4b2b      	ldr	r3, [pc, #172]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f003 020c 	and.w	r2, r3, #12
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d1eb      	bne.n	80078b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078d8:	4b25      	ldr	r3, [pc, #148]	; (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d20c      	bcs.n	8007900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078e6:	4b22      	ldr	r3, [pc, #136]	; (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ee:	4b20      	ldr	r3, [pc, #128]	; (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d001      	beq.n	8007900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e032      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0304 	and.w	r3, r3, #4
 8007908:	2b00      	cmp	r3, #0
 800790a:	d008      	beq.n	800791e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800790c:	4b19      	ldr	r3, [pc, #100]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	4916      	ldr	r1, [pc, #88]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800791a:	4313      	orrs	r3, r2
 800791c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0308 	and.w	r3, r3, #8
 8007926:	2b00      	cmp	r3, #0
 8007928:	d009      	beq.n	800793e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800792a:	4b12      	ldr	r3, [pc, #72]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	490e      	ldr	r1, [pc, #56]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800793a:	4313      	orrs	r3, r2
 800793c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800793e:	f000 f821 	bl	8007984 <HAL_RCC_GetSysClockFreq>
 8007942:	4602      	mov	r2, r0
 8007944:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	091b      	lsrs	r3, r3, #4
 800794a:	f003 030f 	and.w	r3, r3, #15
 800794e:	490a      	ldr	r1, [pc, #40]	; (8007978 <HAL_RCC_ClockConfig+0x1c0>)
 8007950:	5ccb      	ldrb	r3, [r1, r3]
 8007952:	fa22 f303 	lsr.w	r3, r2, r3
 8007956:	4a09      	ldr	r2, [pc, #36]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800795a:	4b09      	ldr	r3, [pc, #36]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f7fd fa96 	bl	8004e90 <HAL_InitTick>

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	40023c00 	.word	0x40023c00
 8007974:	40023800 	.word	0x40023800
 8007978:	080147f8 	.word	0x080147f8
 800797c:	20000004 	.word	0x20000004
 8007980:	20000008 	.word	0x20000008

08007984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007984:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	607b      	str	r3, [r7, #4]
 8007990:	2300      	movs	r3, #0
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	2300      	movs	r3, #0
 8007996:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800799c:	4b67      	ldr	r3, [pc, #412]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f003 030c 	and.w	r3, r3, #12
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d00d      	beq.n	80079c4 <HAL_RCC_GetSysClockFreq+0x40>
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	f200 80bd 	bhi.w	8007b28 <HAL_RCC_GetSysClockFreq+0x1a4>
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_RCC_GetSysClockFreq+0x34>
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d003      	beq.n	80079be <HAL_RCC_GetSysClockFreq+0x3a>
 80079b6:	e0b7      	b.n	8007b28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079b8:	4b61      	ldr	r3, [pc, #388]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80079ba:	60bb      	str	r3, [r7, #8]
       break;
 80079bc:	e0b7      	b.n	8007b2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079be:	4b60      	ldr	r3, [pc, #384]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80079c0:	60bb      	str	r3, [r7, #8]
      break;
 80079c2:	e0b4      	b.n	8007b2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079c4:	4b5d      	ldr	r3, [pc, #372]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079ce:	4b5b      	ldr	r3, [pc, #364]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d04d      	beq.n	8007a76 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079da:	4b58      	ldr	r3, [pc, #352]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	099b      	lsrs	r3, r3, #6
 80079e0:	461a      	mov	r2, r3
 80079e2:	f04f 0300 	mov.w	r3, #0
 80079e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80079ea:	f04f 0100 	mov.w	r1, #0
 80079ee:	ea02 0800 	and.w	r8, r2, r0
 80079f2:	ea03 0901 	and.w	r9, r3, r1
 80079f6:	4640      	mov	r0, r8
 80079f8:	4649      	mov	r1, r9
 80079fa:	f04f 0200 	mov.w	r2, #0
 80079fe:	f04f 0300 	mov.w	r3, #0
 8007a02:	014b      	lsls	r3, r1, #5
 8007a04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007a08:	0142      	lsls	r2, r0, #5
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	ebb0 0008 	subs.w	r0, r0, r8
 8007a12:	eb61 0109 	sbc.w	r1, r1, r9
 8007a16:	f04f 0200 	mov.w	r2, #0
 8007a1a:	f04f 0300 	mov.w	r3, #0
 8007a1e:	018b      	lsls	r3, r1, #6
 8007a20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007a24:	0182      	lsls	r2, r0, #6
 8007a26:	1a12      	subs	r2, r2, r0
 8007a28:	eb63 0301 	sbc.w	r3, r3, r1
 8007a2c:	f04f 0000 	mov.w	r0, #0
 8007a30:	f04f 0100 	mov.w	r1, #0
 8007a34:	00d9      	lsls	r1, r3, #3
 8007a36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a3a:	00d0      	lsls	r0, r2, #3
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	eb12 0208 	adds.w	r2, r2, r8
 8007a44:	eb43 0309 	adc.w	r3, r3, r9
 8007a48:	f04f 0000 	mov.w	r0, #0
 8007a4c:	f04f 0100 	mov.w	r1, #0
 8007a50:	0299      	lsls	r1, r3, #10
 8007a52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007a56:	0290      	lsls	r0, r2, #10
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4619      	mov	r1, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	461a      	mov	r2, r3
 8007a64:	f04f 0300 	mov.w	r3, #0
 8007a68:	f7f9 f92e 	bl	8000cc8 <__aeabi_uldivmod>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4613      	mov	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	e04a      	b.n	8007b0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a76:	4b31      	ldr	r3, [pc, #196]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	099b      	lsrs	r3, r3, #6
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a86:	f04f 0100 	mov.w	r1, #0
 8007a8a:	ea02 0400 	and.w	r4, r2, r0
 8007a8e:	ea03 0501 	and.w	r5, r3, r1
 8007a92:	4620      	mov	r0, r4
 8007a94:	4629      	mov	r1, r5
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	014b      	lsls	r3, r1, #5
 8007aa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007aa4:	0142      	lsls	r2, r0, #5
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	1b00      	subs	r0, r0, r4
 8007aac:	eb61 0105 	sbc.w	r1, r1, r5
 8007ab0:	f04f 0200 	mov.w	r2, #0
 8007ab4:	f04f 0300 	mov.w	r3, #0
 8007ab8:	018b      	lsls	r3, r1, #6
 8007aba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007abe:	0182      	lsls	r2, r0, #6
 8007ac0:	1a12      	subs	r2, r2, r0
 8007ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8007ac6:	f04f 0000 	mov.w	r0, #0
 8007aca:	f04f 0100 	mov.w	r1, #0
 8007ace:	00d9      	lsls	r1, r3, #3
 8007ad0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ad4:	00d0      	lsls	r0, r2, #3
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	1912      	adds	r2, r2, r4
 8007adc:	eb45 0303 	adc.w	r3, r5, r3
 8007ae0:	f04f 0000 	mov.w	r0, #0
 8007ae4:	f04f 0100 	mov.w	r1, #0
 8007ae8:	0299      	lsls	r1, r3, #10
 8007aea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007aee:	0290      	lsls	r0, r2, #10
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4610      	mov	r0, r2
 8007af6:	4619      	mov	r1, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	f7f9 f8e2 	bl	8000cc8 <__aeabi_uldivmod>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4613      	mov	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	0c1b      	lsrs	r3, r3, #16
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	3301      	adds	r3, #1
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b24:	60bb      	str	r3, [r7, #8]
      break;
 8007b26:	e002      	b.n	8007b2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b28:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007b2a:	60bb      	str	r3, [r7, #8]
      break;
 8007b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	00f42400 	.word	0x00f42400

08007b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b44:	b480      	push	{r7}
 8007b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b48:	4b03      	ldr	r3, [pc, #12]	; (8007b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	20000004 	.word	0x20000004

08007b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b60:	f7ff fff0 	bl	8007b44 <HAL_RCC_GetHCLKFreq>
 8007b64:	4602      	mov	r2, r0
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	0a9b      	lsrs	r3, r3, #10
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	4903      	ldr	r1, [pc, #12]	; (8007b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b72:	5ccb      	ldrb	r3, [r1, r3]
 8007b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	40023800 	.word	0x40023800
 8007b80:	08014808 	.word	0x08014808

08007b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b88:	f7ff ffdc 	bl	8007b44 <HAL_RCC_GetHCLKFreq>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	0b5b      	lsrs	r3, r3, #13
 8007b94:	f003 0307 	and.w	r3, r3, #7
 8007b98:	4903      	ldr	r1, [pc, #12]	; (8007ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b9a:	5ccb      	ldrb	r3, [r1, r3]
 8007b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	40023800 	.word	0x40023800
 8007ba8:	08014808 	.word	0x08014808

08007bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10b      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d105      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d075      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007be0:	4bad      	ldr	r3, [pc, #692]	; (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007be6:	f7fd f997 	bl	8004f18 <HAL_GetTick>
 8007bea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bec:	e008      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007bee:	f7fd f993 	bl	8004f18 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d901      	bls.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e18b      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c00:	4ba6      	ldr	r3, [pc, #664]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1f0      	bne.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d009      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	019a      	lsls	r2, r3, #6
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	071b      	lsls	r3, r3, #28
 8007c24:	499d      	ldr	r1, [pc, #628]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01f      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c38:	4b98      	ldr	r3, [pc, #608]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c3e:	0f1b      	lsrs	r3, r3, #28
 8007c40:	f003 0307 	and.w	r3, r3, #7
 8007c44:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	019a      	lsls	r2, r3, #6
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	061b      	lsls	r3, r3, #24
 8007c52:	431a      	orrs	r2, r3
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	071b      	lsls	r3, r3, #28
 8007c58:	4990      	ldr	r1, [pc, #576]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007c60:	4b8e      	ldr	r3, [pc, #568]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c66:	f023 021f 	bic.w	r2, r3, #31
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	498a      	ldr	r1, [pc, #552]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00d      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	019a      	lsls	r2, r3, #6
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	061b      	lsls	r3, r3, #24
 8007c90:	431a      	orrs	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	071b      	lsls	r3, r3, #28
 8007c98:	4980      	ldr	r1, [pc, #512]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ca0:	4b7d      	ldr	r3, [pc, #500]	; (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ca6:	f7fd f937 	bl	8004f18 <HAL_GetTick>
 8007caa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cac:	e008      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007cae:	f7fd f933 	bl	8004f18 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d901      	bls.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e12b      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cc0:	4b76      	ldr	r3, [pc, #472]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d0f0      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d105      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d079      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ce4:	4b6e      	ldr	r3, [pc, #440]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cea:	f7fd f915 	bl	8004f18 <HAL_GetTick>
 8007cee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007cf0:	e008      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007cf2:	f7fd f911 	bl	8004f18 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d901      	bls.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e109      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d04:	4b65      	ldr	r3, [pc, #404]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d10:	d0ef      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0304 	and.w	r3, r3, #4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d020      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d1e:	4b5f      	ldr	r3, [pc, #380]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d24:	0f1b      	lsrs	r3, r3, #28
 8007d26:	f003 0307 	and.w	r3, r3, #7
 8007d2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	019a      	lsls	r2, r3, #6
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	061b      	lsls	r3, r3, #24
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	071b      	lsls	r3, r3, #28
 8007d3e:	4957      	ldr	r1, [pc, #348]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007d46:	4b55      	ldr	r3, [pc, #340]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	021b      	lsls	r3, r3, #8
 8007d58:	4950      	ldr	r1, [pc, #320]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0308 	and.w	r3, r3, #8
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d01e      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d6c:	4b4b      	ldr	r3, [pc, #300]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d72:	0e1b      	lsrs	r3, r3, #24
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	019a      	lsls	r2, r3, #6
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	061b      	lsls	r3, r3, #24
 8007d84:	431a      	orrs	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	071b      	lsls	r3, r3, #28
 8007d8c:	4943      	ldr	r1, [pc, #268]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007d94:	4b41      	ldr	r3, [pc, #260]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	493e      	ldr	r1, [pc, #248]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007daa:	4b3d      	ldr	r3, [pc, #244]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dac:	2201      	movs	r2, #1
 8007dae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007db0:	f7fd f8b2 	bl	8004f18 <HAL_GetTick>
 8007db4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007db6:	e008      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007db8:	f7fd f8ae 	bl	8004f18 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d901      	bls.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e0a6      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007dca:	4b34      	ldr	r3, [pc, #208]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd6:	d1ef      	bne.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0320 	and.w	r3, r3, #32
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 808d 	beq.w	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	4b2c      	ldr	r3, [pc, #176]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	4a2b      	ldr	r2, [pc, #172]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007df4:	6413      	str	r3, [r2, #64]	; 0x40
 8007df6:	4b29      	ldr	r3, [pc, #164]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007e02:	4b28      	ldr	r3, [pc, #160]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a27      	ldr	r2, [pc, #156]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e0e:	f7fd f883 	bl	8004f18 <HAL_GetTick>
 8007e12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e14:	e008      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007e16:	f7fd f87f 	bl	8004f18 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d901      	bls.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e077      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e28:	4b1e      	ldr	r3, [pc, #120]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d0f0      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e34:	4b19      	ldr	r3, [pc, #100]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d039      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d032      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e52:	4b12      	ldr	r3, [pc, #72]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e5c:	4b12      	ldr	r3, [pc, #72]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e62:	4b11      	ldr	r3, [pc, #68]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007e68:	4a0c      	ldr	r2, [pc, #48]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007e6e:	4b0b      	ldr	r3, [pc, #44]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d11e      	bne.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007e7a:	f7fd f84d 	bl	8004f18 <HAL_GetTick>
 8007e7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e80:	e014      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e82:	f7fd f849 	bl	8004f18 <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d90b      	bls.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e03f      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007e98:	42470068 	.word	0x42470068
 8007e9c:	40023800 	.word	0x40023800
 8007ea0:	42470070 	.word	0x42470070
 8007ea4:	40007000 	.word	0x40007000
 8007ea8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eac:	4b1c      	ldr	r3, [pc, #112]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb0:	f003 0302 	and.w	r3, r3, #2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0e4      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ec4:	d10d      	bne.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007ec6:	4b16      	ldr	r3, [pc, #88]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eda:	4911      	ldr	r1, [pc, #68]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	608b      	str	r3, [r1, #8]
 8007ee0:	e005      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007ee2:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	4a0e      	ldr	r2, [pc, #56]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ee8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007eec:	6093      	str	r3, [r2, #8]
 8007eee:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ef0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007efa:	4909      	ldr	r1, [pc, #36]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007f12:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007f14:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	40023800 	.word	0x40023800
 8007f24:	424711e0 	.word	0x424711e0

08007f28 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e083      	b.n	8008042 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	7f5b      	ldrb	r3, [r3, #29]
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d105      	bne.n	8007f50 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fb fdd8 	bl	8003b00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	22ca      	movs	r2, #202	; 0xca
 8007f5c:	625a      	str	r2, [r3, #36]	; 0x24
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2253      	movs	r2, #83	; 0x53
 8007f64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 faa8 	bl	80084bc <RTC_EnterInitMode>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d008      	beq.n	8007f84 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	22ff      	movs	r2, #255	; 0xff
 8007f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e05e      	b.n	8008042 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	6812      	ldr	r2, [r2, #0]
 8007f8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f96:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6899      	ldr	r1, [r3, #8]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	431a      	orrs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	68d2      	ldr	r2, [r2, #12]
 8007fbe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6919      	ldr	r1, [r3, #16]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	041a      	lsls	r2, r3, #16
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fe2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f003 0320 	and.w	r3, r3, #32
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10e      	bne.n	8008010 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fa3a 	bl	800846c <HAL_RTC_WaitForSynchro>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	22ff      	movs	r2, #255	; 0xff
 8008004:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2204      	movs	r2, #4
 800800a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e018      	b.n	8008042 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800801e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	699a      	ldr	r2, [r3, #24]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	22ff      	movs	r2, #255	; 0xff
 8008038:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008040:	2300      	movs	r3, #0
  }
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800804a:	b590      	push	{r4, r7, lr}
 800804c:	b087      	sub	sp, #28
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	7f1b      	ldrb	r3, [r3, #28]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d101      	bne.n	8008066 <HAL_RTC_SetTime+0x1c>
 8008062:	2302      	movs	r3, #2
 8008064:	e0aa      	b.n	80081bc <HAL_RTC_SetTime+0x172>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2201      	movs	r2, #1
 800806a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2202      	movs	r2, #2
 8008070:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d126      	bne.n	80080c6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	d102      	bne.n	800808c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2200      	movs	r2, #0
 800808a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	4618      	mov	r0, r3
 8008092:	f000 fa3f 	bl	8008514 <RTC_ByteToBcd2>
 8008096:	4603      	mov	r3, r0
 8008098:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	785b      	ldrb	r3, [r3, #1]
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fa38 	bl	8008514 <RTC_ByteToBcd2>
 80080a4:	4603      	mov	r3, r0
 80080a6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80080a8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	789b      	ldrb	r3, [r3, #2]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fa30 	bl	8008514 <RTC_ByteToBcd2>
 80080b4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80080b6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	78db      	ldrb	r3, [r3, #3]
 80080be:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80080c0:	4313      	orrs	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	e018      	b.n	80080f8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d102      	bne.n	80080da <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2200      	movs	r2, #0
 80080d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	785b      	ldrb	r3, [r3, #1]
 80080e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80080e6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80080ec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	78db      	ldrb	r3, [r3, #3]
 80080f2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80080f4:	4313      	orrs	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	22ca      	movs	r2, #202	; 0xca
 80080fe:	625a      	str	r2, [r3, #36]	; 0x24
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2253      	movs	r2, #83	; 0x53
 8008106:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f9d7 	bl	80084bc <RTC_EnterInitMode>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00b      	beq.n	800812c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	22ff      	movs	r2, #255	; 0xff
 800811a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2204      	movs	r2, #4
 8008120:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e047      	b.n	80081bc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008136:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800813a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800814a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6899      	ldr	r1, [r3, #8]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	68da      	ldr	r2, [r3, #12]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	431a      	orrs	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008172:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f003 0320 	and.w	r3, r3, #32
 800817e:	2b00      	cmp	r3, #0
 8008180:	d111      	bne.n	80081a6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 f972 	bl	800846c <HAL_RTC_WaitForSynchro>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00b      	beq.n	80081a6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	22ff      	movs	r2, #255	; 0xff
 8008194:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2204      	movs	r2, #4
 800819a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e00a      	b.n	80081bc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	22ff      	movs	r2, #255	; 0xff
 80081ac:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2201      	movs	r2, #1
 80081b2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80081ba:	2300      	movs	r3, #0
  }
}
 80081bc:	4618      	mov	r0, r3
 80081be:	371c      	adds	r7, #28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd90      	pop	{r4, r7, pc}

080081c4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80081f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80081fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	0c1b      	lsrs	r3, r3, #16
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008206:	b2da      	uxtb	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	0a1b      	lsrs	r3, r3, #8
 8008210:	b2db      	uxtb	r3, r3
 8008212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008216:	b2da      	uxtb	r2, r3
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008224:	b2da      	uxtb	r2, r3
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	0c1b      	lsrs	r3, r3, #16
 800822e:	b2db      	uxtb	r3, r3
 8008230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008234:	b2da      	uxtb	r2, r3
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d11a      	bne.n	8008276 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	4618      	mov	r0, r3
 8008246:	f000 f983 	bl	8008550 <RTC_Bcd2ToByte>
 800824a:	4603      	mov	r3, r0
 800824c:	461a      	mov	r2, r3
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	785b      	ldrb	r3, [r3, #1]
 8008256:	4618      	mov	r0, r3
 8008258:	f000 f97a 	bl	8008550 <RTC_Bcd2ToByte>
 800825c:	4603      	mov	r3, r0
 800825e:	461a      	mov	r2, r3
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	789b      	ldrb	r3, [r3, #2]
 8008268:	4618      	mov	r0, r3
 800826a:	f000 f971 	bl	8008550 <RTC_Bcd2ToByte>
 800826e:	4603      	mov	r3, r0
 8008270:	461a      	mov	r2, r3
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008280:	b590      	push	{r4, r7, lr}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	7f1b      	ldrb	r3, [r3, #28]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_RTC_SetDate+0x1c>
 8008298:	2302      	movs	r3, #2
 800829a:	e094      	b.n	80083c6 <HAL_RTC_SetDate+0x146>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2202      	movs	r2, #2
 80082a6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10e      	bne.n	80082cc <HAL_RTC_SetDate+0x4c>
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	785b      	ldrb	r3, [r3, #1]
 80082b2:	f003 0310 	and.w	r3, r3, #16
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d008      	beq.n	80082cc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	f023 0310 	bic.w	r3, r3, #16
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	330a      	adds	r3, #10
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d11c      	bne.n	800830c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	78db      	ldrb	r3, [r3, #3]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 f91c 	bl	8008514 <RTC_ByteToBcd2>
 80082dc:	4603      	mov	r3, r0
 80082de:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 f915 	bl	8008514 <RTC_ByteToBcd2>
 80082ea:	4603      	mov	r3, r0
 80082ec:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80082ee:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	789b      	ldrb	r3, [r3, #2]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 f90d 	bl	8008514 <RTC_ByteToBcd2>
 80082fa:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80082fc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008306:	4313      	orrs	r3, r2
 8008308:	617b      	str	r3, [r7, #20]
 800830a:	e00e      	b.n	800832a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	78db      	ldrb	r3, [r3, #3]
 8008310:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	785b      	ldrb	r3, [r3, #1]
 8008316:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008318:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800831e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008326:	4313      	orrs	r3, r2
 8008328:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	22ca      	movs	r2, #202	; 0xca
 8008330:	625a      	str	r2, [r3, #36]	; 0x24
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2253      	movs	r2, #83	; 0x53
 8008338:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 f8be 	bl	80084bc <RTC_EnterInitMode>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00b      	beq.n	800835e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	22ff      	movs	r2, #255	; 0xff
 800834c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2204      	movs	r2, #4
 8008352:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e033      	b.n	80083c6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008368:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800836c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68da      	ldr	r2, [r3, #12]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800837c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f003 0320 	and.w	r3, r3, #32
 8008388:	2b00      	cmp	r3, #0
 800838a:	d111      	bne.n	80083b0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 f86d 	bl	800846c <HAL_RTC_WaitForSynchro>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	22ff      	movs	r2, #255	; 0xff
 800839e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2204      	movs	r2, #4
 80083a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e00a      	b.n	80083c6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	22ff      	movs	r2, #255	; 0xff
 80083b6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2201      	movs	r2, #1
 80083bc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80083c4:	2300      	movs	r3, #0
  }
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd90      	pop	{r4, r7, pc}

080083ce <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b086      	sub	sp, #24
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	60f8      	str	r0, [r7, #12]
 80083d6:	60b9      	str	r1, [r7, #8]
 80083d8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80083da:	2300      	movs	r3, #0
 80083dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80083e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80083ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	0c1b      	lsrs	r3, r3, #16
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	0a1b      	lsrs	r3, r3, #8
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	f003 031f 	and.w	r3, r3, #31
 8008402:	b2da      	uxtb	r2, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008410:	b2da      	uxtb	r2, r3
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	0b5b      	lsrs	r3, r3, #13
 800841a:	b2db      	uxtb	r3, r3
 800841c:	f003 0307 	and.w	r3, r3, #7
 8008420:	b2da      	uxtb	r2, r3
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d11a      	bne.n	8008462 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	78db      	ldrb	r3, [r3, #3]
 8008430:	4618      	mov	r0, r3
 8008432:	f000 f88d 	bl	8008550 <RTC_Bcd2ToByte>
 8008436:	4603      	mov	r3, r0
 8008438:	461a      	mov	r2, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	785b      	ldrb	r3, [r3, #1]
 8008442:	4618      	mov	r0, r3
 8008444:	f000 f884 	bl	8008550 <RTC_Bcd2ToByte>
 8008448:	4603      	mov	r3, r0
 800844a:	461a      	mov	r2, r3
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	789b      	ldrb	r3, [r3, #2]
 8008454:	4618      	mov	r0, r3
 8008456:	f000 f87b 	bl	8008550 <RTC_Bcd2ToByte>
 800845a:	4603      	mov	r3, r0
 800845c:	461a      	mov	r2, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008474:	2300      	movs	r3, #0
 8008476:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008486:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008488:	f7fc fd46 	bl	8004f18 <HAL_GetTick>
 800848c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800848e:	e009      	b.n	80084a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008490:	f7fc fd42 	bl	8004f18 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800849e:	d901      	bls.n	80084a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e007      	b.n	80084b4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f003 0320 	and.w	r3, r3, #32
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0ee      	beq.n	8008490 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d119      	bne.n	800850a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f04f 32ff 	mov.w	r2, #4294967295
 80084de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80084e0:	f7fc fd1a 	bl	8004f18 <HAL_GetTick>
 80084e4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80084e6:	e009      	b.n	80084fc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80084e8:	f7fc fd16 	bl	8004f18 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084f6:	d901      	bls.n	80084fc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e007      	b.n	800850c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008506:	2b00      	cmp	r3, #0
 8008508:	d0ee      	beq.n	80084e8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008522:	e005      	b.n	8008530 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3301      	adds	r3, #1
 8008528:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	3b0a      	subs	r3, #10
 800852e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	2b09      	cmp	r3, #9
 8008534:	d8f6      	bhi.n	8008524 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	b2db      	uxtb	r3, r3
 800853a:	011b      	lsls	r3, r3, #4
 800853c:	b2da      	uxtb	r2, r3
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	4313      	orrs	r3, r2
 8008542:	b2db      	uxtb	r3, r3
}
 8008544:	4618      	mov	r0, r3
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	4603      	mov	r3, r0
 8008558:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800855a:	2300      	movs	r3, #0
 800855c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	091b      	lsrs	r3, r3, #4
 8008562:	b2db      	uxtb	r3, r3
 8008564:	461a      	mov	r2, r3
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	f003 030f 	and.w	r3, r3, #15
 8008576:	b2da      	uxtb	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	4413      	add	r3, r2
 800857e:	b2db      	uxtb	r3, r3
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e056      	b.n	800864c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d106      	bne.n	80085be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7fb fd99 	bl	80040f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2202      	movs	r2, #2
 80085c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	431a      	orrs	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	431a      	orrs	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	431a      	orrs	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	431a      	orrs	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085fa:	431a      	orrs	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	69db      	ldr	r3, [r3, #28]
 8008600:	431a      	orrs	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	ea42 0103 	orr.w	r1, r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	0c1b      	lsrs	r3, r3, #16
 800861c:	f003 0104 	and.w	r1, r3, #4
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	69da      	ldr	r2, [r3, #28]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800863a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af02      	add	r7, sp, #8
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	603b      	str	r3, [r7, #0]
 8008660:	4613      	mov	r3, r2
 8008662:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008670:	d112      	bne.n	8008698 <HAL_SPI_Receive+0x44>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10e      	bne.n	8008698 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2204      	movs	r2, #4
 800867e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008682:	88fa      	ldrh	r2, [r7, #6]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	4613      	mov	r3, r2
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	68b9      	ldr	r1, [r7, #8]
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 f8e9 	bl	8008866 <HAL_SPI_TransmitReceive>
 8008694:	4603      	mov	r3, r0
 8008696:	e0e2      	b.n	800885e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d101      	bne.n	80086a6 <HAL_SPI_Receive+0x52>
 80086a2:	2302      	movs	r3, #2
 80086a4:	e0db      	b.n	800885e <HAL_SPI_Receive+0x20a>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086ae:	f7fc fc33 	bl	8004f18 <HAL_GetTick>
 80086b2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d002      	beq.n	80086c6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80086c0:	2302      	movs	r3, #2
 80086c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086c4:	e0c2      	b.n	800884c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <HAL_SPI_Receive+0x7e>
 80086cc:	88fb      	ldrh	r3, [r7, #6]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d102      	bne.n	80086d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086d6:	e0b9      	b.n	800884c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2204      	movs	r2, #4
 80086dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	88fa      	ldrh	r2, [r7, #6]
 80086f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	88fa      	ldrh	r2, [r7, #6]
 80086f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800871e:	d107      	bne.n	8008730 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800872e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800873a:	2b40      	cmp	r3, #64	; 0x40
 800873c:	d007      	beq.n	800874e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800874c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d162      	bne.n	800881c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008756:	e02e      	b.n	80087b6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b01      	cmp	r3, #1
 8008764:	d115      	bne.n	8008792 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f103 020c 	add.w	r2, r3, #12
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	7812      	ldrb	r2, [r2, #0]
 8008774:	b2d2      	uxtb	r2, r2
 8008776:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008786:	b29b      	uxth	r3, r3
 8008788:	3b01      	subs	r3, #1
 800878a:	b29a      	uxth	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008790:	e011      	b.n	80087b6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008792:	f7fc fbc1 	bl	8004f18 <HAL_GetTick>
 8008796:	4602      	mov	r2, r0
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d803      	bhi.n	80087aa <HAL_SPI_Receive+0x156>
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a8:	d102      	bne.n	80087b0 <HAL_SPI_Receive+0x15c>
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d102      	bne.n	80087b6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80087b4:	e04a      	b.n	800884c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1cb      	bne.n	8008758 <HAL_SPI_Receive+0x104>
 80087c0:	e031      	b.n	8008826 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d113      	bne.n	80087f8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087da:	b292      	uxth	r2, r2
 80087dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e2:	1c9a      	adds	r2, r3, #2
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	3b01      	subs	r3, #1
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80087f6:	e011      	b.n	800881c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087f8:	f7fc fb8e 	bl	8004f18 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d803      	bhi.n	8008810 <HAL_SPI_Receive+0x1bc>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d102      	bne.n	8008816 <HAL_SPI_Receive+0x1c2>
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d102      	bne.n	800881c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	75fb      	strb	r3, [r7, #23]
          goto error;
 800881a:	e017      	b.n	800884c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008820:	b29b      	uxth	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1cd      	bne.n	80087c2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 fa27 	bl	8008c7e <SPI_EndRxTransaction>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2220      	movs	r2, #32
 800883a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	75fb      	strb	r3, [r7, #23]
 8008848:	e000      	b.n	800884c <HAL_SPI_Receive+0x1f8>
  }

error :
 800884a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800885c:	7dfb      	ldrb	r3, [r7, #23]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b08c      	sub	sp, #48	; 0x30
 800886a:	af00      	add	r7, sp, #0
 800886c:	60f8      	str	r0, [r7, #12]
 800886e:	60b9      	str	r1, [r7, #8]
 8008870:	607a      	str	r2, [r7, #4]
 8008872:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008874:	2301      	movs	r3, #1
 8008876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008884:	2b01      	cmp	r3, #1
 8008886:	d101      	bne.n	800888c <HAL_SPI_TransmitReceive+0x26>
 8008888:	2302      	movs	r3, #2
 800888a:	e18a      	b.n	8008ba2 <HAL_SPI_TransmitReceive+0x33c>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008894:	f7fc fb40 	bl	8004f18 <HAL_GetTick>
 8008898:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80088aa:	887b      	ldrh	r3, [r7, #2]
 80088ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80088ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d00f      	beq.n	80088d6 <HAL_SPI_TransmitReceive+0x70>
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088bc:	d107      	bne.n	80088ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d103      	bne.n	80088ce <HAL_SPI_TransmitReceive+0x68>
 80088c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d003      	beq.n	80088d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80088ce:	2302      	movs	r3, #2
 80088d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80088d4:	e15b      	b.n	8008b8e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <HAL_SPI_TransmitReceive+0x82>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <HAL_SPI_TransmitReceive+0x82>
 80088e2:	887b      	ldrh	r3, [r7, #2]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d103      	bne.n	80088f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80088ee:	e14e      	b.n	8008b8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b04      	cmp	r3, #4
 80088fa:	d003      	beq.n	8008904 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2205      	movs	r2, #5
 8008900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	887a      	ldrh	r2, [r7, #2]
 8008914:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	887a      	ldrh	r2, [r7, #2]
 800891a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	887a      	ldrh	r2, [r7, #2]
 8008926:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	887a      	ldrh	r2, [r7, #2]
 800892c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008944:	2b40      	cmp	r3, #64	; 0x40
 8008946:	d007      	beq.n	8008958 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008956:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008960:	d178      	bne.n	8008a54 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <HAL_SPI_TransmitReceive+0x10a>
 800896a:	8b7b      	ldrh	r3, [r7, #26]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d166      	bne.n	8008a3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008974:	881a      	ldrh	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008980:	1c9a      	adds	r2, r3, #2
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800898a:	b29b      	uxth	r3, r3
 800898c:	3b01      	subs	r3, #1
 800898e:	b29a      	uxth	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008994:	e053      	b.n	8008a3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f003 0302 	and.w	r3, r3, #2
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d11b      	bne.n	80089dc <HAL_SPI_TransmitReceive+0x176>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d016      	beq.n	80089dc <HAL_SPI_TransmitReceive+0x176>
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d113      	bne.n	80089dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b8:	881a      	ldrh	r2, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	1c9a      	adds	r2, r3, #2
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	3b01      	subs	r3, #1
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d119      	bne.n	8008a1e <HAL_SPI_TransmitReceive+0x1b8>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d014      	beq.n	8008a1e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fe:	b292      	uxth	r2, r2
 8008a00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	1c9a      	adds	r2, r3, #2
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	3b01      	subs	r3, #1
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008a1e:	f7fc fa7b 	bl	8004f18 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d807      	bhi.n	8008a3e <HAL_SPI_TransmitReceive+0x1d8>
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a34:	d003      	beq.n	8008a3e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008a3c:	e0a7      	b.n	8008b8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1a6      	bne.n	8008996 <HAL_SPI_TransmitReceive+0x130>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1a1      	bne.n	8008996 <HAL_SPI_TransmitReceive+0x130>
 8008a52:	e07c      	b.n	8008b4e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <HAL_SPI_TransmitReceive+0x1fc>
 8008a5c:	8b7b      	ldrh	r3, [r7, #26]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d16b      	bne.n	8008b3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	330c      	adds	r3, #12
 8008a6c:	7812      	ldrb	r2, [r2, #0]
 8008a6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	3b01      	subs	r3, #1
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a88:	e057      	b.n	8008b3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d11c      	bne.n	8008ad2 <HAL_SPI_TransmitReceive+0x26c>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d017      	beq.n	8008ad2 <HAL_SPI_TransmitReceive+0x26c>
 8008aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d114      	bne.n	8008ad2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	330c      	adds	r3, #12
 8008ab2:	7812      	ldrb	r2, [r2, #0]
 8008ab4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aba:	1c5a      	adds	r2, r3, #1
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d119      	bne.n	8008b14 <HAL_SPI_TransmitReceive+0x2ae>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d014      	beq.n	8008b14 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	b2d2      	uxtb	r2, r2
 8008af6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b10:	2301      	movs	r3, #1
 8008b12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008b14:	f7fc fa00 	bl	8004f18 <HAL_GetTick>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d803      	bhi.n	8008b2c <HAL_SPI_TransmitReceive+0x2c6>
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2a:	d102      	bne.n	8008b32 <HAL_SPI_TransmitReceive+0x2cc>
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d103      	bne.n	8008b3a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008b38:	e029      	b.n	8008b8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1a2      	bne.n	8008a8a <HAL_SPI_TransmitReceive+0x224>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d19d      	bne.n	8008a8a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 f8f8 	bl	8008d48 <SPI_EndRxTxTransaction>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d006      	beq.n	8008b6c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2220      	movs	r2, #32
 8008b68:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008b6a:	e010      	b.n	8008b8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10b      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b74:	2300      	movs	r3, #0
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	617b      	str	r3, [r7, #20]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	e000      	b.n	8008b8e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008b8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3730      	adds	r7, #48	; 0x30
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	60f8      	str	r0, [r7, #12]
 8008bb2:	60b9      	str	r1, [r7, #8]
 8008bb4:	603b      	str	r3, [r7, #0]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008bba:	e04c      	b.n	8008c56 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc2:	d048      	beq.n	8008c56 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008bc4:	f7fc f9a8 	bl	8004f18 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d902      	bls.n	8008bda <SPI_WaitFlagStateUntilTimeout+0x30>
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d13d      	bne.n	8008c56 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bf2:	d111      	bne.n	8008c18 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bfc:	d004      	beq.n	8008c08 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c06:	d107      	bne.n	8008c18 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c20:	d10f      	bne.n	8008c42 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e00f      	b.n	8008c76 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	4013      	ands	r3, r2
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	bf0c      	ite	eq
 8008c66:	2301      	moveq	r3, #1
 8008c68:	2300      	movne	r3, #0
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	79fb      	ldrb	r3, [r7, #7]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d1a3      	bne.n	8008bbc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b086      	sub	sp, #24
 8008c82:	af02      	add	r7, sp, #8
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c92:	d111      	bne.n	8008cb8 <SPI_EndRxTransaction+0x3a>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c9c:	d004      	beq.n	8008ca8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ca6:	d107      	bne.n	8008cb8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cb6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cc0:	d12a      	bne.n	8008d18 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cca:	d012      	beq.n	8008cf2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2180      	movs	r1, #128	; 0x80
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7ff ff67 	bl	8008baa <SPI_WaitFlagStateUntilTimeout>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d02d      	beq.n	8008d3e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce6:	f043 0220 	orr.w	r2, r3, #32
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e026      	b.n	8008d40 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f7ff ff54 	bl	8008baa <SPI_WaitFlagStateUntilTimeout>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d01a      	beq.n	8008d3e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0c:	f043 0220 	orr.w	r2, r3, #32
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e013      	b.n	8008d40 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2101      	movs	r1, #1
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f7ff ff41 	bl	8008baa <SPI_WaitFlagStateUntilTimeout>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d007      	beq.n	8008d3e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d32:	f043 0220 	orr.w	r2, r3, #32
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e000      	b.n	8008d40 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008d54:	4b1b      	ldr	r3, [pc, #108]	; (8008dc4 <SPI_EndRxTxTransaction+0x7c>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a1b      	ldr	r2, [pc, #108]	; (8008dc8 <SPI_EndRxTxTransaction+0x80>)
 8008d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5e:	0d5b      	lsrs	r3, r3, #21
 8008d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d64:	fb02 f303 	mul.w	r3, r2, r3
 8008d68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d72:	d112      	bne.n	8008d9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2180      	movs	r1, #128	; 0x80
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f7ff ff13 	bl	8008baa <SPI_WaitFlagStateUntilTimeout>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d016      	beq.n	8008db8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8e:	f043 0220 	orr.w	r2, r3, #32
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e00f      	b.n	8008dba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00a      	beq.n	8008db6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db0:	2b80      	cmp	r3, #128	; 0x80
 8008db2:	d0f2      	beq.n	8008d9a <SPI_EndRxTxTransaction+0x52>
 8008db4:	e000      	b.n	8008db8 <SPI_EndRxTxTransaction+0x70>
        break;
 8008db6:	bf00      	nop
  }

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000004 	.word	0x20000004
 8008dc8:	165e9f81 	.word	0x165e9f81

08008dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e01d      	b.n	8008e1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d106      	bne.n	8008df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7fb fd26 	bl	8004844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3304      	adds	r3, #4
 8008e08:	4619      	mov	r1, r3
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	f000 fb8e 	bl	800952c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e01d      	b.n	8008e70 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d106      	bne.n	8008e4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f815 	bl	8008e78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2202      	movs	r2, #2
 8008e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4610      	mov	r0, r2
 8008e62:	f000 fb63 	bl	800952c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fe2e 	bl	8009b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a15      	ldr	r2, [pc, #84]	; (8008f00 <HAL_TIM_PWM_Start+0x74>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d004      	beq.n	8008eb8 <HAL_TIM_PWM_Start+0x2c>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a14      	ldr	r2, [pc, #80]	; (8008f04 <HAL_TIM_PWM_Start+0x78>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d101      	bne.n	8008ebc <HAL_TIM_PWM_Start+0x30>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e000      	b.n	8008ebe <HAL_TIM_PWM_Start+0x32>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d007      	beq.n	8008ed2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f003 0307 	and.w	r3, r3, #7
 8008edc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2b06      	cmp	r3, #6
 8008ee2:	d007      	beq.n	8008ef4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0201 	orr.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	40010000 	.word	0x40010000
 8008f04:	40010400 	.word	0x40010400

08008f08 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2200      	movs	r2, #0
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 fdf0 	bl	8009b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a22      	ldr	r2, [pc, #136]	; (8008fb0 <HAL_TIM_PWM_Stop+0xa8>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d004      	beq.n	8008f34 <HAL_TIM_PWM_Stop+0x2c>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a21      	ldr	r2, [pc, #132]	; (8008fb4 <HAL_TIM_PWM_Stop+0xac>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d101      	bne.n	8008f38 <HAL_TIM_PWM_Stop+0x30>
 8008f34:	2301      	movs	r3, #1
 8008f36:	e000      	b.n	8008f3a <HAL_TIM_PWM_Stop+0x32>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d017      	beq.n	8008f6e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6a1a      	ldr	r2, [r3, #32]
 8008f44:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f48:	4013      	ands	r3, r2
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10f      	bne.n	8008f6e <HAL_TIM_PWM_Stop+0x66>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6a1a      	ldr	r2, [r3, #32]
 8008f54:	f240 4344 	movw	r3, #1092	; 0x444
 8008f58:	4013      	ands	r3, r2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d107      	bne.n	8008f6e <HAL_TIM_PWM_Stop+0x66>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6a1a      	ldr	r2, [r3, #32]
 8008f74:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f78:	4013      	ands	r3, r2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10f      	bne.n	8008f9e <HAL_TIM_PWM_Stop+0x96>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6a1a      	ldr	r2, [r3, #32]
 8008f84:	f240 4344 	movw	r3, #1092	; 0x444
 8008f88:	4013      	ands	r3, r2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d107      	bne.n	8008f9e <HAL_TIM_PWM_Stop+0x96>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 0201 	bic.w	r2, r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	40010000 	.word	0x40010000
 8008fb4:	40010400 	.word	0x40010400

08008fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d122      	bne.n	8009014 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d11b      	bne.n	8009014 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f06f 0202 	mvn.w	r2, #2
 8008fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	f003 0303 	and.w	r3, r3, #3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa78 	bl	80094f0 <HAL_TIM_IC_CaptureCallback>
 8009000:	e005      	b.n	800900e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fa6a 	bl	80094dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fa7b 	bl	8009504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	f003 0304 	and.w	r3, r3, #4
 800901e:	2b04      	cmp	r3, #4
 8009020:	d122      	bne.n	8009068 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f003 0304 	and.w	r3, r3, #4
 800902c:	2b04      	cmp	r3, #4
 800902e:	d11b      	bne.n	8009068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f06f 0204 	mvn.w	r2, #4
 8009038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2202      	movs	r2, #2
 800903e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fa4e 	bl	80094f0 <HAL_TIM_IC_CaptureCallback>
 8009054:	e005      	b.n	8009062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa40 	bl	80094dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fa51 	bl	8009504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b08      	cmp	r3, #8
 8009074:	d122      	bne.n	80090bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f003 0308 	and.w	r3, r3, #8
 8009080:	2b08      	cmp	r3, #8
 8009082:	d11b      	bne.n	80090bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f06f 0208 	mvn.w	r2, #8
 800908c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2204      	movs	r2, #4
 8009092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fa24 	bl	80094f0 <HAL_TIM_IC_CaptureCallback>
 80090a8:	e005      	b.n	80090b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fa16 	bl	80094dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fa27 	bl	8009504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	f003 0310 	and.w	r3, r3, #16
 80090c6:	2b10      	cmp	r3, #16
 80090c8:	d122      	bne.n	8009110 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f003 0310 	and.w	r3, r3, #16
 80090d4:	2b10      	cmp	r3, #16
 80090d6:	d11b      	bne.n	8009110 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f06f 0210 	mvn.w	r2, #16
 80090e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2208      	movs	r2, #8
 80090e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f9fa 	bl	80094f0 <HAL_TIM_IC_CaptureCallback>
 80090fc:	e005      	b.n	800910a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f9ec 	bl	80094dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f9fd 	bl	8009504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b01      	cmp	r3, #1
 800911c:	d10e      	bne.n	800913c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b01      	cmp	r3, #1
 800912a:	d107      	bne.n	800913c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f06f 0201 	mvn.w	r2, #1
 8009134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7f9 ffba 	bl	80030b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009146:	2b80      	cmp	r3, #128	; 0x80
 8009148:	d10e      	bne.n	8009168 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009154:	2b80      	cmp	r3, #128	; 0x80
 8009156:	d107      	bne.n	8009168 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fd78 	bl	8009c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009172:	2b40      	cmp	r3, #64	; 0x40
 8009174:	d10e      	bne.n	8009194 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009180:	2b40      	cmp	r3, #64	; 0x40
 8009182:	d107      	bne.n	8009194 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800918c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f9c2 	bl	8009518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	f003 0320 	and.w	r3, r3, #32
 800919e:	2b20      	cmp	r3, #32
 80091a0:	d10e      	bne.n	80091c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	f003 0320 	and.w	r3, r3, #32
 80091ac:	2b20      	cmp	r3, #32
 80091ae:	d107      	bne.n	80091c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f06f 0220 	mvn.w	r2, #32
 80091b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fd42 	bl	8009c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d101      	bne.n	80091e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80091de:	2302      	movs	r3, #2
 80091e0:	e0b4      	b.n	800934c <HAL_TIM_PWM_ConfigChannel+0x184>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2202      	movs	r2, #2
 80091ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b0c      	cmp	r3, #12
 80091f6:	f200 809f 	bhi.w	8009338 <HAL_TIM_PWM_ConfigChannel+0x170>
 80091fa:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	08009235 	.word	0x08009235
 8009204:	08009339 	.word	0x08009339
 8009208:	08009339 	.word	0x08009339
 800920c:	08009339 	.word	0x08009339
 8009210:	08009275 	.word	0x08009275
 8009214:	08009339 	.word	0x08009339
 8009218:	08009339 	.word	0x08009339
 800921c:	08009339 	.word	0x08009339
 8009220:	080092b7 	.word	0x080092b7
 8009224:	08009339 	.word	0x08009339
 8009228:	08009339 	.word	0x08009339
 800922c:	08009339 	.word	0x08009339
 8009230:	080092f7 	.word	0x080092f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68b9      	ldr	r1, [r7, #8]
 800923a:	4618      	mov	r0, r3
 800923c:	f000 fa16 	bl	800966c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	699a      	ldr	r2, [r3, #24]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f042 0208 	orr.w	r2, r2, #8
 800924e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	699a      	ldr	r2, [r3, #24]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f022 0204 	bic.w	r2, r2, #4
 800925e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6999      	ldr	r1, [r3, #24]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	691a      	ldr	r2, [r3, #16]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	619a      	str	r2, [r3, #24]
      break;
 8009272:	e062      	b.n	800933a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68b9      	ldr	r1, [r7, #8]
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fa66 	bl	800974c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	699a      	ldr	r2, [r3, #24]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800928e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	699a      	ldr	r2, [r3, #24]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800929e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6999      	ldr	r1, [r3, #24]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	021a      	lsls	r2, r3, #8
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	430a      	orrs	r2, r1
 80092b2:	619a      	str	r2, [r3, #24]
      break;
 80092b4:	e041      	b.n	800933a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68b9      	ldr	r1, [r7, #8]
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fabb 	bl	8009838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	69da      	ldr	r2, [r3, #28]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f042 0208 	orr.w	r2, r2, #8
 80092d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	69da      	ldr	r2, [r3, #28]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 0204 	bic.w	r2, r2, #4
 80092e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	69d9      	ldr	r1, [r3, #28]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	61da      	str	r2, [r3, #28]
      break;
 80092f4:	e021      	b.n	800933a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68b9      	ldr	r1, [r7, #8]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 fb0f 	bl	8009920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	69da      	ldr	r2, [r3, #28]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	69da      	ldr	r2, [r3, #28]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	69d9      	ldr	r1, [r3, #28]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	021a      	lsls	r2, r3, #8
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	61da      	str	r2, [r3, #28]
      break;
 8009336:	e000      	b.n	800933a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009338:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009364:	2b01      	cmp	r3, #1
 8009366:	d101      	bne.n	800936c <HAL_TIM_ConfigClockSource+0x18>
 8009368:	2302      	movs	r3, #2
 800936a:	e0b3      	b.n	80094d4 <HAL_TIM_ConfigClockSource+0x180>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2202      	movs	r2, #2
 8009378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800938a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009392:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093a4:	d03e      	beq.n	8009424 <HAL_TIM_ConfigClockSource+0xd0>
 80093a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093aa:	f200 8087 	bhi.w	80094bc <HAL_TIM_ConfigClockSource+0x168>
 80093ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b2:	f000 8085 	beq.w	80094c0 <HAL_TIM_ConfigClockSource+0x16c>
 80093b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ba:	d87f      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x168>
 80093bc:	2b70      	cmp	r3, #112	; 0x70
 80093be:	d01a      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0xa2>
 80093c0:	2b70      	cmp	r3, #112	; 0x70
 80093c2:	d87b      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x168>
 80093c4:	2b60      	cmp	r3, #96	; 0x60
 80093c6:	d050      	beq.n	800946a <HAL_TIM_ConfigClockSource+0x116>
 80093c8:	2b60      	cmp	r3, #96	; 0x60
 80093ca:	d877      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x168>
 80093cc:	2b50      	cmp	r3, #80	; 0x50
 80093ce:	d03c      	beq.n	800944a <HAL_TIM_ConfigClockSource+0xf6>
 80093d0:	2b50      	cmp	r3, #80	; 0x50
 80093d2:	d873      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x168>
 80093d4:	2b40      	cmp	r3, #64	; 0x40
 80093d6:	d058      	beq.n	800948a <HAL_TIM_ConfigClockSource+0x136>
 80093d8:	2b40      	cmp	r3, #64	; 0x40
 80093da:	d86f      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x168>
 80093dc:	2b30      	cmp	r3, #48	; 0x30
 80093de:	d064      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x156>
 80093e0:	2b30      	cmp	r3, #48	; 0x30
 80093e2:	d86b      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x168>
 80093e4:	2b20      	cmp	r3, #32
 80093e6:	d060      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x156>
 80093e8:	2b20      	cmp	r3, #32
 80093ea:	d867      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x168>
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d05c      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x156>
 80093f0:	2b10      	cmp	r3, #16
 80093f2:	d05a      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80093f4:	e062      	b.n	80094bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6818      	ldr	r0, [r3, #0]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	6899      	ldr	r1, [r3, #8]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f000 fb5b 	bl	8009ac0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009418:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	609a      	str	r2, [r3, #8]
      break;
 8009422:	e04e      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	6899      	ldr	r1, [r3, #8]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f000 fb44 	bl	8009ac0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689a      	ldr	r2, [r3, #8]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009446:	609a      	str	r2, [r3, #8]
      break;
 8009448:	e03b      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	6859      	ldr	r1, [r3, #4]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	461a      	mov	r2, r3
 8009458:	f000 fab8 	bl	80099cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2150      	movs	r1, #80	; 0x50
 8009462:	4618      	mov	r0, r3
 8009464:	f000 fb11 	bl	8009a8a <TIM_ITRx_SetConfig>
      break;
 8009468:	e02b      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6818      	ldr	r0, [r3, #0]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	6859      	ldr	r1, [r3, #4]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	461a      	mov	r2, r3
 8009478:	f000 fad7 	bl	8009a2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2160      	movs	r1, #96	; 0x60
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fb01 	bl	8009a8a <TIM_ITRx_SetConfig>
      break;
 8009488:	e01b      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	6859      	ldr	r1, [r3, #4]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	461a      	mov	r2, r3
 8009498:	f000 fa98 	bl	80099cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2140      	movs	r1, #64	; 0x40
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 faf1 	bl	8009a8a <TIM_ITRx_SetConfig>
      break;
 80094a8:	e00b      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4619      	mov	r1, r3
 80094b4:	4610      	mov	r0, r2
 80094b6:	f000 fae8 	bl	8009a8a <TIM_ITRx_SetConfig>
      break;
 80094ba:	e002      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80094bc:	bf00      	nop
 80094be:	e000      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80094c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a40      	ldr	r2, [pc, #256]	; (8009640 <TIM_Base_SetConfig+0x114>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d013      	beq.n	800956c <TIM_Base_SetConfig+0x40>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800954a:	d00f      	beq.n	800956c <TIM_Base_SetConfig+0x40>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a3d      	ldr	r2, [pc, #244]	; (8009644 <TIM_Base_SetConfig+0x118>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d00b      	beq.n	800956c <TIM_Base_SetConfig+0x40>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a3c      	ldr	r2, [pc, #240]	; (8009648 <TIM_Base_SetConfig+0x11c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d007      	beq.n	800956c <TIM_Base_SetConfig+0x40>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a3b      	ldr	r2, [pc, #236]	; (800964c <TIM_Base_SetConfig+0x120>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d003      	beq.n	800956c <TIM_Base_SetConfig+0x40>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a3a      	ldr	r2, [pc, #232]	; (8009650 <TIM_Base_SetConfig+0x124>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d108      	bne.n	800957e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	4313      	orrs	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a2f      	ldr	r2, [pc, #188]	; (8009640 <TIM_Base_SetConfig+0x114>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d02b      	beq.n	80095de <TIM_Base_SetConfig+0xb2>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800958c:	d027      	beq.n	80095de <TIM_Base_SetConfig+0xb2>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a2c      	ldr	r2, [pc, #176]	; (8009644 <TIM_Base_SetConfig+0x118>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d023      	beq.n	80095de <TIM_Base_SetConfig+0xb2>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a2b      	ldr	r2, [pc, #172]	; (8009648 <TIM_Base_SetConfig+0x11c>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d01f      	beq.n	80095de <TIM_Base_SetConfig+0xb2>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a2a      	ldr	r2, [pc, #168]	; (800964c <TIM_Base_SetConfig+0x120>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d01b      	beq.n	80095de <TIM_Base_SetConfig+0xb2>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a29      	ldr	r2, [pc, #164]	; (8009650 <TIM_Base_SetConfig+0x124>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d017      	beq.n	80095de <TIM_Base_SetConfig+0xb2>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4a28      	ldr	r2, [pc, #160]	; (8009654 <TIM_Base_SetConfig+0x128>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d013      	beq.n	80095de <TIM_Base_SetConfig+0xb2>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a27      	ldr	r2, [pc, #156]	; (8009658 <TIM_Base_SetConfig+0x12c>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d00f      	beq.n	80095de <TIM_Base_SetConfig+0xb2>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a26      	ldr	r2, [pc, #152]	; (800965c <TIM_Base_SetConfig+0x130>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d00b      	beq.n	80095de <TIM_Base_SetConfig+0xb2>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a25      	ldr	r2, [pc, #148]	; (8009660 <TIM_Base_SetConfig+0x134>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d007      	beq.n	80095de <TIM_Base_SetConfig+0xb2>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a24      	ldr	r2, [pc, #144]	; (8009664 <TIM_Base_SetConfig+0x138>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d003      	beq.n	80095de <TIM_Base_SetConfig+0xb2>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a23      	ldr	r2, [pc, #140]	; (8009668 <TIM_Base_SetConfig+0x13c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d108      	bne.n	80095f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	689a      	ldr	r2, [r3, #8]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a0a      	ldr	r2, [pc, #40]	; (8009640 <TIM_Base_SetConfig+0x114>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d003      	beq.n	8009624 <TIM_Base_SetConfig+0xf8>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a0c      	ldr	r2, [pc, #48]	; (8009650 <TIM_Base_SetConfig+0x124>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d103      	bne.n	800962c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	691a      	ldr	r2, [r3, #16]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	615a      	str	r2, [r3, #20]
}
 8009632:	bf00      	nop
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	40010000 	.word	0x40010000
 8009644:	40000400 	.word	0x40000400
 8009648:	40000800 	.word	0x40000800
 800964c:	40000c00 	.word	0x40000c00
 8009650:	40010400 	.word	0x40010400
 8009654:	40014000 	.word	0x40014000
 8009658:	40014400 	.word	0x40014400
 800965c:	40014800 	.word	0x40014800
 8009660:	40001800 	.word	0x40001800
 8009664:	40001c00 	.word	0x40001c00
 8009668:	40002000 	.word	0x40002000

0800966c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800966c:	b480      	push	{r7}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	f023 0201 	bic.w	r2, r3, #1
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800969a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 0303 	bic.w	r3, r3, #3
 80096a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f023 0302 	bic.w	r3, r3, #2
 80096b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	4313      	orrs	r3, r2
 80096be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a20      	ldr	r2, [pc, #128]	; (8009744 <TIM_OC1_SetConfig+0xd8>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d003      	beq.n	80096d0 <TIM_OC1_SetConfig+0x64>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <TIM_OC1_SetConfig+0xdc>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d10c      	bne.n	80096ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	f023 0308 	bic.w	r3, r3, #8
 80096d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	4313      	orrs	r3, r2
 80096e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f023 0304 	bic.w	r3, r3, #4
 80096e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a15      	ldr	r2, [pc, #84]	; (8009744 <TIM_OC1_SetConfig+0xd8>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d003      	beq.n	80096fa <TIM_OC1_SetConfig+0x8e>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a14      	ldr	r2, [pc, #80]	; (8009748 <TIM_OC1_SetConfig+0xdc>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d111      	bne.n	800971e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	4313      	orrs	r3, r2
 8009712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	4313      	orrs	r3, r2
 800971c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	621a      	str	r2, [r3, #32]
}
 8009738:	bf00      	nop
 800973a:	371c      	adds	r7, #28
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	40010000 	.word	0x40010000
 8009748:	40010400 	.word	0x40010400

0800974c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800974c:	b480      	push	{r7}
 800974e:	b087      	sub	sp, #28
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	f023 0210 	bic.w	r2, r3, #16
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800977a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	021b      	lsls	r3, r3, #8
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	4313      	orrs	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	f023 0320 	bic.w	r3, r3, #32
 8009796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	011b      	lsls	r3, r3, #4
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a22      	ldr	r2, [pc, #136]	; (8009830 <TIM_OC2_SetConfig+0xe4>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d003      	beq.n	80097b4 <TIM_OC2_SetConfig+0x68>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a21      	ldr	r2, [pc, #132]	; (8009834 <TIM_OC2_SetConfig+0xe8>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d10d      	bne.n	80097d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	011b      	lsls	r3, r3, #4
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a17      	ldr	r2, [pc, #92]	; (8009830 <TIM_OC2_SetConfig+0xe4>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d003      	beq.n	80097e0 <TIM_OC2_SetConfig+0x94>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a16      	ldr	r2, [pc, #88]	; (8009834 <TIM_OC2_SetConfig+0xe8>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d113      	bne.n	8009808 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	4313      	orrs	r3, r2
 8009806:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	621a      	str	r2, [r3, #32]
}
 8009822:	bf00      	nop
 8009824:	371c      	adds	r7, #28
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	40010000 	.word	0x40010000
 8009834:	40010400 	.word	0x40010400

08009838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f023 0303 	bic.w	r3, r3, #3
 800986e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	4313      	orrs	r3, r2
 8009878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	021b      	lsls	r3, r3, #8
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	4313      	orrs	r3, r2
 800988c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a21      	ldr	r2, [pc, #132]	; (8009918 <TIM_OC3_SetConfig+0xe0>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d003      	beq.n	800989e <TIM_OC3_SetConfig+0x66>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a20      	ldr	r2, [pc, #128]	; (800991c <TIM_OC3_SetConfig+0xe4>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d10d      	bne.n	80098ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	021b      	lsls	r3, r3, #8
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a16      	ldr	r2, [pc, #88]	; (8009918 <TIM_OC3_SetConfig+0xe0>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d003      	beq.n	80098ca <TIM_OC3_SetConfig+0x92>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a15      	ldr	r2, [pc, #84]	; (800991c <TIM_OC3_SetConfig+0xe4>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d113      	bne.n	80098f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	011b      	lsls	r3, r3, #4
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	011b      	lsls	r3, r3, #4
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	685a      	ldr	r2, [r3, #4]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	621a      	str	r2, [r3, #32]
}
 800990c:	bf00      	nop
 800990e:	371c      	adds	r7, #28
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	40010000 	.word	0x40010000
 800991c:	40010400 	.word	0x40010400

08009920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800994e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	021b      	lsls	r3, r3, #8
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4313      	orrs	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800996a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	031b      	lsls	r3, r3, #12
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	4313      	orrs	r3, r2
 8009976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a12      	ldr	r2, [pc, #72]	; (80099c4 <TIM_OC4_SetConfig+0xa4>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d003      	beq.n	8009988 <TIM_OC4_SetConfig+0x68>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a11      	ldr	r2, [pc, #68]	; (80099c8 <TIM_OC4_SetConfig+0xa8>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d109      	bne.n	800999c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800998e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	019b      	lsls	r3, r3, #6
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	4313      	orrs	r3, r2
 800999a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	621a      	str	r2, [r3, #32]
}
 80099b6:	bf00      	nop
 80099b8:	371c      	adds	r7, #28
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	40010000 	.word	0x40010000
 80099c8:	40010400 	.word	0x40010400

080099cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	f023 0201 	bic.w	r2, r3, #1
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	011b      	lsls	r3, r3, #4
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f023 030a 	bic.w	r3, r3, #10
 8009a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	621a      	str	r2, [r3, #32]
}
 8009a1e:	bf00      	nop
 8009a20:	371c      	adds	r7, #28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr

08009a2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b087      	sub	sp, #28
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	60f8      	str	r0, [r7, #12]
 8009a32:	60b9      	str	r1, [r7, #8]
 8009a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	f023 0210 	bic.w	r2, r3, #16
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6a1b      	ldr	r3, [r3, #32]
 8009a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	031b      	lsls	r3, r3, #12
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	011b      	lsls	r3, r3, #4
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	621a      	str	r2, [r3, #32]
}
 8009a7e:	bf00      	nop
 8009a80:	371c      	adds	r7, #28
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b085      	sub	sp, #20
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	f043 0307 	orr.w	r3, r3, #7
 8009aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	609a      	str	r2, [r3, #8]
}
 8009ab4:	bf00      	nop
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	021a      	lsls	r2, r3, #8
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	609a      	str	r2, [r3, #8]
}
 8009af4:	bf00      	nop
 8009af6:	371c      	adds	r7, #28
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	f003 031f 	and.w	r3, r3, #31
 8009b12:	2201      	movs	r2, #1
 8009b14:	fa02 f303 	lsl.w	r3, r2, r3
 8009b18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6a1a      	ldr	r2, [r3, #32]
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	43db      	mvns	r3, r3
 8009b22:	401a      	ands	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6a1a      	ldr	r2, [r3, #32]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	f003 031f 	and.w	r3, r3, #31
 8009b32:	6879      	ldr	r1, [r7, #4]
 8009b34:	fa01 f303 	lsl.w	r3, r1, r3
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	621a      	str	r2, [r3, #32]
}
 8009b3e:	bf00      	nop
 8009b40:	371c      	adds	r7, #28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
	...

08009b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d101      	bne.n	8009b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b60:	2302      	movs	r3, #2
 8009b62:	e05a      	b.n	8009c1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a21      	ldr	r2, [pc, #132]	; (8009c28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d022      	beq.n	8009bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb0:	d01d      	beq.n	8009bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a1d      	ldr	r2, [pc, #116]	; (8009c2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d018      	beq.n	8009bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a1b      	ldr	r2, [pc, #108]	; (8009c30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d013      	beq.n	8009bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a1a      	ldr	r2, [pc, #104]	; (8009c34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d00e      	beq.n	8009bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a18      	ldr	r2, [pc, #96]	; (8009c38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d009      	beq.n	8009bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a17      	ldr	r2, [pc, #92]	; (8009c3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d004      	beq.n	8009bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a15      	ldr	r2, [pc, #84]	; (8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d10c      	bne.n	8009c08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	40010000 	.word	0x40010000
 8009c2c:	40000400 	.word	0x40000400
 8009c30:	40000800 	.word	0x40000800
 8009c34:	40000c00 	.word	0x40000c00
 8009c38:	40010400 	.word	0x40010400
 8009c3c:	40014000 	.word	0x40014000
 8009c40:	40001800 	.word	0x40001800

08009c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e03f      	b.n	8009cfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d106      	bne.n	8009c98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7fa fefc 	bl	8004a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2224      	movs	r2, #36	; 0x24
 8009c9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68da      	ldr	r2, [r3, #12]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fd0f 	bl	800a6d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	691a      	ldr	r2, [r3, #16]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	695a      	ldr	r2, [r3, #20]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009cd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68da      	ldr	r2, [r3, #12]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2220      	movs	r2, #32
 8009cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b088      	sub	sp, #32
 8009d0a:	af02      	add	r7, sp, #8
 8009d0c:	60f8      	str	r0, [r7, #12]
 8009d0e:	60b9      	str	r1, [r7, #8]
 8009d10:	603b      	str	r3, [r7, #0]
 8009d12:	4613      	mov	r3, r2
 8009d14:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b20      	cmp	r3, #32
 8009d24:	f040 8083 	bne.w	8009e2e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d002      	beq.n	8009d34 <HAL_UART_Transmit+0x2e>
 8009d2e:	88fb      	ldrh	r3, [r7, #6]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	e07b      	b.n	8009e30 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d101      	bne.n	8009d46 <HAL_UART_Transmit+0x40>
 8009d42:	2302      	movs	r3, #2
 8009d44:	e074      	b.n	8009e30 <HAL_UART_Transmit+0x12a>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2221      	movs	r2, #33	; 0x21
 8009d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009d5c:	f7fb f8dc 	bl	8004f18 <HAL_GetTick>
 8009d60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	88fa      	ldrh	r2, [r7, #6]
 8009d66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	88fa      	ldrh	r2, [r7, #6]
 8009d6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009d76:	e042      	b.n	8009dfe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d8e:	d122      	bne.n	8009dd6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	2200      	movs	r2, #0
 8009d98:	2180      	movs	r1, #128	; 0x80
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 fb19 	bl	800a3d2 <UART_WaitOnFlagUntilTimeout>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e042      	b.n	8009e30 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dbc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d103      	bne.n	8009dce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	3302      	adds	r3, #2
 8009dca:	60bb      	str	r3, [r7, #8]
 8009dcc:	e017      	b.n	8009dfe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	60bb      	str	r3, [r7, #8]
 8009dd4:	e013      	b.n	8009dfe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2180      	movs	r1, #128	; 0x80
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 faf6 	bl	800a3d2 <UART_WaitOnFlagUntilTimeout>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e01f      	b.n	8009e30 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	60ba      	str	r2, [r7, #8]
 8009df6:	781a      	ldrb	r2, [r3, #0]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1b7      	bne.n	8009d78 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2140      	movs	r1, #64	; 0x40
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f000 fadd 	bl	800a3d2 <UART_WaitOnFlagUntilTimeout>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	e006      	b.n	8009e30 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	e000      	b.n	8009e30 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009e2e:	2302      	movs	r3, #2
  }
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3718      	adds	r7, #24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	4613      	mov	r3, r2
 8009e44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b20      	cmp	r3, #32
 8009e50:	d153      	bne.n	8009efa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <HAL_UART_Transmit_DMA+0x26>
 8009e58:	88fb      	ldrh	r3, [r7, #6]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e04c      	b.n	8009efc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d101      	bne.n	8009e70 <HAL_UART_Transmit_DMA+0x38>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e045      	b.n	8009efc <HAL_UART_Transmit_DMA+0xc4>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	88fa      	ldrh	r2, [r7, #6]
 8009e82:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	88fa      	ldrh	r2, [r7, #6]
 8009e88:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2221      	movs	r2, #33	; 0x21
 8009e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9c:	4a19      	ldr	r2, [pc, #100]	; (8009f04 <HAL_UART_Transmit_DMA+0xcc>)
 8009e9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea4:	4a18      	ldr	r2, [pc, #96]	; (8009f08 <HAL_UART_Transmit_DMA+0xd0>)
 8009ea6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eac:	4a17      	ldr	r2, [pc, #92]	; (8009f0c <HAL_UART_Transmit_DMA+0xd4>)
 8009eae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009eb8:	f107 0308 	add.w	r3, r7, #8
 8009ebc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	6819      	ldr	r1, [r3, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	461a      	mov	r2, r3
 8009ece:	88fb      	ldrh	r3, [r7, #6]
 8009ed0:	f7fb fc84 	bl	80057dc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009edc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	695a      	ldr	r2, [r3, #20]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ef4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e000      	b.n	8009efc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8009efa:	2302      	movs	r3, #2
  }
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3718      	adds	r7, #24
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	0800a24d 	.word	0x0800a24d
 8009f08:	0800a29f 	.word	0x0800a29f
 8009f0c:	0800a33f 	.word	0x0800a33f

08009f10 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b20      	cmp	r3, #32
 8009f28:	d166      	bne.n	8009ff8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <HAL_UART_Receive_DMA+0x26>
 8009f30:	88fb      	ldrh	r3, [r7, #6]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d101      	bne.n	8009f3a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e05f      	b.n	8009ffa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d101      	bne.n	8009f48 <HAL_UART_Receive_DMA+0x38>
 8009f44:	2302      	movs	r3, #2
 8009f46:	e058      	b.n	8009ffa <HAL_UART_Receive_DMA+0xea>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	88fa      	ldrh	r2, [r7, #6]
 8009f5a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2222      	movs	r2, #34	; 0x22
 8009f66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6e:	4a25      	ldr	r2, [pc, #148]	; (800a004 <HAL_UART_Receive_DMA+0xf4>)
 8009f70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f76:	4a24      	ldr	r2, [pc, #144]	; (800a008 <HAL_UART_Receive_DMA+0xf8>)
 8009f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f7e:	4a23      	ldr	r2, [pc, #140]	; (800a00c <HAL_UART_Receive_DMA+0xfc>)
 8009f80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f86:	2200      	movs	r2, #0
 8009f88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8009f8a:	f107 0308 	add.w	r3, r7, #8
 8009f8e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3304      	adds	r3, #4
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	88fb      	ldrh	r3, [r7, #6]
 8009fa2:	f7fb fc1b 	bl	80057dc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	613b      	str	r3, [r7, #16]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	613b      	str	r3, [r7, #16]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	613b      	str	r3, [r7, #16]
 8009fba:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68da      	ldr	r2, [r3, #12]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fd2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	695a      	ldr	r2, [r3, #20]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f042 0201 	orr.w	r2, r2, #1
 8009fe2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	695a      	ldr	r2, [r3, #20]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ff2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	e000      	b.n	8009ffa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009ff8:	2302      	movs	r3, #2
  }
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	0800a2bb 	.word	0x0800a2bb
 800a008:	0800a323 	.word	0x0800a323
 800a00c:	0800a33f 	.word	0x0800a33f

0800a010 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b088      	sub	sp, #32
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a030:	2300      	movs	r3, #0
 800a032:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a034:	2300      	movs	r3, #0
 800a036:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	f003 030f 	and.w	r3, r3, #15
 800a03e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10d      	bne.n	800a062 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	f003 0320 	and.w	r3, r3, #32
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d008      	beq.n	800a062 <HAL_UART_IRQHandler+0x52>
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	f003 0320 	and.w	r3, r3, #32
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fab9 	bl	800a5d2 <UART_Receive_IT>
      return;
 800a060:	e0d0      	b.n	800a204 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 80b0 	beq.w	800a1ca <HAL_UART_IRQHandler+0x1ba>
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	d105      	bne.n	800a080 <HAL_UART_IRQHandler+0x70>
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f000 80a5 	beq.w	800a1ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	f003 0301 	and.w	r3, r3, #1
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00a      	beq.n	800a0a0 <HAL_UART_IRQHandler+0x90>
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a090:	2b00      	cmp	r3, #0
 800a092:	d005      	beq.n	800a0a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a098:	f043 0201 	orr.w	r2, r3, #1
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	f003 0304 	and.w	r3, r3, #4
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00a      	beq.n	800a0c0 <HAL_UART_IRQHandler+0xb0>
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d005      	beq.n	800a0c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b8:	f043 0202 	orr.w	r2, r3, #2
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00a      	beq.n	800a0e0 <HAL_UART_IRQHandler+0xd0>
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f003 0301 	and.w	r3, r3, #1
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d005      	beq.n	800a0e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d8:	f043 0204 	orr.w	r2, r3, #4
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	f003 0308 	and.w	r3, r3, #8
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00f      	beq.n	800a10a <HAL_UART_IRQHandler+0xfa>
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	f003 0320 	and.w	r3, r3, #32
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d104      	bne.n	800a0fe <HAL_UART_IRQHandler+0xee>
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	f003 0301 	and.w	r3, r3, #1
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d005      	beq.n	800a10a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a102:	f043 0208 	orr.w	r2, r3, #8
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d077      	beq.n	800a202 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	f003 0320 	and.w	r3, r3, #32
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d007      	beq.n	800a12c <HAL_UART_IRQHandler+0x11c>
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	f003 0320 	and.w	r3, r3, #32
 800a122:	2b00      	cmp	r3, #0
 800a124:	d002      	beq.n	800a12c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fa53 	bl	800a5d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a136:	2b40      	cmp	r3, #64	; 0x40
 800a138:	bf0c      	ite	eq
 800a13a:	2301      	moveq	r3, #1
 800a13c:	2300      	movne	r3, #0
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a146:	f003 0308 	and.w	r3, r3, #8
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d102      	bne.n	800a154 <HAL_UART_IRQHandler+0x144>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d031      	beq.n	800a1b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f99c 	bl	800a492 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	695b      	ldr	r3, [r3, #20]
 800a160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a164:	2b40      	cmp	r3, #64	; 0x40
 800a166:	d123      	bne.n	800a1b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	695a      	ldr	r2, [r3, #20]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a176:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d013      	beq.n	800a1a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a184:	4a21      	ldr	r2, [pc, #132]	; (800a20c <HAL_UART_IRQHandler+0x1fc>)
 800a186:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fb fb7d 	bl	800588c <HAL_DMA_Abort_IT>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d016      	beq.n	800a1c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1a6:	e00e      	b.n	800a1c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f845 	bl	800a238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1ae:	e00a      	b.n	800a1c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f841 	bl	800a238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1b6:	e006      	b.n	800a1c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f83d 	bl	800a238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a1c4:	e01d      	b.n	800a202 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1c6:	bf00      	nop
    return;
 800a1c8:	e01b      	b.n	800a202 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d008      	beq.n	800a1e6 <HAL_UART_IRQHandler+0x1d6>
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d003      	beq.n	800a1e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f989 	bl	800a4f6 <UART_Transmit_IT>
    return;
 800a1e4:	e00e      	b.n	800a204 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d009      	beq.n	800a204 <HAL_UART_IRQHandler+0x1f4>
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d004      	beq.n	800a204 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f9d1 	bl	800a5a2 <UART_EndTransmit_IT>
    return;
 800a200:	e000      	b.n	800a204 <HAL_UART_IRQHandler+0x1f4>
    return;
 800a202:	bf00      	nop
  }
}
 800a204:	3720      	adds	r7, #32
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	0800a4cf 	.word	0x0800a4cf

0800a210 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a218:	bf00      	nop
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a258:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a264:	2b00      	cmp	r3, #0
 800a266:	d113      	bne.n	800a290 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	695a      	ldr	r2, [r3, #20]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a27c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68da      	ldr	r2, [r3, #12]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a28c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a28e:	e002      	b.n	800a296 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f7f8 fee1 	bl	8003058 <HAL_UART_TxCpltCallback>
}
 800a296:	bf00      	nop
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f7ff ffaf 	bl	800a210 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2b2:	bf00      	nop
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b084      	sub	sp, #16
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d11e      	bne.n	800a314 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68da      	ldr	r2, [r3, #12]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2ea:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	695a      	ldr	r2, [r3, #20]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f022 0201 	bic.w	r2, r2, #1
 800a2fa:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	695a      	ldr	r2, [r3, #20]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a30a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2220      	movs	r2, #32
 800a310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f7f8 fe65 	bl	8002fe4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a31a:	bf00      	nop
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b084      	sub	sp, #16
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f7ff ff77 	bl	800a224 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a336:	bf00      	nop
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a346:	2300      	movs	r3, #0
 800a348:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a35a:	2b80      	cmp	r3, #128	; 0x80
 800a35c:	bf0c      	ite	eq
 800a35e:	2301      	moveq	r3, #1
 800a360:	2300      	movne	r3, #0
 800a362:	b2db      	uxtb	r3, r3
 800a364:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b21      	cmp	r3, #33	; 0x21
 800a370:	d108      	bne.n	800a384 <UART_DMAError+0x46>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d005      	beq.n	800a384 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2200      	movs	r2, #0
 800a37c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a37e:	68b8      	ldr	r0, [r7, #8]
 800a380:	f000 f871 	bl	800a466 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38e:	2b40      	cmp	r3, #64	; 0x40
 800a390:	bf0c      	ite	eq
 800a392:	2301      	moveq	r3, #1
 800a394:	2300      	movne	r3, #0
 800a396:	b2db      	uxtb	r3, r3
 800a398:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b22      	cmp	r3, #34	; 0x22
 800a3a4:	d108      	bne.n	800a3b8 <UART_DMAError+0x7a>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d005      	beq.n	800a3b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a3b2:	68b8      	ldr	r0, [r7, #8]
 800a3b4:	f000 f86d 	bl	800a492 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3bc:	f043 0210 	orr.w	r2, r3, #16
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3c4:	68b8      	ldr	r0, [r7, #8]
 800a3c6:	f7ff ff37 	bl	800a238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3ca:	bf00      	nop
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b084      	sub	sp, #16
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	60f8      	str	r0, [r7, #12]
 800a3da:	60b9      	str	r1, [r7, #8]
 800a3dc:	603b      	str	r3, [r7, #0]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3e2:	e02c      	b.n	800a43e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ea:	d028      	beq.n	800a43e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d007      	beq.n	800a402 <UART_WaitOnFlagUntilTimeout+0x30>
 800a3f2:	f7fa fd91 	bl	8004f18 <HAL_GetTick>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	69ba      	ldr	r2, [r7, #24]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d21d      	bcs.n	800a43e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68da      	ldr	r2, [r3, #12]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a410:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	695a      	ldr	r2, [r3, #20]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f022 0201 	bic.w	r2, r2, #1
 800a420:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2220      	movs	r2, #32
 800a426:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2220      	movs	r2, #32
 800a42e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a43a:	2303      	movs	r3, #3
 800a43c:	e00f      	b.n	800a45e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	4013      	ands	r3, r2
 800a448:	68ba      	ldr	r2, [r7, #8]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	bf0c      	ite	eq
 800a44e:	2301      	moveq	r3, #1
 800a450:	2300      	movne	r3, #0
 800a452:	b2db      	uxtb	r3, r3
 800a454:	461a      	mov	r2, r3
 800a456:	79fb      	ldrb	r3, [r7, #7]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d0c3      	beq.n	800a3e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68da      	ldr	r2, [r3, #12]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a47c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2220      	movs	r2, #32
 800a482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a486:	bf00      	nop
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a492:	b480      	push	{r7}
 800a494:	b083      	sub	sp, #12
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68da      	ldr	r2, [r3, #12]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a4a8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	695a      	ldr	r2, [r3, #20]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f022 0201 	bic.w	r2, r2, #1
 800a4b8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2220      	movs	r2, #32
 800a4be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a4c2:	bf00      	nop
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f7ff fea5 	bl	800a238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ee:	bf00      	nop
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b085      	sub	sp, #20
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b21      	cmp	r3, #33	; 0x21
 800a508:	d144      	bne.n	800a594 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a512:	d11a      	bne.n	800a54a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a1b      	ldr	r3, [r3, #32]
 800a518:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a528:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d105      	bne.n	800a53e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	1c9a      	adds	r2, r3, #2
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	621a      	str	r2, [r3, #32]
 800a53c:	e00e      	b.n	800a55c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	1c5a      	adds	r2, r3, #1
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	621a      	str	r2, [r3, #32]
 800a548:	e008      	b.n	800a55c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a1b      	ldr	r3, [r3, #32]
 800a54e:	1c59      	adds	r1, r3, #1
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	6211      	str	r1, [r2, #32]
 800a554:	781a      	ldrb	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a560:	b29b      	uxth	r3, r3
 800a562:	3b01      	subs	r3, #1
 800a564:	b29b      	uxth	r3, r3
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	4619      	mov	r1, r3
 800a56a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10f      	bne.n	800a590 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68da      	ldr	r2, [r3, #12]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a57e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68da      	ldr	r2, [r3, #12]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a58e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	e000      	b.n	800a596 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a594:	2302      	movs	r3, #2
  }
}
 800a596:	4618      	mov	r0, r3
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68da      	ldr	r2, [r3, #12]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7f8 fd48 	bl	8003058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b22      	cmp	r3, #34	; 0x22
 800a5e4:	d171      	bne.n	800a6ca <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ee:	d123      	bne.n	800a638 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10e      	bne.n	800a61c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	b29b      	uxth	r3, r3
 800a606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a614:	1c9a      	adds	r2, r3, #2
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	629a      	str	r2, [r3, #40]	; 0x28
 800a61a:	e029      	b.n	800a670 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	b29b      	uxth	r3, r3
 800a624:	b2db      	uxtb	r3, r3
 800a626:	b29a      	uxth	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a630:	1c5a      	adds	r2, r3, #1
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	629a      	str	r2, [r3, #40]	; 0x28
 800a636:	e01b      	b.n	800a670 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10a      	bne.n	800a656 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6858      	ldr	r0, [r3, #4]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64a:	1c59      	adds	r1, r3, #1
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	6291      	str	r1, [r2, #40]	; 0x28
 800a650:	b2c2      	uxtb	r2, r0
 800a652:	701a      	strb	r2, [r3, #0]
 800a654:	e00c      	b.n	800a670 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a662:	1c58      	adds	r0, r3, #1
 800a664:	6879      	ldr	r1, [r7, #4]
 800a666:	6288      	str	r0, [r1, #40]	; 0x28
 800a668:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a66c:	b2d2      	uxtb	r2, r2
 800a66e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a674:	b29b      	uxth	r3, r3
 800a676:	3b01      	subs	r3, #1
 800a678:	b29b      	uxth	r3, r3
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	4619      	mov	r1, r3
 800a67e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a680:	2b00      	cmp	r3, #0
 800a682:	d120      	bne.n	800a6c6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68da      	ldr	r2, [r3, #12]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f022 0220 	bic.w	r2, r2, #32
 800a692:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68da      	ldr	r2, [r3, #12]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	695a      	ldr	r2, [r3, #20]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f022 0201 	bic.w	r2, r2, #1
 800a6b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2220      	movs	r2, #32
 800a6b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f7f8 fc91 	bl	8002fe4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	e002      	b.n	800a6cc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e000      	b.n	800a6cc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800a6ca:	2302      	movs	r3, #2
  }
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d8:	b0bd      	sub	sp, #244	; 0xf4
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a6ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6f0:	68d9      	ldr	r1, [r3, #12]
 800a6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	ea40 0301 	orr.w	r3, r0, r1
 800a6fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a6fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a702:	689a      	ldr	r2, [r3, #8]
 800a704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	431a      	orrs	r2, r3
 800a70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	431a      	orrs	r2, r3
 800a714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800a720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a72c:	f021 010c 	bic.w	r1, r1, #12
 800a730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a73a:	430b      	orrs	r3, r1
 800a73c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a73e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a74a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a74e:	6999      	ldr	r1, [r3, #24]
 800a750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	ea40 0301 	orr.w	r3, r0, r1
 800a75a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a766:	f040 81a5 	bne.w	800aab4 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a76a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	4bcd      	ldr	r3, [pc, #820]	; (800aaa8 <UART_SetConfig+0x3d4>)
 800a772:	429a      	cmp	r2, r3
 800a774:	d006      	beq.n	800a784 <UART_SetConfig+0xb0>
 800a776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	4bcb      	ldr	r3, [pc, #812]	; (800aaac <UART_SetConfig+0x3d8>)
 800a77e:	429a      	cmp	r2, r3
 800a780:	f040 80cb 	bne.w	800a91a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a784:	f7fd f9fe 	bl	8007b84 <HAL_RCC_GetPCLK2Freq>
 800a788:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a78c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a790:	461c      	mov	r4, r3
 800a792:	f04f 0500 	mov.w	r5, #0
 800a796:	4622      	mov	r2, r4
 800a798:	462b      	mov	r3, r5
 800a79a:	1891      	adds	r1, r2, r2
 800a79c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800a7a0:	415b      	adcs	r3, r3
 800a7a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a7a6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a7aa:	1912      	adds	r2, r2, r4
 800a7ac:	eb45 0303 	adc.w	r3, r5, r3
 800a7b0:	f04f 0000 	mov.w	r0, #0
 800a7b4:	f04f 0100 	mov.w	r1, #0
 800a7b8:	00d9      	lsls	r1, r3, #3
 800a7ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a7be:	00d0      	lsls	r0, r2, #3
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	1911      	adds	r1, r2, r4
 800a7c6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800a7ca:	416b      	adcs	r3, r5
 800a7cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a7d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f04f 0300 	mov.w	r3, #0
 800a7dc:	1891      	adds	r1, r2, r2
 800a7de:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800a7e2:	415b      	adcs	r3, r3
 800a7e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a7e8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800a7ec:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a7f0:	f7f6 fa6a 	bl	8000cc8 <__aeabi_uldivmod>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4bad      	ldr	r3, [pc, #692]	; (800aab0 <UART_SetConfig+0x3dc>)
 800a7fa:	fba3 2302 	umull	r2, r3, r3, r2
 800a7fe:	095b      	lsrs	r3, r3, #5
 800a800:	011e      	lsls	r6, r3, #4
 800a802:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a806:	461c      	mov	r4, r3
 800a808:	f04f 0500 	mov.w	r5, #0
 800a80c:	4622      	mov	r2, r4
 800a80e:	462b      	mov	r3, r5
 800a810:	1891      	adds	r1, r2, r2
 800a812:	67b9      	str	r1, [r7, #120]	; 0x78
 800a814:	415b      	adcs	r3, r3
 800a816:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a818:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800a81c:	1912      	adds	r2, r2, r4
 800a81e:	eb45 0303 	adc.w	r3, r5, r3
 800a822:	f04f 0000 	mov.w	r0, #0
 800a826:	f04f 0100 	mov.w	r1, #0
 800a82a:	00d9      	lsls	r1, r3, #3
 800a82c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a830:	00d0      	lsls	r0, r2, #3
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	1911      	adds	r1, r2, r4
 800a838:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800a83c:	416b      	adcs	r3, r5
 800a83e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	461a      	mov	r2, r3
 800a84a:	f04f 0300 	mov.w	r3, #0
 800a84e:	1891      	adds	r1, r2, r2
 800a850:	6739      	str	r1, [r7, #112]	; 0x70
 800a852:	415b      	adcs	r3, r3
 800a854:	677b      	str	r3, [r7, #116]	; 0x74
 800a856:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a85a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800a85e:	f7f6 fa33 	bl	8000cc8 <__aeabi_uldivmod>
 800a862:	4602      	mov	r2, r0
 800a864:	460b      	mov	r3, r1
 800a866:	4b92      	ldr	r3, [pc, #584]	; (800aab0 <UART_SetConfig+0x3dc>)
 800a868:	fba3 1302 	umull	r1, r3, r3, r2
 800a86c:	095b      	lsrs	r3, r3, #5
 800a86e:	2164      	movs	r1, #100	; 0x64
 800a870:	fb01 f303 	mul.w	r3, r1, r3
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	00db      	lsls	r3, r3, #3
 800a878:	3332      	adds	r3, #50	; 0x32
 800a87a:	4a8d      	ldr	r2, [pc, #564]	; (800aab0 <UART_SetConfig+0x3dc>)
 800a87c:	fba2 2303 	umull	r2, r3, r2, r3
 800a880:	095b      	lsrs	r3, r3, #5
 800a882:	005b      	lsls	r3, r3, #1
 800a884:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a888:	441e      	add	r6, r3
 800a88a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a88e:	4618      	mov	r0, r3
 800a890:	f04f 0100 	mov.w	r1, #0
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	1894      	adds	r4, r2, r2
 800a89a:	66bc      	str	r4, [r7, #104]	; 0x68
 800a89c:	415b      	adcs	r3, r3
 800a89e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8a0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a8a4:	1812      	adds	r2, r2, r0
 800a8a6:	eb41 0303 	adc.w	r3, r1, r3
 800a8aa:	f04f 0400 	mov.w	r4, #0
 800a8ae:	f04f 0500 	mov.w	r5, #0
 800a8b2:	00dd      	lsls	r5, r3, #3
 800a8b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a8b8:	00d4      	lsls	r4, r2, #3
 800a8ba:	4622      	mov	r2, r4
 800a8bc:	462b      	mov	r3, r5
 800a8be:	1814      	adds	r4, r2, r0
 800a8c0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800a8c4:	414b      	adcs	r3, r1
 800a8c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	f04f 0300 	mov.w	r3, #0
 800a8d6:	1891      	adds	r1, r2, r2
 800a8d8:	6639      	str	r1, [r7, #96]	; 0x60
 800a8da:	415b      	adcs	r3, r3
 800a8dc:	667b      	str	r3, [r7, #100]	; 0x64
 800a8de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800a8e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a8e6:	f7f6 f9ef 	bl	8000cc8 <__aeabi_uldivmod>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4b70      	ldr	r3, [pc, #448]	; (800aab0 <UART_SetConfig+0x3dc>)
 800a8f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a8f4:	095b      	lsrs	r3, r3, #5
 800a8f6:	2164      	movs	r1, #100	; 0x64
 800a8f8:	fb01 f303 	mul.w	r3, r1, r3
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	3332      	adds	r3, #50	; 0x32
 800a902:	4a6b      	ldr	r2, [pc, #428]	; (800aab0 <UART_SetConfig+0x3dc>)
 800a904:	fba2 2303 	umull	r2, r3, r2, r3
 800a908:	095b      	lsrs	r3, r3, #5
 800a90a:	f003 0207 	and.w	r2, r3, #7
 800a90e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4432      	add	r2, r6
 800a916:	609a      	str	r2, [r3, #8]
 800a918:	e26d      	b.n	800adf6 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a91a:	f7fd f91f 	bl	8007b5c <HAL_RCC_GetPCLK1Freq>
 800a91e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a922:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a926:	461c      	mov	r4, r3
 800a928:	f04f 0500 	mov.w	r5, #0
 800a92c:	4622      	mov	r2, r4
 800a92e:	462b      	mov	r3, r5
 800a930:	1891      	adds	r1, r2, r2
 800a932:	65b9      	str	r1, [r7, #88]	; 0x58
 800a934:	415b      	adcs	r3, r3
 800a936:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a938:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a93c:	1912      	adds	r2, r2, r4
 800a93e:	eb45 0303 	adc.w	r3, r5, r3
 800a942:	f04f 0000 	mov.w	r0, #0
 800a946:	f04f 0100 	mov.w	r1, #0
 800a94a:	00d9      	lsls	r1, r3, #3
 800a94c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a950:	00d0      	lsls	r0, r2, #3
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	1911      	adds	r1, r2, r4
 800a958:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800a95c:	416b      	adcs	r3, r5
 800a95e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	461a      	mov	r2, r3
 800a96a:	f04f 0300 	mov.w	r3, #0
 800a96e:	1891      	adds	r1, r2, r2
 800a970:	6539      	str	r1, [r7, #80]	; 0x50
 800a972:	415b      	adcs	r3, r3
 800a974:	657b      	str	r3, [r7, #84]	; 0x54
 800a976:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a97a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800a97e:	f7f6 f9a3 	bl	8000cc8 <__aeabi_uldivmod>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4b4a      	ldr	r3, [pc, #296]	; (800aab0 <UART_SetConfig+0x3dc>)
 800a988:	fba3 2302 	umull	r2, r3, r3, r2
 800a98c:	095b      	lsrs	r3, r3, #5
 800a98e:	011e      	lsls	r6, r3, #4
 800a990:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a994:	461c      	mov	r4, r3
 800a996:	f04f 0500 	mov.w	r5, #0
 800a99a:	4622      	mov	r2, r4
 800a99c:	462b      	mov	r3, r5
 800a99e:	1891      	adds	r1, r2, r2
 800a9a0:	64b9      	str	r1, [r7, #72]	; 0x48
 800a9a2:	415b      	adcs	r3, r3
 800a9a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a9aa:	1912      	adds	r2, r2, r4
 800a9ac:	eb45 0303 	adc.w	r3, r5, r3
 800a9b0:	f04f 0000 	mov.w	r0, #0
 800a9b4:	f04f 0100 	mov.w	r1, #0
 800a9b8:	00d9      	lsls	r1, r3, #3
 800a9ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a9be:	00d0      	lsls	r0, r2, #3
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	1911      	adds	r1, r2, r4
 800a9c6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800a9ca:	416b      	adcs	r3, r5
 800a9cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a9d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f04f 0300 	mov.w	r3, #0
 800a9dc:	1891      	adds	r1, r2, r2
 800a9de:	6439      	str	r1, [r7, #64]	; 0x40
 800a9e0:	415b      	adcs	r3, r3
 800a9e2:	647b      	str	r3, [r7, #68]	; 0x44
 800a9e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a9e8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800a9ec:	f7f6 f96c 	bl	8000cc8 <__aeabi_uldivmod>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	4b2e      	ldr	r3, [pc, #184]	; (800aab0 <UART_SetConfig+0x3dc>)
 800a9f6:	fba3 1302 	umull	r1, r3, r3, r2
 800a9fa:	095b      	lsrs	r3, r3, #5
 800a9fc:	2164      	movs	r1, #100	; 0x64
 800a9fe:	fb01 f303 	mul.w	r3, r1, r3
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	00db      	lsls	r3, r3, #3
 800aa06:	3332      	adds	r3, #50	; 0x32
 800aa08:	4a29      	ldr	r2, [pc, #164]	; (800aab0 <UART_SetConfig+0x3dc>)
 800aa0a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa0e:	095b      	lsrs	r3, r3, #5
 800aa10:	005b      	lsls	r3, r3, #1
 800aa12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aa16:	441e      	add	r6, r3
 800aa18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f04f 0100 	mov.w	r1, #0
 800aa22:	4602      	mov	r2, r0
 800aa24:	460b      	mov	r3, r1
 800aa26:	1894      	adds	r4, r2, r2
 800aa28:	63bc      	str	r4, [r7, #56]	; 0x38
 800aa2a:	415b      	adcs	r3, r3
 800aa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa2e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aa32:	1812      	adds	r2, r2, r0
 800aa34:	eb41 0303 	adc.w	r3, r1, r3
 800aa38:	f04f 0400 	mov.w	r4, #0
 800aa3c:	f04f 0500 	mov.w	r5, #0
 800aa40:	00dd      	lsls	r5, r3, #3
 800aa42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aa46:	00d4      	lsls	r4, r2, #3
 800aa48:	4622      	mov	r2, r4
 800aa4a:	462b      	mov	r3, r5
 800aa4c:	1814      	adds	r4, r2, r0
 800aa4e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800aa52:	414b      	adcs	r3, r1
 800aa54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	461a      	mov	r2, r3
 800aa60:	f04f 0300 	mov.w	r3, #0
 800aa64:	1891      	adds	r1, r2, r2
 800aa66:	6339      	str	r1, [r7, #48]	; 0x30
 800aa68:	415b      	adcs	r3, r3
 800aa6a:	637b      	str	r3, [r7, #52]	; 0x34
 800aa6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800aa70:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aa74:	f7f6 f928 	bl	8000cc8 <__aeabi_uldivmod>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4b0c      	ldr	r3, [pc, #48]	; (800aab0 <UART_SetConfig+0x3dc>)
 800aa7e:	fba3 1302 	umull	r1, r3, r3, r2
 800aa82:	095b      	lsrs	r3, r3, #5
 800aa84:	2164      	movs	r1, #100	; 0x64
 800aa86:	fb01 f303 	mul.w	r3, r1, r3
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	00db      	lsls	r3, r3, #3
 800aa8e:	3332      	adds	r3, #50	; 0x32
 800aa90:	4a07      	ldr	r2, [pc, #28]	; (800aab0 <UART_SetConfig+0x3dc>)
 800aa92:	fba2 2303 	umull	r2, r3, r2, r3
 800aa96:	095b      	lsrs	r3, r3, #5
 800aa98:	f003 0207 	and.w	r2, r3, #7
 800aa9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4432      	add	r2, r6
 800aaa4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800aaa6:	e1a6      	b.n	800adf6 <UART_SetConfig+0x722>
 800aaa8:	40011000 	.word	0x40011000
 800aaac:	40011400 	.word	0x40011400
 800aab0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	4bd1      	ldr	r3, [pc, #836]	; (800ae00 <UART_SetConfig+0x72c>)
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d006      	beq.n	800aace <UART_SetConfig+0x3fa>
 800aac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	4bcf      	ldr	r3, [pc, #828]	; (800ae04 <UART_SetConfig+0x730>)
 800aac8:	429a      	cmp	r2, r3
 800aaca:	f040 80ca 	bne.w	800ac62 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800aace:	f7fd f859 	bl	8007b84 <HAL_RCC_GetPCLK2Freq>
 800aad2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aad6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aada:	461c      	mov	r4, r3
 800aadc:	f04f 0500 	mov.w	r5, #0
 800aae0:	4622      	mov	r2, r4
 800aae2:	462b      	mov	r3, r5
 800aae4:	1891      	adds	r1, r2, r2
 800aae6:	62b9      	str	r1, [r7, #40]	; 0x28
 800aae8:	415b      	adcs	r3, r3
 800aaea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aaf0:	1912      	adds	r2, r2, r4
 800aaf2:	eb45 0303 	adc.w	r3, r5, r3
 800aaf6:	f04f 0000 	mov.w	r0, #0
 800aafa:	f04f 0100 	mov.w	r1, #0
 800aafe:	00d9      	lsls	r1, r3, #3
 800ab00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab04:	00d0      	lsls	r0, r2, #3
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	eb12 0a04 	adds.w	sl, r2, r4
 800ab0e:	eb43 0b05 	adc.w	fp, r3, r5
 800ab12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f04f 0100 	mov.w	r1, #0
 800ab1e:	f04f 0200 	mov.w	r2, #0
 800ab22:	f04f 0300 	mov.w	r3, #0
 800ab26:	008b      	lsls	r3, r1, #2
 800ab28:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ab2c:	0082      	lsls	r2, r0, #2
 800ab2e:	4650      	mov	r0, sl
 800ab30:	4659      	mov	r1, fp
 800ab32:	f7f6 f8c9 	bl	8000cc8 <__aeabi_uldivmod>
 800ab36:	4602      	mov	r2, r0
 800ab38:	460b      	mov	r3, r1
 800ab3a:	4bb3      	ldr	r3, [pc, #716]	; (800ae08 <UART_SetConfig+0x734>)
 800ab3c:	fba3 2302 	umull	r2, r3, r3, r2
 800ab40:	095b      	lsrs	r3, r3, #5
 800ab42:	011e      	lsls	r6, r3, #4
 800ab44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f04f 0100 	mov.w	r1, #0
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	1894      	adds	r4, r2, r2
 800ab54:	623c      	str	r4, [r7, #32]
 800ab56:	415b      	adcs	r3, r3
 800ab58:	627b      	str	r3, [r7, #36]	; 0x24
 800ab5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ab5e:	1812      	adds	r2, r2, r0
 800ab60:	eb41 0303 	adc.w	r3, r1, r3
 800ab64:	f04f 0400 	mov.w	r4, #0
 800ab68:	f04f 0500 	mov.w	r5, #0
 800ab6c:	00dd      	lsls	r5, r3, #3
 800ab6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ab72:	00d4      	lsls	r4, r2, #3
 800ab74:	4622      	mov	r2, r4
 800ab76:	462b      	mov	r3, r5
 800ab78:	1814      	adds	r4, r2, r0
 800ab7a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800ab7e:	414b      	adcs	r3, r1
 800ab80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f04f 0100 	mov.w	r1, #0
 800ab90:	f04f 0200 	mov.w	r2, #0
 800ab94:	f04f 0300 	mov.w	r3, #0
 800ab98:	008b      	lsls	r3, r1, #2
 800ab9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ab9e:	0082      	lsls	r2, r0, #2
 800aba0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800aba4:	f7f6 f890 	bl	8000cc8 <__aeabi_uldivmod>
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	4b96      	ldr	r3, [pc, #600]	; (800ae08 <UART_SetConfig+0x734>)
 800abae:	fba3 1302 	umull	r1, r3, r3, r2
 800abb2:	095b      	lsrs	r3, r3, #5
 800abb4:	2164      	movs	r1, #100	; 0x64
 800abb6:	fb01 f303 	mul.w	r3, r1, r3
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	011b      	lsls	r3, r3, #4
 800abbe:	3332      	adds	r3, #50	; 0x32
 800abc0:	4a91      	ldr	r2, [pc, #580]	; (800ae08 <UART_SetConfig+0x734>)
 800abc2:	fba2 2303 	umull	r2, r3, r2, r3
 800abc6:	095b      	lsrs	r3, r3, #5
 800abc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abcc:	441e      	add	r6, r3
 800abce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800abd2:	4618      	mov	r0, r3
 800abd4:	f04f 0100 	mov.w	r1, #0
 800abd8:	4602      	mov	r2, r0
 800abda:	460b      	mov	r3, r1
 800abdc:	1894      	adds	r4, r2, r2
 800abde:	61bc      	str	r4, [r7, #24]
 800abe0:	415b      	adcs	r3, r3
 800abe2:	61fb      	str	r3, [r7, #28]
 800abe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800abe8:	1812      	adds	r2, r2, r0
 800abea:	eb41 0303 	adc.w	r3, r1, r3
 800abee:	f04f 0400 	mov.w	r4, #0
 800abf2:	f04f 0500 	mov.w	r5, #0
 800abf6:	00dd      	lsls	r5, r3, #3
 800abf8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800abfc:	00d4      	lsls	r4, r2, #3
 800abfe:	4622      	mov	r2, r4
 800ac00:	462b      	mov	r3, r5
 800ac02:	1814      	adds	r4, r2, r0
 800ac04:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800ac08:	414b      	adcs	r3, r1
 800ac0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ac0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f04f 0100 	mov.w	r1, #0
 800ac1a:	f04f 0200 	mov.w	r2, #0
 800ac1e:	f04f 0300 	mov.w	r3, #0
 800ac22:	008b      	lsls	r3, r1, #2
 800ac24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ac28:	0082      	lsls	r2, r0, #2
 800ac2a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800ac2e:	f7f6 f84b 	bl	8000cc8 <__aeabi_uldivmod>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4b74      	ldr	r3, [pc, #464]	; (800ae08 <UART_SetConfig+0x734>)
 800ac38:	fba3 1302 	umull	r1, r3, r3, r2
 800ac3c:	095b      	lsrs	r3, r3, #5
 800ac3e:	2164      	movs	r1, #100	; 0x64
 800ac40:	fb01 f303 	mul.w	r3, r1, r3
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	3332      	adds	r3, #50	; 0x32
 800ac4a:	4a6f      	ldr	r2, [pc, #444]	; (800ae08 <UART_SetConfig+0x734>)
 800ac4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac50:	095b      	lsrs	r3, r3, #5
 800ac52:	f003 020f 	and.w	r2, r3, #15
 800ac56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4432      	add	r2, r6
 800ac5e:	609a      	str	r2, [r3, #8]
 800ac60:	e0c9      	b.n	800adf6 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac62:	f7fc ff7b 	bl	8007b5c <HAL_RCC_GetPCLK1Freq>
 800ac66:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac6e:	461c      	mov	r4, r3
 800ac70:	f04f 0500 	mov.w	r5, #0
 800ac74:	4622      	mov	r2, r4
 800ac76:	462b      	mov	r3, r5
 800ac78:	1891      	adds	r1, r2, r2
 800ac7a:	6139      	str	r1, [r7, #16]
 800ac7c:	415b      	adcs	r3, r3
 800ac7e:	617b      	str	r3, [r7, #20]
 800ac80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ac84:	1912      	adds	r2, r2, r4
 800ac86:	eb45 0303 	adc.w	r3, r5, r3
 800ac8a:	f04f 0000 	mov.w	r0, #0
 800ac8e:	f04f 0100 	mov.w	r1, #0
 800ac92:	00d9      	lsls	r1, r3, #3
 800ac94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ac98:	00d0      	lsls	r0, r2, #3
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	eb12 0804 	adds.w	r8, r2, r4
 800aca2:	eb43 0905 	adc.w	r9, r3, r5
 800aca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	4618      	mov	r0, r3
 800acae:	f04f 0100 	mov.w	r1, #0
 800acb2:	f04f 0200 	mov.w	r2, #0
 800acb6:	f04f 0300 	mov.w	r3, #0
 800acba:	008b      	lsls	r3, r1, #2
 800acbc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800acc0:	0082      	lsls	r2, r0, #2
 800acc2:	4640      	mov	r0, r8
 800acc4:	4649      	mov	r1, r9
 800acc6:	f7f5 ffff 	bl	8000cc8 <__aeabi_uldivmod>
 800acca:	4602      	mov	r2, r0
 800accc:	460b      	mov	r3, r1
 800acce:	4b4e      	ldr	r3, [pc, #312]	; (800ae08 <UART_SetConfig+0x734>)
 800acd0:	fba3 2302 	umull	r2, r3, r3, r2
 800acd4:	095b      	lsrs	r3, r3, #5
 800acd6:	011e      	lsls	r6, r3, #4
 800acd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800acdc:	4618      	mov	r0, r3
 800acde:	f04f 0100 	mov.w	r1, #0
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	1894      	adds	r4, r2, r2
 800ace8:	60bc      	str	r4, [r7, #8]
 800acea:	415b      	adcs	r3, r3
 800acec:	60fb      	str	r3, [r7, #12]
 800acee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800acf2:	1812      	adds	r2, r2, r0
 800acf4:	eb41 0303 	adc.w	r3, r1, r3
 800acf8:	f04f 0400 	mov.w	r4, #0
 800acfc:	f04f 0500 	mov.w	r5, #0
 800ad00:	00dd      	lsls	r5, r3, #3
 800ad02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ad06:	00d4      	lsls	r4, r2, #3
 800ad08:	4622      	mov	r2, r4
 800ad0a:	462b      	mov	r3, r5
 800ad0c:	1814      	adds	r4, r2, r0
 800ad0e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800ad12:	414b      	adcs	r3, r1
 800ad14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f04f 0100 	mov.w	r1, #0
 800ad24:	f04f 0200 	mov.w	r2, #0
 800ad28:	f04f 0300 	mov.w	r3, #0
 800ad2c:	008b      	lsls	r3, r1, #2
 800ad2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ad32:	0082      	lsls	r2, r0, #2
 800ad34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ad38:	f7f5 ffc6 	bl	8000cc8 <__aeabi_uldivmod>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	4b31      	ldr	r3, [pc, #196]	; (800ae08 <UART_SetConfig+0x734>)
 800ad42:	fba3 1302 	umull	r1, r3, r3, r2
 800ad46:	095b      	lsrs	r3, r3, #5
 800ad48:	2164      	movs	r1, #100	; 0x64
 800ad4a:	fb01 f303 	mul.w	r3, r1, r3
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	011b      	lsls	r3, r3, #4
 800ad52:	3332      	adds	r3, #50	; 0x32
 800ad54:	4a2c      	ldr	r2, [pc, #176]	; (800ae08 <UART_SetConfig+0x734>)
 800ad56:	fba2 2303 	umull	r2, r3, r2, r3
 800ad5a:	095b      	lsrs	r3, r3, #5
 800ad5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad60:	441e      	add	r6, r3
 800ad62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad66:	4618      	mov	r0, r3
 800ad68:	f04f 0100 	mov.w	r1, #0
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	1894      	adds	r4, r2, r2
 800ad72:	603c      	str	r4, [r7, #0]
 800ad74:	415b      	adcs	r3, r3
 800ad76:	607b      	str	r3, [r7, #4]
 800ad78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad7c:	1812      	adds	r2, r2, r0
 800ad7e:	eb41 0303 	adc.w	r3, r1, r3
 800ad82:	f04f 0400 	mov.w	r4, #0
 800ad86:	f04f 0500 	mov.w	r5, #0
 800ad8a:	00dd      	lsls	r5, r3, #3
 800ad8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ad90:	00d4      	lsls	r4, r2, #3
 800ad92:	4622      	mov	r2, r4
 800ad94:	462b      	mov	r3, r5
 800ad96:	1814      	adds	r4, r2, r0
 800ad98:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800ad9c:	414b      	adcs	r3, r1
 800ad9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ada2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f04f 0100 	mov.w	r1, #0
 800adae:	f04f 0200 	mov.w	r2, #0
 800adb2:	f04f 0300 	mov.w	r3, #0
 800adb6:	008b      	lsls	r3, r1, #2
 800adb8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800adbc:	0082      	lsls	r2, r0, #2
 800adbe:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800adc2:	f7f5 ff81 	bl	8000cc8 <__aeabi_uldivmod>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	4b0f      	ldr	r3, [pc, #60]	; (800ae08 <UART_SetConfig+0x734>)
 800adcc:	fba3 1302 	umull	r1, r3, r3, r2
 800add0:	095b      	lsrs	r3, r3, #5
 800add2:	2164      	movs	r1, #100	; 0x64
 800add4:	fb01 f303 	mul.w	r3, r1, r3
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	011b      	lsls	r3, r3, #4
 800addc:	3332      	adds	r3, #50	; 0x32
 800adde:	4a0a      	ldr	r2, [pc, #40]	; (800ae08 <UART_SetConfig+0x734>)
 800ade0:	fba2 2303 	umull	r2, r3, r2, r3
 800ade4:	095b      	lsrs	r3, r3, #5
 800ade6:	f003 020f 	and.w	r2, r3, #15
 800adea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4432      	add	r2, r6
 800adf2:	609a      	str	r2, [r3, #8]
}
 800adf4:	e7ff      	b.n	800adf6 <UART_SetConfig+0x722>
 800adf6:	bf00      	nop
 800adf8:	37f4      	adds	r7, #244	; 0xf4
 800adfa:	46bd      	mov	sp, r7
 800adfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae00:	40011000 	.word	0x40011000
 800ae04:	40011400 	.word	0x40011400
 800ae08:	51eb851f 	.word	0x51eb851f

0800ae0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ae10:	4904      	ldr	r1, [pc, #16]	; (800ae24 <MX_FATFS_Init+0x18>)
 800ae12:	4805      	ldr	r0, [pc, #20]	; (800ae28 <MX_FATFS_Init+0x1c>)
 800ae14:	f003 fa92 	bl	800e33c <FATFS_LinkDriver>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	4b03      	ldr	r3, [pc, #12]	; (800ae2c <MX_FATFS_Init+0x20>)
 800ae1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ae20:	bf00      	nop
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	2000141c 	.word	0x2000141c
 800ae28:	20000010 	.word	0x20000010
 800ae2c:	20001420 	.word	0x20001420

0800ae30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ae30:	b480      	push	{r7}
 800ae32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ae34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	4603      	mov	r3, r0
 800ae48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800ae4a:	79fb      	ldrb	r3, [r7, #7]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 f9dd 	bl	800b20c <USER_SPI_initialize>
 800ae52:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	4603      	mov	r3, r0
 800ae64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800ae66:	79fb      	ldrb	r3, [r7, #7]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 fab9 	bl	800b3e0 <USER_SPI_status>
 800ae6e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60b9      	str	r1, [r7, #8]
 800ae80:	607a      	str	r2, [r7, #4]
 800ae82:	603b      	str	r3, [r7, #0]
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800ae88:	7bf8      	ldrb	r0, [r7, #15]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	68b9      	ldr	r1, [r7, #8]
 800ae90:	f000 fabc 	bl	800b40c <USER_SPI_read>
 800ae94:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b084      	sub	sp, #16
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	603b      	str	r3, [r7, #0]
 800aeaa:	4603      	mov	r3, r0
 800aeac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800aeae:	7bf8      	ldrb	r0, [r7, #15]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	68b9      	ldr	r1, [r7, #8]
 800aeb6:	f000 fb0f 	bl	800b4d8 <USER_SPI_write>
 800aeba:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	603a      	str	r2, [r7, #0]
 800aece:	71fb      	strb	r3, [r7, #7]
 800aed0:	460b      	mov	r3, r1
 800aed2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800aed4:	79b9      	ldrb	r1, [r7, #6]
 800aed6:	79fb      	ldrb	r3, [r7, #7]
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 fb78 	bl	800b5d0 <USER_SPI_ioctl>
 800aee0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
	...

0800aeec <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800aef4:	f7fa f810 	bl	8004f18 <HAL_GetTick>
 800aef8:	4603      	mov	r3, r0
 800aefa:	4a04      	ldr	r2, [pc, #16]	; (800af0c <SPI_Timer_On+0x20>)
 800aefc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800aefe:	4a04      	ldr	r2, [pc, #16]	; (800af10 <SPI_Timer_On+0x24>)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6013      	str	r3, [r2, #0]
}
 800af04:	bf00      	nop
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20001884 	.word	0x20001884
 800af10:	20001888 	.word	0x20001888

0800af14 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800af14:	b580      	push	{r7, lr}
 800af16:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800af18:	f7f9 fffe 	bl	8004f18 <HAL_GetTick>
 800af1c:	4602      	mov	r2, r0
 800af1e:	4b06      	ldr	r3, [pc, #24]	; (800af38 <SPI_Timer_Status+0x24>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	1ad2      	subs	r2, r2, r3
 800af24:	4b05      	ldr	r3, [pc, #20]	; (800af3c <SPI_Timer_Status+0x28>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	429a      	cmp	r2, r3
 800af2a:	bf34      	ite	cc
 800af2c:	2301      	movcc	r3, #1
 800af2e:	2300      	movcs	r3, #0
 800af30:	b2db      	uxtb	r3, r3
}
 800af32:	4618      	mov	r0, r3
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	20001884 	.word	0x20001884
 800af3c:	20001888 	.word	0x20001888

0800af40 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af02      	add	r7, sp, #8
 800af46:	4603      	mov	r3, r0
 800af48:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800af4a:	f107 020f 	add.w	r2, r7, #15
 800af4e:	1df9      	adds	r1, r7, #7
 800af50:	2332      	movs	r3, #50	; 0x32
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	2301      	movs	r3, #1
 800af56:	4804      	ldr	r0, [pc, #16]	; (800af68 <xchg_spi+0x28>)
 800af58:	f7fd fc85 	bl	8008866 <HAL_SPI_TransmitReceive>
    return rxDat;
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	200010e0 	.word	0x200010e0

0800af6c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800af6c:	b590      	push	{r4, r7, lr}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800af76:	2300      	movs	r3, #0
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	e00a      	b.n	800af92 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	18d4      	adds	r4, r2, r3
 800af82:	20ff      	movs	r0, #255	; 0xff
 800af84:	f7ff ffdc 	bl	800af40 <xchg_spi>
 800af88:	4603      	mov	r3, r0
 800af8a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	3301      	adds	r3, #1
 800af90:	60fb      	str	r3, [r7, #12]
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	429a      	cmp	r2, r3
 800af98:	d3f0      	bcc.n	800af7c <rcvr_spi_multi+0x10>
	}
}
 800af9a:	bf00      	nop
 800af9c:	bf00      	nop
 800af9e:	3714      	adds	r7, #20
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd90      	pop	{r4, r7, pc}

0800afa4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800afae:	2300      	movs	r3, #0
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	e009      	b.n	800afc8 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	4413      	add	r3, r2
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff ffbf 	bl	800af40 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	3301      	adds	r3, #1
 800afc6:	60fb      	str	r3, [r7, #12]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d3f1      	bcc.n	800afb4 <xmit_spi_multi+0x10>
	}
}
 800afd0:	bf00      	nop
 800afd2:	bf00      	nop
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b086      	sub	sp, #24
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800afe2:	f7f9 ff99 	bl	8004f18 <HAL_GetTick>
 800afe6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800afec:	20ff      	movs	r0, #255	; 0xff
 800afee:	f7ff ffa7 	bl	800af40 <xchg_spi>
 800aff2:	4603      	mov	r3, r0
 800aff4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
 800aff8:	2bff      	cmp	r3, #255	; 0xff
 800affa:	d007      	beq.n	800b00c <wait_ready+0x32>
 800affc:	f7f9 ff8c 	bl	8004f18 <HAL_GetTick>
 800b000:	4602      	mov	r2, r0
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	693a      	ldr	r2, [r7, #16]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d8ef      	bhi.n	800afec <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	2bff      	cmp	r3, #255	; 0xff
 800b010:	bf0c      	ite	eq
 800b012:	2301      	moveq	r3, #1
 800b014:	2300      	movne	r3, #0
 800b016:	b2db      	uxtb	r3, r3
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3718      	adds	r7, #24
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800b024:	2201      	movs	r2, #1
 800b026:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b02a:	4804      	ldr	r0, [pc, #16]	; (800b03c <despiselect+0x1c>)
 800b02c:	f7fb f87e 	bl	800612c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800b030:	20ff      	movs	r0, #255	; 0xff
 800b032:	f7ff ff85 	bl	800af40 <xchg_spi>

}
 800b036:	bf00      	nop
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	40021400 	.word	0x40021400

0800b040 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800b040:	b580      	push	{r7, lr}
 800b042:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800b044:	2200      	movs	r2, #0
 800b046:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b04a:	480a      	ldr	r0, [pc, #40]	; (800b074 <spiselect+0x34>)
 800b04c:	f7fb f86e 	bl	800612c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800b050:	20ff      	movs	r0, #255	; 0xff
 800b052:	f7ff ff75 	bl	800af40 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800b056:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b05a:	f7ff ffbe 	bl	800afda <wait_ready>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <spiselect+0x28>
 800b064:	2301      	movs	r3, #1
 800b066:	e002      	b.n	800b06e <spiselect+0x2e>

	despiselect();
 800b068:	f7ff ffda 	bl	800b020 <despiselect>
	return 0;	/* Timeout */
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	40021400 	.word	0x40021400

0800b078 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800b082:	20c8      	movs	r0, #200	; 0xc8
 800b084:	f7ff ff32 	bl	800aeec <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800b088:	20ff      	movs	r0, #255	; 0xff
 800b08a:	f7ff ff59 	bl	800af40 <xchg_spi>
 800b08e:	4603      	mov	r3, r0
 800b090:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800b092:	7bfb      	ldrb	r3, [r7, #15]
 800b094:	2bff      	cmp	r3, #255	; 0xff
 800b096:	d104      	bne.n	800b0a2 <rcvr_datablock+0x2a>
 800b098:	f7ff ff3c 	bl	800af14 <SPI_Timer_Status>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1f2      	bne.n	800b088 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	2bfe      	cmp	r3, #254	; 0xfe
 800b0a6:	d001      	beq.n	800b0ac <rcvr_datablock+0x34>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	e00a      	b.n	800b0c2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b0ac:	6839      	ldr	r1, [r7, #0]
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff ff5c 	bl	800af6c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b0b4:	20ff      	movs	r0, #255	; 0xff
 800b0b6:	f7ff ff43 	bl	800af40 <xchg_spi>
 800b0ba:	20ff      	movs	r0, #255	; 0xff
 800b0bc:	f7ff ff40 	bl	800af40 <xchg_spi>

	return 1;						/* Function succeeded */
 800b0c0:	2301      	movs	r3, #1
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b0d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b0da:	f7ff ff7e 	bl	800afda <wait_ready>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <xmit_datablock+0x1e>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	e01e      	b.n	800b126 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800b0e8:	78fb      	ldrb	r3, [r7, #3]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7ff ff28 	bl	800af40 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b0f0:	78fb      	ldrb	r3, [r7, #3]
 800b0f2:	2bfd      	cmp	r3, #253	; 0xfd
 800b0f4:	d016      	beq.n	800b124 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800b0f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7ff ff52 	bl	800afa4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b100:	20ff      	movs	r0, #255	; 0xff
 800b102:	f7ff ff1d 	bl	800af40 <xchg_spi>
 800b106:	20ff      	movs	r0, #255	; 0xff
 800b108:	f7ff ff1a 	bl	800af40 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b10c:	20ff      	movs	r0, #255	; 0xff
 800b10e:	f7ff ff17 	bl	800af40 <xchg_spi>
 800b112:	4603      	mov	r3, r0
 800b114:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b116:	7bfb      	ldrb	r3, [r7, #15]
 800b118:	f003 031f 	and.w	r3, r3, #31
 800b11c:	2b05      	cmp	r3, #5
 800b11e:	d001      	beq.n	800b124 <xmit_datablock+0x5a>
 800b120:	2300      	movs	r3, #0
 800b122:	e000      	b.n	800b126 <xmit_datablock+0x5c>
	}
	return 1;
 800b124:	2301      	movs	r3, #1
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	4603      	mov	r3, r0
 800b136:	6039      	str	r1, [r7, #0]
 800b138:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800b13a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	da0e      	bge.n	800b160 <send_cmd+0x32>
		cmd &= 0x7F;
 800b142:	79fb      	ldrb	r3, [r7, #7]
 800b144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b148:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800b14a:	2100      	movs	r1, #0
 800b14c:	2037      	movs	r0, #55	; 0x37
 800b14e:	f7ff ffee 	bl	800b12e <send_cmd>
 800b152:	4603      	mov	r3, r0
 800b154:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800b156:	7bbb      	ldrb	r3, [r7, #14]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d901      	bls.n	800b160 <send_cmd+0x32>
 800b15c:	7bbb      	ldrb	r3, [r7, #14]
 800b15e:	e051      	b.n	800b204 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800b160:	79fb      	ldrb	r3, [r7, #7]
 800b162:	2b0c      	cmp	r3, #12
 800b164:	d008      	beq.n	800b178 <send_cmd+0x4a>
		despiselect();
 800b166:	f7ff ff5b 	bl	800b020 <despiselect>
		if (!spiselect()) return 0xFF;
 800b16a:	f7ff ff69 	bl	800b040 <spiselect>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <send_cmd+0x4a>
 800b174:	23ff      	movs	r3, #255	; 0xff
 800b176:	e045      	b.n	800b204 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800b178:	79fb      	ldrb	r3, [r7, #7]
 800b17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	4618      	mov	r0, r3
 800b182:	f7ff fedd 	bl	800af40 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	0e1b      	lsrs	r3, r3, #24
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7ff fed7 	bl	800af40 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	0c1b      	lsrs	r3, r3, #16
 800b196:	b2db      	uxtb	r3, r3
 800b198:	4618      	mov	r0, r3
 800b19a:	f7ff fed1 	bl	800af40 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	0a1b      	lsrs	r3, r3, #8
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7ff fecb 	bl	800af40 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7ff fec6 	bl	800af40 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800b1b8:	79fb      	ldrb	r3, [r7, #7]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <send_cmd+0x94>
 800b1be:	2395      	movs	r3, #149	; 0x95
 800b1c0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800b1c2:	79fb      	ldrb	r3, [r7, #7]
 800b1c4:	2b08      	cmp	r3, #8
 800b1c6:	d101      	bne.n	800b1cc <send_cmd+0x9e>
 800b1c8:	2387      	movs	r3, #135	; 0x87
 800b1ca:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800b1cc:	7bfb      	ldrb	r3, [r7, #15]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff feb6 	bl	800af40 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800b1d4:	79fb      	ldrb	r3, [r7, #7]
 800b1d6:	2b0c      	cmp	r3, #12
 800b1d8:	d102      	bne.n	800b1e0 <send_cmd+0xb2>
 800b1da:	20ff      	movs	r0, #255	; 0xff
 800b1dc:	f7ff feb0 	bl	800af40 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800b1e0:	230a      	movs	r3, #10
 800b1e2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800b1e4:	20ff      	movs	r0, #255	; 0xff
 800b1e6:	f7ff feab 	bl	800af40 <xchg_spi>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800b1ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	da05      	bge.n	800b202 <send_cmd+0xd4>
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	73fb      	strb	r3, [r7, #15]
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1f0      	bne.n	800b1e4 <send_cmd+0xb6>

	return res;							/* Return received response */
 800b202:	7bbb      	ldrb	r3, [r7, #14]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b20c:	b590      	push	{r4, r7, lr}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	4603      	mov	r3, r0
 800b214:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800b216:	79fb      	ldrb	r3, [r7, #7]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <USER_SPI_initialize+0x14>
 800b21c:	2301      	movs	r3, #1
 800b21e:	e0d4      	b.n	800b3ca <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800b220:	4b6c      	ldr	r3, [pc, #432]	; (800b3d4 <USER_SPI_initialize+0x1c8>)
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	b2db      	uxtb	r3, r3
 800b226:	f003 0302 	and.w	r3, r3, #2
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d003      	beq.n	800b236 <USER_SPI_initialize+0x2a>
 800b22e:	4b69      	ldr	r3, [pc, #420]	; (800b3d4 <USER_SPI_initialize+0x1c8>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	e0c9      	b.n	800b3ca <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800b236:	4b68      	ldr	r3, [pc, #416]	; (800b3d8 <USER_SPI_initialize+0x1cc>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	4b66      	ldr	r3, [pc, #408]	; (800b3d8 <USER_SPI_initialize+0x1cc>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800b244:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800b246:	230a      	movs	r3, #10
 800b248:	73fb      	strb	r3, [r7, #15]
 800b24a:	e005      	b.n	800b258 <USER_SPI_initialize+0x4c>
 800b24c:	20ff      	movs	r0, #255	; 0xff
 800b24e:	f7ff fe77 	bl	800af40 <xchg_spi>
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	3b01      	subs	r3, #1
 800b256:	73fb      	strb	r3, [r7, #15]
 800b258:	7bfb      	ldrb	r3, [r7, #15]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1f6      	bne.n	800b24c <USER_SPI_initialize+0x40>

	ty = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800b262:	2100      	movs	r1, #0
 800b264:	2000      	movs	r0, #0
 800b266:	f7ff ff62 	bl	800b12e <send_cmd>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	f040 808b 	bne.w	800b388 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800b272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b276:	f7ff fe39 	bl	800aeec <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800b27a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b27e:	2008      	movs	r0, #8
 800b280:	f7ff ff55 	bl	800b12e <send_cmd>
 800b284:	4603      	mov	r3, r0
 800b286:	2b01      	cmp	r3, #1
 800b288:	d151      	bne.n	800b32e <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800b28a:	2300      	movs	r3, #0
 800b28c:	73fb      	strb	r3, [r7, #15]
 800b28e:	e00d      	b.n	800b2ac <USER_SPI_initialize+0xa0>
 800b290:	7bfc      	ldrb	r4, [r7, #15]
 800b292:	20ff      	movs	r0, #255	; 0xff
 800b294:	f7ff fe54 	bl	800af40 <xchg_spi>
 800b298:	4603      	mov	r3, r0
 800b29a:	461a      	mov	r2, r3
 800b29c:	f107 0310 	add.w	r3, r7, #16
 800b2a0:	4423      	add	r3, r4
 800b2a2:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	73fb      	strb	r3, [r7, #15]
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
 800b2ae:	2b03      	cmp	r3, #3
 800b2b0:	d9ee      	bls.n	800b290 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800b2b2:	7abb      	ldrb	r3, [r7, #10]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d167      	bne.n	800b388 <USER_SPI_initialize+0x17c>
 800b2b8:	7afb      	ldrb	r3, [r7, #11]
 800b2ba:	2baa      	cmp	r3, #170	; 0xaa
 800b2bc:	d164      	bne.n	800b388 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800b2be:	bf00      	nop
 800b2c0:	f7ff fe28 	bl	800af14 <SPI_Timer_Status>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d007      	beq.n	800b2da <USER_SPI_initialize+0xce>
 800b2ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b2ce:	20a9      	movs	r0, #169	; 0xa9
 800b2d0:	f7ff ff2d 	bl	800b12e <send_cmd>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1f2      	bne.n	800b2c0 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800b2da:	f7ff fe1b 	bl	800af14 <SPI_Timer_Status>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d051      	beq.n	800b388 <USER_SPI_initialize+0x17c>
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	203a      	movs	r0, #58	; 0x3a
 800b2e8:	f7ff ff21 	bl	800b12e <send_cmd>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d14a      	bne.n	800b388 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	73fb      	strb	r3, [r7, #15]
 800b2f6:	e00d      	b.n	800b314 <USER_SPI_initialize+0x108>
 800b2f8:	7bfc      	ldrb	r4, [r7, #15]
 800b2fa:	20ff      	movs	r0, #255	; 0xff
 800b2fc:	f7ff fe20 	bl	800af40 <xchg_spi>
 800b300:	4603      	mov	r3, r0
 800b302:	461a      	mov	r2, r3
 800b304:	f107 0310 	add.w	r3, r7, #16
 800b308:	4423      	add	r3, r4
 800b30a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b30e:	7bfb      	ldrb	r3, [r7, #15]
 800b310:	3301      	adds	r3, #1
 800b312:	73fb      	strb	r3, [r7, #15]
 800b314:	7bfb      	ldrb	r3, [r7, #15]
 800b316:	2b03      	cmp	r3, #3
 800b318:	d9ee      	bls.n	800b2f8 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800b31a:	7a3b      	ldrb	r3, [r7, #8]
 800b31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <USER_SPI_initialize+0x11c>
 800b324:	230c      	movs	r3, #12
 800b326:	e000      	b.n	800b32a <USER_SPI_initialize+0x11e>
 800b328:	2304      	movs	r3, #4
 800b32a:	737b      	strb	r3, [r7, #13]
 800b32c:	e02c      	b.n	800b388 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800b32e:	2100      	movs	r1, #0
 800b330:	20a9      	movs	r0, #169	; 0xa9
 800b332:	f7ff fefc 	bl	800b12e <send_cmd>
 800b336:	4603      	mov	r3, r0
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d804      	bhi.n	800b346 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800b33c:	2302      	movs	r3, #2
 800b33e:	737b      	strb	r3, [r7, #13]
 800b340:	23a9      	movs	r3, #169	; 0xa9
 800b342:	73bb      	strb	r3, [r7, #14]
 800b344:	e003      	b.n	800b34e <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800b346:	2301      	movs	r3, #1
 800b348:	737b      	strb	r3, [r7, #13]
 800b34a:	2301      	movs	r3, #1
 800b34c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800b34e:	bf00      	nop
 800b350:	f7ff fde0 	bl	800af14 <SPI_Timer_Status>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d007      	beq.n	800b36a <USER_SPI_initialize+0x15e>
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
 800b35c:	2100      	movs	r1, #0
 800b35e:	4618      	mov	r0, r3
 800b360:	f7ff fee5 	bl	800b12e <send_cmd>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1f2      	bne.n	800b350 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800b36a:	f7ff fdd3 	bl	800af14 <SPI_Timer_Status>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d007      	beq.n	800b384 <USER_SPI_initialize+0x178>
 800b374:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b378:	2010      	movs	r0, #16
 800b37a:	f7ff fed8 	bl	800b12e <send_cmd>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <USER_SPI_initialize+0x17c>
				ty = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800b388:	4a14      	ldr	r2, [pc, #80]	; (800b3dc <USER_SPI_initialize+0x1d0>)
 800b38a:	7b7b      	ldrb	r3, [r7, #13]
 800b38c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800b38e:	f7ff fe47 	bl	800b020 <despiselect>

	if (ty) {			/* OK */
 800b392:	7b7b      	ldrb	r3, [r7, #13]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d012      	beq.n	800b3be <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800b398:	4b0f      	ldr	r3, [pc, #60]	; (800b3d8 <USER_SPI_initialize+0x1cc>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b3a2:	4b0d      	ldr	r3, [pc, #52]	; (800b3d8 <USER_SPI_initialize+0x1cc>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f042 0208 	orr.w	r2, r2, #8
 800b3aa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b3ac:	4b09      	ldr	r3, [pc, #36]	; (800b3d4 <USER_SPI_initialize+0x1c8>)
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	f023 0301 	bic.w	r3, r3, #1
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	4b06      	ldr	r3, [pc, #24]	; (800b3d4 <USER_SPI_initialize+0x1c8>)
 800b3ba:	701a      	strb	r2, [r3, #0]
 800b3bc:	e002      	b.n	800b3c4 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800b3be:	4b05      	ldr	r3, [pc, #20]	; (800b3d4 <USER_SPI_initialize+0x1c8>)
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800b3c4:	4b03      	ldr	r3, [pc, #12]	; (800b3d4 <USER_SPI_initialize+0x1c8>)
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	b2db      	uxtb	r3, r3
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd90      	pop	{r4, r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	20000024 	.word	0x20000024
 800b3d8:	200010e0 	.word	0x200010e0
 800b3dc:	200004bc 	.word	0x200004bc

0800b3e0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800b3ea:	79fb      	ldrb	r3, [r7, #7]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d001      	beq.n	800b3f4 <USER_SPI_status+0x14>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e002      	b.n	800b3fa <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800b3f4:	4b04      	ldr	r3, [pc, #16]	; (800b408 <USER_SPI_status+0x28>)
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	b2db      	uxtb	r3, r3
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	20000024 	.word	0x20000024

0800b40c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	60b9      	str	r1, [r7, #8]
 800b414:	607a      	str	r2, [r7, #4]
 800b416:	603b      	str	r3, [r7, #0]
 800b418:	4603      	mov	r3, r0
 800b41a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b41c:	7bfb      	ldrb	r3, [r7, #15]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d102      	bne.n	800b428 <USER_SPI_read+0x1c>
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d101      	bne.n	800b42c <USER_SPI_read+0x20>
 800b428:	2304      	movs	r3, #4
 800b42a:	e04d      	b.n	800b4c8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b42c:	4b28      	ldr	r3, [pc, #160]	; (800b4d0 <USER_SPI_read+0xc4>)
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	b2db      	uxtb	r3, r3
 800b432:	f003 0301 	and.w	r3, r3, #1
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <USER_SPI_read+0x32>
 800b43a:	2303      	movs	r3, #3
 800b43c:	e044      	b.n	800b4c8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800b43e:	4b25      	ldr	r3, [pc, #148]	; (800b4d4 <USER_SPI_read+0xc8>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	f003 0308 	and.w	r3, r3, #8
 800b446:	2b00      	cmp	r3, #0
 800b448:	d102      	bne.n	800b450 <USER_SPI_read+0x44>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	025b      	lsls	r3, r3, #9
 800b44e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d111      	bne.n	800b47a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800b456:	6879      	ldr	r1, [r7, #4]
 800b458:	2011      	movs	r0, #17
 800b45a:	f7ff fe68 	bl	800b12e <send_cmd>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d129      	bne.n	800b4b8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800b464:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b468:	68b8      	ldr	r0, [r7, #8]
 800b46a:	f7ff fe05 	bl	800b078 <rcvr_datablock>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d021      	beq.n	800b4b8 <USER_SPI_read+0xac>
			count = 0;
 800b474:	2300      	movs	r3, #0
 800b476:	603b      	str	r3, [r7, #0]
 800b478:	e01e      	b.n	800b4b8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800b47a:	6879      	ldr	r1, [r7, #4]
 800b47c:	2012      	movs	r0, #18
 800b47e:	f7ff fe56 	bl	800b12e <send_cmd>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d117      	bne.n	800b4b8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800b488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b48c:	68b8      	ldr	r0, [r7, #8]
 800b48e:	f7ff fdf3 	bl	800b078 <rcvr_datablock>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00a      	beq.n	800b4ae <USER_SPI_read+0xa2>
				buff += 512;
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b49e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	603b      	str	r3, [r7, #0]
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1ed      	bne.n	800b488 <USER_SPI_read+0x7c>
 800b4ac:	e000      	b.n	800b4b0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800b4ae:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	200c      	movs	r0, #12
 800b4b4:	f7ff fe3b 	bl	800b12e <send_cmd>
		}
	}
	despiselect();
 800b4b8:	f7ff fdb2 	bl	800b020 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	bf14      	ite	ne
 800b4c2:	2301      	movne	r3, #1
 800b4c4:	2300      	moveq	r3, #0
 800b4c6:	b2db      	uxtb	r3, r3
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	20000024 	.word	0x20000024
 800b4d4:	200004bc 	.word	0x200004bc

0800b4d8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60b9      	str	r1, [r7, #8]
 800b4e0:	607a      	str	r2, [r7, #4]
 800b4e2:	603b      	str	r3, [r7, #0]
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d102      	bne.n	800b4f4 <USER_SPI_write+0x1c>
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d101      	bne.n	800b4f8 <USER_SPI_write+0x20>
 800b4f4:	2304      	movs	r3, #4
 800b4f6:	e063      	b.n	800b5c0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b4f8:	4b33      	ldr	r3, [pc, #204]	; (800b5c8 <USER_SPI_write+0xf0>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	f003 0301 	and.w	r3, r3, #1
 800b502:	2b00      	cmp	r3, #0
 800b504:	d001      	beq.n	800b50a <USER_SPI_write+0x32>
 800b506:	2303      	movs	r3, #3
 800b508:	e05a      	b.n	800b5c0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b50a:	4b2f      	ldr	r3, [pc, #188]	; (800b5c8 <USER_SPI_write+0xf0>)
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	f003 0304 	and.w	r3, r3, #4
 800b514:	2b00      	cmp	r3, #0
 800b516:	d001      	beq.n	800b51c <USER_SPI_write+0x44>
 800b518:	2302      	movs	r3, #2
 800b51a:	e051      	b.n	800b5c0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b51c:	4b2b      	ldr	r3, [pc, #172]	; (800b5cc <USER_SPI_write+0xf4>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	f003 0308 	and.w	r3, r3, #8
 800b524:	2b00      	cmp	r3, #0
 800b526:	d102      	bne.n	800b52e <USER_SPI_write+0x56>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	025b      	lsls	r3, r3, #9
 800b52c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d110      	bne.n	800b556 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b534:	6879      	ldr	r1, [r7, #4]
 800b536:	2018      	movs	r0, #24
 800b538:	f7ff fdf9 	bl	800b12e <send_cmd>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d136      	bne.n	800b5b0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800b542:	21fe      	movs	r1, #254	; 0xfe
 800b544:	68b8      	ldr	r0, [r7, #8]
 800b546:	f7ff fdc0 	bl	800b0ca <xmit_datablock>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d02f      	beq.n	800b5b0 <USER_SPI_write+0xd8>
			count = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	603b      	str	r3, [r7, #0]
 800b554:	e02c      	b.n	800b5b0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b556:	4b1d      	ldr	r3, [pc, #116]	; (800b5cc <USER_SPI_write+0xf4>)
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	f003 0306 	and.w	r3, r3, #6
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d003      	beq.n	800b56a <USER_SPI_write+0x92>
 800b562:	6839      	ldr	r1, [r7, #0]
 800b564:	2097      	movs	r0, #151	; 0x97
 800b566:	f7ff fde2 	bl	800b12e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b56a:	6879      	ldr	r1, [r7, #4]
 800b56c:	2019      	movs	r0, #25
 800b56e:	f7ff fdde 	bl	800b12e <send_cmd>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d11b      	bne.n	800b5b0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800b578:	21fc      	movs	r1, #252	; 0xfc
 800b57a:	68b8      	ldr	r0, [r7, #8]
 800b57c:	f7ff fda5 	bl	800b0ca <xmit_datablock>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00a      	beq.n	800b59c <USER_SPI_write+0xc4>
				buff += 512;
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b58c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	3b01      	subs	r3, #1
 800b592:	603b      	str	r3, [r7, #0]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1ee      	bne.n	800b578 <USER_SPI_write+0xa0>
 800b59a:	e000      	b.n	800b59e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800b59c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b59e:	21fd      	movs	r1, #253	; 0xfd
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	f7ff fd92 	bl	800b0ca <xmit_datablock>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <USER_SPI_write+0xd8>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800b5b0:	f7ff fd36 	bl	800b020 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	bf14      	ite	ne
 800b5ba:	2301      	movne	r3, #1
 800b5bc:	2300      	moveq	r3, #0
 800b5be:	b2db      	uxtb	r3, r3
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	20000024 	.word	0x20000024
 800b5cc:	200004bc 	.word	0x200004bc

0800b5d0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08c      	sub	sp, #48	; 0x30
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	603a      	str	r2, [r7, #0]
 800b5da:	71fb      	strb	r3, [r7, #7]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800b5e0:	79fb      	ldrb	r3, [r7, #7]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <USER_SPI_ioctl+0x1a>
 800b5e6:	2304      	movs	r3, #4
 800b5e8:	e15a      	b.n	800b8a0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b5ea:	4baf      	ldr	r3, [pc, #700]	; (800b8a8 <USER_SPI_ioctl+0x2d8>)
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	f003 0301 	and.w	r3, r3, #1
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d001      	beq.n	800b5fc <USER_SPI_ioctl+0x2c>
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	e151      	b.n	800b8a0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800b602:	79bb      	ldrb	r3, [r7, #6]
 800b604:	2b04      	cmp	r3, #4
 800b606:	f200 8136 	bhi.w	800b876 <USER_SPI_ioctl+0x2a6>
 800b60a:	a201      	add	r2, pc, #4	; (adr r2, 800b610 <USER_SPI_ioctl+0x40>)
 800b60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b610:	0800b625 	.word	0x0800b625
 800b614:	0800b639 	.word	0x0800b639
 800b618:	0800b877 	.word	0x0800b877
 800b61c:	0800b6e5 	.word	0x0800b6e5
 800b620:	0800b7db 	.word	0x0800b7db
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800b624:	f7ff fd0c 	bl	800b040 <spiselect>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f000 8127 	beq.w	800b87e <USER_SPI_ioctl+0x2ae>
 800b630:	2300      	movs	r3, #0
 800b632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800b636:	e122      	b.n	800b87e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b638:	2100      	movs	r1, #0
 800b63a:	2009      	movs	r0, #9
 800b63c:	f7ff fd77 	bl	800b12e <send_cmd>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	f040 811d 	bne.w	800b882 <USER_SPI_ioctl+0x2b2>
 800b648:	f107 030c 	add.w	r3, r7, #12
 800b64c:	2110      	movs	r1, #16
 800b64e:	4618      	mov	r0, r3
 800b650:	f7ff fd12 	bl	800b078 <rcvr_datablock>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	f000 8113 	beq.w	800b882 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b65c:	7b3b      	ldrb	r3, [r7, #12]
 800b65e:	099b      	lsrs	r3, r3, #6
 800b660:	b2db      	uxtb	r3, r3
 800b662:	2b01      	cmp	r3, #1
 800b664:	d111      	bne.n	800b68a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b666:	7d7b      	ldrb	r3, [r7, #21]
 800b668:	461a      	mov	r2, r3
 800b66a:	7d3b      	ldrb	r3, [r7, #20]
 800b66c:	021b      	lsls	r3, r3, #8
 800b66e:	4413      	add	r3, r2
 800b670:	461a      	mov	r2, r3
 800b672:	7cfb      	ldrb	r3, [r7, #19]
 800b674:	041b      	lsls	r3, r3, #16
 800b676:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800b67a:	4413      	add	r3, r2
 800b67c:	3301      	adds	r3, #1
 800b67e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	029a      	lsls	r2, r3, #10
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	e028      	b.n	800b6dc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b68a:	7c7b      	ldrb	r3, [r7, #17]
 800b68c:	f003 030f 	and.w	r3, r3, #15
 800b690:	b2da      	uxtb	r2, r3
 800b692:	7dbb      	ldrb	r3, [r7, #22]
 800b694:	09db      	lsrs	r3, r3, #7
 800b696:	b2db      	uxtb	r3, r3
 800b698:	4413      	add	r3, r2
 800b69a:	b2da      	uxtb	r2, r3
 800b69c:	7d7b      	ldrb	r3, [r7, #21]
 800b69e:	005b      	lsls	r3, r3, #1
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	f003 0306 	and.w	r3, r3, #6
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	4413      	add	r3, r2
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	3302      	adds	r3, #2
 800b6ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b6b2:	7d3b      	ldrb	r3, [r7, #20]
 800b6b4:	099b      	lsrs	r3, r3, #6
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	7cfb      	ldrb	r3, [r7, #19]
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	441a      	add	r2, r3
 800b6c0:	7cbb      	ldrb	r3, [r7, #18]
 800b6c2:	029b      	lsls	r3, r3, #10
 800b6c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b6c8:	4413      	add	r3, r2
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800b6ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b6d2:	3b09      	subs	r3, #9
 800b6d4:	69fa      	ldr	r2, [r7, #28]
 800b6d6:	409a      	lsls	r2, r3
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800b6e2:	e0ce      	b.n	800b882 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800b6e4:	4b71      	ldr	r3, [pc, #452]	; (800b8ac <USER_SPI_ioctl+0x2dc>)
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	f003 0304 	and.w	r3, r3, #4
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d031      	beq.n	800b754 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	208d      	movs	r0, #141	; 0x8d
 800b6f4:	f7ff fd1b 	bl	800b12e <send_cmd>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f040 80c3 	bne.w	800b886 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800b700:	20ff      	movs	r0, #255	; 0xff
 800b702:	f7ff fc1d 	bl	800af40 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800b706:	f107 030c 	add.w	r3, r7, #12
 800b70a:	2110      	movs	r1, #16
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7ff fcb3 	bl	800b078 <rcvr_datablock>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 80b6 	beq.w	800b886 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b71a:	2330      	movs	r3, #48	; 0x30
 800b71c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b720:	e007      	b.n	800b732 <USER_SPI_ioctl+0x162>
 800b722:	20ff      	movs	r0, #255	; 0xff
 800b724:	f7ff fc0c 	bl	800af40 <xchg_spi>
 800b728:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b72c:	3b01      	subs	r3, #1
 800b72e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b732:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1f3      	bne.n	800b722 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b73a:	7dbb      	ldrb	r3, [r7, #22]
 800b73c:	091b      	lsrs	r3, r3, #4
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	461a      	mov	r2, r3
 800b742:	2310      	movs	r3, #16
 800b744:	fa03 f202 	lsl.w	r2, r3, r2
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800b752:	e098      	b.n	800b886 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b754:	2100      	movs	r1, #0
 800b756:	2009      	movs	r0, #9
 800b758:	f7ff fce9 	bl	800b12e <send_cmd>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f040 8091 	bne.w	800b886 <USER_SPI_ioctl+0x2b6>
 800b764:	f107 030c 	add.w	r3, r7, #12
 800b768:	2110      	movs	r1, #16
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7ff fc84 	bl	800b078 <rcvr_datablock>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	f000 8087 	beq.w	800b886 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b778:	4b4c      	ldr	r3, [pc, #304]	; (800b8ac <USER_SPI_ioctl+0x2dc>)
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	f003 0302 	and.w	r3, r3, #2
 800b780:	2b00      	cmp	r3, #0
 800b782:	d012      	beq.n	800b7aa <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b784:	7dbb      	ldrb	r3, [r7, #22]
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b78c:	7dfa      	ldrb	r2, [r7, #23]
 800b78e:	09d2      	lsrs	r2, r2, #7
 800b790:	b2d2      	uxtb	r2, r2
 800b792:	4413      	add	r3, r2
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	7e7b      	ldrb	r3, [r7, #25]
 800b798:	099b      	lsrs	r3, r3, #6
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	3b01      	subs	r3, #1
 800b79e:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	601a      	str	r2, [r3, #0]
 800b7a8:	e013      	b.n	800b7d2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b7aa:	7dbb      	ldrb	r3, [r7, #22]
 800b7ac:	109b      	asrs	r3, r3, #2
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	f003 031f 	and.w	r3, r3, #31
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	7dfa      	ldrb	r2, [r7, #23]
 800b7b8:	00d2      	lsls	r2, r2, #3
 800b7ba:	f002 0218 	and.w	r2, r2, #24
 800b7be:	7df9      	ldrb	r1, [r7, #23]
 800b7c0:	0949      	lsrs	r1, r1, #5
 800b7c2:	b2c9      	uxtb	r1, r1
 800b7c4:	440a      	add	r2, r1
 800b7c6:	3201      	adds	r2, #1
 800b7c8:	fb02 f303 	mul.w	r3, r2, r3
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800b7d8:	e055      	b.n	800b886 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b7da:	4b34      	ldr	r3, [pc, #208]	; (800b8ac <USER_SPI_ioctl+0x2dc>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	f003 0306 	and.w	r3, r3, #6
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d051      	beq.n	800b88a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b7e6:	f107 020c 	add.w	r2, r7, #12
 800b7ea:	79fb      	ldrb	r3, [r7, #7]
 800b7ec:	210b      	movs	r1, #11
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7ff feee 	bl	800b5d0 <USER_SPI_ioctl>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d149      	bne.n	800b88e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b7fa:	7b3b      	ldrb	r3, [r7, #12]
 800b7fc:	099b      	lsrs	r3, r3, #6
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	d104      	bne.n	800b80e <USER_SPI_ioctl+0x23e>
 800b804:	7dbb      	ldrb	r3, [r7, #22]
 800b806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d041      	beq.n	800b892 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	623b      	str	r3, [r7, #32]
 800b812:	6a3b      	ldr	r3, [r7, #32]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	62bb      	str	r3, [r7, #40]	; 0x28
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800b81e:	4b23      	ldr	r3, [pc, #140]	; (800b8ac <USER_SPI_ioctl+0x2dc>)
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	f003 0308 	and.w	r3, r3, #8
 800b826:	2b00      	cmp	r3, #0
 800b828:	d105      	bne.n	800b836 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800b82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82c:	025b      	lsls	r3, r3, #9
 800b82e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	025b      	lsls	r3, r3, #9
 800b834:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b838:	2020      	movs	r0, #32
 800b83a:	f7ff fc78 	bl	800b12e <send_cmd>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d128      	bne.n	800b896 <USER_SPI_ioctl+0x2c6>
 800b844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b846:	2021      	movs	r0, #33	; 0x21
 800b848:	f7ff fc71 	bl	800b12e <send_cmd>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d121      	bne.n	800b896 <USER_SPI_ioctl+0x2c6>
 800b852:	2100      	movs	r1, #0
 800b854:	2026      	movs	r0, #38	; 0x26
 800b856:	f7ff fc6a 	bl	800b12e <send_cmd>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d11a      	bne.n	800b896 <USER_SPI_ioctl+0x2c6>
 800b860:	f247 5030 	movw	r0, #30000	; 0x7530
 800b864:	f7ff fbb9 	bl	800afda <wait_ready>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d013      	beq.n	800b896 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800b86e:	2300      	movs	r3, #0
 800b870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800b874:	e00f      	b.n	800b896 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800b876:	2304      	movs	r3, #4
 800b878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b87c:	e00c      	b.n	800b898 <USER_SPI_ioctl+0x2c8>
		break;
 800b87e:	bf00      	nop
 800b880:	e00a      	b.n	800b898 <USER_SPI_ioctl+0x2c8>
		break;
 800b882:	bf00      	nop
 800b884:	e008      	b.n	800b898 <USER_SPI_ioctl+0x2c8>
		break;
 800b886:	bf00      	nop
 800b888:	e006      	b.n	800b898 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b88a:	bf00      	nop
 800b88c:	e004      	b.n	800b898 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b88e:	bf00      	nop
 800b890:	e002      	b.n	800b898 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b892:	bf00      	nop
 800b894:	e000      	b.n	800b898 <USER_SPI_ioctl+0x2c8>
		break;
 800b896:	bf00      	nop
	}

	despiselect();
 800b898:	f7ff fbc2 	bl	800b020 <despiselect>

	return res;
 800b89c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3730      	adds	r7, #48	; 0x30
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	20000024 	.word	0x20000024
 800b8ac:	200004bc 	.word	0x200004bc

0800b8b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b8ba:	79fb      	ldrb	r3, [r7, #7]
 800b8bc:	4a08      	ldr	r2, [pc, #32]	; (800b8e0 <disk_status+0x30>)
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	79fa      	ldrb	r2, [r7, #7]
 800b8c8:	4905      	ldr	r1, [pc, #20]	; (800b8e0 <disk_status+0x30>)
 800b8ca:	440a      	add	r2, r1
 800b8cc:	7a12      	ldrb	r2, [r2, #8]
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	4798      	blx	r3
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	200004e8 	.word	0x200004e8

0800b8e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b8f2:	79fb      	ldrb	r3, [r7, #7]
 800b8f4:	4a0d      	ldr	r2, [pc, #52]	; (800b92c <disk_initialize+0x48>)
 800b8f6:	5cd3      	ldrb	r3, [r2, r3]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d111      	bne.n	800b920 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b8fc:	79fb      	ldrb	r3, [r7, #7]
 800b8fe:	4a0b      	ldr	r2, [pc, #44]	; (800b92c <disk_initialize+0x48>)
 800b900:	2101      	movs	r1, #1
 800b902:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b904:	79fb      	ldrb	r3, [r7, #7]
 800b906:	4a09      	ldr	r2, [pc, #36]	; (800b92c <disk_initialize+0x48>)
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	79fa      	ldrb	r2, [r7, #7]
 800b912:	4906      	ldr	r1, [pc, #24]	; (800b92c <disk_initialize+0x48>)
 800b914:	440a      	add	r2, r1
 800b916:	7a12      	ldrb	r2, [r2, #8]
 800b918:	4610      	mov	r0, r2
 800b91a:	4798      	blx	r3
 800b91c:	4603      	mov	r3, r0
 800b91e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b920:	7bfb      	ldrb	r3, [r7, #15]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	200004e8 	.word	0x200004e8

0800b930 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b930:	b590      	push	{r4, r7, lr}
 800b932:	b087      	sub	sp, #28
 800b934:	af00      	add	r7, sp, #0
 800b936:	60b9      	str	r1, [r7, #8]
 800b938:	607a      	str	r2, [r7, #4]
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	4603      	mov	r3, r0
 800b93e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b940:	7bfb      	ldrb	r3, [r7, #15]
 800b942:	4a0a      	ldr	r2, [pc, #40]	; (800b96c <disk_read+0x3c>)
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4413      	add	r3, r2
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	689c      	ldr	r4, [r3, #8]
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
 800b94e:	4a07      	ldr	r2, [pc, #28]	; (800b96c <disk_read+0x3c>)
 800b950:	4413      	add	r3, r2
 800b952:	7a18      	ldrb	r0, [r3, #8]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	68b9      	ldr	r1, [r7, #8]
 800b95a:	47a0      	blx	r4
 800b95c:	4603      	mov	r3, r0
 800b95e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b960:	7dfb      	ldrb	r3, [r7, #23]
}
 800b962:	4618      	mov	r0, r3
 800b964:	371c      	adds	r7, #28
 800b966:	46bd      	mov	sp, r7
 800b968:	bd90      	pop	{r4, r7, pc}
 800b96a:	bf00      	nop
 800b96c:	200004e8 	.word	0x200004e8

0800b970 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b970:	b590      	push	{r4, r7, lr}
 800b972:	b087      	sub	sp, #28
 800b974:	af00      	add	r7, sp, #0
 800b976:	60b9      	str	r1, [r7, #8]
 800b978:	607a      	str	r2, [r7, #4]
 800b97a:	603b      	str	r3, [r7, #0]
 800b97c:	4603      	mov	r3, r0
 800b97e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b980:	7bfb      	ldrb	r3, [r7, #15]
 800b982:	4a0a      	ldr	r2, [pc, #40]	; (800b9ac <disk_write+0x3c>)
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4413      	add	r3, r2
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	68dc      	ldr	r4, [r3, #12]
 800b98c:	7bfb      	ldrb	r3, [r7, #15]
 800b98e:	4a07      	ldr	r2, [pc, #28]	; (800b9ac <disk_write+0x3c>)
 800b990:	4413      	add	r3, r2
 800b992:	7a18      	ldrb	r0, [r3, #8]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	68b9      	ldr	r1, [r7, #8]
 800b99a:	47a0      	blx	r4
 800b99c:	4603      	mov	r3, r0
 800b99e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	371c      	adds	r7, #28
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd90      	pop	{r4, r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	200004e8 	.word	0x200004e8

0800b9b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	603a      	str	r2, [r7, #0]
 800b9ba:	71fb      	strb	r3, [r7, #7]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b9c0:	79fb      	ldrb	r3, [r7, #7]
 800b9c2:	4a09      	ldr	r2, [pc, #36]	; (800b9e8 <disk_ioctl+0x38>)
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	691b      	ldr	r3, [r3, #16]
 800b9cc:	79fa      	ldrb	r2, [r7, #7]
 800b9ce:	4906      	ldr	r1, [pc, #24]	; (800b9e8 <disk_ioctl+0x38>)
 800b9d0:	440a      	add	r2, r1
 800b9d2:	7a10      	ldrb	r0, [r2, #8]
 800b9d4:	79b9      	ldrb	r1, [r7, #6]
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	4798      	blx	r3
 800b9da:	4603      	mov	r3, r0
 800b9dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	200004e8 	.word	0x200004e8

0800b9ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b9fc:	89fb      	ldrh	r3, [r7, #14]
 800b9fe:	021b      	lsls	r3, r3, #8
 800ba00:	b21a      	sxth	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	b21b      	sxth	r3, r3
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	b21b      	sxth	r3, r3
 800ba0c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ba0e:	89fb      	ldrh	r3, [r7, #14]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3714      	adds	r7, #20
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3303      	adds	r3, #3
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	021b      	lsls	r3, r3, #8
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	3202      	adds	r2, #2
 800ba34:	7812      	ldrb	r2, [r2, #0]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	021b      	lsls	r3, r3, #8
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	3201      	adds	r2, #1
 800ba42:	7812      	ldrb	r2, [r2, #0]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	021b      	lsls	r3, r3, #8
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	7812      	ldrb	r2, [r2, #0]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	60fb      	str	r3, [r7, #12]
	return rv;
 800ba54:	68fb      	ldr	r3, [r7, #12]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ba62:	b480      	push	{r7}
 800ba64:	b083      	sub	sp, #12
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	607a      	str	r2, [r7, #4]
 800ba74:	887a      	ldrh	r2, [r7, #2]
 800ba76:	b2d2      	uxtb	r2, r2
 800ba78:	701a      	strb	r2, [r3, #0]
 800ba7a:	887b      	ldrh	r3, [r7, #2]
 800ba7c:	0a1b      	lsrs	r3, r3, #8
 800ba7e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	607a      	str	r2, [r7, #4]
 800ba86:	887a      	ldrh	r2, [r7, #2]
 800ba88:	b2d2      	uxtb	r2, r2
 800ba8a:	701a      	strb	r2, [r3, #0]
}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	1c5a      	adds	r2, r3, #1
 800baa6:	607a      	str	r2, [r7, #4]
 800baa8:	683a      	ldr	r2, [r7, #0]
 800baaa:	b2d2      	uxtb	r2, r2
 800baac:	701a      	strb	r2, [r3, #0]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	0a1b      	lsrs	r3, r3, #8
 800bab2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	607a      	str	r2, [r7, #4]
 800baba:	683a      	ldr	r2, [r7, #0]
 800babc:	b2d2      	uxtb	r2, r2
 800babe:	701a      	strb	r2, [r3, #0]
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	0a1b      	lsrs	r3, r3, #8
 800bac4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	1c5a      	adds	r2, r3, #1
 800baca:	607a      	str	r2, [r7, #4]
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	b2d2      	uxtb	r2, r2
 800bad0:	701a      	strb	r2, [r3, #0]
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	0a1b      	lsrs	r3, r3, #8
 800bad6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	1c5a      	adds	r2, r3, #1
 800badc:	607a      	str	r2, [r7, #4]
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	b2d2      	uxtb	r2, r2
 800bae2:	701a      	strb	r2, [r3, #0]
}
 800bae4:	bf00      	nop
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800baf0:	b480      	push	{r7}
 800baf2:	b087      	sub	sp, #28
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00d      	beq.n	800bb26 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bb0a:	693a      	ldr	r2, [r7, #16]
 800bb0c:	1c53      	adds	r3, r2, #1
 800bb0e:	613b      	str	r3, [r7, #16]
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	1c59      	adds	r1, r3, #1
 800bb14:	6179      	str	r1, [r7, #20]
 800bb16:	7812      	ldrb	r2, [r2, #0]
 800bb18:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	607b      	str	r3, [r7, #4]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1f1      	bne.n	800bb0a <mem_cpy+0x1a>
	}
}
 800bb26:	bf00      	nop
 800bb28:	371c      	adds	r7, #28
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr

0800bb32 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bb32:	b480      	push	{r7}
 800bb34:	b087      	sub	sp, #28
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	60f8      	str	r0, [r7, #12]
 800bb3a:	60b9      	str	r1, [r7, #8]
 800bb3c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	617a      	str	r2, [r7, #20]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	b2d2      	uxtb	r2, r2
 800bb4c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	607b      	str	r3, [r7, #4]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1f3      	bne.n	800bb42 <mem_set+0x10>
}
 800bb5a:	bf00      	nop
 800bb5c:	bf00      	nop
 800bb5e:	371c      	adds	r7, #28
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bb68:	b480      	push	{r7}
 800bb6a:	b089      	sub	sp, #36	; 0x24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	61fb      	str	r3, [r7, #28]
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	1c5a      	adds	r2, r3, #1
 800bb84:	61fa      	str	r2, [r7, #28]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	1c5a      	adds	r2, r3, #1
 800bb8e:	61ba      	str	r2, [r7, #24]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	1acb      	subs	r3, r1, r3
 800bb94:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	607b      	str	r3, [r7, #4]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d002      	beq.n	800bba8 <mem_cmp+0x40>
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d0eb      	beq.n	800bb80 <mem_cmp+0x18>

	return r;
 800bba8:	697b      	ldr	r3, [r7, #20]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3724      	adds	r7, #36	; 0x24
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bbb6:	b480      	push	{r7}
 800bbb8:	b083      	sub	sp, #12
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bbc0:	e002      	b.n	800bbc8 <chk_chr+0x12>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	607b      	str	r3, [r7, #4]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d005      	beq.n	800bbdc <chk_chr+0x26>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d1f2      	bne.n	800bbc2 <chk_chr+0xc>
	return *str;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	781b      	ldrb	r3, [r3, #0]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	60bb      	str	r3, [r7, #8]
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	60fb      	str	r3, [r7, #12]
 800bbfe:	e029      	b.n	800bc54 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bc00:	4a27      	ldr	r2, [pc, #156]	; (800bca0 <chk_lock+0xb4>)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	011b      	lsls	r3, r3, #4
 800bc06:	4413      	add	r3, r2
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d01d      	beq.n	800bc4a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc0e:	4a24      	ldr	r2, [pc, #144]	; (800bca0 <chk_lock+0xb4>)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	011b      	lsls	r3, r3, #4
 800bc14:	4413      	add	r3, r2
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d116      	bne.n	800bc4e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bc20:	4a1f      	ldr	r2, [pc, #124]	; (800bca0 <chk_lock+0xb4>)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	011b      	lsls	r3, r3, #4
 800bc26:	4413      	add	r3, r2
 800bc28:	3304      	adds	r3, #4
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d10c      	bne.n	800bc4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc34:	4a1a      	ldr	r2, [pc, #104]	; (800bca0 <chk_lock+0xb4>)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	011b      	lsls	r3, r3, #4
 800bc3a:	4413      	add	r3, r2
 800bc3c:	3308      	adds	r3, #8
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d102      	bne.n	800bc4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc48:	e007      	b.n	800bc5a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	3301      	adds	r3, #1
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d9d2      	bls.n	800bc00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d109      	bne.n	800bc74 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d102      	bne.n	800bc6c <chk_lock+0x80>
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	d101      	bne.n	800bc70 <chk_lock+0x84>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	e010      	b.n	800bc92 <chk_lock+0xa6>
 800bc70:	2312      	movs	r3, #18
 800bc72:	e00e      	b.n	800bc92 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d108      	bne.n	800bc8c <chk_lock+0xa0>
 800bc7a:	4a09      	ldr	r2, [pc, #36]	; (800bca0 <chk_lock+0xb4>)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	011b      	lsls	r3, r3, #4
 800bc80:	4413      	add	r3, r2
 800bc82:	330c      	adds	r3, #12
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc8a:	d101      	bne.n	800bc90 <chk_lock+0xa4>
 800bc8c:	2310      	movs	r3, #16
 800bc8e:	e000      	b.n	800bc92 <chk_lock+0xa6>
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	200004c8 	.word	0x200004c8

0800bca4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	607b      	str	r3, [r7, #4]
 800bcae:	e002      	b.n	800bcb6 <enq_lock+0x12>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	607b      	str	r3, [r7, #4]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d806      	bhi.n	800bcca <enq_lock+0x26>
 800bcbc:	4a09      	ldr	r2, [pc, #36]	; (800bce4 <enq_lock+0x40>)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	011b      	lsls	r3, r3, #4
 800bcc2:	4413      	add	r3, r2
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1f2      	bne.n	800bcb0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	bf14      	ite	ne
 800bcd0:	2301      	movne	r3, #1
 800bcd2:	2300      	moveq	r3, #0
 800bcd4:	b2db      	uxtb	r3, r3
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	370c      	adds	r7, #12
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	200004c8 	.word	0x200004c8

0800bce8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60fb      	str	r3, [r7, #12]
 800bcf6:	e01f      	b.n	800bd38 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bcf8:	4a41      	ldr	r2, [pc, #260]	; (800be00 <inc_lock+0x118>)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	011b      	lsls	r3, r3, #4
 800bcfe:	4413      	add	r3, r2
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d113      	bne.n	800bd32 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bd0a:	4a3d      	ldr	r2, [pc, #244]	; (800be00 <inc_lock+0x118>)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	011b      	lsls	r3, r3, #4
 800bd10:	4413      	add	r3, r2
 800bd12:	3304      	adds	r3, #4
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d109      	bne.n	800bd32 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bd1e:	4a38      	ldr	r2, [pc, #224]	; (800be00 <inc_lock+0x118>)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	011b      	lsls	r3, r3, #4
 800bd24:	4413      	add	r3, r2
 800bd26:	3308      	adds	r3, #8
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d006      	beq.n	800bd40 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	3301      	adds	r3, #1
 800bd36:	60fb      	str	r3, [r7, #12]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d9dc      	bls.n	800bcf8 <inc_lock+0x10>
 800bd3e:	e000      	b.n	800bd42 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bd40:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d132      	bne.n	800bdae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	e002      	b.n	800bd54 <inc_lock+0x6c>
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	3301      	adds	r3, #1
 800bd52:	60fb      	str	r3, [r7, #12]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d806      	bhi.n	800bd68 <inc_lock+0x80>
 800bd5a:	4a29      	ldr	r2, [pc, #164]	; (800be00 <inc_lock+0x118>)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	011b      	lsls	r3, r3, #4
 800bd60:	4413      	add	r3, r2
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1f2      	bne.n	800bd4e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d101      	bne.n	800bd72 <inc_lock+0x8a>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	e040      	b.n	800bdf4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	4922      	ldr	r1, [pc, #136]	; (800be00 <inc_lock+0x118>)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	011b      	lsls	r3, r3, #4
 800bd7c:	440b      	add	r3, r1
 800bd7e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689a      	ldr	r2, [r3, #8]
 800bd84:	491e      	ldr	r1, [pc, #120]	; (800be00 <inc_lock+0x118>)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	011b      	lsls	r3, r3, #4
 800bd8a:	440b      	add	r3, r1
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	695a      	ldr	r2, [r3, #20]
 800bd94:	491a      	ldr	r1, [pc, #104]	; (800be00 <inc_lock+0x118>)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	011b      	lsls	r3, r3, #4
 800bd9a:	440b      	add	r3, r1
 800bd9c:	3308      	adds	r3, #8
 800bd9e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bda0:	4a17      	ldr	r2, [pc, #92]	; (800be00 <inc_lock+0x118>)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	011b      	lsls	r3, r3, #4
 800bda6:	4413      	add	r3, r2
 800bda8:	330c      	adds	r3, #12
 800bdaa:	2200      	movs	r2, #0
 800bdac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d009      	beq.n	800bdc8 <inc_lock+0xe0>
 800bdb4:	4a12      	ldr	r2, [pc, #72]	; (800be00 <inc_lock+0x118>)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	011b      	lsls	r3, r3, #4
 800bdba:	4413      	add	r3, r2
 800bdbc:	330c      	adds	r3, #12
 800bdbe:	881b      	ldrh	r3, [r3, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d001      	beq.n	800bdc8 <inc_lock+0xe0>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	e015      	b.n	800bdf4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d108      	bne.n	800bde0 <inc_lock+0xf8>
 800bdce:	4a0c      	ldr	r2, [pc, #48]	; (800be00 <inc_lock+0x118>)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	011b      	lsls	r3, r3, #4
 800bdd4:	4413      	add	r3, r2
 800bdd6:	330c      	adds	r3, #12
 800bdd8:	881b      	ldrh	r3, [r3, #0]
 800bdda:	3301      	adds	r3, #1
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	e001      	b.n	800bde4 <inc_lock+0xfc>
 800bde0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bde4:	4906      	ldr	r1, [pc, #24]	; (800be00 <inc_lock+0x118>)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	011b      	lsls	r3, r3, #4
 800bdea:	440b      	add	r3, r1
 800bdec:	330c      	adds	r3, #12
 800bdee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3301      	adds	r3, #1
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3714      	adds	r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	200004c8 	.word	0x200004c8

0800be04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	3b01      	subs	r3, #1
 800be10:	607b      	str	r3, [r7, #4]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2b01      	cmp	r3, #1
 800be16:	d825      	bhi.n	800be64 <dec_lock+0x60>
		n = Files[i].ctr;
 800be18:	4a17      	ldr	r2, [pc, #92]	; (800be78 <dec_lock+0x74>)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	011b      	lsls	r3, r3, #4
 800be1e:	4413      	add	r3, r2
 800be20:	330c      	adds	r3, #12
 800be22:	881b      	ldrh	r3, [r3, #0]
 800be24:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800be26:	89fb      	ldrh	r3, [r7, #14]
 800be28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be2c:	d101      	bne.n	800be32 <dec_lock+0x2e>
 800be2e:	2300      	movs	r3, #0
 800be30:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800be32:	89fb      	ldrh	r3, [r7, #14]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d002      	beq.n	800be3e <dec_lock+0x3a>
 800be38:	89fb      	ldrh	r3, [r7, #14]
 800be3a:	3b01      	subs	r3, #1
 800be3c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800be3e:	4a0e      	ldr	r2, [pc, #56]	; (800be78 <dec_lock+0x74>)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	011b      	lsls	r3, r3, #4
 800be44:	4413      	add	r3, r2
 800be46:	330c      	adds	r3, #12
 800be48:	89fa      	ldrh	r2, [r7, #14]
 800be4a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800be4c:	89fb      	ldrh	r3, [r7, #14]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d105      	bne.n	800be5e <dec_lock+0x5a>
 800be52:	4a09      	ldr	r2, [pc, #36]	; (800be78 <dec_lock+0x74>)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	011b      	lsls	r3, r3, #4
 800be58:	4413      	add	r3, r2
 800be5a:	2200      	movs	r2, #0
 800be5c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	737b      	strb	r3, [r7, #13]
 800be62:	e001      	b.n	800be68 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800be64:	2302      	movs	r3, #2
 800be66:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800be68:	7b7b      	ldrb	r3, [r7, #13]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	200004c8 	.word	0x200004c8

0800be7c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800be84:	2300      	movs	r3, #0
 800be86:	60fb      	str	r3, [r7, #12]
 800be88:	e010      	b.n	800beac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800be8a:	4a0d      	ldr	r2, [pc, #52]	; (800bec0 <clear_lock+0x44>)
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	011b      	lsls	r3, r3, #4
 800be90:	4413      	add	r3, r2
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	429a      	cmp	r2, r3
 800be98:	d105      	bne.n	800bea6 <clear_lock+0x2a>
 800be9a:	4a09      	ldr	r2, [pc, #36]	; (800bec0 <clear_lock+0x44>)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	011b      	lsls	r3, r3, #4
 800bea0:	4413      	add	r3, r2
 800bea2:	2200      	movs	r2, #0
 800bea4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	3301      	adds	r3, #1
 800beaa:	60fb      	str	r3, [r7, #12]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d9eb      	bls.n	800be8a <clear_lock+0xe>
	}
}
 800beb2:	bf00      	nop
 800beb4:	bf00      	nop
 800beb6:	3714      	adds	r7, #20
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr
 800bec0:	200004c8 	.word	0x200004c8

0800bec4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	78db      	ldrb	r3, [r3, #3]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d034      	beq.n	800bf42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bedc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	7858      	ldrb	r0, [r3, #1]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bee8:	2301      	movs	r3, #1
 800beea:	697a      	ldr	r2, [r7, #20]
 800beec:	f7ff fd40 	bl	800b970 <disk_write>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d002      	beq.n	800befc <sync_window+0x38>
			res = FR_DISK_ERR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	73fb      	strb	r3, [r7, #15]
 800befa:	e022      	b.n	800bf42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a1b      	ldr	r3, [r3, #32]
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	1ad2      	subs	r2, r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	699b      	ldr	r3, [r3, #24]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d217      	bcs.n	800bf42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	789b      	ldrb	r3, [r3, #2]
 800bf16:	613b      	str	r3, [r7, #16]
 800bf18:	e010      	b.n	800bf3c <sync_window+0x78>
					wsect += fs->fsize;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	699b      	ldr	r3, [r3, #24]
 800bf1e:	697a      	ldr	r2, [r7, #20]
 800bf20:	4413      	add	r3, r2
 800bf22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	7858      	ldrb	r0, [r3, #1]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf2e:	2301      	movs	r3, #1
 800bf30:	697a      	ldr	r2, [r7, #20]
 800bf32:	f7ff fd1d 	bl	800b970 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	3b01      	subs	r3, #1
 800bf3a:	613b      	str	r3, [r7, #16]
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d8eb      	bhi.n	800bf1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3718      	adds	r7, #24
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bf56:	2300      	movs	r3, #0
 800bf58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d01b      	beq.n	800bf9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7ff ffad 	bl	800bec4 <sync_window>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d113      	bne.n	800bf9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	7858      	ldrb	r0, [r3, #1]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf7e:	2301      	movs	r3, #1
 800bf80:	683a      	ldr	r2, [r7, #0]
 800bf82:	f7ff fcd5 	bl	800b930 <disk_read>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d004      	beq.n	800bf96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bf8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bf9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
	...

0800bfa8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f7ff ff87 	bl	800bec4 <sync_window>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d158      	bne.n	800c072 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	2b03      	cmp	r3, #3
 800bfc6:	d148      	bne.n	800c05a <sync_fs+0xb2>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	791b      	ldrb	r3, [r3, #4]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d144      	bne.n	800c05a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	3330      	adds	r3, #48	; 0x30
 800bfd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfd8:	2100      	movs	r1, #0
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7ff fda9 	bl	800bb32 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	3330      	adds	r3, #48	; 0x30
 800bfe4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bfe8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7ff fd38 	bl	800ba62 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	3330      	adds	r3, #48	; 0x30
 800bff6:	4921      	ldr	r1, [pc, #132]	; (800c07c <sync_fs+0xd4>)
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7ff fd4d 	bl	800ba98 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	3330      	adds	r3, #48	; 0x30
 800c002:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c006:	491e      	ldr	r1, [pc, #120]	; (800c080 <sync_fs+0xd8>)
 800c008:	4618      	mov	r0, r3
 800c00a:	f7ff fd45 	bl	800ba98 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3330      	adds	r3, #48	; 0x30
 800c012:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	4619      	mov	r1, r3
 800c01c:	4610      	mov	r0, r2
 800c01e:	f7ff fd3b 	bl	800ba98 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3330      	adds	r3, #48	; 0x30
 800c026:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	4619      	mov	r1, r3
 800c030:	4610      	mov	r0, r2
 800c032:	f7ff fd31 	bl	800ba98 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	69db      	ldr	r3, [r3, #28]
 800c03a:	1c5a      	adds	r2, r3, #1
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	7858      	ldrb	r0, [r3, #1]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04e:	2301      	movs	r3, #1
 800c050:	f7ff fc8e 	bl	800b970 <disk_write>
			fs->fsi_flag = 0;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	785b      	ldrb	r3, [r3, #1]
 800c05e:	2200      	movs	r2, #0
 800c060:	2100      	movs	r1, #0
 800c062:	4618      	mov	r0, r3
 800c064:	f7ff fca4 	bl	800b9b0 <disk_ioctl>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <sync_fs+0xca>
 800c06e:	2301      	movs	r3, #1
 800c070:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c072:	7bfb      	ldrb	r3, [r7, #15]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	41615252 	.word	0x41615252
 800c080:	61417272 	.word	0x61417272

0800c084 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	3b02      	subs	r3, #2
 800c092:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	695b      	ldr	r3, [r3, #20]
 800c098:	3b02      	subs	r3, #2
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d301      	bcc.n	800c0a4 <clust2sect+0x20>
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	e008      	b.n	800c0b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	895b      	ldrh	r3, [r3, #10]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	fb03 f202 	mul.w	r2, r3, r2
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b4:	4413      	add	r3, r2
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b086      	sub	sp, #24
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d904      	bls.n	800c0e2 <get_fat+0x20>
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	695b      	ldr	r3, [r3, #20]
 800c0dc:	683a      	ldr	r2, [r7, #0]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d302      	bcc.n	800c0e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	617b      	str	r3, [r7, #20]
 800c0e6:	e08f      	b.n	800c208 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	2b03      	cmp	r3, #3
 800c0f4:	d062      	beq.n	800c1bc <get_fat+0xfa>
 800c0f6:	2b03      	cmp	r3, #3
 800c0f8:	dc7c      	bgt.n	800c1f4 <get_fat+0x132>
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d002      	beq.n	800c104 <get_fat+0x42>
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d042      	beq.n	800c188 <get_fat+0xc6>
 800c102:	e077      	b.n	800c1f4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	60fb      	str	r3, [r7, #12]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	085b      	lsrs	r3, r3, #1
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	4413      	add	r3, r2
 800c110:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	6a1a      	ldr	r2, [r3, #32]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	0a5b      	lsrs	r3, r3, #9
 800c11a:	4413      	add	r3, r2
 800c11c:	4619      	mov	r1, r3
 800c11e:	6938      	ldr	r0, [r7, #16]
 800c120:	f7ff ff14 	bl	800bf4c <move_window>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d167      	bne.n	800c1fa <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	1c5a      	adds	r2, r3, #1
 800c12e:	60fa      	str	r2, [r7, #12]
 800c130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	4413      	add	r3, r2
 800c138:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c13c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	6a1a      	ldr	r2, [r3, #32]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	0a5b      	lsrs	r3, r3, #9
 800c146:	4413      	add	r3, r2
 800c148:	4619      	mov	r1, r3
 800c14a:	6938      	ldr	r0, [r7, #16]
 800c14c:	f7ff fefe 	bl	800bf4c <move_window>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d153      	bne.n	800c1fe <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	4413      	add	r3, r2
 800c160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c164:	021b      	lsls	r3, r3, #8
 800c166:	461a      	mov	r2, r3
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	f003 0301 	and.w	r3, r3, #1
 800c174:	2b00      	cmp	r3, #0
 800c176:	d002      	beq.n	800c17e <get_fat+0xbc>
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	091b      	lsrs	r3, r3, #4
 800c17c:	e002      	b.n	800c184 <get_fat+0xc2>
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c184:	617b      	str	r3, [r7, #20]
			break;
 800c186:	e03f      	b.n	800c208 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	6a1a      	ldr	r2, [r3, #32]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	0a1b      	lsrs	r3, r3, #8
 800c190:	4413      	add	r3, r2
 800c192:	4619      	mov	r1, r3
 800c194:	6938      	ldr	r0, [r7, #16]
 800c196:	f7ff fed9 	bl	800bf4c <move_window>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d130      	bne.n	800c202 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c1ae:	4413      	add	r3, r2
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7ff fc1b 	bl	800b9ec <ld_word>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	617b      	str	r3, [r7, #20]
			break;
 800c1ba:	e025      	b.n	800c208 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	6a1a      	ldr	r2, [r3, #32]
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	09db      	lsrs	r3, r3, #7
 800c1c4:	4413      	add	r3, r2
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	6938      	ldr	r0, [r7, #16]
 800c1ca:	f7ff febf 	bl	800bf4c <move_window>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d118      	bne.n	800c206 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c1e2:	4413      	add	r3, r2
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7ff fc19 	bl	800ba1c <ld_dword>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c1f0:	617b      	str	r3, [r7, #20]
			break;
 800c1f2:	e009      	b.n	800c208 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	617b      	str	r3, [r7, #20]
 800c1f8:	e006      	b.n	800c208 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1fa:	bf00      	nop
 800c1fc:	e004      	b.n	800c208 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1fe:	bf00      	nop
 800c200:	e002      	b.n	800c208 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c202:	bf00      	nop
 800c204:	e000      	b.n	800c208 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c206:	bf00      	nop
		}
	}

	return val;
 800c208:	697b      	ldr	r3, [r7, #20]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3718      	adds	r7, #24
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c212:	b590      	push	{r4, r7, lr}
 800c214:	b089      	sub	sp, #36	; 0x24
 800c216:	af00      	add	r7, sp, #0
 800c218:	60f8      	str	r0, [r7, #12]
 800c21a:	60b9      	str	r1, [r7, #8]
 800c21c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c21e:	2302      	movs	r3, #2
 800c220:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	2b01      	cmp	r3, #1
 800c226:	f240 80d2 	bls.w	800c3ce <put_fat+0x1bc>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	695b      	ldr	r3, [r3, #20]
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	429a      	cmp	r2, r3
 800c232:	f080 80cc 	bcs.w	800c3ce <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	2b03      	cmp	r3, #3
 800c23c:	f000 8096 	beq.w	800c36c <put_fat+0x15a>
 800c240:	2b03      	cmp	r3, #3
 800c242:	f300 80cd 	bgt.w	800c3e0 <put_fat+0x1ce>
 800c246:	2b01      	cmp	r3, #1
 800c248:	d002      	beq.n	800c250 <put_fat+0x3e>
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d06e      	beq.n	800c32c <put_fat+0x11a>
 800c24e:	e0c7      	b.n	800c3e0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	61bb      	str	r3, [r7, #24]
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	085b      	lsrs	r3, r3, #1
 800c258:	69ba      	ldr	r2, [r7, #24]
 800c25a:	4413      	add	r3, r2
 800c25c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6a1a      	ldr	r2, [r3, #32]
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	0a5b      	lsrs	r3, r3, #9
 800c266:	4413      	add	r3, r2
 800c268:	4619      	mov	r1, r3
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f7ff fe6e 	bl	800bf4c <move_window>
 800c270:	4603      	mov	r3, r0
 800c272:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c274:	7ffb      	ldrb	r3, [r7, #31]
 800c276:	2b00      	cmp	r3, #0
 800c278:	f040 80ab 	bne.w	800c3d2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	1c59      	adds	r1, r3, #1
 800c286:	61b9      	str	r1, [r7, #24]
 800c288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c28c:	4413      	add	r3, r2
 800c28e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00d      	beq.n	800c2b6 <put_fat+0xa4>
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	b25b      	sxtb	r3, r3
 800c2a0:	f003 030f 	and.w	r3, r3, #15
 800c2a4:	b25a      	sxtb	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	011b      	lsls	r3, r3, #4
 800c2ac:	b25b      	sxtb	r3, r3
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	b25b      	sxtb	r3, r3
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	e001      	b.n	800c2ba <put_fat+0xa8>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	697a      	ldr	r2, [r7, #20]
 800c2bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6a1a      	ldr	r2, [r3, #32]
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	0a5b      	lsrs	r3, r3, #9
 800c2cc:	4413      	add	r3, r2
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f7ff fe3b 	bl	800bf4c <move_window>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2da:	7ffb      	ldrb	r3, [r7, #31]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d17a      	bne.n	800c3d6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ec:	4413      	add	r3, r2
 800c2ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	f003 0301 	and.w	r3, r3, #1
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d003      	beq.n	800c302 <put_fat+0xf0>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	091b      	lsrs	r3, r3, #4
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	e00e      	b.n	800c320 <put_fat+0x10e>
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	b25b      	sxtb	r3, r3
 800c308:	f023 030f 	bic.w	r3, r3, #15
 800c30c:	b25a      	sxtb	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	0a1b      	lsrs	r3, r3, #8
 800c312:	b25b      	sxtb	r3, r3
 800c314:	f003 030f 	and.w	r3, r3, #15
 800c318:	b25b      	sxtb	r3, r3
 800c31a:	4313      	orrs	r3, r2
 800c31c:	b25b      	sxtb	r3, r3
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2201      	movs	r2, #1
 800c328:	70da      	strb	r2, [r3, #3]
			break;
 800c32a:	e059      	b.n	800c3e0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6a1a      	ldr	r2, [r3, #32]
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	0a1b      	lsrs	r3, r3, #8
 800c334:	4413      	add	r3, r2
 800c336:	4619      	mov	r1, r3
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f7ff fe07 	bl	800bf4c <move_window>
 800c33e:	4603      	mov	r3, r0
 800c340:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c342:	7ffb      	ldrb	r3, [r7, #31]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d148      	bne.n	800c3da <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	005b      	lsls	r3, r3, #1
 800c352:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c356:	4413      	add	r3, r2
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	b292      	uxth	r2, r2
 800c35c:	4611      	mov	r1, r2
 800c35e:	4618      	mov	r0, r3
 800c360:	f7ff fb7f 	bl	800ba62 <st_word>
			fs->wflag = 1;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2201      	movs	r2, #1
 800c368:	70da      	strb	r2, [r3, #3]
			break;
 800c36a:	e039      	b.n	800c3e0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6a1a      	ldr	r2, [r3, #32]
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	09db      	lsrs	r3, r3, #7
 800c374:	4413      	add	r3, r2
 800c376:	4619      	mov	r1, r3
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7ff fde7 	bl	800bf4c <move_window>
 800c37e:	4603      	mov	r3, r0
 800c380:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c382:	7ffb      	ldrb	r3, [r7, #31]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d12a      	bne.n	800c3de <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c39c:	4413      	add	r3, r2
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7ff fb3c 	bl	800ba1c <ld_dword>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c3aa:	4323      	orrs	r3, r4
 800c3ac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3bc:	4413      	add	r3, r2
 800c3be:	6879      	ldr	r1, [r7, #4]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7ff fb69 	bl	800ba98 <st_dword>
			fs->wflag = 1;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	70da      	strb	r2, [r3, #3]
			break;
 800c3cc:	e008      	b.n	800c3e0 <put_fat+0x1ce>
		}
	}
 800c3ce:	bf00      	nop
 800c3d0:	e006      	b.n	800c3e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c3d2:	bf00      	nop
 800c3d4:	e004      	b.n	800c3e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c3d6:	bf00      	nop
 800c3d8:	e002      	b.n	800c3e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c3da:	bf00      	nop
 800c3dc:	e000      	b.n	800c3e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c3de:	bf00      	nop
	return res;
 800c3e0:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3724      	adds	r7, #36	; 0x24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd90      	pop	{r4, r7, pc}

0800c3ea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b088      	sub	sp, #32
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	60f8      	str	r0, [r7, #12]
 800c3f2:	60b9      	str	r1, [r7, #8]
 800c3f4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d904      	bls.n	800c410 <remove_chain+0x26>
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	695b      	ldr	r3, [r3, #20]
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d301      	bcc.n	800c414 <remove_chain+0x2a>
 800c410:	2302      	movs	r3, #2
 800c412:	e04b      	b.n	800c4ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00c      	beq.n	800c434 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c41a:	f04f 32ff 	mov.w	r2, #4294967295
 800c41e:	6879      	ldr	r1, [r7, #4]
 800c420:	69b8      	ldr	r0, [r7, #24]
 800c422:	f7ff fef6 	bl	800c212 <put_fat>
 800c426:	4603      	mov	r3, r0
 800c428:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c42a:	7ffb      	ldrb	r3, [r7, #31]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d001      	beq.n	800c434 <remove_chain+0x4a>
 800c430:	7ffb      	ldrb	r3, [r7, #31]
 800c432:	e03b      	b.n	800c4ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c434:	68b9      	ldr	r1, [r7, #8]
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	f7ff fe43 	bl	800c0c2 <get_fat>
 800c43c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d031      	beq.n	800c4a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	2b01      	cmp	r3, #1
 800c448:	d101      	bne.n	800c44e <remove_chain+0x64>
 800c44a:	2302      	movs	r3, #2
 800c44c:	e02e      	b.n	800c4ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c454:	d101      	bne.n	800c45a <remove_chain+0x70>
 800c456:	2301      	movs	r3, #1
 800c458:	e028      	b.n	800c4ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c45a:	2200      	movs	r2, #0
 800c45c:	68b9      	ldr	r1, [r7, #8]
 800c45e:	69b8      	ldr	r0, [r7, #24]
 800c460:	f7ff fed7 	bl	800c212 <put_fat>
 800c464:	4603      	mov	r3, r0
 800c466:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c468:	7ffb      	ldrb	r3, [r7, #31]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d001      	beq.n	800c472 <remove_chain+0x88>
 800c46e:	7ffb      	ldrb	r3, [r7, #31]
 800c470:	e01c      	b.n	800c4ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	691a      	ldr	r2, [r3, #16]
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	695b      	ldr	r3, [r3, #20]
 800c47a:	3b02      	subs	r3, #2
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d20b      	bcs.n	800c498 <remove_chain+0xae>
			fs->free_clst++;
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	1c5a      	adds	r2, r3, #1
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c48a:	69bb      	ldr	r3, [r7, #24]
 800c48c:	791b      	ldrb	r3, [r3, #4]
 800c48e:	f043 0301 	orr.w	r3, r3, #1
 800c492:	b2da      	uxtb	r2, r3
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c49c:	69bb      	ldr	r3, [r7, #24]
 800c49e:	695b      	ldr	r3, [r3, #20]
 800c4a0:	68ba      	ldr	r2, [r7, #8]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d3c6      	bcc.n	800c434 <remove_chain+0x4a>
 800c4a6:	e000      	b.n	800c4aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c4a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3720      	adds	r7, #32
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b088      	sub	sp, #32
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d10d      	bne.n	800c4e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d004      	beq.n	800c4e0 <create_chain+0x2c>
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	695b      	ldr	r3, [r3, #20]
 800c4da:	69ba      	ldr	r2, [r7, #24]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d31b      	bcc.n	800c518 <create_chain+0x64>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	61bb      	str	r3, [r7, #24]
 800c4e4:	e018      	b.n	800c518 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f7ff fdea 	bl	800c0c2 <get_fat>
 800c4ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d801      	bhi.n	800c4fa <create_chain+0x46>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e070      	b.n	800c5dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c500:	d101      	bne.n	800c506 <create_chain+0x52>
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	e06a      	b.n	800c5dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d201      	bcs.n	800c514 <create_chain+0x60>
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	e063      	b.n	800c5dc <create_chain+0x128>
		scl = clst;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	3301      	adds	r3, #1
 800c520:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	69fa      	ldr	r2, [r7, #28]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d307      	bcc.n	800c53c <create_chain+0x88>
				ncl = 2;
 800c52c:	2302      	movs	r3, #2
 800c52e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c530:	69fa      	ldr	r2, [r7, #28]
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	429a      	cmp	r2, r3
 800c536:	d901      	bls.n	800c53c <create_chain+0x88>
 800c538:	2300      	movs	r3, #0
 800c53a:	e04f      	b.n	800c5dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c53c:	69f9      	ldr	r1, [r7, #28]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7ff fdbf 	bl	800c0c2 <get_fat>
 800c544:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d00e      	beq.n	800c56a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d003      	beq.n	800c55a <create_chain+0xa6>
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c558:	d101      	bne.n	800c55e <create_chain+0xaa>
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	e03e      	b.n	800c5dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c55e:	69fa      	ldr	r2, [r7, #28]
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	429a      	cmp	r2, r3
 800c564:	d1da      	bne.n	800c51c <create_chain+0x68>
 800c566:	2300      	movs	r3, #0
 800c568:	e038      	b.n	800c5dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c56a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c56c:	f04f 32ff 	mov.w	r2, #4294967295
 800c570:	69f9      	ldr	r1, [r7, #28]
 800c572:	6938      	ldr	r0, [r7, #16]
 800c574:	f7ff fe4d 	bl	800c212 <put_fat>
 800c578:	4603      	mov	r3, r0
 800c57a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c57c:	7dfb      	ldrb	r3, [r7, #23]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d109      	bne.n	800c596 <create_chain+0xe2>
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d006      	beq.n	800c596 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c588:	69fa      	ldr	r2, [r7, #28]
 800c58a:	6839      	ldr	r1, [r7, #0]
 800c58c:	6938      	ldr	r0, [r7, #16]
 800c58e:	f7ff fe40 	bl	800c212 <put_fat>
 800c592:	4603      	mov	r3, r0
 800c594:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c596:	7dfb      	ldrb	r3, [r7, #23]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d116      	bne.n	800c5ca <create_chain+0x116>
		fs->last_clst = ncl;
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	69fa      	ldr	r2, [r7, #28]
 800c5a0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	691a      	ldr	r2, [r3, #16]
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	695b      	ldr	r3, [r3, #20]
 800c5aa:	3b02      	subs	r3, #2
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d804      	bhi.n	800c5ba <create_chain+0x106>
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	691b      	ldr	r3, [r3, #16]
 800c5b4:	1e5a      	subs	r2, r3, #1
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	791b      	ldrb	r3, [r3, #4]
 800c5be:	f043 0301 	orr.w	r3, r3, #1
 800c5c2:	b2da      	uxtb	r2, r3
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	711a      	strb	r2, [r3, #4]
 800c5c8:	e007      	b.n	800c5da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c5ca:	7dfb      	ldrb	r3, [r7, #23]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d102      	bne.n	800c5d6 <create_chain+0x122>
 800c5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d4:	e000      	b.n	800c5d8 <create_chain+0x124>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c5da:	69fb      	ldr	r3, [r7, #28]
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3720      	adds	r7, #32
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b087      	sub	sp, #28
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	0a5b      	lsrs	r3, r3, #9
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	8952      	ldrh	r2, [r2, #10]
 800c604:	fbb3 f3f2 	udiv	r3, r3, r2
 800c608:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	1d1a      	adds	r2, r3, #4
 800c60e:	613a      	str	r2, [r7, #16]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d101      	bne.n	800c61e <clmt_clust+0x3a>
 800c61a:	2300      	movs	r3, #0
 800c61c:	e010      	b.n	800c640 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	429a      	cmp	r2, r3
 800c624:	d307      	bcc.n	800c636 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c626:	697a      	ldr	r2, [r7, #20]
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	1ad3      	subs	r3, r2, r3
 800c62c:	617b      	str	r3, [r7, #20]
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	3304      	adds	r3, #4
 800c632:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c634:	e7e9      	b.n	800c60a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c636:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	4413      	add	r3, r2
}
 800c640:	4618      	mov	r0, r3
 800c642:	371c      	adds	r7, #28
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b086      	sub	sp, #24
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c662:	d204      	bcs.n	800c66e <dir_sdi+0x22>
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	f003 031f 	and.w	r3, r3, #31
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d001      	beq.n	800c672 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c66e:	2302      	movs	r3, #2
 800c670:	e063      	b.n	800c73a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	683a      	ldr	r2, [r7, #0]
 800c676:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d106      	bne.n	800c692 <dir_sdi+0x46>
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d902      	bls.n	800c692 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c690:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d10c      	bne.n	800c6b2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	095b      	lsrs	r3, r3, #5
 800c69c:	693a      	ldr	r2, [r7, #16]
 800c69e:	8912      	ldrh	r2, [r2, #8]
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d301      	bcc.n	800c6a8 <dir_sdi+0x5c>
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	e048      	b.n	800c73a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	61da      	str	r2, [r3, #28]
 800c6b0:	e029      	b.n	800c706 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	895b      	ldrh	r3, [r3, #10]
 800c6b6:	025b      	lsls	r3, r3, #9
 800c6b8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c6ba:	e019      	b.n	800c6f0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6979      	ldr	r1, [r7, #20]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7ff fcfe 	bl	800c0c2 <get_fat>
 800c6c6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ce:	d101      	bne.n	800c6d4 <dir_sdi+0x88>
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e032      	b.n	800c73a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d904      	bls.n	800c6e4 <dir_sdi+0x98>
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	695b      	ldr	r3, [r3, #20]
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d301      	bcc.n	800c6e8 <dir_sdi+0x9c>
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	e028      	b.n	800c73a <dir_sdi+0xee>
			ofs -= csz;
 800c6e8:	683a      	ldr	r2, [r7, #0]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	1ad3      	subs	r3, r2, r3
 800c6ee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c6f0:	683a      	ldr	r2, [r7, #0]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d2e1      	bcs.n	800c6bc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c6f8:	6979      	ldr	r1, [r7, #20]
 800c6fa:	6938      	ldr	r0, [r7, #16]
 800c6fc:	f7ff fcc2 	bl	800c084 <clust2sect>
 800c700:	4602      	mov	r2, r0
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	697a      	ldr	r2, [r7, #20]
 800c70a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	69db      	ldr	r3, [r3, #28]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d101      	bne.n	800c718 <dir_sdi+0xcc>
 800c714:	2302      	movs	r3, #2
 800c716:	e010      	b.n	800c73a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	69da      	ldr	r2, [r3, #28]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	0a5b      	lsrs	r3, r3, #9
 800c720:	441a      	add	r2, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c732:	441a      	add	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3718      	adds	r7, #24
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b086      	sub	sp, #24
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	695b      	ldr	r3, [r3, #20]
 800c756:	3320      	adds	r3, #32
 800c758:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	69db      	ldr	r3, [r3, #28]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d003      	beq.n	800c76a <dir_next+0x28>
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c768:	d301      	bcc.n	800c76e <dir_next+0x2c>
 800c76a:	2304      	movs	r3, #4
 800c76c:	e0aa      	b.n	800c8c4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c774:	2b00      	cmp	r3, #0
 800c776:	f040 8098 	bne.w	800c8aa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	699b      	ldr	r3, [r3, #24]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10b      	bne.n	800c7a4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	095b      	lsrs	r3, r3, #5
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	8912      	ldrh	r2, [r2, #8]
 800c794:	4293      	cmp	r3, r2
 800c796:	f0c0 8088 	bcc.w	800c8aa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	61da      	str	r2, [r3, #28]
 800c7a0:	2304      	movs	r3, #4
 800c7a2:	e08f      	b.n	800c8c4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	0a5b      	lsrs	r3, r3, #9
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	8952      	ldrh	r2, [r2, #10]
 800c7ac:	3a01      	subs	r2, #1
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d17a      	bne.n	800c8aa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	699b      	ldr	r3, [r3, #24]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	4610      	mov	r0, r2
 800c7be:	f7ff fc80 	bl	800c0c2 <get_fat>
 800c7c2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d801      	bhi.n	800c7ce <dir_next+0x8c>
 800c7ca:	2302      	movs	r3, #2
 800c7cc:	e07a      	b.n	800c8c4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d4:	d101      	bne.n	800c7da <dir_next+0x98>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e074      	b.n	800c8c4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d358      	bcc.n	800c896 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d104      	bne.n	800c7f4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	61da      	str	r2, [r3, #28]
 800c7f0:	2304      	movs	r3, #4
 800c7f2:	e067      	b.n	800c8c4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	699b      	ldr	r3, [r3, #24]
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	4610      	mov	r0, r2
 800c7fe:	f7ff fe59 	bl	800c4b4 <create_chain>
 800c802:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d101      	bne.n	800c80e <dir_next+0xcc>
 800c80a:	2307      	movs	r3, #7
 800c80c:	e05a      	b.n	800c8c4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d101      	bne.n	800c818 <dir_next+0xd6>
 800c814:	2302      	movs	r3, #2
 800c816:	e055      	b.n	800c8c4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c81e:	d101      	bne.n	800c824 <dir_next+0xe2>
 800c820:	2301      	movs	r3, #1
 800c822:	e04f      	b.n	800c8c4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f7ff fb4d 	bl	800bec4 <sync_window>
 800c82a:	4603      	mov	r3, r0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d001      	beq.n	800c834 <dir_next+0xf2>
 800c830:	2301      	movs	r3, #1
 800c832:	e047      	b.n	800c8c4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	3330      	adds	r3, #48	; 0x30
 800c838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c83c:	2100      	movs	r1, #0
 800c83e:	4618      	mov	r0, r3
 800c840:	f7ff f977 	bl	800bb32 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c844:	2300      	movs	r3, #0
 800c846:	613b      	str	r3, [r7, #16]
 800c848:	6979      	ldr	r1, [r7, #20]
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f7ff fc1a 	bl	800c084 <clust2sect>
 800c850:	4602      	mov	r2, r0
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	62da      	str	r2, [r3, #44]	; 0x2c
 800c856:	e012      	b.n	800c87e <dir_next+0x13c>
						fs->wflag = 1;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2201      	movs	r2, #1
 800c85c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c85e:	68f8      	ldr	r0, [r7, #12]
 800c860:	f7ff fb30 	bl	800bec4 <sync_window>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d001      	beq.n	800c86e <dir_next+0x12c>
 800c86a:	2301      	movs	r3, #1
 800c86c:	e02a      	b.n	800c8c4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	3301      	adds	r3, #1
 800c872:	613b      	str	r3, [r7, #16]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c878:	1c5a      	adds	r2, r3, #1
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	895b      	ldrh	r3, [r3, #10]
 800c882:	461a      	mov	r2, r3
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	4293      	cmp	r3, r2
 800c888:	d3e6      	bcc.n	800c858 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	1ad2      	subs	r2, r2, r3
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	697a      	ldr	r2, [r7, #20]
 800c89a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c89c:	6979      	ldr	r1, [r7, #20]
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f7ff fbf0 	bl	800c084 <clust2sect>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8bc:	441a      	add	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b086      	sub	sp, #24
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c8dc:	2100      	movs	r1, #0
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f7ff feb4 	bl	800c64c <dir_sdi>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c8e8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d12b      	bne.n	800c946 <dir_alloc+0x7a>
		n = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	69db      	ldr	r3, [r3, #28]
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f7ff fb27 	bl	800bf4c <move_window>
 800c8fe:	4603      	mov	r3, r0
 800c900:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c902:	7dfb      	ldrb	r3, [r7, #23]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d11d      	bne.n	800c944 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6a1b      	ldr	r3, [r3, #32]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	2be5      	cmp	r3, #229	; 0xe5
 800c910:	d004      	beq.n	800c91c <dir_alloc+0x50>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a1b      	ldr	r3, [r3, #32]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d107      	bne.n	800c92c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	3301      	adds	r3, #1
 800c920:	613b      	str	r3, [r7, #16]
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	429a      	cmp	r2, r3
 800c928:	d102      	bne.n	800c930 <dir_alloc+0x64>
 800c92a:	e00c      	b.n	800c946 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c92c:	2300      	movs	r3, #0
 800c92e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c930:	2101      	movs	r1, #1
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f7ff ff05 	bl	800c742 <dir_next>
 800c938:	4603      	mov	r3, r0
 800c93a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d0d7      	beq.n	800c8f2 <dir_alloc+0x26>
 800c942:	e000      	b.n	800c946 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c944:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c946:	7dfb      	ldrb	r3, [r7, #23]
 800c948:	2b04      	cmp	r3, #4
 800c94a:	d101      	bne.n	800c950 <dir_alloc+0x84>
 800c94c:	2307      	movs	r3, #7
 800c94e:	75fb      	strb	r3, [r7, #23]
	return res;
 800c950:	7dfb      	ldrb	r3, [r7, #23]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3718      	adds	r7, #24
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	331a      	adds	r3, #26
 800c968:	4618      	mov	r0, r3
 800c96a:	f7ff f83f 	bl	800b9ec <ld_word>
 800c96e:	4603      	mov	r3, r0
 800c970:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	2b03      	cmp	r3, #3
 800c978:	d109      	bne.n	800c98e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	3314      	adds	r3, #20
 800c97e:	4618      	mov	r0, r3
 800c980:	f7ff f834 	bl	800b9ec <ld_word>
 800c984:	4603      	mov	r3, r0
 800c986:	041b      	lsls	r3, r3, #16
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c98e:	68fb      	ldr	r3, [r7, #12]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	331a      	adds	r3, #26
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	b292      	uxth	r2, r2
 800c9ac:	4611      	mov	r1, r2
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7ff f857 	bl	800ba62 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	2b03      	cmp	r3, #3
 800c9ba:	d109      	bne.n	800c9d0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	f103 0214 	add.w	r2, r3, #20
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	0c1b      	lsrs	r3, r3, #16
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	4610      	mov	r0, r2
 800c9cc:	f7ff f849 	bl	800ba62 <st_word>
	}
}
 800c9d0:	bf00      	nop
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c9e2:	2304      	movs	r3, #4
 800c9e4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800c9ec:	e03c      	b.n	800ca68 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	69db      	ldr	r3, [r3, #28]
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	6938      	ldr	r0, [r7, #16]
 800c9f6:	f7ff faa9 	bl	800bf4c <move_window>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d136      	bne.n	800ca72 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6a1b      	ldr	r3, [r3, #32]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d102      	bne.n	800ca18 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ca12:	2304      	movs	r3, #4
 800ca14:	75fb      	strb	r3, [r7, #23]
 800ca16:	e031      	b.n	800ca7c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a1b      	ldr	r3, [r3, #32]
 800ca1c:	330b      	adds	r3, #11
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca24:	73bb      	strb	r3, [r7, #14]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	7bba      	ldrb	r2, [r7, #14]
 800ca2a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
 800ca2e:	2be5      	cmp	r3, #229	; 0xe5
 800ca30:	d011      	beq.n	800ca56 <dir_read+0x7e>
 800ca32:	7bfb      	ldrb	r3, [r7, #15]
 800ca34:	2b2e      	cmp	r3, #46	; 0x2e
 800ca36:	d00e      	beq.n	800ca56 <dir_read+0x7e>
 800ca38:	7bbb      	ldrb	r3, [r7, #14]
 800ca3a:	2b0f      	cmp	r3, #15
 800ca3c:	d00b      	beq.n	800ca56 <dir_read+0x7e>
 800ca3e:	7bbb      	ldrb	r3, [r7, #14]
 800ca40:	f023 0320 	bic.w	r3, r3, #32
 800ca44:	2b08      	cmp	r3, #8
 800ca46:	bf0c      	ite	eq
 800ca48:	2301      	moveq	r3, #1
 800ca4a:	2300      	movne	r3, #0
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	461a      	mov	r2, r3
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d00f      	beq.n	800ca76 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ca56:	2100      	movs	r1, #0
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f7ff fe72 	bl	800c742 <dir_next>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca62:	7dfb      	ldrb	r3, [r7, #23]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d108      	bne.n	800ca7a <dir_read+0xa2>
	while (dp->sect) {
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	69db      	ldr	r3, [r3, #28]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1be      	bne.n	800c9ee <dir_read+0x16>
 800ca70:	e004      	b.n	800ca7c <dir_read+0xa4>
		if (res != FR_OK) break;
 800ca72:	bf00      	nop
 800ca74:	e002      	b.n	800ca7c <dir_read+0xa4>
				break;
 800ca76:	bf00      	nop
 800ca78:	e000      	b.n	800ca7c <dir_read+0xa4>
		if (res != FR_OK) break;
 800ca7a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d002      	beq.n	800ca88 <dir_read+0xb0>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2200      	movs	r2, #0
 800ca86:	61da      	str	r2, [r3, #28]
	return res;
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b086      	sub	sp, #24
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800caa0:	2100      	movs	r1, #0
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7ff fdd2 	bl	800c64c <dir_sdi>
 800caa8:	4603      	mov	r3, r0
 800caaa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800caac:	7dfb      	ldrb	r3, [r7, #23]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d001      	beq.n	800cab6 <dir_find+0x24>
 800cab2:	7dfb      	ldrb	r3, [r7, #23]
 800cab4:	e03e      	b.n	800cb34 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	69db      	ldr	r3, [r3, #28]
 800caba:	4619      	mov	r1, r3
 800cabc:	6938      	ldr	r0, [r7, #16]
 800cabe:	f7ff fa45 	bl	800bf4c <move_window>
 800cac2:	4603      	mov	r3, r0
 800cac4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cac6:	7dfb      	ldrb	r3, [r7, #23]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d12f      	bne.n	800cb2c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6a1b      	ldr	r3, [r3, #32]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cad4:	7bfb      	ldrb	r3, [r7, #15]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d102      	bne.n	800cae0 <dir_find+0x4e>
 800cada:	2304      	movs	r3, #4
 800cadc:	75fb      	strb	r3, [r7, #23]
 800cade:	e028      	b.n	800cb32 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6a1b      	ldr	r3, [r3, #32]
 800cae4:	330b      	adds	r3, #11
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800caec:	b2da      	uxtb	r2, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a1b      	ldr	r3, [r3, #32]
 800caf6:	330b      	adds	r3, #11
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	f003 0308 	and.w	r3, r3, #8
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d10a      	bne.n	800cb18 <dir_find+0x86>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a18      	ldr	r0, [r3, #32]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	3324      	adds	r3, #36	; 0x24
 800cb0a:	220b      	movs	r2, #11
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	f7ff f82b 	bl	800bb68 <mem_cmp>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d00b      	beq.n	800cb30 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cb18:	2100      	movs	r1, #0
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff fe11 	bl	800c742 <dir_next>
 800cb20:	4603      	mov	r3, r0
 800cb22:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cb24:	7dfb      	ldrb	r3, [r7, #23]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d0c5      	beq.n	800cab6 <dir_find+0x24>
 800cb2a:	e002      	b.n	800cb32 <dir_find+0xa0>
		if (res != FR_OK) break;
 800cb2c:	bf00      	nop
 800cb2e:	e000      	b.n	800cb32 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cb30:	bf00      	nop

	return res;
 800cb32:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3718      	adds	r7, #24
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cb4a:	2101      	movs	r1, #1
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7ff febd 	bl	800c8cc <dir_alloc>
 800cb52:	4603      	mov	r3, r0
 800cb54:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cb56:	7bfb      	ldrb	r3, [r7, #15]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d11c      	bne.n	800cb96 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	69db      	ldr	r3, [r3, #28]
 800cb60:	4619      	mov	r1, r3
 800cb62:	68b8      	ldr	r0, [r7, #8]
 800cb64:	f7ff f9f2 	bl	800bf4c <move_window>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cb6c:	7bfb      	ldrb	r3, [r7, #15]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d111      	bne.n	800cb96 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a1b      	ldr	r3, [r3, #32]
 800cb76:	2220      	movs	r2, #32
 800cb78:	2100      	movs	r1, #0
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fe ffd9 	bl	800bb32 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6a18      	ldr	r0, [r3, #32]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	3324      	adds	r3, #36	; 0x24
 800cb88:	220b      	movs	r2, #11
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	f7fe ffb0 	bl	800baf0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	2201      	movs	r2, #1
 800cb94:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cb96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b086      	sub	sp, #24
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	2200      	movs	r2, #0
 800cbae:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	69db      	ldr	r3, [r3, #28]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d04e      	beq.n	800cc56 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	613b      	str	r3, [r7, #16]
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800cbc0:	e021      	b.n	800cc06 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6a1a      	ldr	r2, [r3, #32]
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	1c59      	adds	r1, r3, #1
 800cbca:	6179      	str	r1, [r7, #20]
 800cbcc:	4413      	add	r3, r2
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
 800cbd4:	2b20      	cmp	r3, #32
 800cbd6:	d100      	bne.n	800cbda <get_fileinfo+0x3a>
 800cbd8:	e015      	b.n	800cc06 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cbda:	7bfb      	ldrb	r3, [r7, #15]
 800cbdc:	2b05      	cmp	r3, #5
 800cbde:	d101      	bne.n	800cbe4 <get_fileinfo+0x44>
 800cbe0:	23e5      	movs	r3, #229	; 0xe5
 800cbe2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	2b09      	cmp	r3, #9
 800cbe8:	d106      	bne.n	800cbf8 <get_fileinfo+0x58>
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	1c5a      	adds	r2, r3, #1
 800cbee:	613a      	str	r2, [r7, #16]
 800cbf0:	683a      	ldr	r2, [r7, #0]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	222e      	movs	r2, #46	; 0x2e
 800cbf6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	613a      	str	r2, [r7, #16]
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	4413      	add	r3, r2
 800cc02:	7bfa      	ldrb	r2, [r7, #15]
 800cc04:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	2b0a      	cmp	r3, #10
 800cc0a:	d9da      	bls.n	800cbc2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	4413      	add	r3, r2
 800cc12:	3309      	adds	r3, #9
 800cc14:	2200      	movs	r2, #0
 800cc16:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6a1b      	ldr	r3, [r3, #32]
 800cc1c:	7ada      	ldrb	r2, [r3, #11]
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a1b      	ldr	r3, [r3, #32]
 800cc26:	331c      	adds	r3, #28
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7fe fef7 	bl	800ba1c <ld_dword>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a1b      	ldr	r3, [r3, #32]
 800cc38:	3316      	adds	r3, #22
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7fe feee 	bl	800ba1c <ld_dword>
 800cc40:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	80da      	strh	r2, [r3, #6]
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	0c1b      	lsrs	r3, r3, #16
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	809a      	strh	r2, [r3, #4]
 800cc54:	e000      	b.n	800cc58 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cc56:	bf00      	nop
}
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
	...

0800cc60 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b088      	sub	sp, #32
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	60fb      	str	r3, [r7, #12]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	3324      	adds	r3, #36	; 0x24
 800cc74:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cc76:	220b      	movs	r2, #11
 800cc78:	2120      	movs	r1, #32
 800cc7a:	68b8      	ldr	r0, [r7, #8]
 800cc7c:	f7fe ff59 	bl	800bb32 <mem_set>
	si = i = 0; ni = 8;
 800cc80:	2300      	movs	r3, #0
 800cc82:	613b      	str	r3, [r7, #16]
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	61fb      	str	r3, [r7, #28]
 800cc88:	2308      	movs	r3, #8
 800cc8a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	1c5a      	adds	r2, r3, #1
 800cc90:	61fa      	str	r2, [r7, #28]
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	4413      	add	r3, r2
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cc9a:	7efb      	ldrb	r3, [r7, #27]
 800cc9c:	2b20      	cmp	r3, #32
 800cc9e:	d94e      	bls.n	800cd3e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cca0:	7efb      	ldrb	r3, [r7, #27]
 800cca2:	2b2f      	cmp	r3, #47	; 0x2f
 800cca4:	d006      	beq.n	800ccb4 <create_name+0x54>
 800cca6:	7efb      	ldrb	r3, [r7, #27]
 800cca8:	2b5c      	cmp	r3, #92	; 0x5c
 800ccaa:	d110      	bne.n	800ccce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ccac:	e002      	b.n	800ccb4 <create_name+0x54>
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	61fb      	str	r3, [r7, #28]
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	69fb      	ldr	r3, [r7, #28]
 800ccb8:	4413      	add	r3, r2
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	2b2f      	cmp	r3, #47	; 0x2f
 800ccbe:	d0f6      	beq.n	800ccae <create_name+0x4e>
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	2b5c      	cmp	r3, #92	; 0x5c
 800ccca:	d0f0      	beq.n	800ccae <create_name+0x4e>
			break;
 800cccc:	e038      	b.n	800cd40 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ccce:	7efb      	ldrb	r3, [r7, #27]
 800ccd0:	2b2e      	cmp	r3, #46	; 0x2e
 800ccd2:	d003      	beq.n	800ccdc <create_name+0x7c>
 800ccd4:	693a      	ldr	r2, [r7, #16]
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d30c      	bcc.n	800ccf6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	2b0b      	cmp	r3, #11
 800cce0:	d002      	beq.n	800cce8 <create_name+0x88>
 800cce2:	7efb      	ldrb	r3, [r7, #27]
 800cce4:	2b2e      	cmp	r3, #46	; 0x2e
 800cce6:	d001      	beq.n	800ccec <create_name+0x8c>
 800cce8:	2306      	movs	r3, #6
 800ccea:	e044      	b.n	800cd76 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ccec:	2308      	movs	r3, #8
 800ccee:	613b      	str	r3, [r7, #16]
 800ccf0:	230b      	movs	r3, #11
 800ccf2:	617b      	str	r3, [r7, #20]
			continue;
 800ccf4:	e022      	b.n	800cd3c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ccf6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	da04      	bge.n	800cd08 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ccfe:	7efb      	ldrb	r3, [r7, #27]
 800cd00:	3b80      	subs	r3, #128	; 0x80
 800cd02:	4a1f      	ldr	r2, [pc, #124]	; (800cd80 <create_name+0x120>)
 800cd04:	5cd3      	ldrb	r3, [r2, r3]
 800cd06:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cd08:	7efb      	ldrb	r3, [r7, #27]
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	481d      	ldr	r0, [pc, #116]	; (800cd84 <create_name+0x124>)
 800cd0e:	f7fe ff52 	bl	800bbb6 <chk_chr>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d001      	beq.n	800cd1c <create_name+0xbc>
 800cd18:	2306      	movs	r3, #6
 800cd1a:	e02c      	b.n	800cd76 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cd1c:	7efb      	ldrb	r3, [r7, #27]
 800cd1e:	2b60      	cmp	r3, #96	; 0x60
 800cd20:	d905      	bls.n	800cd2e <create_name+0xce>
 800cd22:	7efb      	ldrb	r3, [r7, #27]
 800cd24:	2b7a      	cmp	r3, #122	; 0x7a
 800cd26:	d802      	bhi.n	800cd2e <create_name+0xce>
 800cd28:	7efb      	ldrb	r3, [r7, #27]
 800cd2a:	3b20      	subs	r3, #32
 800cd2c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	1c5a      	adds	r2, r3, #1
 800cd32:	613a      	str	r2, [r7, #16]
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	4413      	add	r3, r2
 800cd38:	7efa      	ldrb	r2, [r7, #27]
 800cd3a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cd3c:	e7a6      	b.n	800cc8c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cd3e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	441a      	add	r2, r3
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d101      	bne.n	800cd54 <create_name+0xf4>
 800cd50:	2306      	movs	r3, #6
 800cd52:	e010      	b.n	800cd76 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	2be5      	cmp	r3, #229	; 0xe5
 800cd5a:	d102      	bne.n	800cd62 <create_name+0x102>
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	2205      	movs	r2, #5
 800cd60:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cd62:	7efb      	ldrb	r3, [r7, #27]
 800cd64:	2b20      	cmp	r3, #32
 800cd66:	d801      	bhi.n	800cd6c <create_name+0x10c>
 800cd68:	2204      	movs	r2, #4
 800cd6a:	e000      	b.n	800cd6e <create_name+0x10e>
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	330b      	adds	r3, #11
 800cd72:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cd74:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3720      	adds	r7, #32
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	08014818 	.word	0x08014818
 800cd84:	08014758 	.word	0x08014758

0800cd88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b086      	sub	sp, #24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cd9c:	e002      	b.n	800cda4 <follow_path+0x1c>
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	3301      	adds	r3, #1
 800cda2:	603b      	str	r3, [r7, #0]
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	2b2f      	cmp	r3, #47	; 0x2f
 800cdaa:	d0f8      	beq.n	800cd9e <follow_path+0x16>
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	2b5c      	cmp	r3, #92	; 0x5c
 800cdb2:	d0f4      	beq.n	800cd9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	2b1f      	cmp	r3, #31
 800cdc0:	d80a      	bhi.n	800cdd8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2280      	movs	r2, #128	; 0x80
 800cdc6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cdca:	2100      	movs	r1, #0
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7ff fc3d 	bl	800c64c <dir_sdi>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	75fb      	strb	r3, [r7, #23]
 800cdd6:	e043      	b.n	800ce60 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cdd8:	463b      	mov	r3, r7
 800cdda:	4619      	mov	r1, r3
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7ff ff3f 	bl	800cc60 <create_name>
 800cde2:	4603      	mov	r3, r0
 800cde4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d134      	bne.n	800ce56 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f7ff fe50 	bl	800ca92 <dir_find>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cdfc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cdfe:	7dfb      	ldrb	r3, [r7, #23]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d00a      	beq.n	800ce1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ce04:	7dfb      	ldrb	r3, [r7, #23]
 800ce06:	2b04      	cmp	r3, #4
 800ce08:	d127      	bne.n	800ce5a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ce0a:	7afb      	ldrb	r3, [r7, #11]
 800ce0c:	f003 0304 	and.w	r3, r3, #4
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d122      	bne.n	800ce5a <follow_path+0xd2>
 800ce14:	2305      	movs	r3, #5
 800ce16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ce18:	e01f      	b.n	800ce5a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ce1a:	7afb      	ldrb	r3, [r7, #11]
 800ce1c:	f003 0304 	and.w	r3, r3, #4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d11c      	bne.n	800ce5e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	799b      	ldrb	r3, [r3, #6]
 800ce28:	f003 0310 	and.w	r3, r3, #16
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d102      	bne.n	800ce36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ce30:	2305      	movs	r3, #5
 800ce32:	75fb      	strb	r3, [r7, #23]
 800ce34:	e014      	b.n	800ce60 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	695b      	ldr	r3, [r3, #20]
 800ce40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce44:	4413      	add	r3, r2
 800ce46:	4619      	mov	r1, r3
 800ce48:	68f8      	ldr	r0, [r7, #12]
 800ce4a:	f7ff fd86 	bl	800c95a <ld_clust>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce54:	e7c0      	b.n	800cdd8 <follow_path+0x50>
			if (res != FR_OK) break;
 800ce56:	bf00      	nop
 800ce58:	e002      	b.n	800ce60 <follow_path+0xd8>
				break;
 800ce5a:	bf00      	nop
 800ce5c:	e000      	b.n	800ce60 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ce5e:	bf00      	nop
			}
		}
	}

	return res;
 800ce60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3718      	adds	r7, #24
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ce6a:	b480      	push	{r7}
 800ce6c:	b087      	sub	sp, #28
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ce72:	f04f 33ff 	mov.w	r3, #4294967295
 800ce76:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d031      	beq.n	800cee4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	617b      	str	r3, [r7, #20]
 800ce86:	e002      	b.n	800ce8e <get_ldnumber+0x24>
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	617b      	str	r3, [r7, #20]
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	2b20      	cmp	r3, #32
 800ce94:	d903      	bls.n	800ce9e <get_ldnumber+0x34>
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	2b3a      	cmp	r3, #58	; 0x3a
 800ce9c:	d1f4      	bne.n	800ce88 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	2b3a      	cmp	r3, #58	; 0x3a
 800cea4:	d11c      	bne.n	800cee0 <get_ldnumber+0x76>
			tp = *path;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	1c5a      	adds	r2, r3, #1
 800ceb0:	60fa      	str	r2, [r7, #12]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	3b30      	subs	r3, #48	; 0x30
 800ceb6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2b09      	cmp	r3, #9
 800cebc:	d80e      	bhi.n	800cedc <get_ldnumber+0x72>
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d10a      	bne.n	800cedc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d107      	bne.n	800cedc <get_ldnumber+0x72>
					vol = (int)i;
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	3301      	adds	r3, #1
 800ced4:	617b      	str	r3, [r7, #20]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	e002      	b.n	800cee6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cee0:	2300      	movs	r3, #0
 800cee2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cee4:	693b      	ldr	r3, [r7, #16]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	371c      	adds	r7, #28
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
	...

0800cef4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	70da      	strb	r2, [r3, #3]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f04f 32ff 	mov.w	r2, #4294967295
 800cf0a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cf0c:	6839      	ldr	r1, [r7, #0]
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7ff f81c 	bl	800bf4c <move_window>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <check_fs+0x2a>
 800cf1a:	2304      	movs	r3, #4
 800cf1c:	e038      	b.n	800cf90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	3330      	adds	r3, #48	; 0x30
 800cf22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fe fd60 	bl	800b9ec <ld_word>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	461a      	mov	r2, r3
 800cf30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d001      	beq.n	800cf3c <check_fs+0x48>
 800cf38:	2303      	movs	r3, #3
 800cf3a:	e029      	b.n	800cf90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf42:	2be9      	cmp	r3, #233	; 0xe9
 800cf44:	d009      	beq.n	800cf5a <check_fs+0x66>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf4c:	2beb      	cmp	r3, #235	; 0xeb
 800cf4e:	d11e      	bne.n	800cf8e <check_fs+0x9a>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cf56:	2b90      	cmp	r3, #144	; 0x90
 800cf58:	d119      	bne.n	800cf8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	3330      	adds	r3, #48	; 0x30
 800cf5e:	3336      	adds	r3, #54	; 0x36
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7fe fd5b 	bl	800ba1c <ld_dword>
 800cf66:	4603      	mov	r3, r0
 800cf68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf6c:	4a0a      	ldr	r2, [pc, #40]	; (800cf98 <check_fs+0xa4>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d101      	bne.n	800cf76 <check_fs+0x82>
 800cf72:	2300      	movs	r3, #0
 800cf74:	e00c      	b.n	800cf90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	3330      	adds	r3, #48	; 0x30
 800cf7a:	3352      	adds	r3, #82	; 0x52
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fe fd4d 	bl	800ba1c <ld_dword>
 800cf82:	4603      	mov	r3, r0
 800cf84:	4a05      	ldr	r2, [pc, #20]	; (800cf9c <check_fs+0xa8>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d101      	bne.n	800cf8e <check_fs+0x9a>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	e000      	b.n	800cf90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cf8e:	2302      	movs	r3, #2
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	00544146 	.word	0x00544146
 800cf9c:	33544146 	.word	0x33544146

0800cfa0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b096      	sub	sp, #88	; 0x58
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	4613      	mov	r3, r2
 800cfac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f7ff ff58 	bl	800ce6a <get_ldnumber>
 800cfba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cfbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	da01      	bge.n	800cfc6 <find_volume+0x26>
 800cfc2:	230b      	movs	r3, #11
 800cfc4:	e22e      	b.n	800d424 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cfc6:	4aa8      	ldr	r2, [pc, #672]	; (800d268 <find_volume+0x2c8>)
 800cfc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d101      	bne.n	800cfda <find_volume+0x3a>
 800cfd6:	230c      	movs	r3, #12
 800cfd8:	e224      	b.n	800d424 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfde:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cfe0:	79fb      	ldrb	r3, [r7, #7]
 800cfe2:	f023 0301 	bic.w	r3, r3, #1
 800cfe6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d01a      	beq.n	800d026 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	785b      	ldrb	r3, [r3, #1]
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7fe fc5b 	bl	800b8b0 <disk_status>
 800cffa:	4603      	mov	r3, r0
 800cffc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d004:	f003 0301 	and.w	r3, r3, #1
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d10c      	bne.n	800d026 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d00c:	79fb      	ldrb	r3, [r7, #7]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d007      	beq.n	800d022 <find_volume+0x82>
 800d012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d016:	f003 0304 	and.w	r3, r3, #4
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d001      	beq.n	800d022 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d01e:	230a      	movs	r3, #10
 800d020:	e200      	b.n	800d424 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800d022:	2300      	movs	r3, #0
 800d024:	e1fe      	b.n	800d424 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d028:	2200      	movs	r2, #0
 800d02a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d02e:	b2da      	uxtb	r2, r3
 800d030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d032:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d036:	785b      	ldrb	r3, [r3, #1]
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fe fc53 	bl	800b8e4 <disk_initialize>
 800d03e:	4603      	mov	r3, r0
 800d040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d044:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d048:	f003 0301 	and.w	r3, r3, #1
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d001      	beq.n	800d054 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d050:	2303      	movs	r3, #3
 800d052:	e1e7      	b.n	800d424 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d054:	79fb      	ldrb	r3, [r7, #7]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d007      	beq.n	800d06a <find_volume+0xca>
 800d05a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d05e:	f003 0304 	and.w	r3, r3, #4
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d066:	230a      	movs	r3, #10
 800d068:	e1dc      	b.n	800d424 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d06a:	2300      	movs	r3, #0
 800d06c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d06e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d070:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d072:	f7ff ff3f 	bl	800cef4 <check_fs>
 800d076:	4603      	mov	r3, r0
 800d078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d07c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d080:	2b02      	cmp	r3, #2
 800d082:	d14b      	bne.n	800d11c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d084:	2300      	movs	r3, #0
 800d086:	643b      	str	r3, [r7, #64]	; 0x40
 800d088:	e01f      	b.n	800d0ca <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d092:	011b      	lsls	r3, r3, #4
 800d094:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d098:	4413      	add	r3, r2
 800d09a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09e:	3304      	adds	r3, #4
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d006      	beq.n	800d0b4 <find_volume+0x114>
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a8:	3308      	adds	r3, #8
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fe fcb6 	bl	800ba1c <ld_dword>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	e000      	b.n	800d0b6 <find_volume+0x116>
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d0be:	440b      	add	r3, r1
 800d0c0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	643b      	str	r3, [r7, #64]	; 0x40
 800d0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d9dc      	bls.n	800d08a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d0d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d002      	beq.n	800d0e0 <find_volume+0x140>
 800d0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d0e8:	4413      	add	r3, r2
 800d0ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d0ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d0f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d005      	beq.n	800d102 <find_volume+0x162>
 800d0f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0fa:	f7ff fefb 	bl	800cef4 <check_fs>
 800d0fe:	4603      	mov	r3, r0
 800d100:	e000      	b.n	800d104 <find_volume+0x164>
 800d102:	2303      	movs	r3, #3
 800d104:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d108:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d905      	bls.n	800d11c <find_volume+0x17c>
 800d110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d112:	3301      	adds	r3, #1
 800d114:	643b      	str	r3, [r7, #64]	; 0x40
 800d116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d118:	2b03      	cmp	r3, #3
 800d11a:	d9e1      	bls.n	800d0e0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d11c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d120:	2b04      	cmp	r3, #4
 800d122:	d101      	bne.n	800d128 <find_volume+0x188>
 800d124:	2301      	movs	r3, #1
 800d126:	e17d      	b.n	800d424 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d128:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d901      	bls.n	800d134 <find_volume+0x194>
 800d130:	230d      	movs	r3, #13
 800d132:	e177      	b.n	800d424 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d136:	3330      	adds	r3, #48	; 0x30
 800d138:	330b      	adds	r3, #11
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7fe fc56 	bl	800b9ec <ld_word>
 800d140:	4603      	mov	r3, r0
 800d142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d146:	d001      	beq.n	800d14c <find_volume+0x1ac>
 800d148:	230d      	movs	r3, #13
 800d14a:	e16b      	b.n	800d424 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14e:	3330      	adds	r3, #48	; 0x30
 800d150:	3316      	adds	r3, #22
 800d152:	4618      	mov	r0, r3
 800d154:	f7fe fc4a 	bl	800b9ec <ld_word>
 800d158:	4603      	mov	r3, r0
 800d15a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d15c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d106      	bne.n	800d170 <find_volume+0x1d0>
 800d162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d164:	3330      	adds	r3, #48	; 0x30
 800d166:	3324      	adds	r3, #36	; 0x24
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fe fc57 	bl	800ba1c <ld_dword>
 800d16e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d174:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d178:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d182:	789b      	ldrb	r3, [r3, #2]
 800d184:	2b01      	cmp	r3, #1
 800d186:	d005      	beq.n	800d194 <find_volume+0x1f4>
 800d188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18a:	789b      	ldrb	r3, [r3, #2]
 800d18c:	2b02      	cmp	r3, #2
 800d18e:	d001      	beq.n	800d194 <find_volume+0x1f4>
 800d190:	230d      	movs	r3, #13
 800d192:	e147      	b.n	800d424 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d196:	789b      	ldrb	r3, [r3, #2]
 800d198:	461a      	mov	r2, r3
 800d19a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d19c:	fb02 f303 	mul.w	r3, r2, r3
 800d1a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	895b      	ldrh	r3, [r3, #10]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d008      	beq.n	800d1c8 <find_volume+0x228>
 800d1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b8:	895b      	ldrh	r3, [r3, #10]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1be:	895b      	ldrh	r3, [r3, #10]
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	4013      	ands	r3, r2
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d001      	beq.n	800d1cc <find_volume+0x22c>
 800d1c8:	230d      	movs	r3, #13
 800d1ca:	e12b      	b.n	800d424 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ce:	3330      	adds	r3, #48	; 0x30
 800d1d0:	3311      	adds	r3, #17
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fe fc0a 	bl	800b9ec <ld_word>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	461a      	mov	r2, r3
 800d1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e2:	891b      	ldrh	r3, [r3, #8]
 800d1e4:	f003 030f 	and.w	r3, r3, #15
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d001      	beq.n	800d1f2 <find_volume+0x252>
 800d1ee:	230d      	movs	r3, #13
 800d1f0:	e118      	b.n	800d424 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f4:	3330      	adds	r3, #48	; 0x30
 800d1f6:	3313      	adds	r3, #19
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fe fbf7 	bl	800b9ec <ld_word>
 800d1fe:	4603      	mov	r3, r0
 800d200:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d204:	2b00      	cmp	r3, #0
 800d206:	d106      	bne.n	800d216 <find_volume+0x276>
 800d208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20a:	3330      	adds	r3, #48	; 0x30
 800d20c:	3320      	adds	r3, #32
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fe fc04 	bl	800ba1c <ld_dword>
 800d214:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d218:	3330      	adds	r3, #48	; 0x30
 800d21a:	330e      	adds	r3, #14
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe fbe5 	bl	800b9ec <ld_word>
 800d222:	4603      	mov	r3, r0
 800d224:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d226:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d101      	bne.n	800d230 <find_volume+0x290>
 800d22c:	230d      	movs	r3, #13
 800d22e:	e0f9      	b.n	800d424 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d230:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d234:	4413      	add	r3, r2
 800d236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d238:	8912      	ldrh	r2, [r2, #8]
 800d23a:	0912      	lsrs	r2, r2, #4
 800d23c:	b292      	uxth	r2, r2
 800d23e:	4413      	add	r3, r2
 800d240:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	429a      	cmp	r2, r3
 800d248:	d201      	bcs.n	800d24e <find_volume+0x2ae>
 800d24a:	230d      	movs	r3, #13
 800d24c:	e0ea      	b.n	800d424 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d24e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d252:	1ad3      	subs	r3, r2, r3
 800d254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d256:	8952      	ldrh	r2, [r2, #10]
 800d258:	fbb3 f3f2 	udiv	r3, r3, r2
 800d25c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d260:	2b00      	cmp	r3, #0
 800d262:	d103      	bne.n	800d26c <find_volume+0x2cc>
 800d264:	230d      	movs	r3, #13
 800d266:	e0dd      	b.n	800d424 <find_volume+0x484>
 800d268:	200004c0 	.word	0x200004c0
		fmt = FS_FAT32;
 800d26c:	2303      	movs	r3, #3
 800d26e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d274:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d278:	4293      	cmp	r3, r2
 800d27a:	d802      	bhi.n	800d282 <find_volume+0x2e2>
 800d27c:	2302      	movs	r3, #2
 800d27e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d284:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d288:	4293      	cmp	r3, r2
 800d28a:	d802      	bhi.n	800d292 <find_volume+0x2f2>
 800d28c:	2301      	movs	r3, #1
 800d28e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d294:	1c9a      	adds	r2, r3, #2
 800d296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d298:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d29e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d2a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d2a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2a4:	441a      	add	r2, r3
 800d2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d2aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ae:	441a      	add	r2, r3
 800d2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d2b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2b8:	2b03      	cmp	r3, #3
 800d2ba:	d11e      	bne.n	800d2fa <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2be:	3330      	adds	r3, #48	; 0x30
 800d2c0:	332a      	adds	r3, #42	; 0x2a
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fe fb92 	bl	800b9ec <ld_word>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d001      	beq.n	800d2d2 <find_volume+0x332>
 800d2ce:	230d      	movs	r3, #13
 800d2d0:	e0a8      	b.n	800d424 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d4:	891b      	ldrh	r3, [r3, #8]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d001      	beq.n	800d2de <find_volume+0x33e>
 800d2da:	230d      	movs	r3, #13
 800d2dc:	e0a2      	b.n	800d424 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e0:	3330      	adds	r3, #48	; 0x30
 800d2e2:	332c      	adds	r3, #44	; 0x2c
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fe fb99 	bl	800ba1c <ld_dword>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ee:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f2:	695b      	ldr	r3, [r3, #20]
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	647b      	str	r3, [r7, #68]	; 0x44
 800d2f8:	e01f      	b.n	800d33a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fc:	891b      	ldrh	r3, [r3, #8]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d101      	bne.n	800d306 <find_volume+0x366>
 800d302:	230d      	movs	r3, #13
 800d304:	e08e      	b.n	800d424 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d308:	6a1a      	ldr	r2, [r3, #32]
 800d30a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d30c:	441a      	add	r2, r3
 800d30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d310:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d312:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d316:	2b02      	cmp	r3, #2
 800d318:	d103      	bne.n	800d322 <find_volume+0x382>
 800d31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31c:	695b      	ldr	r3, [r3, #20]
 800d31e:	005b      	lsls	r3, r3, #1
 800d320:	e00a      	b.n	800d338 <find_volume+0x398>
 800d322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d324:	695a      	ldr	r2, [r3, #20]
 800d326:	4613      	mov	r3, r2
 800d328:	005b      	lsls	r3, r3, #1
 800d32a:	4413      	add	r3, r2
 800d32c:	085a      	lsrs	r2, r3, #1
 800d32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d330:	695b      	ldr	r3, [r3, #20]
 800d332:	f003 0301 	and.w	r3, r3, #1
 800d336:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d338:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33c:	699a      	ldr	r2, [r3, #24]
 800d33e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d340:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d344:	0a5b      	lsrs	r3, r3, #9
 800d346:	429a      	cmp	r2, r3
 800d348:	d201      	bcs.n	800d34e <find_volume+0x3ae>
 800d34a:	230d      	movs	r3, #13
 800d34c:	e06a      	b.n	800d424 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d350:	f04f 32ff 	mov.w	r2, #4294967295
 800d354:	611a      	str	r2, [r3, #16]
 800d356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d358:	691a      	ldr	r2, [r3, #16]
 800d35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d360:	2280      	movs	r2, #128	; 0x80
 800d362:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d364:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d368:	2b03      	cmp	r3, #3
 800d36a:	d149      	bne.n	800d400 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36e:	3330      	adds	r3, #48	; 0x30
 800d370:	3330      	adds	r3, #48	; 0x30
 800d372:	4618      	mov	r0, r3
 800d374:	f7fe fb3a 	bl	800b9ec <ld_word>
 800d378:	4603      	mov	r3, r0
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d140      	bne.n	800d400 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d380:	3301      	adds	r3, #1
 800d382:	4619      	mov	r1, r3
 800d384:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d386:	f7fe fde1 	bl	800bf4c <move_window>
 800d38a:	4603      	mov	r3, r0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d137      	bne.n	800d400 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d392:	2200      	movs	r2, #0
 800d394:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d398:	3330      	adds	r3, #48	; 0x30
 800d39a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7fe fb24 	bl	800b9ec <ld_word>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d127      	bne.n	800d400 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b2:	3330      	adds	r3, #48	; 0x30
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fe fb31 	bl	800ba1c <ld_dword>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	4a1b      	ldr	r2, [pc, #108]	; (800d42c <find_volume+0x48c>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d11e      	bne.n	800d400 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c4:	3330      	adds	r3, #48	; 0x30
 800d3c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fe fb26 	bl	800ba1c <ld_dword>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	4a17      	ldr	r2, [pc, #92]	; (800d430 <find_volume+0x490>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d113      	bne.n	800d400 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3da:	3330      	adds	r3, #48	; 0x30
 800d3dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fe fb1b 	bl	800ba1c <ld_dword>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ea:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ee:	3330      	adds	r3, #48	; 0x30
 800d3f0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7fe fb11 	bl	800ba1c <ld_dword>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fe:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d402:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d406:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d408:	4b0a      	ldr	r3, [pc, #40]	; (800d434 <find_volume+0x494>)
 800d40a:	881b      	ldrh	r3, [r3, #0]
 800d40c:	3301      	adds	r3, #1
 800d40e:	b29a      	uxth	r2, r3
 800d410:	4b08      	ldr	r3, [pc, #32]	; (800d434 <find_volume+0x494>)
 800d412:	801a      	strh	r2, [r3, #0]
 800d414:	4b07      	ldr	r3, [pc, #28]	; (800d434 <find_volume+0x494>)
 800d416:	881a      	ldrh	r2, [r3, #0]
 800d418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d41c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d41e:	f7fe fd2d 	bl	800be7c <clear_lock>
#endif
	return FR_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3758      	adds	r7, #88	; 0x58
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	41615252 	.word	0x41615252
 800d430:	61417272 	.word	0x61417272
 800d434:	200004c4 	.word	0x200004c4

0800d438 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d442:	2309      	movs	r3, #9
 800d444:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d01c      	beq.n	800d486 <validate+0x4e>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d018      	beq.n	800d486 <validate+0x4e>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d013      	beq.n	800d486 <validate+0x4e>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	889a      	ldrh	r2, [r3, #4]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	88db      	ldrh	r3, [r3, #6]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d10c      	bne.n	800d486 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	785b      	ldrb	r3, [r3, #1]
 800d472:	4618      	mov	r0, r3
 800d474:	f7fe fa1c 	bl	800b8b0 <disk_status>
 800d478:	4603      	mov	r3, r0
 800d47a:	f003 0301 	and.w	r3, r3, #1
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d101      	bne.n	800d486 <validate+0x4e>
			res = FR_OK;
 800d482:	2300      	movs	r3, #0
 800d484:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d486:	7bfb      	ldrb	r3, [r7, #15]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d102      	bne.n	800d492 <validate+0x5a>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	e000      	b.n	800d494 <validate+0x5c>
 800d492:	2300      	movs	r3, #0
 800d494:	683a      	ldr	r2, [r7, #0]
 800d496:	6013      	str	r3, [r2, #0]
	return res;
 800d498:	7bfb      	ldrb	r3, [r7, #15]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
	...

0800d4a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b088      	sub	sp, #32
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d4b6:	f107 0310 	add.w	r3, r7, #16
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7ff fcd5 	bl	800ce6a <get_ldnumber>
 800d4c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	da01      	bge.n	800d4cc <f_mount+0x28>
 800d4c8:	230b      	movs	r3, #11
 800d4ca:	e02b      	b.n	800d524 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d4cc:	4a17      	ldr	r2, [pc, #92]	; (800d52c <f_mount+0x88>)
 800d4ce:	69fb      	ldr	r3, [r7, #28]
 800d4d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d005      	beq.n	800d4e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d4dc:	69b8      	ldr	r0, [r7, #24]
 800d4de:	f7fe fccd 	bl	800be7c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d002      	beq.n	800d4f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	490d      	ldr	r1, [pc, #52]	; (800d52c <f_mount+0x88>)
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d002      	beq.n	800d50a <f_mount+0x66>
 800d504:	79fb      	ldrb	r3, [r7, #7]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d001      	beq.n	800d50e <f_mount+0x6a>
 800d50a:	2300      	movs	r3, #0
 800d50c:	e00a      	b.n	800d524 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d50e:	f107 010c 	add.w	r1, r7, #12
 800d512:	f107 0308 	add.w	r3, r7, #8
 800d516:	2200      	movs	r2, #0
 800d518:	4618      	mov	r0, r3
 800d51a:	f7ff fd41 	bl	800cfa0 <find_volume>
 800d51e:	4603      	mov	r3, r0
 800d520:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d522:	7dfb      	ldrb	r3, [r7, #23]
}
 800d524:	4618      	mov	r0, r3
 800d526:	3720      	adds	r7, #32
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	200004c0 	.word	0x200004c0

0800d530 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b098      	sub	sp, #96	; 0x60
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	4613      	mov	r3, r2
 800d53c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d101      	bne.n	800d548 <f_open+0x18>
 800d544:	2309      	movs	r3, #9
 800d546:	e1ad      	b.n	800d8a4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d548:	79fb      	ldrb	r3, [r7, #7]
 800d54a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d54e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d550:	79fa      	ldrb	r2, [r7, #7]
 800d552:	f107 0110 	add.w	r1, r7, #16
 800d556:	f107 0308 	add.w	r3, r7, #8
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7ff fd20 	bl	800cfa0 <find_volume>
 800d560:	4603      	mov	r3, r0
 800d562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	f040 8191 	bne.w	800d892 <f_open+0x362>
		dj.obj.fs = fs;
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d574:	68ba      	ldr	r2, [r7, #8]
 800d576:	f107 0314 	add.w	r3, r7, #20
 800d57a:	4611      	mov	r1, r2
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7ff fc03 	bl	800cd88 <follow_path>
 800d582:	4603      	mov	r3, r0
 800d584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d11a      	bne.n	800d5c6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d590:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d594:	b25b      	sxtb	r3, r3
 800d596:	2b00      	cmp	r3, #0
 800d598:	da03      	bge.n	800d5a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d59a:	2306      	movs	r3, #6
 800d59c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d5a0:	e011      	b.n	800d5c6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d5a2:	79fb      	ldrb	r3, [r7, #7]
 800d5a4:	f023 0301 	bic.w	r3, r3, #1
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	bf14      	ite	ne
 800d5ac:	2301      	movne	r3, #1
 800d5ae:	2300      	moveq	r3, #0
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	f107 0314 	add.w	r3, r7, #20
 800d5b8:	4611      	mov	r1, r2
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7fe fb16 	bl	800bbec <chk_lock>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d5c6:	79fb      	ldrb	r3, [r7, #7]
 800d5c8:	f003 031c 	and.w	r3, r3, #28
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d07f      	beq.n	800d6d0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d5d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d017      	beq.n	800d608 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d5d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5dc:	2b04      	cmp	r3, #4
 800d5de:	d10e      	bne.n	800d5fe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d5e0:	f7fe fb60 	bl	800bca4 <enq_lock>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d006      	beq.n	800d5f8 <f_open+0xc8>
 800d5ea:	f107 0314 	add.w	r3, r7, #20
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7ff faa4 	bl	800cb3c <dir_register>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	e000      	b.n	800d5fa <f_open+0xca>
 800d5f8:	2312      	movs	r3, #18
 800d5fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d5fe:	79fb      	ldrb	r3, [r7, #7]
 800d600:	f043 0308 	orr.w	r3, r3, #8
 800d604:	71fb      	strb	r3, [r7, #7]
 800d606:	e010      	b.n	800d62a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d608:	7ebb      	ldrb	r3, [r7, #26]
 800d60a:	f003 0311 	and.w	r3, r3, #17
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d003      	beq.n	800d61a <f_open+0xea>
					res = FR_DENIED;
 800d612:	2307      	movs	r3, #7
 800d614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d618:	e007      	b.n	800d62a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d61a:	79fb      	ldrb	r3, [r7, #7]
 800d61c:	f003 0304 	and.w	r3, r3, #4
 800d620:	2b00      	cmp	r3, #0
 800d622:	d002      	beq.n	800d62a <f_open+0xfa>
 800d624:	2308      	movs	r3, #8
 800d626:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d62a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d168      	bne.n	800d704 <f_open+0x1d4>
 800d632:	79fb      	ldrb	r3, [r7, #7]
 800d634:	f003 0308 	and.w	r3, r3, #8
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d063      	beq.n	800d704 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d63c:	f7fd fbf8 	bl	800ae30 <get_fattime>
 800d640:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d644:	330e      	adds	r3, #14
 800d646:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe fa25 	bl	800ba98 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d650:	3316      	adds	r3, #22
 800d652:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d654:	4618      	mov	r0, r3
 800d656:	f7fe fa1f 	bl	800ba98 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d65c:	330b      	adds	r3, #11
 800d65e:	2220      	movs	r2, #32
 800d660:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d666:	4611      	mov	r1, r2
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff f976 	bl	800c95a <ld_clust>
 800d66e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d674:	2200      	movs	r2, #0
 800d676:	4618      	mov	r0, r3
 800d678:	f7ff f98e 	bl	800c998 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d67e:	331c      	adds	r3, #28
 800d680:	2100      	movs	r1, #0
 800d682:	4618      	mov	r0, r3
 800d684:	f7fe fa08 	bl	800ba98 <st_dword>
					fs->wflag = 1;
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	2201      	movs	r2, #1
 800d68c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d690:	2b00      	cmp	r3, #0
 800d692:	d037      	beq.n	800d704 <f_open+0x1d4>
						dw = fs->winsect;
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d698:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d69a:	f107 0314 	add.w	r3, r7, #20
 800d69e:	2200      	movs	r2, #0
 800d6a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7fe fea1 	bl	800c3ea <remove_chain>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d6ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d126      	bne.n	800d704 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fe fc46 	bl	800bf4c <move_window>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d6ca:	3a01      	subs	r2, #1
 800d6cc:	60da      	str	r2, [r3, #12]
 800d6ce:	e019      	b.n	800d704 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d6d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d115      	bne.n	800d704 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d6d8:	7ebb      	ldrb	r3, [r7, #26]
 800d6da:	f003 0310 	and.w	r3, r3, #16
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d003      	beq.n	800d6ea <f_open+0x1ba>
					res = FR_NO_FILE;
 800d6e2:	2304      	movs	r3, #4
 800d6e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d6e8:	e00c      	b.n	800d704 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d6ea:	79fb      	ldrb	r3, [r7, #7]
 800d6ec:	f003 0302 	and.w	r3, r3, #2
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d007      	beq.n	800d704 <f_open+0x1d4>
 800d6f4:	7ebb      	ldrb	r3, [r7, #26]
 800d6f6:	f003 0301 	and.w	r3, r3, #1
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d002      	beq.n	800d704 <f_open+0x1d4>
						res = FR_DENIED;
 800d6fe:	2307      	movs	r3, #7
 800d700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d128      	bne.n	800d75e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d70c:	79fb      	ldrb	r3, [r7, #7]
 800d70e:	f003 0308 	and.w	r3, r3, #8
 800d712:	2b00      	cmp	r3, #0
 800d714:	d003      	beq.n	800d71e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d716:	79fb      	ldrb	r3, [r7, #7]
 800d718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d71c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d72c:	79fb      	ldrb	r3, [r7, #7]
 800d72e:	f023 0301 	bic.w	r3, r3, #1
 800d732:	2b00      	cmp	r3, #0
 800d734:	bf14      	ite	ne
 800d736:	2301      	movne	r3, #1
 800d738:	2300      	moveq	r3, #0
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	461a      	mov	r2, r3
 800d73e:	f107 0314 	add.w	r3, r7, #20
 800d742:	4611      	mov	r1, r2
 800d744:	4618      	mov	r0, r3
 800d746:	f7fe facf 	bl	800bce8 <inc_lock>
 800d74a:	4602      	mov	r2, r0
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	691b      	ldr	r3, [r3, #16]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d102      	bne.n	800d75e <f_open+0x22e>
 800d758:	2302      	movs	r3, #2
 800d75a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d75e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d762:	2b00      	cmp	r3, #0
 800d764:	f040 8095 	bne.w	800d892 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d76c:	4611      	mov	r1, r2
 800d76e:	4618      	mov	r0, r3
 800d770:	f7ff f8f3 	bl	800c95a <ld_clust>
 800d774:	4602      	mov	r2, r0
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d77c:	331c      	adds	r3, #28
 800d77e:	4618      	mov	r0, r3
 800d780:	f7fe f94c 	bl	800ba1c <ld_dword>
 800d784:	4602      	mov	r2, r0
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2200      	movs	r2, #0
 800d78e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d790:	693a      	ldr	r2, [r7, #16]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	88da      	ldrh	r2, [r3, #6]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	79fa      	ldrb	r2, [r7, #7]
 800d7a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	3330      	adds	r3, #48	; 0x30
 800d7ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7be:	2100      	movs	r1, #0
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7fe f9b6 	bl	800bb32 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d7c6:	79fb      	ldrb	r3, [r7, #7]
 800d7c8:	f003 0320 	and.w	r3, r3, #32
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d060      	beq.n	800d892 <f_open+0x362>
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	68db      	ldr	r3, [r3, #12]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d05c      	beq.n	800d892 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	68da      	ldr	r2, [r3, #12]
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	895b      	ldrh	r3, [r3, #10]
 800d7e4:	025b      	lsls	r3, r3, #9
 800d7e6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	657b      	str	r3, [r7, #84]	; 0x54
 800d7f4:	e016      	b.n	800d824 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7fe fc61 	bl	800c0c2 <get_fat>
 800d800:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d804:	2b01      	cmp	r3, #1
 800d806:	d802      	bhi.n	800d80e <f_open+0x2de>
 800d808:	2302      	movs	r3, #2
 800d80a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d80e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d814:	d102      	bne.n	800d81c <f_open+0x2ec>
 800d816:	2301      	movs	r3, #1
 800d818:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d81c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d81e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	657b      	str	r3, [r7, #84]	; 0x54
 800d824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d103      	bne.n	800d834 <f_open+0x304>
 800d82c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d82e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d830:	429a      	cmp	r2, r3
 800d832:	d8e0      	bhi.n	800d7f6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d838:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d83a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d127      	bne.n	800d892 <f_open+0x362>
 800d842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d022      	beq.n	800d892 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d850:	4618      	mov	r0, r3
 800d852:	f7fe fc17 	bl	800c084 <clust2sect>
 800d856:	6478      	str	r0, [r7, #68]	; 0x44
 800d858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d103      	bne.n	800d866 <f_open+0x336>
						res = FR_INT_ERR;
 800d85e:	2302      	movs	r3, #2
 800d860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d864:	e015      	b.n	800d892 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d868:	0a5a      	lsrs	r2, r3, #9
 800d86a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d86c:	441a      	add	r2, r3
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	7858      	ldrb	r0, [r3, #1]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6a1a      	ldr	r2, [r3, #32]
 800d880:	2301      	movs	r3, #1
 800d882:	f7fe f855 	bl	800b930 <disk_read>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d002      	beq.n	800d892 <f_open+0x362>
 800d88c:	2301      	movs	r3, #1
 800d88e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d896:	2b00      	cmp	r3, #0
 800d898:	d002      	beq.n	800d8a0 <f_open+0x370>
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2200      	movs	r2, #0
 800d89e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d8a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3760      	adds	r7, #96	; 0x60
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b08c      	sub	sp, #48	; 0x30
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
 800d8b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f107 0210 	add.w	r2, r7, #16
 800d8ca:	4611      	mov	r1, r2
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7ff fdb3 	bl	800d438 <validate>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d8d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d107      	bne.n	800d8f0 <f_write+0x44>
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	7d5b      	ldrb	r3, [r3, #21]
 800d8e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d8e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d002      	beq.n	800d8f6 <f_write+0x4a>
 800d8f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8f4:	e14b      	b.n	800db8e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	7d1b      	ldrb	r3, [r3, #20]
 800d8fa:	f003 0302 	and.w	r3, r3, #2
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d101      	bne.n	800d906 <f_write+0x5a>
 800d902:	2307      	movs	r3, #7
 800d904:	e143      	b.n	800db8e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	699a      	ldr	r2, [r3, #24]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	441a      	add	r2, r3
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	699b      	ldr	r3, [r3, #24]
 800d912:	429a      	cmp	r2, r3
 800d914:	f080 812d 	bcs.w	800db72 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	699b      	ldr	r3, [r3, #24]
 800d91c:	43db      	mvns	r3, r3
 800d91e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d920:	e127      	b.n	800db72 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	699b      	ldr	r3, [r3, #24]
 800d926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	f040 80e3 	bne.w	800daf6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	699b      	ldr	r3, [r3, #24]
 800d934:	0a5b      	lsrs	r3, r3, #9
 800d936:	693a      	ldr	r2, [r7, #16]
 800d938:	8952      	ldrh	r2, [r2, #10]
 800d93a:	3a01      	subs	r2, #1
 800d93c:	4013      	ands	r3, r2
 800d93e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d143      	bne.n	800d9ce <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	699b      	ldr	r3, [r3, #24]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10c      	bne.n	800d968 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d956:	2b00      	cmp	r3, #0
 800d958:	d11a      	bne.n	800d990 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2100      	movs	r1, #0
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fe fda8 	bl	800c4b4 <create_chain>
 800d964:	62b8      	str	r0, [r7, #40]	; 0x28
 800d966:	e013      	b.n	800d990 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d007      	beq.n	800d980 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	699b      	ldr	r3, [r3, #24]
 800d974:	4619      	mov	r1, r3
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f7fe fe34 	bl	800c5e4 <clmt_clust>
 800d97c:	62b8      	str	r0, [r7, #40]	; 0x28
 800d97e:	e007      	b.n	800d990 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	69db      	ldr	r3, [r3, #28]
 800d986:	4619      	mov	r1, r3
 800d988:	4610      	mov	r0, r2
 800d98a:	f7fe fd93 	bl	800c4b4 <create_chain>
 800d98e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d992:	2b00      	cmp	r3, #0
 800d994:	f000 80f2 	beq.w	800db7c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d104      	bne.n	800d9a8 <f_write+0xfc>
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2202      	movs	r2, #2
 800d9a2:	755a      	strb	r2, [r3, #21]
 800d9a4:	2302      	movs	r3, #2
 800d9a6:	e0f2      	b.n	800db8e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ae:	d104      	bne.n	800d9ba <f_write+0x10e>
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	755a      	strb	r2, [r3, #21]
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e0e9      	b.n	800db8e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9be:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d102      	bne.n	800d9ce <f_write+0x122>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9cc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	7d1b      	ldrb	r3, [r3, #20]
 800d9d2:	b25b      	sxtb	r3, r3
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	da18      	bge.n	800da0a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	7858      	ldrb	r0, [r3, #1]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6a1a      	ldr	r2, [r3, #32]
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	f7fd ffc2 	bl	800b970 <disk_write>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d004      	beq.n	800d9fc <f_write+0x150>
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	755a      	strb	r2, [r3, #21]
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e0c8      	b.n	800db8e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	7d1b      	ldrb	r3, [r3, #20]
 800da00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da04:	b2da      	uxtb	r2, r3
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800da0a:	693a      	ldr	r2, [r7, #16]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	69db      	ldr	r3, [r3, #28]
 800da10:	4619      	mov	r1, r3
 800da12:	4610      	mov	r0, r2
 800da14:	f7fe fb36 	bl	800c084 <clust2sect>
 800da18:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d104      	bne.n	800da2a <f_write+0x17e>
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2202      	movs	r2, #2
 800da24:	755a      	strb	r2, [r3, #21]
 800da26:	2302      	movs	r3, #2
 800da28:	e0b1      	b.n	800db8e <f_write+0x2e2>
			sect += csect;
 800da2a:	697a      	ldr	r2, [r7, #20]
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	4413      	add	r3, r2
 800da30:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	0a5b      	lsrs	r3, r3, #9
 800da36:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d03c      	beq.n	800dab8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800da3e:	69ba      	ldr	r2, [r7, #24]
 800da40:	6a3b      	ldr	r3, [r7, #32]
 800da42:	4413      	add	r3, r2
 800da44:	693a      	ldr	r2, [r7, #16]
 800da46:	8952      	ldrh	r2, [r2, #10]
 800da48:	4293      	cmp	r3, r2
 800da4a:	d905      	bls.n	800da58 <f_write+0x1ac>
					cc = fs->csize - csect;
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	895b      	ldrh	r3, [r3, #10]
 800da50:	461a      	mov	r2, r3
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	1ad3      	subs	r3, r2, r3
 800da56:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	7858      	ldrb	r0, [r3, #1]
 800da5c:	6a3b      	ldr	r3, [r7, #32]
 800da5e:	697a      	ldr	r2, [r7, #20]
 800da60:	69f9      	ldr	r1, [r7, #28]
 800da62:	f7fd ff85 	bl	800b970 <disk_write>
 800da66:	4603      	mov	r3, r0
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d004      	beq.n	800da76 <f_write+0x1ca>
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2201      	movs	r2, #1
 800da70:	755a      	strb	r2, [r3, #21]
 800da72:	2301      	movs	r3, #1
 800da74:	e08b      	b.n	800db8e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	6a1a      	ldr	r2, [r3, #32]
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	1ad3      	subs	r3, r2, r3
 800da7e:	6a3a      	ldr	r2, [r7, #32]
 800da80:	429a      	cmp	r2, r3
 800da82:	d915      	bls.n	800dab0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	6a1a      	ldr	r2, [r3, #32]
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	1ad3      	subs	r3, r2, r3
 800da92:	025b      	lsls	r3, r3, #9
 800da94:	69fa      	ldr	r2, [r7, #28]
 800da96:	4413      	add	r3, r2
 800da98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da9c:	4619      	mov	r1, r3
 800da9e:	f7fe f827 	bl	800baf0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	7d1b      	ldrb	r3, [r3, #20]
 800daa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daaa:	b2da      	uxtb	r2, r3
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800dab0:	6a3b      	ldr	r3, [r7, #32]
 800dab2:	025b      	lsls	r3, r3, #9
 800dab4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800dab6:	e03f      	b.n	800db38 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6a1b      	ldr	r3, [r3, #32]
 800dabc:	697a      	ldr	r2, [r7, #20]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d016      	beq.n	800daf0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	699a      	ldr	r2, [r3, #24]
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800daca:	429a      	cmp	r2, r3
 800dacc:	d210      	bcs.n	800daf0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	7858      	ldrb	r0, [r3, #1]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dad8:	2301      	movs	r3, #1
 800dada:	697a      	ldr	r2, [r7, #20]
 800dadc:	f7fd ff28 	bl	800b930 <disk_read>
 800dae0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d004      	beq.n	800daf0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2201      	movs	r2, #1
 800daea:	755a      	strb	r2, [r3, #21]
 800daec:	2301      	movs	r3, #1
 800daee:	e04e      	b.n	800db8e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	697a      	ldr	r2, [r7, #20]
 800daf4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dafe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800db02:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800db04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	429a      	cmp	r2, r3
 800db0a:	d901      	bls.n	800db10 <f_write+0x264>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	699b      	ldr	r3, [r3, #24]
 800db1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db1e:	4413      	add	r3, r2
 800db20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db22:	69f9      	ldr	r1, [r7, #28]
 800db24:	4618      	mov	r0, r3
 800db26:	f7fd ffe3 	bl	800baf0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	7d1b      	ldrb	r3, [r3, #20]
 800db2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db32:	b2da      	uxtb	r2, r3
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800db38:	69fa      	ldr	r2, [r7, #28]
 800db3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3c:	4413      	add	r3, r2
 800db3e:	61fb      	str	r3, [r7, #28]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	699a      	ldr	r2, [r3, #24]
 800db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db46:	441a      	add	r2, r3
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	619a      	str	r2, [r3, #24]
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	68da      	ldr	r2, [r3, #12]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	699b      	ldr	r3, [r3, #24]
 800db54:	429a      	cmp	r2, r3
 800db56:	bf38      	it	cc
 800db58:	461a      	movcc	r2, r3
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	60da      	str	r2, [r3, #12]
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db64:	441a      	add	r2, r3
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	601a      	str	r2, [r3, #0]
 800db6a:	687a      	ldr	r2, [r7, #4]
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6e:	1ad3      	subs	r3, r2, r3
 800db70:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	f47f aed4 	bne.w	800d922 <f_write+0x76>
 800db7a:	e000      	b.n	800db7e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800db7c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	7d1b      	ldrb	r3, [r3, #20]
 800db82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db86:	b2da      	uxtb	r2, r3
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3730      	adds	r7, #48	; 0x30
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b086      	sub	sp, #24
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f107 0208 	add.w	r2, r7, #8
 800dba4:	4611      	mov	r1, r2
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7ff fc46 	bl	800d438 <validate>
 800dbac:	4603      	mov	r3, r0
 800dbae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dbb0:	7dfb      	ldrb	r3, [r7, #23]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d168      	bne.n	800dc88 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	7d1b      	ldrb	r3, [r3, #20]
 800dbba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d062      	beq.n	800dc88 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	7d1b      	ldrb	r3, [r3, #20]
 800dbc6:	b25b      	sxtb	r3, r3
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	da15      	bge.n	800dbf8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	7858      	ldrb	r0, [r3, #1]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a1a      	ldr	r2, [r3, #32]
 800dbda:	2301      	movs	r3, #1
 800dbdc:	f7fd fec8 	bl	800b970 <disk_write>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d001      	beq.n	800dbea <f_sync+0x54>
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e04f      	b.n	800dc8a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	7d1b      	ldrb	r3, [r3, #20]
 800dbee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbf2:	b2da      	uxtb	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dbf8:	f7fd f91a 	bl	800ae30 <get_fattime>
 800dbfc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dbfe:	68ba      	ldr	r2, [r7, #8]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc04:	4619      	mov	r1, r3
 800dc06:	4610      	mov	r0, r2
 800dc08:	f7fe f9a0 	bl	800bf4c <move_window>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dc10:	7dfb      	ldrb	r3, [r7, #23]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d138      	bne.n	800dc88 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc1a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	330b      	adds	r3, #11
 800dc20:	781a      	ldrb	r2, [r3, #0]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	330b      	adds	r3, #11
 800dc26:	f042 0220 	orr.w	r2, r2, #32
 800dc2a:	b2d2      	uxtb	r2, r2
 800dc2c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6818      	ldr	r0, [r3, #0]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	461a      	mov	r2, r3
 800dc38:	68f9      	ldr	r1, [r7, #12]
 800dc3a:	f7fe fead 	bl	800c998 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f103 021c 	add.w	r2, r3, #28
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	4619      	mov	r1, r3
 800dc4a:	4610      	mov	r0, r2
 800dc4c:	f7fd ff24 	bl	800ba98 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	3316      	adds	r3, #22
 800dc54:	6939      	ldr	r1, [r7, #16]
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fd ff1e 	bl	800ba98 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	3312      	adds	r3, #18
 800dc60:	2100      	movs	r1, #0
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fd fefd 	bl	800ba62 <st_word>
					fs->wflag = 1;
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7fe f999 	bl	800bfa8 <sync_fs>
 800dc76:	4603      	mov	r3, r0
 800dc78:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	7d1b      	ldrb	r3, [r3, #20]
 800dc7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc82:	b2da      	uxtb	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dc88:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3718      	adds	r7, #24
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b084      	sub	sp, #16
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7ff ff7b 	bl	800db96 <f_sync>
 800dca0:	4603      	mov	r3, r0
 800dca2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dca4:	7bfb      	ldrb	r3, [r7, #15]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d118      	bne.n	800dcdc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f107 0208 	add.w	r2, r7, #8
 800dcb0:	4611      	mov	r1, r2
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7ff fbc0 	bl	800d438 <validate>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dcbc:	7bfb      	ldrb	r3, [r7, #15]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d10c      	bne.n	800dcdc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7fe f89c 	bl	800be04 <dec_lock>
 800dccc:	4603      	mov	r3, r0
 800dcce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dcd0:	7bfb      	ldrb	r3, [r7, #15]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d102      	bne.n	800dcdc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dcdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b090      	sub	sp, #64	; 0x40
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
 800dcee:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f107 0208 	add.w	r2, r7, #8
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7ff fb9d 	bl	800d438 <validate>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800dd04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d103      	bne.n	800dd14 <f_lseek+0x2e>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	7d5b      	ldrb	r3, [r3, #21]
 800dd10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800dd14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d002      	beq.n	800dd22 <f_lseek+0x3c>
 800dd1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd20:	e1e6      	b.n	800e0f0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f000 80d1 	beq.w	800dece <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd32:	d15a      	bne.n	800ddea <f_lseek+0x104>
			tbl = fp->cltbl;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd38:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800dd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3c:	1d1a      	adds	r2, r3, #4
 800dd3e:	627a      	str	r2, [r7, #36]	; 0x24
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	617b      	str	r3, [r7, #20]
 800dd44:	2302      	movs	r3, #2
 800dd46:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	689b      	ldr	r3, [r3, #8]
 800dd4c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d03a      	beq.n	800ddca <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800dd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd56:	613b      	str	r3, [r7, #16]
 800dd58:	2300      	movs	r3, #0
 800dd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5e:	3302      	adds	r3, #2
 800dd60:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800dd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd64:	60fb      	str	r3, [r7, #12]
 800dd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd68:	3301      	adds	r3, #1
 800dd6a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fe f9a6 	bl	800c0c2 <get_fat>
 800dd76:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d804      	bhi.n	800dd88 <f_lseek+0xa2>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2202      	movs	r2, #2
 800dd82:	755a      	strb	r2, [r3, #21]
 800dd84:	2302      	movs	r3, #2
 800dd86:	e1b3      	b.n	800e0f0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd8e:	d104      	bne.n	800dd9a <f_lseek+0xb4>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2201      	movs	r2, #1
 800dd94:	755a      	strb	r2, [r3, #21]
 800dd96:	2301      	movs	r3, #1
 800dd98:	e1aa      	b.n	800e0f0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d0de      	beq.n	800dd62 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dda4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d809      	bhi.n	800ddc0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ddac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddae:	1d1a      	adds	r2, r3, #4
 800ddb0:	627a      	str	r2, [r7, #36]	; 0x24
 800ddb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddb4:	601a      	str	r2, [r3, #0]
 800ddb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb8:	1d1a      	adds	r2, r3, #4
 800ddba:	627a      	str	r2, [r7, #36]	; 0x24
 800ddbc:	693a      	ldr	r2, [r7, #16]
 800ddbe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	695b      	ldr	r3, [r3, #20]
 800ddc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d3c4      	bcc.n	800dd54 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddd0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ddd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d803      	bhi.n	800dde2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	2200      	movs	r2, #0
 800ddde:	601a      	str	r2, [r3, #0]
 800dde0:	e184      	b.n	800e0ec <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800dde2:	2311      	movs	r3, #17
 800dde4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dde8:	e180      	b.n	800e0ec <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	68db      	ldr	r3, [r3, #12]
 800ddee:	683a      	ldr	r2, [r7, #0]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d902      	bls.n	800ddfa <f_lseek+0x114>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	683a      	ldr	r2, [r7, #0]
 800ddfe:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	f000 8172 	beq.w	800e0ec <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	3b01      	subs	r3, #1
 800de0c:	4619      	mov	r1, r3
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f7fe fbe8 	bl	800c5e4 <clmt_clust>
 800de14:	4602      	mov	r2, r0
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800de1a:	68ba      	ldr	r2, [r7, #8]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	69db      	ldr	r3, [r3, #28]
 800de20:	4619      	mov	r1, r3
 800de22:	4610      	mov	r0, r2
 800de24:	f7fe f92e 	bl	800c084 <clust2sect>
 800de28:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d104      	bne.n	800de3a <f_lseek+0x154>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2202      	movs	r2, #2
 800de34:	755a      	strb	r2, [r3, #21]
 800de36:	2302      	movs	r3, #2
 800de38:	e15a      	b.n	800e0f0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	3b01      	subs	r3, #1
 800de3e:	0a5b      	lsrs	r3, r3, #9
 800de40:	68ba      	ldr	r2, [r7, #8]
 800de42:	8952      	ldrh	r2, [r2, #10]
 800de44:	3a01      	subs	r2, #1
 800de46:	4013      	ands	r3, r2
 800de48:	69ba      	ldr	r2, [r7, #24]
 800de4a:	4413      	add	r3, r2
 800de4c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	699b      	ldr	r3, [r3, #24]
 800de52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de56:	2b00      	cmp	r3, #0
 800de58:	f000 8148 	beq.w	800e0ec <f_lseek+0x406>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a1b      	ldr	r3, [r3, #32]
 800de60:	69ba      	ldr	r2, [r7, #24]
 800de62:	429a      	cmp	r2, r3
 800de64:	f000 8142 	beq.w	800e0ec <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	7d1b      	ldrb	r3, [r3, #20]
 800de6c:	b25b      	sxtb	r3, r3
 800de6e:	2b00      	cmp	r3, #0
 800de70:	da18      	bge.n	800dea4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	7858      	ldrb	r0, [r3, #1]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6a1a      	ldr	r2, [r3, #32]
 800de80:	2301      	movs	r3, #1
 800de82:	f7fd fd75 	bl	800b970 <disk_write>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d004      	beq.n	800de96 <f_lseek+0x1b0>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2201      	movs	r2, #1
 800de90:	755a      	strb	r2, [r3, #21]
 800de92:	2301      	movs	r3, #1
 800de94:	e12c      	b.n	800e0f0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	7d1b      	ldrb	r3, [r3, #20]
 800de9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de9e:	b2da      	uxtb	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	7858      	ldrb	r0, [r3, #1]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800deae:	2301      	movs	r3, #1
 800deb0:	69ba      	ldr	r2, [r7, #24]
 800deb2:	f7fd fd3d 	bl	800b930 <disk_read>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d004      	beq.n	800dec6 <f_lseek+0x1e0>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	755a      	strb	r2, [r3, #21]
 800dec2:	2301      	movs	r3, #1
 800dec4:	e114      	b.n	800e0f0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	69ba      	ldr	r2, [r7, #24]
 800deca:	621a      	str	r2, [r3, #32]
 800decc:	e10e      	b.n	800e0ec <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	683a      	ldr	r2, [r7, #0]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d908      	bls.n	800deea <f_lseek+0x204>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	7d1b      	ldrb	r3, [r3, #20]
 800dedc:	f003 0302 	and.w	r3, r3, #2
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d102      	bne.n	800deea <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	699b      	ldr	r3, [r3, #24]
 800deee:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800def0:	2300      	movs	r3, #0
 800def2:	637b      	str	r3, [r7, #52]	; 0x34
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800def8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	f000 80a7 	beq.w	800e050 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	895b      	ldrh	r3, [r3, #10]
 800df06:	025b      	lsls	r3, r3, #9
 800df08:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800df0a:	6a3b      	ldr	r3, [r7, #32]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d01b      	beq.n	800df48 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	1e5a      	subs	r2, r3, #1
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	fbb2 f2f3 	udiv	r2, r2, r3
 800df1a:	6a3b      	ldr	r3, [r7, #32]
 800df1c:	1e59      	subs	r1, r3, #1
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800df24:	429a      	cmp	r2, r3
 800df26:	d30f      	bcc.n	800df48 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800df28:	6a3b      	ldr	r3, [r7, #32]
 800df2a:	1e5a      	subs	r2, r3, #1
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	425b      	negs	r3, r3
 800df30:	401a      	ands	r2, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	699b      	ldr	r3, [r3, #24]
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	69db      	ldr	r3, [r3, #28]
 800df44:	63bb      	str	r3, [r7, #56]	; 0x38
 800df46:	e022      	b.n	800df8e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	689b      	ldr	r3, [r3, #8]
 800df4c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800df4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df50:	2b00      	cmp	r3, #0
 800df52:	d119      	bne.n	800df88 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2100      	movs	r1, #0
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fe faab 	bl	800c4b4 <create_chain>
 800df5e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800df60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df62:	2b01      	cmp	r3, #1
 800df64:	d104      	bne.n	800df70 <f_lseek+0x28a>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2202      	movs	r2, #2
 800df6a:	755a      	strb	r2, [r3, #21]
 800df6c:	2302      	movs	r3, #2
 800df6e:	e0bf      	b.n	800e0f0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df76:	d104      	bne.n	800df82 <f_lseek+0x29c>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2201      	movs	r2, #1
 800df7c:	755a      	strb	r2, [r3, #21]
 800df7e:	2301      	movs	r3, #1
 800df80:	e0b6      	b.n	800e0f0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df86:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df8c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800df8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df90:	2b00      	cmp	r3, #0
 800df92:	d05d      	beq.n	800e050 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800df94:	e03a      	b.n	800e00c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800df96:	683a      	ldr	r2, [r7, #0]
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	1ad3      	subs	r3, r2, r3
 800df9c:	603b      	str	r3, [r7, #0]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	699a      	ldr	r2, [r3, #24]
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	441a      	add	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	7d1b      	ldrb	r3, [r3, #20]
 800dfae:	f003 0302 	and.w	r3, r3, #2
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d00b      	beq.n	800dfce <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fe fa7a 	bl	800c4b4 <create_chain>
 800dfc0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800dfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d108      	bne.n	800dfda <f_lseek+0x2f4>
							ofs = 0; break;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	603b      	str	r3, [r7, #0]
 800dfcc:	e022      	b.n	800e014 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fe f875 	bl	800c0c2 <get_fat>
 800dfd8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe0:	d104      	bne.n	800dfec <f_lseek+0x306>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	755a      	strb	r2, [r3, #21]
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e081      	b.n	800e0f0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfee:	2b01      	cmp	r3, #1
 800dff0:	d904      	bls.n	800dffc <f_lseek+0x316>
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	695b      	ldr	r3, [r3, #20]
 800dff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d304      	bcc.n	800e006 <f_lseek+0x320>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2202      	movs	r2, #2
 800e000:	755a      	strb	r2, [r3, #21]
 800e002:	2302      	movs	r3, #2
 800e004:	e074      	b.n	800e0f0 <f_lseek+0x40a>
					fp->clust = clst;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e00a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e00c:	683a      	ldr	r2, [r7, #0]
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	429a      	cmp	r2, r3
 800e012:	d8c0      	bhi.n	800df96 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	699a      	ldr	r2, [r3, #24]
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	441a      	add	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e026:	2b00      	cmp	r3, #0
 800e028:	d012      	beq.n	800e050 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e02e:	4618      	mov	r0, r3
 800e030:	f7fe f828 	bl	800c084 <clust2sect>
 800e034:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d104      	bne.n	800e046 <f_lseek+0x360>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2202      	movs	r2, #2
 800e040:	755a      	strb	r2, [r3, #21]
 800e042:	2302      	movs	r3, #2
 800e044:	e054      	b.n	800e0f0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	0a5b      	lsrs	r3, r3, #9
 800e04a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e04c:	4413      	add	r3, r2
 800e04e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	699a      	ldr	r2, [r3, #24]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	429a      	cmp	r2, r3
 800e05a:	d90a      	bls.n	800e072 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	699a      	ldr	r2, [r3, #24]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	7d1b      	ldrb	r3, [r3, #20]
 800e068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e06c:	b2da      	uxtb	r2, r3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	699b      	ldr	r3, [r3, #24]
 800e076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d036      	beq.n	800e0ec <f_lseek+0x406>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6a1b      	ldr	r3, [r3, #32]
 800e082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e084:	429a      	cmp	r2, r3
 800e086:	d031      	beq.n	800e0ec <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	7d1b      	ldrb	r3, [r3, #20]
 800e08c:	b25b      	sxtb	r3, r3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	da18      	bge.n	800e0c4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	7858      	ldrb	r0, [r3, #1]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6a1a      	ldr	r2, [r3, #32]
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	f7fd fc65 	bl	800b970 <disk_write>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d004      	beq.n	800e0b6 <f_lseek+0x3d0>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	755a      	strb	r2, [r3, #21]
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e01c      	b.n	800e0f0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	7d1b      	ldrb	r3, [r3, #20]
 800e0ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0be:	b2da      	uxtb	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	7858      	ldrb	r0, [r3, #1]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0d2:	f7fd fc2d 	bl	800b930 <disk_read>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d004      	beq.n	800e0e6 <f_lseek+0x400>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	755a      	strb	r2, [r3, #21]
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e004      	b.n	800e0f0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0ea:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e0ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3740      	adds	r7, #64	; 0x40
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b086      	sub	sp, #24
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d101      	bne.n	800e10c <f_opendir+0x14>
 800e108:	2309      	movs	r3, #9
 800e10a:	e064      	b.n	800e1d6 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e110:	f107 010c 	add.w	r1, r7, #12
 800e114:	463b      	mov	r3, r7
 800e116:	2200      	movs	r2, #0
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fe ff41 	bl	800cfa0 <find_volume>
 800e11e:	4603      	mov	r3, r0
 800e120:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e122:	7dfb      	ldrb	r3, [r7, #23]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d14f      	bne.n	800e1c8 <f_opendir+0xd0>
		obj->fs = fs;
 800e128:	68fa      	ldr	r2, [r7, #12]
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	4619      	mov	r1, r3
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7fe fe28 	bl	800cd88 <follow_path>
 800e138:	4603      	mov	r3, r0
 800e13a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e13c:	7dfb      	ldrb	r3, [r7, #23]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d13d      	bne.n	800e1be <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e148:	b25b      	sxtb	r3, r3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	db12      	blt.n	800e174 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	799b      	ldrb	r3, [r3, #6]
 800e152:	f003 0310 	and.w	r3, r3, #16
 800e156:	2b00      	cmp	r3, #0
 800e158:	d00a      	beq.n	800e170 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6a1b      	ldr	r3, [r3, #32]
 800e160:	4619      	mov	r1, r3
 800e162:	4610      	mov	r0, r2
 800e164:	f7fe fbf9 	bl	800c95a <ld_clust>
 800e168:	4602      	mov	r2, r0
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	609a      	str	r2, [r3, #8]
 800e16e:	e001      	b.n	800e174 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e170:	2305      	movs	r3, #5
 800e172:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e174:	7dfb      	ldrb	r3, [r7, #23]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d121      	bne.n	800e1be <f_opendir+0xc6>
				obj->id = fs->id;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	88da      	ldrh	r2, [r3, #6]
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e182:	2100      	movs	r1, #0
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7fe fa61 	bl	800c64c <dir_sdi>
 800e18a:	4603      	mov	r3, r0
 800e18c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e18e:	7dfb      	ldrb	r3, [r7, #23]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d114      	bne.n	800e1be <f_opendir+0xc6>
					if (obj->sclust) {
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	689b      	ldr	r3, [r3, #8]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00d      	beq.n	800e1b8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e19c:	2100      	movs	r1, #0
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f7fd fda2 	bl	800bce8 <inc_lock>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d105      	bne.n	800e1be <f_opendir+0xc6>
 800e1b2:	2312      	movs	r3, #18
 800e1b4:	75fb      	strb	r3, [r7, #23]
 800e1b6:	e002      	b.n	800e1be <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e1be:	7dfb      	ldrb	r3, [r7, #23]
 800e1c0:	2b04      	cmp	r3, #4
 800e1c2:	d101      	bne.n	800e1c8 <f_opendir+0xd0>
 800e1c4:	2305      	movs	r3, #5
 800e1c6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e1c8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d002      	beq.n	800e1d4 <f_opendir+0xdc>
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e1d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3718      	adds	r7, #24
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}

0800e1de <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e1de:	b580      	push	{r7, lr}
 800e1e0:	b084      	sub	sp, #16
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f107 0208 	add.w	r2, r7, #8
 800e1ec:	4611      	mov	r1, r2
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7ff f922 	bl	800d438 <validate>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e1f8:	7bfb      	ldrb	r3, [r7, #15]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d110      	bne.n	800e220 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	691b      	ldr	r3, [r3, #16]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d006      	beq.n	800e214 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	691b      	ldr	r3, [r3, #16]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fd fdfa 	bl	800be04 <dec_lock>
 800e210:	4603      	mov	r3, r0
 800e212:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e214:	7bfb      	ldrb	r3, [r7, #15]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d102      	bne.n	800e220 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2200      	movs	r2, #0
 800e21e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e220:	7bfb      	ldrb	r3, [r7, #15]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3710      	adds	r7, #16
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b084      	sub	sp, #16
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
 800e232:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f107 0208 	add.w	r2, r7, #8
 800e23a:	4611      	mov	r1, r2
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7ff f8fb 	bl	800d438 <validate>
 800e242:	4603      	mov	r3, r0
 800e244:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e246:	7bfb      	ldrb	r3, [r7, #15]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d126      	bne.n	800e29a <f_readdir+0x70>
		if (!fno) {
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d106      	bne.n	800e260 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e252:	2100      	movs	r1, #0
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7fe f9f9 	bl	800c64c <dir_sdi>
 800e25a:	4603      	mov	r3, r0
 800e25c:	73fb      	strb	r3, [r7, #15]
 800e25e:	e01c      	b.n	800e29a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e260:	2100      	movs	r1, #0
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f7fe fbb8 	bl	800c9d8 <dir_read>
 800e268:	4603      	mov	r3, r0
 800e26a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
 800e26e:	2b04      	cmp	r3, #4
 800e270:	d101      	bne.n	800e276 <f_readdir+0x4c>
 800e272:	2300      	movs	r3, #0
 800e274:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e276:	7bfb      	ldrb	r3, [r7, #15]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10e      	bne.n	800e29a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e27c:	6839      	ldr	r1, [r7, #0]
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7fe fc8e 	bl	800cba0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e284:	2100      	movs	r1, #0
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7fe fa5b 	bl	800c742 <dir_next>
 800e28c:	4603      	mov	r3, r0
 800e28e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e290:	7bfb      	ldrb	r3, [r7, #15]
 800e292:	2b04      	cmp	r3, #4
 800e294:	d101      	bne.n	800e29a <f_readdir+0x70>
 800e296:	2300      	movs	r3, #0
 800e298:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3710      	adds	r7, #16
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b087      	sub	sp, #28
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	60b9      	str	r1, [r7, #8]
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e2ba:	4b1f      	ldr	r3, [pc, #124]	; (800e338 <FATFS_LinkDriverEx+0x94>)
 800e2bc:	7a5b      	ldrb	r3, [r3, #9]
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d131      	bne.n	800e328 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e2c4:	4b1c      	ldr	r3, [pc, #112]	; (800e338 <FATFS_LinkDriverEx+0x94>)
 800e2c6:	7a5b      	ldrb	r3, [r3, #9]
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	4b1a      	ldr	r3, [pc, #104]	; (800e338 <FATFS_LinkDriverEx+0x94>)
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e2d2:	4b19      	ldr	r3, [pc, #100]	; (800e338 <FATFS_LinkDriverEx+0x94>)
 800e2d4:	7a5b      	ldrb	r3, [r3, #9]
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	4a17      	ldr	r2, [pc, #92]	; (800e338 <FATFS_LinkDriverEx+0x94>)
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	68fa      	ldr	r2, [r7, #12]
 800e2e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e2e2:	4b15      	ldr	r3, [pc, #84]	; (800e338 <FATFS_LinkDriverEx+0x94>)
 800e2e4:	7a5b      	ldrb	r3, [r3, #9]
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	4b13      	ldr	r3, [pc, #76]	; (800e338 <FATFS_LinkDriverEx+0x94>)
 800e2ec:	4413      	add	r3, r2
 800e2ee:	79fa      	ldrb	r2, [r7, #7]
 800e2f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e2f2:	4b11      	ldr	r3, [pc, #68]	; (800e338 <FATFS_LinkDriverEx+0x94>)
 800e2f4:	7a5b      	ldrb	r3, [r3, #9]
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	1c5a      	adds	r2, r3, #1
 800e2fa:	b2d1      	uxtb	r1, r2
 800e2fc:	4a0e      	ldr	r2, [pc, #56]	; (800e338 <FATFS_LinkDriverEx+0x94>)
 800e2fe:	7251      	strb	r1, [r2, #9]
 800e300:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e302:	7dbb      	ldrb	r3, [r7, #22]
 800e304:	3330      	adds	r3, #48	; 0x30
 800e306:	b2da      	uxtb	r2, r3
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	3301      	adds	r3, #1
 800e310:	223a      	movs	r2, #58	; 0x3a
 800e312:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	3302      	adds	r3, #2
 800e318:	222f      	movs	r2, #47	; 0x2f
 800e31a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	3303      	adds	r3, #3
 800e320:	2200      	movs	r2, #0
 800e322:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e324:	2300      	movs	r3, #0
 800e326:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e328:	7dfb      	ldrb	r3, [r7, #23]
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	371c      	adds	r7, #28
 800e32e:	46bd      	mov	sp, r7
 800e330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e334:	4770      	bx	lr
 800e336:	bf00      	nop
 800e338:	200004e8 	.word	0x200004e8

0800e33c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e346:	2200      	movs	r2, #0
 800e348:	6839      	ldr	r1, [r7, #0]
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f7ff ffaa 	bl	800e2a4 <FATFS_LinkDriverEx>
 800e350:	4603      	mov	r3, r0
}
 800e352:	4618      	mov	r0, r3
 800e354:	3708      	adds	r7, #8
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
	...

0800e35c <__errno>:
 800e35c:	4b01      	ldr	r3, [pc, #4]	; (800e364 <__errno+0x8>)
 800e35e:	6818      	ldr	r0, [r3, #0]
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	20000028 	.word	0x20000028

0800e368 <__libc_init_array>:
 800e368:	b570      	push	{r4, r5, r6, lr}
 800e36a:	4d0d      	ldr	r5, [pc, #52]	; (800e3a0 <__libc_init_array+0x38>)
 800e36c:	4c0d      	ldr	r4, [pc, #52]	; (800e3a4 <__libc_init_array+0x3c>)
 800e36e:	1b64      	subs	r4, r4, r5
 800e370:	10a4      	asrs	r4, r4, #2
 800e372:	2600      	movs	r6, #0
 800e374:	42a6      	cmp	r6, r4
 800e376:	d109      	bne.n	800e38c <__libc_init_array+0x24>
 800e378:	4d0b      	ldr	r5, [pc, #44]	; (800e3a8 <__libc_init_array+0x40>)
 800e37a:	4c0c      	ldr	r4, [pc, #48]	; (800e3ac <__libc_init_array+0x44>)
 800e37c:	f006 f882 	bl	8014484 <_init>
 800e380:	1b64      	subs	r4, r4, r5
 800e382:	10a4      	asrs	r4, r4, #2
 800e384:	2600      	movs	r6, #0
 800e386:	42a6      	cmp	r6, r4
 800e388:	d105      	bne.n	800e396 <__libc_init_array+0x2e>
 800e38a:	bd70      	pop	{r4, r5, r6, pc}
 800e38c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e390:	4798      	blx	r3
 800e392:	3601      	adds	r6, #1
 800e394:	e7ee      	b.n	800e374 <__libc_init_array+0xc>
 800e396:	f855 3b04 	ldr.w	r3, [r5], #4
 800e39a:	4798      	blx	r3
 800e39c:	3601      	adds	r6, #1
 800e39e:	e7f2      	b.n	800e386 <__libc_init_array+0x1e>
 800e3a0:	08014db0 	.word	0x08014db0
 800e3a4:	08014db0 	.word	0x08014db0
 800e3a8:	08014db0 	.word	0x08014db0
 800e3ac:	08014db4 	.word	0x08014db4

0800e3b0 <malloc>:
 800e3b0:	4b02      	ldr	r3, [pc, #8]	; (800e3bc <malloc+0xc>)
 800e3b2:	4601      	mov	r1, r0
 800e3b4:	6818      	ldr	r0, [r3, #0]
 800e3b6:	f000 b869 	b.w	800e48c <_malloc_r>
 800e3ba:	bf00      	nop
 800e3bc:	20000028 	.word	0x20000028

0800e3c0 <memcpy>:
 800e3c0:	440a      	add	r2, r1
 800e3c2:	4291      	cmp	r1, r2
 800e3c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3c8:	d100      	bne.n	800e3cc <memcpy+0xc>
 800e3ca:	4770      	bx	lr
 800e3cc:	b510      	push	{r4, lr}
 800e3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3d6:	4291      	cmp	r1, r2
 800e3d8:	d1f9      	bne.n	800e3ce <memcpy+0xe>
 800e3da:	bd10      	pop	{r4, pc}

0800e3dc <memset>:
 800e3dc:	4402      	add	r2, r0
 800e3de:	4603      	mov	r3, r0
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d100      	bne.n	800e3e6 <memset+0xa>
 800e3e4:	4770      	bx	lr
 800e3e6:	f803 1b01 	strb.w	r1, [r3], #1
 800e3ea:	e7f9      	b.n	800e3e0 <memset+0x4>

0800e3ec <_free_r>:
 800e3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3ee:	2900      	cmp	r1, #0
 800e3f0:	d048      	beq.n	800e484 <_free_r+0x98>
 800e3f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3f6:	9001      	str	r0, [sp, #4]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	f1a1 0404 	sub.w	r4, r1, #4
 800e3fe:	bfb8      	it	lt
 800e400:	18e4      	addlt	r4, r4, r3
 800e402:	f003 fbeb 	bl	8011bdc <__malloc_lock>
 800e406:	4a20      	ldr	r2, [pc, #128]	; (800e488 <_free_r+0x9c>)
 800e408:	9801      	ldr	r0, [sp, #4]
 800e40a:	6813      	ldr	r3, [r2, #0]
 800e40c:	4615      	mov	r5, r2
 800e40e:	b933      	cbnz	r3, 800e41e <_free_r+0x32>
 800e410:	6063      	str	r3, [r4, #4]
 800e412:	6014      	str	r4, [r2, #0]
 800e414:	b003      	add	sp, #12
 800e416:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e41a:	f003 bbe5 	b.w	8011be8 <__malloc_unlock>
 800e41e:	42a3      	cmp	r3, r4
 800e420:	d90b      	bls.n	800e43a <_free_r+0x4e>
 800e422:	6821      	ldr	r1, [r4, #0]
 800e424:	1862      	adds	r2, r4, r1
 800e426:	4293      	cmp	r3, r2
 800e428:	bf04      	itt	eq
 800e42a:	681a      	ldreq	r2, [r3, #0]
 800e42c:	685b      	ldreq	r3, [r3, #4]
 800e42e:	6063      	str	r3, [r4, #4]
 800e430:	bf04      	itt	eq
 800e432:	1852      	addeq	r2, r2, r1
 800e434:	6022      	streq	r2, [r4, #0]
 800e436:	602c      	str	r4, [r5, #0]
 800e438:	e7ec      	b.n	800e414 <_free_r+0x28>
 800e43a:	461a      	mov	r2, r3
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	b10b      	cbz	r3, 800e444 <_free_r+0x58>
 800e440:	42a3      	cmp	r3, r4
 800e442:	d9fa      	bls.n	800e43a <_free_r+0x4e>
 800e444:	6811      	ldr	r1, [r2, #0]
 800e446:	1855      	adds	r5, r2, r1
 800e448:	42a5      	cmp	r5, r4
 800e44a:	d10b      	bne.n	800e464 <_free_r+0x78>
 800e44c:	6824      	ldr	r4, [r4, #0]
 800e44e:	4421      	add	r1, r4
 800e450:	1854      	adds	r4, r2, r1
 800e452:	42a3      	cmp	r3, r4
 800e454:	6011      	str	r1, [r2, #0]
 800e456:	d1dd      	bne.n	800e414 <_free_r+0x28>
 800e458:	681c      	ldr	r4, [r3, #0]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	6053      	str	r3, [r2, #4]
 800e45e:	4421      	add	r1, r4
 800e460:	6011      	str	r1, [r2, #0]
 800e462:	e7d7      	b.n	800e414 <_free_r+0x28>
 800e464:	d902      	bls.n	800e46c <_free_r+0x80>
 800e466:	230c      	movs	r3, #12
 800e468:	6003      	str	r3, [r0, #0]
 800e46a:	e7d3      	b.n	800e414 <_free_r+0x28>
 800e46c:	6825      	ldr	r5, [r4, #0]
 800e46e:	1961      	adds	r1, r4, r5
 800e470:	428b      	cmp	r3, r1
 800e472:	bf04      	itt	eq
 800e474:	6819      	ldreq	r1, [r3, #0]
 800e476:	685b      	ldreq	r3, [r3, #4]
 800e478:	6063      	str	r3, [r4, #4]
 800e47a:	bf04      	itt	eq
 800e47c:	1949      	addeq	r1, r1, r5
 800e47e:	6021      	streq	r1, [r4, #0]
 800e480:	6054      	str	r4, [r2, #4]
 800e482:	e7c7      	b.n	800e414 <_free_r+0x28>
 800e484:	b003      	add	sp, #12
 800e486:	bd30      	pop	{r4, r5, pc}
 800e488:	200004f4 	.word	0x200004f4

0800e48c <_malloc_r>:
 800e48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e48e:	1ccd      	adds	r5, r1, #3
 800e490:	f025 0503 	bic.w	r5, r5, #3
 800e494:	3508      	adds	r5, #8
 800e496:	2d0c      	cmp	r5, #12
 800e498:	bf38      	it	cc
 800e49a:	250c      	movcc	r5, #12
 800e49c:	2d00      	cmp	r5, #0
 800e49e:	4606      	mov	r6, r0
 800e4a0:	db01      	blt.n	800e4a6 <_malloc_r+0x1a>
 800e4a2:	42a9      	cmp	r1, r5
 800e4a4:	d903      	bls.n	800e4ae <_malloc_r+0x22>
 800e4a6:	230c      	movs	r3, #12
 800e4a8:	6033      	str	r3, [r6, #0]
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4ae:	f003 fb95 	bl	8011bdc <__malloc_lock>
 800e4b2:	4921      	ldr	r1, [pc, #132]	; (800e538 <_malloc_r+0xac>)
 800e4b4:	680a      	ldr	r2, [r1, #0]
 800e4b6:	4614      	mov	r4, r2
 800e4b8:	b99c      	cbnz	r4, 800e4e2 <_malloc_r+0x56>
 800e4ba:	4f20      	ldr	r7, [pc, #128]	; (800e53c <_malloc_r+0xb0>)
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	b923      	cbnz	r3, 800e4ca <_malloc_r+0x3e>
 800e4c0:	4621      	mov	r1, r4
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	f000 feb6 	bl	800f234 <_sbrk_r>
 800e4c8:	6038      	str	r0, [r7, #0]
 800e4ca:	4629      	mov	r1, r5
 800e4cc:	4630      	mov	r0, r6
 800e4ce:	f000 feb1 	bl	800f234 <_sbrk_r>
 800e4d2:	1c43      	adds	r3, r0, #1
 800e4d4:	d123      	bne.n	800e51e <_malloc_r+0x92>
 800e4d6:	230c      	movs	r3, #12
 800e4d8:	6033      	str	r3, [r6, #0]
 800e4da:	4630      	mov	r0, r6
 800e4dc:	f003 fb84 	bl	8011be8 <__malloc_unlock>
 800e4e0:	e7e3      	b.n	800e4aa <_malloc_r+0x1e>
 800e4e2:	6823      	ldr	r3, [r4, #0]
 800e4e4:	1b5b      	subs	r3, r3, r5
 800e4e6:	d417      	bmi.n	800e518 <_malloc_r+0x8c>
 800e4e8:	2b0b      	cmp	r3, #11
 800e4ea:	d903      	bls.n	800e4f4 <_malloc_r+0x68>
 800e4ec:	6023      	str	r3, [r4, #0]
 800e4ee:	441c      	add	r4, r3
 800e4f0:	6025      	str	r5, [r4, #0]
 800e4f2:	e004      	b.n	800e4fe <_malloc_r+0x72>
 800e4f4:	6863      	ldr	r3, [r4, #4]
 800e4f6:	42a2      	cmp	r2, r4
 800e4f8:	bf0c      	ite	eq
 800e4fa:	600b      	streq	r3, [r1, #0]
 800e4fc:	6053      	strne	r3, [r2, #4]
 800e4fe:	4630      	mov	r0, r6
 800e500:	f003 fb72 	bl	8011be8 <__malloc_unlock>
 800e504:	f104 000b 	add.w	r0, r4, #11
 800e508:	1d23      	adds	r3, r4, #4
 800e50a:	f020 0007 	bic.w	r0, r0, #7
 800e50e:	1ac2      	subs	r2, r0, r3
 800e510:	d0cc      	beq.n	800e4ac <_malloc_r+0x20>
 800e512:	1a1b      	subs	r3, r3, r0
 800e514:	50a3      	str	r3, [r4, r2]
 800e516:	e7c9      	b.n	800e4ac <_malloc_r+0x20>
 800e518:	4622      	mov	r2, r4
 800e51a:	6864      	ldr	r4, [r4, #4]
 800e51c:	e7cc      	b.n	800e4b8 <_malloc_r+0x2c>
 800e51e:	1cc4      	adds	r4, r0, #3
 800e520:	f024 0403 	bic.w	r4, r4, #3
 800e524:	42a0      	cmp	r0, r4
 800e526:	d0e3      	beq.n	800e4f0 <_malloc_r+0x64>
 800e528:	1a21      	subs	r1, r4, r0
 800e52a:	4630      	mov	r0, r6
 800e52c:	f000 fe82 	bl	800f234 <_sbrk_r>
 800e530:	3001      	adds	r0, #1
 800e532:	d1dd      	bne.n	800e4f0 <_malloc_r+0x64>
 800e534:	e7cf      	b.n	800e4d6 <_malloc_r+0x4a>
 800e536:	bf00      	nop
 800e538:	200004f4 	.word	0x200004f4
 800e53c:	200004f8 	.word	0x200004f8

0800e540 <__cvt>:
 800e540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e544:	ec55 4b10 	vmov	r4, r5, d0
 800e548:	2d00      	cmp	r5, #0
 800e54a:	460e      	mov	r6, r1
 800e54c:	4619      	mov	r1, r3
 800e54e:	462b      	mov	r3, r5
 800e550:	bfbb      	ittet	lt
 800e552:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e556:	461d      	movlt	r5, r3
 800e558:	2300      	movge	r3, #0
 800e55a:	232d      	movlt	r3, #45	; 0x2d
 800e55c:	700b      	strb	r3, [r1, #0]
 800e55e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e560:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e564:	4691      	mov	r9, r2
 800e566:	f023 0820 	bic.w	r8, r3, #32
 800e56a:	bfbc      	itt	lt
 800e56c:	4622      	movlt	r2, r4
 800e56e:	4614      	movlt	r4, r2
 800e570:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e574:	d005      	beq.n	800e582 <__cvt+0x42>
 800e576:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e57a:	d100      	bne.n	800e57e <__cvt+0x3e>
 800e57c:	3601      	adds	r6, #1
 800e57e:	2102      	movs	r1, #2
 800e580:	e000      	b.n	800e584 <__cvt+0x44>
 800e582:	2103      	movs	r1, #3
 800e584:	ab03      	add	r3, sp, #12
 800e586:	9301      	str	r3, [sp, #4]
 800e588:	ab02      	add	r3, sp, #8
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	ec45 4b10 	vmov	d0, r4, r5
 800e590:	4653      	mov	r3, sl
 800e592:	4632      	mov	r2, r6
 800e594:	f001 ff80 	bl	8010498 <_dtoa_r>
 800e598:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e59c:	4607      	mov	r7, r0
 800e59e:	d102      	bne.n	800e5a6 <__cvt+0x66>
 800e5a0:	f019 0f01 	tst.w	r9, #1
 800e5a4:	d022      	beq.n	800e5ec <__cvt+0xac>
 800e5a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e5aa:	eb07 0906 	add.w	r9, r7, r6
 800e5ae:	d110      	bne.n	800e5d2 <__cvt+0x92>
 800e5b0:	783b      	ldrb	r3, [r7, #0]
 800e5b2:	2b30      	cmp	r3, #48	; 0x30
 800e5b4:	d10a      	bne.n	800e5cc <__cvt+0x8c>
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	4629      	mov	r1, r5
 800e5be:	f7f2 faa3 	bl	8000b08 <__aeabi_dcmpeq>
 800e5c2:	b918      	cbnz	r0, 800e5cc <__cvt+0x8c>
 800e5c4:	f1c6 0601 	rsb	r6, r6, #1
 800e5c8:	f8ca 6000 	str.w	r6, [sl]
 800e5cc:	f8da 3000 	ldr.w	r3, [sl]
 800e5d0:	4499      	add	r9, r3
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	4629      	mov	r1, r5
 800e5da:	f7f2 fa95 	bl	8000b08 <__aeabi_dcmpeq>
 800e5de:	b108      	cbz	r0, 800e5e4 <__cvt+0xa4>
 800e5e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e5e4:	2230      	movs	r2, #48	; 0x30
 800e5e6:	9b03      	ldr	r3, [sp, #12]
 800e5e8:	454b      	cmp	r3, r9
 800e5ea:	d307      	bcc.n	800e5fc <__cvt+0xbc>
 800e5ec:	9b03      	ldr	r3, [sp, #12]
 800e5ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5f0:	1bdb      	subs	r3, r3, r7
 800e5f2:	4638      	mov	r0, r7
 800e5f4:	6013      	str	r3, [r2, #0]
 800e5f6:	b004      	add	sp, #16
 800e5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5fc:	1c59      	adds	r1, r3, #1
 800e5fe:	9103      	str	r1, [sp, #12]
 800e600:	701a      	strb	r2, [r3, #0]
 800e602:	e7f0      	b.n	800e5e6 <__cvt+0xa6>

0800e604 <__exponent>:
 800e604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e606:	4603      	mov	r3, r0
 800e608:	2900      	cmp	r1, #0
 800e60a:	bfb8      	it	lt
 800e60c:	4249      	neglt	r1, r1
 800e60e:	f803 2b02 	strb.w	r2, [r3], #2
 800e612:	bfb4      	ite	lt
 800e614:	222d      	movlt	r2, #45	; 0x2d
 800e616:	222b      	movge	r2, #43	; 0x2b
 800e618:	2909      	cmp	r1, #9
 800e61a:	7042      	strb	r2, [r0, #1]
 800e61c:	dd2a      	ble.n	800e674 <__exponent+0x70>
 800e61e:	f10d 0407 	add.w	r4, sp, #7
 800e622:	46a4      	mov	ip, r4
 800e624:	270a      	movs	r7, #10
 800e626:	46a6      	mov	lr, r4
 800e628:	460a      	mov	r2, r1
 800e62a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e62e:	fb07 1516 	mls	r5, r7, r6, r1
 800e632:	3530      	adds	r5, #48	; 0x30
 800e634:	2a63      	cmp	r2, #99	; 0x63
 800e636:	f104 34ff 	add.w	r4, r4, #4294967295
 800e63a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e63e:	4631      	mov	r1, r6
 800e640:	dcf1      	bgt.n	800e626 <__exponent+0x22>
 800e642:	3130      	adds	r1, #48	; 0x30
 800e644:	f1ae 0502 	sub.w	r5, lr, #2
 800e648:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e64c:	1c44      	adds	r4, r0, #1
 800e64e:	4629      	mov	r1, r5
 800e650:	4561      	cmp	r1, ip
 800e652:	d30a      	bcc.n	800e66a <__exponent+0x66>
 800e654:	f10d 0209 	add.w	r2, sp, #9
 800e658:	eba2 020e 	sub.w	r2, r2, lr
 800e65c:	4565      	cmp	r5, ip
 800e65e:	bf88      	it	hi
 800e660:	2200      	movhi	r2, #0
 800e662:	4413      	add	r3, r2
 800e664:	1a18      	subs	r0, r3, r0
 800e666:	b003      	add	sp, #12
 800e668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e66a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e66e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e672:	e7ed      	b.n	800e650 <__exponent+0x4c>
 800e674:	2330      	movs	r3, #48	; 0x30
 800e676:	3130      	adds	r1, #48	; 0x30
 800e678:	7083      	strb	r3, [r0, #2]
 800e67a:	70c1      	strb	r1, [r0, #3]
 800e67c:	1d03      	adds	r3, r0, #4
 800e67e:	e7f1      	b.n	800e664 <__exponent+0x60>

0800e680 <_printf_float>:
 800e680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e684:	ed2d 8b02 	vpush	{d8}
 800e688:	b08d      	sub	sp, #52	; 0x34
 800e68a:	460c      	mov	r4, r1
 800e68c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e690:	4616      	mov	r6, r2
 800e692:	461f      	mov	r7, r3
 800e694:	4605      	mov	r5, r0
 800e696:	f003 fa11 	bl	8011abc <_localeconv_r>
 800e69a:	f8d0 a000 	ldr.w	sl, [r0]
 800e69e:	4650      	mov	r0, sl
 800e6a0:	f7f1 fdb0 	bl	8000204 <strlen>
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800e6a8:	6823      	ldr	r3, [r4, #0]
 800e6aa:	9305      	str	r3, [sp, #20]
 800e6ac:	f8d8 3000 	ldr.w	r3, [r8]
 800e6b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e6b4:	3307      	adds	r3, #7
 800e6b6:	f023 0307 	bic.w	r3, r3, #7
 800e6ba:	f103 0208 	add.w	r2, r3, #8
 800e6be:	f8c8 2000 	str.w	r2, [r8]
 800e6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e6ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e6ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e6d2:	9307      	str	r3, [sp, #28]
 800e6d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800e6d8:	ee08 0a10 	vmov	s16, r0
 800e6dc:	4b9f      	ldr	r3, [pc, #636]	; (800e95c <_printf_float+0x2dc>)
 800e6de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e6e6:	f7f2 fa41 	bl	8000b6c <__aeabi_dcmpun>
 800e6ea:	bb88      	cbnz	r0, 800e750 <_printf_float+0xd0>
 800e6ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6f0:	4b9a      	ldr	r3, [pc, #616]	; (800e95c <_printf_float+0x2dc>)
 800e6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f6:	f7f2 fa1b 	bl	8000b30 <__aeabi_dcmple>
 800e6fa:	bb48      	cbnz	r0, 800e750 <_printf_float+0xd0>
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	2300      	movs	r3, #0
 800e700:	4640      	mov	r0, r8
 800e702:	4649      	mov	r1, r9
 800e704:	f7f2 fa0a 	bl	8000b1c <__aeabi_dcmplt>
 800e708:	b110      	cbz	r0, 800e710 <_printf_float+0x90>
 800e70a:	232d      	movs	r3, #45	; 0x2d
 800e70c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e710:	4b93      	ldr	r3, [pc, #588]	; (800e960 <_printf_float+0x2e0>)
 800e712:	4894      	ldr	r0, [pc, #592]	; (800e964 <_printf_float+0x2e4>)
 800e714:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e718:	bf94      	ite	ls
 800e71a:	4698      	movls	r8, r3
 800e71c:	4680      	movhi	r8, r0
 800e71e:	2303      	movs	r3, #3
 800e720:	6123      	str	r3, [r4, #16]
 800e722:	9b05      	ldr	r3, [sp, #20]
 800e724:	f023 0204 	bic.w	r2, r3, #4
 800e728:	6022      	str	r2, [r4, #0]
 800e72a:	f04f 0900 	mov.w	r9, #0
 800e72e:	9700      	str	r7, [sp, #0]
 800e730:	4633      	mov	r3, r6
 800e732:	aa0b      	add	r2, sp, #44	; 0x2c
 800e734:	4621      	mov	r1, r4
 800e736:	4628      	mov	r0, r5
 800e738:	f000 f9d8 	bl	800eaec <_printf_common>
 800e73c:	3001      	adds	r0, #1
 800e73e:	f040 8090 	bne.w	800e862 <_printf_float+0x1e2>
 800e742:	f04f 30ff 	mov.w	r0, #4294967295
 800e746:	b00d      	add	sp, #52	; 0x34
 800e748:	ecbd 8b02 	vpop	{d8}
 800e74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e750:	4642      	mov	r2, r8
 800e752:	464b      	mov	r3, r9
 800e754:	4640      	mov	r0, r8
 800e756:	4649      	mov	r1, r9
 800e758:	f7f2 fa08 	bl	8000b6c <__aeabi_dcmpun>
 800e75c:	b140      	cbz	r0, 800e770 <_printf_float+0xf0>
 800e75e:	464b      	mov	r3, r9
 800e760:	2b00      	cmp	r3, #0
 800e762:	bfbc      	itt	lt
 800e764:	232d      	movlt	r3, #45	; 0x2d
 800e766:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e76a:	487f      	ldr	r0, [pc, #508]	; (800e968 <_printf_float+0x2e8>)
 800e76c:	4b7f      	ldr	r3, [pc, #508]	; (800e96c <_printf_float+0x2ec>)
 800e76e:	e7d1      	b.n	800e714 <_printf_float+0x94>
 800e770:	6863      	ldr	r3, [r4, #4]
 800e772:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e776:	9206      	str	r2, [sp, #24]
 800e778:	1c5a      	adds	r2, r3, #1
 800e77a:	d13f      	bne.n	800e7fc <_printf_float+0x17c>
 800e77c:	2306      	movs	r3, #6
 800e77e:	6063      	str	r3, [r4, #4]
 800e780:	9b05      	ldr	r3, [sp, #20]
 800e782:	6861      	ldr	r1, [r4, #4]
 800e784:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e788:	2300      	movs	r3, #0
 800e78a:	9303      	str	r3, [sp, #12]
 800e78c:	ab0a      	add	r3, sp, #40	; 0x28
 800e78e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e792:	ab09      	add	r3, sp, #36	; 0x24
 800e794:	ec49 8b10 	vmov	d0, r8, r9
 800e798:	9300      	str	r3, [sp, #0]
 800e79a:	6022      	str	r2, [r4, #0]
 800e79c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	f7ff fecd 	bl	800e540 <__cvt>
 800e7a6:	9b06      	ldr	r3, [sp, #24]
 800e7a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7aa:	2b47      	cmp	r3, #71	; 0x47
 800e7ac:	4680      	mov	r8, r0
 800e7ae:	d108      	bne.n	800e7c2 <_printf_float+0x142>
 800e7b0:	1cc8      	adds	r0, r1, #3
 800e7b2:	db02      	blt.n	800e7ba <_printf_float+0x13a>
 800e7b4:	6863      	ldr	r3, [r4, #4]
 800e7b6:	4299      	cmp	r1, r3
 800e7b8:	dd41      	ble.n	800e83e <_printf_float+0x1be>
 800e7ba:	f1ab 0b02 	sub.w	fp, fp, #2
 800e7be:	fa5f fb8b 	uxtb.w	fp, fp
 800e7c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e7c6:	d820      	bhi.n	800e80a <_printf_float+0x18a>
 800e7c8:	3901      	subs	r1, #1
 800e7ca:	465a      	mov	r2, fp
 800e7cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e7d0:	9109      	str	r1, [sp, #36]	; 0x24
 800e7d2:	f7ff ff17 	bl	800e604 <__exponent>
 800e7d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7d8:	1813      	adds	r3, r2, r0
 800e7da:	2a01      	cmp	r2, #1
 800e7dc:	4681      	mov	r9, r0
 800e7de:	6123      	str	r3, [r4, #16]
 800e7e0:	dc02      	bgt.n	800e7e8 <_printf_float+0x168>
 800e7e2:	6822      	ldr	r2, [r4, #0]
 800e7e4:	07d2      	lsls	r2, r2, #31
 800e7e6:	d501      	bpl.n	800e7ec <_printf_float+0x16c>
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	6123      	str	r3, [r4, #16]
 800e7ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d09c      	beq.n	800e72e <_printf_float+0xae>
 800e7f4:	232d      	movs	r3, #45	; 0x2d
 800e7f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7fa:	e798      	b.n	800e72e <_printf_float+0xae>
 800e7fc:	9a06      	ldr	r2, [sp, #24]
 800e7fe:	2a47      	cmp	r2, #71	; 0x47
 800e800:	d1be      	bne.n	800e780 <_printf_float+0x100>
 800e802:	2b00      	cmp	r3, #0
 800e804:	d1bc      	bne.n	800e780 <_printf_float+0x100>
 800e806:	2301      	movs	r3, #1
 800e808:	e7b9      	b.n	800e77e <_printf_float+0xfe>
 800e80a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e80e:	d118      	bne.n	800e842 <_printf_float+0x1c2>
 800e810:	2900      	cmp	r1, #0
 800e812:	6863      	ldr	r3, [r4, #4]
 800e814:	dd0b      	ble.n	800e82e <_printf_float+0x1ae>
 800e816:	6121      	str	r1, [r4, #16]
 800e818:	b913      	cbnz	r3, 800e820 <_printf_float+0x1a0>
 800e81a:	6822      	ldr	r2, [r4, #0]
 800e81c:	07d0      	lsls	r0, r2, #31
 800e81e:	d502      	bpl.n	800e826 <_printf_float+0x1a6>
 800e820:	3301      	adds	r3, #1
 800e822:	440b      	add	r3, r1
 800e824:	6123      	str	r3, [r4, #16]
 800e826:	65a1      	str	r1, [r4, #88]	; 0x58
 800e828:	f04f 0900 	mov.w	r9, #0
 800e82c:	e7de      	b.n	800e7ec <_printf_float+0x16c>
 800e82e:	b913      	cbnz	r3, 800e836 <_printf_float+0x1b6>
 800e830:	6822      	ldr	r2, [r4, #0]
 800e832:	07d2      	lsls	r2, r2, #31
 800e834:	d501      	bpl.n	800e83a <_printf_float+0x1ba>
 800e836:	3302      	adds	r3, #2
 800e838:	e7f4      	b.n	800e824 <_printf_float+0x1a4>
 800e83a:	2301      	movs	r3, #1
 800e83c:	e7f2      	b.n	800e824 <_printf_float+0x1a4>
 800e83e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e844:	4299      	cmp	r1, r3
 800e846:	db05      	blt.n	800e854 <_printf_float+0x1d4>
 800e848:	6823      	ldr	r3, [r4, #0]
 800e84a:	6121      	str	r1, [r4, #16]
 800e84c:	07d8      	lsls	r0, r3, #31
 800e84e:	d5ea      	bpl.n	800e826 <_printf_float+0x1a6>
 800e850:	1c4b      	adds	r3, r1, #1
 800e852:	e7e7      	b.n	800e824 <_printf_float+0x1a4>
 800e854:	2900      	cmp	r1, #0
 800e856:	bfd4      	ite	le
 800e858:	f1c1 0202 	rsble	r2, r1, #2
 800e85c:	2201      	movgt	r2, #1
 800e85e:	4413      	add	r3, r2
 800e860:	e7e0      	b.n	800e824 <_printf_float+0x1a4>
 800e862:	6823      	ldr	r3, [r4, #0]
 800e864:	055a      	lsls	r2, r3, #21
 800e866:	d407      	bmi.n	800e878 <_printf_float+0x1f8>
 800e868:	6923      	ldr	r3, [r4, #16]
 800e86a:	4642      	mov	r2, r8
 800e86c:	4631      	mov	r1, r6
 800e86e:	4628      	mov	r0, r5
 800e870:	47b8      	blx	r7
 800e872:	3001      	adds	r0, #1
 800e874:	d12c      	bne.n	800e8d0 <_printf_float+0x250>
 800e876:	e764      	b.n	800e742 <_printf_float+0xc2>
 800e878:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e87c:	f240 80e0 	bls.w	800ea40 <_printf_float+0x3c0>
 800e880:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e884:	2200      	movs	r2, #0
 800e886:	2300      	movs	r3, #0
 800e888:	f7f2 f93e 	bl	8000b08 <__aeabi_dcmpeq>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	d034      	beq.n	800e8fa <_printf_float+0x27a>
 800e890:	4a37      	ldr	r2, [pc, #220]	; (800e970 <_printf_float+0x2f0>)
 800e892:	2301      	movs	r3, #1
 800e894:	4631      	mov	r1, r6
 800e896:	4628      	mov	r0, r5
 800e898:	47b8      	blx	r7
 800e89a:	3001      	adds	r0, #1
 800e89c:	f43f af51 	beq.w	800e742 <_printf_float+0xc2>
 800e8a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	db02      	blt.n	800e8ae <_printf_float+0x22e>
 800e8a8:	6823      	ldr	r3, [r4, #0]
 800e8aa:	07d8      	lsls	r0, r3, #31
 800e8ac:	d510      	bpl.n	800e8d0 <_printf_float+0x250>
 800e8ae:	ee18 3a10 	vmov	r3, s16
 800e8b2:	4652      	mov	r2, sl
 800e8b4:	4631      	mov	r1, r6
 800e8b6:	4628      	mov	r0, r5
 800e8b8:	47b8      	blx	r7
 800e8ba:	3001      	adds	r0, #1
 800e8bc:	f43f af41 	beq.w	800e742 <_printf_float+0xc2>
 800e8c0:	f04f 0800 	mov.w	r8, #0
 800e8c4:	f104 091a 	add.w	r9, r4, #26
 800e8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	4543      	cmp	r3, r8
 800e8ce:	dc09      	bgt.n	800e8e4 <_printf_float+0x264>
 800e8d0:	6823      	ldr	r3, [r4, #0]
 800e8d2:	079b      	lsls	r3, r3, #30
 800e8d4:	f100 8105 	bmi.w	800eae2 <_printf_float+0x462>
 800e8d8:	68e0      	ldr	r0, [r4, #12]
 800e8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8dc:	4298      	cmp	r0, r3
 800e8de:	bfb8      	it	lt
 800e8e0:	4618      	movlt	r0, r3
 800e8e2:	e730      	b.n	800e746 <_printf_float+0xc6>
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	464a      	mov	r2, r9
 800e8e8:	4631      	mov	r1, r6
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	47b8      	blx	r7
 800e8ee:	3001      	adds	r0, #1
 800e8f0:	f43f af27 	beq.w	800e742 <_printf_float+0xc2>
 800e8f4:	f108 0801 	add.w	r8, r8, #1
 800e8f8:	e7e6      	b.n	800e8c8 <_printf_float+0x248>
 800e8fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	dc39      	bgt.n	800e974 <_printf_float+0x2f4>
 800e900:	4a1b      	ldr	r2, [pc, #108]	; (800e970 <_printf_float+0x2f0>)
 800e902:	2301      	movs	r3, #1
 800e904:	4631      	mov	r1, r6
 800e906:	4628      	mov	r0, r5
 800e908:	47b8      	blx	r7
 800e90a:	3001      	adds	r0, #1
 800e90c:	f43f af19 	beq.w	800e742 <_printf_float+0xc2>
 800e910:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e914:	4313      	orrs	r3, r2
 800e916:	d102      	bne.n	800e91e <_printf_float+0x29e>
 800e918:	6823      	ldr	r3, [r4, #0]
 800e91a:	07d9      	lsls	r1, r3, #31
 800e91c:	d5d8      	bpl.n	800e8d0 <_printf_float+0x250>
 800e91e:	ee18 3a10 	vmov	r3, s16
 800e922:	4652      	mov	r2, sl
 800e924:	4631      	mov	r1, r6
 800e926:	4628      	mov	r0, r5
 800e928:	47b8      	blx	r7
 800e92a:	3001      	adds	r0, #1
 800e92c:	f43f af09 	beq.w	800e742 <_printf_float+0xc2>
 800e930:	f04f 0900 	mov.w	r9, #0
 800e934:	f104 0a1a 	add.w	sl, r4, #26
 800e938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e93a:	425b      	negs	r3, r3
 800e93c:	454b      	cmp	r3, r9
 800e93e:	dc01      	bgt.n	800e944 <_printf_float+0x2c4>
 800e940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e942:	e792      	b.n	800e86a <_printf_float+0x1ea>
 800e944:	2301      	movs	r3, #1
 800e946:	4652      	mov	r2, sl
 800e948:	4631      	mov	r1, r6
 800e94a:	4628      	mov	r0, r5
 800e94c:	47b8      	blx	r7
 800e94e:	3001      	adds	r0, #1
 800e950:	f43f aef7 	beq.w	800e742 <_printf_float+0xc2>
 800e954:	f109 0901 	add.w	r9, r9, #1
 800e958:	e7ee      	b.n	800e938 <_printf_float+0x2b8>
 800e95a:	bf00      	nop
 800e95c:	7fefffff 	.word	0x7fefffff
 800e960:	080149a0 	.word	0x080149a0
 800e964:	080149a4 	.word	0x080149a4
 800e968:	080149ac 	.word	0x080149ac
 800e96c:	080149a8 	.word	0x080149a8
 800e970:	08014d11 	.word	0x08014d11
 800e974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e976:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e978:	429a      	cmp	r2, r3
 800e97a:	bfa8      	it	ge
 800e97c:	461a      	movge	r2, r3
 800e97e:	2a00      	cmp	r2, #0
 800e980:	4691      	mov	r9, r2
 800e982:	dc37      	bgt.n	800e9f4 <_printf_float+0x374>
 800e984:	f04f 0b00 	mov.w	fp, #0
 800e988:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e98c:	f104 021a 	add.w	r2, r4, #26
 800e990:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e992:	9305      	str	r3, [sp, #20]
 800e994:	eba3 0309 	sub.w	r3, r3, r9
 800e998:	455b      	cmp	r3, fp
 800e99a:	dc33      	bgt.n	800ea04 <_printf_float+0x384>
 800e99c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	db3b      	blt.n	800ea1c <_printf_float+0x39c>
 800e9a4:	6823      	ldr	r3, [r4, #0]
 800e9a6:	07da      	lsls	r2, r3, #31
 800e9a8:	d438      	bmi.n	800ea1c <_printf_float+0x39c>
 800e9aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9ac:	9b05      	ldr	r3, [sp, #20]
 800e9ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	eba2 0901 	sub.w	r9, r2, r1
 800e9b6:	4599      	cmp	r9, r3
 800e9b8:	bfa8      	it	ge
 800e9ba:	4699      	movge	r9, r3
 800e9bc:	f1b9 0f00 	cmp.w	r9, #0
 800e9c0:	dc35      	bgt.n	800ea2e <_printf_float+0x3ae>
 800e9c2:	f04f 0800 	mov.w	r8, #0
 800e9c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9ca:	f104 0a1a 	add.w	sl, r4, #26
 800e9ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9d2:	1a9b      	subs	r3, r3, r2
 800e9d4:	eba3 0309 	sub.w	r3, r3, r9
 800e9d8:	4543      	cmp	r3, r8
 800e9da:	f77f af79 	ble.w	800e8d0 <_printf_float+0x250>
 800e9de:	2301      	movs	r3, #1
 800e9e0:	4652      	mov	r2, sl
 800e9e2:	4631      	mov	r1, r6
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	47b8      	blx	r7
 800e9e8:	3001      	adds	r0, #1
 800e9ea:	f43f aeaa 	beq.w	800e742 <_printf_float+0xc2>
 800e9ee:	f108 0801 	add.w	r8, r8, #1
 800e9f2:	e7ec      	b.n	800e9ce <_printf_float+0x34e>
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	4631      	mov	r1, r6
 800e9f8:	4642      	mov	r2, r8
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	47b8      	blx	r7
 800e9fe:	3001      	adds	r0, #1
 800ea00:	d1c0      	bne.n	800e984 <_printf_float+0x304>
 800ea02:	e69e      	b.n	800e742 <_printf_float+0xc2>
 800ea04:	2301      	movs	r3, #1
 800ea06:	4631      	mov	r1, r6
 800ea08:	4628      	mov	r0, r5
 800ea0a:	9205      	str	r2, [sp, #20]
 800ea0c:	47b8      	blx	r7
 800ea0e:	3001      	adds	r0, #1
 800ea10:	f43f ae97 	beq.w	800e742 <_printf_float+0xc2>
 800ea14:	9a05      	ldr	r2, [sp, #20]
 800ea16:	f10b 0b01 	add.w	fp, fp, #1
 800ea1a:	e7b9      	b.n	800e990 <_printf_float+0x310>
 800ea1c:	ee18 3a10 	vmov	r3, s16
 800ea20:	4652      	mov	r2, sl
 800ea22:	4631      	mov	r1, r6
 800ea24:	4628      	mov	r0, r5
 800ea26:	47b8      	blx	r7
 800ea28:	3001      	adds	r0, #1
 800ea2a:	d1be      	bne.n	800e9aa <_printf_float+0x32a>
 800ea2c:	e689      	b.n	800e742 <_printf_float+0xc2>
 800ea2e:	9a05      	ldr	r2, [sp, #20]
 800ea30:	464b      	mov	r3, r9
 800ea32:	4442      	add	r2, r8
 800ea34:	4631      	mov	r1, r6
 800ea36:	4628      	mov	r0, r5
 800ea38:	47b8      	blx	r7
 800ea3a:	3001      	adds	r0, #1
 800ea3c:	d1c1      	bne.n	800e9c2 <_printf_float+0x342>
 800ea3e:	e680      	b.n	800e742 <_printf_float+0xc2>
 800ea40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea42:	2a01      	cmp	r2, #1
 800ea44:	dc01      	bgt.n	800ea4a <_printf_float+0x3ca>
 800ea46:	07db      	lsls	r3, r3, #31
 800ea48:	d538      	bpl.n	800eabc <_printf_float+0x43c>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	4642      	mov	r2, r8
 800ea4e:	4631      	mov	r1, r6
 800ea50:	4628      	mov	r0, r5
 800ea52:	47b8      	blx	r7
 800ea54:	3001      	adds	r0, #1
 800ea56:	f43f ae74 	beq.w	800e742 <_printf_float+0xc2>
 800ea5a:	ee18 3a10 	vmov	r3, s16
 800ea5e:	4652      	mov	r2, sl
 800ea60:	4631      	mov	r1, r6
 800ea62:	4628      	mov	r0, r5
 800ea64:	47b8      	blx	r7
 800ea66:	3001      	adds	r0, #1
 800ea68:	f43f ae6b 	beq.w	800e742 <_printf_float+0xc2>
 800ea6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea70:	2200      	movs	r2, #0
 800ea72:	2300      	movs	r3, #0
 800ea74:	f7f2 f848 	bl	8000b08 <__aeabi_dcmpeq>
 800ea78:	b9d8      	cbnz	r0, 800eab2 <_printf_float+0x432>
 800ea7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea7c:	f108 0201 	add.w	r2, r8, #1
 800ea80:	3b01      	subs	r3, #1
 800ea82:	4631      	mov	r1, r6
 800ea84:	4628      	mov	r0, r5
 800ea86:	47b8      	blx	r7
 800ea88:	3001      	adds	r0, #1
 800ea8a:	d10e      	bne.n	800eaaa <_printf_float+0x42a>
 800ea8c:	e659      	b.n	800e742 <_printf_float+0xc2>
 800ea8e:	2301      	movs	r3, #1
 800ea90:	4652      	mov	r2, sl
 800ea92:	4631      	mov	r1, r6
 800ea94:	4628      	mov	r0, r5
 800ea96:	47b8      	blx	r7
 800ea98:	3001      	adds	r0, #1
 800ea9a:	f43f ae52 	beq.w	800e742 <_printf_float+0xc2>
 800ea9e:	f108 0801 	add.w	r8, r8, #1
 800eaa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	4543      	cmp	r3, r8
 800eaa8:	dcf1      	bgt.n	800ea8e <_printf_float+0x40e>
 800eaaa:	464b      	mov	r3, r9
 800eaac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eab0:	e6dc      	b.n	800e86c <_printf_float+0x1ec>
 800eab2:	f04f 0800 	mov.w	r8, #0
 800eab6:	f104 0a1a 	add.w	sl, r4, #26
 800eaba:	e7f2      	b.n	800eaa2 <_printf_float+0x422>
 800eabc:	2301      	movs	r3, #1
 800eabe:	4642      	mov	r2, r8
 800eac0:	e7df      	b.n	800ea82 <_printf_float+0x402>
 800eac2:	2301      	movs	r3, #1
 800eac4:	464a      	mov	r2, r9
 800eac6:	4631      	mov	r1, r6
 800eac8:	4628      	mov	r0, r5
 800eaca:	47b8      	blx	r7
 800eacc:	3001      	adds	r0, #1
 800eace:	f43f ae38 	beq.w	800e742 <_printf_float+0xc2>
 800ead2:	f108 0801 	add.w	r8, r8, #1
 800ead6:	68e3      	ldr	r3, [r4, #12]
 800ead8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eada:	1a5b      	subs	r3, r3, r1
 800eadc:	4543      	cmp	r3, r8
 800eade:	dcf0      	bgt.n	800eac2 <_printf_float+0x442>
 800eae0:	e6fa      	b.n	800e8d8 <_printf_float+0x258>
 800eae2:	f04f 0800 	mov.w	r8, #0
 800eae6:	f104 0919 	add.w	r9, r4, #25
 800eaea:	e7f4      	b.n	800ead6 <_printf_float+0x456>

0800eaec <_printf_common>:
 800eaec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaf0:	4616      	mov	r6, r2
 800eaf2:	4699      	mov	r9, r3
 800eaf4:	688a      	ldr	r2, [r1, #8]
 800eaf6:	690b      	ldr	r3, [r1, #16]
 800eaf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eafc:	4293      	cmp	r3, r2
 800eafe:	bfb8      	it	lt
 800eb00:	4613      	movlt	r3, r2
 800eb02:	6033      	str	r3, [r6, #0]
 800eb04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb08:	4607      	mov	r7, r0
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	b10a      	cbz	r2, 800eb12 <_printf_common+0x26>
 800eb0e:	3301      	adds	r3, #1
 800eb10:	6033      	str	r3, [r6, #0]
 800eb12:	6823      	ldr	r3, [r4, #0]
 800eb14:	0699      	lsls	r1, r3, #26
 800eb16:	bf42      	ittt	mi
 800eb18:	6833      	ldrmi	r3, [r6, #0]
 800eb1a:	3302      	addmi	r3, #2
 800eb1c:	6033      	strmi	r3, [r6, #0]
 800eb1e:	6825      	ldr	r5, [r4, #0]
 800eb20:	f015 0506 	ands.w	r5, r5, #6
 800eb24:	d106      	bne.n	800eb34 <_printf_common+0x48>
 800eb26:	f104 0a19 	add.w	sl, r4, #25
 800eb2a:	68e3      	ldr	r3, [r4, #12]
 800eb2c:	6832      	ldr	r2, [r6, #0]
 800eb2e:	1a9b      	subs	r3, r3, r2
 800eb30:	42ab      	cmp	r3, r5
 800eb32:	dc26      	bgt.n	800eb82 <_printf_common+0x96>
 800eb34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eb38:	1e13      	subs	r3, r2, #0
 800eb3a:	6822      	ldr	r2, [r4, #0]
 800eb3c:	bf18      	it	ne
 800eb3e:	2301      	movne	r3, #1
 800eb40:	0692      	lsls	r2, r2, #26
 800eb42:	d42b      	bmi.n	800eb9c <_printf_common+0xb0>
 800eb44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb48:	4649      	mov	r1, r9
 800eb4a:	4638      	mov	r0, r7
 800eb4c:	47c0      	blx	r8
 800eb4e:	3001      	adds	r0, #1
 800eb50:	d01e      	beq.n	800eb90 <_printf_common+0xa4>
 800eb52:	6823      	ldr	r3, [r4, #0]
 800eb54:	68e5      	ldr	r5, [r4, #12]
 800eb56:	6832      	ldr	r2, [r6, #0]
 800eb58:	f003 0306 	and.w	r3, r3, #6
 800eb5c:	2b04      	cmp	r3, #4
 800eb5e:	bf08      	it	eq
 800eb60:	1aad      	subeq	r5, r5, r2
 800eb62:	68a3      	ldr	r3, [r4, #8]
 800eb64:	6922      	ldr	r2, [r4, #16]
 800eb66:	bf0c      	ite	eq
 800eb68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb6c:	2500      	movne	r5, #0
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	bfc4      	itt	gt
 800eb72:	1a9b      	subgt	r3, r3, r2
 800eb74:	18ed      	addgt	r5, r5, r3
 800eb76:	2600      	movs	r6, #0
 800eb78:	341a      	adds	r4, #26
 800eb7a:	42b5      	cmp	r5, r6
 800eb7c:	d11a      	bne.n	800ebb4 <_printf_common+0xc8>
 800eb7e:	2000      	movs	r0, #0
 800eb80:	e008      	b.n	800eb94 <_printf_common+0xa8>
 800eb82:	2301      	movs	r3, #1
 800eb84:	4652      	mov	r2, sl
 800eb86:	4649      	mov	r1, r9
 800eb88:	4638      	mov	r0, r7
 800eb8a:	47c0      	blx	r8
 800eb8c:	3001      	adds	r0, #1
 800eb8e:	d103      	bne.n	800eb98 <_printf_common+0xac>
 800eb90:	f04f 30ff 	mov.w	r0, #4294967295
 800eb94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb98:	3501      	adds	r5, #1
 800eb9a:	e7c6      	b.n	800eb2a <_printf_common+0x3e>
 800eb9c:	18e1      	adds	r1, r4, r3
 800eb9e:	1c5a      	adds	r2, r3, #1
 800eba0:	2030      	movs	r0, #48	; 0x30
 800eba2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eba6:	4422      	add	r2, r4
 800eba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebb0:	3302      	adds	r3, #2
 800ebb2:	e7c7      	b.n	800eb44 <_printf_common+0x58>
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	4622      	mov	r2, r4
 800ebb8:	4649      	mov	r1, r9
 800ebba:	4638      	mov	r0, r7
 800ebbc:	47c0      	blx	r8
 800ebbe:	3001      	adds	r0, #1
 800ebc0:	d0e6      	beq.n	800eb90 <_printf_common+0xa4>
 800ebc2:	3601      	adds	r6, #1
 800ebc4:	e7d9      	b.n	800eb7a <_printf_common+0x8e>
	...

0800ebc8 <_printf_i>:
 800ebc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebcc:	460c      	mov	r4, r1
 800ebce:	4691      	mov	r9, r2
 800ebd0:	7e27      	ldrb	r7, [r4, #24]
 800ebd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ebd4:	2f78      	cmp	r7, #120	; 0x78
 800ebd6:	4680      	mov	r8, r0
 800ebd8:	469a      	mov	sl, r3
 800ebda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebde:	d807      	bhi.n	800ebf0 <_printf_i+0x28>
 800ebe0:	2f62      	cmp	r7, #98	; 0x62
 800ebe2:	d80a      	bhi.n	800ebfa <_printf_i+0x32>
 800ebe4:	2f00      	cmp	r7, #0
 800ebe6:	f000 80d8 	beq.w	800ed9a <_printf_i+0x1d2>
 800ebea:	2f58      	cmp	r7, #88	; 0x58
 800ebec:	f000 80a3 	beq.w	800ed36 <_printf_i+0x16e>
 800ebf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ebf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ebf8:	e03a      	b.n	800ec70 <_printf_i+0xa8>
 800ebfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ebfe:	2b15      	cmp	r3, #21
 800ec00:	d8f6      	bhi.n	800ebf0 <_printf_i+0x28>
 800ec02:	a001      	add	r0, pc, #4	; (adr r0, 800ec08 <_printf_i+0x40>)
 800ec04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ec08:	0800ec61 	.word	0x0800ec61
 800ec0c:	0800ec75 	.word	0x0800ec75
 800ec10:	0800ebf1 	.word	0x0800ebf1
 800ec14:	0800ebf1 	.word	0x0800ebf1
 800ec18:	0800ebf1 	.word	0x0800ebf1
 800ec1c:	0800ebf1 	.word	0x0800ebf1
 800ec20:	0800ec75 	.word	0x0800ec75
 800ec24:	0800ebf1 	.word	0x0800ebf1
 800ec28:	0800ebf1 	.word	0x0800ebf1
 800ec2c:	0800ebf1 	.word	0x0800ebf1
 800ec30:	0800ebf1 	.word	0x0800ebf1
 800ec34:	0800ed81 	.word	0x0800ed81
 800ec38:	0800eca5 	.word	0x0800eca5
 800ec3c:	0800ed63 	.word	0x0800ed63
 800ec40:	0800ebf1 	.word	0x0800ebf1
 800ec44:	0800ebf1 	.word	0x0800ebf1
 800ec48:	0800eda3 	.word	0x0800eda3
 800ec4c:	0800ebf1 	.word	0x0800ebf1
 800ec50:	0800eca5 	.word	0x0800eca5
 800ec54:	0800ebf1 	.word	0x0800ebf1
 800ec58:	0800ebf1 	.word	0x0800ebf1
 800ec5c:	0800ed6b 	.word	0x0800ed6b
 800ec60:	680b      	ldr	r3, [r1, #0]
 800ec62:	1d1a      	adds	r2, r3, #4
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	600a      	str	r2, [r1, #0]
 800ec68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ec6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec70:	2301      	movs	r3, #1
 800ec72:	e0a3      	b.n	800edbc <_printf_i+0x1f4>
 800ec74:	6825      	ldr	r5, [r4, #0]
 800ec76:	6808      	ldr	r0, [r1, #0]
 800ec78:	062e      	lsls	r6, r5, #24
 800ec7a:	f100 0304 	add.w	r3, r0, #4
 800ec7e:	d50a      	bpl.n	800ec96 <_printf_i+0xce>
 800ec80:	6805      	ldr	r5, [r0, #0]
 800ec82:	600b      	str	r3, [r1, #0]
 800ec84:	2d00      	cmp	r5, #0
 800ec86:	da03      	bge.n	800ec90 <_printf_i+0xc8>
 800ec88:	232d      	movs	r3, #45	; 0x2d
 800ec8a:	426d      	negs	r5, r5
 800ec8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec90:	485e      	ldr	r0, [pc, #376]	; (800ee0c <_printf_i+0x244>)
 800ec92:	230a      	movs	r3, #10
 800ec94:	e019      	b.n	800ecca <_printf_i+0x102>
 800ec96:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ec9a:	6805      	ldr	r5, [r0, #0]
 800ec9c:	600b      	str	r3, [r1, #0]
 800ec9e:	bf18      	it	ne
 800eca0:	b22d      	sxthne	r5, r5
 800eca2:	e7ef      	b.n	800ec84 <_printf_i+0xbc>
 800eca4:	680b      	ldr	r3, [r1, #0]
 800eca6:	6825      	ldr	r5, [r4, #0]
 800eca8:	1d18      	adds	r0, r3, #4
 800ecaa:	6008      	str	r0, [r1, #0]
 800ecac:	0628      	lsls	r0, r5, #24
 800ecae:	d501      	bpl.n	800ecb4 <_printf_i+0xec>
 800ecb0:	681d      	ldr	r5, [r3, #0]
 800ecb2:	e002      	b.n	800ecba <_printf_i+0xf2>
 800ecb4:	0669      	lsls	r1, r5, #25
 800ecb6:	d5fb      	bpl.n	800ecb0 <_printf_i+0xe8>
 800ecb8:	881d      	ldrh	r5, [r3, #0]
 800ecba:	4854      	ldr	r0, [pc, #336]	; (800ee0c <_printf_i+0x244>)
 800ecbc:	2f6f      	cmp	r7, #111	; 0x6f
 800ecbe:	bf0c      	ite	eq
 800ecc0:	2308      	moveq	r3, #8
 800ecc2:	230a      	movne	r3, #10
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ecca:	6866      	ldr	r6, [r4, #4]
 800eccc:	60a6      	str	r6, [r4, #8]
 800ecce:	2e00      	cmp	r6, #0
 800ecd0:	bfa2      	ittt	ge
 800ecd2:	6821      	ldrge	r1, [r4, #0]
 800ecd4:	f021 0104 	bicge.w	r1, r1, #4
 800ecd8:	6021      	strge	r1, [r4, #0]
 800ecda:	b90d      	cbnz	r5, 800ece0 <_printf_i+0x118>
 800ecdc:	2e00      	cmp	r6, #0
 800ecde:	d04d      	beq.n	800ed7c <_printf_i+0x1b4>
 800ece0:	4616      	mov	r6, r2
 800ece2:	fbb5 f1f3 	udiv	r1, r5, r3
 800ece6:	fb03 5711 	mls	r7, r3, r1, r5
 800ecea:	5dc7      	ldrb	r7, [r0, r7]
 800ecec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ecf0:	462f      	mov	r7, r5
 800ecf2:	42bb      	cmp	r3, r7
 800ecf4:	460d      	mov	r5, r1
 800ecf6:	d9f4      	bls.n	800ece2 <_printf_i+0x11a>
 800ecf8:	2b08      	cmp	r3, #8
 800ecfa:	d10b      	bne.n	800ed14 <_printf_i+0x14c>
 800ecfc:	6823      	ldr	r3, [r4, #0]
 800ecfe:	07df      	lsls	r7, r3, #31
 800ed00:	d508      	bpl.n	800ed14 <_printf_i+0x14c>
 800ed02:	6923      	ldr	r3, [r4, #16]
 800ed04:	6861      	ldr	r1, [r4, #4]
 800ed06:	4299      	cmp	r1, r3
 800ed08:	bfde      	ittt	le
 800ed0a:	2330      	movle	r3, #48	; 0x30
 800ed0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed10:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed14:	1b92      	subs	r2, r2, r6
 800ed16:	6122      	str	r2, [r4, #16]
 800ed18:	f8cd a000 	str.w	sl, [sp]
 800ed1c:	464b      	mov	r3, r9
 800ed1e:	aa03      	add	r2, sp, #12
 800ed20:	4621      	mov	r1, r4
 800ed22:	4640      	mov	r0, r8
 800ed24:	f7ff fee2 	bl	800eaec <_printf_common>
 800ed28:	3001      	adds	r0, #1
 800ed2a:	d14c      	bne.n	800edc6 <_printf_i+0x1fe>
 800ed2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed30:	b004      	add	sp, #16
 800ed32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed36:	4835      	ldr	r0, [pc, #212]	; (800ee0c <_printf_i+0x244>)
 800ed38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ed3c:	6823      	ldr	r3, [r4, #0]
 800ed3e:	680e      	ldr	r6, [r1, #0]
 800ed40:	061f      	lsls	r7, r3, #24
 800ed42:	f856 5b04 	ldr.w	r5, [r6], #4
 800ed46:	600e      	str	r6, [r1, #0]
 800ed48:	d514      	bpl.n	800ed74 <_printf_i+0x1ac>
 800ed4a:	07d9      	lsls	r1, r3, #31
 800ed4c:	bf44      	itt	mi
 800ed4e:	f043 0320 	orrmi.w	r3, r3, #32
 800ed52:	6023      	strmi	r3, [r4, #0]
 800ed54:	b91d      	cbnz	r5, 800ed5e <_printf_i+0x196>
 800ed56:	6823      	ldr	r3, [r4, #0]
 800ed58:	f023 0320 	bic.w	r3, r3, #32
 800ed5c:	6023      	str	r3, [r4, #0]
 800ed5e:	2310      	movs	r3, #16
 800ed60:	e7b0      	b.n	800ecc4 <_printf_i+0xfc>
 800ed62:	6823      	ldr	r3, [r4, #0]
 800ed64:	f043 0320 	orr.w	r3, r3, #32
 800ed68:	6023      	str	r3, [r4, #0]
 800ed6a:	2378      	movs	r3, #120	; 0x78
 800ed6c:	4828      	ldr	r0, [pc, #160]	; (800ee10 <_printf_i+0x248>)
 800ed6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ed72:	e7e3      	b.n	800ed3c <_printf_i+0x174>
 800ed74:	065e      	lsls	r6, r3, #25
 800ed76:	bf48      	it	mi
 800ed78:	b2ad      	uxthmi	r5, r5
 800ed7a:	e7e6      	b.n	800ed4a <_printf_i+0x182>
 800ed7c:	4616      	mov	r6, r2
 800ed7e:	e7bb      	b.n	800ecf8 <_printf_i+0x130>
 800ed80:	680b      	ldr	r3, [r1, #0]
 800ed82:	6826      	ldr	r6, [r4, #0]
 800ed84:	6960      	ldr	r0, [r4, #20]
 800ed86:	1d1d      	adds	r5, r3, #4
 800ed88:	600d      	str	r5, [r1, #0]
 800ed8a:	0635      	lsls	r5, r6, #24
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	d501      	bpl.n	800ed94 <_printf_i+0x1cc>
 800ed90:	6018      	str	r0, [r3, #0]
 800ed92:	e002      	b.n	800ed9a <_printf_i+0x1d2>
 800ed94:	0671      	lsls	r1, r6, #25
 800ed96:	d5fb      	bpl.n	800ed90 <_printf_i+0x1c8>
 800ed98:	8018      	strh	r0, [r3, #0]
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	6123      	str	r3, [r4, #16]
 800ed9e:	4616      	mov	r6, r2
 800eda0:	e7ba      	b.n	800ed18 <_printf_i+0x150>
 800eda2:	680b      	ldr	r3, [r1, #0]
 800eda4:	1d1a      	adds	r2, r3, #4
 800eda6:	600a      	str	r2, [r1, #0]
 800eda8:	681e      	ldr	r6, [r3, #0]
 800edaa:	6862      	ldr	r2, [r4, #4]
 800edac:	2100      	movs	r1, #0
 800edae:	4630      	mov	r0, r6
 800edb0:	f7f1 fa36 	bl	8000220 <memchr>
 800edb4:	b108      	cbz	r0, 800edba <_printf_i+0x1f2>
 800edb6:	1b80      	subs	r0, r0, r6
 800edb8:	6060      	str	r0, [r4, #4]
 800edba:	6863      	ldr	r3, [r4, #4]
 800edbc:	6123      	str	r3, [r4, #16]
 800edbe:	2300      	movs	r3, #0
 800edc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edc4:	e7a8      	b.n	800ed18 <_printf_i+0x150>
 800edc6:	6923      	ldr	r3, [r4, #16]
 800edc8:	4632      	mov	r2, r6
 800edca:	4649      	mov	r1, r9
 800edcc:	4640      	mov	r0, r8
 800edce:	47d0      	blx	sl
 800edd0:	3001      	adds	r0, #1
 800edd2:	d0ab      	beq.n	800ed2c <_printf_i+0x164>
 800edd4:	6823      	ldr	r3, [r4, #0]
 800edd6:	079b      	lsls	r3, r3, #30
 800edd8:	d413      	bmi.n	800ee02 <_printf_i+0x23a>
 800edda:	68e0      	ldr	r0, [r4, #12]
 800eddc:	9b03      	ldr	r3, [sp, #12]
 800edde:	4298      	cmp	r0, r3
 800ede0:	bfb8      	it	lt
 800ede2:	4618      	movlt	r0, r3
 800ede4:	e7a4      	b.n	800ed30 <_printf_i+0x168>
 800ede6:	2301      	movs	r3, #1
 800ede8:	4632      	mov	r2, r6
 800edea:	4649      	mov	r1, r9
 800edec:	4640      	mov	r0, r8
 800edee:	47d0      	blx	sl
 800edf0:	3001      	adds	r0, #1
 800edf2:	d09b      	beq.n	800ed2c <_printf_i+0x164>
 800edf4:	3501      	adds	r5, #1
 800edf6:	68e3      	ldr	r3, [r4, #12]
 800edf8:	9903      	ldr	r1, [sp, #12]
 800edfa:	1a5b      	subs	r3, r3, r1
 800edfc:	42ab      	cmp	r3, r5
 800edfe:	dcf2      	bgt.n	800ede6 <_printf_i+0x21e>
 800ee00:	e7eb      	b.n	800edda <_printf_i+0x212>
 800ee02:	2500      	movs	r5, #0
 800ee04:	f104 0619 	add.w	r6, r4, #25
 800ee08:	e7f5      	b.n	800edf6 <_printf_i+0x22e>
 800ee0a:	bf00      	nop
 800ee0c:	080149b0 	.word	0x080149b0
 800ee10:	080149c1 	.word	0x080149c1

0800ee14 <_scanf_float>:
 800ee14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee18:	b087      	sub	sp, #28
 800ee1a:	4617      	mov	r7, r2
 800ee1c:	9303      	str	r3, [sp, #12]
 800ee1e:	688b      	ldr	r3, [r1, #8]
 800ee20:	1e5a      	subs	r2, r3, #1
 800ee22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ee26:	bf83      	ittte	hi
 800ee28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ee2c:	195b      	addhi	r3, r3, r5
 800ee2e:	9302      	strhi	r3, [sp, #8]
 800ee30:	2300      	movls	r3, #0
 800ee32:	bf86      	itte	hi
 800ee34:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ee38:	608b      	strhi	r3, [r1, #8]
 800ee3a:	9302      	strls	r3, [sp, #8]
 800ee3c:	680b      	ldr	r3, [r1, #0]
 800ee3e:	468b      	mov	fp, r1
 800ee40:	2500      	movs	r5, #0
 800ee42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ee46:	f84b 3b1c 	str.w	r3, [fp], #28
 800ee4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ee4e:	4680      	mov	r8, r0
 800ee50:	460c      	mov	r4, r1
 800ee52:	465e      	mov	r6, fp
 800ee54:	46aa      	mov	sl, r5
 800ee56:	46a9      	mov	r9, r5
 800ee58:	9501      	str	r5, [sp, #4]
 800ee5a:	68a2      	ldr	r2, [r4, #8]
 800ee5c:	b152      	cbz	r2, 800ee74 <_scanf_float+0x60>
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	2b4e      	cmp	r3, #78	; 0x4e
 800ee64:	d864      	bhi.n	800ef30 <_scanf_float+0x11c>
 800ee66:	2b40      	cmp	r3, #64	; 0x40
 800ee68:	d83c      	bhi.n	800eee4 <_scanf_float+0xd0>
 800ee6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ee6e:	b2c8      	uxtb	r0, r1
 800ee70:	280e      	cmp	r0, #14
 800ee72:	d93a      	bls.n	800eeea <_scanf_float+0xd6>
 800ee74:	f1b9 0f00 	cmp.w	r9, #0
 800ee78:	d003      	beq.n	800ee82 <_scanf_float+0x6e>
 800ee7a:	6823      	ldr	r3, [r4, #0]
 800ee7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee80:	6023      	str	r3, [r4, #0]
 800ee82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee86:	f1ba 0f01 	cmp.w	sl, #1
 800ee8a:	f200 8113 	bhi.w	800f0b4 <_scanf_float+0x2a0>
 800ee8e:	455e      	cmp	r6, fp
 800ee90:	f200 8105 	bhi.w	800f09e <_scanf_float+0x28a>
 800ee94:	2501      	movs	r5, #1
 800ee96:	4628      	mov	r0, r5
 800ee98:	b007      	add	sp, #28
 800ee9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800eea2:	2a0d      	cmp	r2, #13
 800eea4:	d8e6      	bhi.n	800ee74 <_scanf_float+0x60>
 800eea6:	a101      	add	r1, pc, #4	; (adr r1, 800eeac <_scanf_float+0x98>)
 800eea8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eeac:	0800efeb 	.word	0x0800efeb
 800eeb0:	0800ee75 	.word	0x0800ee75
 800eeb4:	0800ee75 	.word	0x0800ee75
 800eeb8:	0800ee75 	.word	0x0800ee75
 800eebc:	0800f04b 	.word	0x0800f04b
 800eec0:	0800f023 	.word	0x0800f023
 800eec4:	0800ee75 	.word	0x0800ee75
 800eec8:	0800ee75 	.word	0x0800ee75
 800eecc:	0800eff9 	.word	0x0800eff9
 800eed0:	0800ee75 	.word	0x0800ee75
 800eed4:	0800ee75 	.word	0x0800ee75
 800eed8:	0800ee75 	.word	0x0800ee75
 800eedc:	0800ee75 	.word	0x0800ee75
 800eee0:	0800efb1 	.word	0x0800efb1
 800eee4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800eee8:	e7db      	b.n	800eea2 <_scanf_float+0x8e>
 800eeea:	290e      	cmp	r1, #14
 800eeec:	d8c2      	bhi.n	800ee74 <_scanf_float+0x60>
 800eeee:	a001      	add	r0, pc, #4	; (adr r0, 800eef4 <_scanf_float+0xe0>)
 800eef0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800eef4:	0800efa3 	.word	0x0800efa3
 800eef8:	0800ee75 	.word	0x0800ee75
 800eefc:	0800efa3 	.word	0x0800efa3
 800ef00:	0800f037 	.word	0x0800f037
 800ef04:	0800ee75 	.word	0x0800ee75
 800ef08:	0800ef51 	.word	0x0800ef51
 800ef0c:	0800ef8d 	.word	0x0800ef8d
 800ef10:	0800ef8d 	.word	0x0800ef8d
 800ef14:	0800ef8d 	.word	0x0800ef8d
 800ef18:	0800ef8d 	.word	0x0800ef8d
 800ef1c:	0800ef8d 	.word	0x0800ef8d
 800ef20:	0800ef8d 	.word	0x0800ef8d
 800ef24:	0800ef8d 	.word	0x0800ef8d
 800ef28:	0800ef8d 	.word	0x0800ef8d
 800ef2c:	0800ef8d 	.word	0x0800ef8d
 800ef30:	2b6e      	cmp	r3, #110	; 0x6e
 800ef32:	d809      	bhi.n	800ef48 <_scanf_float+0x134>
 800ef34:	2b60      	cmp	r3, #96	; 0x60
 800ef36:	d8b2      	bhi.n	800ee9e <_scanf_float+0x8a>
 800ef38:	2b54      	cmp	r3, #84	; 0x54
 800ef3a:	d077      	beq.n	800f02c <_scanf_float+0x218>
 800ef3c:	2b59      	cmp	r3, #89	; 0x59
 800ef3e:	d199      	bne.n	800ee74 <_scanf_float+0x60>
 800ef40:	2d07      	cmp	r5, #7
 800ef42:	d197      	bne.n	800ee74 <_scanf_float+0x60>
 800ef44:	2508      	movs	r5, #8
 800ef46:	e029      	b.n	800ef9c <_scanf_float+0x188>
 800ef48:	2b74      	cmp	r3, #116	; 0x74
 800ef4a:	d06f      	beq.n	800f02c <_scanf_float+0x218>
 800ef4c:	2b79      	cmp	r3, #121	; 0x79
 800ef4e:	e7f6      	b.n	800ef3e <_scanf_float+0x12a>
 800ef50:	6821      	ldr	r1, [r4, #0]
 800ef52:	05c8      	lsls	r0, r1, #23
 800ef54:	d51a      	bpl.n	800ef8c <_scanf_float+0x178>
 800ef56:	9b02      	ldr	r3, [sp, #8]
 800ef58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ef5c:	6021      	str	r1, [r4, #0]
 800ef5e:	f109 0901 	add.w	r9, r9, #1
 800ef62:	b11b      	cbz	r3, 800ef6c <_scanf_float+0x158>
 800ef64:	3b01      	subs	r3, #1
 800ef66:	3201      	adds	r2, #1
 800ef68:	9302      	str	r3, [sp, #8]
 800ef6a:	60a2      	str	r2, [r4, #8]
 800ef6c:	68a3      	ldr	r3, [r4, #8]
 800ef6e:	3b01      	subs	r3, #1
 800ef70:	60a3      	str	r3, [r4, #8]
 800ef72:	6923      	ldr	r3, [r4, #16]
 800ef74:	3301      	adds	r3, #1
 800ef76:	6123      	str	r3, [r4, #16]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	607b      	str	r3, [r7, #4]
 800ef80:	f340 8084 	ble.w	800f08c <_scanf_float+0x278>
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	3301      	adds	r3, #1
 800ef88:	603b      	str	r3, [r7, #0]
 800ef8a:	e766      	b.n	800ee5a <_scanf_float+0x46>
 800ef8c:	eb1a 0f05 	cmn.w	sl, r5
 800ef90:	f47f af70 	bne.w	800ee74 <_scanf_float+0x60>
 800ef94:	6822      	ldr	r2, [r4, #0]
 800ef96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ef9a:	6022      	str	r2, [r4, #0]
 800ef9c:	f806 3b01 	strb.w	r3, [r6], #1
 800efa0:	e7e4      	b.n	800ef6c <_scanf_float+0x158>
 800efa2:	6822      	ldr	r2, [r4, #0]
 800efa4:	0610      	lsls	r0, r2, #24
 800efa6:	f57f af65 	bpl.w	800ee74 <_scanf_float+0x60>
 800efaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800efae:	e7f4      	b.n	800ef9a <_scanf_float+0x186>
 800efb0:	f1ba 0f00 	cmp.w	sl, #0
 800efb4:	d10e      	bne.n	800efd4 <_scanf_float+0x1c0>
 800efb6:	f1b9 0f00 	cmp.w	r9, #0
 800efba:	d10e      	bne.n	800efda <_scanf_float+0x1c6>
 800efbc:	6822      	ldr	r2, [r4, #0]
 800efbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800efc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800efc6:	d108      	bne.n	800efda <_scanf_float+0x1c6>
 800efc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800efcc:	6022      	str	r2, [r4, #0]
 800efce:	f04f 0a01 	mov.w	sl, #1
 800efd2:	e7e3      	b.n	800ef9c <_scanf_float+0x188>
 800efd4:	f1ba 0f02 	cmp.w	sl, #2
 800efd8:	d055      	beq.n	800f086 <_scanf_float+0x272>
 800efda:	2d01      	cmp	r5, #1
 800efdc:	d002      	beq.n	800efe4 <_scanf_float+0x1d0>
 800efde:	2d04      	cmp	r5, #4
 800efe0:	f47f af48 	bne.w	800ee74 <_scanf_float+0x60>
 800efe4:	3501      	adds	r5, #1
 800efe6:	b2ed      	uxtb	r5, r5
 800efe8:	e7d8      	b.n	800ef9c <_scanf_float+0x188>
 800efea:	f1ba 0f01 	cmp.w	sl, #1
 800efee:	f47f af41 	bne.w	800ee74 <_scanf_float+0x60>
 800eff2:	f04f 0a02 	mov.w	sl, #2
 800eff6:	e7d1      	b.n	800ef9c <_scanf_float+0x188>
 800eff8:	b97d      	cbnz	r5, 800f01a <_scanf_float+0x206>
 800effa:	f1b9 0f00 	cmp.w	r9, #0
 800effe:	f47f af3c 	bne.w	800ee7a <_scanf_float+0x66>
 800f002:	6822      	ldr	r2, [r4, #0]
 800f004:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f008:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f00c:	f47f af39 	bne.w	800ee82 <_scanf_float+0x6e>
 800f010:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f014:	6022      	str	r2, [r4, #0]
 800f016:	2501      	movs	r5, #1
 800f018:	e7c0      	b.n	800ef9c <_scanf_float+0x188>
 800f01a:	2d03      	cmp	r5, #3
 800f01c:	d0e2      	beq.n	800efe4 <_scanf_float+0x1d0>
 800f01e:	2d05      	cmp	r5, #5
 800f020:	e7de      	b.n	800efe0 <_scanf_float+0x1cc>
 800f022:	2d02      	cmp	r5, #2
 800f024:	f47f af26 	bne.w	800ee74 <_scanf_float+0x60>
 800f028:	2503      	movs	r5, #3
 800f02a:	e7b7      	b.n	800ef9c <_scanf_float+0x188>
 800f02c:	2d06      	cmp	r5, #6
 800f02e:	f47f af21 	bne.w	800ee74 <_scanf_float+0x60>
 800f032:	2507      	movs	r5, #7
 800f034:	e7b2      	b.n	800ef9c <_scanf_float+0x188>
 800f036:	6822      	ldr	r2, [r4, #0]
 800f038:	0591      	lsls	r1, r2, #22
 800f03a:	f57f af1b 	bpl.w	800ee74 <_scanf_float+0x60>
 800f03e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f042:	6022      	str	r2, [r4, #0]
 800f044:	f8cd 9004 	str.w	r9, [sp, #4]
 800f048:	e7a8      	b.n	800ef9c <_scanf_float+0x188>
 800f04a:	6822      	ldr	r2, [r4, #0]
 800f04c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f050:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f054:	d006      	beq.n	800f064 <_scanf_float+0x250>
 800f056:	0550      	lsls	r0, r2, #21
 800f058:	f57f af0c 	bpl.w	800ee74 <_scanf_float+0x60>
 800f05c:	f1b9 0f00 	cmp.w	r9, #0
 800f060:	f43f af0f 	beq.w	800ee82 <_scanf_float+0x6e>
 800f064:	0591      	lsls	r1, r2, #22
 800f066:	bf58      	it	pl
 800f068:	9901      	ldrpl	r1, [sp, #4]
 800f06a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f06e:	bf58      	it	pl
 800f070:	eba9 0101 	subpl.w	r1, r9, r1
 800f074:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f078:	bf58      	it	pl
 800f07a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f07e:	6022      	str	r2, [r4, #0]
 800f080:	f04f 0900 	mov.w	r9, #0
 800f084:	e78a      	b.n	800ef9c <_scanf_float+0x188>
 800f086:	f04f 0a03 	mov.w	sl, #3
 800f08a:	e787      	b.n	800ef9c <_scanf_float+0x188>
 800f08c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f090:	4639      	mov	r1, r7
 800f092:	4640      	mov	r0, r8
 800f094:	4798      	blx	r3
 800f096:	2800      	cmp	r0, #0
 800f098:	f43f aedf 	beq.w	800ee5a <_scanf_float+0x46>
 800f09c:	e6ea      	b.n	800ee74 <_scanf_float+0x60>
 800f09e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f0a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0a6:	463a      	mov	r2, r7
 800f0a8:	4640      	mov	r0, r8
 800f0aa:	4798      	blx	r3
 800f0ac:	6923      	ldr	r3, [r4, #16]
 800f0ae:	3b01      	subs	r3, #1
 800f0b0:	6123      	str	r3, [r4, #16]
 800f0b2:	e6ec      	b.n	800ee8e <_scanf_float+0x7a>
 800f0b4:	1e6b      	subs	r3, r5, #1
 800f0b6:	2b06      	cmp	r3, #6
 800f0b8:	d825      	bhi.n	800f106 <_scanf_float+0x2f2>
 800f0ba:	2d02      	cmp	r5, #2
 800f0bc:	d836      	bhi.n	800f12c <_scanf_float+0x318>
 800f0be:	455e      	cmp	r6, fp
 800f0c0:	f67f aee8 	bls.w	800ee94 <_scanf_float+0x80>
 800f0c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f0c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0cc:	463a      	mov	r2, r7
 800f0ce:	4640      	mov	r0, r8
 800f0d0:	4798      	blx	r3
 800f0d2:	6923      	ldr	r3, [r4, #16]
 800f0d4:	3b01      	subs	r3, #1
 800f0d6:	6123      	str	r3, [r4, #16]
 800f0d8:	e7f1      	b.n	800f0be <_scanf_float+0x2aa>
 800f0da:	9802      	ldr	r0, [sp, #8]
 800f0dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f0e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f0e4:	9002      	str	r0, [sp, #8]
 800f0e6:	463a      	mov	r2, r7
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	4798      	blx	r3
 800f0ec:	6923      	ldr	r3, [r4, #16]
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	6123      	str	r3, [r4, #16]
 800f0f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f0f6:	fa5f fa8a 	uxtb.w	sl, sl
 800f0fa:	f1ba 0f02 	cmp.w	sl, #2
 800f0fe:	d1ec      	bne.n	800f0da <_scanf_float+0x2c6>
 800f100:	3d03      	subs	r5, #3
 800f102:	b2ed      	uxtb	r5, r5
 800f104:	1b76      	subs	r6, r6, r5
 800f106:	6823      	ldr	r3, [r4, #0]
 800f108:	05da      	lsls	r2, r3, #23
 800f10a:	d52f      	bpl.n	800f16c <_scanf_float+0x358>
 800f10c:	055b      	lsls	r3, r3, #21
 800f10e:	d510      	bpl.n	800f132 <_scanf_float+0x31e>
 800f110:	455e      	cmp	r6, fp
 800f112:	f67f aebf 	bls.w	800ee94 <_scanf_float+0x80>
 800f116:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f11a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f11e:	463a      	mov	r2, r7
 800f120:	4640      	mov	r0, r8
 800f122:	4798      	blx	r3
 800f124:	6923      	ldr	r3, [r4, #16]
 800f126:	3b01      	subs	r3, #1
 800f128:	6123      	str	r3, [r4, #16]
 800f12a:	e7f1      	b.n	800f110 <_scanf_float+0x2fc>
 800f12c:	46aa      	mov	sl, r5
 800f12e:	9602      	str	r6, [sp, #8]
 800f130:	e7df      	b.n	800f0f2 <_scanf_float+0x2de>
 800f132:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f136:	6923      	ldr	r3, [r4, #16]
 800f138:	2965      	cmp	r1, #101	; 0x65
 800f13a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f13e:	f106 35ff 	add.w	r5, r6, #4294967295
 800f142:	6123      	str	r3, [r4, #16]
 800f144:	d00c      	beq.n	800f160 <_scanf_float+0x34c>
 800f146:	2945      	cmp	r1, #69	; 0x45
 800f148:	d00a      	beq.n	800f160 <_scanf_float+0x34c>
 800f14a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f14e:	463a      	mov	r2, r7
 800f150:	4640      	mov	r0, r8
 800f152:	4798      	blx	r3
 800f154:	6923      	ldr	r3, [r4, #16]
 800f156:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f15a:	3b01      	subs	r3, #1
 800f15c:	1eb5      	subs	r5, r6, #2
 800f15e:	6123      	str	r3, [r4, #16]
 800f160:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f164:	463a      	mov	r2, r7
 800f166:	4640      	mov	r0, r8
 800f168:	4798      	blx	r3
 800f16a:	462e      	mov	r6, r5
 800f16c:	6825      	ldr	r5, [r4, #0]
 800f16e:	f015 0510 	ands.w	r5, r5, #16
 800f172:	d158      	bne.n	800f226 <_scanf_float+0x412>
 800f174:	7035      	strb	r5, [r6, #0]
 800f176:	6823      	ldr	r3, [r4, #0]
 800f178:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f17c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f180:	d11c      	bne.n	800f1bc <_scanf_float+0x3a8>
 800f182:	9b01      	ldr	r3, [sp, #4]
 800f184:	454b      	cmp	r3, r9
 800f186:	eba3 0209 	sub.w	r2, r3, r9
 800f18a:	d124      	bne.n	800f1d6 <_scanf_float+0x3c2>
 800f18c:	2200      	movs	r2, #0
 800f18e:	4659      	mov	r1, fp
 800f190:	4640      	mov	r0, r8
 800f192:	f000 ff43 	bl	801001c <_strtod_r>
 800f196:	9b03      	ldr	r3, [sp, #12]
 800f198:	6821      	ldr	r1, [r4, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f011 0f02 	tst.w	r1, #2
 800f1a0:	ec57 6b10 	vmov	r6, r7, d0
 800f1a4:	f103 0204 	add.w	r2, r3, #4
 800f1a8:	d020      	beq.n	800f1ec <_scanf_float+0x3d8>
 800f1aa:	9903      	ldr	r1, [sp, #12]
 800f1ac:	600a      	str	r2, [r1, #0]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	e9c3 6700 	strd	r6, r7, [r3]
 800f1b4:	68e3      	ldr	r3, [r4, #12]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	60e3      	str	r3, [r4, #12]
 800f1ba:	e66c      	b.n	800ee96 <_scanf_float+0x82>
 800f1bc:	9b04      	ldr	r3, [sp, #16]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d0e4      	beq.n	800f18c <_scanf_float+0x378>
 800f1c2:	9905      	ldr	r1, [sp, #20]
 800f1c4:	230a      	movs	r3, #10
 800f1c6:	462a      	mov	r2, r5
 800f1c8:	3101      	adds	r1, #1
 800f1ca:	4640      	mov	r0, r8
 800f1cc:	f000 ffb0 	bl	8010130 <_strtol_r>
 800f1d0:	9b04      	ldr	r3, [sp, #16]
 800f1d2:	9e05      	ldr	r6, [sp, #20]
 800f1d4:	1ac2      	subs	r2, r0, r3
 800f1d6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f1da:	429e      	cmp	r6, r3
 800f1dc:	bf28      	it	cs
 800f1de:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f1e2:	4912      	ldr	r1, [pc, #72]	; (800f22c <_scanf_float+0x418>)
 800f1e4:	4630      	mov	r0, r6
 800f1e6:	f000 f83b 	bl	800f260 <siprintf>
 800f1ea:	e7cf      	b.n	800f18c <_scanf_float+0x378>
 800f1ec:	f011 0f04 	tst.w	r1, #4
 800f1f0:	9903      	ldr	r1, [sp, #12]
 800f1f2:	600a      	str	r2, [r1, #0]
 800f1f4:	d1db      	bne.n	800f1ae <_scanf_float+0x39a>
 800f1f6:	f8d3 8000 	ldr.w	r8, [r3]
 800f1fa:	ee10 2a10 	vmov	r2, s0
 800f1fe:	ee10 0a10 	vmov	r0, s0
 800f202:	463b      	mov	r3, r7
 800f204:	4639      	mov	r1, r7
 800f206:	f7f1 fcb1 	bl	8000b6c <__aeabi_dcmpun>
 800f20a:	b128      	cbz	r0, 800f218 <_scanf_float+0x404>
 800f20c:	4808      	ldr	r0, [pc, #32]	; (800f230 <_scanf_float+0x41c>)
 800f20e:	f000 f821 	bl	800f254 <nanf>
 800f212:	ed88 0a00 	vstr	s0, [r8]
 800f216:	e7cd      	b.n	800f1b4 <_scanf_float+0x3a0>
 800f218:	4630      	mov	r0, r6
 800f21a:	4639      	mov	r1, r7
 800f21c:	f7f1 fd04 	bl	8000c28 <__aeabi_d2f>
 800f220:	f8c8 0000 	str.w	r0, [r8]
 800f224:	e7c6      	b.n	800f1b4 <_scanf_float+0x3a0>
 800f226:	2500      	movs	r5, #0
 800f228:	e635      	b.n	800ee96 <_scanf_float+0x82>
 800f22a:	bf00      	nop
 800f22c:	080149d2 	.word	0x080149d2
 800f230:	08014d63 	.word	0x08014d63

0800f234 <_sbrk_r>:
 800f234:	b538      	push	{r3, r4, r5, lr}
 800f236:	4d06      	ldr	r5, [pc, #24]	; (800f250 <_sbrk_r+0x1c>)
 800f238:	2300      	movs	r3, #0
 800f23a:	4604      	mov	r4, r0
 800f23c:	4608      	mov	r0, r1
 800f23e:	602b      	str	r3, [r5, #0]
 800f240:	f7f5 f950 	bl	80044e4 <_sbrk>
 800f244:	1c43      	adds	r3, r0, #1
 800f246:	d102      	bne.n	800f24e <_sbrk_r+0x1a>
 800f248:	682b      	ldr	r3, [r5, #0]
 800f24a:	b103      	cbz	r3, 800f24e <_sbrk_r+0x1a>
 800f24c:	6023      	str	r3, [r4, #0]
 800f24e:	bd38      	pop	{r3, r4, r5, pc}
 800f250:	20001898 	.word	0x20001898

0800f254 <nanf>:
 800f254:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f25c <nanf+0x8>
 800f258:	4770      	bx	lr
 800f25a:	bf00      	nop
 800f25c:	7fc00000 	.word	0x7fc00000

0800f260 <siprintf>:
 800f260:	b40e      	push	{r1, r2, r3}
 800f262:	b500      	push	{lr}
 800f264:	b09c      	sub	sp, #112	; 0x70
 800f266:	ab1d      	add	r3, sp, #116	; 0x74
 800f268:	9002      	str	r0, [sp, #8]
 800f26a:	9006      	str	r0, [sp, #24]
 800f26c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f270:	4809      	ldr	r0, [pc, #36]	; (800f298 <siprintf+0x38>)
 800f272:	9107      	str	r1, [sp, #28]
 800f274:	9104      	str	r1, [sp, #16]
 800f276:	4909      	ldr	r1, [pc, #36]	; (800f29c <siprintf+0x3c>)
 800f278:	f853 2b04 	ldr.w	r2, [r3], #4
 800f27c:	9105      	str	r1, [sp, #20]
 800f27e:	6800      	ldr	r0, [r0, #0]
 800f280:	9301      	str	r3, [sp, #4]
 800f282:	a902      	add	r1, sp, #8
 800f284:	f003 f9dc 	bl	8012640 <_svfiprintf_r>
 800f288:	9b02      	ldr	r3, [sp, #8]
 800f28a:	2200      	movs	r2, #0
 800f28c:	701a      	strb	r2, [r3, #0]
 800f28e:	b01c      	add	sp, #112	; 0x70
 800f290:	f85d eb04 	ldr.w	lr, [sp], #4
 800f294:	b003      	add	sp, #12
 800f296:	4770      	bx	lr
 800f298:	20000028 	.word	0x20000028
 800f29c:	ffff0208 	.word	0xffff0208

0800f2a0 <siscanf>:
 800f2a0:	b40e      	push	{r1, r2, r3}
 800f2a2:	b510      	push	{r4, lr}
 800f2a4:	b09f      	sub	sp, #124	; 0x7c
 800f2a6:	ac21      	add	r4, sp, #132	; 0x84
 800f2a8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f2ac:	f854 2b04 	ldr.w	r2, [r4], #4
 800f2b0:	9201      	str	r2, [sp, #4]
 800f2b2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f2b6:	9004      	str	r0, [sp, #16]
 800f2b8:	9008      	str	r0, [sp, #32]
 800f2ba:	f7f0 ffa3 	bl	8000204 <strlen>
 800f2be:	4b0c      	ldr	r3, [pc, #48]	; (800f2f0 <siscanf+0x50>)
 800f2c0:	9005      	str	r0, [sp, #20]
 800f2c2:	9009      	str	r0, [sp, #36]	; 0x24
 800f2c4:	930d      	str	r3, [sp, #52]	; 0x34
 800f2c6:	480b      	ldr	r0, [pc, #44]	; (800f2f4 <siscanf+0x54>)
 800f2c8:	9a01      	ldr	r2, [sp, #4]
 800f2ca:	6800      	ldr	r0, [r0, #0]
 800f2cc:	9403      	str	r4, [sp, #12]
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	9311      	str	r3, [sp, #68]	; 0x44
 800f2d2:	9316      	str	r3, [sp, #88]	; 0x58
 800f2d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f2d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f2dc:	a904      	add	r1, sp, #16
 800f2de:	4623      	mov	r3, r4
 800f2e0:	f003 fb08 	bl	80128f4 <__ssvfiscanf_r>
 800f2e4:	b01f      	add	sp, #124	; 0x7c
 800f2e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2ea:	b003      	add	sp, #12
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	0800f31b 	.word	0x0800f31b
 800f2f4:	20000028 	.word	0x20000028

0800f2f8 <__sread>:
 800f2f8:	b510      	push	{r4, lr}
 800f2fa:	460c      	mov	r4, r1
 800f2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f300:	f003 ff16 	bl	8013130 <_read_r>
 800f304:	2800      	cmp	r0, #0
 800f306:	bfab      	itete	ge
 800f308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f30a:	89a3      	ldrhlt	r3, [r4, #12]
 800f30c:	181b      	addge	r3, r3, r0
 800f30e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f312:	bfac      	ite	ge
 800f314:	6563      	strge	r3, [r4, #84]	; 0x54
 800f316:	81a3      	strhlt	r3, [r4, #12]
 800f318:	bd10      	pop	{r4, pc}

0800f31a <__seofread>:
 800f31a:	2000      	movs	r0, #0
 800f31c:	4770      	bx	lr

0800f31e <__swrite>:
 800f31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f322:	461f      	mov	r7, r3
 800f324:	898b      	ldrh	r3, [r1, #12]
 800f326:	05db      	lsls	r3, r3, #23
 800f328:	4605      	mov	r5, r0
 800f32a:	460c      	mov	r4, r1
 800f32c:	4616      	mov	r6, r2
 800f32e:	d505      	bpl.n	800f33c <__swrite+0x1e>
 800f330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f334:	2302      	movs	r3, #2
 800f336:	2200      	movs	r2, #0
 800f338:	f002 fbc8 	bl	8011acc <_lseek_r>
 800f33c:	89a3      	ldrh	r3, [r4, #12]
 800f33e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f346:	81a3      	strh	r3, [r4, #12]
 800f348:	4632      	mov	r2, r6
 800f34a:	463b      	mov	r3, r7
 800f34c:	4628      	mov	r0, r5
 800f34e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f352:	f000 bf85 	b.w	8010260 <_write_r>

0800f356 <__sseek>:
 800f356:	b510      	push	{r4, lr}
 800f358:	460c      	mov	r4, r1
 800f35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f35e:	f002 fbb5 	bl	8011acc <_lseek_r>
 800f362:	1c43      	adds	r3, r0, #1
 800f364:	89a3      	ldrh	r3, [r4, #12]
 800f366:	bf15      	itete	ne
 800f368:	6560      	strne	r0, [r4, #84]	; 0x54
 800f36a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f36e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f372:	81a3      	strheq	r3, [r4, #12]
 800f374:	bf18      	it	ne
 800f376:	81a3      	strhne	r3, [r4, #12]
 800f378:	bd10      	pop	{r4, pc}

0800f37a <__sclose>:
 800f37a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f37e:	f000 bfef 	b.w	8010360 <_close_r>

0800f382 <strchr>:
 800f382:	b2c9      	uxtb	r1, r1
 800f384:	4603      	mov	r3, r0
 800f386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f38a:	b11a      	cbz	r2, 800f394 <strchr+0x12>
 800f38c:	428a      	cmp	r2, r1
 800f38e:	d1f9      	bne.n	800f384 <strchr+0x2>
 800f390:	4618      	mov	r0, r3
 800f392:	4770      	bx	lr
 800f394:	2900      	cmp	r1, #0
 800f396:	bf18      	it	ne
 800f398:	2300      	movne	r3, #0
 800f39a:	e7f9      	b.n	800f390 <strchr+0xe>

0800f39c <strcpy>:
 800f39c:	4603      	mov	r3, r0
 800f39e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3a2:	f803 2b01 	strb.w	r2, [r3], #1
 800f3a6:	2a00      	cmp	r2, #0
 800f3a8:	d1f9      	bne.n	800f39e <strcpy+0x2>
 800f3aa:	4770      	bx	lr

0800f3ac <strncmp>:
 800f3ac:	b510      	push	{r4, lr}
 800f3ae:	b16a      	cbz	r2, 800f3cc <strncmp+0x20>
 800f3b0:	3901      	subs	r1, #1
 800f3b2:	1884      	adds	r4, r0, r2
 800f3b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f3b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d103      	bne.n	800f3c8 <strncmp+0x1c>
 800f3c0:	42a0      	cmp	r0, r4
 800f3c2:	d001      	beq.n	800f3c8 <strncmp+0x1c>
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d1f5      	bne.n	800f3b4 <strncmp+0x8>
 800f3c8:	1a98      	subs	r0, r3, r2
 800f3ca:	bd10      	pop	{r4, pc}
 800f3cc:	4610      	mov	r0, r2
 800f3ce:	e7fc      	b.n	800f3ca <strncmp+0x1e>

0800f3d0 <sulp>:
 800f3d0:	b570      	push	{r4, r5, r6, lr}
 800f3d2:	4604      	mov	r4, r0
 800f3d4:	460d      	mov	r5, r1
 800f3d6:	ec45 4b10 	vmov	d0, r4, r5
 800f3da:	4616      	mov	r6, r2
 800f3dc:	f002 ff76 	bl	80122cc <__ulp>
 800f3e0:	ec51 0b10 	vmov	r0, r1, d0
 800f3e4:	b17e      	cbz	r6, 800f406 <sulp+0x36>
 800f3e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f3ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	dd09      	ble.n	800f406 <sulp+0x36>
 800f3f2:	051b      	lsls	r3, r3, #20
 800f3f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f3f8:	2400      	movs	r4, #0
 800f3fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f3fe:	4622      	mov	r2, r4
 800f400:	462b      	mov	r3, r5
 800f402:	f7f1 f919 	bl	8000638 <__aeabi_dmul>
 800f406:	bd70      	pop	{r4, r5, r6, pc}

0800f408 <_strtod_l>:
 800f408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f40c:	b0a3      	sub	sp, #140	; 0x8c
 800f40e:	461f      	mov	r7, r3
 800f410:	2300      	movs	r3, #0
 800f412:	931e      	str	r3, [sp, #120]	; 0x78
 800f414:	4ba4      	ldr	r3, [pc, #656]	; (800f6a8 <_strtod_l+0x2a0>)
 800f416:	9219      	str	r2, [sp, #100]	; 0x64
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	9307      	str	r3, [sp, #28]
 800f41c:	4604      	mov	r4, r0
 800f41e:	4618      	mov	r0, r3
 800f420:	4688      	mov	r8, r1
 800f422:	f7f0 feef 	bl	8000204 <strlen>
 800f426:	f04f 0a00 	mov.w	sl, #0
 800f42a:	4605      	mov	r5, r0
 800f42c:	f04f 0b00 	mov.w	fp, #0
 800f430:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f434:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f436:	781a      	ldrb	r2, [r3, #0]
 800f438:	2a2b      	cmp	r2, #43	; 0x2b
 800f43a:	d04c      	beq.n	800f4d6 <_strtod_l+0xce>
 800f43c:	d839      	bhi.n	800f4b2 <_strtod_l+0xaa>
 800f43e:	2a0d      	cmp	r2, #13
 800f440:	d832      	bhi.n	800f4a8 <_strtod_l+0xa0>
 800f442:	2a08      	cmp	r2, #8
 800f444:	d832      	bhi.n	800f4ac <_strtod_l+0xa4>
 800f446:	2a00      	cmp	r2, #0
 800f448:	d03c      	beq.n	800f4c4 <_strtod_l+0xbc>
 800f44a:	2300      	movs	r3, #0
 800f44c:	930e      	str	r3, [sp, #56]	; 0x38
 800f44e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f450:	7833      	ldrb	r3, [r6, #0]
 800f452:	2b30      	cmp	r3, #48	; 0x30
 800f454:	f040 80b4 	bne.w	800f5c0 <_strtod_l+0x1b8>
 800f458:	7873      	ldrb	r3, [r6, #1]
 800f45a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f45e:	2b58      	cmp	r3, #88	; 0x58
 800f460:	d16c      	bne.n	800f53c <_strtod_l+0x134>
 800f462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f464:	9301      	str	r3, [sp, #4]
 800f466:	ab1e      	add	r3, sp, #120	; 0x78
 800f468:	9702      	str	r7, [sp, #8]
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	4a8f      	ldr	r2, [pc, #572]	; (800f6ac <_strtod_l+0x2a4>)
 800f46e:	ab1f      	add	r3, sp, #124	; 0x7c
 800f470:	a91d      	add	r1, sp, #116	; 0x74
 800f472:	4620      	mov	r0, r4
 800f474:	f002 f81a 	bl	80114ac <__gethex>
 800f478:	f010 0707 	ands.w	r7, r0, #7
 800f47c:	4605      	mov	r5, r0
 800f47e:	d005      	beq.n	800f48c <_strtod_l+0x84>
 800f480:	2f06      	cmp	r7, #6
 800f482:	d12a      	bne.n	800f4da <_strtod_l+0xd2>
 800f484:	3601      	adds	r6, #1
 800f486:	2300      	movs	r3, #0
 800f488:	961d      	str	r6, [sp, #116]	; 0x74
 800f48a:	930e      	str	r3, [sp, #56]	; 0x38
 800f48c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f48e:	2b00      	cmp	r3, #0
 800f490:	f040 8596 	bne.w	800ffc0 <_strtod_l+0xbb8>
 800f494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f496:	b1db      	cbz	r3, 800f4d0 <_strtod_l+0xc8>
 800f498:	4652      	mov	r2, sl
 800f49a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f49e:	ec43 2b10 	vmov	d0, r2, r3
 800f4a2:	b023      	add	sp, #140	; 0x8c
 800f4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4a8:	2a20      	cmp	r2, #32
 800f4aa:	d1ce      	bne.n	800f44a <_strtod_l+0x42>
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	931d      	str	r3, [sp, #116]	; 0x74
 800f4b0:	e7c0      	b.n	800f434 <_strtod_l+0x2c>
 800f4b2:	2a2d      	cmp	r2, #45	; 0x2d
 800f4b4:	d1c9      	bne.n	800f44a <_strtod_l+0x42>
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	920e      	str	r2, [sp, #56]	; 0x38
 800f4ba:	1c5a      	adds	r2, r3, #1
 800f4bc:	921d      	str	r2, [sp, #116]	; 0x74
 800f4be:	785b      	ldrb	r3, [r3, #1]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d1c4      	bne.n	800f44e <_strtod_l+0x46>
 800f4c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f4c6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	f040 8576 	bne.w	800ffbc <_strtod_l+0xbb4>
 800f4d0:	4652      	mov	r2, sl
 800f4d2:	465b      	mov	r3, fp
 800f4d4:	e7e3      	b.n	800f49e <_strtod_l+0x96>
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	e7ee      	b.n	800f4b8 <_strtod_l+0xb0>
 800f4da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f4dc:	b13a      	cbz	r2, 800f4ee <_strtod_l+0xe6>
 800f4de:	2135      	movs	r1, #53	; 0x35
 800f4e0:	a820      	add	r0, sp, #128	; 0x80
 800f4e2:	f002 fffe 	bl	80124e2 <__copybits>
 800f4e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	f002 fbc3 	bl	8011c74 <_Bfree>
 800f4ee:	3f01      	subs	r7, #1
 800f4f0:	2f05      	cmp	r7, #5
 800f4f2:	d807      	bhi.n	800f504 <_strtod_l+0xfc>
 800f4f4:	e8df f007 	tbb	[pc, r7]
 800f4f8:	1d180b0e 	.word	0x1d180b0e
 800f4fc:	030e      	.short	0x030e
 800f4fe:	f04f 0b00 	mov.w	fp, #0
 800f502:	46da      	mov	sl, fp
 800f504:	0728      	lsls	r0, r5, #28
 800f506:	d5c1      	bpl.n	800f48c <_strtod_l+0x84>
 800f508:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f50c:	e7be      	b.n	800f48c <_strtod_l+0x84>
 800f50e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800f512:	e7f7      	b.n	800f504 <_strtod_l+0xfc>
 800f514:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800f518:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f51a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f51e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f522:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f526:	e7ed      	b.n	800f504 <_strtod_l+0xfc>
 800f528:	f8df b184 	ldr.w	fp, [pc, #388]	; 800f6b0 <_strtod_l+0x2a8>
 800f52c:	f04f 0a00 	mov.w	sl, #0
 800f530:	e7e8      	b.n	800f504 <_strtod_l+0xfc>
 800f532:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f536:	f04f 3aff 	mov.w	sl, #4294967295
 800f53a:	e7e3      	b.n	800f504 <_strtod_l+0xfc>
 800f53c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f53e:	1c5a      	adds	r2, r3, #1
 800f540:	921d      	str	r2, [sp, #116]	; 0x74
 800f542:	785b      	ldrb	r3, [r3, #1]
 800f544:	2b30      	cmp	r3, #48	; 0x30
 800f546:	d0f9      	beq.n	800f53c <_strtod_l+0x134>
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d09f      	beq.n	800f48c <_strtod_l+0x84>
 800f54c:	2301      	movs	r3, #1
 800f54e:	f04f 0900 	mov.w	r9, #0
 800f552:	9304      	str	r3, [sp, #16]
 800f554:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f556:	930a      	str	r3, [sp, #40]	; 0x28
 800f558:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f55c:	464f      	mov	r7, r9
 800f55e:	220a      	movs	r2, #10
 800f560:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f562:	7806      	ldrb	r6, [r0, #0]
 800f564:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f568:	b2d9      	uxtb	r1, r3
 800f56a:	2909      	cmp	r1, #9
 800f56c:	d92a      	bls.n	800f5c4 <_strtod_l+0x1bc>
 800f56e:	9907      	ldr	r1, [sp, #28]
 800f570:	462a      	mov	r2, r5
 800f572:	f7ff ff1b 	bl	800f3ac <strncmp>
 800f576:	b398      	cbz	r0, 800f5e0 <_strtod_l+0x1d8>
 800f578:	2000      	movs	r0, #0
 800f57a:	4633      	mov	r3, r6
 800f57c:	463d      	mov	r5, r7
 800f57e:	9007      	str	r0, [sp, #28]
 800f580:	4602      	mov	r2, r0
 800f582:	2b65      	cmp	r3, #101	; 0x65
 800f584:	d001      	beq.n	800f58a <_strtod_l+0x182>
 800f586:	2b45      	cmp	r3, #69	; 0x45
 800f588:	d118      	bne.n	800f5bc <_strtod_l+0x1b4>
 800f58a:	b91d      	cbnz	r5, 800f594 <_strtod_l+0x18c>
 800f58c:	9b04      	ldr	r3, [sp, #16]
 800f58e:	4303      	orrs	r3, r0
 800f590:	d098      	beq.n	800f4c4 <_strtod_l+0xbc>
 800f592:	2500      	movs	r5, #0
 800f594:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800f598:	f108 0301 	add.w	r3, r8, #1
 800f59c:	931d      	str	r3, [sp, #116]	; 0x74
 800f59e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f5a2:	2b2b      	cmp	r3, #43	; 0x2b
 800f5a4:	d075      	beq.n	800f692 <_strtod_l+0x28a>
 800f5a6:	2b2d      	cmp	r3, #45	; 0x2d
 800f5a8:	d07b      	beq.n	800f6a2 <_strtod_l+0x29a>
 800f5aa:	f04f 0c00 	mov.w	ip, #0
 800f5ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f5b2:	2909      	cmp	r1, #9
 800f5b4:	f240 8082 	bls.w	800f6bc <_strtod_l+0x2b4>
 800f5b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f5bc:	2600      	movs	r6, #0
 800f5be:	e09d      	b.n	800f6fc <_strtod_l+0x2f4>
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	e7c4      	b.n	800f54e <_strtod_l+0x146>
 800f5c4:	2f08      	cmp	r7, #8
 800f5c6:	bfd8      	it	le
 800f5c8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f5ca:	f100 0001 	add.w	r0, r0, #1
 800f5ce:	bfda      	itte	le
 800f5d0:	fb02 3301 	mlale	r3, r2, r1, r3
 800f5d4:	9309      	strle	r3, [sp, #36]	; 0x24
 800f5d6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f5da:	3701      	adds	r7, #1
 800f5dc:	901d      	str	r0, [sp, #116]	; 0x74
 800f5de:	e7bf      	b.n	800f560 <_strtod_l+0x158>
 800f5e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f5e2:	195a      	adds	r2, r3, r5
 800f5e4:	921d      	str	r2, [sp, #116]	; 0x74
 800f5e6:	5d5b      	ldrb	r3, [r3, r5]
 800f5e8:	2f00      	cmp	r7, #0
 800f5ea:	d037      	beq.n	800f65c <_strtod_l+0x254>
 800f5ec:	9007      	str	r0, [sp, #28]
 800f5ee:	463d      	mov	r5, r7
 800f5f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f5f4:	2a09      	cmp	r2, #9
 800f5f6:	d912      	bls.n	800f61e <_strtod_l+0x216>
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	e7c2      	b.n	800f582 <_strtod_l+0x17a>
 800f5fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f5fe:	1c5a      	adds	r2, r3, #1
 800f600:	921d      	str	r2, [sp, #116]	; 0x74
 800f602:	785b      	ldrb	r3, [r3, #1]
 800f604:	3001      	adds	r0, #1
 800f606:	2b30      	cmp	r3, #48	; 0x30
 800f608:	d0f8      	beq.n	800f5fc <_strtod_l+0x1f4>
 800f60a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f60e:	2a08      	cmp	r2, #8
 800f610:	f200 84db 	bhi.w	800ffca <_strtod_l+0xbc2>
 800f614:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f616:	9007      	str	r0, [sp, #28]
 800f618:	2000      	movs	r0, #0
 800f61a:	920a      	str	r2, [sp, #40]	; 0x28
 800f61c:	4605      	mov	r5, r0
 800f61e:	3b30      	subs	r3, #48	; 0x30
 800f620:	f100 0201 	add.w	r2, r0, #1
 800f624:	d014      	beq.n	800f650 <_strtod_l+0x248>
 800f626:	9907      	ldr	r1, [sp, #28]
 800f628:	4411      	add	r1, r2
 800f62a:	9107      	str	r1, [sp, #28]
 800f62c:	462a      	mov	r2, r5
 800f62e:	eb00 0e05 	add.w	lr, r0, r5
 800f632:	210a      	movs	r1, #10
 800f634:	4572      	cmp	r2, lr
 800f636:	d113      	bne.n	800f660 <_strtod_l+0x258>
 800f638:	182a      	adds	r2, r5, r0
 800f63a:	2a08      	cmp	r2, #8
 800f63c:	f105 0501 	add.w	r5, r5, #1
 800f640:	4405      	add	r5, r0
 800f642:	dc1c      	bgt.n	800f67e <_strtod_l+0x276>
 800f644:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f646:	220a      	movs	r2, #10
 800f648:	fb02 3301 	mla	r3, r2, r1, r3
 800f64c:	9309      	str	r3, [sp, #36]	; 0x24
 800f64e:	2200      	movs	r2, #0
 800f650:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f652:	1c59      	adds	r1, r3, #1
 800f654:	911d      	str	r1, [sp, #116]	; 0x74
 800f656:	785b      	ldrb	r3, [r3, #1]
 800f658:	4610      	mov	r0, r2
 800f65a:	e7c9      	b.n	800f5f0 <_strtod_l+0x1e8>
 800f65c:	4638      	mov	r0, r7
 800f65e:	e7d2      	b.n	800f606 <_strtod_l+0x1fe>
 800f660:	2a08      	cmp	r2, #8
 800f662:	dc04      	bgt.n	800f66e <_strtod_l+0x266>
 800f664:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f666:	434e      	muls	r6, r1
 800f668:	9609      	str	r6, [sp, #36]	; 0x24
 800f66a:	3201      	adds	r2, #1
 800f66c:	e7e2      	b.n	800f634 <_strtod_l+0x22c>
 800f66e:	f102 0c01 	add.w	ip, r2, #1
 800f672:	f1bc 0f10 	cmp.w	ip, #16
 800f676:	bfd8      	it	le
 800f678:	fb01 f909 	mulle.w	r9, r1, r9
 800f67c:	e7f5      	b.n	800f66a <_strtod_l+0x262>
 800f67e:	2d10      	cmp	r5, #16
 800f680:	bfdc      	itt	le
 800f682:	220a      	movle	r2, #10
 800f684:	fb02 3909 	mlale	r9, r2, r9, r3
 800f688:	e7e1      	b.n	800f64e <_strtod_l+0x246>
 800f68a:	2300      	movs	r3, #0
 800f68c:	9307      	str	r3, [sp, #28]
 800f68e:	2201      	movs	r2, #1
 800f690:	e77c      	b.n	800f58c <_strtod_l+0x184>
 800f692:	f04f 0c00 	mov.w	ip, #0
 800f696:	f108 0302 	add.w	r3, r8, #2
 800f69a:	931d      	str	r3, [sp, #116]	; 0x74
 800f69c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f6a0:	e785      	b.n	800f5ae <_strtod_l+0x1a6>
 800f6a2:	f04f 0c01 	mov.w	ip, #1
 800f6a6:	e7f6      	b.n	800f696 <_strtod_l+0x28e>
 800f6a8:	08014b88 	.word	0x08014b88
 800f6ac:	080149d8 	.word	0x080149d8
 800f6b0:	7ff00000 	.word	0x7ff00000
 800f6b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f6b6:	1c59      	adds	r1, r3, #1
 800f6b8:	911d      	str	r1, [sp, #116]	; 0x74
 800f6ba:	785b      	ldrb	r3, [r3, #1]
 800f6bc:	2b30      	cmp	r3, #48	; 0x30
 800f6be:	d0f9      	beq.n	800f6b4 <_strtod_l+0x2ac>
 800f6c0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800f6c4:	2908      	cmp	r1, #8
 800f6c6:	f63f af79 	bhi.w	800f5bc <_strtod_l+0x1b4>
 800f6ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f6ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f6d0:	9308      	str	r3, [sp, #32]
 800f6d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f6d4:	1c59      	adds	r1, r3, #1
 800f6d6:	911d      	str	r1, [sp, #116]	; 0x74
 800f6d8:	785b      	ldrb	r3, [r3, #1]
 800f6da:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800f6de:	2e09      	cmp	r6, #9
 800f6e0:	d937      	bls.n	800f752 <_strtod_l+0x34a>
 800f6e2:	9e08      	ldr	r6, [sp, #32]
 800f6e4:	1b89      	subs	r1, r1, r6
 800f6e6:	2908      	cmp	r1, #8
 800f6e8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f6ec:	dc02      	bgt.n	800f6f4 <_strtod_l+0x2ec>
 800f6ee:	4576      	cmp	r6, lr
 800f6f0:	bfa8      	it	ge
 800f6f2:	4676      	movge	r6, lr
 800f6f4:	f1bc 0f00 	cmp.w	ip, #0
 800f6f8:	d000      	beq.n	800f6fc <_strtod_l+0x2f4>
 800f6fa:	4276      	negs	r6, r6
 800f6fc:	2d00      	cmp	r5, #0
 800f6fe:	d14f      	bne.n	800f7a0 <_strtod_l+0x398>
 800f700:	9904      	ldr	r1, [sp, #16]
 800f702:	4301      	orrs	r1, r0
 800f704:	f47f aec2 	bne.w	800f48c <_strtod_l+0x84>
 800f708:	2a00      	cmp	r2, #0
 800f70a:	f47f aedb 	bne.w	800f4c4 <_strtod_l+0xbc>
 800f70e:	2b69      	cmp	r3, #105	; 0x69
 800f710:	d027      	beq.n	800f762 <_strtod_l+0x35a>
 800f712:	dc24      	bgt.n	800f75e <_strtod_l+0x356>
 800f714:	2b49      	cmp	r3, #73	; 0x49
 800f716:	d024      	beq.n	800f762 <_strtod_l+0x35a>
 800f718:	2b4e      	cmp	r3, #78	; 0x4e
 800f71a:	f47f aed3 	bne.w	800f4c4 <_strtod_l+0xbc>
 800f71e:	499e      	ldr	r1, [pc, #632]	; (800f998 <_strtod_l+0x590>)
 800f720:	a81d      	add	r0, sp, #116	; 0x74
 800f722:	f002 f91b 	bl	801195c <__match>
 800f726:	2800      	cmp	r0, #0
 800f728:	f43f aecc 	beq.w	800f4c4 <_strtod_l+0xbc>
 800f72c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	2b28      	cmp	r3, #40	; 0x28
 800f732:	d12d      	bne.n	800f790 <_strtod_l+0x388>
 800f734:	4999      	ldr	r1, [pc, #612]	; (800f99c <_strtod_l+0x594>)
 800f736:	aa20      	add	r2, sp, #128	; 0x80
 800f738:	a81d      	add	r0, sp, #116	; 0x74
 800f73a:	f002 f923 	bl	8011984 <__hexnan>
 800f73e:	2805      	cmp	r0, #5
 800f740:	d126      	bne.n	800f790 <_strtod_l+0x388>
 800f742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f744:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800f748:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f74c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f750:	e69c      	b.n	800f48c <_strtod_l+0x84>
 800f752:	210a      	movs	r1, #10
 800f754:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f758:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f75c:	e7b9      	b.n	800f6d2 <_strtod_l+0x2ca>
 800f75e:	2b6e      	cmp	r3, #110	; 0x6e
 800f760:	e7db      	b.n	800f71a <_strtod_l+0x312>
 800f762:	498f      	ldr	r1, [pc, #572]	; (800f9a0 <_strtod_l+0x598>)
 800f764:	a81d      	add	r0, sp, #116	; 0x74
 800f766:	f002 f8f9 	bl	801195c <__match>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	f43f aeaa 	beq.w	800f4c4 <_strtod_l+0xbc>
 800f770:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f772:	498c      	ldr	r1, [pc, #560]	; (800f9a4 <_strtod_l+0x59c>)
 800f774:	3b01      	subs	r3, #1
 800f776:	a81d      	add	r0, sp, #116	; 0x74
 800f778:	931d      	str	r3, [sp, #116]	; 0x74
 800f77a:	f002 f8ef 	bl	801195c <__match>
 800f77e:	b910      	cbnz	r0, 800f786 <_strtod_l+0x37e>
 800f780:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f782:	3301      	adds	r3, #1
 800f784:	931d      	str	r3, [sp, #116]	; 0x74
 800f786:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800f9b4 <_strtod_l+0x5ac>
 800f78a:	f04f 0a00 	mov.w	sl, #0
 800f78e:	e67d      	b.n	800f48c <_strtod_l+0x84>
 800f790:	4885      	ldr	r0, [pc, #532]	; (800f9a8 <_strtod_l+0x5a0>)
 800f792:	f003 fce1 	bl	8013158 <nan>
 800f796:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f79a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f79e:	e675      	b.n	800f48c <_strtod_l+0x84>
 800f7a0:	9b07      	ldr	r3, [sp, #28]
 800f7a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7a4:	1af3      	subs	r3, r6, r3
 800f7a6:	2f00      	cmp	r7, #0
 800f7a8:	bf08      	it	eq
 800f7aa:	462f      	moveq	r7, r5
 800f7ac:	2d10      	cmp	r5, #16
 800f7ae:	9308      	str	r3, [sp, #32]
 800f7b0:	46a8      	mov	r8, r5
 800f7b2:	bfa8      	it	ge
 800f7b4:	f04f 0810 	movge.w	r8, #16
 800f7b8:	f7f0 fec4 	bl	8000544 <__aeabi_ui2d>
 800f7bc:	2d09      	cmp	r5, #9
 800f7be:	4682      	mov	sl, r0
 800f7c0:	468b      	mov	fp, r1
 800f7c2:	dd13      	ble.n	800f7ec <_strtod_l+0x3e4>
 800f7c4:	4b79      	ldr	r3, [pc, #484]	; (800f9ac <_strtod_l+0x5a4>)
 800f7c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f7ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f7ce:	f7f0 ff33 	bl	8000638 <__aeabi_dmul>
 800f7d2:	4682      	mov	sl, r0
 800f7d4:	4648      	mov	r0, r9
 800f7d6:	468b      	mov	fp, r1
 800f7d8:	f7f0 feb4 	bl	8000544 <__aeabi_ui2d>
 800f7dc:	4602      	mov	r2, r0
 800f7de:	460b      	mov	r3, r1
 800f7e0:	4650      	mov	r0, sl
 800f7e2:	4659      	mov	r1, fp
 800f7e4:	f7f0 fd72 	bl	80002cc <__adddf3>
 800f7e8:	4682      	mov	sl, r0
 800f7ea:	468b      	mov	fp, r1
 800f7ec:	2d0f      	cmp	r5, #15
 800f7ee:	dc38      	bgt.n	800f862 <_strtod_l+0x45a>
 800f7f0:	9b08      	ldr	r3, [sp, #32]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	f43f ae4a 	beq.w	800f48c <_strtod_l+0x84>
 800f7f8:	dd24      	ble.n	800f844 <_strtod_l+0x43c>
 800f7fa:	2b16      	cmp	r3, #22
 800f7fc:	dc0b      	bgt.n	800f816 <_strtod_l+0x40e>
 800f7fe:	4d6b      	ldr	r5, [pc, #428]	; (800f9ac <_strtod_l+0x5a4>)
 800f800:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800f804:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f808:	4652      	mov	r2, sl
 800f80a:	465b      	mov	r3, fp
 800f80c:	f7f0 ff14 	bl	8000638 <__aeabi_dmul>
 800f810:	4682      	mov	sl, r0
 800f812:	468b      	mov	fp, r1
 800f814:	e63a      	b.n	800f48c <_strtod_l+0x84>
 800f816:	9a08      	ldr	r2, [sp, #32]
 800f818:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f81c:	4293      	cmp	r3, r2
 800f81e:	db20      	blt.n	800f862 <_strtod_l+0x45a>
 800f820:	4c62      	ldr	r4, [pc, #392]	; (800f9ac <_strtod_l+0x5a4>)
 800f822:	f1c5 050f 	rsb	r5, r5, #15
 800f826:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f82a:	4652      	mov	r2, sl
 800f82c:	465b      	mov	r3, fp
 800f82e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f832:	f7f0 ff01 	bl	8000638 <__aeabi_dmul>
 800f836:	9b08      	ldr	r3, [sp, #32]
 800f838:	1b5d      	subs	r5, r3, r5
 800f83a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f83e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f842:	e7e3      	b.n	800f80c <_strtod_l+0x404>
 800f844:	9b08      	ldr	r3, [sp, #32]
 800f846:	3316      	adds	r3, #22
 800f848:	db0b      	blt.n	800f862 <_strtod_l+0x45a>
 800f84a:	9b07      	ldr	r3, [sp, #28]
 800f84c:	4a57      	ldr	r2, [pc, #348]	; (800f9ac <_strtod_l+0x5a4>)
 800f84e:	1b9e      	subs	r6, r3, r6
 800f850:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f854:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f858:	4650      	mov	r0, sl
 800f85a:	4659      	mov	r1, fp
 800f85c:	f7f1 f816 	bl	800088c <__aeabi_ddiv>
 800f860:	e7d6      	b.n	800f810 <_strtod_l+0x408>
 800f862:	9b08      	ldr	r3, [sp, #32]
 800f864:	eba5 0808 	sub.w	r8, r5, r8
 800f868:	4498      	add	r8, r3
 800f86a:	f1b8 0f00 	cmp.w	r8, #0
 800f86e:	dd71      	ble.n	800f954 <_strtod_l+0x54c>
 800f870:	f018 030f 	ands.w	r3, r8, #15
 800f874:	d00a      	beq.n	800f88c <_strtod_l+0x484>
 800f876:	494d      	ldr	r1, [pc, #308]	; (800f9ac <_strtod_l+0x5a4>)
 800f878:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f87c:	4652      	mov	r2, sl
 800f87e:	465b      	mov	r3, fp
 800f880:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f884:	f7f0 fed8 	bl	8000638 <__aeabi_dmul>
 800f888:	4682      	mov	sl, r0
 800f88a:	468b      	mov	fp, r1
 800f88c:	f038 080f 	bics.w	r8, r8, #15
 800f890:	d04d      	beq.n	800f92e <_strtod_l+0x526>
 800f892:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f896:	dd22      	ble.n	800f8de <_strtod_l+0x4d6>
 800f898:	2500      	movs	r5, #0
 800f89a:	462e      	mov	r6, r5
 800f89c:	9509      	str	r5, [sp, #36]	; 0x24
 800f89e:	9507      	str	r5, [sp, #28]
 800f8a0:	2322      	movs	r3, #34	; 0x22
 800f8a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800f9b4 <_strtod_l+0x5ac>
 800f8a6:	6023      	str	r3, [r4, #0]
 800f8a8:	f04f 0a00 	mov.w	sl, #0
 800f8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	f43f adec 	beq.w	800f48c <_strtod_l+0x84>
 800f8b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	f002 f9dc 	bl	8011c74 <_Bfree>
 800f8bc:	9907      	ldr	r1, [sp, #28]
 800f8be:	4620      	mov	r0, r4
 800f8c0:	f002 f9d8 	bl	8011c74 <_Bfree>
 800f8c4:	4631      	mov	r1, r6
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f002 f9d4 	bl	8011c74 <_Bfree>
 800f8cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f002 f9d0 	bl	8011c74 <_Bfree>
 800f8d4:	4629      	mov	r1, r5
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	f002 f9cc 	bl	8011c74 <_Bfree>
 800f8dc:	e5d6      	b.n	800f48c <_strtod_l+0x84>
 800f8de:	2300      	movs	r3, #0
 800f8e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f8e4:	4650      	mov	r0, sl
 800f8e6:	4659      	mov	r1, fp
 800f8e8:	4699      	mov	r9, r3
 800f8ea:	f1b8 0f01 	cmp.w	r8, #1
 800f8ee:	dc21      	bgt.n	800f934 <_strtod_l+0x52c>
 800f8f0:	b10b      	cbz	r3, 800f8f6 <_strtod_l+0x4ee>
 800f8f2:	4682      	mov	sl, r0
 800f8f4:	468b      	mov	fp, r1
 800f8f6:	4b2e      	ldr	r3, [pc, #184]	; (800f9b0 <_strtod_l+0x5a8>)
 800f8f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f8fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f900:	4652      	mov	r2, sl
 800f902:	465b      	mov	r3, fp
 800f904:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f908:	f7f0 fe96 	bl	8000638 <__aeabi_dmul>
 800f90c:	4b29      	ldr	r3, [pc, #164]	; (800f9b4 <_strtod_l+0x5ac>)
 800f90e:	460a      	mov	r2, r1
 800f910:	400b      	ands	r3, r1
 800f912:	4929      	ldr	r1, [pc, #164]	; (800f9b8 <_strtod_l+0x5b0>)
 800f914:	428b      	cmp	r3, r1
 800f916:	4682      	mov	sl, r0
 800f918:	d8be      	bhi.n	800f898 <_strtod_l+0x490>
 800f91a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f91e:	428b      	cmp	r3, r1
 800f920:	bf86      	itte	hi
 800f922:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f9bc <_strtod_l+0x5b4>
 800f926:	f04f 3aff 	movhi.w	sl, #4294967295
 800f92a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f92e:	2300      	movs	r3, #0
 800f930:	9304      	str	r3, [sp, #16]
 800f932:	e081      	b.n	800fa38 <_strtod_l+0x630>
 800f934:	f018 0f01 	tst.w	r8, #1
 800f938:	d007      	beq.n	800f94a <_strtod_l+0x542>
 800f93a:	4b1d      	ldr	r3, [pc, #116]	; (800f9b0 <_strtod_l+0x5a8>)
 800f93c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f944:	f7f0 fe78 	bl	8000638 <__aeabi_dmul>
 800f948:	2301      	movs	r3, #1
 800f94a:	f109 0901 	add.w	r9, r9, #1
 800f94e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f952:	e7ca      	b.n	800f8ea <_strtod_l+0x4e2>
 800f954:	d0eb      	beq.n	800f92e <_strtod_l+0x526>
 800f956:	f1c8 0800 	rsb	r8, r8, #0
 800f95a:	f018 020f 	ands.w	r2, r8, #15
 800f95e:	d00a      	beq.n	800f976 <_strtod_l+0x56e>
 800f960:	4b12      	ldr	r3, [pc, #72]	; (800f9ac <_strtod_l+0x5a4>)
 800f962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f966:	4650      	mov	r0, sl
 800f968:	4659      	mov	r1, fp
 800f96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96e:	f7f0 ff8d 	bl	800088c <__aeabi_ddiv>
 800f972:	4682      	mov	sl, r0
 800f974:	468b      	mov	fp, r1
 800f976:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f97a:	d0d8      	beq.n	800f92e <_strtod_l+0x526>
 800f97c:	f1b8 0f1f 	cmp.w	r8, #31
 800f980:	dd1e      	ble.n	800f9c0 <_strtod_l+0x5b8>
 800f982:	2500      	movs	r5, #0
 800f984:	462e      	mov	r6, r5
 800f986:	9509      	str	r5, [sp, #36]	; 0x24
 800f988:	9507      	str	r5, [sp, #28]
 800f98a:	2322      	movs	r3, #34	; 0x22
 800f98c:	f04f 0a00 	mov.w	sl, #0
 800f990:	f04f 0b00 	mov.w	fp, #0
 800f994:	6023      	str	r3, [r4, #0]
 800f996:	e789      	b.n	800f8ac <_strtod_l+0x4a4>
 800f998:	080149ad 	.word	0x080149ad
 800f99c:	080149ec 	.word	0x080149ec
 800f9a0:	080149a5 	.word	0x080149a5
 800f9a4:	08014a2b 	.word	0x08014a2b
 800f9a8:	08014d63 	.word	0x08014d63
 800f9ac:	08014c28 	.word	0x08014c28
 800f9b0:	08014c00 	.word	0x08014c00
 800f9b4:	7ff00000 	.word	0x7ff00000
 800f9b8:	7ca00000 	.word	0x7ca00000
 800f9bc:	7fefffff 	.word	0x7fefffff
 800f9c0:	f018 0310 	ands.w	r3, r8, #16
 800f9c4:	bf18      	it	ne
 800f9c6:	236a      	movne	r3, #106	; 0x6a
 800f9c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800fd80 <_strtod_l+0x978>
 800f9cc:	9304      	str	r3, [sp, #16]
 800f9ce:	4650      	mov	r0, sl
 800f9d0:	4659      	mov	r1, fp
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	f018 0f01 	tst.w	r8, #1
 800f9d8:	d004      	beq.n	800f9e4 <_strtod_l+0x5dc>
 800f9da:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f9de:	f7f0 fe2b 	bl	8000638 <__aeabi_dmul>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f9e8:	f109 0908 	add.w	r9, r9, #8
 800f9ec:	d1f2      	bne.n	800f9d4 <_strtod_l+0x5cc>
 800f9ee:	b10b      	cbz	r3, 800f9f4 <_strtod_l+0x5ec>
 800f9f0:	4682      	mov	sl, r0
 800f9f2:	468b      	mov	fp, r1
 800f9f4:	9b04      	ldr	r3, [sp, #16]
 800f9f6:	b1bb      	cbz	r3, 800fa28 <_strtod_l+0x620>
 800f9f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f9fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	4659      	mov	r1, fp
 800fa04:	dd10      	ble.n	800fa28 <_strtod_l+0x620>
 800fa06:	2b1f      	cmp	r3, #31
 800fa08:	f340 8128 	ble.w	800fc5c <_strtod_l+0x854>
 800fa0c:	2b34      	cmp	r3, #52	; 0x34
 800fa0e:	bfde      	ittt	le
 800fa10:	3b20      	suble	r3, #32
 800fa12:	f04f 32ff 	movle.w	r2, #4294967295
 800fa16:	fa02 f303 	lslle.w	r3, r2, r3
 800fa1a:	f04f 0a00 	mov.w	sl, #0
 800fa1e:	bfcc      	ite	gt
 800fa20:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fa24:	ea03 0b01 	andle.w	fp, r3, r1
 800fa28:	2200      	movs	r2, #0
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	4650      	mov	r0, sl
 800fa2e:	4659      	mov	r1, fp
 800fa30:	f7f1 f86a 	bl	8000b08 <__aeabi_dcmpeq>
 800fa34:	2800      	cmp	r0, #0
 800fa36:	d1a4      	bne.n	800f982 <_strtod_l+0x57a>
 800fa38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa3a:	9300      	str	r3, [sp, #0]
 800fa3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fa3e:	462b      	mov	r3, r5
 800fa40:	463a      	mov	r2, r7
 800fa42:	4620      	mov	r0, r4
 800fa44:	f002 f982 	bl	8011d4c <__s2b>
 800fa48:	9009      	str	r0, [sp, #36]	; 0x24
 800fa4a:	2800      	cmp	r0, #0
 800fa4c:	f43f af24 	beq.w	800f898 <_strtod_l+0x490>
 800fa50:	9b07      	ldr	r3, [sp, #28]
 800fa52:	1b9e      	subs	r6, r3, r6
 800fa54:	9b08      	ldr	r3, [sp, #32]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	bfb4      	ite	lt
 800fa5a:	4633      	movlt	r3, r6
 800fa5c:	2300      	movge	r3, #0
 800fa5e:	9310      	str	r3, [sp, #64]	; 0x40
 800fa60:	9b08      	ldr	r3, [sp, #32]
 800fa62:	2500      	movs	r5, #0
 800fa64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fa68:	9318      	str	r3, [sp, #96]	; 0x60
 800fa6a:	462e      	mov	r6, r5
 800fa6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa6e:	4620      	mov	r0, r4
 800fa70:	6859      	ldr	r1, [r3, #4]
 800fa72:	f002 f8bf 	bl	8011bf4 <_Balloc>
 800fa76:	9007      	str	r0, [sp, #28]
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	f43f af11 	beq.w	800f8a0 <_strtod_l+0x498>
 800fa7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa80:	691a      	ldr	r2, [r3, #16]
 800fa82:	3202      	adds	r2, #2
 800fa84:	f103 010c 	add.w	r1, r3, #12
 800fa88:	0092      	lsls	r2, r2, #2
 800fa8a:	300c      	adds	r0, #12
 800fa8c:	f7fe fc98 	bl	800e3c0 <memcpy>
 800fa90:	ec4b ab10 	vmov	d0, sl, fp
 800fa94:	aa20      	add	r2, sp, #128	; 0x80
 800fa96:	a91f      	add	r1, sp, #124	; 0x7c
 800fa98:	4620      	mov	r0, r4
 800fa9a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800fa9e:	f002 fc91 	bl	80123c4 <__d2b>
 800faa2:	901e      	str	r0, [sp, #120]	; 0x78
 800faa4:	2800      	cmp	r0, #0
 800faa6:	f43f aefb 	beq.w	800f8a0 <_strtod_l+0x498>
 800faaa:	2101      	movs	r1, #1
 800faac:	4620      	mov	r0, r4
 800faae:	f002 f9e7 	bl	8011e80 <__i2b>
 800fab2:	4606      	mov	r6, r0
 800fab4:	2800      	cmp	r0, #0
 800fab6:	f43f aef3 	beq.w	800f8a0 <_strtod_l+0x498>
 800faba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fabc:	9904      	ldr	r1, [sp, #16]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	bfab      	itete	ge
 800fac2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800fac4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800fac6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800fac8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800facc:	bfac      	ite	ge
 800face:	eb03 0902 	addge.w	r9, r3, r2
 800fad2:	1ad7      	sublt	r7, r2, r3
 800fad4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fad6:	eba3 0801 	sub.w	r8, r3, r1
 800fada:	4490      	add	r8, r2
 800fadc:	4ba3      	ldr	r3, [pc, #652]	; (800fd6c <_strtod_l+0x964>)
 800fade:	f108 38ff 	add.w	r8, r8, #4294967295
 800fae2:	4598      	cmp	r8, r3
 800fae4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fae8:	f280 80cc 	bge.w	800fc84 <_strtod_l+0x87c>
 800faec:	eba3 0308 	sub.w	r3, r3, r8
 800faf0:	2b1f      	cmp	r3, #31
 800faf2:	eba2 0203 	sub.w	r2, r2, r3
 800faf6:	f04f 0101 	mov.w	r1, #1
 800fafa:	f300 80b6 	bgt.w	800fc6a <_strtod_l+0x862>
 800fafe:	fa01 f303 	lsl.w	r3, r1, r3
 800fb02:	9311      	str	r3, [sp, #68]	; 0x44
 800fb04:	2300      	movs	r3, #0
 800fb06:	930c      	str	r3, [sp, #48]	; 0x30
 800fb08:	eb09 0802 	add.w	r8, r9, r2
 800fb0c:	9b04      	ldr	r3, [sp, #16]
 800fb0e:	45c1      	cmp	r9, r8
 800fb10:	4417      	add	r7, r2
 800fb12:	441f      	add	r7, r3
 800fb14:	464b      	mov	r3, r9
 800fb16:	bfa8      	it	ge
 800fb18:	4643      	movge	r3, r8
 800fb1a:	42bb      	cmp	r3, r7
 800fb1c:	bfa8      	it	ge
 800fb1e:	463b      	movge	r3, r7
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	bfc2      	ittt	gt
 800fb24:	eba8 0803 	subgt.w	r8, r8, r3
 800fb28:	1aff      	subgt	r7, r7, r3
 800fb2a:	eba9 0903 	subgt.w	r9, r9, r3
 800fb2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	dd17      	ble.n	800fb64 <_strtod_l+0x75c>
 800fb34:	4631      	mov	r1, r6
 800fb36:	461a      	mov	r2, r3
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f002 fa5d 	bl	8011ff8 <__pow5mult>
 800fb3e:	4606      	mov	r6, r0
 800fb40:	2800      	cmp	r0, #0
 800fb42:	f43f aead 	beq.w	800f8a0 <_strtod_l+0x498>
 800fb46:	4601      	mov	r1, r0
 800fb48:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	f002 f9ae 	bl	8011eac <__multiply>
 800fb50:	900f      	str	r0, [sp, #60]	; 0x3c
 800fb52:	2800      	cmp	r0, #0
 800fb54:	f43f aea4 	beq.w	800f8a0 <_strtod_l+0x498>
 800fb58:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f002 f88a 	bl	8011c74 <_Bfree>
 800fb60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb62:	931e      	str	r3, [sp, #120]	; 0x78
 800fb64:	f1b8 0f00 	cmp.w	r8, #0
 800fb68:	f300 8091 	bgt.w	800fc8e <_strtod_l+0x886>
 800fb6c:	9b08      	ldr	r3, [sp, #32]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	dd08      	ble.n	800fb84 <_strtod_l+0x77c>
 800fb72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fb74:	9907      	ldr	r1, [sp, #28]
 800fb76:	4620      	mov	r0, r4
 800fb78:	f002 fa3e 	bl	8011ff8 <__pow5mult>
 800fb7c:	9007      	str	r0, [sp, #28]
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	f43f ae8e 	beq.w	800f8a0 <_strtod_l+0x498>
 800fb84:	2f00      	cmp	r7, #0
 800fb86:	dd08      	ble.n	800fb9a <_strtod_l+0x792>
 800fb88:	9907      	ldr	r1, [sp, #28]
 800fb8a:	463a      	mov	r2, r7
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f002 fa8d 	bl	80120ac <__lshift>
 800fb92:	9007      	str	r0, [sp, #28]
 800fb94:	2800      	cmp	r0, #0
 800fb96:	f43f ae83 	beq.w	800f8a0 <_strtod_l+0x498>
 800fb9a:	f1b9 0f00 	cmp.w	r9, #0
 800fb9e:	dd08      	ble.n	800fbb2 <_strtod_l+0x7aa>
 800fba0:	4631      	mov	r1, r6
 800fba2:	464a      	mov	r2, r9
 800fba4:	4620      	mov	r0, r4
 800fba6:	f002 fa81 	bl	80120ac <__lshift>
 800fbaa:	4606      	mov	r6, r0
 800fbac:	2800      	cmp	r0, #0
 800fbae:	f43f ae77 	beq.w	800f8a0 <_strtod_l+0x498>
 800fbb2:	9a07      	ldr	r2, [sp, #28]
 800fbb4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	f002 fb00 	bl	80121bc <__mdiff>
 800fbbc:	4605      	mov	r5, r0
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	f43f ae6e 	beq.w	800f8a0 <_strtod_l+0x498>
 800fbc4:	68c3      	ldr	r3, [r0, #12]
 800fbc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbc8:	2300      	movs	r3, #0
 800fbca:	60c3      	str	r3, [r0, #12]
 800fbcc:	4631      	mov	r1, r6
 800fbce:	f002 fad9 	bl	8012184 <__mcmp>
 800fbd2:	2800      	cmp	r0, #0
 800fbd4:	da65      	bge.n	800fca2 <_strtod_l+0x89a>
 800fbd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbd8:	ea53 030a 	orrs.w	r3, r3, sl
 800fbdc:	f040 8087 	bne.w	800fcee <_strtod_l+0x8e6>
 800fbe0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	f040 8082 	bne.w	800fcee <_strtod_l+0x8e6>
 800fbea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fbee:	0d1b      	lsrs	r3, r3, #20
 800fbf0:	051b      	lsls	r3, r3, #20
 800fbf2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fbf6:	d97a      	bls.n	800fcee <_strtod_l+0x8e6>
 800fbf8:	696b      	ldr	r3, [r5, #20]
 800fbfa:	b913      	cbnz	r3, 800fc02 <_strtod_l+0x7fa>
 800fbfc:	692b      	ldr	r3, [r5, #16]
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	dd75      	ble.n	800fcee <_strtod_l+0x8e6>
 800fc02:	4629      	mov	r1, r5
 800fc04:	2201      	movs	r2, #1
 800fc06:	4620      	mov	r0, r4
 800fc08:	f002 fa50 	bl	80120ac <__lshift>
 800fc0c:	4631      	mov	r1, r6
 800fc0e:	4605      	mov	r5, r0
 800fc10:	f002 fab8 	bl	8012184 <__mcmp>
 800fc14:	2800      	cmp	r0, #0
 800fc16:	dd6a      	ble.n	800fcee <_strtod_l+0x8e6>
 800fc18:	9904      	ldr	r1, [sp, #16]
 800fc1a:	4a55      	ldr	r2, [pc, #340]	; (800fd70 <_strtod_l+0x968>)
 800fc1c:	465b      	mov	r3, fp
 800fc1e:	2900      	cmp	r1, #0
 800fc20:	f000 8085 	beq.w	800fd2e <_strtod_l+0x926>
 800fc24:	ea02 010b 	and.w	r1, r2, fp
 800fc28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fc2c:	dc7f      	bgt.n	800fd2e <_strtod_l+0x926>
 800fc2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fc32:	f77f aeaa 	ble.w	800f98a <_strtod_l+0x582>
 800fc36:	4a4f      	ldr	r2, [pc, #316]	; (800fd74 <_strtod_l+0x96c>)
 800fc38:	2300      	movs	r3, #0
 800fc3a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800fc3e:	4650      	mov	r0, sl
 800fc40:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800fc44:	4659      	mov	r1, fp
 800fc46:	f7f0 fcf7 	bl	8000638 <__aeabi_dmul>
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	4303      	orrs	r3, r0
 800fc4e:	bf08      	it	eq
 800fc50:	2322      	moveq	r3, #34	; 0x22
 800fc52:	4682      	mov	sl, r0
 800fc54:	468b      	mov	fp, r1
 800fc56:	bf08      	it	eq
 800fc58:	6023      	streq	r3, [r4, #0]
 800fc5a:	e62b      	b.n	800f8b4 <_strtod_l+0x4ac>
 800fc5c:	f04f 32ff 	mov.w	r2, #4294967295
 800fc60:	fa02 f303 	lsl.w	r3, r2, r3
 800fc64:	ea03 0a0a 	and.w	sl, r3, sl
 800fc68:	e6de      	b.n	800fa28 <_strtod_l+0x620>
 800fc6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fc6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800fc72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fc76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fc7a:	fa01 f308 	lsl.w	r3, r1, r8
 800fc7e:	930c      	str	r3, [sp, #48]	; 0x30
 800fc80:	9111      	str	r1, [sp, #68]	; 0x44
 800fc82:	e741      	b.n	800fb08 <_strtod_l+0x700>
 800fc84:	2300      	movs	r3, #0
 800fc86:	930c      	str	r3, [sp, #48]	; 0x30
 800fc88:	2301      	movs	r3, #1
 800fc8a:	9311      	str	r3, [sp, #68]	; 0x44
 800fc8c:	e73c      	b.n	800fb08 <_strtod_l+0x700>
 800fc8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fc90:	4642      	mov	r2, r8
 800fc92:	4620      	mov	r0, r4
 800fc94:	f002 fa0a 	bl	80120ac <__lshift>
 800fc98:	901e      	str	r0, [sp, #120]	; 0x78
 800fc9a:	2800      	cmp	r0, #0
 800fc9c:	f47f af66 	bne.w	800fb6c <_strtod_l+0x764>
 800fca0:	e5fe      	b.n	800f8a0 <_strtod_l+0x498>
 800fca2:	465f      	mov	r7, fp
 800fca4:	d16e      	bne.n	800fd84 <_strtod_l+0x97c>
 800fca6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fca8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fcac:	b342      	cbz	r2, 800fd00 <_strtod_l+0x8f8>
 800fcae:	4a32      	ldr	r2, [pc, #200]	; (800fd78 <_strtod_l+0x970>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d128      	bne.n	800fd06 <_strtod_l+0x8fe>
 800fcb4:	9b04      	ldr	r3, [sp, #16]
 800fcb6:	4650      	mov	r0, sl
 800fcb8:	b1eb      	cbz	r3, 800fcf6 <_strtod_l+0x8ee>
 800fcba:	4a2d      	ldr	r2, [pc, #180]	; (800fd70 <_strtod_l+0x968>)
 800fcbc:	403a      	ands	r2, r7
 800fcbe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800fcc2:	f04f 31ff 	mov.w	r1, #4294967295
 800fcc6:	d819      	bhi.n	800fcfc <_strtod_l+0x8f4>
 800fcc8:	0d12      	lsrs	r2, r2, #20
 800fcca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fcce:	fa01 f303 	lsl.w	r3, r1, r3
 800fcd2:	4298      	cmp	r0, r3
 800fcd4:	d117      	bne.n	800fd06 <_strtod_l+0x8fe>
 800fcd6:	4b29      	ldr	r3, [pc, #164]	; (800fd7c <_strtod_l+0x974>)
 800fcd8:	429f      	cmp	r7, r3
 800fcda:	d102      	bne.n	800fce2 <_strtod_l+0x8da>
 800fcdc:	3001      	adds	r0, #1
 800fcde:	f43f addf 	beq.w	800f8a0 <_strtod_l+0x498>
 800fce2:	4b23      	ldr	r3, [pc, #140]	; (800fd70 <_strtod_l+0x968>)
 800fce4:	403b      	ands	r3, r7
 800fce6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fcea:	f04f 0a00 	mov.w	sl, #0
 800fcee:	9b04      	ldr	r3, [sp, #16]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d1a0      	bne.n	800fc36 <_strtod_l+0x82e>
 800fcf4:	e5de      	b.n	800f8b4 <_strtod_l+0x4ac>
 800fcf6:	f04f 33ff 	mov.w	r3, #4294967295
 800fcfa:	e7ea      	b.n	800fcd2 <_strtod_l+0x8ca>
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	e7e8      	b.n	800fcd2 <_strtod_l+0x8ca>
 800fd00:	ea53 030a 	orrs.w	r3, r3, sl
 800fd04:	d088      	beq.n	800fc18 <_strtod_l+0x810>
 800fd06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd08:	b1db      	cbz	r3, 800fd42 <_strtod_l+0x93a>
 800fd0a:	423b      	tst	r3, r7
 800fd0c:	d0ef      	beq.n	800fcee <_strtod_l+0x8e6>
 800fd0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd10:	9a04      	ldr	r2, [sp, #16]
 800fd12:	4650      	mov	r0, sl
 800fd14:	4659      	mov	r1, fp
 800fd16:	b1c3      	cbz	r3, 800fd4a <_strtod_l+0x942>
 800fd18:	f7ff fb5a 	bl	800f3d0 <sulp>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	460b      	mov	r3, r1
 800fd20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fd24:	f7f0 fad2 	bl	80002cc <__adddf3>
 800fd28:	4682      	mov	sl, r0
 800fd2a:	468b      	mov	fp, r1
 800fd2c:	e7df      	b.n	800fcee <_strtod_l+0x8e6>
 800fd2e:	4013      	ands	r3, r2
 800fd30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fd34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fd38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fd3c:	f04f 3aff 	mov.w	sl, #4294967295
 800fd40:	e7d5      	b.n	800fcee <_strtod_l+0x8e6>
 800fd42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd44:	ea13 0f0a 	tst.w	r3, sl
 800fd48:	e7e0      	b.n	800fd0c <_strtod_l+0x904>
 800fd4a:	f7ff fb41 	bl	800f3d0 <sulp>
 800fd4e:	4602      	mov	r2, r0
 800fd50:	460b      	mov	r3, r1
 800fd52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fd56:	f7f0 fab7 	bl	80002c8 <__aeabi_dsub>
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	4682      	mov	sl, r0
 800fd60:	468b      	mov	fp, r1
 800fd62:	f7f0 fed1 	bl	8000b08 <__aeabi_dcmpeq>
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d0c1      	beq.n	800fcee <_strtod_l+0x8e6>
 800fd6a:	e60e      	b.n	800f98a <_strtod_l+0x582>
 800fd6c:	fffffc02 	.word	0xfffffc02
 800fd70:	7ff00000 	.word	0x7ff00000
 800fd74:	39500000 	.word	0x39500000
 800fd78:	000fffff 	.word	0x000fffff
 800fd7c:	7fefffff 	.word	0x7fefffff
 800fd80:	08014a00 	.word	0x08014a00
 800fd84:	4631      	mov	r1, r6
 800fd86:	4628      	mov	r0, r5
 800fd88:	f002 fb78 	bl	801247c <__ratio>
 800fd8c:	ec59 8b10 	vmov	r8, r9, d0
 800fd90:	ee10 0a10 	vmov	r0, s0
 800fd94:	2200      	movs	r2, #0
 800fd96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fd9a:	4649      	mov	r1, r9
 800fd9c:	f7f0 fec8 	bl	8000b30 <__aeabi_dcmple>
 800fda0:	2800      	cmp	r0, #0
 800fda2:	d07c      	beq.n	800fe9e <_strtod_l+0xa96>
 800fda4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d04c      	beq.n	800fe44 <_strtod_l+0xa3c>
 800fdaa:	4b95      	ldr	r3, [pc, #596]	; (8010000 <_strtod_l+0xbf8>)
 800fdac:	2200      	movs	r2, #0
 800fdae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fdb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010000 <_strtod_l+0xbf8>
 800fdb6:	f04f 0800 	mov.w	r8, #0
 800fdba:	4b92      	ldr	r3, [pc, #584]	; (8010004 <_strtod_l+0xbfc>)
 800fdbc:	403b      	ands	r3, r7
 800fdbe:	9311      	str	r3, [sp, #68]	; 0x44
 800fdc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fdc2:	4b91      	ldr	r3, [pc, #580]	; (8010008 <_strtod_l+0xc00>)
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	f040 80b2 	bne.w	800ff2e <_strtod_l+0xb26>
 800fdca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fdce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fdd2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800fdd6:	ec4b ab10 	vmov	d0, sl, fp
 800fdda:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800fdde:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fde2:	f002 fa73 	bl	80122cc <__ulp>
 800fde6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fdea:	ec53 2b10 	vmov	r2, r3, d0
 800fdee:	f7f0 fc23 	bl	8000638 <__aeabi_dmul>
 800fdf2:	4652      	mov	r2, sl
 800fdf4:	465b      	mov	r3, fp
 800fdf6:	f7f0 fa69 	bl	80002cc <__adddf3>
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	4981      	ldr	r1, [pc, #516]	; (8010004 <_strtod_l+0xbfc>)
 800fdfe:	4a83      	ldr	r2, [pc, #524]	; (801000c <_strtod_l+0xc04>)
 800fe00:	4019      	ands	r1, r3
 800fe02:	4291      	cmp	r1, r2
 800fe04:	4682      	mov	sl, r0
 800fe06:	d95e      	bls.n	800fec6 <_strtod_l+0xabe>
 800fe08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe0a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d103      	bne.n	800fe1a <_strtod_l+0xa12>
 800fe12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe14:	3301      	adds	r3, #1
 800fe16:	f43f ad43 	beq.w	800f8a0 <_strtod_l+0x498>
 800fe1a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8010018 <_strtod_l+0xc10>
 800fe1e:	f04f 3aff 	mov.w	sl, #4294967295
 800fe22:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fe24:	4620      	mov	r0, r4
 800fe26:	f001 ff25 	bl	8011c74 <_Bfree>
 800fe2a:	9907      	ldr	r1, [sp, #28]
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	f001 ff21 	bl	8011c74 <_Bfree>
 800fe32:	4631      	mov	r1, r6
 800fe34:	4620      	mov	r0, r4
 800fe36:	f001 ff1d 	bl	8011c74 <_Bfree>
 800fe3a:	4629      	mov	r1, r5
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f001 ff19 	bl	8011c74 <_Bfree>
 800fe42:	e613      	b.n	800fa6c <_strtod_l+0x664>
 800fe44:	f1ba 0f00 	cmp.w	sl, #0
 800fe48:	d11b      	bne.n	800fe82 <_strtod_l+0xa7a>
 800fe4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe4e:	b9f3      	cbnz	r3, 800fe8e <_strtod_l+0xa86>
 800fe50:	4b6b      	ldr	r3, [pc, #428]	; (8010000 <_strtod_l+0xbf8>)
 800fe52:	2200      	movs	r2, #0
 800fe54:	4640      	mov	r0, r8
 800fe56:	4649      	mov	r1, r9
 800fe58:	f7f0 fe60 	bl	8000b1c <__aeabi_dcmplt>
 800fe5c:	b9d0      	cbnz	r0, 800fe94 <_strtod_l+0xa8c>
 800fe5e:	4640      	mov	r0, r8
 800fe60:	4649      	mov	r1, r9
 800fe62:	4b6b      	ldr	r3, [pc, #428]	; (8010010 <_strtod_l+0xc08>)
 800fe64:	2200      	movs	r2, #0
 800fe66:	f7f0 fbe7 	bl	8000638 <__aeabi_dmul>
 800fe6a:	4680      	mov	r8, r0
 800fe6c:	4689      	mov	r9, r1
 800fe6e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fe72:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800fe76:	931b      	str	r3, [sp, #108]	; 0x6c
 800fe78:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800fe7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fe80:	e79b      	b.n	800fdba <_strtod_l+0x9b2>
 800fe82:	f1ba 0f01 	cmp.w	sl, #1
 800fe86:	d102      	bne.n	800fe8e <_strtod_l+0xa86>
 800fe88:	2f00      	cmp	r7, #0
 800fe8a:	f43f ad7e 	beq.w	800f98a <_strtod_l+0x582>
 800fe8e:	4b61      	ldr	r3, [pc, #388]	; (8010014 <_strtod_l+0xc0c>)
 800fe90:	2200      	movs	r2, #0
 800fe92:	e78c      	b.n	800fdae <_strtod_l+0x9a6>
 800fe94:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010010 <_strtod_l+0xc08>
 800fe98:	f04f 0800 	mov.w	r8, #0
 800fe9c:	e7e7      	b.n	800fe6e <_strtod_l+0xa66>
 800fe9e:	4b5c      	ldr	r3, [pc, #368]	; (8010010 <_strtod_l+0xc08>)
 800fea0:	4640      	mov	r0, r8
 800fea2:	4649      	mov	r1, r9
 800fea4:	2200      	movs	r2, #0
 800fea6:	f7f0 fbc7 	bl	8000638 <__aeabi_dmul>
 800feaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800feac:	4680      	mov	r8, r0
 800feae:	4689      	mov	r9, r1
 800feb0:	b933      	cbnz	r3, 800fec0 <_strtod_l+0xab8>
 800feb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800feb6:	9012      	str	r0, [sp, #72]	; 0x48
 800feb8:	9313      	str	r3, [sp, #76]	; 0x4c
 800feba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800febe:	e7dd      	b.n	800fe7c <_strtod_l+0xa74>
 800fec0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800fec4:	e7f9      	b.n	800feba <_strtod_l+0xab2>
 800fec6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800feca:	9b04      	ldr	r3, [sp, #16]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d1a8      	bne.n	800fe22 <_strtod_l+0xa1a>
 800fed0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fed4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fed6:	0d1b      	lsrs	r3, r3, #20
 800fed8:	051b      	lsls	r3, r3, #20
 800feda:	429a      	cmp	r2, r3
 800fedc:	d1a1      	bne.n	800fe22 <_strtod_l+0xa1a>
 800fede:	4640      	mov	r0, r8
 800fee0:	4649      	mov	r1, r9
 800fee2:	f7f0 ff09 	bl	8000cf8 <__aeabi_d2lz>
 800fee6:	f7f0 fb79 	bl	80005dc <__aeabi_l2d>
 800feea:	4602      	mov	r2, r0
 800feec:	460b      	mov	r3, r1
 800feee:	4640      	mov	r0, r8
 800fef0:	4649      	mov	r1, r9
 800fef2:	f7f0 f9e9 	bl	80002c8 <__aeabi_dsub>
 800fef6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fef8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fefc:	ea43 030a 	orr.w	r3, r3, sl
 800ff00:	4313      	orrs	r3, r2
 800ff02:	4680      	mov	r8, r0
 800ff04:	4689      	mov	r9, r1
 800ff06:	d053      	beq.n	800ffb0 <_strtod_l+0xba8>
 800ff08:	a335      	add	r3, pc, #212	; (adr r3, 800ffe0 <_strtod_l+0xbd8>)
 800ff0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0e:	f7f0 fe05 	bl	8000b1c <__aeabi_dcmplt>
 800ff12:	2800      	cmp	r0, #0
 800ff14:	f47f acce 	bne.w	800f8b4 <_strtod_l+0x4ac>
 800ff18:	a333      	add	r3, pc, #204	; (adr r3, 800ffe8 <_strtod_l+0xbe0>)
 800ff1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1e:	4640      	mov	r0, r8
 800ff20:	4649      	mov	r1, r9
 800ff22:	f7f0 fe19 	bl	8000b58 <__aeabi_dcmpgt>
 800ff26:	2800      	cmp	r0, #0
 800ff28:	f43f af7b 	beq.w	800fe22 <_strtod_l+0xa1a>
 800ff2c:	e4c2      	b.n	800f8b4 <_strtod_l+0x4ac>
 800ff2e:	9b04      	ldr	r3, [sp, #16]
 800ff30:	b333      	cbz	r3, 800ff80 <_strtod_l+0xb78>
 800ff32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ff38:	d822      	bhi.n	800ff80 <_strtod_l+0xb78>
 800ff3a:	a32d      	add	r3, pc, #180	; (adr r3, 800fff0 <_strtod_l+0xbe8>)
 800ff3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff40:	4640      	mov	r0, r8
 800ff42:	4649      	mov	r1, r9
 800ff44:	f7f0 fdf4 	bl	8000b30 <__aeabi_dcmple>
 800ff48:	b1a0      	cbz	r0, 800ff74 <_strtod_l+0xb6c>
 800ff4a:	4649      	mov	r1, r9
 800ff4c:	4640      	mov	r0, r8
 800ff4e:	f7f0 fe4b 	bl	8000be8 <__aeabi_d2uiz>
 800ff52:	2801      	cmp	r0, #1
 800ff54:	bf38      	it	cc
 800ff56:	2001      	movcc	r0, #1
 800ff58:	f7f0 faf4 	bl	8000544 <__aeabi_ui2d>
 800ff5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff5e:	4680      	mov	r8, r0
 800ff60:	4689      	mov	r9, r1
 800ff62:	bb13      	cbnz	r3, 800ffaa <_strtod_l+0xba2>
 800ff64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ff68:	9014      	str	r0, [sp, #80]	; 0x50
 800ff6a:	9315      	str	r3, [sp, #84]	; 0x54
 800ff6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ff70:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ff74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ff78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ff7c:	1a9b      	subs	r3, r3, r2
 800ff7e:	930d      	str	r3, [sp, #52]	; 0x34
 800ff80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ff84:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ff88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ff8c:	f002 f99e 	bl	80122cc <__ulp>
 800ff90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ff94:	ec53 2b10 	vmov	r2, r3, d0
 800ff98:	f7f0 fb4e 	bl	8000638 <__aeabi_dmul>
 800ff9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ffa0:	f7f0 f994 	bl	80002cc <__adddf3>
 800ffa4:	4682      	mov	sl, r0
 800ffa6:	468b      	mov	fp, r1
 800ffa8:	e78f      	b.n	800feca <_strtod_l+0xac2>
 800ffaa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800ffae:	e7dd      	b.n	800ff6c <_strtod_l+0xb64>
 800ffb0:	a311      	add	r3, pc, #68	; (adr r3, 800fff8 <_strtod_l+0xbf0>)
 800ffb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb6:	f7f0 fdb1 	bl	8000b1c <__aeabi_dcmplt>
 800ffba:	e7b4      	b.n	800ff26 <_strtod_l+0xb1e>
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	930e      	str	r3, [sp, #56]	; 0x38
 800ffc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ffc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ffc4:	6013      	str	r3, [r2, #0]
 800ffc6:	f7ff ba65 	b.w	800f494 <_strtod_l+0x8c>
 800ffca:	2b65      	cmp	r3, #101	; 0x65
 800ffcc:	f43f ab5d 	beq.w	800f68a <_strtod_l+0x282>
 800ffd0:	2b45      	cmp	r3, #69	; 0x45
 800ffd2:	f43f ab5a 	beq.w	800f68a <_strtod_l+0x282>
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	f7ff bb92 	b.w	800f700 <_strtod_l+0x2f8>
 800ffdc:	f3af 8000 	nop.w
 800ffe0:	94a03595 	.word	0x94a03595
 800ffe4:	3fdfffff 	.word	0x3fdfffff
 800ffe8:	35afe535 	.word	0x35afe535
 800ffec:	3fe00000 	.word	0x3fe00000
 800fff0:	ffc00000 	.word	0xffc00000
 800fff4:	41dfffff 	.word	0x41dfffff
 800fff8:	94a03595 	.word	0x94a03595
 800fffc:	3fcfffff 	.word	0x3fcfffff
 8010000:	3ff00000 	.word	0x3ff00000
 8010004:	7ff00000 	.word	0x7ff00000
 8010008:	7fe00000 	.word	0x7fe00000
 801000c:	7c9fffff 	.word	0x7c9fffff
 8010010:	3fe00000 	.word	0x3fe00000
 8010014:	bff00000 	.word	0xbff00000
 8010018:	7fefffff 	.word	0x7fefffff

0801001c <_strtod_r>:
 801001c:	4b01      	ldr	r3, [pc, #4]	; (8010024 <_strtod_r+0x8>)
 801001e:	f7ff b9f3 	b.w	800f408 <_strtod_l>
 8010022:	bf00      	nop
 8010024:	20000090 	.word	0x20000090

08010028 <_strtol_l.isra.0>:
 8010028:	2b01      	cmp	r3, #1
 801002a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801002e:	d001      	beq.n	8010034 <_strtol_l.isra.0+0xc>
 8010030:	2b24      	cmp	r3, #36	; 0x24
 8010032:	d906      	bls.n	8010042 <_strtol_l.isra.0+0x1a>
 8010034:	f7fe f992 	bl	800e35c <__errno>
 8010038:	2316      	movs	r3, #22
 801003a:	6003      	str	r3, [r0, #0]
 801003c:	2000      	movs	r0, #0
 801003e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010042:	4f3a      	ldr	r7, [pc, #232]	; (801012c <_strtol_l.isra.0+0x104>)
 8010044:	468e      	mov	lr, r1
 8010046:	4676      	mov	r6, lr
 8010048:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801004c:	5de5      	ldrb	r5, [r4, r7]
 801004e:	f015 0508 	ands.w	r5, r5, #8
 8010052:	d1f8      	bne.n	8010046 <_strtol_l.isra.0+0x1e>
 8010054:	2c2d      	cmp	r4, #45	; 0x2d
 8010056:	d134      	bne.n	80100c2 <_strtol_l.isra.0+0x9a>
 8010058:	f89e 4000 	ldrb.w	r4, [lr]
 801005c:	f04f 0801 	mov.w	r8, #1
 8010060:	f106 0e02 	add.w	lr, r6, #2
 8010064:	2b00      	cmp	r3, #0
 8010066:	d05c      	beq.n	8010122 <_strtol_l.isra.0+0xfa>
 8010068:	2b10      	cmp	r3, #16
 801006a:	d10c      	bne.n	8010086 <_strtol_l.isra.0+0x5e>
 801006c:	2c30      	cmp	r4, #48	; 0x30
 801006e:	d10a      	bne.n	8010086 <_strtol_l.isra.0+0x5e>
 8010070:	f89e 4000 	ldrb.w	r4, [lr]
 8010074:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010078:	2c58      	cmp	r4, #88	; 0x58
 801007a:	d14d      	bne.n	8010118 <_strtol_l.isra.0+0xf0>
 801007c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8010080:	2310      	movs	r3, #16
 8010082:	f10e 0e02 	add.w	lr, lr, #2
 8010086:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801008a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801008e:	2600      	movs	r6, #0
 8010090:	fbbc f9f3 	udiv	r9, ip, r3
 8010094:	4635      	mov	r5, r6
 8010096:	fb03 ca19 	mls	sl, r3, r9, ip
 801009a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801009e:	2f09      	cmp	r7, #9
 80100a0:	d818      	bhi.n	80100d4 <_strtol_l.isra.0+0xac>
 80100a2:	463c      	mov	r4, r7
 80100a4:	42a3      	cmp	r3, r4
 80100a6:	dd24      	ble.n	80100f2 <_strtol_l.isra.0+0xca>
 80100a8:	2e00      	cmp	r6, #0
 80100aa:	db1f      	blt.n	80100ec <_strtol_l.isra.0+0xc4>
 80100ac:	45a9      	cmp	r9, r5
 80100ae:	d31d      	bcc.n	80100ec <_strtol_l.isra.0+0xc4>
 80100b0:	d101      	bne.n	80100b6 <_strtol_l.isra.0+0x8e>
 80100b2:	45a2      	cmp	sl, r4
 80100b4:	db1a      	blt.n	80100ec <_strtol_l.isra.0+0xc4>
 80100b6:	fb05 4503 	mla	r5, r5, r3, r4
 80100ba:	2601      	movs	r6, #1
 80100bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80100c0:	e7eb      	b.n	801009a <_strtol_l.isra.0+0x72>
 80100c2:	2c2b      	cmp	r4, #43	; 0x2b
 80100c4:	bf08      	it	eq
 80100c6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80100ca:	46a8      	mov	r8, r5
 80100cc:	bf08      	it	eq
 80100ce:	f106 0e02 	addeq.w	lr, r6, #2
 80100d2:	e7c7      	b.n	8010064 <_strtol_l.isra.0+0x3c>
 80100d4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80100d8:	2f19      	cmp	r7, #25
 80100da:	d801      	bhi.n	80100e0 <_strtol_l.isra.0+0xb8>
 80100dc:	3c37      	subs	r4, #55	; 0x37
 80100de:	e7e1      	b.n	80100a4 <_strtol_l.isra.0+0x7c>
 80100e0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80100e4:	2f19      	cmp	r7, #25
 80100e6:	d804      	bhi.n	80100f2 <_strtol_l.isra.0+0xca>
 80100e8:	3c57      	subs	r4, #87	; 0x57
 80100ea:	e7db      	b.n	80100a4 <_strtol_l.isra.0+0x7c>
 80100ec:	f04f 36ff 	mov.w	r6, #4294967295
 80100f0:	e7e4      	b.n	80100bc <_strtol_l.isra.0+0x94>
 80100f2:	2e00      	cmp	r6, #0
 80100f4:	da05      	bge.n	8010102 <_strtol_l.isra.0+0xda>
 80100f6:	2322      	movs	r3, #34	; 0x22
 80100f8:	6003      	str	r3, [r0, #0]
 80100fa:	4665      	mov	r5, ip
 80100fc:	b942      	cbnz	r2, 8010110 <_strtol_l.isra.0+0xe8>
 80100fe:	4628      	mov	r0, r5
 8010100:	e79d      	b.n	801003e <_strtol_l.isra.0+0x16>
 8010102:	f1b8 0f00 	cmp.w	r8, #0
 8010106:	d000      	beq.n	801010a <_strtol_l.isra.0+0xe2>
 8010108:	426d      	negs	r5, r5
 801010a:	2a00      	cmp	r2, #0
 801010c:	d0f7      	beq.n	80100fe <_strtol_l.isra.0+0xd6>
 801010e:	b10e      	cbz	r6, 8010114 <_strtol_l.isra.0+0xec>
 8010110:	f10e 31ff 	add.w	r1, lr, #4294967295
 8010114:	6011      	str	r1, [r2, #0]
 8010116:	e7f2      	b.n	80100fe <_strtol_l.isra.0+0xd6>
 8010118:	2430      	movs	r4, #48	; 0x30
 801011a:	2b00      	cmp	r3, #0
 801011c:	d1b3      	bne.n	8010086 <_strtol_l.isra.0+0x5e>
 801011e:	2308      	movs	r3, #8
 8010120:	e7b1      	b.n	8010086 <_strtol_l.isra.0+0x5e>
 8010122:	2c30      	cmp	r4, #48	; 0x30
 8010124:	d0a4      	beq.n	8010070 <_strtol_l.isra.0+0x48>
 8010126:	230a      	movs	r3, #10
 8010128:	e7ad      	b.n	8010086 <_strtol_l.isra.0+0x5e>
 801012a:	bf00      	nop
 801012c:	08014899 	.word	0x08014899

08010130 <_strtol_r>:
 8010130:	f7ff bf7a 	b.w	8010028 <_strtol_l.isra.0>

08010134 <strtol>:
 8010134:	4613      	mov	r3, r2
 8010136:	460a      	mov	r2, r1
 8010138:	4601      	mov	r1, r0
 801013a:	4802      	ldr	r0, [pc, #8]	; (8010144 <strtol+0x10>)
 801013c:	6800      	ldr	r0, [r0, #0]
 801013e:	f7ff bf73 	b.w	8010028 <_strtol_l.isra.0>
 8010142:	bf00      	nop
 8010144:	20000028 	.word	0x20000028

08010148 <_vsniprintf_r>:
 8010148:	b530      	push	{r4, r5, lr}
 801014a:	1e14      	subs	r4, r2, #0
 801014c:	4605      	mov	r5, r0
 801014e:	b09b      	sub	sp, #108	; 0x6c
 8010150:	4618      	mov	r0, r3
 8010152:	da05      	bge.n	8010160 <_vsniprintf_r+0x18>
 8010154:	238b      	movs	r3, #139	; 0x8b
 8010156:	602b      	str	r3, [r5, #0]
 8010158:	f04f 30ff 	mov.w	r0, #4294967295
 801015c:	b01b      	add	sp, #108	; 0x6c
 801015e:	bd30      	pop	{r4, r5, pc}
 8010160:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010164:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010168:	bf14      	ite	ne
 801016a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801016e:	4623      	moveq	r3, r4
 8010170:	9302      	str	r3, [sp, #8]
 8010172:	9305      	str	r3, [sp, #20]
 8010174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010178:	9100      	str	r1, [sp, #0]
 801017a:	9104      	str	r1, [sp, #16]
 801017c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010180:	4602      	mov	r2, r0
 8010182:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010184:	4669      	mov	r1, sp
 8010186:	4628      	mov	r0, r5
 8010188:	f002 fa5a 	bl	8012640 <_svfiprintf_r>
 801018c:	1c43      	adds	r3, r0, #1
 801018e:	bfbc      	itt	lt
 8010190:	238b      	movlt	r3, #139	; 0x8b
 8010192:	602b      	strlt	r3, [r5, #0]
 8010194:	2c00      	cmp	r4, #0
 8010196:	d0e1      	beq.n	801015c <_vsniprintf_r+0x14>
 8010198:	9b00      	ldr	r3, [sp, #0]
 801019a:	2200      	movs	r2, #0
 801019c:	701a      	strb	r2, [r3, #0]
 801019e:	e7dd      	b.n	801015c <_vsniprintf_r+0x14>

080101a0 <vsniprintf>:
 80101a0:	b507      	push	{r0, r1, r2, lr}
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	4613      	mov	r3, r2
 80101a6:	460a      	mov	r2, r1
 80101a8:	4601      	mov	r1, r0
 80101aa:	4803      	ldr	r0, [pc, #12]	; (80101b8 <vsniprintf+0x18>)
 80101ac:	6800      	ldr	r0, [r0, #0]
 80101ae:	f7ff ffcb 	bl	8010148 <_vsniprintf_r>
 80101b2:	b003      	add	sp, #12
 80101b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80101b8:	20000028 	.word	0x20000028

080101bc <__swbuf_r>:
 80101bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101be:	460e      	mov	r6, r1
 80101c0:	4614      	mov	r4, r2
 80101c2:	4605      	mov	r5, r0
 80101c4:	b118      	cbz	r0, 80101ce <__swbuf_r+0x12>
 80101c6:	6983      	ldr	r3, [r0, #24]
 80101c8:	b90b      	cbnz	r3, 80101ce <__swbuf_r+0x12>
 80101ca:	f001 f86b 	bl	80112a4 <__sinit>
 80101ce:	4b21      	ldr	r3, [pc, #132]	; (8010254 <__swbuf_r+0x98>)
 80101d0:	429c      	cmp	r4, r3
 80101d2:	d12b      	bne.n	801022c <__swbuf_r+0x70>
 80101d4:	686c      	ldr	r4, [r5, #4]
 80101d6:	69a3      	ldr	r3, [r4, #24]
 80101d8:	60a3      	str	r3, [r4, #8]
 80101da:	89a3      	ldrh	r3, [r4, #12]
 80101dc:	071a      	lsls	r2, r3, #28
 80101de:	d52f      	bpl.n	8010240 <__swbuf_r+0x84>
 80101e0:	6923      	ldr	r3, [r4, #16]
 80101e2:	b36b      	cbz	r3, 8010240 <__swbuf_r+0x84>
 80101e4:	6923      	ldr	r3, [r4, #16]
 80101e6:	6820      	ldr	r0, [r4, #0]
 80101e8:	1ac0      	subs	r0, r0, r3
 80101ea:	6963      	ldr	r3, [r4, #20]
 80101ec:	b2f6      	uxtb	r6, r6
 80101ee:	4283      	cmp	r3, r0
 80101f0:	4637      	mov	r7, r6
 80101f2:	dc04      	bgt.n	80101fe <__swbuf_r+0x42>
 80101f4:	4621      	mov	r1, r4
 80101f6:	4628      	mov	r0, r5
 80101f8:	f000 ffc0 	bl	801117c <_fflush_r>
 80101fc:	bb30      	cbnz	r0, 801024c <__swbuf_r+0x90>
 80101fe:	68a3      	ldr	r3, [r4, #8]
 8010200:	3b01      	subs	r3, #1
 8010202:	60a3      	str	r3, [r4, #8]
 8010204:	6823      	ldr	r3, [r4, #0]
 8010206:	1c5a      	adds	r2, r3, #1
 8010208:	6022      	str	r2, [r4, #0]
 801020a:	701e      	strb	r6, [r3, #0]
 801020c:	6963      	ldr	r3, [r4, #20]
 801020e:	3001      	adds	r0, #1
 8010210:	4283      	cmp	r3, r0
 8010212:	d004      	beq.n	801021e <__swbuf_r+0x62>
 8010214:	89a3      	ldrh	r3, [r4, #12]
 8010216:	07db      	lsls	r3, r3, #31
 8010218:	d506      	bpl.n	8010228 <__swbuf_r+0x6c>
 801021a:	2e0a      	cmp	r6, #10
 801021c:	d104      	bne.n	8010228 <__swbuf_r+0x6c>
 801021e:	4621      	mov	r1, r4
 8010220:	4628      	mov	r0, r5
 8010222:	f000 ffab 	bl	801117c <_fflush_r>
 8010226:	b988      	cbnz	r0, 801024c <__swbuf_r+0x90>
 8010228:	4638      	mov	r0, r7
 801022a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801022c:	4b0a      	ldr	r3, [pc, #40]	; (8010258 <__swbuf_r+0x9c>)
 801022e:	429c      	cmp	r4, r3
 8010230:	d101      	bne.n	8010236 <__swbuf_r+0x7a>
 8010232:	68ac      	ldr	r4, [r5, #8]
 8010234:	e7cf      	b.n	80101d6 <__swbuf_r+0x1a>
 8010236:	4b09      	ldr	r3, [pc, #36]	; (801025c <__swbuf_r+0xa0>)
 8010238:	429c      	cmp	r4, r3
 801023a:	bf08      	it	eq
 801023c:	68ec      	ldreq	r4, [r5, #12]
 801023e:	e7ca      	b.n	80101d6 <__swbuf_r+0x1a>
 8010240:	4621      	mov	r1, r4
 8010242:	4628      	mov	r0, r5
 8010244:	f000 f81e 	bl	8010284 <__swsetup_r>
 8010248:	2800      	cmp	r0, #0
 801024a:	d0cb      	beq.n	80101e4 <__swbuf_r+0x28>
 801024c:	f04f 37ff 	mov.w	r7, #4294967295
 8010250:	e7ea      	b.n	8010228 <__swbuf_r+0x6c>
 8010252:	bf00      	nop
 8010254:	08014adc 	.word	0x08014adc
 8010258:	08014afc 	.word	0x08014afc
 801025c:	08014abc 	.word	0x08014abc

08010260 <_write_r>:
 8010260:	b538      	push	{r3, r4, r5, lr}
 8010262:	4d07      	ldr	r5, [pc, #28]	; (8010280 <_write_r+0x20>)
 8010264:	4604      	mov	r4, r0
 8010266:	4608      	mov	r0, r1
 8010268:	4611      	mov	r1, r2
 801026a:	2200      	movs	r2, #0
 801026c:	602a      	str	r2, [r5, #0]
 801026e:	461a      	mov	r2, r3
 8010270:	f7f4 f8e7 	bl	8004442 <_write>
 8010274:	1c43      	adds	r3, r0, #1
 8010276:	d102      	bne.n	801027e <_write_r+0x1e>
 8010278:	682b      	ldr	r3, [r5, #0]
 801027a:	b103      	cbz	r3, 801027e <_write_r+0x1e>
 801027c:	6023      	str	r3, [r4, #0]
 801027e:	bd38      	pop	{r3, r4, r5, pc}
 8010280:	20001898 	.word	0x20001898

08010284 <__swsetup_r>:
 8010284:	4b32      	ldr	r3, [pc, #200]	; (8010350 <__swsetup_r+0xcc>)
 8010286:	b570      	push	{r4, r5, r6, lr}
 8010288:	681d      	ldr	r5, [r3, #0]
 801028a:	4606      	mov	r6, r0
 801028c:	460c      	mov	r4, r1
 801028e:	b125      	cbz	r5, 801029a <__swsetup_r+0x16>
 8010290:	69ab      	ldr	r3, [r5, #24]
 8010292:	b913      	cbnz	r3, 801029a <__swsetup_r+0x16>
 8010294:	4628      	mov	r0, r5
 8010296:	f001 f805 	bl	80112a4 <__sinit>
 801029a:	4b2e      	ldr	r3, [pc, #184]	; (8010354 <__swsetup_r+0xd0>)
 801029c:	429c      	cmp	r4, r3
 801029e:	d10f      	bne.n	80102c0 <__swsetup_r+0x3c>
 80102a0:	686c      	ldr	r4, [r5, #4]
 80102a2:	89a3      	ldrh	r3, [r4, #12]
 80102a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102a8:	0719      	lsls	r1, r3, #28
 80102aa:	d42c      	bmi.n	8010306 <__swsetup_r+0x82>
 80102ac:	06dd      	lsls	r5, r3, #27
 80102ae:	d411      	bmi.n	80102d4 <__swsetup_r+0x50>
 80102b0:	2309      	movs	r3, #9
 80102b2:	6033      	str	r3, [r6, #0]
 80102b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80102b8:	81a3      	strh	r3, [r4, #12]
 80102ba:	f04f 30ff 	mov.w	r0, #4294967295
 80102be:	e03e      	b.n	801033e <__swsetup_r+0xba>
 80102c0:	4b25      	ldr	r3, [pc, #148]	; (8010358 <__swsetup_r+0xd4>)
 80102c2:	429c      	cmp	r4, r3
 80102c4:	d101      	bne.n	80102ca <__swsetup_r+0x46>
 80102c6:	68ac      	ldr	r4, [r5, #8]
 80102c8:	e7eb      	b.n	80102a2 <__swsetup_r+0x1e>
 80102ca:	4b24      	ldr	r3, [pc, #144]	; (801035c <__swsetup_r+0xd8>)
 80102cc:	429c      	cmp	r4, r3
 80102ce:	bf08      	it	eq
 80102d0:	68ec      	ldreq	r4, [r5, #12]
 80102d2:	e7e6      	b.n	80102a2 <__swsetup_r+0x1e>
 80102d4:	0758      	lsls	r0, r3, #29
 80102d6:	d512      	bpl.n	80102fe <__swsetup_r+0x7a>
 80102d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102da:	b141      	cbz	r1, 80102ee <__swsetup_r+0x6a>
 80102dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102e0:	4299      	cmp	r1, r3
 80102e2:	d002      	beq.n	80102ea <__swsetup_r+0x66>
 80102e4:	4630      	mov	r0, r6
 80102e6:	f7fe f881 	bl	800e3ec <_free_r>
 80102ea:	2300      	movs	r3, #0
 80102ec:	6363      	str	r3, [r4, #52]	; 0x34
 80102ee:	89a3      	ldrh	r3, [r4, #12]
 80102f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80102f4:	81a3      	strh	r3, [r4, #12]
 80102f6:	2300      	movs	r3, #0
 80102f8:	6063      	str	r3, [r4, #4]
 80102fa:	6923      	ldr	r3, [r4, #16]
 80102fc:	6023      	str	r3, [r4, #0]
 80102fe:	89a3      	ldrh	r3, [r4, #12]
 8010300:	f043 0308 	orr.w	r3, r3, #8
 8010304:	81a3      	strh	r3, [r4, #12]
 8010306:	6923      	ldr	r3, [r4, #16]
 8010308:	b94b      	cbnz	r3, 801031e <__swsetup_r+0x9a>
 801030a:	89a3      	ldrh	r3, [r4, #12]
 801030c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010314:	d003      	beq.n	801031e <__swsetup_r+0x9a>
 8010316:	4621      	mov	r1, r4
 8010318:	4630      	mov	r0, r6
 801031a:	f001 fc0d 	bl	8011b38 <__smakebuf_r>
 801031e:	89a0      	ldrh	r0, [r4, #12]
 8010320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010324:	f010 0301 	ands.w	r3, r0, #1
 8010328:	d00a      	beq.n	8010340 <__swsetup_r+0xbc>
 801032a:	2300      	movs	r3, #0
 801032c:	60a3      	str	r3, [r4, #8]
 801032e:	6963      	ldr	r3, [r4, #20]
 8010330:	425b      	negs	r3, r3
 8010332:	61a3      	str	r3, [r4, #24]
 8010334:	6923      	ldr	r3, [r4, #16]
 8010336:	b943      	cbnz	r3, 801034a <__swsetup_r+0xc6>
 8010338:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801033c:	d1ba      	bne.n	80102b4 <__swsetup_r+0x30>
 801033e:	bd70      	pop	{r4, r5, r6, pc}
 8010340:	0781      	lsls	r1, r0, #30
 8010342:	bf58      	it	pl
 8010344:	6963      	ldrpl	r3, [r4, #20]
 8010346:	60a3      	str	r3, [r4, #8]
 8010348:	e7f4      	b.n	8010334 <__swsetup_r+0xb0>
 801034a:	2000      	movs	r0, #0
 801034c:	e7f7      	b.n	801033e <__swsetup_r+0xba>
 801034e:	bf00      	nop
 8010350:	20000028 	.word	0x20000028
 8010354:	08014adc 	.word	0x08014adc
 8010358:	08014afc 	.word	0x08014afc
 801035c:	08014abc 	.word	0x08014abc

08010360 <_close_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	4d06      	ldr	r5, [pc, #24]	; (801037c <_close_r+0x1c>)
 8010364:	2300      	movs	r3, #0
 8010366:	4604      	mov	r4, r0
 8010368:	4608      	mov	r0, r1
 801036a:	602b      	str	r3, [r5, #0]
 801036c:	f7f4 f885 	bl	800447a <_close>
 8010370:	1c43      	adds	r3, r0, #1
 8010372:	d102      	bne.n	801037a <_close_r+0x1a>
 8010374:	682b      	ldr	r3, [r5, #0]
 8010376:	b103      	cbz	r3, 801037a <_close_r+0x1a>
 8010378:	6023      	str	r3, [r4, #0]
 801037a:	bd38      	pop	{r3, r4, r5, pc}
 801037c:	20001898 	.word	0x20001898

08010380 <quorem>:
 8010380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010384:	6903      	ldr	r3, [r0, #16]
 8010386:	690c      	ldr	r4, [r1, #16]
 8010388:	42a3      	cmp	r3, r4
 801038a:	4607      	mov	r7, r0
 801038c:	f2c0 8081 	blt.w	8010492 <quorem+0x112>
 8010390:	3c01      	subs	r4, #1
 8010392:	f101 0814 	add.w	r8, r1, #20
 8010396:	f100 0514 	add.w	r5, r0, #20
 801039a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801039e:	9301      	str	r3, [sp, #4]
 80103a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80103a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80103a8:	3301      	adds	r3, #1
 80103aa:	429a      	cmp	r2, r3
 80103ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80103b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80103b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80103b8:	d331      	bcc.n	801041e <quorem+0x9e>
 80103ba:	f04f 0e00 	mov.w	lr, #0
 80103be:	4640      	mov	r0, r8
 80103c0:	46ac      	mov	ip, r5
 80103c2:	46f2      	mov	sl, lr
 80103c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80103c8:	b293      	uxth	r3, r2
 80103ca:	fb06 e303 	mla	r3, r6, r3, lr
 80103ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80103d2:	b29b      	uxth	r3, r3
 80103d4:	ebaa 0303 	sub.w	r3, sl, r3
 80103d8:	0c12      	lsrs	r2, r2, #16
 80103da:	f8dc a000 	ldr.w	sl, [ip]
 80103de:	fb06 e202 	mla	r2, r6, r2, lr
 80103e2:	fa13 f38a 	uxtah	r3, r3, sl
 80103e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80103ea:	fa1f fa82 	uxth.w	sl, r2
 80103ee:	f8dc 2000 	ldr.w	r2, [ip]
 80103f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80103f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010400:	4581      	cmp	r9, r0
 8010402:	f84c 3b04 	str.w	r3, [ip], #4
 8010406:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801040a:	d2db      	bcs.n	80103c4 <quorem+0x44>
 801040c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010410:	b92b      	cbnz	r3, 801041e <quorem+0x9e>
 8010412:	9b01      	ldr	r3, [sp, #4]
 8010414:	3b04      	subs	r3, #4
 8010416:	429d      	cmp	r5, r3
 8010418:	461a      	mov	r2, r3
 801041a:	d32e      	bcc.n	801047a <quorem+0xfa>
 801041c:	613c      	str	r4, [r7, #16]
 801041e:	4638      	mov	r0, r7
 8010420:	f001 feb0 	bl	8012184 <__mcmp>
 8010424:	2800      	cmp	r0, #0
 8010426:	db24      	blt.n	8010472 <quorem+0xf2>
 8010428:	3601      	adds	r6, #1
 801042a:	4628      	mov	r0, r5
 801042c:	f04f 0c00 	mov.w	ip, #0
 8010430:	f858 2b04 	ldr.w	r2, [r8], #4
 8010434:	f8d0 e000 	ldr.w	lr, [r0]
 8010438:	b293      	uxth	r3, r2
 801043a:	ebac 0303 	sub.w	r3, ip, r3
 801043e:	0c12      	lsrs	r2, r2, #16
 8010440:	fa13 f38e 	uxtah	r3, r3, lr
 8010444:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010448:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801044c:	b29b      	uxth	r3, r3
 801044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010452:	45c1      	cmp	r9, r8
 8010454:	f840 3b04 	str.w	r3, [r0], #4
 8010458:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801045c:	d2e8      	bcs.n	8010430 <quorem+0xb0>
 801045e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010466:	b922      	cbnz	r2, 8010472 <quorem+0xf2>
 8010468:	3b04      	subs	r3, #4
 801046a:	429d      	cmp	r5, r3
 801046c:	461a      	mov	r2, r3
 801046e:	d30a      	bcc.n	8010486 <quorem+0x106>
 8010470:	613c      	str	r4, [r7, #16]
 8010472:	4630      	mov	r0, r6
 8010474:	b003      	add	sp, #12
 8010476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801047a:	6812      	ldr	r2, [r2, #0]
 801047c:	3b04      	subs	r3, #4
 801047e:	2a00      	cmp	r2, #0
 8010480:	d1cc      	bne.n	801041c <quorem+0x9c>
 8010482:	3c01      	subs	r4, #1
 8010484:	e7c7      	b.n	8010416 <quorem+0x96>
 8010486:	6812      	ldr	r2, [r2, #0]
 8010488:	3b04      	subs	r3, #4
 801048a:	2a00      	cmp	r2, #0
 801048c:	d1f0      	bne.n	8010470 <quorem+0xf0>
 801048e:	3c01      	subs	r4, #1
 8010490:	e7eb      	b.n	801046a <quorem+0xea>
 8010492:	2000      	movs	r0, #0
 8010494:	e7ee      	b.n	8010474 <quorem+0xf4>
	...

08010498 <_dtoa_r>:
 8010498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801049c:	ed2d 8b02 	vpush	{d8}
 80104a0:	ec57 6b10 	vmov	r6, r7, d0
 80104a4:	b095      	sub	sp, #84	; 0x54
 80104a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80104a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80104ac:	9105      	str	r1, [sp, #20]
 80104ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80104b2:	4604      	mov	r4, r0
 80104b4:	9209      	str	r2, [sp, #36]	; 0x24
 80104b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80104b8:	b975      	cbnz	r5, 80104d8 <_dtoa_r+0x40>
 80104ba:	2010      	movs	r0, #16
 80104bc:	f7fd ff78 	bl	800e3b0 <malloc>
 80104c0:	4602      	mov	r2, r0
 80104c2:	6260      	str	r0, [r4, #36]	; 0x24
 80104c4:	b920      	cbnz	r0, 80104d0 <_dtoa_r+0x38>
 80104c6:	4bb2      	ldr	r3, [pc, #712]	; (8010790 <_dtoa_r+0x2f8>)
 80104c8:	21ea      	movs	r1, #234	; 0xea
 80104ca:	48b2      	ldr	r0, [pc, #712]	; (8010794 <_dtoa_r+0x2fc>)
 80104cc:	f002 ff4c 	bl	8013368 <__assert_func>
 80104d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80104d4:	6005      	str	r5, [r0, #0]
 80104d6:	60c5      	str	r5, [r0, #12]
 80104d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104da:	6819      	ldr	r1, [r3, #0]
 80104dc:	b151      	cbz	r1, 80104f4 <_dtoa_r+0x5c>
 80104de:	685a      	ldr	r2, [r3, #4]
 80104e0:	604a      	str	r2, [r1, #4]
 80104e2:	2301      	movs	r3, #1
 80104e4:	4093      	lsls	r3, r2
 80104e6:	608b      	str	r3, [r1, #8]
 80104e8:	4620      	mov	r0, r4
 80104ea:	f001 fbc3 	bl	8011c74 <_Bfree>
 80104ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104f0:	2200      	movs	r2, #0
 80104f2:	601a      	str	r2, [r3, #0]
 80104f4:	1e3b      	subs	r3, r7, #0
 80104f6:	bfb9      	ittee	lt
 80104f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80104fc:	9303      	strlt	r3, [sp, #12]
 80104fe:	2300      	movge	r3, #0
 8010500:	f8c8 3000 	strge.w	r3, [r8]
 8010504:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010508:	4ba3      	ldr	r3, [pc, #652]	; (8010798 <_dtoa_r+0x300>)
 801050a:	bfbc      	itt	lt
 801050c:	2201      	movlt	r2, #1
 801050e:	f8c8 2000 	strlt.w	r2, [r8]
 8010512:	ea33 0309 	bics.w	r3, r3, r9
 8010516:	d11b      	bne.n	8010550 <_dtoa_r+0xb8>
 8010518:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801051a:	f242 730f 	movw	r3, #9999	; 0x270f
 801051e:	6013      	str	r3, [r2, #0]
 8010520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010524:	4333      	orrs	r3, r6
 8010526:	f000 857a 	beq.w	801101e <_dtoa_r+0xb86>
 801052a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801052c:	b963      	cbnz	r3, 8010548 <_dtoa_r+0xb0>
 801052e:	4b9b      	ldr	r3, [pc, #620]	; (801079c <_dtoa_r+0x304>)
 8010530:	e024      	b.n	801057c <_dtoa_r+0xe4>
 8010532:	4b9b      	ldr	r3, [pc, #620]	; (80107a0 <_dtoa_r+0x308>)
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	3308      	adds	r3, #8
 8010538:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801053a:	6013      	str	r3, [r2, #0]
 801053c:	9800      	ldr	r0, [sp, #0]
 801053e:	b015      	add	sp, #84	; 0x54
 8010540:	ecbd 8b02 	vpop	{d8}
 8010544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010548:	4b94      	ldr	r3, [pc, #592]	; (801079c <_dtoa_r+0x304>)
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	3303      	adds	r3, #3
 801054e:	e7f3      	b.n	8010538 <_dtoa_r+0xa0>
 8010550:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010554:	2200      	movs	r2, #0
 8010556:	ec51 0b17 	vmov	r0, r1, d7
 801055a:	2300      	movs	r3, #0
 801055c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010560:	f7f0 fad2 	bl	8000b08 <__aeabi_dcmpeq>
 8010564:	4680      	mov	r8, r0
 8010566:	b158      	cbz	r0, 8010580 <_dtoa_r+0xe8>
 8010568:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801056a:	2301      	movs	r3, #1
 801056c:	6013      	str	r3, [r2, #0]
 801056e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010570:	2b00      	cmp	r3, #0
 8010572:	f000 8551 	beq.w	8011018 <_dtoa_r+0xb80>
 8010576:	488b      	ldr	r0, [pc, #556]	; (80107a4 <_dtoa_r+0x30c>)
 8010578:	6018      	str	r0, [r3, #0]
 801057a:	1e43      	subs	r3, r0, #1
 801057c:	9300      	str	r3, [sp, #0]
 801057e:	e7dd      	b.n	801053c <_dtoa_r+0xa4>
 8010580:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010584:	aa12      	add	r2, sp, #72	; 0x48
 8010586:	a913      	add	r1, sp, #76	; 0x4c
 8010588:	4620      	mov	r0, r4
 801058a:	f001 ff1b 	bl	80123c4 <__d2b>
 801058e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010592:	4683      	mov	fp, r0
 8010594:	2d00      	cmp	r5, #0
 8010596:	d07c      	beq.n	8010692 <_dtoa_r+0x1fa>
 8010598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801059a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801059e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80105a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80105a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80105aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80105ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80105b2:	4b7d      	ldr	r3, [pc, #500]	; (80107a8 <_dtoa_r+0x310>)
 80105b4:	2200      	movs	r2, #0
 80105b6:	4630      	mov	r0, r6
 80105b8:	4639      	mov	r1, r7
 80105ba:	f7ef fe85 	bl	80002c8 <__aeabi_dsub>
 80105be:	a36e      	add	r3, pc, #440	; (adr r3, 8010778 <_dtoa_r+0x2e0>)
 80105c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c4:	f7f0 f838 	bl	8000638 <__aeabi_dmul>
 80105c8:	a36d      	add	r3, pc, #436	; (adr r3, 8010780 <_dtoa_r+0x2e8>)
 80105ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ce:	f7ef fe7d 	bl	80002cc <__adddf3>
 80105d2:	4606      	mov	r6, r0
 80105d4:	4628      	mov	r0, r5
 80105d6:	460f      	mov	r7, r1
 80105d8:	f7ef ffc4 	bl	8000564 <__aeabi_i2d>
 80105dc:	a36a      	add	r3, pc, #424	; (adr r3, 8010788 <_dtoa_r+0x2f0>)
 80105de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e2:	f7f0 f829 	bl	8000638 <__aeabi_dmul>
 80105e6:	4602      	mov	r2, r0
 80105e8:	460b      	mov	r3, r1
 80105ea:	4630      	mov	r0, r6
 80105ec:	4639      	mov	r1, r7
 80105ee:	f7ef fe6d 	bl	80002cc <__adddf3>
 80105f2:	4606      	mov	r6, r0
 80105f4:	460f      	mov	r7, r1
 80105f6:	f7f0 facf 	bl	8000b98 <__aeabi_d2iz>
 80105fa:	2200      	movs	r2, #0
 80105fc:	4682      	mov	sl, r0
 80105fe:	2300      	movs	r3, #0
 8010600:	4630      	mov	r0, r6
 8010602:	4639      	mov	r1, r7
 8010604:	f7f0 fa8a 	bl	8000b1c <__aeabi_dcmplt>
 8010608:	b148      	cbz	r0, 801061e <_dtoa_r+0x186>
 801060a:	4650      	mov	r0, sl
 801060c:	f7ef ffaa 	bl	8000564 <__aeabi_i2d>
 8010610:	4632      	mov	r2, r6
 8010612:	463b      	mov	r3, r7
 8010614:	f7f0 fa78 	bl	8000b08 <__aeabi_dcmpeq>
 8010618:	b908      	cbnz	r0, 801061e <_dtoa_r+0x186>
 801061a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801061e:	f1ba 0f16 	cmp.w	sl, #22
 8010622:	d854      	bhi.n	80106ce <_dtoa_r+0x236>
 8010624:	4b61      	ldr	r3, [pc, #388]	; (80107ac <_dtoa_r+0x314>)
 8010626:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801062a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010632:	f7f0 fa73 	bl	8000b1c <__aeabi_dcmplt>
 8010636:	2800      	cmp	r0, #0
 8010638:	d04b      	beq.n	80106d2 <_dtoa_r+0x23a>
 801063a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801063e:	2300      	movs	r3, #0
 8010640:	930e      	str	r3, [sp, #56]	; 0x38
 8010642:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010644:	1b5d      	subs	r5, r3, r5
 8010646:	1e6b      	subs	r3, r5, #1
 8010648:	9304      	str	r3, [sp, #16]
 801064a:	bf43      	ittte	mi
 801064c:	2300      	movmi	r3, #0
 801064e:	f1c5 0801 	rsbmi	r8, r5, #1
 8010652:	9304      	strmi	r3, [sp, #16]
 8010654:	f04f 0800 	movpl.w	r8, #0
 8010658:	f1ba 0f00 	cmp.w	sl, #0
 801065c:	db3b      	blt.n	80106d6 <_dtoa_r+0x23e>
 801065e:	9b04      	ldr	r3, [sp, #16]
 8010660:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010664:	4453      	add	r3, sl
 8010666:	9304      	str	r3, [sp, #16]
 8010668:	2300      	movs	r3, #0
 801066a:	9306      	str	r3, [sp, #24]
 801066c:	9b05      	ldr	r3, [sp, #20]
 801066e:	2b09      	cmp	r3, #9
 8010670:	d869      	bhi.n	8010746 <_dtoa_r+0x2ae>
 8010672:	2b05      	cmp	r3, #5
 8010674:	bfc4      	itt	gt
 8010676:	3b04      	subgt	r3, #4
 8010678:	9305      	strgt	r3, [sp, #20]
 801067a:	9b05      	ldr	r3, [sp, #20]
 801067c:	f1a3 0302 	sub.w	r3, r3, #2
 8010680:	bfcc      	ite	gt
 8010682:	2500      	movgt	r5, #0
 8010684:	2501      	movle	r5, #1
 8010686:	2b03      	cmp	r3, #3
 8010688:	d869      	bhi.n	801075e <_dtoa_r+0x2c6>
 801068a:	e8df f003 	tbb	[pc, r3]
 801068e:	4e2c      	.short	0x4e2c
 8010690:	5a4c      	.short	0x5a4c
 8010692:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8010696:	441d      	add	r5, r3
 8010698:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801069c:	2b20      	cmp	r3, #32
 801069e:	bfc1      	itttt	gt
 80106a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80106a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80106a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80106ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80106b0:	bfda      	itte	le
 80106b2:	f1c3 0320 	rsble	r3, r3, #32
 80106b6:	fa06 f003 	lslle.w	r0, r6, r3
 80106ba:	4318      	orrgt	r0, r3
 80106bc:	f7ef ff42 	bl	8000544 <__aeabi_ui2d>
 80106c0:	2301      	movs	r3, #1
 80106c2:	4606      	mov	r6, r0
 80106c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80106c8:	3d01      	subs	r5, #1
 80106ca:	9310      	str	r3, [sp, #64]	; 0x40
 80106cc:	e771      	b.n	80105b2 <_dtoa_r+0x11a>
 80106ce:	2301      	movs	r3, #1
 80106d0:	e7b6      	b.n	8010640 <_dtoa_r+0x1a8>
 80106d2:	900e      	str	r0, [sp, #56]	; 0x38
 80106d4:	e7b5      	b.n	8010642 <_dtoa_r+0x1aa>
 80106d6:	f1ca 0300 	rsb	r3, sl, #0
 80106da:	9306      	str	r3, [sp, #24]
 80106dc:	2300      	movs	r3, #0
 80106de:	eba8 080a 	sub.w	r8, r8, sl
 80106e2:	930d      	str	r3, [sp, #52]	; 0x34
 80106e4:	e7c2      	b.n	801066c <_dtoa_r+0x1d4>
 80106e6:	2300      	movs	r3, #0
 80106e8:	9308      	str	r3, [sp, #32]
 80106ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	dc39      	bgt.n	8010764 <_dtoa_r+0x2cc>
 80106f0:	f04f 0901 	mov.w	r9, #1
 80106f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80106f8:	464b      	mov	r3, r9
 80106fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80106fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010700:	2200      	movs	r2, #0
 8010702:	6042      	str	r2, [r0, #4]
 8010704:	2204      	movs	r2, #4
 8010706:	f102 0614 	add.w	r6, r2, #20
 801070a:	429e      	cmp	r6, r3
 801070c:	6841      	ldr	r1, [r0, #4]
 801070e:	d92f      	bls.n	8010770 <_dtoa_r+0x2d8>
 8010710:	4620      	mov	r0, r4
 8010712:	f001 fa6f 	bl	8011bf4 <_Balloc>
 8010716:	9000      	str	r0, [sp, #0]
 8010718:	2800      	cmp	r0, #0
 801071a:	d14b      	bne.n	80107b4 <_dtoa_r+0x31c>
 801071c:	4b24      	ldr	r3, [pc, #144]	; (80107b0 <_dtoa_r+0x318>)
 801071e:	4602      	mov	r2, r0
 8010720:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010724:	e6d1      	b.n	80104ca <_dtoa_r+0x32>
 8010726:	2301      	movs	r3, #1
 8010728:	e7de      	b.n	80106e8 <_dtoa_r+0x250>
 801072a:	2300      	movs	r3, #0
 801072c:	9308      	str	r3, [sp, #32]
 801072e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010730:	eb0a 0903 	add.w	r9, sl, r3
 8010734:	f109 0301 	add.w	r3, r9, #1
 8010738:	2b01      	cmp	r3, #1
 801073a:	9301      	str	r3, [sp, #4]
 801073c:	bfb8      	it	lt
 801073e:	2301      	movlt	r3, #1
 8010740:	e7dd      	b.n	80106fe <_dtoa_r+0x266>
 8010742:	2301      	movs	r3, #1
 8010744:	e7f2      	b.n	801072c <_dtoa_r+0x294>
 8010746:	2501      	movs	r5, #1
 8010748:	2300      	movs	r3, #0
 801074a:	9305      	str	r3, [sp, #20]
 801074c:	9508      	str	r5, [sp, #32]
 801074e:	f04f 39ff 	mov.w	r9, #4294967295
 8010752:	2200      	movs	r2, #0
 8010754:	f8cd 9004 	str.w	r9, [sp, #4]
 8010758:	2312      	movs	r3, #18
 801075a:	9209      	str	r2, [sp, #36]	; 0x24
 801075c:	e7cf      	b.n	80106fe <_dtoa_r+0x266>
 801075e:	2301      	movs	r3, #1
 8010760:	9308      	str	r3, [sp, #32]
 8010762:	e7f4      	b.n	801074e <_dtoa_r+0x2b6>
 8010764:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010768:	f8cd 9004 	str.w	r9, [sp, #4]
 801076c:	464b      	mov	r3, r9
 801076e:	e7c6      	b.n	80106fe <_dtoa_r+0x266>
 8010770:	3101      	adds	r1, #1
 8010772:	6041      	str	r1, [r0, #4]
 8010774:	0052      	lsls	r2, r2, #1
 8010776:	e7c6      	b.n	8010706 <_dtoa_r+0x26e>
 8010778:	636f4361 	.word	0x636f4361
 801077c:	3fd287a7 	.word	0x3fd287a7
 8010780:	8b60c8b3 	.word	0x8b60c8b3
 8010784:	3fc68a28 	.word	0x3fc68a28
 8010788:	509f79fb 	.word	0x509f79fb
 801078c:	3fd34413 	.word	0x3fd34413
 8010790:	08014a35 	.word	0x08014a35
 8010794:	08014a4c 	.word	0x08014a4c
 8010798:	7ff00000 	.word	0x7ff00000
 801079c:	08014a31 	.word	0x08014a31
 80107a0:	08014a28 	.word	0x08014a28
 80107a4:	08014d12 	.word	0x08014d12
 80107a8:	3ff80000 	.word	0x3ff80000
 80107ac:	08014c28 	.word	0x08014c28
 80107b0:	08014aab 	.word	0x08014aab
 80107b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107b6:	9a00      	ldr	r2, [sp, #0]
 80107b8:	601a      	str	r2, [r3, #0]
 80107ba:	9b01      	ldr	r3, [sp, #4]
 80107bc:	2b0e      	cmp	r3, #14
 80107be:	f200 80ad 	bhi.w	801091c <_dtoa_r+0x484>
 80107c2:	2d00      	cmp	r5, #0
 80107c4:	f000 80aa 	beq.w	801091c <_dtoa_r+0x484>
 80107c8:	f1ba 0f00 	cmp.w	sl, #0
 80107cc:	dd36      	ble.n	801083c <_dtoa_r+0x3a4>
 80107ce:	4ac3      	ldr	r2, [pc, #780]	; (8010adc <_dtoa_r+0x644>)
 80107d0:	f00a 030f 	and.w	r3, sl, #15
 80107d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80107d8:	ed93 7b00 	vldr	d7, [r3]
 80107dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80107e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80107e4:	eeb0 8a47 	vmov.f32	s16, s14
 80107e8:	eef0 8a67 	vmov.f32	s17, s15
 80107ec:	d016      	beq.n	801081c <_dtoa_r+0x384>
 80107ee:	4bbc      	ldr	r3, [pc, #752]	; (8010ae0 <_dtoa_r+0x648>)
 80107f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80107f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80107f8:	f7f0 f848 	bl	800088c <__aeabi_ddiv>
 80107fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010800:	f007 070f 	and.w	r7, r7, #15
 8010804:	2503      	movs	r5, #3
 8010806:	4eb6      	ldr	r6, [pc, #728]	; (8010ae0 <_dtoa_r+0x648>)
 8010808:	b957      	cbnz	r7, 8010820 <_dtoa_r+0x388>
 801080a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801080e:	ec53 2b18 	vmov	r2, r3, d8
 8010812:	f7f0 f83b 	bl	800088c <__aeabi_ddiv>
 8010816:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801081a:	e029      	b.n	8010870 <_dtoa_r+0x3d8>
 801081c:	2502      	movs	r5, #2
 801081e:	e7f2      	b.n	8010806 <_dtoa_r+0x36e>
 8010820:	07f9      	lsls	r1, r7, #31
 8010822:	d508      	bpl.n	8010836 <_dtoa_r+0x39e>
 8010824:	ec51 0b18 	vmov	r0, r1, d8
 8010828:	e9d6 2300 	ldrd	r2, r3, [r6]
 801082c:	f7ef ff04 	bl	8000638 <__aeabi_dmul>
 8010830:	ec41 0b18 	vmov	d8, r0, r1
 8010834:	3501      	adds	r5, #1
 8010836:	107f      	asrs	r7, r7, #1
 8010838:	3608      	adds	r6, #8
 801083a:	e7e5      	b.n	8010808 <_dtoa_r+0x370>
 801083c:	f000 80a6 	beq.w	801098c <_dtoa_r+0x4f4>
 8010840:	f1ca 0600 	rsb	r6, sl, #0
 8010844:	4ba5      	ldr	r3, [pc, #660]	; (8010adc <_dtoa_r+0x644>)
 8010846:	4fa6      	ldr	r7, [pc, #664]	; (8010ae0 <_dtoa_r+0x648>)
 8010848:	f006 020f 	and.w	r2, r6, #15
 801084c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010854:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010858:	f7ef feee 	bl	8000638 <__aeabi_dmul>
 801085c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010860:	1136      	asrs	r6, r6, #4
 8010862:	2300      	movs	r3, #0
 8010864:	2502      	movs	r5, #2
 8010866:	2e00      	cmp	r6, #0
 8010868:	f040 8085 	bne.w	8010976 <_dtoa_r+0x4de>
 801086c:	2b00      	cmp	r3, #0
 801086e:	d1d2      	bne.n	8010816 <_dtoa_r+0x37e>
 8010870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010872:	2b00      	cmp	r3, #0
 8010874:	f000 808c 	beq.w	8010990 <_dtoa_r+0x4f8>
 8010878:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801087c:	4b99      	ldr	r3, [pc, #612]	; (8010ae4 <_dtoa_r+0x64c>)
 801087e:	2200      	movs	r2, #0
 8010880:	4630      	mov	r0, r6
 8010882:	4639      	mov	r1, r7
 8010884:	f7f0 f94a 	bl	8000b1c <__aeabi_dcmplt>
 8010888:	2800      	cmp	r0, #0
 801088a:	f000 8081 	beq.w	8010990 <_dtoa_r+0x4f8>
 801088e:	9b01      	ldr	r3, [sp, #4]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d07d      	beq.n	8010990 <_dtoa_r+0x4f8>
 8010894:	f1b9 0f00 	cmp.w	r9, #0
 8010898:	dd3c      	ble.n	8010914 <_dtoa_r+0x47c>
 801089a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801089e:	9307      	str	r3, [sp, #28]
 80108a0:	2200      	movs	r2, #0
 80108a2:	4b91      	ldr	r3, [pc, #580]	; (8010ae8 <_dtoa_r+0x650>)
 80108a4:	4630      	mov	r0, r6
 80108a6:	4639      	mov	r1, r7
 80108a8:	f7ef fec6 	bl	8000638 <__aeabi_dmul>
 80108ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108b0:	3501      	adds	r5, #1
 80108b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80108b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80108ba:	4628      	mov	r0, r5
 80108bc:	f7ef fe52 	bl	8000564 <__aeabi_i2d>
 80108c0:	4632      	mov	r2, r6
 80108c2:	463b      	mov	r3, r7
 80108c4:	f7ef feb8 	bl	8000638 <__aeabi_dmul>
 80108c8:	4b88      	ldr	r3, [pc, #544]	; (8010aec <_dtoa_r+0x654>)
 80108ca:	2200      	movs	r2, #0
 80108cc:	f7ef fcfe 	bl	80002cc <__adddf3>
 80108d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80108d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108d8:	9303      	str	r3, [sp, #12]
 80108da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d15c      	bne.n	801099a <_dtoa_r+0x502>
 80108e0:	4b83      	ldr	r3, [pc, #524]	; (8010af0 <_dtoa_r+0x658>)
 80108e2:	2200      	movs	r2, #0
 80108e4:	4630      	mov	r0, r6
 80108e6:	4639      	mov	r1, r7
 80108e8:	f7ef fcee 	bl	80002c8 <__aeabi_dsub>
 80108ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80108f0:	4606      	mov	r6, r0
 80108f2:	460f      	mov	r7, r1
 80108f4:	f7f0 f930 	bl	8000b58 <__aeabi_dcmpgt>
 80108f8:	2800      	cmp	r0, #0
 80108fa:	f040 8296 	bne.w	8010e2a <_dtoa_r+0x992>
 80108fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010902:	4630      	mov	r0, r6
 8010904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010908:	4639      	mov	r1, r7
 801090a:	f7f0 f907 	bl	8000b1c <__aeabi_dcmplt>
 801090e:	2800      	cmp	r0, #0
 8010910:	f040 8288 	bne.w	8010e24 <_dtoa_r+0x98c>
 8010914:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010918:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801091c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801091e:	2b00      	cmp	r3, #0
 8010920:	f2c0 8158 	blt.w	8010bd4 <_dtoa_r+0x73c>
 8010924:	f1ba 0f0e 	cmp.w	sl, #14
 8010928:	f300 8154 	bgt.w	8010bd4 <_dtoa_r+0x73c>
 801092c:	4b6b      	ldr	r3, [pc, #428]	; (8010adc <_dtoa_r+0x644>)
 801092e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010932:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010938:	2b00      	cmp	r3, #0
 801093a:	f280 80e3 	bge.w	8010b04 <_dtoa_r+0x66c>
 801093e:	9b01      	ldr	r3, [sp, #4]
 8010940:	2b00      	cmp	r3, #0
 8010942:	f300 80df 	bgt.w	8010b04 <_dtoa_r+0x66c>
 8010946:	f040 826d 	bne.w	8010e24 <_dtoa_r+0x98c>
 801094a:	4b69      	ldr	r3, [pc, #420]	; (8010af0 <_dtoa_r+0x658>)
 801094c:	2200      	movs	r2, #0
 801094e:	4640      	mov	r0, r8
 8010950:	4649      	mov	r1, r9
 8010952:	f7ef fe71 	bl	8000638 <__aeabi_dmul>
 8010956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801095a:	f7f0 f8f3 	bl	8000b44 <__aeabi_dcmpge>
 801095e:	9e01      	ldr	r6, [sp, #4]
 8010960:	4637      	mov	r7, r6
 8010962:	2800      	cmp	r0, #0
 8010964:	f040 8243 	bne.w	8010dee <_dtoa_r+0x956>
 8010968:	9d00      	ldr	r5, [sp, #0]
 801096a:	2331      	movs	r3, #49	; 0x31
 801096c:	f805 3b01 	strb.w	r3, [r5], #1
 8010970:	f10a 0a01 	add.w	sl, sl, #1
 8010974:	e23f      	b.n	8010df6 <_dtoa_r+0x95e>
 8010976:	07f2      	lsls	r2, r6, #31
 8010978:	d505      	bpl.n	8010986 <_dtoa_r+0x4ee>
 801097a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801097e:	f7ef fe5b 	bl	8000638 <__aeabi_dmul>
 8010982:	3501      	adds	r5, #1
 8010984:	2301      	movs	r3, #1
 8010986:	1076      	asrs	r6, r6, #1
 8010988:	3708      	adds	r7, #8
 801098a:	e76c      	b.n	8010866 <_dtoa_r+0x3ce>
 801098c:	2502      	movs	r5, #2
 801098e:	e76f      	b.n	8010870 <_dtoa_r+0x3d8>
 8010990:	9b01      	ldr	r3, [sp, #4]
 8010992:	f8cd a01c 	str.w	sl, [sp, #28]
 8010996:	930c      	str	r3, [sp, #48]	; 0x30
 8010998:	e78d      	b.n	80108b6 <_dtoa_r+0x41e>
 801099a:	9900      	ldr	r1, [sp, #0]
 801099c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801099e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109a0:	4b4e      	ldr	r3, [pc, #312]	; (8010adc <_dtoa_r+0x644>)
 80109a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80109a6:	4401      	add	r1, r0
 80109a8:	9102      	str	r1, [sp, #8]
 80109aa:	9908      	ldr	r1, [sp, #32]
 80109ac:	eeb0 8a47 	vmov.f32	s16, s14
 80109b0:	eef0 8a67 	vmov.f32	s17, s15
 80109b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80109bc:	2900      	cmp	r1, #0
 80109be:	d045      	beq.n	8010a4c <_dtoa_r+0x5b4>
 80109c0:	494c      	ldr	r1, [pc, #304]	; (8010af4 <_dtoa_r+0x65c>)
 80109c2:	2000      	movs	r0, #0
 80109c4:	f7ef ff62 	bl	800088c <__aeabi_ddiv>
 80109c8:	ec53 2b18 	vmov	r2, r3, d8
 80109cc:	f7ef fc7c 	bl	80002c8 <__aeabi_dsub>
 80109d0:	9d00      	ldr	r5, [sp, #0]
 80109d2:	ec41 0b18 	vmov	d8, r0, r1
 80109d6:	4639      	mov	r1, r7
 80109d8:	4630      	mov	r0, r6
 80109da:	f7f0 f8dd 	bl	8000b98 <__aeabi_d2iz>
 80109de:	900c      	str	r0, [sp, #48]	; 0x30
 80109e0:	f7ef fdc0 	bl	8000564 <__aeabi_i2d>
 80109e4:	4602      	mov	r2, r0
 80109e6:	460b      	mov	r3, r1
 80109e8:	4630      	mov	r0, r6
 80109ea:	4639      	mov	r1, r7
 80109ec:	f7ef fc6c 	bl	80002c8 <__aeabi_dsub>
 80109f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109f2:	3330      	adds	r3, #48	; 0x30
 80109f4:	f805 3b01 	strb.w	r3, [r5], #1
 80109f8:	ec53 2b18 	vmov	r2, r3, d8
 80109fc:	4606      	mov	r6, r0
 80109fe:	460f      	mov	r7, r1
 8010a00:	f7f0 f88c 	bl	8000b1c <__aeabi_dcmplt>
 8010a04:	2800      	cmp	r0, #0
 8010a06:	d165      	bne.n	8010ad4 <_dtoa_r+0x63c>
 8010a08:	4632      	mov	r2, r6
 8010a0a:	463b      	mov	r3, r7
 8010a0c:	4935      	ldr	r1, [pc, #212]	; (8010ae4 <_dtoa_r+0x64c>)
 8010a0e:	2000      	movs	r0, #0
 8010a10:	f7ef fc5a 	bl	80002c8 <__aeabi_dsub>
 8010a14:	ec53 2b18 	vmov	r2, r3, d8
 8010a18:	f7f0 f880 	bl	8000b1c <__aeabi_dcmplt>
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	f040 80b9 	bne.w	8010b94 <_dtoa_r+0x6fc>
 8010a22:	9b02      	ldr	r3, [sp, #8]
 8010a24:	429d      	cmp	r5, r3
 8010a26:	f43f af75 	beq.w	8010914 <_dtoa_r+0x47c>
 8010a2a:	4b2f      	ldr	r3, [pc, #188]	; (8010ae8 <_dtoa_r+0x650>)
 8010a2c:	ec51 0b18 	vmov	r0, r1, d8
 8010a30:	2200      	movs	r2, #0
 8010a32:	f7ef fe01 	bl	8000638 <__aeabi_dmul>
 8010a36:	4b2c      	ldr	r3, [pc, #176]	; (8010ae8 <_dtoa_r+0x650>)
 8010a38:	ec41 0b18 	vmov	d8, r0, r1
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	4630      	mov	r0, r6
 8010a40:	4639      	mov	r1, r7
 8010a42:	f7ef fdf9 	bl	8000638 <__aeabi_dmul>
 8010a46:	4606      	mov	r6, r0
 8010a48:	460f      	mov	r7, r1
 8010a4a:	e7c4      	b.n	80109d6 <_dtoa_r+0x53e>
 8010a4c:	ec51 0b17 	vmov	r0, r1, d7
 8010a50:	f7ef fdf2 	bl	8000638 <__aeabi_dmul>
 8010a54:	9b02      	ldr	r3, [sp, #8]
 8010a56:	9d00      	ldr	r5, [sp, #0]
 8010a58:	930c      	str	r3, [sp, #48]	; 0x30
 8010a5a:	ec41 0b18 	vmov	d8, r0, r1
 8010a5e:	4639      	mov	r1, r7
 8010a60:	4630      	mov	r0, r6
 8010a62:	f7f0 f899 	bl	8000b98 <__aeabi_d2iz>
 8010a66:	9011      	str	r0, [sp, #68]	; 0x44
 8010a68:	f7ef fd7c 	bl	8000564 <__aeabi_i2d>
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	460b      	mov	r3, r1
 8010a70:	4630      	mov	r0, r6
 8010a72:	4639      	mov	r1, r7
 8010a74:	f7ef fc28 	bl	80002c8 <__aeabi_dsub>
 8010a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010a7a:	3330      	adds	r3, #48	; 0x30
 8010a7c:	f805 3b01 	strb.w	r3, [r5], #1
 8010a80:	9b02      	ldr	r3, [sp, #8]
 8010a82:	429d      	cmp	r5, r3
 8010a84:	4606      	mov	r6, r0
 8010a86:	460f      	mov	r7, r1
 8010a88:	f04f 0200 	mov.w	r2, #0
 8010a8c:	d134      	bne.n	8010af8 <_dtoa_r+0x660>
 8010a8e:	4b19      	ldr	r3, [pc, #100]	; (8010af4 <_dtoa_r+0x65c>)
 8010a90:	ec51 0b18 	vmov	r0, r1, d8
 8010a94:	f7ef fc1a 	bl	80002cc <__adddf3>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	4630      	mov	r0, r6
 8010a9e:	4639      	mov	r1, r7
 8010aa0:	f7f0 f85a 	bl	8000b58 <__aeabi_dcmpgt>
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	d175      	bne.n	8010b94 <_dtoa_r+0x6fc>
 8010aa8:	ec53 2b18 	vmov	r2, r3, d8
 8010aac:	4911      	ldr	r1, [pc, #68]	; (8010af4 <_dtoa_r+0x65c>)
 8010aae:	2000      	movs	r0, #0
 8010ab0:	f7ef fc0a 	bl	80002c8 <__aeabi_dsub>
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	460b      	mov	r3, r1
 8010ab8:	4630      	mov	r0, r6
 8010aba:	4639      	mov	r1, r7
 8010abc:	f7f0 f82e 	bl	8000b1c <__aeabi_dcmplt>
 8010ac0:	2800      	cmp	r0, #0
 8010ac2:	f43f af27 	beq.w	8010914 <_dtoa_r+0x47c>
 8010ac6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010ac8:	1e6b      	subs	r3, r5, #1
 8010aca:	930c      	str	r3, [sp, #48]	; 0x30
 8010acc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010ad0:	2b30      	cmp	r3, #48	; 0x30
 8010ad2:	d0f8      	beq.n	8010ac6 <_dtoa_r+0x62e>
 8010ad4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010ad8:	e04a      	b.n	8010b70 <_dtoa_r+0x6d8>
 8010ada:	bf00      	nop
 8010adc:	08014c28 	.word	0x08014c28
 8010ae0:	08014c00 	.word	0x08014c00
 8010ae4:	3ff00000 	.word	0x3ff00000
 8010ae8:	40240000 	.word	0x40240000
 8010aec:	401c0000 	.word	0x401c0000
 8010af0:	40140000 	.word	0x40140000
 8010af4:	3fe00000 	.word	0x3fe00000
 8010af8:	4baf      	ldr	r3, [pc, #700]	; (8010db8 <_dtoa_r+0x920>)
 8010afa:	f7ef fd9d 	bl	8000638 <__aeabi_dmul>
 8010afe:	4606      	mov	r6, r0
 8010b00:	460f      	mov	r7, r1
 8010b02:	e7ac      	b.n	8010a5e <_dtoa_r+0x5c6>
 8010b04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010b08:	9d00      	ldr	r5, [sp, #0]
 8010b0a:	4642      	mov	r2, r8
 8010b0c:	464b      	mov	r3, r9
 8010b0e:	4630      	mov	r0, r6
 8010b10:	4639      	mov	r1, r7
 8010b12:	f7ef febb 	bl	800088c <__aeabi_ddiv>
 8010b16:	f7f0 f83f 	bl	8000b98 <__aeabi_d2iz>
 8010b1a:	9002      	str	r0, [sp, #8]
 8010b1c:	f7ef fd22 	bl	8000564 <__aeabi_i2d>
 8010b20:	4642      	mov	r2, r8
 8010b22:	464b      	mov	r3, r9
 8010b24:	f7ef fd88 	bl	8000638 <__aeabi_dmul>
 8010b28:	4602      	mov	r2, r0
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	4630      	mov	r0, r6
 8010b2e:	4639      	mov	r1, r7
 8010b30:	f7ef fbca 	bl	80002c8 <__aeabi_dsub>
 8010b34:	9e02      	ldr	r6, [sp, #8]
 8010b36:	9f01      	ldr	r7, [sp, #4]
 8010b38:	3630      	adds	r6, #48	; 0x30
 8010b3a:	f805 6b01 	strb.w	r6, [r5], #1
 8010b3e:	9e00      	ldr	r6, [sp, #0]
 8010b40:	1bae      	subs	r6, r5, r6
 8010b42:	42b7      	cmp	r7, r6
 8010b44:	4602      	mov	r2, r0
 8010b46:	460b      	mov	r3, r1
 8010b48:	d137      	bne.n	8010bba <_dtoa_r+0x722>
 8010b4a:	f7ef fbbf 	bl	80002cc <__adddf3>
 8010b4e:	4642      	mov	r2, r8
 8010b50:	464b      	mov	r3, r9
 8010b52:	4606      	mov	r6, r0
 8010b54:	460f      	mov	r7, r1
 8010b56:	f7ef ffff 	bl	8000b58 <__aeabi_dcmpgt>
 8010b5a:	b9c8      	cbnz	r0, 8010b90 <_dtoa_r+0x6f8>
 8010b5c:	4642      	mov	r2, r8
 8010b5e:	464b      	mov	r3, r9
 8010b60:	4630      	mov	r0, r6
 8010b62:	4639      	mov	r1, r7
 8010b64:	f7ef ffd0 	bl	8000b08 <__aeabi_dcmpeq>
 8010b68:	b110      	cbz	r0, 8010b70 <_dtoa_r+0x6d8>
 8010b6a:	9b02      	ldr	r3, [sp, #8]
 8010b6c:	07d9      	lsls	r1, r3, #31
 8010b6e:	d40f      	bmi.n	8010b90 <_dtoa_r+0x6f8>
 8010b70:	4620      	mov	r0, r4
 8010b72:	4659      	mov	r1, fp
 8010b74:	f001 f87e 	bl	8011c74 <_Bfree>
 8010b78:	2300      	movs	r3, #0
 8010b7a:	702b      	strb	r3, [r5, #0]
 8010b7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b7e:	f10a 0001 	add.w	r0, sl, #1
 8010b82:	6018      	str	r0, [r3, #0]
 8010b84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	f43f acd8 	beq.w	801053c <_dtoa_r+0xa4>
 8010b8c:	601d      	str	r5, [r3, #0]
 8010b8e:	e4d5      	b.n	801053c <_dtoa_r+0xa4>
 8010b90:	f8cd a01c 	str.w	sl, [sp, #28]
 8010b94:	462b      	mov	r3, r5
 8010b96:	461d      	mov	r5, r3
 8010b98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b9c:	2a39      	cmp	r2, #57	; 0x39
 8010b9e:	d108      	bne.n	8010bb2 <_dtoa_r+0x71a>
 8010ba0:	9a00      	ldr	r2, [sp, #0]
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d1f7      	bne.n	8010b96 <_dtoa_r+0x6fe>
 8010ba6:	9a07      	ldr	r2, [sp, #28]
 8010ba8:	9900      	ldr	r1, [sp, #0]
 8010baa:	3201      	adds	r2, #1
 8010bac:	9207      	str	r2, [sp, #28]
 8010bae:	2230      	movs	r2, #48	; 0x30
 8010bb0:	700a      	strb	r2, [r1, #0]
 8010bb2:	781a      	ldrb	r2, [r3, #0]
 8010bb4:	3201      	adds	r2, #1
 8010bb6:	701a      	strb	r2, [r3, #0]
 8010bb8:	e78c      	b.n	8010ad4 <_dtoa_r+0x63c>
 8010bba:	4b7f      	ldr	r3, [pc, #508]	; (8010db8 <_dtoa_r+0x920>)
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	f7ef fd3b 	bl	8000638 <__aeabi_dmul>
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	4606      	mov	r6, r0
 8010bc8:	460f      	mov	r7, r1
 8010bca:	f7ef ff9d 	bl	8000b08 <__aeabi_dcmpeq>
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	d09b      	beq.n	8010b0a <_dtoa_r+0x672>
 8010bd2:	e7cd      	b.n	8010b70 <_dtoa_r+0x6d8>
 8010bd4:	9a08      	ldr	r2, [sp, #32]
 8010bd6:	2a00      	cmp	r2, #0
 8010bd8:	f000 80c4 	beq.w	8010d64 <_dtoa_r+0x8cc>
 8010bdc:	9a05      	ldr	r2, [sp, #20]
 8010bde:	2a01      	cmp	r2, #1
 8010be0:	f300 80a8 	bgt.w	8010d34 <_dtoa_r+0x89c>
 8010be4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010be6:	2a00      	cmp	r2, #0
 8010be8:	f000 80a0 	beq.w	8010d2c <_dtoa_r+0x894>
 8010bec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010bf0:	9e06      	ldr	r6, [sp, #24]
 8010bf2:	4645      	mov	r5, r8
 8010bf4:	9a04      	ldr	r2, [sp, #16]
 8010bf6:	2101      	movs	r1, #1
 8010bf8:	441a      	add	r2, r3
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	4498      	add	r8, r3
 8010bfe:	9204      	str	r2, [sp, #16]
 8010c00:	f001 f93e 	bl	8011e80 <__i2b>
 8010c04:	4607      	mov	r7, r0
 8010c06:	2d00      	cmp	r5, #0
 8010c08:	dd0b      	ble.n	8010c22 <_dtoa_r+0x78a>
 8010c0a:	9b04      	ldr	r3, [sp, #16]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	dd08      	ble.n	8010c22 <_dtoa_r+0x78a>
 8010c10:	42ab      	cmp	r3, r5
 8010c12:	9a04      	ldr	r2, [sp, #16]
 8010c14:	bfa8      	it	ge
 8010c16:	462b      	movge	r3, r5
 8010c18:	eba8 0803 	sub.w	r8, r8, r3
 8010c1c:	1aed      	subs	r5, r5, r3
 8010c1e:	1ad3      	subs	r3, r2, r3
 8010c20:	9304      	str	r3, [sp, #16]
 8010c22:	9b06      	ldr	r3, [sp, #24]
 8010c24:	b1fb      	cbz	r3, 8010c66 <_dtoa_r+0x7ce>
 8010c26:	9b08      	ldr	r3, [sp, #32]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	f000 809f 	beq.w	8010d6c <_dtoa_r+0x8d4>
 8010c2e:	2e00      	cmp	r6, #0
 8010c30:	dd11      	ble.n	8010c56 <_dtoa_r+0x7be>
 8010c32:	4639      	mov	r1, r7
 8010c34:	4632      	mov	r2, r6
 8010c36:	4620      	mov	r0, r4
 8010c38:	f001 f9de 	bl	8011ff8 <__pow5mult>
 8010c3c:	465a      	mov	r2, fp
 8010c3e:	4601      	mov	r1, r0
 8010c40:	4607      	mov	r7, r0
 8010c42:	4620      	mov	r0, r4
 8010c44:	f001 f932 	bl	8011eac <__multiply>
 8010c48:	4659      	mov	r1, fp
 8010c4a:	9007      	str	r0, [sp, #28]
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f001 f811 	bl	8011c74 <_Bfree>
 8010c52:	9b07      	ldr	r3, [sp, #28]
 8010c54:	469b      	mov	fp, r3
 8010c56:	9b06      	ldr	r3, [sp, #24]
 8010c58:	1b9a      	subs	r2, r3, r6
 8010c5a:	d004      	beq.n	8010c66 <_dtoa_r+0x7ce>
 8010c5c:	4659      	mov	r1, fp
 8010c5e:	4620      	mov	r0, r4
 8010c60:	f001 f9ca 	bl	8011ff8 <__pow5mult>
 8010c64:	4683      	mov	fp, r0
 8010c66:	2101      	movs	r1, #1
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f001 f909 	bl	8011e80 <__i2b>
 8010c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	4606      	mov	r6, r0
 8010c74:	dd7c      	ble.n	8010d70 <_dtoa_r+0x8d8>
 8010c76:	461a      	mov	r2, r3
 8010c78:	4601      	mov	r1, r0
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	f001 f9bc 	bl	8011ff8 <__pow5mult>
 8010c80:	9b05      	ldr	r3, [sp, #20]
 8010c82:	2b01      	cmp	r3, #1
 8010c84:	4606      	mov	r6, r0
 8010c86:	dd76      	ble.n	8010d76 <_dtoa_r+0x8de>
 8010c88:	2300      	movs	r3, #0
 8010c8a:	9306      	str	r3, [sp, #24]
 8010c8c:	6933      	ldr	r3, [r6, #16]
 8010c8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010c92:	6918      	ldr	r0, [r3, #16]
 8010c94:	f001 f8a4 	bl	8011de0 <__hi0bits>
 8010c98:	f1c0 0020 	rsb	r0, r0, #32
 8010c9c:	9b04      	ldr	r3, [sp, #16]
 8010c9e:	4418      	add	r0, r3
 8010ca0:	f010 001f 	ands.w	r0, r0, #31
 8010ca4:	f000 8086 	beq.w	8010db4 <_dtoa_r+0x91c>
 8010ca8:	f1c0 0320 	rsb	r3, r0, #32
 8010cac:	2b04      	cmp	r3, #4
 8010cae:	dd7f      	ble.n	8010db0 <_dtoa_r+0x918>
 8010cb0:	f1c0 001c 	rsb	r0, r0, #28
 8010cb4:	9b04      	ldr	r3, [sp, #16]
 8010cb6:	4403      	add	r3, r0
 8010cb8:	4480      	add	r8, r0
 8010cba:	4405      	add	r5, r0
 8010cbc:	9304      	str	r3, [sp, #16]
 8010cbe:	f1b8 0f00 	cmp.w	r8, #0
 8010cc2:	dd05      	ble.n	8010cd0 <_dtoa_r+0x838>
 8010cc4:	4659      	mov	r1, fp
 8010cc6:	4642      	mov	r2, r8
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f001 f9ef 	bl	80120ac <__lshift>
 8010cce:	4683      	mov	fp, r0
 8010cd0:	9b04      	ldr	r3, [sp, #16]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	dd05      	ble.n	8010ce2 <_dtoa_r+0x84a>
 8010cd6:	4631      	mov	r1, r6
 8010cd8:	461a      	mov	r2, r3
 8010cda:	4620      	mov	r0, r4
 8010cdc:	f001 f9e6 	bl	80120ac <__lshift>
 8010ce0:	4606      	mov	r6, r0
 8010ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d069      	beq.n	8010dbc <_dtoa_r+0x924>
 8010ce8:	4631      	mov	r1, r6
 8010cea:	4658      	mov	r0, fp
 8010cec:	f001 fa4a 	bl	8012184 <__mcmp>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	da63      	bge.n	8010dbc <_dtoa_r+0x924>
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	4659      	mov	r1, fp
 8010cf8:	220a      	movs	r2, #10
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f000 ffdc 	bl	8011cb8 <__multadd>
 8010d00:	9b08      	ldr	r3, [sp, #32]
 8010d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d06:	4683      	mov	fp, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	f000 818f 	beq.w	801102c <_dtoa_r+0xb94>
 8010d0e:	4639      	mov	r1, r7
 8010d10:	2300      	movs	r3, #0
 8010d12:	220a      	movs	r2, #10
 8010d14:	4620      	mov	r0, r4
 8010d16:	f000 ffcf 	bl	8011cb8 <__multadd>
 8010d1a:	f1b9 0f00 	cmp.w	r9, #0
 8010d1e:	4607      	mov	r7, r0
 8010d20:	f300 808e 	bgt.w	8010e40 <_dtoa_r+0x9a8>
 8010d24:	9b05      	ldr	r3, [sp, #20]
 8010d26:	2b02      	cmp	r3, #2
 8010d28:	dc50      	bgt.n	8010dcc <_dtoa_r+0x934>
 8010d2a:	e089      	b.n	8010e40 <_dtoa_r+0x9a8>
 8010d2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010d2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010d32:	e75d      	b.n	8010bf0 <_dtoa_r+0x758>
 8010d34:	9b01      	ldr	r3, [sp, #4]
 8010d36:	1e5e      	subs	r6, r3, #1
 8010d38:	9b06      	ldr	r3, [sp, #24]
 8010d3a:	42b3      	cmp	r3, r6
 8010d3c:	bfbf      	itttt	lt
 8010d3e:	9b06      	ldrlt	r3, [sp, #24]
 8010d40:	9606      	strlt	r6, [sp, #24]
 8010d42:	1af2      	sublt	r2, r6, r3
 8010d44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8010d46:	bfb6      	itet	lt
 8010d48:	189b      	addlt	r3, r3, r2
 8010d4a:	1b9e      	subge	r6, r3, r6
 8010d4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010d4e:	9b01      	ldr	r3, [sp, #4]
 8010d50:	bfb8      	it	lt
 8010d52:	2600      	movlt	r6, #0
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	bfb5      	itete	lt
 8010d58:	eba8 0503 	sublt.w	r5, r8, r3
 8010d5c:	9b01      	ldrge	r3, [sp, #4]
 8010d5e:	2300      	movlt	r3, #0
 8010d60:	4645      	movge	r5, r8
 8010d62:	e747      	b.n	8010bf4 <_dtoa_r+0x75c>
 8010d64:	9e06      	ldr	r6, [sp, #24]
 8010d66:	9f08      	ldr	r7, [sp, #32]
 8010d68:	4645      	mov	r5, r8
 8010d6a:	e74c      	b.n	8010c06 <_dtoa_r+0x76e>
 8010d6c:	9a06      	ldr	r2, [sp, #24]
 8010d6e:	e775      	b.n	8010c5c <_dtoa_r+0x7c4>
 8010d70:	9b05      	ldr	r3, [sp, #20]
 8010d72:	2b01      	cmp	r3, #1
 8010d74:	dc18      	bgt.n	8010da8 <_dtoa_r+0x910>
 8010d76:	9b02      	ldr	r3, [sp, #8]
 8010d78:	b9b3      	cbnz	r3, 8010da8 <_dtoa_r+0x910>
 8010d7a:	9b03      	ldr	r3, [sp, #12]
 8010d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d80:	b9a3      	cbnz	r3, 8010dac <_dtoa_r+0x914>
 8010d82:	9b03      	ldr	r3, [sp, #12]
 8010d84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d88:	0d1b      	lsrs	r3, r3, #20
 8010d8a:	051b      	lsls	r3, r3, #20
 8010d8c:	b12b      	cbz	r3, 8010d9a <_dtoa_r+0x902>
 8010d8e:	9b04      	ldr	r3, [sp, #16]
 8010d90:	3301      	adds	r3, #1
 8010d92:	9304      	str	r3, [sp, #16]
 8010d94:	f108 0801 	add.w	r8, r8, #1
 8010d98:	2301      	movs	r3, #1
 8010d9a:	9306      	str	r3, [sp, #24]
 8010d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f47f af74 	bne.w	8010c8c <_dtoa_r+0x7f4>
 8010da4:	2001      	movs	r0, #1
 8010da6:	e779      	b.n	8010c9c <_dtoa_r+0x804>
 8010da8:	2300      	movs	r3, #0
 8010daa:	e7f6      	b.n	8010d9a <_dtoa_r+0x902>
 8010dac:	9b02      	ldr	r3, [sp, #8]
 8010dae:	e7f4      	b.n	8010d9a <_dtoa_r+0x902>
 8010db0:	d085      	beq.n	8010cbe <_dtoa_r+0x826>
 8010db2:	4618      	mov	r0, r3
 8010db4:	301c      	adds	r0, #28
 8010db6:	e77d      	b.n	8010cb4 <_dtoa_r+0x81c>
 8010db8:	40240000 	.word	0x40240000
 8010dbc:	9b01      	ldr	r3, [sp, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	dc38      	bgt.n	8010e34 <_dtoa_r+0x99c>
 8010dc2:	9b05      	ldr	r3, [sp, #20]
 8010dc4:	2b02      	cmp	r3, #2
 8010dc6:	dd35      	ble.n	8010e34 <_dtoa_r+0x99c>
 8010dc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010dcc:	f1b9 0f00 	cmp.w	r9, #0
 8010dd0:	d10d      	bne.n	8010dee <_dtoa_r+0x956>
 8010dd2:	4631      	mov	r1, r6
 8010dd4:	464b      	mov	r3, r9
 8010dd6:	2205      	movs	r2, #5
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f000 ff6d 	bl	8011cb8 <__multadd>
 8010dde:	4601      	mov	r1, r0
 8010de0:	4606      	mov	r6, r0
 8010de2:	4658      	mov	r0, fp
 8010de4:	f001 f9ce 	bl	8012184 <__mcmp>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	f73f adbd 	bgt.w	8010968 <_dtoa_r+0x4d0>
 8010dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010df0:	9d00      	ldr	r5, [sp, #0]
 8010df2:	ea6f 0a03 	mvn.w	sl, r3
 8010df6:	f04f 0800 	mov.w	r8, #0
 8010dfa:	4631      	mov	r1, r6
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f000 ff39 	bl	8011c74 <_Bfree>
 8010e02:	2f00      	cmp	r7, #0
 8010e04:	f43f aeb4 	beq.w	8010b70 <_dtoa_r+0x6d8>
 8010e08:	f1b8 0f00 	cmp.w	r8, #0
 8010e0c:	d005      	beq.n	8010e1a <_dtoa_r+0x982>
 8010e0e:	45b8      	cmp	r8, r7
 8010e10:	d003      	beq.n	8010e1a <_dtoa_r+0x982>
 8010e12:	4641      	mov	r1, r8
 8010e14:	4620      	mov	r0, r4
 8010e16:	f000 ff2d 	bl	8011c74 <_Bfree>
 8010e1a:	4639      	mov	r1, r7
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	f000 ff29 	bl	8011c74 <_Bfree>
 8010e22:	e6a5      	b.n	8010b70 <_dtoa_r+0x6d8>
 8010e24:	2600      	movs	r6, #0
 8010e26:	4637      	mov	r7, r6
 8010e28:	e7e1      	b.n	8010dee <_dtoa_r+0x956>
 8010e2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010e2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010e30:	4637      	mov	r7, r6
 8010e32:	e599      	b.n	8010968 <_dtoa_r+0x4d0>
 8010e34:	9b08      	ldr	r3, [sp, #32]
 8010e36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	f000 80fd 	beq.w	801103a <_dtoa_r+0xba2>
 8010e40:	2d00      	cmp	r5, #0
 8010e42:	dd05      	ble.n	8010e50 <_dtoa_r+0x9b8>
 8010e44:	4639      	mov	r1, r7
 8010e46:	462a      	mov	r2, r5
 8010e48:	4620      	mov	r0, r4
 8010e4a:	f001 f92f 	bl	80120ac <__lshift>
 8010e4e:	4607      	mov	r7, r0
 8010e50:	9b06      	ldr	r3, [sp, #24]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d05c      	beq.n	8010f10 <_dtoa_r+0xa78>
 8010e56:	6879      	ldr	r1, [r7, #4]
 8010e58:	4620      	mov	r0, r4
 8010e5a:	f000 fecb 	bl	8011bf4 <_Balloc>
 8010e5e:	4605      	mov	r5, r0
 8010e60:	b928      	cbnz	r0, 8010e6e <_dtoa_r+0x9d6>
 8010e62:	4b80      	ldr	r3, [pc, #512]	; (8011064 <_dtoa_r+0xbcc>)
 8010e64:	4602      	mov	r2, r0
 8010e66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010e6a:	f7ff bb2e 	b.w	80104ca <_dtoa_r+0x32>
 8010e6e:	693a      	ldr	r2, [r7, #16]
 8010e70:	3202      	adds	r2, #2
 8010e72:	0092      	lsls	r2, r2, #2
 8010e74:	f107 010c 	add.w	r1, r7, #12
 8010e78:	300c      	adds	r0, #12
 8010e7a:	f7fd faa1 	bl	800e3c0 <memcpy>
 8010e7e:	2201      	movs	r2, #1
 8010e80:	4629      	mov	r1, r5
 8010e82:	4620      	mov	r0, r4
 8010e84:	f001 f912 	bl	80120ac <__lshift>
 8010e88:	9b00      	ldr	r3, [sp, #0]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	9301      	str	r3, [sp, #4]
 8010e8e:	9b00      	ldr	r3, [sp, #0]
 8010e90:	444b      	add	r3, r9
 8010e92:	9307      	str	r3, [sp, #28]
 8010e94:	9b02      	ldr	r3, [sp, #8]
 8010e96:	f003 0301 	and.w	r3, r3, #1
 8010e9a:	46b8      	mov	r8, r7
 8010e9c:	9306      	str	r3, [sp, #24]
 8010e9e:	4607      	mov	r7, r0
 8010ea0:	9b01      	ldr	r3, [sp, #4]
 8010ea2:	4631      	mov	r1, r6
 8010ea4:	3b01      	subs	r3, #1
 8010ea6:	4658      	mov	r0, fp
 8010ea8:	9302      	str	r3, [sp, #8]
 8010eaa:	f7ff fa69 	bl	8010380 <quorem>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	3330      	adds	r3, #48	; 0x30
 8010eb2:	9004      	str	r0, [sp, #16]
 8010eb4:	4641      	mov	r1, r8
 8010eb6:	4658      	mov	r0, fp
 8010eb8:	9308      	str	r3, [sp, #32]
 8010eba:	f001 f963 	bl	8012184 <__mcmp>
 8010ebe:	463a      	mov	r2, r7
 8010ec0:	4681      	mov	r9, r0
 8010ec2:	4631      	mov	r1, r6
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f001 f979 	bl	80121bc <__mdiff>
 8010eca:	68c2      	ldr	r2, [r0, #12]
 8010ecc:	9b08      	ldr	r3, [sp, #32]
 8010ece:	4605      	mov	r5, r0
 8010ed0:	bb02      	cbnz	r2, 8010f14 <_dtoa_r+0xa7c>
 8010ed2:	4601      	mov	r1, r0
 8010ed4:	4658      	mov	r0, fp
 8010ed6:	f001 f955 	bl	8012184 <__mcmp>
 8010eda:	9b08      	ldr	r3, [sp, #32]
 8010edc:	4602      	mov	r2, r0
 8010ede:	4629      	mov	r1, r5
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8010ee6:	f000 fec5 	bl	8011c74 <_Bfree>
 8010eea:	9b05      	ldr	r3, [sp, #20]
 8010eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010eee:	9d01      	ldr	r5, [sp, #4]
 8010ef0:	ea43 0102 	orr.w	r1, r3, r2
 8010ef4:	9b06      	ldr	r3, [sp, #24]
 8010ef6:	430b      	orrs	r3, r1
 8010ef8:	9b08      	ldr	r3, [sp, #32]
 8010efa:	d10d      	bne.n	8010f18 <_dtoa_r+0xa80>
 8010efc:	2b39      	cmp	r3, #57	; 0x39
 8010efe:	d029      	beq.n	8010f54 <_dtoa_r+0xabc>
 8010f00:	f1b9 0f00 	cmp.w	r9, #0
 8010f04:	dd01      	ble.n	8010f0a <_dtoa_r+0xa72>
 8010f06:	9b04      	ldr	r3, [sp, #16]
 8010f08:	3331      	adds	r3, #49	; 0x31
 8010f0a:	9a02      	ldr	r2, [sp, #8]
 8010f0c:	7013      	strb	r3, [r2, #0]
 8010f0e:	e774      	b.n	8010dfa <_dtoa_r+0x962>
 8010f10:	4638      	mov	r0, r7
 8010f12:	e7b9      	b.n	8010e88 <_dtoa_r+0x9f0>
 8010f14:	2201      	movs	r2, #1
 8010f16:	e7e2      	b.n	8010ede <_dtoa_r+0xa46>
 8010f18:	f1b9 0f00 	cmp.w	r9, #0
 8010f1c:	db06      	blt.n	8010f2c <_dtoa_r+0xa94>
 8010f1e:	9905      	ldr	r1, [sp, #20]
 8010f20:	ea41 0909 	orr.w	r9, r1, r9
 8010f24:	9906      	ldr	r1, [sp, #24]
 8010f26:	ea59 0101 	orrs.w	r1, r9, r1
 8010f2a:	d120      	bne.n	8010f6e <_dtoa_r+0xad6>
 8010f2c:	2a00      	cmp	r2, #0
 8010f2e:	ddec      	ble.n	8010f0a <_dtoa_r+0xa72>
 8010f30:	4659      	mov	r1, fp
 8010f32:	2201      	movs	r2, #1
 8010f34:	4620      	mov	r0, r4
 8010f36:	9301      	str	r3, [sp, #4]
 8010f38:	f001 f8b8 	bl	80120ac <__lshift>
 8010f3c:	4631      	mov	r1, r6
 8010f3e:	4683      	mov	fp, r0
 8010f40:	f001 f920 	bl	8012184 <__mcmp>
 8010f44:	2800      	cmp	r0, #0
 8010f46:	9b01      	ldr	r3, [sp, #4]
 8010f48:	dc02      	bgt.n	8010f50 <_dtoa_r+0xab8>
 8010f4a:	d1de      	bne.n	8010f0a <_dtoa_r+0xa72>
 8010f4c:	07da      	lsls	r2, r3, #31
 8010f4e:	d5dc      	bpl.n	8010f0a <_dtoa_r+0xa72>
 8010f50:	2b39      	cmp	r3, #57	; 0x39
 8010f52:	d1d8      	bne.n	8010f06 <_dtoa_r+0xa6e>
 8010f54:	9a02      	ldr	r2, [sp, #8]
 8010f56:	2339      	movs	r3, #57	; 0x39
 8010f58:	7013      	strb	r3, [r2, #0]
 8010f5a:	462b      	mov	r3, r5
 8010f5c:	461d      	mov	r5, r3
 8010f5e:	3b01      	subs	r3, #1
 8010f60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010f64:	2a39      	cmp	r2, #57	; 0x39
 8010f66:	d050      	beq.n	801100a <_dtoa_r+0xb72>
 8010f68:	3201      	adds	r2, #1
 8010f6a:	701a      	strb	r2, [r3, #0]
 8010f6c:	e745      	b.n	8010dfa <_dtoa_r+0x962>
 8010f6e:	2a00      	cmp	r2, #0
 8010f70:	dd03      	ble.n	8010f7a <_dtoa_r+0xae2>
 8010f72:	2b39      	cmp	r3, #57	; 0x39
 8010f74:	d0ee      	beq.n	8010f54 <_dtoa_r+0xabc>
 8010f76:	3301      	adds	r3, #1
 8010f78:	e7c7      	b.n	8010f0a <_dtoa_r+0xa72>
 8010f7a:	9a01      	ldr	r2, [sp, #4]
 8010f7c:	9907      	ldr	r1, [sp, #28]
 8010f7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010f82:	428a      	cmp	r2, r1
 8010f84:	d02a      	beq.n	8010fdc <_dtoa_r+0xb44>
 8010f86:	4659      	mov	r1, fp
 8010f88:	2300      	movs	r3, #0
 8010f8a:	220a      	movs	r2, #10
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	f000 fe93 	bl	8011cb8 <__multadd>
 8010f92:	45b8      	cmp	r8, r7
 8010f94:	4683      	mov	fp, r0
 8010f96:	f04f 0300 	mov.w	r3, #0
 8010f9a:	f04f 020a 	mov.w	r2, #10
 8010f9e:	4641      	mov	r1, r8
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	d107      	bne.n	8010fb4 <_dtoa_r+0xb1c>
 8010fa4:	f000 fe88 	bl	8011cb8 <__multadd>
 8010fa8:	4680      	mov	r8, r0
 8010faa:	4607      	mov	r7, r0
 8010fac:	9b01      	ldr	r3, [sp, #4]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	9301      	str	r3, [sp, #4]
 8010fb2:	e775      	b.n	8010ea0 <_dtoa_r+0xa08>
 8010fb4:	f000 fe80 	bl	8011cb8 <__multadd>
 8010fb8:	4639      	mov	r1, r7
 8010fba:	4680      	mov	r8, r0
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	220a      	movs	r2, #10
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	f000 fe79 	bl	8011cb8 <__multadd>
 8010fc6:	4607      	mov	r7, r0
 8010fc8:	e7f0      	b.n	8010fac <_dtoa_r+0xb14>
 8010fca:	f1b9 0f00 	cmp.w	r9, #0
 8010fce:	9a00      	ldr	r2, [sp, #0]
 8010fd0:	bfcc      	ite	gt
 8010fd2:	464d      	movgt	r5, r9
 8010fd4:	2501      	movle	r5, #1
 8010fd6:	4415      	add	r5, r2
 8010fd8:	f04f 0800 	mov.w	r8, #0
 8010fdc:	4659      	mov	r1, fp
 8010fde:	2201      	movs	r2, #1
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	9301      	str	r3, [sp, #4]
 8010fe4:	f001 f862 	bl	80120ac <__lshift>
 8010fe8:	4631      	mov	r1, r6
 8010fea:	4683      	mov	fp, r0
 8010fec:	f001 f8ca 	bl	8012184 <__mcmp>
 8010ff0:	2800      	cmp	r0, #0
 8010ff2:	dcb2      	bgt.n	8010f5a <_dtoa_r+0xac2>
 8010ff4:	d102      	bne.n	8010ffc <_dtoa_r+0xb64>
 8010ff6:	9b01      	ldr	r3, [sp, #4]
 8010ff8:	07db      	lsls	r3, r3, #31
 8010ffa:	d4ae      	bmi.n	8010f5a <_dtoa_r+0xac2>
 8010ffc:	462b      	mov	r3, r5
 8010ffe:	461d      	mov	r5, r3
 8011000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011004:	2a30      	cmp	r2, #48	; 0x30
 8011006:	d0fa      	beq.n	8010ffe <_dtoa_r+0xb66>
 8011008:	e6f7      	b.n	8010dfa <_dtoa_r+0x962>
 801100a:	9a00      	ldr	r2, [sp, #0]
 801100c:	429a      	cmp	r2, r3
 801100e:	d1a5      	bne.n	8010f5c <_dtoa_r+0xac4>
 8011010:	f10a 0a01 	add.w	sl, sl, #1
 8011014:	2331      	movs	r3, #49	; 0x31
 8011016:	e779      	b.n	8010f0c <_dtoa_r+0xa74>
 8011018:	4b13      	ldr	r3, [pc, #76]	; (8011068 <_dtoa_r+0xbd0>)
 801101a:	f7ff baaf 	b.w	801057c <_dtoa_r+0xe4>
 801101e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011020:	2b00      	cmp	r3, #0
 8011022:	f47f aa86 	bne.w	8010532 <_dtoa_r+0x9a>
 8011026:	4b11      	ldr	r3, [pc, #68]	; (801106c <_dtoa_r+0xbd4>)
 8011028:	f7ff baa8 	b.w	801057c <_dtoa_r+0xe4>
 801102c:	f1b9 0f00 	cmp.w	r9, #0
 8011030:	dc03      	bgt.n	801103a <_dtoa_r+0xba2>
 8011032:	9b05      	ldr	r3, [sp, #20]
 8011034:	2b02      	cmp	r3, #2
 8011036:	f73f aec9 	bgt.w	8010dcc <_dtoa_r+0x934>
 801103a:	9d00      	ldr	r5, [sp, #0]
 801103c:	4631      	mov	r1, r6
 801103e:	4658      	mov	r0, fp
 8011040:	f7ff f99e 	bl	8010380 <quorem>
 8011044:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011048:	f805 3b01 	strb.w	r3, [r5], #1
 801104c:	9a00      	ldr	r2, [sp, #0]
 801104e:	1aaa      	subs	r2, r5, r2
 8011050:	4591      	cmp	r9, r2
 8011052:	ddba      	ble.n	8010fca <_dtoa_r+0xb32>
 8011054:	4659      	mov	r1, fp
 8011056:	2300      	movs	r3, #0
 8011058:	220a      	movs	r2, #10
 801105a:	4620      	mov	r0, r4
 801105c:	f000 fe2c 	bl	8011cb8 <__multadd>
 8011060:	4683      	mov	fp, r0
 8011062:	e7eb      	b.n	801103c <_dtoa_r+0xba4>
 8011064:	08014aab 	.word	0x08014aab
 8011068:	08014d11 	.word	0x08014d11
 801106c:	08014a28 	.word	0x08014a28

08011070 <__sflush_r>:
 8011070:	898a      	ldrh	r2, [r1, #12]
 8011072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011076:	4605      	mov	r5, r0
 8011078:	0710      	lsls	r0, r2, #28
 801107a:	460c      	mov	r4, r1
 801107c:	d458      	bmi.n	8011130 <__sflush_r+0xc0>
 801107e:	684b      	ldr	r3, [r1, #4]
 8011080:	2b00      	cmp	r3, #0
 8011082:	dc05      	bgt.n	8011090 <__sflush_r+0x20>
 8011084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011086:	2b00      	cmp	r3, #0
 8011088:	dc02      	bgt.n	8011090 <__sflush_r+0x20>
 801108a:	2000      	movs	r0, #0
 801108c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011092:	2e00      	cmp	r6, #0
 8011094:	d0f9      	beq.n	801108a <__sflush_r+0x1a>
 8011096:	2300      	movs	r3, #0
 8011098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801109c:	682f      	ldr	r7, [r5, #0]
 801109e:	602b      	str	r3, [r5, #0]
 80110a0:	d032      	beq.n	8011108 <__sflush_r+0x98>
 80110a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80110a4:	89a3      	ldrh	r3, [r4, #12]
 80110a6:	075a      	lsls	r2, r3, #29
 80110a8:	d505      	bpl.n	80110b6 <__sflush_r+0x46>
 80110aa:	6863      	ldr	r3, [r4, #4]
 80110ac:	1ac0      	subs	r0, r0, r3
 80110ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80110b0:	b10b      	cbz	r3, 80110b6 <__sflush_r+0x46>
 80110b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80110b4:	1ac0      	subs	r0, r0, r3
 80110b6:	2300      	movs	r3, #0
 80110b8:	4602      	mov	r2, r0
 80110ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80110bc:	6a21      	ldr	r1, [r4, #32]
 80110be:	4628      	mov	r0, r5
 80110c0:	47b0      	blx	r6
 80110c2:	1c43      	adds	r3, r0, #1
 80110c4:	89a3      	ldrh	r3, [r4, #12]
 80110c6:	d106      	bne.n	80110d6 <__sflush_r+0x66>
 80110c8:	6829      	ldr	r1, [r5, #0]
 80110ca:	291d      	cmp	r1, #29
 80110cc:	d82c      	bhi.n	8011128 <__sflush_r+0xb8>
 80110ce:	4a2a      	ldr	r2, [pc, #168]	; (8011178 <__sflush_r+0x108>)
 80110d0:	40ca      	lsrs	r2, r1
 80110d2:	07d6      	lsls	r6, r2, #31
 80110d4:	d528      	bpl.n	8011128 <__sflush_r+0xb8>
 80110d6:	2200      	movs	r2, #0
 80110d8:	6062      	str	r2, [r4, #4]
 80110da:	04d9      	lsls	r1, r3, #19
 80110dc:	6922      	ldr	r2, [r4, #16]
 80110de:	6022      	str	r2, [r4, #0]
 80110e0:	d504      	bpl.n	80110ec <__sflush_r+0x7c>
 80110e2:	1c42      	adds	r2, r0, #1
 80110e4:	d101      	bne.n	80110ea <__sflush_r+0x7a>
 80110e6:	682b      	ldr	r3, [r5, #0]
 80110e8:	b903      	cbnz	r3, 80110ec <__sflush_r+0x7c>
 80110ea:	6560      	str	r0, [r4, #84]	; 0x54
 80110ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110ee:	602f      	str	r7, [r5, #0]
 80110f0:	2900      	cmp	r1, #0
 80110f2:	d0ca      	beq.n	801108a <__sflush_r+0x1a>
 80110f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110f8:	4299      	cmp	r1, r3
 80110fa:	d002      	beq.n	8011102 <__sflush_r+0x92>
 80110fc:	4628      	mov	r0, r5
 80110fe:	f7fd f975 	bl	800e3ec <_free_r>
 8011102:	2000      	movs	r0, #0
 8011104:	6360      	str	r0, [r4, #52]	; 0x34
 8011106:	e7c1      	b.n	801108c <__sflush_r+0x1c>
 8011108:	6a21      	ldr	r1, [r4, #32]
 801110a:	2301      	movs	r3, #1
 801110c:	4628      	mov	r0, r5
 801110e:	47b0      	blx	r6
 8011110:	1c41      	adds	r1, r0, #1
 8011112:	d1c7      	bne.n	80110a4 <__sflush_r+0x34>
 8011114:	682b      	ldr	r3, [r5, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d0c4      	beq.n	80110a4 <__sflush_r+0x34>
 801111a:	2b1d      	cmp	r3, #29
 801111c:	d001      	beq.n	8011122 <__sflush_r+0xb2>
 801111e:	2b16      	cmp	r3, #22
 8011120:	d101      	bne.n	8011126 <__sflush_r+0xb6>
 8011122:	602f      	str	r7, [r5, #0]
 8011124:	e7b1      	b.n	801108a <__sflush_r+0x1a>
 8011126:	89a3      	ldrh	r3, [r4, #12]
 8011128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801112c:	81a3      	strh	r3, [r4, #12]
 801112e:	e7ad      	b.n	801108c <__sflush_r+0x1c>
 8011130:	690f      	ldr	r7, [r1, #16]
 8011132:	2f00      	cmp	r7, #0
 8011134:	d0a9      	beq.n	801108a <__sflush_r+0x1a>
 8011136:	0793      	lsls	r3, r2, #30
 8011138:	680e      	ldr	r6, [r1, #0]
 801113a:	bf08      	it	eq
 801113c:	694b      	ldreq	r3, [r1, #20]
 801113e:	600f      	str	r7, [r1, #0]
 8011140:	bf18      	it	ne
 8011142:	2300      	movne	r3, #0
 8011144:	eba6 0807 	sub.w	r8, r6, r7
 8011148:	608b      	str	r3, [r1, #8]
 801114a:	f1b8 0f00 	cmp.w	r8, #0
 801114e:	dd9c      	ble.n	801108a <__sflush_r+0x1a>
 8011150:	6a21      	ldr	r1, [r4, #32]
 8011152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011154:	4643      	mov	r3, r8
 8011156:	463a      	mov	r2, r7
 8011158:	4628      	mov	r0, r5
 801115a:	47b0      	blx	r6
 801115c:	2800      	cmp	r0, #0
 801115e:	dc06      	bgt.n	801116e <__sflush_r+0xfe>
 8011160:	89a3      	ldrh	r3, [r4, #12]
 8011162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011166:	81a3      	strh	r3, [r4, #12]
 8011168:	f04f 30ff 	mov.w	r0, #4294967295
 801116c:	e78e      	b.n	801108c <__sflush_r+0x1c>
 801116e:	4407      	add	r7, r0
 8011170:	eba8 0800 	sub.w	r8, r8, r0
 8011174:	e7e9      	b.n	801114a <__sflush_r+0xda>
 8011176:	bf00      	nop
 8011178:	20400001 	.word	0x20400001

0801117c <_fflush_r>:
 801117c:	b538      	push	{r3, r4, r5, lr}
 801117e:	690b      	ldr	r3, [r1, #16]
 8011180:	4605      	mov	r5, r0
 8011182:	460c      	mov	r4, r1
 8011184:	b913      	cbnz	r3, 801118c <_fflush_r+0x10>
 8011186:	2500      	movs	r5, #0
 8011188:	4628      	mov	r0, r5
 801118a:	bd38      	pop	{r3, r4, r5, pc}
 801118c:	b118      	cbz	r0, 8011196 <_fflush_r+0x1a>
 801118e:	6983      	ldr	r3, [r0, #24]
 8011190:	b90b      	cbnz	r3, 8011196 <_fflush_r+0x1a>
 8011192:	f000 f887 	bl	80112a4 <__sinit>
 8011196:	4b14      	ldr	r3, [pc, #80]	; (80111e8 <_fflush_r+0x6c>)
 8011198:	429c      	cmp	r4, r3
 801119a:	d11b      	bne.n	80111d4 <_fflush_r+0x58>
 801119c:	686c      	ldr	r4, [r5, #4]
 801119e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d0ef      	beq.n	8011186 <_fflush_r+0xa>
 80111a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80111a8:	07d0      	lsls	r0, r2, #31
 80111aa:	d404      	bmi.n	80111b6 <_fflush_r+0x3a>
 80111ac:	0599      	lsls	r1, r3, #22
 80111ae:	d402      	bmi.n	80111b6 <_fflush_r+0x3a>
 80111b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111b2:	f000 fc88 	bl	8011ac6 <__retarget_lock_acquire_recursive>
 80111b6:	4628      	mov	r0, r5
 80111b8:	4621      	mov	r1, r4
 80111ba:	f7ff ff59 	bl	8011070 <__sflush_r>
 80111be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111c0:	07da      	lsls	r2, r3, #31
 80111c2:	4605      	mov	r5, r0
 80111c4:	d4e0      	bmi.n	8011188 <_fflush_r+0xc>
 80111c6:	89a3      	ldrh	r3, [r4, #12]
 80111c8:	059b      	lsls	r3, r3, #22
 80111ca:	d4dd      	bmi.n	8011188 <_fflush_r+0xc>
 80111cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111ce:	f000 fc7b 	bl	8011ac8 <__retarget_lock_release_recursive>
 80111d2:	e7d9      	b.n	8011188 <_fflush_r+0xc>
 80111d4:	4b05      	ldr	r3, [pc, #20]	; (80111ec <_fflush_r+0x70>)
 80111d6:	429c      	cmp	r4, r3
 80111d8:	d101      	bne.n	80111de <_fflush_r+0x62>
 80111da:	68ac      	ldr	r4, [r5, #8]
 80111dc:	e7df      	b.n	801119e <_fflush_r+0x22>
 80111de:	4b04      	ldr	r3, [pc, #16]	; (80111f0 <_fflush_r+0x74>)
 80111e0:	429c      	cmp	r4, r3
 80111e2:	bf08      	it	eq
 80111e4:	68ec      	ldreq	r4, [r5, #12]
 80111e6:	e7da      	b.n	801119e <_fflush_r+0x22>
 80111e8:	08014adc 	.word	0x08014adc
 80111ec:	08014afc 	.word	0x08014afc
 80111f0:	08014abc 	.word	0x08014abc

080111f4 <std>:
 80111f4:	2300      	movs	r3, #0
 80111f6:	b510      	push	{r4, lr}
 80111f8:	4604      	mov	r4, r0
 80111fa:	e9c0 3300 	strd	r3, r3, [r0]
 80111fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011202:	6083      	str	r3, [r0, #8]
 8011204:	8181      	strh	r1, [r0, #12]
 8011206:	6643      	str	r3, [r0, #100]	; 0x64
 8011208:	81c2      	strh	r2, [r0, #14]
 801120a:	6183      	str	r3, [r0, #24]
 801120c:	4619      	mov	r1, r3
 801120e:	2208      	movs	r2, #8
 8011210:	305c      	adds	r0, #92	; 0x5c
 8011212:	f7fd f8e3 	bl	800e3dc <memset>
 8011216:	4b05      	ldr	r3, [pc, #20]	; (801122c <std+0x38>)
 8011218:	6263      	str	r3, [r4, #36]	; 0x24
 801121a:	4b05      	ldr	r3, [pc, #20]	; (8011230 <std+0x3c>)
 801121c:	62a3      	str	r3, [r4, #40]	; 0x28
 801121e:	4b05      	ldr	r3, [pc, #20]	; (8011234 <std+0x40>)
 8011220:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011222:	4b05      	ldr	r3, [pc, #20]	; (8011238 <std+0x44>)
 8011224:	6224      	str	r4, [r4, #32]
 8011226:	6323      	str	r3, [r4, #48]	; 0x30
 8011228:	bd10      	pop	{r4, pc}
 801122a:	bf00      	nop
 801122c:	0800f2f9 	.word	0x0800f2f9
 8011230:	0800f31f 	.word	0x0800f31f
 8011234:	0800f357 	.word	0x0800f357
 8011238:	0800f37b 	.word	0x0800f37b

0801123c <_cleanup_r>:
 801123c:	4901      	ldr	r1, [pc, #4]	; (8011244 <_cleanup_r+0x8>)
 801123e:	f000 b8af 	b.w	80113a0 <_fwalk_reent>
 8011242:	bf00      	nop
 8011244:	0801117d 	.word	0x0801117d

08011248 <__sfmoreglue>:
 8011248:	b570      	push	{r4, r5, r6, lr}
 801124a:	1e4a      	subs	r2, r1, #1
 801124c:	2568      	movs	r5, #104	; 0x68
 801124e:	4355      	muls	r5, r2
 8011250:	460e      	mov	r6, r1
 8011252:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011256:	f7fd f919 	bl	800e48c <_malloc_r>
 801125a:	4604      	mov	r4, r0
 801125c:	b140      	cbz	r0, 8011270 <__sfmoreglue+0x28>
 801125e:	2100      	movs	r1, #0
 8011260:	e9c0 1600 	strd	r1, r6, [r0]
 8011264:	300c      	adds	r0, #12
 8011266:	60a0      	str	r0, [r4, #8]
 8011268:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801126c:	f7fd f8b6 	bl	800e3dc <memset>
 8011270:	4620      	mov	r0, r4
 8011272:	bd70      	pop	{r4, r5, r6, pc}

08011274 <__sfp_lock_acquire>:
 8011274:	4801      	ldr	r0, [pc, #4]	; (801127c <__sfp_lock_acquire+0x8>)
 8011276:	f000 bc26 	b.w	8011ac6 <__retarget_lock_acquire_recursive>
 801127a:	bf00      	nop
 801127c:	20001894 	.word	0x20001894

08011280 <__sfp_lock_release>:
 8011280:	4801      	ldr	r0, [pc, #4]	; (8011288 <__sfp_lock_release+0x8>)
 8011282:	f000 bc21 	b.w	8011ac8 <__retarget_lock_release_recursive>
 8011286:	bf00      	nop
 8011288:	20001894 	.word	0x20001894

0801128c <__sinit_lock_acquire>:
 801128c:	4801      	ldr	r0, [pc, #4]	; (8011294 <__sinit_lock_acquire+0x8>)
 801128e:	f000 bc1a 	b.w	8011ac6 <__retarget_lock_acquire_recursive>
 8011292:	bf00      	nop
 8011294:	2000188f 	.word	0x2000188f

08011298 <__sinit_lock_release>:
 8011298:	4801      	ldr	r0, [pc, #4]	; (80112a0 <__sinit_lock_release+0x8>)
 801129a:	f000 bc15 	b.w	8011ac8 <__retarget_lock_release_recursive>
 801129e:	bf00      	nop
 80112a0:	2000188f 	.word	0x2000188f

080112a4 <__sinit>:
 80112a4:	b510      	push	{r4, lr}
 80112a6:	4604      	mov	r4, r0
 80112a8:	f7ff fff0 	bl	801128c <__sinit_lock_acquire>
 80112ac:	69a3      	ldr	r3, [r4, #24]
 80112ae:	b11b      	cbz	r3, 80112b8 <__sinit+0x14>
 80112b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112b4:	f7ff bff0 	b.w	8011298 <__sinit_lock_release>
 80112b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80112bc:	6523      	str	r3, [r4, #80]	; 0x50
 80112be:	4b13      	ldr	r3, [pc, #76]	; (801130c <__sinit+0x68>)
 80112c0:	4a13      	ldr	r2, [pc, #76]	; (8011310 <__sinit+0x6c>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80112c6:	42a3      	cmp	r3, r4
 80112c8:	bf04      	itt	eq
 80112ca:	2301      	moveq	r3, #1
 80112cc:	61a3      	streq	r3, [r4, #24]
 80112ce:	4620      	mov	r0, r4
 80112d0:	f000 f820 	bl	8011314 <__sfp>
 80112d4:	6060      	str	r0, [r4, #4]
 80112d6:	4620      	mov	r0, r4
 80112d8:	f000 f81c 	bl	8011314 <__sfp>
 80112dc:	60a0      	str	r0, [r4, #8]
 80112de:	4620      	mov	r0, r4
 80112e0:	f000 f818 	bl	8011314 <__sfp>
 80112e4:	2200      	movs	r2, #0
 80112e6:	60e0      	str	r0, [r4, #12]
 80112e8:	2104      	movs	r1, #4
 80112ea:	6860      	ldr	r0, [r4, #4]
 80112ec:	f7ff ff82 	bl	80111f4 <std>
 80112f0:	68a0      	ldr	r0, [r4, #8]
 80112f2:	2201      	movs	r2, #1
 80112f4:	2109      	movs	r1, #9
 80112f6:	f7ff ff7d 	bl	80111f4 <std>
 80112fa:	68e0      	ldr	r0, [r4, #12]
 80112fc:	2202      	movs	r2, #2
 80112fe:	2112      	movs	r1, #18
 8011300:	f7ff ff78 	bl	80111f4 <std>
 8011304:	2301      	movs	r3, #1
 8011306:	61a3      	str	r3, [r4, #24]
 8011308:	e7d2      	b.n	80112b0 <__sinit+0xc>
 801130a:	bf00      	nop
 801130c:	0801499c 	.word	0x0801499c
 8011310:	0801123d 	.word	0x0801123d

08011314 <__sfp>:
 8011314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011316:	4607      	mov	r7, r0
 8011318:	f7ff ffac 	bl	8011274 <__sfp_lock_acquire>
 801131c:	4b1e      	ldr	r3, [pc, #120]	; (8011398 <__sfp+0x84>)
 801131e:	681e      	ldr	r6, [r3, #0]
 8011320:	69b3      	ldr	r3, [r6, #24]
 8011322:	b913      	cbnz	r3, 801132a <__sfp+0x16>
 8011324:	4630      	mov	r0, r6
 8011326:	f7ff ffbd 	bl	80112a4 <__sinit>
 801132a:	3648      	adds	r6, #72	; 0x48
 801132c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011330:	3b01      	subs	r3, #1
 8011332:	d503      	bpl.n	801133c <__sfp+0x28>
 8011334:	6833      	ldr	r3, [r6, #0]
 8011336:	b30b      	cbz	r3, 801137c <__sfp+0x68>
 8011338:	6836      	ldr	r6, [r6, #0]
 801133a:	e7f7      	b.n	801132c <__sfp+0x18>
 801133c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011340:	b9d5      	cbnz	r5, 8011378 <__sfp+0x64>
 8011342:	4b16      	ldr	r3, [pc, #88]	; (801139c <__sfp+0x88>)
 8011344:	60e3      	str	r3, [r4, #12]
 8011346:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801134a:	6665      	str	r5, [r4, #100]	; 0x64
 801134c:	f000 fbba 	bl	8011ac4 <__retarget_lock_init_recursive>
 8011350:	f7ff ff96 	bl	8011280 <__sfp_lock_release>
 8011354:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011358:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801135c:	6025      	str	r5, [r4, #0]
 801135e:	61a5      	str	r5, [r4, #24]
 8011360:	2208      	movs	r2, #8
 8011362:	4629      	mov	r1, r5
 8011364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011368:	f7fd f838 	bl	800e3dc <memset>
 801136c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011370:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011374:	4620      	mov	r0, r4
 8011376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011378:	3468      	adds	r4, #104	; 0x68
 801137a:	e7d9      	b.n	8011330 <__sfp+0x1c>
 801137c:	2104      	movs	r1, #4
 801137e:	4638      	mov	r0, r7
 8011380:	f7ff ff62 	bl	8011248 <__sfmoreglue>
 8011384:	4604      	mov	r4, r0
 8011386:	6030      	str	r0, [r6, #0]
 8011388:	2800      	cmp	r0, #0
 801138a:	d1d5      	bne.n	8011338 <__sfp+0x24>
 801138c:	f7ff ff78 	bl	8011280 <__sfp_lock_release>
 8011390:	230c      	movs	r3, #12
 8011392:	603b      	str	r3, [r7, #0]
 8011394:	e7ee      	b.n	8011374 <__sfp+0x60>
 8011396:	bf00      	nop
 8011398:	0801499c 	.word	0x0801499c
 801139c:	ffff0001 	.word	0xffff0001

080113a0 <_fwalk_reent>:
 80113a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113a4:	4606      	mov	r6, r0
 80113a6:	4688      	mov	r8, r1
 80113a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80113ac:	2700      	movs	r7, #0
 80113ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80113b2:	f1b9 0901 	subs.w	r9, r9, #1
 80113b6:	d505      	bpl.n	80113c4 <_fwalk_reent+0x24>
 80113b8:	6824      	ldr	r4, [r4, #0]
 80113ba:	2c00      	cmp	r4, #0
 80113bc:	d1f7      	bne.n	80113ae <_fwalk_reent+0xe>
 80113be:	4638      	mov	r0, r7
 80113c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113c4:	89ab      	ldrh	r3, [r5, #12]
 80113c6:	2b01      	cmp	r3, #1
 80113c8:	d907      	bls.n	80113da <_fwalk_reent+0x3a>
 80113ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80113ce:	3301      	adds	r3, #1
 80113d0:	d003      	beq.n	80113da <_fwalk_reent+0x3a>
 80113d2:	4629      	mov	r1, r5
 80113d4:	4630      	mov	r0, r6
 80113d6:	47c0      	blx	r8
 80113d8:	4307      	orrs	r7, r0
 80113da:	3568      	adds	r5, #104	; 0x68
 80113dc:	e7e9      	b.n	80113b2 <_fwalk_reent+0x12>

080113de <rshift>:
 80113de:	6903      	ldr	r3, [r0, #16]
 80113e0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80113e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113e8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80113ec:	f100 0414 	add.w	r4, r0, #20
 80113f0:	dd45      	ble.n	801147e <rshift+0xa0>
 80113f2:	f011 011f 	ands.w	r1, r1, #31
 80113f6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80113fa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80113fe:	d10c      	bne.n	801141a <rshift+0x3c>
 8011400:	f100 0710 	add.w	r7, r0, #16
 8011404:	4629      	mov	r1, r5
 8011406:	42b1      	cmp	r1, r6
 8011408:	d334      	bcc.n	8011474 <rshift+0x96>
 801140a:	1a9b      	subs	r3, r3, r2
 801140c:	009b      	lsls	r3, r3, #2
 801140e:	1eea      	subs	r2, r5, #3
 8011410:	4296      	cmp	r6, r2
 8011412:	bf38      	it	cc
 8011414:	2300      	movcc	r3, #0
 8011416:	4423      	add	r3, r4
 8011418:	e015      	b.n	8011446 <rshift+0x68>
 801141a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801141e:	f1c1 0820 	rsb	r8, r1, #32
 8011422:	40cf      	lsrs	r7, r1
 8011424:	f105 0e04 	add.w	lr, r5, #4
 8011428:	46a1      	mov	r9, r4
 801142a:	4576      	cmp	r6, lr
 801142c:	46f4      	mov	ip, lr
 801142e:	d815      	bhi.n	801145c <rshift+0x7e>
 8011430:	1a9b      	subs	r3, r3, r2
 8011432:	009a      	lsls	r2, r3, #2
 8011434:	3a04      	subs	r2, #4
 8011436:	3501      	adds	r5, #1
 8011438:	42ae      	cmp	r6, r5
 801143a:	bf38      	it	cc
 801143c:	2200      	movcc	r2, #0
 801143e:	18a3      	adds	r3, r4, r2
 8011440:	50a7      	str	r7, [r4, r2]
 8011442:	b107      	cbz	r7, 8011446 <rshift+0x68>
 8011444:	3304      	adds	r3, #4
 8011446:	1b1a      	subs	r2, r3, r4
 8011448:	42a3      	cmp	r3, r4
 801144a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801144e:	bf08      	it	eq
 8011450:	2300      	moveq	r3, #0
 8011452:	6102      	str	r2, [r0, #16]
 8011454:	bf08      	it	eq
 8011456:	6143      	streq	r3, [r0, #20]
 8011458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801145c:	f8dc c000 	ldr.w	ip, [ip]
 8011460:	fa0c fc08 	lsl.w	ip, ip, r8
 8011464:	ea4c 0707 	orr.w	r7, ip, r7
 8011468:	f849 7b04 	str.w	r7, [r9], #4
 801146c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011470:	40cf      	lsrs	r7, r1
 8011472:	e7da      	b.n	801142a <rshift+0x4c>
 8011474:	f851 cb04 	ldr.w	ip, [r1], #4
 8011478:	f847 cf04 	str.w	ip, [r7, #4]!
 801147c:	e7c3      	b.n	8011406 <rshift+0x28>
 801147e:	4623      	mov	r3, r4
 8011480:	e7e1      	b.n	8011446 <rshift+0x68>

08011482 <__hexdig_fun>:
 8011482:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011486:	2b09      	cmp	r3, #9
 8011488:	d802      	bhi.n	8011490 <__hexdig_fun+0xe>
 801148a:	3820      	subs	r0, #32
 801148c:	b2c0      	uxtb	r0, r0
 801148e:	4770      	bx	lr
 8011490:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011494:	2b05      	cmp	r3, #5
 8011496:	d801      	bhi.n	801149c <__hexdig_fun+0x1a>
 8011498:	3847      	subs	r0, #71	; 0x47
 801149a:	e7f7      	b.n	801148c <__hexdig_fun+0xa>
 801149c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80114a0:	2b05      	cmp	r3, #5
 80114a2:	d801      	bhi.n	80114a8 <__hexdig_fun+0x26>
 80114a4:	3827      	subs	r0, #39	; 0x27
 80114a6:	e7f1      	b.n	801148c <__hexdig_fun+0xa>
 80114a8:	2000      	movs	r0, #0
 80114aa:	4770      	bx	lr

080114ac <__gethex>:
 80114ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b0:	ed2d 8b02 	vpush	{d8}
 80114b4:	b089      	sub	sp, #36	; 0x24
 80114b6:	ee08 0a10 	vmov	s16, r0
 80114ba:	9304      	str	r3, [sp, #16]
 80114bc:	4bbc      	ldr	r3, [pc, #752]	; (80117b0 <__gethex+0x304>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	9301      	str	r3, [sp, #4]
 80114c2:	4618      	mov	r0, r3
 80114c4:	468b      	mov	fp, r1
 80114c6:	4690      	mov	r8, r2
 80114c8:	f7ee fe9c 	bl	8000204 <strlen>
 80114cc:	9b01      	ldr	r3, [sp, #4]
 80114ce:	f8db 2000 	ldr.w	r2, [fp]
 80114d2:	4403      	add	r3, r0
 80114d4:	4682      	mov	sl, r0
 80114d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80114da:	9305      	str	r3, [sp, #20]
 80114dc:	1c93      	adds	r3, r2, #2
 80114de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80114e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80114e6:	32fe      	adds	r2, #254	; 0xfe
 80114e8:	18d1      	adds	r1, r2, r3
 80114ea:	461f      	mov	r7, r3
 80114ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80114f0:	9100      	str	r1, [sp, #0]
 80114f2:	2830      	cmp	r0, #48	; 0x30
 80114f4:	d0f8      	beq.n	80114e8 <__gethex+0x3c>
 80114f6:	f7ff ffc4 	bl	8011482 <__hexdig_fun>
 80114fa:	4604      	mov	r4, r0
 80114fc:	2800      	cmp	r0, #0
 80114fe:	d13a      	bne.n	8011576 <__gethex+0xca>
 8011500:	9901      	ldr	r1, [sp, #4]
 8011502:	4652      	mov	r2, sl
 8011504:	4638      	mov	r0, r7
 8011506:	f7fd ff51 	bl	800f3ac <strncmp>
 801150a:	4605      	mov	r5, r0
 801150c:	2800      	cmp	r0, #0
 801150e:	d168      	bne.n	80115e2 <__gethex+0x136>
 8011510:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011514:	eb07 060a 	add.w	r6, r7, sl
 8011518:	f7ff ffb3 	bl	8011482 <__hexdig_fun>
 801151c:	2800      	cmp	r0, #0
 801151e:	d062      	beq.n	80115e6 <__gethex+0x13a>
 8011520:	4633      	mov	r3, r6
 8011522:	7818      	ldrb	r0, [r3, #0]
 8011524:	2830      	cmp	r0, #48	; 0x30
 8011526:	461f      	mov	r7, r3
 8011528:	f103 0301 	add.w	r3, r3, #1
 801152c:	d0f9      	beq.n	8011522 <__gethex+0x76>
 801152e:	f7ff ffa8 	bl	8011482 <__hexdig_fun>
 8011532:	2301      	movs	r3, #1
 8011534:	fab0 f480 	clz	r4, r0
 8011538:	0964      	lsrs	r4, r4, #5
 801153a:	4635      	mov	r5, r6
 801153c:	9300      	str	r3, [sp, #0]
 801153e:	463a      	mov	r2, r7
 8011540:	4616      	mov	r6, r2
 8011542:	3201      	adds	r2, #1
 8011544:	7830      	ldrb	r0, [r6, #0]
 8011546:	f7ff ff9c 	bl	8011482 <__hexdig_fun>
 801154a:	2800      	cmp	r0, #0
 801154c:	d1f8      	bne.n	8011540 <__gethex+0x94>
 801154e:	9901      	ldr	r1, [sp, #4]
 8011550:	4652      	mov	r2, sl
 8011552:	4630      	mov	r0, r6
 8011554:	f7fd ff2a 	bl	800f3ac <strncmp>
 8011558:	b980      	cbnz	r0, 801157c <__gethex+0xd0>
 801155a:	b94d      	cbnz	r5, 8011570 <__gethex+0xc4>
 801155c:	eb06 050a 	add.w	r5, r6, sl
 8011560:	462a      	mov	r2, r5
 8011562:	4616      	mov	r6, r2
 8011564:	3201      	adds	r2, #1
 8011566:	7830      	ldrb	r0, [r6, #0]
 8011568:	f7ff ff8b 	bl	8011482 <__hexdig_fun>
 801156c:	2800      	cmp	r0, #0
 801156e:	d1f8      	bne.n	8011562 <__gethex+0xb6>
 8011570:	1bad      	subs	r5, r5, r6
 8011572:	00ad      	lsls	r5, r5, #2
 8011574:	e004      	b.n	8011580 <__gethex+0xd4>
 8011576:	2400      	movs	r4, #0
 8011578:	4625      	mov	r5, r4
 801157a:	e7e0      	b.n	801153e <__gethex+0x92>
 801157c:	2d00      	cmp	r5, #0
 801157e:	d1f7      	bne.n	8011570 <__gethex+0xc4>
 8011580:	7833      	ldrb	r3, [r6, #0]
 8011582:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011586:	2b50      	cmp	r3, #80	; 0x50
 8011588:	d13b      	bne.n	8011602 <__gethex+0x156>
 801158a:	7873      	ldrb	r3, [r6, #1]
 801158c:	2b2b      	cmp	r3, #43	; 0x2b
 801158e:	d02c      	beq.n	80115ea <__gethex+0x13e>
 8011590:	2b2d      	cmp	r3, #45	; 0x2d
 8011592:	d02e      	beq.n	80115f2 <__gethex+0x146>
 8011594:	1c71      	adds	r1, r6, #1
 8011596:	f04f 0900 	mov.w	r9, #0
 801159a:	7808      	ldrb	r0, [r1, #0]
 801159c:	f7ff ff71 	bl	8011482 <__hexdig_fun>
 80115a0:	1e43      	subs	r3, r0, #1
 80115a2:	b2db      	uxtb	r3, r3
 80115a4:	2b18      	cmp	r3, #24
 80115a6:	d82c      	bhi.n	8011602 <__gethex+0x156>
 80115a8:	f1a0 0210 	sub.w	r2, r0, #16
 80115ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80115b0:	f7ff ff67 	bl	8011482 <__hexdig_fun>
 80115b4:	1e43      	subs	r3, r0, #1
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	2b18      	cmp	r3, #24
 80115ba:	d91d      	bls.n	80115f8 <__gethex+0x14c>
 80115bc:	f1b9 0f00 	cmp.w	r9, #0
 80115c0:	d000      	beq.n	80115c4 <__gethex+0x118>
 80115c2:	4252      	negs	r2, r2
 80115c4:	4415      	add	r5, r2
 80115c6:	f8cb 1000 	str.w	r1, [fp]
 80115ca:	b1e4      	cbz	r4, 8011606 <__gethex+0x15a>
 80115cc:	9b00      	ldr	r3, [sp, #0]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	bf14      	ite	ne
 80115d2:	2700      	movne	r7, #0
 80115d4:	2706      	moveq	r7, #6
 80115d6:	4638      	mov	r0, r7
 80115d8:	b009      	add	sp, #36	; 0x24
 80115da:	ecbd 8b02 	vpop	{d8}
 80115de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e2:	463e      	mov	r6, r7
 80115e4:	4625      	mov	r5, r4
 80115e6:	2401      	movs	r4, #1
 80115e8:	e7ca      	b.n	8011580 <__gethex+0xd4>
 80115ea:	f04f 0900 	mov.w	r9, #0
 80115ee:	1cb1      	adds	r1, r6, #2
 80115f0:	e7d3      	b.n	801159a <__gethex+0xee>
 80115f2:	f04f 0901 	mov.w	r9, #1
 80115f6:	e7fa      	b.n	80115ee <__gethex+0x142>
 80115f8:	230a      	movs	r3, #10
 80115fa:	fb03 0202 	mla	r2, r3, r2, r0
 80115fe:	3a10      	subs	r2, #16
 8011600:	e7d4      	b.n	80115ac <__gethex+0x100>
 8011602:	4631      	mov	r1, r6
 8011604:	e7df      	b.n	80115c6 <__gethex+0x11a>
 8011606:	1bf3      	subs	r3, r6, r7
 8011608:	3b01      	subs	r3, #1
 801160a:	4621      	mov	r1, r4
 801160c:	2b07      	cmp	r3, #7
 801160e:	dc0b      	bgt.n	8011628 <__gethex+0x17c>
 8011610:	ee18 0a10 	vmov	r0, s16
 8011614:	f000 faee 	bl	8011bf4 <_Balloc>
 8011618:	4604      	mov	r4, r0
 801161a:	b940      	cbnz	r0, 801162e <__gethex+0x182>
 801161c:	4b65      	ldr	r3, [pc, #404]	; (80117b4 <__gethex+0x308>)
 801161e:	4602      	mov	r2, r0
 8011620:	21de      	movs	r1, #222	; 0xde
 8011622:	4865      	ldr	r0, [pc, #404]	; (80117b8 <__gethex+0x30c>)
 8011624:	f001 fea0 	bl	8013368 <__assert_func>
 8011628:	3101      	adds	r1, #1
 801162a:	105b      	asrs	r3, r3, #1
 801162c:	e7ee      	b.n	801160c <__gethex+0x160>
 801162e:	f100 0914 	add.w	r9, r0, #20
 8011632:	f04f 0b00 	mov.w	fp, #0
 8011636:	f1ca 0301 	rsb	r3, sl, #1
 801163a:	f8cd 9008 	str.w	r9, [sp, #8]
 801163e:	f8cd b000 	str.w	fp, [sp]
 8011642:	9306      	str	r3, [sp, #24]
 8011644:	42b7      	cmp	r7, r6
 8011646:	d340      	bcc.n	80116ca <__gethex+0x21e>
 8011648:	9802      	ldr	r0, [sp, #8]
 801164a:	9b00      	ldr	r3, [sp, #0]
 801164c:	f840 3b04 	str.w	r3, [r0], #4
 8011650:	eba0 0009 	sub.w	r0, r0, r9
 8011654:	1080      	asrs	r0, r0, #2
 8011656:	0146      	lsls	r6, r0, #5
 8011658:	6120      	str	r0, [r4, #16]
 801165a:	4618      	mov	r0, r3
 801165c:	f000 fbc0 	bl	8011de0 <__hi0bits>
 8011660:	1a30      	subs	r0, r6, r0
 8011662:	f8d8 6000 	ldr.w	r6, [r8]
 8011666:	42b0      	cmp	r0, r6
 8011668:	dd63      	ble.n	8011732 <__gethex+0x286>
 801166a:	1b87      	subs	r7, r0, r6
 801166c:	4639      	mov	r1, r7
 801166e:	4620      	mov	r0, r4
 8011670:	f000 ff5a 	bl	8012528 <__any_on>
 8011674:	4682      	mov	sl, r0
 8011676:	b1a8      	cbz	r0, 80116a4 <__gethex+0x1f8>
 8011678:	1e7b      	subs	r3, r7, #1
 801167a:	1159      	asrs	r1, r3, #5
 801167c:	f003 021f 	and.w	r2, r3, #31
 8011680:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011684:	f04f 0a01 	mov.w	sl, #1
 8011688:	fa0a f202 	lsl.w	r2, sl, r2
 801168c:	420a      	tst	r2, r1
 801168e:	d009      	beq.n	80116a4 <__gethex+0x1f8>
 8011690:	4553      	cmp	r3, sl
 8011692:	dd05      	ble.n	80116a0 <__gethex+0x1f4>
 8011694:	1eb9      	subs	r1, r7, #2
 8011696:	4620      	mov	r0, r4
 8011698:	f000 ff46 	bl	8012528 <__any_on>
 801169c:	2800      	cmp	r0, #0
 801169e:	d145      	bne.n	801172c <__gethex+0x280>
 80116a0:	f04f 0a02 	mov.w	sl, #2
 80116a4:	4639      	mov	r1, r7
 80116a6:	4620      	mov	r0, r4
 80116a8:	f7ff fe99 	bl	80113de <rshift>
 80116ac:	443d      	add	r5, r7
 80116ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80116b2:	42ab      	cmp	r3, r5
 80116b4:	da4c      	bge.n	8011750 <__gethex+0x2a4>
 80116b6:	ee18 0a10 	vmov	r0, s16
 80116ba:	4621      	mov	r1, r4
 80116bc:	f000 fada 	bl	8011c74 <_Bfree>
 80116c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80116c2:	2300      	movs	r3, #0
 80116c4:	6013      	str	r3, [r2, #0]
 80116c6:	27a3      	movs	r7, #163	; 0xa3
 80116c8:	e785      	b.n	80115d6 <__gethex+0x12a>
 80116ca:	1e73      	subs	r3, r6, #1
 80116cc:	9a05      	ldr	r2, [sp, #20]
 80116ce:	9303      	str	r3, [sp, #12]
 80116d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80116d4:	4293      	cmp	r3, r2
 80116d6:	d019      	beq.n	801170c <__gethex+0x260>
 80116d8:	f1bb 0f20 	cmp.w	fp, #32
 80116dc:	d107      	bne.n	80116ee <__gethex+0x242>
 80116de:	9b02      	ldr	r3, [sp, #8]
 80116e0:	9a00      	ldr	r2, [sp, #0]
 80116e2:	f843 2b04 	str.w	r2, [r3], #4
 80116e6:	9302      	str	r3, [sp, #8]
 80116e8:	2300      	movs	r3, #0
 80116ea:	9300      	str	r3, [sp, #0]
 80116ec:	469b      	mov	fp, r3
 80116ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80116f2:	f7ff fec6 	bl	8011482 <__hexdig_fun>
 80116f6:	9b00      	ldr	r3, [sp, #0]
 80116f8:	f000 000f 	and.w	r0, r0, #15
 80116fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8011700:	4303      	orrs	r3, r0
 8011702:	9300      	str	r3, [sp, #0]
 8011704:	f10b 0b04 	add.w	fp, fp, #4
 8011708:	9b03      	ldr	r3, [sp, #12]
 801170a:	e00d      	b.n	8011728 <__gethex+0x27c>
 801170c:	9b03      	ldr	r3, [sp, #12]
 801170e:	9a06      	ldr	r2, [sp, #24]
 8011710:	4413      	add	r3, r2
 8011712:	42bb      	cmp	r3, r7
 8011714:	d3e0      	bcc.n	80116d8 <__gethex+0x22c>
 8011716:	4618      	mov	r0, r3
 8011718:	9901      	ldr	r1, [sp, #4]
 801171a:	9307      	str	r3, [sp, #28]
 801171c:	4652      	mov	r2, sl
 801171e:	f7fd fe45 	bl	800f3ac <strncmp>
 8011722:	9b07      	ldr	r3, [sp, #28]
 8011724:	2800      	cmp	r0, #0
 8011726:	d1d7      	bne.n	80116d8 <__gethex+0x22c>
 8011728:	461e      	mov	r6, r3
 801172a:	e78b      	b.n	8011644 <__gethex+0x198>
 801172c:	f04f 0a03 	mov.w	sl, #3
 8011730:	e7b8      	b.n	80116a4 <__gethex+0x1f8>
 8011732:	da0a      	bge.n	801174a <__gethex+0x29e>
 8011734:	1a37      	subs	r7, r6, r0
 8011736:	4621      	mov	r1, r4
 8011738:	ee18 0a10 	vmov	r0, s16
 801173c:	463a      	mov	r2, r7
 801173e:	f000 fcb5 	bl	80120ac <__lshift>
 8011742:	1bed      	subs	r5, r5, r7
 8011744:	4604      	mov	r4, r0
 8011746:	f100 0914 	add.w	r9, r0, #20
 801174a:	f04f 0a00 	mov.w	sl, #0
 801174e:	e7ae      	b.n	80116ae <__gethex+0x202>
 8011750:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011754:	42a8      	cmp	r0, r5
 8011756:	dd72      	ble.n	801183e <__gethex+0x392>
 8011758:	1b45      	subs	r5, r0, r5
 801175a:	42ae      	cmp	r6, r5
 801175c:	dc36      	bgt.n	80117cc <__gethex+0x320>
 801175e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011762:	2b02      	cmp	r3, #2
 8011764:	d02a      	beq.n	80117bc <__gethex+0x310>
 8011766:	2b03      	cmp	r3, #3
 8011768:	d02c      	beq.n	80117c4 <__gethex+0x318>
 801176a:	2b01      	cmp	r3, #1
 801176c:	d115      	bne.n	801179a <__gethex+0x2ee>
 801176e:	42ae      	cmp	r6, r5
 8011770:	d113      	bne.n	801179a <__gethex+0x2ee>
 8011772:	2e01      	cmp	r6, #1
 8011774:	d10b      	bne.n	801178e <__gethex+0x2e2>
 8011776:	9a04      	ldr	r2, [sp, #16]
 8011778:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801177c:	6013      	str	r3, [r2, #0]
 801177e:	2301      	movs	r3, #1
 8011780:	6123      	str	r3, [r4, #16]
 8011782:	f8c9 3000 	str.w	r3, [r9]
 8011786:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011788:	2762      	movs	r7, #98	; 0x62
 801178a:	601c      	str	r4, [r3, #0]
 801178c:	e723      	b.n	80115d6 <__gethex+0x12a>
 801178e:	1e71      	subs	r1, r6, #1
 8011790:	4620      	mov	r0, r4
 8011792:	f000 fec9 	bl	8012528 <__any_on>
 8011796:	2800      	cmp	r0, #0
 8011798:	d1ed      	bne.n	8011776 <__gethex+0x2ca>
 801179a:	ee18 0a10 	vmov	r0, s16
 801179e:	4621      	mov	r1, r4
 80117a0:	f000 fa68 	bl	8011c74 <_Bfree>
 80117a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80117a6:	2300      	movs	r3, #0
 80117a8:	6013      	str	r3, [r2, #0]
 80117aa:	2750      	movs	r7, #80	; 0x50
 80117ac:	e713      	b.n	80115d6 <__gethex+0x12a>
 80117ae:	bf00      	nop
 80117b0:	08014b88 	.word	0x08014b88
 80117b4:	08014aab 	.word	0x08014aab
 80117b8:	08014b1c 	.word	0x08014b1c
 80117bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d1eb      	bne.n	801179a <__gethex+0x2ee>
 80117c2:	e7d8      	b.n	8011776 <__gethex+0x2ca>
 80117c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d1d5      	bne.n	8011776 <__gethex+0x2ca>
 80117ca:	e7e6      	b.n	801179a <__gethex+0x2ee>
 80117cc:	1e6f      	subs	r7, r5, #1
 80117ce:	f1ba 0f00 	cmp.w	sl, #0
 80117d2:	d131      	bne.n	8011838 <__gethex+0x38c>
 80117d4:	b127      	cbz	r7, 80117e0 <__gethex+0x334>
 80117d6:	4639      	mov	r1, r7
 80117d8:	4620      	mov	r0, r4
 80117da:	f000 fea5 	bl	8012528 <__any_on>
 80117de:	4682      	mov	sl, r0
 80117e0:	117b      	asrs	r3, r7, #5
 80117e2:	2101      	movs	r1, #1
 80117e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80117e8:	f007 071f 	and.w	r7, r7, #31
 80117ec:	fa01 f707 	lsl.w	r7, r1, r7
 80117f0:	421f      	tst	r7, r3
 80117f2:	4629      	mov	r1, r5
 80117f4:	4620      	mov	r0, r4
 80117f6:	bf18      	it	ne
 80117f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80117fc:	1b76      	subs	r6, r6, r5
 80117fe:	f7ff fdee 	bl	80113de <rshift>
 8011802:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011806:	2702      	movs	r7, #2
 8011808:	f1ba 0f00 	cmp.w	sl, #0
 801180c:	d048      	beq.n	80118a0 <__gethex+0x3f4>
 801180e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011812:	2b02      	cmp	r3, #2
 8011814:	d015      	beq.n	8011842 <__gethex+0x396>
 8011816:	2b03      	cmp	r3, #3
 8011818:	d017      	beq.n	801184a <__gethex+0x39e>
 801181a:	2b01      	cmp	r3, #1
 801181c:	d109      	bne.n	8011832 <__gethex+0x386>
 801181e:	f01a 0f02 	tst.w	sl, #2
 8011822:	d006      	beq.n	8011832 <__gethex+0x386>
 8011824:	f8d9 0000 	ldr.w	r0, [r9]
 8011828:	ea4a 0a00 	orr.w	sl, sl, r0
 801182c:	f01a 0f01 	tst.w	sl, #1
 8011830:	d10e      	bne.n	8011850 <__gethex+0x3a4>
 8011832:	f047 0710 	orr.w	r7, r7, #16
 8011836:	e033      	b.n	80118a0 <__gethex+0x3f4>
 8011838:	f04f 0a01 	mov.w	sl, #1
 801183c:	e7d0      	b.n	80117e0 <__gethex+0x334>
 801183e:	2701      	movs	r7, #1
 8011840:	e7e2      	b.n	8011808 <__gethex+0x35c>
 8011842:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011844:	f1c3 0301 	rsb	r3, r3, #1
 8011848:	9315      	str	r3, [sp, #84]	; 0x54
 801184a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801184c:	2b00      	cmp	r3, #0
 801184e:	d0f0      	beq.n	8011832 <__gethex+0x386>
 8011850:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011854:	f104 0314 	add.w	r3, r4, #20
 8011858:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801185c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011860:	f04f 0c00 	mov.w	ip, #0
 8011864:	4618      	mov	r0, r3
 8011866:	f853 2b04 	ldr.w	r2, [r3], #4
 801186a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801186e:	d01c      	beq.n	80118aa <__gethex+0x3fe>
 8011870:	3201      	adds	r2, #1
 8011872:	6002      	str	r2, [r0, #0]
 8011874:	2f02      	cmp	r7, #2
 8011876:	f104 0314 	add.w	r3, r4, #20
 801187a:	d13f      	bne.n	80118fc <__gethex+0x450>
 801187c:	f8d8 2000 	ldr.w	r2, [r8]
 8011880:	3a01      	subs	r2, #1
 8011882:	42b2      	cmp	r2, r6
 8011884:	d10a      	bne.n	801189c <__gethex+0x3f0>
 8011886:	1171      	asrs	r1, r6, #5
 8011888:	2201      	movs	r2, #1
 801188a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801188e:	f006 061f 	and.w	r6, r6, #31
 8011892:	fa02 f606 	lsl.w	r6, r2, r6
 8011896:	421e      	tst	r6, r3
 8011898:	bf18      	it	ne
 801189a:	4617      	movne	r7, r2
 801189c:	f047 0720 	orr.w	r7, r7, #32
 80118a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80118a2:	601c      	str	r4, [r3, #0]
 80118a4:	9b04      	ldr	r3, [sp, #16]
 80118a6:	601d      	str	r5, [r3, #0]
 80118a8:	e695      	b.n	80115d6 <__gethex+0x12a>
 80118aa:	4299      	cmp	r1, r3
 80118ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80118b0:	d8d8      	bhi.n	8011864 <__gethex+0x3b8>
 80118b2:	68a3      	ldr	r3, [r4, #8]
 80118b4:	459b      	cmp	fp, r3
 80118b6:	db19      	blt.n	80118ec <__gethex+0x440>
 80118b8:	6861      	ldr	r1, [r4, #4]
 80118ba:	ee18 0a10 	vmov	r0, s16
 80118be:	3101      	adds	r1, #1
 80118c0:	f000 f998 	bl	8011bf4 <_Balloc>
 80118c4:	4681      	mov	r9, r0
 80118c6:	b918      	cbnz	r0, 80118d0 <__gethex+0x424>
 80118c8:	4b1a      	ldr	r3, [pc, #104]	; (8011934 <__gethex+0x488>)
 80118ca:	4602      	mov	r2, r0
 80118cc:	2184      	movs	r1, #132	; 0x84
 80118ce:	e6a8      	b.n	8011622 <__gethex+0x176>
 80118d0:	6922      	ldr	r2, [r4, #16]
 80118d2:	3202      	adds	r2, #2
 80118d4:	f104 010c 	add.w	r1, r4, #12
 80118d8:	0092      	lsls	r2, r2, #2
 80118da:	300c      	adds	r0, #12
 80118dc:	f7fc fd70 	bl	800e3c0 <memcpy>
 80118e0:	4621      	mov	r1, r4
 80118e2:	ee18 0a10 	vmov	r0, s16
 80118e6:	f000 f9c5 	bl	8011c74 <_Bfree>
 80118ea:	464c      	mov	r4, r9
 80118ec:	6923      	ldr	r3, [r4, #16]
 80118ee:	1c5a      	adds	r2, r3, #1
 80118f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80118f4:	6122      	str	r2, [r4, #16]
 80118f6:	2201      	movs	r2, #1
 80118f8:	615a      	str	r2, [r3, #20]
 80118fa:	e7bb      	b.n	8011874 <__gethex+0x3c8>
 80118fc:	6922      	ldr	r2, [r4, #16]
 80118fe:	455a      	cmp	r2, fp
 8011900:	dd0b      	ble.n	801191a <__gethex+0x46e>
 8011902:	2101      	movs	r1, #1
 8011904:	4620      	mov	r0, r4
 8011906:	f7ff fd6a 	bl	80113de <rshift>
 801190a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801190e:	3501      	adds	r5, #1
 8011910:	42ab      	cmp	r3, r5
 8011912:	f6ff aed0 	blt.w	80116b6 <__gethex+0x20a>
 8011916:	2701      	movs	r7, #1
 8011918:	e7c0      	b.n	801189c <__gethex+0x3f0>
 801191a:	f016 061f 	ands.w	r6, r6, #31
 801191e:	d0fa      	beq.n	8011916 <__gethex+0x46a>
 8011920:	449a      	add	sl, r3
 8011922:	f1c6 0620 	rsb	r6, r6, #32
 8011926:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801192a:	f000 fa59 	bl	8011de0 <__hi0bits>
 801192e:	42b0      	cmp	r0, r6
 8011930:	dbe7      	blt.n	8011902 <__gethex+0x456>
 8011932:	e7f0      	b.n	8011916 <__gethex+0x46a>
 8011934:	08014aab 	.word	0x08014aab

08011938 <L_shift>:
 8011938:	f1c2 0208 	rsb	r2, r2, #8
 801193c:	0092      	lsls	r2, r2, #2
 801193e:	b570      	push	{r4, r5, r6, lr}
 8011940:	f1c2 0620 	rsb	r6, r2, #32
 8011944:	6843      	ldr	r3, [r0, #4]
 8011946:	6804      	ldr	r4, [r0, #0]
 8011948:	fa03 f506 	lsl.w	r5, r3, r6
 801194c:	432c      	orrs	r4, r5
 801194e:	40d3      	lsrs	r3, r2
 8011950:	6004      	str	r4, [r0, #0]
 8011952:	f840 3f04 	str.w	r3, [r0, #4]!
 8011956:	4288      	cmp	r0, r1
 8011958:	d3f4      	bcc.n	8011944 <L_shift+0xc>
 801195a:	bd70      	pop	{r4, r5, r6, pc}

0801195c <__match>:
 801195c:	b530      	push	{r4, r5, lr}
 801195e:	6803      	ldr	r3, [r0, #0]
 8011960:	3301      	adds	r3, #1
 8011962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011966:	b914      	cbnz	r4, 801196e <__match+0x12>
 8011968:	6003      	str	r3, [r0, #0]
 801196a:	2001      	movs	r0, #1
 801196c:	bd30      	pop	{r4, r5, pc}
 801196e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011972:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011976:	2d19      	cmp	r5, #25
 8011978:	bf98      	it	ls
 801197a:	3220      	addls	r2, #32
 801197c:	42a2      	cmp	r2, r4
 801197e:	d0f0      	beq.n	8011962 <__match+0x6>
 8011980:	2000      	movs	r0, #0
 8011982:	e7f3      	b.n	801196c <__match+0x10>

08011984 <__hexnan>:
 8011984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011988:	680b      	ldr	r3, [r1, #0]
 801198a:	6801      	ldr	r1, [r0, #0]
 801198c:	115e      	asrs	r6, r3, #5
 801198e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011992:	f013 031f 	ands.w	r3, r3, #31
 8011996:	b087      	sub	sp, #28
 8011998:	bf18      	it	ne
 801199a:	3604      	addne	r6, #4
 801199c:	2500      	movs	r5, #0
 801199e:	1f37      	subs	r7, r6, #4
 80119a0:	4682      	mov	sl, r0
 80119a2:	4690      	mov	r8, r2
 80119a4:	9301      	str	r3, [sp, #4]
 80119a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80119aa:	46b9      	mov	r9, r7
 80119ac:	463c      	mov	r4, r7
 80119ae:	9502      	str	r5, [sp, #8]
 80119b0:	46ab      	mov	fp, r5
 80119b2:	784a      	ldrb	r2, [r1, #1]
 80119b4:	1c4b      	adds	r3, r1, #1
 80119b6:	9303      	str	r3, [sp, #12]
 80119b8:	b342      	cbz	r2, 8011a0c <__hexnan+0x88>
 80119ba:	4610      	mov	r0, r2
 80119bc:	9105      	str	r1, [sp, #20]
 80119be:	9204      	str	r2, [sp, #16]
 80119c0:	f7ff fd5f 	bl	8011482 <__hexdig_fun>
 80119c4:	2800      	cmp	r0, #0
 80119c6:	d14f      	bne.n	8011a68 <__hexnan+0xe4>
 80119c8:	9a04      	ldr	r2, [sp, #16]
 80119ca:	9905      	ldr	r1, [sp, #20]
 80119cc:	2a20      	cmp	r2, #32
 80119ce:	d818      	bhi.n	8011a02 <__hexnan+0x7e>
 80119d0:	9b02      	ldr	r3, [sp, #8]
 80119d2:	459b      	cmp	fp, r3
 80119d4:	dd13      	ble.n	80119fe <__hexnan+0x7a>
 80119d6:	454c      	cmp	r4, r9
 80119d8:	d206      	bcs.n	80119e8 <__hexnan+0x64>
 80119da:	2d07      	cmp	r5, #7
 80119dc:	dc04      	bgt.n	80119e8 <__hexnan+0x64>
 80119de:	462a      	mov	r2, r5
 80119e0:	4649      	mov	r1, r9
 80119e2:	4620      	mov	r0, r4
 80119e4:	f7ff ffa8 	bl	8011938 <L_shift>
 80119e8:	4544      	cmp	r4, r8
 80119ea:	d950      	bls.n	8011a8e <__hexnan+0x10a>
 80119ec:	2300      	movs	r3, #0
 80119ee:	f1a4 0904 	sub.w	r9, r4, #4
 80119f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80119f6:	f8cd b008 	str.w	fp, [sp, #8]
 80119fa:	464c      	mov	r4, r9
 80119fc:	461d      	mov	r5, r3
 80119fe:	9903      	ldr	r1, [sp, #12]
 8011a00:	e7d7      	b.n	80119b2 <__hexnan+0x2e>
 8011a02:	2a29      	cmp	r2, #41	; 0x29
 8011a04:	d156      	bne.n	8011ab4 <__hexnan+0x130>
 8011a06:	3102      	adds	r1, #2
 8011a08:	f8ca 1000 	str.w	r1, [sl]
 8011a0c:	f1bb 0f00 	cmp.w	fp, #0
 8011a10:	d050      	beq.n	8011ab4 <__hexnan+0x130>
 8011a12:	454c      	cmp	r4, r9
 8011a14:	d206      	bcs.n	8011a24 <__hexnan+0xa0>
 8011a16:	2d07      	cmp	r5, #7
 8011a18:	dc04      	bgt.n	8011a24 <__hexnan+0xa0>
 8011a1a:	462a      	mov	r2, r5
 8011a1c:	4649      	mov	r1, r9
 8011a1e:	4620      	mov	r0, r4
 8011a20:	f7ff ff8a 	bl	8011938 <L_shift>
 8011a24:	4544      	cmp	r4, r8
 8011a26:	d934      	bls.n	8011a92 <__hexnan+0x10e>
 8011a28:	f1a8 0204 	sub.w	r2, r8, #4
 8011a2c:	4623      	mov	r3, r4
 8011a2e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011a32:	f842 1f04 	str.w	r1, [r2, #4]!
 8011a36:	429f      	cmp	r7, r3
 8011a38:	d2f9      	bcs.n	8011a2e <__hexnan+0xaa>
 8011a3a:	1b3b      	subs	r3, r7, r4
 8011a3c:	f023 0303 	bic.w	r3, r3, #3
 8011a40:	3304      	adds	r3, #4
 8011a42:	3401      	adds	r4, #1
 8011a44:	3e03      	subs	r6, #3
 8011a46:	42b4      	cmp	r4, r6
 8011a48:	bf88      	it	hi
 8011a4a:	2304      	movhi	r3, #4
 8011a4c:	4443      	add	r3, r8
 8011a4e:	2200      	movs	r2, #0
 8011a50:	f843 2b04 	str.w	r2, [r3], #4
 8011a54:	429f      	cmp	r7, r3
 8011a56:	d2fb      	bcs.n	8011a50 <__hexnan+0xcc>
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	b91b      	cbnz	r3, 8011a64 <__hexnan+0xe0>
 8011a5c:	4547      	cmp	r7, r8
 8011a5e:	d127      	bne.n	8011ab0 <__hexnan+0x12c>
 8011a60:	2301      	movs	r3, #1
 8011a62:	603b      	str	r3, [r7, #0]
 8011a64:	2005      	movs	r0, #5
 8011a66:	e026      	b.n	8011ab6 <__hexnan+0x132>
 8011a68:	3501      	adds	r5, #1
 8011a6a:	2d08      	cmp	r5, #8
 8011a6c:	f10b 0b01 	add.w	fp, fp, #1
 8011a70:	dd06      	ble.n	8011a80 <__hexnan+0xfc>
 8011a72:	4544      	cmp	r4, r8
 8011a74:	d9c3      	bls.n	80119fe <__hexnan+0x7a>
 8011a76:	2300      	movs	r3, #0
 8011a78:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a7c:	2501      	movs	r5, #1
 8011a7e:	3c04      	subs	r4, #4
 8011a80:	6822      	ldr	r2, [r4, #0]
 8011a82:	f000 000f 	and.w	r0, r0, #15
 8011a86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011a8a:	6022      	str	r2, [r4, #0]
 8011a8c:	e7b7      	b.n	80119fe <__hexnan+0x7a>
 8011a8e:	2508      	movs	r5, #8
 8011a90:	e7b5      	b.n	80119fe <__hexnan+0x7a>
 8011a92:	9b01      	ldr	r3, [sp, #4]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d0df      	beq.n	8011a58 <__hexnan+0xd4>
 8011a98:	f04f 32ff 	mov.w	r2, #4294967295
 8011a9c:	f1c3 0320 	rsb	r3, r3, #32
 8011aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8011aa4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011aa8:	401a      	ands	r2, r3
 8011aaa:	f846 2c04 	str.w	r2, [r6, #-4]
 8011aae:	e7d3      	b.n	8011a58 <__hexnan+0xd4>
 8011ab0:	3f04      	subs	r7, #4
 8011ab2:	e7d1      	b.n	8011a58 <__hexnan+0xd4>
 8011ab4:	2004      	movs	r0, #4
 8011ab6:	b007      	add	sp, #28
 8011ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011abc <_localeconv_r>:
 8011abc:	4800      	ldr	r0, [pc, #0]	; (8011ac0 <_localeconv_r+0x4>)
 8011abe:	4770      	bx	lr
 8011ac0:	20000180 	.word	0x20000180

08011ac4 <__retarget_lock_init_recursive>:
 8011ac4:	4770      	bx	lr

08011ac6 <__retarget_lock_acquire_recursive>:
 8011ac6:	4770      	bx	lr

08011ac8 <__retarget_lock_release_recursive>:
 8011ac8:	4770      	bx	lr
	...

08011acc <_lseek_r>:
 8011acc:	b538      	push	{r3, r4, r5, lr}
 8011ace:	4d07      	ldr	r5, [pc, #28]	; (8011aec <_lseek_r+0x20>)
 8011ad0:	4604      	mov	r4, r0
 8011ad2:	4608      	mov	r0, r1
 8011ad4:	4611      	mov	r1, r2
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	602a      	str	r2, [r5, #0]
 8011ada:	461a      	mov	r2, r3
 8011adc:	f7f2 fcf4 	bl	80044c8 <_lseek>
 8011ae0:	1c43      	adds	r3, r0, #1
 8011ae2:	d102      	bne.n	8011aea <_lseek_r+0x1e>
 8011ae4:	682b      	ldr	r3, [r5, #0]
 8011ae6:	b103      	cbz	r3, 8011aea <_lseek_r+0x1e>
 8011ae8:	6023      	str	r3, [r4, #0]
 8011aea:	bd38      	pop	{r3, r4, r5, pc}
 8011aec:	20001898 	.word	0x20001898

08011af0 <__swhatbuf_r>:
 8011af0:	b570      	push	{r4, r5, r6, lr}
 8011af2:	460e      	mov	r6, r1
 8011af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011af8:	2900      	cmp	r1, #0
 8011afa:	b096      	sub	sp, #88	; 0x58
 8011afc:	4614      	mov	r4, r2
 8011afe:	461d      	mov	r5, r3
 8011b00:	da07      	bge.n	8011b12 <__swhatbuf_r+0x22>
 8011b02:	2300      	movs	r3, #0
 8011b04:	602b      	str	r3, [r5, #0]
 8011b06:	89b3      	ldrh	r3, [r6, #12]
 8011b08:	061a      	lsls	r2, r3, #24
 8011b0a:	d410      	bmi.n	8011b2e <__swhatbuf_r+0x3e>
 8011b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b10:	e00e      	b.n	8011b30 <__swhatbuf_r+0x40>
 8011b12:	466a      	mov	r2, sp
 8011b14:	f001 fc58 	bl	80133c8 <_fstat_r>
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	dbf2      	blt.n	8011b02 <__swhatbuf_r+0x12>
 8011b1c:	9a01      	ldr	r2, [sp, #4]
 8011b1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011b22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011b26:	425a      	negs	r2, r3
 8011b28:	415a      	adcs	r2, r3
 8011b2a:	602a      	str	r2, [r5, #0]
 8011b2c:	e7ee      	b.n	8011b0c <__swhatbuf_r+0x1c>
 8011b2e:	2340      	movs	r3, #64	; 0x40
 8011b30:	2000      	movs	r0, #0
 8011b32:	6023      	str	r3, [r4, #0]
 8011b34:	b016      	add	sp, #88	; 0x58
 8011b36:	bd70      	pop	{r4, r5, r6, pc}

08011b38 <__smakebuf_r>:
 8011b38:	898b      	ldrh	r3, [r1, #12]
 8011b3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b3c:	079d      	lsls	r5, r3, #30
 8011b3e:	4606      	mov	r6, r0
 8011b40:	460c      	mov	r4, r1
 8011b42:	d507      	bpl.n	8011b54 <__smakebuf_r+0x1c>
 8011b44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b48:	6023      	str	r3, [r4, #0]
 8011b4a:	6123      	str	r3, [r4, #16]
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	6163      	str	r3, [r4, #20]
 8011b50:	b002      	add	sp, #8
 8011b52:	bd70      	pop	{r4, r5, r6, pc}
 8011b54:	ab01      	add	r3, sp, #4
 8011b56:	466a      	mov	r2, sp
 8011b58:	f7ff ffca 	bl	8011af0 <__swhatbuf_r>
 8011b5c:	9900      	ldr	r1, [sp, #0]
 8011b5e:	4605      	mov	r5, r0
 8011b60:	4630      	mov	r0, r6
 8011b62:	f7fc fc93 	bl	800e48c <_malloc_r>
 8011b66:	b948      	cbnz	r0, 8011b7c <__smakebuf_r+0x44>
 8011b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b6c:	059a      	lsls	r2, r3, #22
 8011b6e:	d4ef      	bmi.n	8011b50 <__smakebuf_r+0x18>
 8011b70:	f023 0303 	bic.w	r3, r3, #3
 8011b74:	f043 0302 	orr.w	r3, r3, #2
 8011b78:	81a3      	strh	r3, [r4, #12]
 8011b7a:	e7e3      	b.n	8011b44 <__smakebuf_r+0xc>
 8011b7c:	4b0d      	ldr	r3, [pc, #52]	; (8011bb4 <__smakebuf_r+0x7c>)
 8011b7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b80:	89a3      	ldrh	r3, [r4, #12]
 8011b82:	6020      	str	r0, [r4, #0]
 8011b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b88:	81a3      	strh	r3, [r4, #12]
 8011b8a:	9b00      	ldr	r3, [sp, #0]
 8011b8c:	6163      	str	r3, [r4, #20]
 8011b8e:	9b01      	ldr	r3, [sp, #4]
 8011b90:	6120      	str	r0, [r4, #16]
 8011b92:	b15b      	cbz	r3, 8011bac <__smakebuf_r+0x74>
 8011b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b98:	4630      	mov	r0, r6
 8011b9a:	f001 fc27 	bl	80133ec <_isatty_r>
 8011b9e:	b128      	cbz	r0, 8011bac <__smakebuf_r+0x74>
 8011ba0:	89a3      	ldrh	r3, [r4, #12]
 8011ba2:	f023 0303 	bic.w	r3, r3, #3
 8011ba6:	f043 0301 	orr.w	r3, r3, #1
 8011baa:	81a3      	strh	r3, [r4, #12]
 8011bac:	89a0      	ldrh	r0, [r4, #12]
 8011bae:	4305      	orrs	r5, r0
 8011bb0:	81a5      	strh	r5, [r4, #12]
 8011bb2:	e7cd      	b.n	8011b50 <__smakebuf_r+0x18>
 8011bb4:	0801123d 	.word	0x0801123d

08011bb8 <__ascii_mbtowc>:
 8011bb8:	b082      	sub	sp, #8
 8011bba:	b901      	cbnz	r1, 8011bbe <__ascii_mbtowc+0x6>
 8011bbc:	a901      	add	r1, sp, #4
 8011bbe:	b142      	cbz	r2, 8011bd2 <__ascii_mbtowc+0x1a>
 8011bc0:	b14b      	cbz	r3, 8011bd6 <__ascii_mbtowc+0x1e>
 8011bc2:	7813      	ldrb	r3, [r2, #0]
 8011bc4:	600b      	str	r3, [r1, #0]
 8011bc6:	7812      	ldrb	r2, [r2, #0]
 8011bc8:	1e10      	subs	r0, r2, #0
 8011bca:	bf18      	it	ne
 8011bcc:	2001      	movne	r0, #1
 8011bce:	b002      	add	sp, #8
 8011bd0:	4770      	bx	lr
 8011bd2:	4610      	mov	r0, r2
 8011bd4:	e7fb      	b.n	8011bce <__ascii_mbtowc+0x16>
 8011bd6:	f06f 0001 	mvn.w	r0, #1
 8011bda:	e7f8      	b.n	8011bce <__ascii_mbtowc+0x16>

08011bdc <__malloc_lock>:
 8011bdc:	4801      	ldr	r0, [pc, #4]	; (8011be4 <__malloc_lock+0x8>)
 8011bde:	f7ff bf72 	b.w	8011ac6 <__retarget_lock_acquire_recursive>
 8011be2:	bf00      	nop
 8011be4:	20001890 	.word	0x20001890

08011be8 <__malloc_unlock>:
 8011be8:	4801      	ldr	r0, [pc, #4]	; (8011bf0 <__malloc_unlock+0x8>)
 8011bea:	f7ff bf6d 	b.w	8011ac8 <__retarget_lock_release_recursive>
 8011bee:	bf00      	nop
 8011bf0:	20001890 	.word	0x20001890

08011bf4 <_Balloc>:
 8011bf4:	b570      	push	{r4, r5, r6, lr}
 8011bf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011bf8:	4604      	mov	r4, r0
 8011bfa:	460d      	mov	r5, r1
 8011bfc:	b976      	cbnz	r6, 8011c1c <_Balloc+0x28>
 8011bfe:	2010      	movs	r0, #16
 8011c00:	f7fc fbd6 	bl	800e3b0 <malloc>
 8011c04:	4602      	mov	r2, r0
 8011c06:	6260      	str	r0, [r4, #36]	; 0x24
 8011c08:	b920      	cbnz	r0, 8011c14 <_Balloc+0x20>
 8011c0a:	4b18      	ldr	r3, [pc, #96]	; (8011c6c <_Balloc+0x78>)
 8011c0c:	4818      	ldr	r0, [pc, #96]	; (8011c70 <_Balloc+0x7c>)
 8011c0e:	2166      	movs	r1, #102	; 0x66
 8011c10:	f001 fbaa 	bl	8013368 <__assert_func>
 8011c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c18:	6006      	str	r6, [r0, #0]
 8011c1a:	60c6      	str	r6, [r0, #12]
 8011c1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011c1e:	68f3      	ldr	r3, [r6, #12]
 8011c20:	b183      	cbz	r3, 8011c44 <_Balloc+0x50>
 8011c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c24:	68db      	ldr	r3, [r3, #12]
 8011c26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011c2a:	b9b8      	cbnz	r0, 8011c5c <_Balloc+0x68>
 8011c2c:	2101      	movs	r1, #1
 8011c2e:	fa01 f605 	lsl.w	r6, r1, r5
 8011c32:	1d72      	adds	r2, r6, #5
 8011c34:	0092      	lsls	r2, r2, #2
 8011c36:	4620      	mov	r0, r4
 8011c38:	f000 fc97 	bl	801256a <_calloc_r>
 8011c3c:	b160      	cbz	r0, 8011c58 <_Balloc+0x64>
 8011c3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011c42:	e00e      	b.n	8011c62 <_Balloc+0x6e>
 8011c44:	2221      	movs	r2, #33	; 0x21
 8011c46:	2104      	movs	r1, #4
 8011c48:	4620      	mov	r0, r4
 8011c4a:	f000 fc8e 	bl	801256a <_calloc_r>
 8011c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c50:	60f0      	str	r0, [r6, #12]
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d1e4      	bne.n	8011c22 <_Balloc+0x2e>
 8011c58:	2000      	movs	r0, #0
 8011c5a:	bd70      	pop	{r4, r5, r6, pc}
 8011c5c:	6802      	ldr	r2, [r0, #0]
 8011c5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011c62:	2300      	movs	r3, #0
 8011c64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011c68:	e7f7      	b.n	8011c5a <_Balloc+0x66>
 8011c6a:	bf00      	nop
 8011c6c:	08014a35 	.word	0x08014a35
 8011c70:	08014b9c 	.word	0x08014b9c

08011c74 <_Bfree>:
 8011c74:	b570      	push	{r4, r5, r6, lr}
 8011c76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011c78:	4605      	mov	r5, r0
 8011c7a:	460c      	mov	r4, r1
 8011c7c:	b976      	cbnz	r6, 8011c9c <_Bfree+0x28>
 8011c7e:	2010      	movs	r0, #16
 8011c80:	f7fc fb96 	bl	800e3b0 <malloc>
 8011c84:	4602      	mov	r2, r0
 8011c86:	6268      	str	r0, [r5, #36]	; 0x24
 8011c88:	b920      	cbnz	r0, 8011c94 <_Bfree+0x20>
 8011c8a:	4b09      	ldr	r3, [pc, #36]	; (8011cb0 <_Bfree+0x3c>)
 8011c8c:	4809      	ldr	r0, [pc, #36]	; (8011cb4 <_Bfree+0x40>)
 8011c8e:	218a      	movs	r1, #138	; 0x8a
 8011c90:	f001 fb6a 	bl	8013368 <__assert_func>
 8011c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c98:	6006      	str	r6, [r0, #0]
 8011c9a:	60c6      	str	r6, [r0, #12]
 8011c9c:	b13c      	cbz	r4, 8011cae <_Bfree+0x3a>
 8011c9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011ca0:	6862      	ldr	r2, [r4, #4]
 8011ca2:	68db      	ldr	r3, [r3, #12]
 8011ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011ca8:	6021      	str	r1, [r4, #0]
 8011caa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011cae:	bd70      	pop	{r4, r5, r6, pc}
 8011cb0:	08014a35 	.word	0x08014a35
 8011cb4:	08014b9c 	.word	0x08014b9c

08011cb8 <__multadd>:
 8011cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cbc:	690e      	ldr	r6, [r1, #16]
 8011cbe:	4607      	mov	r7, r0
 8011cc0:	4698      	mov	r8, r3
 8011cc2:	460c      	mov	r4, r1
 8011cc4:	f101 0014 	add.w	r0, r1, #20
 8011cc8:	2300      	movs	r3, #0
 8011cca:	6805      	ldr	r5, [r0, #0]
 8011ccc:	b2a9      	uxth	r1, r5
 8011cce:	fb02 8101 	mla	r1, r2, r1, r8
 8011cd2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011cd6:	0c2d      	lsrs	r5, r5, #16
 8011cd8:	fb02 c505 	mla	r5, r2, r5, ip
 8011cdc:	b289      	uxth	r1, r1
 8011cde:	3301      	adds	r3, #1
 8011ce0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011ce4:	429e      	cmp	r6, r3
 8011ce6:	f840 1b04 	str.w	r1, [r0], #4
 8011cea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011cee:	dcec      	bgt.n	8011cca <__multadd+0x12>
 8011cf0:	f1b8 0f00 	cmp.w	r8, #0
 8011cf4:	d022      	beq.n	8011d3c <__multadd+0x84>
 8011cf6:	68a3      	ldr	r3, [r4, #8]
 8011cf8:	42b3      	cmp	r3, r6
 8011cfa:	dc19      	bgt.n	8011d30 <__multadd+0x78>
 8011cfc:	6861      	ldr	r1, [r4, #4]
 8011cfe:	4638      	mov	r0, r7
 8011d00:	3101      	adds	r1, #1
 8011d02:	f7ff ff77 	bl	8011bf4 <_Balloc>
 8011d06:	4605      	mov	r5, r0
 8011d08:	b928      	cbnz	r0, 8011d16 <__multadd+0x5e>
 8011d0a:	4602      	mov	r2, r0
 8011d0c:	4b0d      	ldr	r3, [pc, #52]	; (8011d44 <__multadd+0x8c>)
 8011d0e:	480e      	ldr	r0, [pc, #56]	; (8011d48 <__multadd+0x90>)
 8011d10:	21b5      	movs	r1, #181	; 0xb5
 8011d12:	f001 fb29 	bl	8013368 <__assert_func>
 8011d16:	6922      	ldr	r2, [r4, #16]
 8011d18:	3202      	adds	r2, #2
 8011d1a:	f104 010c 	add.w	r1, r4, #12
 8011d1e:	0092      	lsls	r2, r2, #2
 8011d20:	300c      	adds	r0, #12
 8011d22:	f7fc fb4d 	bl	800e3c0 <memcpy>
 8011d26:	4621      	mov	r1, r4
 8011d28:	4638      	mov	r0, r7
 8011d2a:	f7ff ffa3 	bl	8011c74 <_Bfree>
 8011d2e:	462c      	mov	r4, r5
 8011d30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011d34:	3601      	adds	r6, #1
 8011d36:	f8c3 8014 	str.w	r8, [r3, #20]
 8011d3a:	6126      	str	r6, [r4, #16]
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d42:	bf00      	nop
 8011d44:	08014aab 	.word	0x08014aab
 8011d48:	08014b9c 	.word	0x08014b9c

08011d4c <__s2b>:
 8011d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d50:	460c      	mov	r4, r1
 8011d52:	4615      	mov	r5, r2
 8011d54:	461f      	mov	r7, r3
 8011d56:	2209      	movs	r2, #9
 8011d58:	3308      	adds	r3, #8
 8011d5a:	4606      	mov	r6, r0
 8011d5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d60:	2100      	movs	r1, #0
 8011d62:	2201      	movs	r2, #1
 8011d64:	429a      	cmp	r2, r3
 8011d66:	db09      	blt.n	8011d7c <__s2b+0x30>
 8011d68:	4630      	mov	r0, r6
 8011d6a:	f7ff ff43 	bl	8011bf4 <_Balloc>
 8011d6e:	b940      	cbnz	r0, 8011d82 <__s2b+0x36>
 8011d70:	4602      	mov	r2, r0
 8011d72:	4b19      	ldr	r3, [pc, #100]	; (8011dd8 <__s2b+0x8c>)
 8011d74:	4819      	ldr	r0, [pc, #100]	; (8011ddc <__s2b+0x90>)
 8011d76:	21ce      	movs	r1, #206	; 0xce
 8011d78:	f001 faf6 	bl	8013368 <__assert_func>
 8011d7c:	0052      	lsls	r2, r2, #1
 8011d7e:	3101      	adds	r1, #1
 8011d80:	e7f0      	b.n	8011d64 <__s2b+0x18>
 8011d82:	9b08      	ldr	r3, [sp, #32]
 8011d84:	6143      	str	r3, [r0, #20]
 8011d86:	2d09      	cmp	r5, #9
 8011d88:	f04f 0301 	mov.w	r3, #1
 8011d8c:	6103      	str	r3, [r0, #16]
 8011d8e:	dd16      	ble.n	8011dbe <__s2b+0x72>
 8011d90:	f104 0909 	add.w	r9, r4, #9
 8011d94:	46c8      	mov	r8, r9
 8011d96:	442c      	add	r4, r5
 8011d98:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011d9c:	4601      	mov	r1, r0
 8011d9e:	3b30      	subs	r3, #48	; 0x30
 8011da0:	220a      	movs	r2, #10
 8011da2:	4630      	mov	r0, r6
 8011da4:	f7ff ff88 	bl	8011cb8 <__multadd>
 8011da8:	45a0      	cmp	r8, r4
 8011daa:	d1f5      	bne.n	8011d98 <__s2b+0x4c>
 8011dac:	f1a5 0408 	sub.w	r4, r5, #8
 8011db0:	444c      	add	r4, r9
 8011db2:	1b2d      	subs	r5, r5, r4
 8011db4:	1963      	adds	r3, r4, r5
 8011db6:	42bb      	cmp	r3, r7
 8011db8:	db04      	blt.n	8011dc4 <__s2b+0x78>
 8011dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dbe:	340a      	adds	r4, #10
 8011dc0:	2509      	movs	r5, #9
 8011dc2:	e7f6      	b.n	8011db2 <__s2b+0x66>
 8011dc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011dc8:	4601      	mov	r1, r0
 8011dca:	3b30      	subs	r3, #48	; 0x30
 8011dcc:	220a      	movs	r2, #10
 8011dce:	4630      	mov	r0, r6
 8011dd0:	f7ff ff72 	bl	8011cb8 <__multadd>
 8011dd4:	e7ee      	b.n	8011db4 <__s2b+0x68>
 8011dd6:	bf00      	nop
 8011dd8:	08014aab 	.word	0x08014aab
 8011ddc:	08014b9c 	.word	0x08014b9c

08011de0 <__hi0bits>:
 8011de0:	0c03      	lsrs	r3, r0, #16
 8011de2:	041b      	lsls	r3, r3, #16
 8011de4:	b9d3      	cbnz	r3, 8011e1c <__hi0bits+0x3c>
 8011de6:	0400      	lsls	r0, r0, #16
 8011de8:	2310      	movs	r3, #16
 8011dea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011dee:	bf04      	itt	eq
 8011df0:	0200      	lsleq	r0, r0, #8
 8011df2:	3308      	addeq	r3, #8
 8011df4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011df8:	bf04      	itt	eq
 8011dfa:	0100      	lsleq	r0, r0, #4
 8011dfc:	3304      	addeq	r3, #4
 8011dfe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011e02:	bf04      	itt	eq
 8011e04:	0080      	lsleq	r0, r0, #2
 8011e06:	3302      	addeq	r3, #2
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	db05      	blt.n	8011e18 <__hi0bits+0x38>
 8011e0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011e10:	f103 0301 	add.w	r3, r3, #1
 8011e14:	bf08      	it	eq
 8011e16:	2320      	moveq	r3, #32
 8011e18:	4618      	mov	r0, r3
 8011e1a:	4770      	bx	lr
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	e7e4      	b.n	8011dea <__hi0bits+0xa>

08011e20 <__lo0bits>:
 8011e20:	6803      	ldr	r3, [r0, #0]
 8011e22:	f013 0207 	ands.w	r2, r3, #7
 8011e26:	4601      	mov	r1, r0
 8011e28:	d00b      	beq.n	8011e42 <__lo0bits+0x22>
 8011e2a:	07da      	lsls	r2, r3, #31
 8011e2c:	d424      	bmi.n	8011e78 <__lo0bits+0x58>
 8011e2e:	0798      	lsls	r0, r3, #30
 8011e30:	bf49      	itett	mi
 8011e32:	085b      	lsrmi	r3, r3, #1
 8011e34:	089b      	lsrpl	r3, r3, #2
 8011e36:	2001      	movmi	r0, #1
 8011e38:	600b      	strmi	r3, [r1, #0]
 8011e3a:	bf5c      	itt	pl
 8011e3c:	600b      	strpl	r3, [r1, #0]
 8011e3e:	2002      	movpl	r0, #2
 8011e40:	4770      	bx	lr
 8011e42:	b298      	uxth	r0, r3
 8011e44:	b9b0      	cbnz	r0, 8011e74 <__lo0bits+0x54>
 8011e46:	0c1b      	lsrs	r3, r3, #16
 8011e48:	2010      	movs	r0, #16
 8011e4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011e4e:	bf04      	itt	eq
 8011e50:	0a1b      	lsreq	r3, r3, #8
 8011e52:	3008      	addeq	r0, #8
 8011e54:	071a      	lsls	r2, r3, #28
 8011e56:	bf04      	itt	eq
 8011e58:	091b      	lsreq	r3, r3, #4
 8011e5a:	3004      	addeq	r0, #4
 8011e5c:	079a      	lsls	r2, r3, #30
 8011e5e:	bf04      	itt	eq
 8011e60:	089b      	lsreq	r3, r3, #2
 8011e62:	3002      	addeq	r0, #2
 8011e64:	07da      	lsls	r2, r3, #31
 8011e66:	d403      	bmi.n	8011e70 <__lo0bits+0x50>
 8011e68:	085b      	lsrs	r3, r3, #1
 8011e6a:	f100 0001 	add.w	r0, r0, #1
 8011e6e:	d005      	beq.n	8011e7c <__lo0bits+0x5c>
 8011e70:	600b      	str	r3, [r1, #0]
 8011e72:	4770      	bx	lr
 8011e74:	4610      	mov	r0, r2
 8011e76:	e7e8      	b.n	8011e4a <__lo0bits+0x2a>
 8011e78:	2000      	movs	r0, #0
 8011e7a:	4770      	bx	lr
 8011e7c:	2020      	movs	r0, #32
 8011e7e:	4770      	bx	lr

08011e80 <__i2b>:
 8011e80:	b510      	push	{r4, lr}
 8011e82:	460c      	mov	r4, r1
 8011e84:	2101      	movs	r1, #1
 8011e86:	f7ff feb5 	bl	8011bf4 <_Balloc>
 8011e8a:	4602      	mov	r2, r0
 8011e8c:	b928      	cbnz	r0, 8011e9a <__i2b+0x1a>
 8011e8e:	4b05      	ldr	r3, [pc, #20]	; (8011ea4 <__i2b+0x24>)
 8011e90:	4805      	ldr	r0, [pc, #20]	; (8011ea8 <__i2b+0x28>)
 8011e92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011e96:	f001 fa67 	bl	8013368 <__assert_func>
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	6144      	str	r4, [r0, #20]
 8011e9e:	6103      	str	r3, [r0, #16]
 8011ea0:	bd10      	pop	{r4, pc}
 8011ea2:	bf00      	nop
 8011ea4:	08014aab 	.word	0x08014aab
 8011ea8:	08014b9c 	.word	0x08014b9c

08011eac <__multiply>:
 8011eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb0:	4614      	mov	r4, r2
 8011eb2:	690a      	ldr	r2, [r1, #16]
 8011eb4:	6923      	ldr	r3, [r4, #16]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	bfb8      	it	lt
 8011eba:	460b      	movlt	r3, r1
 8011ebc:	460d      	mov	r5, r1
 8011ebe:	bfbc      	itt	lt
 8011ec0:	4625      	movlt	r5, r4
 8011ec2:	461c      	movlt	r4, r3
 8011ec4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011ec8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011ecc:	68ab      	ldr	r3, [r5, #8]
 8011ece:	6869      	ldr	r1, [r5, #4]
 8011ed0:	eb0a 0709 	add.w	r7, sl, r9
 8011ed4:	42bb      	cmp	r3, r7
 8011ed6:	b085      	sub	sp, #20
 8011ed8:	bfb8      	it	lt
 8011eda:	3101      	addlt	r1, #1
 8011edc:	f7ff fe8a 	bl	8011bf4 <_Balloc>
 8011ee0:	b930      	cbnz	r0, 8011ef0 <__multiply+0x44>
 8011ee2:	4602      	mov	r2, r0
 8011ee4:	4b42      	ldr	r3, [pc, #264]	; (8011ff0 <__multiply+0x144>)
 8011ee6:	4843      	ldr	r0, [pc, #268]	; (8011ff4 <__multiply+0x148>)
 8011ee8:	f240 115d 	movw	r1, #349	; 0x15d
 8011eec:	f001 fa3c 	bl	8013368 <__assert_func>
 8011ef0:	f100 0614 	add.w	r6, r0, #20
 8011ef4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011ef8:	4633      	mov	r3, r6
 8011efa:	2200      	movs	r2, #0
 8011efc:	4543      	cmp	r3, r8
 8011efe:	d31e      	bcc.n	8011f3e <__multiply+0x92>
 8011f00:	f105 0c14 	add.w	ip, r5, #20
 8011f04:	f104 0314 	add.w	r3, r4, #20
 8011f08:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011f0c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011f10:	9202      	str	r2, [sp, #8]
 8011f12:	ebac 0205 	sub.w	r2, ip, r5
 8011f16:	3a15      	subs	r2, #21
 8011f18:	f022 0203 	bic.w	r2, r2, #3
 8011f1c:	3204      	adds	r2, #4
 8011f1e:	f105 0115 	add.w	r1, r5, #21
 8011f22:	458c      	cmp	ip, r1
 8011f24:	bf38      	it	cc
 8011f26:	2204      	movcc	r2, #4
 8011f28:	9201      	str	r2, [sp, #4]
 8011f2a:	9a02      	ldr	r2, [sp, #8]
 8011f2c:	9303      	str	r3, [sp, #12]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d808      	bhi.n	8011f44 <__multiply+0x98>
 8011f32:	2f00      	cmp	r7, #0
 8011f34:	dc55      	bgt.n	8011fe2 <__multiply+0x136>
 8011f36:	6107      	str	r7, [r0, #16]
 8011f38:	b005      	add	sp, #20
 8011f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f3e:	f843 2b04 	str.w	r2, [r3], #4
 8011f42:	e7db      	b.n	8011efc <__multiply+0x50>
 8011f44:	f8b3 a000 	ldrh.w	sl, [r3]
 8011f48:	f1ba 0f00 	cmp.w	sl, #0
 8011f4c:	d020      	beq.n	8011f90 <__multiply+0xe4>
 8011f4e:	f105 0e14 	add.w	lr, r5, #20
 8011f52:	46b1      	mov	r9, r6
 8011f54:	2200      	movs	r2, #0
 8011f56:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011f5a:	f8d9 b000 	ldr.w	fp, [r9]
 8011f5e:	b2a1      	uxth	r1, r4
 8011f60:	fa1f fb8b 	uxth.w	fp, fp
 8011f64:	fb0a b101 	mla	r1, sl, r1, fp
 8011f68:	4411      	add	r1, r2
 8011f6a:	f8d9 2000 	ldr.w	r2, [r9]
 8011f6e:	0c24      	lsrs	r4, r4, #16
 8011f70:	0c12      	lsrs	r2, r2, #16
 8011f72:	fb0a 2404 	mla	r4, sl, r4, r2
 8011f76:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011f7a:	b289      	uxth	r1, r1
 8011f7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011f80:	45f4      	cmp	ip, lr
 8011f82:	f849 1b04 	str.w	r1, [r9], #4
 8011f86:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011f8a:	d8e4      	bhi.n	8011f56 <__multiply+0xaa>
 8011f8c:	9901      	ldr	r1, [sp, #4]
 8011f8e:	5072      	str	r2, [r6, r1]
 8011f90:	9a03      	ldr	r2, [sp, #12]
 8011f92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011f96:	3304      	adds	r3, #4
 8011f98:	f1b9 0f00 	cmp.w	r9, #0
 8011f9c:	d01f      	beq.n	8011fde <__multiply+0x132>
 8011f9e:	6834      	ldr	r4, [r6, #0]
 8011fa0:	f105 0114 	add.w	r1, r5, #20
 8011fa4:	46b6      	mov	lr, r6
 8011fa6:	f04f 0a00 	mov.w	sl, #0
 8011faa:	880a      	ldrh	r2, [r1, #0]
 8011fac:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011fb0:	fb09 b202 	mla	r2, r9, r2, fp
 8011fb4:	4492      	add	sl, r2
 8011fb6:	b2a4      	uxth	r4, r4
 8011fb8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011fbc:	f84e 4b04 	str.w	r4, [lr], #4
 8011fc0:	f851 4b04 	ldr.w	r4, [r1], #4
 8011fc4:	f8be 2000 	ldrh.w	r2, [lr]
 8011fc8:	0c24      	lsrs	r4, r4, #16
 8011fca:	fb09 2404 	mla	r4, r9, r4, r2
 8011fce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011fd2:	458c      	cmp	ip, r1
 8011fd4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011fd8:	d8e7      	bhi.n	8011faa <__multiply+0xfe>
 8011fda:	9a01      	ldr	r2, [sp, #4]
 8011fdc:	50b4      	str	r4, [r6, r2]
 8011fde:	3604      	adds	r6, #4
 8011fe0:	e7a3      	b.n	8011f2a <__multiply+0x7e>
 8011fe2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d1a5      	bne.n	8011f36 <__multiply+0x8a>
 8011fea:	3f01      	subs	r7, #1
 8011fec:	e7a1      	b.n	8011f32 <__multiply+0x86>
 8011fee:	bf00      	nop
 8011ff0:	08014aab 	.word	0x08014aab
 8011ff4:	08014b9c 	.word	0x08014b9c

08011ff8 <__pow5mult>:
 8011ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ffc:	4615      	mov	r5, r2
 8011ffe:	f012 0203 	ands.w	r2, r2, #3
 8012002:	4606      	mov	r6, r0
 8012004:	460f      	mov	r7, r1
 8012006:	d007      	beq.n	8012018 <__pow5mult+0x20>
 8012008:	4c25      	ldr	r4, [pc, #148]	; (80120a0 <__pow5mult+0xa8>)
 801200a:	3a01      	subs	r2, #1
 801200c:	2300      	movs	r3, #0
 801200e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012012:	f7ff fe51 	bl	8011cb8 <__multadd>
 8012016:	4607      	mov	r7, r0
 8012018:	10ad      	asrs	r5, r5, #2
 801201a:	d03d      	beq.n	8012098 <__pow5mult+0xa0>
 801201c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801201e:	b97c      	cbnz	r4, 8012040 <__pow5mult+0x48>
 8012020:	2010      	movs	r0, #16
 8012022:	f7fc f9c5 	bl	800e3b0 <malloc>
 8012026:	4602      	mov	r2, r0
 8012028:	6270      	str	r0, [r6, #36]	; 0x24
 801202a:	b928      	cbnz	r0, 8012038 <__pow5mult+0x40>
 801202c:	4b1d      	ldr	r3, [pc, #116]	; (80120a4 <__pow5mult+0xac>)
 801202e:	481e      	ldr	r0, [pc, #120]	; (80120a8 <__pow5mult+0xb0>)
 8012030:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012034:	f001 f998 	bl	8013368 <__assert_func>
 8012038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801203c:	6004      	str	r4, [r0, #0]
 801203e:	60c4      	str	r4, [r0, #12]
 8012040:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012048:	b94c      	cbnz	r4, 801205e <__pow5mult+0x66>
 801204a:	f240 2171 	movw	r1, #625	; 0x271
 801204e:	4630      	mov	r0, r6
 8012050:	f7ff ff16 	bl	8011e80 <__i2b>
 8012054:	2300      	movs	r3, #0
 8012056:	f8c8 0008 	str.w	r0, [r8, #8]
 801205a:	4604      	mov	r4, r0
 801205c:	6003      	str	r3, [r0, #0]
 801205e:	f04f 0900 	mov.w	r9, #0
 8012062:	07eb      	lsls	r3, r5, #31
 8012064:	d50a      	bpl.n	801207c <__pow5mult+0x84>
 8012066:	4639      	mov	r1, r7
 8012068:	4622      	mov	r2, r4
 801206a:	4630      	mov	r0, r6
 801206c:	f7ff ff1e 	bl	8011eac <__multiply>
 8012070:	4639      	mov	r1, r7
 8012072:	4680      	mov	r8, r0
 8012074:	4630      	mov	r0, r6
 8012076:	f7ff fdfd 	bl	8011c74 <_Bfree>
 801207a:	4647      	mov	r7, r8
 801207c:	106d      	asrs	r5, r5, #1
 801207e:	d00b      	beq.n	8012098 <__pow5mult+0xa0>
 8012080:	6820      	ldr	r0, [r4, #0]
 8012082:	b938      	cbnz	r0, 8012094 <__pow5mult+0x9c>
 8012084:	4622      	mov	r2, r4
 8012086:	4621      	mov	r1, r4
 8012088:	4630      	mov	r0, r6
 801208a:	f7ff ff0f 	bl	8011eac <__multiply>
 801208e:	6020      	str	r0, [r4, #0]
 8012090:	f8c0 9000 	str.w	r9, [r0]
 8012094:	4604      	mov	r4, r0
 8012096:	e7e4      	b.n	8012062 <__pow5mult+0x6a>
 8012098:	4638      	mov	r0, r7
 801209a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801209e:	bf00      	nop
 80120a0:	08014cf0 	.word	0x08014cf0
 80120a4:	08014a35 	.word	0x08014a35
 80120a8:	08014b9c 	.word	0x08014b9c

080120ac <__lshift>:
 80120ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120b0:	460c      	mov	r4, r1
 80120b2:	6849      	ldr	r1, [r1, #4]
 80120b4:	6923      	ldr	r3, [r4, #16]
 80120b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80120ba:	68a3      	ldr	r3, [r4, #8]
 80120bc:	4607      	mov	r7, r0
 80120be:	4691      	mov	r9, r2
 80120c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80120c4:	f108 0601 	add.w	r6, r8, #1
 80120c8:	42b3      	cmp	r3, r6
 80120ca:	db0b      	blt.n	80120e4 <__lshift+0x38>
 80120cc:	4638      	mov	r0, r7
 80120ce:	f7ff fd91 	bl	8011bf4 <_Balloc>
 80120d2:	4605      	mov	r5, r0
 80120d4:	b948      	cbnz	r0, 80120ea <__lshift+0x3e>
 80120d6:	4602      	mov	r2, r0
 80120d8:	4b28      	ldr	r3, [pc, #160]	; (801217c <__lshift+0xd0>)
 80120da:	4829      	ldr	r0, [pc, #164]	; (8012180 <__lshift+0xd4>)
 80120dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80120e0:	f001 f942 	bl	8013368 <__assert_func>
 80120e4:	3101      	adds	r1, #1
 80120e6:	005b      	lsls	r3, r3, #1
 80120e8:	e7ee      	b.n	80120c8 <__lshift+0x1c>
 80120ea:	2300      	movs	r3, #0
 80120ec:	f100 0114 	add.w	r1, r0, #20
 80120f0:	f100 0210 	add.w	r2, r0, #16
 80120f4:	4618      	mov	r0, r3
 80120f6:	4553      	cmp	r3, sl
 80120f8:	db33      	blt.n	8012162 <__lshift+0xb6>
 80120fa:	6920      	ldr	r0, [r4, #16]
 80120fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012100:	f104 0314 	add.w	r3, r4, #20
 8012104:	f019 091f 	ands.w	r9, r9, #31
 8012108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801210c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012110:	d02b      	beq.n	801216a <__lshift+0xbe>
 8012112:	f1c9 0e20 	rsb	lr, r9, #32
 8012116:	468a      	mov	sl, r1
 8012118:	2200      	movs	r2, #0
 801211a:	6818      	ldr	r0, [r3, #0]
 801211c:	fa00 f009 	lsl.w	r0, r0, r9
 8012120:	4302      	orrs	r2, r0
 8012122:	f84a 2b04 	str.w	r2, [sl], #4
 8012126:	f853 2b04 	ldr.w	r2, [r3], #4
 801212a:	459c      	cmp	ip, r3
 801212c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012130:	d8f3      	bhi.n	801211a <__lshift+0x6e>
 8012132:	ebac 0304 	sub.w	r3, ip, r4
 8012136:	3b15      	subs	r3, #21
 8012138:	f023 0303 	bic.w	r3, r3, #3
 801213c:	3304      	adds	r3, #4
 801213e:	f104 0015 	add.w	r0, r4, #21
 8012142:	4584      	cmp	ip, r0
 8012144:	bf38      	it	cc
 8012146:	2304      	movcc	r3, #4
 8012148:	50ca      	str	r2, [r1, r3]
 801214a:	b10a      	cbz	r2, 8012150 <__lshift+0xa4>
 801214c:	f108 0602 	add.w	r6, r8, #2
 8012150:	3e01      	subs	r6, #1
 8012152:	4638      	mov	r0, r7
 8012154:	612e      	str	r6, [r5, #16]
 8012156:	4621      	mov	r1, r4
 8012158:	f7ff fd8c 	bl	8011c74 <_Bfree>
 801215c:	4628      	mov	r0, r5
 801215e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012162:	f842 0f04 	str.w	r0, [r2, #4]!
 8012166:	3301      	adds	r3, #1
 8012168:	e7c5      	b.n	80120f6 <__lshift+0x4a>
 801216a:	3904      	subs	r1, #4
 801216c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012170:	f841 2f04 	str.w	r2, [r1, #4]!
 8012174:	459c      	cmp	ip, r3
 8012176:	d8f9      	bhi.n	801216c <__lshift+0xc0>
 8012178:	e7ea      	b.n	8012150 <__lshift+0xa4>
 801217a:	bf00      	nop
 801217c:	08014aab 	.word	0x08014aab
 8012180:	08014b9c 	.word	0x08014b9c

08012184 <__mcmp>:
 8012184:	b530      	push	{r4, r5, lr}
 8012186:	6902      	ldr	r2, [r0, #16]
 8012188:	690c      	ldr	r4, [r1, #16]
 801218a:	1b12      	subs	r2, r2, r4
 801218c:	d10e      	bne.n	80121ac <__mcmp+0x28>
 801218e:	f100 0314 	add.w	r3, r0, #20
 8012192:	3114      	adds	r1, #20
 8012194:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012198:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801219c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80121a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80121a4:	42a5      	cmp	r5, r4
 80121a6:	d003      	beq.n	80121b0 <__mcmp+0x2c>
 80121a8:	d305      	bcc.n	80121b6 <__mcmp+0x32>
 80121aa:	2201      	movs	r2, #1
 80121ac:	4610      	mov	r0, r2
 80121ae:	bd30      	pop	{r4, r5, pc}
 80121b0:	4283      	cmp	r3, r0
 80121b2:	d3f3      	bcc.n	801219c <__mcmp+0x18>
 80121b4:	e7fa      	b.n	80121ac <__mcmp+0x28>
 80121b6:	f04f 32ff 	mov.w	r2, #4294967295
 80121ba:	e7f7      	b.n	80121ac <__mcmp+0x28>

080121bc <__mdiff>:
 80121bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c0:	460c      	mov	r4, r1
 80121c2:	4606      	mov	r6, r0
 80121c4:	4611      	mov	r1, r2
 80121c6:	4620      	mov	r0, r4
 80121c8:	4617      	mov	r7, r2
 80121ca:	f7ff ffdb 	bl	8012184 <__mcmp>
 80121ce:	1e05      	subs	r5, r0, #0
 80121d0:	d110      	bne.n	80121f4 <__mdiff+0x38>
 80121d2:	4629      	mov	r1, r5
 80121d4:	4630      	mov	r0, r6
 80121d6:	f7ff fd0d 	bl	8011bf4 <_Balloc>
 80121da:	b930      	cbnz	r0, 80121ea <__mdiff+0x2e>
 80121dc:	4b39      	ldr	r3, [pc, #228]	; (80122c4 <__mdiff+0x108>)
 80121de:	4602      	mov	r2, r0
 80121e0:	f240 2132 	movw	r1, #562	; 0x232
 80121e4:	4838      	ldr	r0, [pc, #224]	; (80122c8 <__mdiff+0x10c>)
 80121e6:	f001 f8bf 	bl	8013368 <__assert_func>
 80121ea:	2301      	movs	r3, #1
 80121ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80121f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121f4:	bfa4      	itt	ge
 80121f6:	463b      	movge	r3, r7
 80121f8:	4627      	movge	r7, r4
 80121fa:	4630      	mov	r0, r6
 80121fc:	6879      	ldr	r1, [r7, #4]
 80121fe:	bfa6      	itte	ge
 8012200:	461c      	movge	r4, r3
 8012202:	2500      	movge	r5, #0
 8012204:	2501      	movlt	r5, #1
 8012206:	f7ff fcf5 	bl	8011bf4 <_Balloc>
 801220a:	b920      	cbnz	r0, 8012216 <__mdiff+0x5a>
 801220c:	4b2d      	ldr	r3, [pc, #180]	; (80122c4 <__mdiff+0x108>)
 801220e:	4602      	mov	r2, r0
 8012210:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012214:	e7e6      	b.n	80121e4 <__mdiff+0x28>
 8012216:	693e      	ldr	r6, [r7, #16]
 8012218:	60c5      	str	r5, [r0, #12]
 801221a:	6925      	ldr	r5, [r4, #16]
 801221c:	f107 0114 	add.w	r1, r7, #20
 8012220:	f104 0914 	add.w	r9, r4, #20
 8012224:	f100 0e14 	add.w	lr, r0, #20
 8012228:	f107 0210 	add.w	r2, r7, #16
 801222c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012230:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012234:	46f2      	mov	sl, lr
 8012236:	2700      	movs	r7, #0
 8012238:	f859 3b04 	ldr.w	r3, [r9], #4
 801223c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012240:	fa1f f883 	uxth.w	r8, r3
 8012244:	fa17 f78b 	uxtah	r7, r7, fp
 8012248:	0c1b      	lsrs	r3, r3, #16
 801224a:	eba7 0808 	sub.w	r8, r7, r8
 801224e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012252:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012256:	fa1f f888 	uxth.w	r8, r8
 801225a:	141f      	asrs	r7, r3, #16
 801225c:	454d      	cmp	r5, r9
 801225e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012262:	f84a 3b04 	str.w	r3, [sl], #4
 8012266:	d8e7      	bhi.n	8012238 <__mdiff+0x7c>
 8012268:	1b2b      	subs	r3, r5, r4
 801226a:	3b15      	subs	r3, #21
 801226c:	f023 0303 	bic.w	r3, r3, #3
 8012270:	3304      	adds	r3, #4
 8012272:	3415      	adds	r4, #21
 8012274:	42a5      	cmp	r5, r4
 8012276:	bf38      	it	cc
 8012278:	2304      	movcc	r3, #4
 801227a:	4419      	add	r1, r3
 801227c:	4473      	add	r3, lr
 801227e:	469e      	mov	lr, r3
 8012280:	460d      	mov	r5, r1
 8012282:	4565      	cmp	r5, ip
 8012284:	d30e      	bcc.n	80122a4 <__mdiff+0xe8>
 8012286:	f10c 0203 	add.w	r2, ip, #3
 801228a:	1a52      	subs	r2, r2, r1
 801228c:	f022 0203 	bic.w	r2, r2, #3
 8012290:	3903      	subs	r1, #3
 8012292:	458c      	cmp	ip, r1
 8012294:	bf38      	it	cc
 8012296:	2200      	movcc	r2, #0
 8012298:	441a      	add	r2, r3
 801229a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801229e:	b17b      	cbz	r3, 80122c0 <__mdiff+0x104>
 80122a0:	6106      	str	r6, [r0, #16]
 80122a2:	e7a5      	b.n	80121f0 <__mdiff+0x34>
 80122a4:	f855 8b04 	ldr.w	r8, [r5], #4
 80122a8:	fa17 f488 	uxtah	r4, r7, r8
 80122ac:	1422      	asrs	r2, r4, #16
 80122ae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80122b2:	b2a4      	uxth	r4, r4
 80122b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80122b8:	f84e 4b04 	str.w	r4, [lr], #4
 80122bc:	1417      	asrs	r7, r2, #16
 80122be:	e7e0      	b.n	8012282 <__mdiff+0xc6>
 80122c0:	3e01      	subs	r6, #1
 80122c2:	e7ea      	b.n	801229a <__mdiff+0xde>
 80122c4:	08014aab 	.word	0x08014aab
 80122c8:	08014b9c 	.word	0x08014b9c

080122cc <__ulp>:
 80122cc:	b082      	sub	sp, #8
 80122ce:	ed8d 0b00 	vstr	d0, [sp]
 80122d2:	9b01      	ldr	r3, [sp, #4]
 80122d4:	4912      	ldr	r1, [pc, #72]	; (8012320 <__ulp+0x54>)
 80122d6:	4019      	ands	r1, r3
 80122d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80122dc:	2900      	cmp	r1, #0
 80122de:	dd05      	ble.n	80122ec <__ulp+0x20>
 80122e0:	2200      	movs	r2, #0
 80122e2:	460b      	mov	r3, r1
 80122e4:	ec43 2b10 	vmov	d0, r2, r3
 80122e8:	b002      	add	sp, #8
 80122ea:	4770      	bx	lr
 80122ec:	4249      	negs	r1, r1
 80122ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80122f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80122f6:	f04f 0200 	mov.w	r2, #0
 80122fa:	f04f 0300 	mov.w	r3, #0
 80122fe:	da04      	bge.n	801230a <__ulp+0x3e>
 8012300:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012304:	fa41 f300 	asr.w	r3, r1, r0
 8012308:	e7ec      	b.n	80122e4 <__ulp+0x18>
 801230a:	f1a0 0114 	sub.w	r1, r0, #20
 801230e:	291e      	cmp	r1, #30
 8012310:	bfda      	itte	le
 8012312:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012316:	fa20 f101 	lsrle.w	r1, r0, r1
 801231a:	2101      	movgt	r1, #1
 801231c:	460a      	mov	r2, r1
 801231e:	e7e1      	b.n	80122e4 <__ulp+0x18>
 8012320:	7ff00000 	.word	0x7ff00000

08012324 <__b2d>:
 8012324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012326:	6905      	ldr	r5, [r0, #16]
 8012328:	f100 0714 	add.w	r7, r0, #20
 801232c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012330:	1f2e      	subs	r6, r5, #4
 8012332:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012336:	4620      	mov	r0, r4
 8012338:	f7ff fd52 	bl	8011de0 <__hi0bits>
 801233c:	f1c0 0320 	rsb	r3, r0, #32
 8012340:	280a      	cmp	r0, #10
 8012342:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80123c0 <__b2d+0x9c>
 8012346:	600b      	str	r3, [r1, #0]
 8012348:	dc14      	bgt.n	8012374 <__b2d+0x50>
 801234a:	f1c0 0e0b 	rsb	lr, r0, #11
 801234e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012352:	42b7      	cmp	r7, r6
 8012354:	ea41 030c 	orr.w	r3, r1, ip
 8012358:	bf34      	ite	cc
 801235a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801235e:	2100      	movcs	r1, #0
 8012360:	3015      	adds	r0, #21
 8012362:	fa04 f000 	lsl.w	r0, r4, r0
 8012366:	fa21 f10e 	lsr.w	r1, r1, lr
 801236a:	ea40 0201 	orr.w	r2, r0, r1
 801236e:	ec43 2b10 	vmov	d0, r2, r3
 8012372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012374:	42b7      	cmp	r7, r6
 8012376:	bf3a      	itte	cc
 8012378:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801237c:	f1a5 0608 	subcc.w	r6, r5, #8
 8012380:	2100      	movcs	r1, #0
 8012382:	380b      	subs	r0, #11
 8012384:	d017      	beq.n	80123b6 <__b2d+0x92>
 8012386:	f1c0 0c20 	rsb	ip, r0, #32
 801238a:	fa04 f500 	lsl.w	r5, r4, r0
 801238e:	42be      	cmp	r6, r7
 8012390:	fa21 f40c 	lsr.w	r4, r1, ip
 8012394:	ea45 0504 	orr.w	r5, r5, r4
 8012398:	bf8c      	ite	hi
 801239a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801239e:	2400      	movls	r4, #0
 80123a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80123a4:	fa01 f000 	lsl.w	r0, r1, r0
 80123a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80123ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80123b0:	ea40 0204 	orr.w	r2, r0, r4
 80123b4:	e7db      	b.n	801236e <__b2d+0x4a>
 80123b6:	ea44 030c 	orr.w	r3, r4, ip
 80123ba:	460a      	mov	r2, r1
 80123bc:	e7d7      	b.n	801236e <__b2d+0x4a>
 80123be:	bf00      	nop
 80123c0:	3ff00000 	.word	0x3ff00000

080123c4 <__d2b>:
 80123c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80123c8:	4689      	mov	r9, r1
 80123ca:	2101      	movs	r1, #1
 80123cc:	ec57 6b10 	vmov	r6, r7, d0
 80123d0:	4690      	mov	r8, r2
 80123d2:	f7ff fc0f 	bl	8011bf4 <_Balloc>
 80123d6:	4604      	mov	r4, r0
 80123d8:	b930      	cbnz	r0, 80123e8 <__d2b+0x24>
 80123da:	4602      	mov	r2, r0
 80123dc:	4b25      	ldr	r3, [pc, #148]	; (8012474 <__d2b+0xb0>)
 80123de:	4826      	ldr	r0, [pc, #152]	; (8012478 <__d2b+0xb4>)
 80123e0:	f240 310a 	movw	r1, #778	; 0x30a
 80123e4:	f000 ffc0 	bl	8013368 <__assert_func>
 80123e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80123ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80123f0:	bb35      	cbnz	r5, 8012440 <__d2b+0x7c>
 80123f2:	2e00      	cmp	r6, #0
 80123f4:	9301      	str	r3, [sp, #4]
 80123f6:	d028      	beq.n	801244a <__d2b+0x86>
 80123f8:	4668      	mov	r0, sp
 80123fa:	9600      	str	r6, [sp, #0]
 80123fc:	f7ff fd10 	bl	8011e20 <__lo0bits>
 8012400:	9900      	ldr	r1, [sp, #0]
 8012402:	b300      	cbz	r0, 8012446 <__d2b+0x82>
 8012404:	9a01      	ldr	r2, [sp, #4]
 8012406:	f1c0 0320 	rsb	r3, r0, #32
 801240a:	fa02 f303 	lsl.w	r3, r2, r3
 801240e:	430b      	orrs	r3, r1
 8012410:	40c2      	lsrs	r2, r0
 8012412:	6163      	str	r3, [r4, #20]
 8012414:	9201      	str	r2, [sp, #4]
 8012416:	9b01      	ldr	r3, [sp, #4]
 8012418:	61a3      	str	r3, [r4, #24]
 801241a:	2b00      	cmp	r3, #0
 801241c:	bf14      	ite	ne
 801241e:	2202      	movne	r2, #2
 8012420:	2201      	moveq	r2, #1
 8012422:	6122      	str	r2, [r4, #16]
 8012424:	b1d5      	cbz	r5, 801245c <__d2b+0x98>
 8012426:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801242a:	4405      	add	r5, r0
 801242c:	f8c9 5000 	str.w	r5, [r9]
 8012430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012434:	f8c8 0000 	str.w	r0, [r8]
 8012438:	4620      	mov	r0, r4
 801243a:	b003      	add	sp, #12
 801243c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012444:	e7d5      	b.n	80123f2 <__d2b+0x2e>
 8012446:	6161      	str	r1, [r4, #20]
 8012448:	e7e5      	b.n	8012416 <__d2b+0x52>
 801244a:	a801      	add	r0, sp, #4
 801244c:	f7ff fce8 	bl	8011e20 <__lo0bits>
 8012450:	9b01      	ldr	r3, [sp, #4]
 8012452:	6163      	str	r3, [r4, #20]
 8012454:	2201      	movs	r2, #1
 8012456:	6122      	str	r2, [r4, #16]
 8012458:	3020      	adds	r0, #32
 801245a:	e7e3      	b.n	8012424 <__d2b+0x60>
 801245c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012464:	f8c9 0000 	str.w	r0, [r9]
 8012468:	6918      	ldr	r0, [r3, #16]
 801246a:	f7ff fcb9 	bl	8011de0 <__hi0bits>
 801246e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012472:	e7df      	b.n	8012434 <__d2b+0x70>
 8012474:	08014aab 	.word	0x08014aab
 8012478:	08014b9c 	.word	0x08014b9c

0801247c <__ratio>:
 801247c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012480:	4688      	mov	r8, r1
 8012482:	4669      	mov	r1, sp
 8012484:	4681      	mov	r9, r0
 8012486:	f7ff ff4d 	bl	8012324 <__b2d>
 801248a:	a901      	add	r1, sp, #4
 801248c:	4640      	mov	r0, r8
 801248e:	ec55 4b10 	vmov	r4, r5, d0
 8012492:	f7ff ff47 	bl	8012324 <__b2d>
 8012496:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801249a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801249e:	eba3 0c02 	sub.w	ip, r3, r2
 80124a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80124a6:	1a9b      	subs	r3, r3, r2
 80124a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80124ac:	ec51 0b10 	vmov	r0, r1, d0
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	bfd6      	itet	le
 80124b4:	460a      	movle	r2, r1
 80124b6:	462a      	movgt	r2, r5
 80124b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80124bc:	468b      	mov	fp, r1
 80124be:	462f      	mov	r7, r5
 80124c0:	bfd4      	ite	le
 80124c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80124c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80124ca:	4620      	mov	r0, r4
 80124cc:	ee10 2a10 	vmov	r2, s0
 80124d0:	465b      	mov	r3, fp
 80124d2:	4639      	mov	r1, r7
 80124d4:	f7ee f9da 	bl	800088c <__aeabi_ddiv>
 80124d8:	ec41 0b10 	vmov	d0, r0, r1
 80124dc:	b003      	add	sp, #12
 80124de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080124e2 <__copybits>:
 80124e2:	3901      	subs	r1, #1
 80124e4:	b570      	push	{r4, r5, r6, lr}
 80124e6:	1149      	asrs	r1, r1, #5
 80124e8:	6914      	ldr	r4, [r2, #16]
 80124ea:	3101      	adds	r1, #1
 80124ec:	f102 0314 	add.w	r3, r2, #20
 80124f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80124f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80124f8:	1f05      	subs	r5, r0, #4
 80124fa:	42a3      	cmp	r3, r4
 80124fc:	d30c      	bcc.n	8012518 <__copybits+0x36>
 80124fe:	1aa3      	subs	r3, r4, r2
 8012500:	3b11      	subs	r3, #17
 8012502:	f023 0303 	bic.w	r3, r3, #3
 8012506:	3211      	adds	r2, #17
 8012508:	42a2      	cmp	r2, r4
 801250a:	bf88      	it	hi
 801250c:	2300      	movhi	r3, #0
 801250e:	4418      	add	r0, r3
 8012510:	2300      	movs	r3, #0
 8012512:	4288      	cmp	r0, r1
 8012514:	d305      	bcc.n	8012522 <__copybits+0x40>
 8012516:	bd70      	pop	{r4, r5, r6, pc}
 8012518:	f853 6b04 	ldr.w	r6, [r3], #4
 801251c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012520:	e7eb      	b.n	80124fa <__copybits+0x18>
 8012522:	f840 3b04 	str.w	r3, [r0], #4
 8012526:	e7f4      	b.n	8012512 <__copybits+0x30>

08012528 <__any_on>:
 8012528:	f100 0214 	add.w	r2, r0, #20
 801252c:	6900      	ldr	r0, [r0, #16]
 801252e:	114b      	asrs	r3, r1, #5
 8012530:	4298      	cmp	r0, r3
 8012532:	b510      	push	{r4, lr}
 8012534:	db11      	blt.n	801255a <__any_on+0x32>
 8012536:	dd0a      	ble.n	801254e <__any_on+0x26>
 8012538:	f011 011f 	ands.w	r1, r1, #31
 801253c:	d007      	beq.n	801254e <__any_on+0x26>
 801253e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012542:	fa24 f001 	lsr.w	r0, r4, r1
 8012546:	fa00 f101 	lsl.w	r1, r0, r1
 801254a:	428c      	cmp	r4, r1
 801254c:	d10b      	bne.n	8012566 <__any_on+0x3e>
 801254e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012552:	4293      	cmp	r3, r2
 8012554:	d803      	bhi.n	801255e <__any_on+0x36>
 8012556:	2000      	movs	r0, #0
 8012558:	bd10      	pop	{r4, pc}
 801255a:	4603      	mov	r3, r0
 801255c:	e7f7      	b.n	801254e <__any_on+0x26>
 801255e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012562:	2900      	cmp	r1, #0
 8012564:	d0f5      	beq.n	8012552 <__any_on+0x2a>
 8012566:	2001      	movs	r0, #1
 8012568:	e7f6      	b.n	8012558 <__any_on+0x30>

0801256a <_calloc_r>:
 801256a:	b513      	push	{r0, r1, r4, lr}
 801256c:	434a      	muls	r2, r1
 801256e:	4611      	mov	r1, r2
 8012570:	9201      	str	r2, [sp, #4]
 8012572:	f7fb ff8b 	bl	800e48c <_malloc_r>
 8012576:	4604      	mov	r4, r0
 8012578:	b118      	cbz	r0, 8012582 <_calloc_r+0x18>
 801257a:	9a01      	ldr	r2, [sp, #4]
 801257c:	2100      	movs	r1, #0
 801257e:	f7fb ff2d 	bl	800e3dc <memset>
 8012582:	4620      	mov	r0, r4
 8012584:	b002      	add	sp, #8
 8012586:	bd10      	pop	{r4, pc}

08012588 <__ssputs_r>:
 8012588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801258c:	688e      	ldr	r6, [r1, #8]
 801258e:	429e      	cmp	r6, r3
 8012590:	4682      	mov	sl, r0
 8012592:	460c      	mov	r4, r1
 8012594:	4690      	mov	r8, r2
 8012596:	461f      	mov	r7, r3
 8012598:	d838      	bhi.n	801260c <__ssputs_r+0x84>
 801259a:	898a      	ldrh	r2, [r1, #12]
 801259c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80125a0:	d032      	beq.n	8012608 <__ssputs_r+0x80>
 80125a2:	6825      	ldr	r5, [r4, #0]
 80125a4:	6909      	ldr	r1, [r1, #16]
 80125a6:	eba5 0901 	sub.w	r9, r5, r1
 80125aa:	6965      	ldr	r5, [r4, #20]
 80125ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80125b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80125b4:	3301      	adds	r3, #1
 80125b6:	444b      	add	r3, r9
 80125b8:	106d      	asrs	r5, r5, #1
 80125ba:	429d      	cmp	r5, r3
 80125bc:	bf38      	it	cc
 80125be:	461d      	movcc	r5, r3
 80125c0:	0553      	lsls	r3, r2, #21
 80125c2:	d531      	bpl.n	8012628 <__ssputs_r+0xa0>
 80125c4:	4629      	mov	r1, r5
 80125c6:	f7fb ff61 	bl	800e48c <_malloc_r>
 80125ca:	4606      	mov	r6, r0
 80125cc:	b950      	cbnz	r0, 80125e4 <__ssputs_r+0x5c>
 80125ce:	230c      	movs	r3, #12
 80125d0:	f8ca 3000 	str.w	r3, [sl]
 80125d4:	89a3      	ldrh	r3, [r4, #12]
 80125d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125da:	81a3      	strh	r3, [r4, #12]
 80125dc:	f04f 30ff 	mov.w	r0, #4294967295
 80125e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e4:	6921      	ldr	r1, [r4, #16]
 80125e6:	464a      	mov	r2, r9
 80125e8:	f7fb feea 	bl	800e3c0 <memcpy>
 80125ec:	89a3      	ldrh	r3, [r4, #12]
 80125ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80125f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125f6:	81a3      	strh	r3, [r4, #12]
 80125f8:	6126      	str	r6, [r4, #16]
 80125fa:	6165      	str	r5, [r4, #20]
 80125fc:	444e      	add	r6, r9
 80125fe:	eba5 0509 	sub.w	r5, r5, r9
 8012602:	6026      	str	r6, [r4, #0]
 8012604:	60a5      	str	r5, [r4, #8]
 8012606:	463e      	mov	r6, r7
 8012608:	42be      	cmp	r6, r7
 801260a:	d900      	bls.n	801260e <__ssputs_r+0x86>
 801260c:	463e      	mov	r6, r7
 801260e:	4632      	mov	r2, r6
 8012610:	6820      	ldr	r0, [r4, #0]
 8012612:	4641      	mov	r1, r8
 8012614:	f000 fefa 	bl	801340c <memmove>
 8012618:	68a3      	ldr	r3, [r4, #8]
 801261a:	6822      	ldr	r2, [r4, #0]
 801261c:	1b9b      	subs	r3, r3, r6
 801261e:	4432      	add	r2, r6
 8012620:	60a3      	str	r3, [r4, #8]
 8012622:	6022      	str	r2, [r4, #0]
 8012624:	2000      	movs	r0, #0
 8012626:	e7db      	b.n	80125e0 <__ssputs_r+0x58>
 8012628:	462a      	mov	r2, r5
 801262a:	f000 ff09 	bl	8013440 <_realloc_r>
 801262e:	4606      	mov	r6, r0
 8012630:	2800      	cmp	r0, #0
 8012632:	d1e1      	bne.n	80125f8 <__ssputs_r+0x70>
 8012634:	6921      	ldr	r1, [r4, #16]
 8012636:	4650      	mov	r0, sl
 8012638:	f7fb fed8 	bl	800e3ec <_free_r>
 801263c:	e7c7      	b.n	80125ce <__ssputs_r+0x46>
	...

08012640 <_svfiprintf_r>:
 8012640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012644:	4698      	mov	r8, r3
 8012646:	898b      	ldrh	r3, [r1, #12]
 8012648:	061b      	lsls	r3, r3, #24
 801264a:	b09d      	sub	sp, #116	; 0x74
 801264c:	4607      	mov	r7, r0
 801264e:	460d      	mov	r5, r1
 8012650:	4614      	mov	r4, r2
 8012652:	d50e      	bpl.n	8012672 <_svfiprintf_r+0x32>
 8012654:	690b      	ldr	r3, [r1, #16]
 8012656:	b963      	cbnz	r3, 8012672 <_svfiprintf_r+0x32>
 8012658:	2140      	movs	r1, #64	; 0x40
 801265a:	f7fb ff17 	bl	800e48c <_malloc_r>
 801265e:	6028      	str	r0, [r5, #0]
 8012660:	6128      	str	r0, [r5, #16]
 8012662:	b920      	cbnz	r0, 801266e <_svfiprintf_r+0x2e>
 8012664:	230c      	movs	r3, #12
 8012666:	603b      	str	r3, [r7, #0]
 8012668:	f04f 30ff 	mov.w	r0, #4294967295
 801266c:	e0d1      	b.n	8012812 <_svfiprintf_r+0x1d2>
 801266e:	2340      	movs	r3, #64	; 0x40
 8012670:	616b      	str	r3, [r5, #20]
 8012672:	2300      	movs	r3, #0
 8012674:	9309      	str	r3, [sp, #36]	; 0x24
 8012676:	2320      	movs	r3, #32
 8012678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801267c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012680:	2330      	movs	r3, #48	; 0x30
 8012682:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801282c <_svfiprintf_r+0x1ec>
 8012686:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801268a:	f04f 0901 	mov.w	r9, #1
 801268e:	4623      	mov	r3, r4
 8012690:	469a      	mov	sl, r3
 8012692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012696:	b10a      	cbz	r2, 801269c <_svfiprintf_r+0x5c>
 8012698:	2a25      	cmp	r2, #37	; 0x25
 801269a:	d1f9      	bne.n	8012690 <_svfiprintf_r+0x50>
 801269c:	ebba 0b04 	subs.w	fp, sl, r4
 80126a0:	d00b      	beq.n	80126ba <_svfiprintf_r+0x7a>
 80126a2:	465b      	mov	r3, fp
 80126a4:	4622      	mov	r2, r4
 80126a6:	4629      	mov	r1, r5
 80126a8:	4638      	mov	r0, r7
 80126aa:	f7ff ff6d 	bl	8012588 <__ssputs_r>
 80126ae:	3001      	adds	r0, #1
 80126b0:	f000 80aa 	beq.w	8012808 <_svfiprintf_r+0x1c8>
 80126b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126b6:	445a      	add	r2, fp
 80126b8:	9209      	str	r2, [sp, #36]	; 0x24
 80126ba:	f89a 3000 	ldrb.w	r3, [sl]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	f000 80a2 	beq.w	8012808 <_svfiprintf_r+0x1c8>
 80126c4:	2300      	movs	r3, #0
 80126c6:	f04f 32ff 	mov.w	r2, #4294967295
 80126ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126ce:	f10a 0a01 	add.w	sl, sl, #1
 80126d2:	9304      	str	r3, [sp, #16]
 80126d4:	9307      	str	r3, [sp, #28]
 80126d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80126da:	931a      	str	r3, [sp, #104]	; 0x68
 80126dc:	4654      	mov	r4, sl
 80126de:	2205      	movs	r2, #5
 80126e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126e4:	4851      	ldr	r0, [pc, #324]	; (801282c <_svfiprintf_r+0x1ec>)
 80126e6:	f7ed fd9b 	bl	8000220 <memchr>
 80126ea:	9a04      	ldr	r2, [sp, #16]
 80126ec:	b9d8      	cbnz	r0, 8012726 <_svfiprintf_r+0xe6>
 80126ee:	06d0      	lsls	r0, r2, #27
 80126f0:	bf44      	itt	mi
 80126f2:	2320      	movmi	r3, #32
 80126f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80126f8:	0711      	lsls	r1, r2, #28
 80126fa:	bf44      	itt	mi
 80126fc:	232b      	movmi	r3, #43	; 0x2b
 80126fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012702:	f89a 3000 	ldrb.w	r3, [sl]
 8012706:	2b2a      	cmp	r3, #42	; 0x2a
 8012708:	d015      	beq.n	8012736 <_svfiprintf_r+0xf6>
 801270a:	9a07      	ldr	r2, [sp, #28]
 801270c:	4654      	mov	r4, sl
 801270e:	2000      	movs	r0, #0
 8012710:	f04f 0c0a 	mov.w	ip, #10
 8012714:	4621      	mov	r1, r4
 8012716:	f811 3b01 	ldrb.w	r3, [r1], #1
 801271a:	3b30      	subs	r3, #48	; 0x30
 801271c:	2b09      	cmp	r3, #9
 801271e:	d94e      	bls.n	80127be <_svfiprintf_r+0x17e>
 8012720:	b1b0      	cbz	r0, 8012750 <_svfiprintf_r+0x110>
 8012722:	9207      	str	r2, [sp, #28]
 8012724:	e014      	b.n	8012750 <_svfiprintf_r+0x110>
 8012726:	eba0 0308 	sub.w	r3, r0, r8
 801272a:	fa09 f303 	lsl.w	r3, r9, r3
 801272e:	4313      	orrs	r3, r2
 8012730:	9304      	str	r3, [sp, #16]
 8012732:	46a2      	mov	sl, r4
 8012734:	e7d2      	b.n	80126dc <_svfiprintf_r+0x9c>
 8012736:	9b03      	ldr	r3, [sp, #12]
 8012738:	1d19      	adds	r1, r3, #4
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	9103      	str	r1, [sp, #12]
 801273e:	2b00      	cmp	r3, #0
 8012740:	bfbb      	ittet	lt
 8012742:	425b      	neglt	r3, r3
 8012744:	f042 0202 	orrlt.w	r2, r2, #2
 8012748:	9307      	strge	r3, [sp, #28]
 801274a:	9307      	strlt	r3, [sp, #28]
 801274c:	bfb8      	it	lt
 801274e:	9204      	strlt	r2, [sp, #16]
 8012750:	7823      	ldrb	r3, [r4, #0]
 8012752:	2b2e      	cmp	r3, #46	; 0x2e
 8012754:	d10c      	bne.n	8012770 <_svfiprintf_r+0x130>
 8012756:	7863      	ldrb	r3, [r4, #1]
 8012758:	2b2a      	cmp	r3, #42	; 0x2a
 801275a:	d135      	bne.n	80127c8 <_svfiprintf_r+0x188>
 801275c:	9b03      	ldr	r3, [sp, #12]
 801275e:	1d1a      	adds	r2, r3, #4
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	9203      	str	r2, [sp, #12]
 8012764:	2b00      	cmp	r3, #0
 8012766:	bfb8      	it	lt
 8012768:	f04f 33ff 	movlt.w	r3, #4294967295
 801276c:	3402      	adds	r4, #2
 801276e:	9305      	str	r3, [sp, #20]
 8012770:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801283c <_svfiprintf_r+0x1fc>
 8012774:	7821      	ldrb	r1, [r4, #0]
 8012776:	2203      	movs	r2, #3
 8012778:	4650      	mov	r0, sl
 801277a:	f7ed fd51 	bl	8000220 <memchr>
 801277e:	b140      	cbz	r0, 8012792 <_svfiprintf_r+0x152>
 8012780:	2340      	movs	r3, #64	; 0x40
 8012782:	eba0 000a 	sub.w	r0, r0, sl
 8012786:	fa03 f000 	lsl.w	r0, r3, r0
 801278a:	9b04      	ldr	r3, [sp, #16]
 801278c:	4303      	orrs	r3, r0
 801278e:	3401      	adds	r4, #1
 8012790:	9304      	str	r3, [sp, #16]
 8012792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012796:	4826      	ldr	r0, [pc, #152]	; (8012830 <_svfiprintf_r+0x1f0>)
 8012798:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801279c:	2206      	movs	r2, #6
 801279e:	f7ed fd3f 	bl	8000220 <memchr>
 80127a2:	2800      	cmp	r0, #0
 80127a4:	d038      	beq.n	8012818 <_svfiprintf_r+0x1d8>
 80127a6:	4b23      	ldr	r3, [pc, #140]	; (8012834 <_svfiprintf_r+0x1f4>)
 80127a8:	bb1b      	cbnz	r3, 80127f2 <_svfiprintf_r+0x1b2>
 80127aa:	9b03      	ldr	r3, [sp, #12]
 80127ac:	3307      	adds	r3, #7
 80127ae:	f023 0307 	bic.w	r3, r3, #7
 80127b2:	3308      	adds	r3, #8
 80127b4:	9303      	str	r3, [sp, #12]
 80127b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127b8:	4433      	add	r3, r6
 80127ba:	9309      	str	r3, [sp, #36]	; 0x24
 80127bc:	e767      	b.n	801268e <_svfiprintf_r+0x4e>
 80127be:	fb0c 3202 	mla	r2, ip, r2, r3
 80127c2:	460c      	mov	r4, r1
 80127c4:	2001      	movs	r0, #1
 80127c6:	e7a5      	b.n	8012714 <_svfiprintf_r+0xd4>
 80127c8:	2300      	movs	r3, #0
 80127ca:	3401      	adds	r4, #1
 80127cc:	9305      	str	r3, [sp, #20]
 80127ce:	4619      	mov	r1, r3
 80127d0:	f04f 0c0a 	mov.w	ip, #10
 80127d4:	4620      	mov	r0, r4
 80127d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127da:	3a30      	subs	r2, #48	; 0x30
 80127dc:	2a09      	cmp	r2, #9
 80127de:	d903      	bls.n	80127e8 <_svfiprintf_r+0x1a8>
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d0c5      	beq.n	8012770 <_svfiprintf_r+0x130>
 80127e4:	9105      	str	r1, [sp, #20]
 80127e6:	e7c3      	b.n	8012770 <_svfiprintf_r+0x130>
 80127e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80127ec:	4604      	mov	r4, r0
 80127ee:	2301      	movs	r3, #1
 80127f0:	e7f0      	b.n	80127d4 <_svfiprintf_r+0x194>
 80127f2:	ab03      	add	r3, sp, #12
 80127f4:	9300      	str	r3, [sp, #0]
 80127f6:	462a      	mov	r2, r5
 80127f8:	4b0f      	ldr	r3, [pc, #60]	; (8012838 <_svfiprintf_r+0x1f8>)
 80127fa:	a904      	add	r1, sp, #16
 80127fc:	4638      	mov	r0, r7
 80127fe:	f7fb ff3f 	bl	800e680 <_printf_float>
 8012802:	1c42      	adds	r2, r0, #1
 8012804:	4606      	mov	r6, r0
 8012806:	d1d6      	bne.n	80127b6 <_svfiprintf_r+0x176>
 8012808:	89ab      	ldrh	r3, [r5, #12]
 801280a:	065b      	lsls	r3, r3, #25
 801280c:	f53f af2c 	bmi.w	8012668 <_svfiprintf_r+0x28>
 8012810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012812:	b01d      	add	sp, #116	; 0x74
 8012814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012818:	ab03      	add	r3, sp, #12
 801281a:	9300      	str	r3, [sp, #0]
 801281c:	462a      	mov	r2, r5
 801281e:	4b06      	ldr	r3, [pc, #24]	; (8012838 <_svfiprintf_r+0x1f8>)
 8012820:	a904      	add	r1, sp, #16
 8012822:	4638      	mov	r0, r7
 8012824:	f7fc f9d0 	bl	800ebc8 <_printf_i>
 8012828:	e7eb      	b.n	8012802 <_svfiprintf_r+0x1c2>
 801282a:	bf00      	nop
 801282c:	08014cfc 	.word	0x08014cfc
 8012830:	08014d06 	.word	0x08014d06
 8012834:	0800e681 	.word	0x0800e681
 8012838:	08012589 	.word	0x08012589
 801283c:	08014d02 	.word	0x08014d02

08012840 <_sungetc_r>:
 8012840:	b538      	push	{r3, r4, r5, lr}
 8012842:	1c4b      	adds	r3, r1, #1
 8012844:	4614      	mov	r4, r2
 8012846:	d103      	bne.n	8012850 <_sungetc_r+0x10>
 8012848:	f04f 35ff 	mov.w	r5, #4294967295
 801284c:	4628      	mov	r0, r5
 801284e:	bd38      	pop	{r3, r4, r5, pc}
 8012850:	8993      	ldrh	r3, [r2, #12]
 8012852:	f023 0320 	bic.w	r3, r3, #32
 8012856:	8193      	strh	r3, [r2, #12]
 8012858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801285a:	6852      	ldr	r2, [r2, #4]
 801285c:	b2cd      	uxtb	r5, r1
 801285e:	b18b      	cbz	r3, 8012884 <_sungetc_r+0x44>
 8012860:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012862:	4293      	cmp	r3, r2
 8012864:	dd08      	ble.n	8012878 <_sungetc_r+0x38>
 8012866:	6823      	ldr	r3, [r4, #0]
 8012868:	1e5a      	subs	r2, r3, #1
 801286a:	6022      	str	r2, [r4, #0]
 801286c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012870:	6863      	ldr	r3, [r4, #4]
 8012872:	3301      	adds	r3, #1
 8012874:	6063      	str	r3, [r4, #4]
 8012876:	e7e9      	b.n	801284c <_sungetc_r+0xc>
 8012878:	4621      	mov	r1, r4
 801287a:	f000 fd2d 	bl	80132d8 <__submore>
 801287e:	2800      	cmp	r0, #0
 8012880:	d0f1      	beq.n	8012866 <_sungetc_r+0x26>
 8012882:	e7e1      	b.n	8012848 <_sungetc_r+0x8>
 8012884:	6921      	ldr	r1, [r4, #16]
 8012886:	6823      	ldr	r3, [r4, #0]
 8012888:	b151      	cbz	r1, 80128a0 <_sungetc_r+0x60>
 801288a:	4299      	cmp	r1, r3
 801288c:	d208      	bcs.n	80128a0 <_sungetc_r+0x60>
 801288e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012892:	42a9      	cmp	r1, r5
 8012894:	d104      	bne.n	80128a0 <_sungetc_r+0x60>
 8012896:	3b01      	subs	r3, #1
 8012898:	3201      	adds	r2, #1
 801289a:	6023      	str	r3, [r4, #0]
 801289c:	6062      	str	r2, [r4, #4]
 801289e:	e7d5      	b.n	801284c <_sungetc_r+0xc>
 80128a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80128a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128a8:	6363      	str	r3, [r4, #52]	; 0x34
 80128aa:	2303      	movs	r3, #3
 80128ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80128ae:	4623      	mov	r3, r4
 80128b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80128b4:	6023      	str	r3, [r4, #0]
 80128b6:	2301      	movs	r3, #1
 80128b8:	e7dc      	b.n	8012874 <_sungetc_r+0x34>

080128ba <__ssrefill_r>:
 80128ba:	b510      	push	{r4, lr}
 80128bc:	460c      	mov	r4, r1
 80128be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80128c0:	b169      	cbz	r1, 80128de <__ssrefill_r+0x24>
 80128c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128c6:	4299      	cmp	r1, r3
 80128c8:	d001      	beq.n	80128ce <__ssrefill_r+0x14>
 80128ca:	f7fb fd8f 	bl	800e3ec <_free_r>
 80128ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80128d0:	6063      	str	r3, [r4, #4]
 80128d2:	2000      	movs	r0, #0
 80128d4:	6360      	str	r0, [r4, #52]	; 0x34
 80128d6:	b113      	cbz	r3, 80128de <__ssrefill_r+0x24>
 80128d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80128da:	6023      	str	r3, [r4, #0]
 80128dc:	bd10      	pop	{r4, pc}
 80128de:	6923      	ldr	r3, [r4, #16]
 80128e0:	6023      	str	r3, [r4, #0]
 80128e2:	2300      	movs	r3, #0
 80128e4:	6063      	str	r3, [r4, #4]
 80128e6:	89a3      	ldrh	r3, [r4, #12]
 80128e8:	f043 0320 	orr.w	r3, r3, #32
 80128ec:	81a3      	strh	r3, [r4, #12]
 80128ee:	f04f 30ff 	mov.w	r0, #4294967295
 80128f2:	e7f3      	b.n	80128dc <__ssrefill_r+0x22>

080128f4 <__ssvfiscanf_r>:
 80128f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128f8:	460c      	mov	r4, r1
 80128fa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80128fe:	2100      	movs	r1, #0
 8012900:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012904:	49b2      	ldr	r1, [pc, #712]	; (8012bd0 <__ssvfiscanf_r+0x2dc>)
 8012906:	91a0      	str	r1, [sp, #640]	; 0x280
 8012908:	f10d 0804 	add.w	r8, sp, #4
 801290c:	49b1      	ldr	r1, [pc, #708]	; (8012bd4 <__ssvfiscanf_r+0x2e0>)
 801290e:	4fb2      	ldr	r7, [pc, #712]	; (8012bd8 <__ssvfiscanf_r+0x2e4>)
 8012910:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8012bdc <__ssvfiscanf_r+0x2e8>
 8012914:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012918:	4606      	mov	r6, r0
 801291a:	91a1      	str	r1, [sp, #644]	; 0x284
 801291c:	9300      	str	r3, [sp, #0]
 801291e:	f892 a000 	ldrb.w	sl, [r2]
 8012922:	f1ba 0f00 	cmp.w	sl, #0
 8012926:	f000 8151 	beq.w	8012bcc <__ssvfiscanf_r+0x2d8>
 801292a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801292e:	f013 0308 	ands.w	r3, r3, #8
 8012932:	f102 0501 	add.w	r5, r2, #1
 8012936:	d019      	beq.n	801296c <__ssvfiscanf_r+0x78>
 8012938:	6863      	ldr	r3, [r4, #4]
 801293a:	2b00      	cmp	r3, #0
 801293c:	dd0f      	ble.n	801295e <__ssvfiscanf_r+0x6a>
 801293e:	6823      	ldr	r3, [r4, #0]
 8012940:	781a      	ldrb	r2, [r3, #0]
 8012942:	5cba      	ldrb	r2, [r7, r2]
 8012944:	0712      	lsls	r2, r2, #28
 8012946:	d401      	bmi.n	801294c <__ssvfiscanf_r+0x58>
 8012948:	462a      	mov	r2, r5
 801294a:	e7e8      	b.n	801291e <__ssvfiscanf_r+0x2a>
 801294c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801294e:	3201      	adds	r2, #1
 8012950:	9245      	str	r2, [sp, #276]	; 0x114
 8012952:	6862      	ldr	r2, [r4, #4]
 8012954:	3301      	adds	r3, #1
 8012956:	3a01      	subs	r2, #1
 8012958:	6062      	str	r2, [r4, #4]
 801295a:	6023      	str	r3, [r4, #0]
 801295c:	e7ec      	b.n	8012938 <__ssvfiscanf_r+0x44>
 801295e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012960:	4621      	mov	r1, r4
 8012962:	4630      	mov	r0, r6
 8012964:	4798      	blx	r3
 8012966:	2800      	cmp	r0, #0
 8012968:	d0e9      	beq.n	801293e <__ssvfiscanf_r+0x4a>
 801296a:	e7ed      	b.n	8012948 <__ssvfiscanf_r+0x54>
 801296c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8012970:	f040 8083 	bne.w	8012a7a <__ssvfiscanf_r+0x186>
 8012974:	9341      	str	r3, [sp, #260]	; 0x104
 8012976:	9343      	str	r3, [sp, #268]	; 0x10c
 8012978:	7853      	ldrb	r3, [r2, #1]
 801297a:	2b2a      	cmp	r3, #42	; 0x2a
 801297c:	bf02      	ittt	eq
 801297e:	2310      	moveq	r3, #16
 8012980:	1c95      	addeq	r5, r2, #2
 8012982:	9341      	streq	r3, [sp, #260]	; 0x104
 8012984:	220a      	movs	r2, #10
 8012986:	46ab      	mov	fp, r5
 8012988:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801298c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012990:	2b09      	cmp	r3, #9
 8012992:	d91d      	bls.n	80129d0 <__ssvfiscanf_r+0xdc>
 8012994:	4891      	ldr	r0, [pc, #580]	; (8012bdc <__ssvfiscanf_r+0x2e8>)
 8012996:	2203      	movs	r2, #3
 8012998:	f7ed fc42 	bl	8000220 <memchr>
 801299c:	b140      	cbz	r0, 80129b0 <__ssvfiscanf_r+0xbc>
 801299e:	2301      	movs	r3, #1
 80129a0:	eba0 0009 	sub.w	r0, r0, r9
 80129a4:	fa03 f000 	lsl.w	r0, r3, r0
 80129a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80129aa:	4318      	orrs	r0, r3
 80129ac:	9041      	str	r0, [sp, #260]	; 0x104
 80129ae:	465d      	mov	r5, fp
 80129b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80129b4:	2b78      	cmp	r3, #120	; 0x78
 80129b6:	d806      	bhi.n	80129c6 <__ssvfiscanf_r+0xd2>
 80129b8:	2b57      	cmp	r3, #87	; 0x57
 80129ba:	d810      	bhi.n	80129de <__ssvfiscanf_r+0xea>
 80129bc:	2b25      	cmp	r3, #37	; 0x25
 80129be:	d05c      	beq.n	8012a7a <__ssvfiscanf_r+0x186>
 80129c0:	d856      	bhi.n	8012a70 <__ssvfiscanf_r+0x17c>
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d074      	beq.n	8012ab0 <__ssvfiscanf_r+0x1bc>
 80129c6:	2303      	movs	r3, #3
 80129c8:	9347      	str	r3, [sp, #284]	; 0x11c
 80129ca:	230a      	movs	r3, #10
 80129cc:	9342      	str	r3, [sp, #264]	; 0x108
 80129ce:	e081      	b.n	8012ad4 <__ssvfiscanf_r+0x1e0>
 80129d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80129d2:	fb02 1303 	mla	r3, r2, r3, r1
 80129d6:	3b30      	subs	r3, #48	; 0x30
 80129d8:	9343      	str	r3, [sp, #268]	; 0x10c
 80129da:	465d      	mov	r5, fp
 80129dc:	e7d3      	b.n	8012986 <__ssvfiscanf_r+0x92>
 80129de:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80129e2:	2a20      	cmp	r2, #32
 80129e4:	d8ef      	bhi.n	80129c6 <__ssvfiscanf_r+0xd2>
 80129e6:	a101      	add	r1, pc, #4	; (adr r1, 80129ec <__ssvfiscanf_r+0xf8>)
 80129e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80129ec:	08012abf 	.word	0x08012abf
 80129f0:	080129c7 	.word	0x080129c7
 80129f4:	080129c7 	.word	0x080129c7
 80129f8:	08012b1d 	.word	0x08012b1d
 80129fc:	080129c7 	.word	0x080129c7
 8012a00:	080129c7 	.word	0x080129c7
 8012a04:	080129c7 	.word	0x080129c7
 8012a08:	080129c7 	.word	0x080129c7
 8012a0c:	080129c7 	.word	0x080129c7
 8012a10:	080129c7 	.word	0x080129c7
 8012a14:	080129c7 	.word	0x080129c7
 8012a18:	08012b33 	.word	0x08012b33
 8012a1c:	08012b09 	.word	0x08012b09
 8012a20:	08012a77 	.word	0x08012a77
 8012a24:	08012a77 	.word	0x08012a77
 8012a28:	08012a77 	.word	0x08012a77
 8012a2c:	080129c7 	.word	0x080129c7
 8012a30:	08012b0d 	.word	0x08012b0d
 8012a34:	080129c7 	.word	0x080129c7
 8012a38:	080129c7 	.word	0x080129c7
 8012a3c:	080129c7 	.word	0x080129c7
 8012a40:	080129c7 	.word	0x080129c7
 8012a44:	08012b43 	.word	0x08012b43
 8012a48:	08012b15 	.word	0x08012b15
 8012a4c:	08012ab7 	.word	0x08012ab7
 8012a50:	080129c7 	.word	0x080129c7
 8012a54:	080129c7 	.word	0x080129c7
 8012a58:	08012b3f 	.word	0x08012b3f
 8012a5c:	080129c7 	.word	0x080129c7
 8012a60:	08012b09 	.word	0x08012b09
 8012a64:	080129c7 	.word	0x080129c7
 8012a68:	080129c7 	.word	0x080129c7
 8012a6c:	08012abf 	.word	0x08012abf
 8012a70:	3b45      	subs	r3, #69	; 0x45
 8012a72:	2b02      	cmp	r3, #2
 8012a74:	d8a7      	bhi.n	80129c6 <__ssvfiscanf_r+0xd2>
 8012a76:	2305      	movs	r3, #5
 8012a78:	e02b      	b.n	8012ad2 <__ssvfiscanf_r+0x1de>
 8012a7a:	6863      	ldr	r3, [r4, #4]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	dd0d      	ble.n	8012a9c <__ssvfiscanf_r+0x1a8>
 8012a80:	6823      	ldr	r3, [r4, #0]
 8012a82:	781a      	ldrb	r2, [r3, #0]
 8012a84:	4552      	cmp	r2, sl
 8012a86:	f040 80a1 	bne.w	8012bcc <__ssvfiscanf_r+0x2d8>
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	6862      	ldr	r2, [r4, #4]
 8012a8e:	6023      	str	r3, [r4, #0]
 8012a90:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012a92:	3a01      	subs	r2, #1
 8012a94:	3301      	adds	r3, #1
 8012a96:	6062      	str	r2, [r4, #4]
 8012a98:	9345      	str	r3, [sp, #276]	; 0x114
 8012a9a:	e755      	b.n	8012948 <__ssvfiscanf_r+0x54>
 8012a9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012a9e:	4621      	mov	r1, r4
 8012aa0:	4630      	mov	r0, r6
 8012aa2:	4798      	blx	r3
 8012aa4:	2800      	cmp	r0, #0
 8012aa6:	d0eb      	beq.n	8012a80 <__ssvfiscanf_r+0x18c>
 8012aa8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	f040 8084 	bne.w	8012bb8 <__ssvfiscanf_r+0x2c4>
 8012ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ab4:	e086      	b.n	8012bc4 <__ssvfiscanf_r+0x2d0>
 8012ab6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012ab8:	f042 0220 	orr.w	r2, r2, #32
 8012abc:	9241      	str	r2, [sp, #260]	; 0x104
 8012abe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012ac4:	9241      	str	r2, [sp, #260]	; 0x104
 8012ac6:	2210      	movs	r2, #16
 8012ac8:	2b6f      	cmp	r3, #111	; 0x6f
 8012aca:	9242      	str	r2, [sp, #264]	; 0x108
 8012acc:	bf34      	ite	cc
 8012ace:	2303      	movcc	r3, #3
 8012ad0:	2304      	movcs	r3, #4
 8012ad2:	9347      	str	r3, [sp, #284]	; 0x11c
 8012ad4:	6863      	ldr	r3, [r4, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	dd41      	ble.n	8012b5e <__ssvfiscanf_r+0x26a>
 8012ada:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012adc:	0659      	lsls	r1, r3, #25
 8012ade:	d404      	bmi.n	8012aea <__ssvfiscanf_r+0x1f6>
 8012ae0:	6823      	ldr	r3, [r4, #0]
 8012ae2:	781a      	ldrb	r2, [r3, #0]
 8012ae4:	5cba      	ldrb	r2, [r7, r2]
 8012ae6:	0712      	lsls	r2, r2, #28
 8012ae8:	d440      	bmi.n	8012b6c <__ssvfiscanf_r+0x278>
 8012aea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012aec:	2b02      	cmp	r3, #2
 8012aee:	dc4f      	bgt.n	8012b90 <__ssvfiscanf_r+0x29c>
 8012af0:	466b      	mov	r3, sp
 8012af2:	4622      	mov	r2, r4
 8012af4:	a941      	add	r1, sp, #260	; 0x104
 8012af6:	4630      	mov	r0, r6
 8012af8:	f000 f9ce 	bl	8012e98 <_scanf_chars>
 8012afc:	2801      	cmp	r0, #1
 8012afe:	d065      	beq.n	8012bcc <__ssvfiscanf_r+0x2d8>
 8012b00:	2802      	cmp	r0, #2
 8012b02:	f47f af21 	bne.w	8012948 <__ssvfiscanf_r+0x54>
 8012b06:	e7cf      	b.n	8012aa8 <__ssvfiscanf_r+0x1b4>
 8012b08:	220a      	movs	r2, #10
 8012b0a:	e7dd      	b.n	8012ac8 <__ssvfiscanf_r+0x1d4>
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	9342      	str	r3, [sp, #264]	; 0x108
 8012b10:	2303      	movs	r3, #3
 8012b12:	e7de      	b.n	8012ad2 <__ssvfiscanf_r+0x1de>
 8012b14:	2308      	movs	r3, #8
 8012b16:	9342      	str	r3, [sp, #264]	; 0x108
 8012b18:	2304      	movs	r3, #4
 8012b1a:	e7da      	b.n	8012ad2 <__ssvfiscanf_r+0x1de>
 8012b1c:	4629      	mov	r1, r5
 8012b1e:	4640      	mov	r0, r8
 8012b20:	f000 fb22 	bl	8013168 <__sccl>
 8012b24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b2a:	9341      	str	r3, [sp, #260]	; 0x104
 8012b2c:	4605      	mov	r5, r0
 8012b2e:	2301      	movs	r3, #1
 8012b30:	e7cf      	b.n	8012ad2 <__ssvfiscanf_r+0x1de>
 8012b32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b38:	9341      	str	r3, [sp, #260]	; 0x104
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	e7c9      	b.n	8012ad2 <__ssvfiscanf_r+0x1de>
 8012b3e:	2302      	movs	r3, #2
 8012b40:	e7c7      	b.n	8012ad2 <__ssvfiscanf_r+0x1de>
 8012b42:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012b44:	06c3      	lsls	r3, r0, #27
 8012b46:	f53f aeff 	bmi.w	8012948 <__ssvfiscanf_r+0x54>
 8012b4a:	9b00      	ldr	r3, [sp, #0]
 8012b4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012b4e:	1d19      	adds	r1, r3, #4
 8012b50:	9100      	str	r1, [sp, #0]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	07c0      	lsls	r0, r0, #31
 8012b56:	bf4c      	ite	mi
 8012b58:	801a      	strhmi	r2, [r3, #0]
 8012b5a:	601a      	strpl	r2, [r3, #0]
 8012b5c:	e6f4      	b.n	8012948 <__ssvfiscanf_r+0x54>
 8012b5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012b60:	4621      	mov	r1, r4
 8012b62:	4630      	mov	r0, r6
 8012b64:	4798      	blx	r3
 8012b66:	2800      	cmp	r0, #0
 8012b68:	d0b7      	beq.n	8012ada <__ssvfiscanf_r+0x1e6>
 8012b6a:	e79d      	b.n	8012aa8 <__ssvfiscanf_r+0x1b4>
 8012b6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012b6e:	3201      	adds	r2, #1
 8012b70:	9245      	str	r2, [sp, #276]	; 0x114
 8012b72:	6862      	ldr	r2, [r4, #4]
 8012b74:	3a01      	subs	r2, #1
 8012b76:	2a00      	cmp	r2, #0
 8012b78:	6062      	str	r2, [r4, #4]
 8012b7a:	dd02      	ble.n	8012b82 <__ssvfiscanf_r+0x28e>
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	6023      	str	r3, [r4, #0]
 8012b80:	e7ae      	b.n	8012ae0 <__ssvfiscanf_r+0x1ec>
 8012b82:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012b84:	4621      	mov	r1, r4
 8012b86:	4630      	mov	r0, r6
 8012b88:	4798      	blx	r3
 8012b8a:	2800      	cmp	r0, #0
 8012b8c:	d0a8      	beq.n	8012ae0 <__ssvfiscanf_r+0x1ec>
 8012b8e:	e78b      	b.n	8012aa8 <__ssvfiscanf_r+0x1b4>
 8012b90:	2b04      	cmp	r3, #4
 8012b92:	dc06      	bgt.n	8012ba2 <__ssvfiscanf_r+0x2ae>
 8012b94:	466b      	mov	r3, sp
 8012b96:	4622      	mov	r2, r4
 8012b98:	a941      	add	r1, sp, #260	; 0x104
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	f000 f9d4 	bl	8012f48 <_scanf_i>
 8012ba0:	e7ac      	b.n	8012afc <__ssvfiscanf_r+0x208>
 8012ba2:	4b0f      	ldr	r3, [pc, #60]	; (8012be0 <__ssvfiscanf_r+0x2ec>)
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	f43f aecf 	beq.w	8012948 <__ssvfiscanf_r+0x54>
 8012baa:	466b      	mov	r3, sp
 8012bac:	4622      	mov	r2, r4
 8012bae:	a941      	add	r1, sp, #260	; 0x104
 8012bb0:	4630      	mov	r0, r6
 8012bb2:	f7fc f92f 	bl	800ee14 <_scanf_float>
 8012bb6:	e7a1      	b.n	8012afc <__ssvfiscanf_r+0x208>
 8012bb8:	89a3      	ldrh	r3, [r4, #12]
 8012bba:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012bbe:	bf18      	it	ne
 8012bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8012bc4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8012bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bcc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012bce:	e7f9      	b.n	8012bc4 <__ssvfiscanf_r+0x2d0>
 8012bd0:	08012841 	.word	0x08012841
 8012bd4:	080128bb 	.word	0x080128bb
 8012bd8:	08014899 	.word	0x08014899
 8012bdc:	08014d02 	.word	0x08014d02
 8012be0:	0800ee15 	.word	0x0800ee15

08012be4 <__sfputc_r>:
 8012be4:	6893      	ldr	r3, [r2, #8]
 8012be6:	3b01      	subs	r3, #1
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	b410      	push	{r4}
 8012bec:	6093      	str	r3, [r2, #8]
 8012bee:	da08      	bge.n	8012c02 <__sfputc_r+0x1e>
 8012bf0:	6994      	ldr	r4, [r2, #24]
 8012bf2:	42a3      	cmp	r3, r4
 8012bf4:	db01      	blt.n	8012bfa <__sfputc_r+0x16>
 8012bf6:	290a      	cmp	r1, #10
 8012bf8:	d103      	bne.n	8012c02 <__sfputc_r+0x1e>
 8012bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bfe:	f7fd badd 	b.w	80101bc <__swbuf_r>
 8012c02:	6813      	ldr	r3, [r2, #0]
 8012c04:	1c58      	adds	r0, r3, #1
 8012c06:	6010      	str	r0, [r2, #0]
 8012c08:	7019      	strb	r1, [r3, #0]
 8012c0a:	4608      	mov	r0, r1
 8012c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c10:	4770      	bx	lr

08012c12 <__sfputs_r>:
 8012c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c14:	4606      	mov	r6, r0
 8012c16:	460f      	mov	r7, r1
 8012c18:	4614      	mov	r4, r2
 8012c1a:	18d5      	adds	r5, r2, r3
 8012c1c:	42ac      	cmp	r4, r5
 8012c1e:	d101      	bne.n	8012c24 <__sfputs_r+0x12>
 8012c20:	2000      	movs	r0, #0
 8012c22:	e007      	b.n	8012c34 <__sfputs_r+0x22>
 8012c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c28:	463a      	mov	r2, r7
 8012c2a:	4630      	mov	r0, r6
 8012c2c:	f7ff ffda 	bl	8012be4 <__sfputc_r>
 8012c30:	1c43      	adds	r3, r0, #1
 8012c32:	d1f3      	bne.n	8012c1c <__sfputs_r+0xa>
 8012c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012c38 <_vfiprintf_r>:
 8012c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c3c:	460d      	mov	r5, r1
 8012c3e:	b09d      	sub	sp, #116	; 0x74
 8012c40:	4614      	mov	r4, r2
 8012c42:	4698      	mov	r8, r3
 8012c44:	4606      	mov	r6, r0
 8012c46:	b118      	cbz	r0, 8012c50 <_vfiprintf_r+0x18>
 8012c48:	6983      	ldr	r3, [r0, #24]
 8012c4a:	b90b      	cbnz	r3, 8012c50 <_vfiprintf_r+0x18>
 8012c4c:	f7fe fb2a 	bl	80112a4 <__sinit>
 8012c50:	4b89      	ldr	r3, [pc, #548]	; (8012e78 <_vfiprintf_r+0x240>)
 8012c52:	429d      	cmp	r5, r3
 8012c54:	d11b      	bne.n	8012c8e <_vfiprintf_r+0x56>
 8012c56:	6875      	ldr	r5, [r6, #4]
 8012c58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c5a:	07d9      	lsls	r1, r3, #31
 8012c5c:	d405      	bmi.n	8012c6a <_vfiprintf_r+0x32>
 8012c5e:	89ab      	ldrh	r3, [r5, #12]
 8012c60:	059a      	lsls	r2, r3, #22
 8012c62:	d402      	bmi.n	8012c6a <_vfiprintf_r+0x32>
 8012c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c66:	f7fe ff2e 	bl	8011ac6 <__retarget_lock_acquire_recursive>
 8012c6a:	89ab      	ldrh	r3, [r5, #12]
 8012c6c:	071b      	lsls	r3, r3, #28
 8012c6e:	d501      	bpl.n	8012c74 <_vfiprintf_r+0x3c>
 8012c70:	692b      	ldr	r3, [r5, #16]
 8012c72:	b9eb      	cbnz	r3, 8012cb0 <_vfiprintf_r+0x78>
 8012c74:	4629      	mov	r1, r5
 8012c76:	4630      	mov	r0, r6
 8012c78:	f7fd fb04 	bl	8010284 <__swsetup_r>
 8012c7c:	b1c0      	cbz	r0, 8012cb0 <_vfiprintf_r+0x78>
 8012c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c80:	07dc      	lsls	r4, r3, #31
 8012c82:	d50e      	bpl.n	8012ca2 <_vfiprintf_r+0x6a>
 8012c84:	f04f 30ff 	mov.w	r0, #4294967295
 8012c88:	b01d      	add	sp, #116	; 0x74
 8012c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c8e:	4b7b      	ldr	r3, [pc, #492]	; (8012e7c <_vfiprintf_r+0x244>)
 8012c90:	429d      	cmp	r5, r3
 8012c92:	d101      	bne.n	8012c98 <_vfiprintf_r+0x60>
 8012c94:	68b5      	ldr	r5, [r6, #8]
 8012c96:	e7df      	b.n	8012c58 <_vfiprintf_r+0x20>
 8012c98:	4b79      	ldr	r3, [pc, #484]	; (8012e80 <_vfiprintf_r+0x248>)
 8012c9a:	429d      	cmp	r5, r3
 8012c9c:	bf08      	it	eq
 8012c9e:	68f5      	ldreq	r5, [r6, #12]
 8012ca0:	e7da      	b.n	8012c58 <_vfiprintf_r+0x20>
 8012ca2:	89ab      	ldrh	r3, [r5, #12]
 8012ca4:	0598      	lsls	r0, r3, #22
 8012ca6:	d4ed      	bmi.n	8012c84 <_vfiprintf_r+0x4c>
 8012ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012caa:	f7fe ff0d 	bl	8011ac8 <__retarget_lock_release_recursive>
 8012cae:	e7e9      	b.n	8012c84 <_vfiprintf_r+0x4c>
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8012cb4:	2320      	movs	r3, #32
 8012cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8012cbe:	2330      	movs	r3, #48	; 0x30
 8012cc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012e84 <_vfiprintf_r+0x24c>
 8012cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012cc8:	f04f 0901 	mov.w	r9, #1
 8012ccc:	4623      	mov	r3, r4
 8012cce:	469a      	mov	sl, r3
 8012cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cd4:	b10a      	cbz	r2, 8012cda <_vfiprintf_r+0xa2>
 8012cd6:	2a25      	cmp	r2, #37	; 0x25
 8012cd8:	d1f9      	bne.n	8012cce <_vfiprintf_r+0x96>
 8012cda:	ebba 0b04 	subs.w	fp, sl, r4
 8012cde:	d00b      	beq.n	8012cf8 <_vfiprintf_r+0xc0>
 8012ce0:	465b      	mov	r3, fp
 8012ce2:	4622      	mov	r2, r4
 8012ce4:	4629      	mov	r1, r5
 8012ce6:	4630      	mov	r0, r6
 8012ce8:	f7ff ff93 	bl	8012c12 <__sfputs_r>
 8012cec:	3001      	adds	r0, #1
 8012cee:	f000 80aa 	beq.w	8012e46 <_vfiprintf_r+0x20e>
 8012cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cf4:	445a      	add	r2, fp
 8012cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8012cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	f000 80a2 	beq.w	8012e46 <_vfiprintf_r+0x20e>
 8012d02:	2300      	movs	r3, #0
 8012d04:	f04f 32ff 	mov.w	r2, #4294967295
 8012d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d0c:	f10a 0a01 	add.w	sl, sl, #1
 8012d10:	9304      	str	r3, [sp, #16]
 8012d12:	9307      	str	r3, [sp, #28]
 8012d14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d18:	931a      	str	r3, [sp, #104]	; 0x68
 8012d1a:	4654      	mov	r4, sl
 8012d1c:	2205      	movs	r2, #5
 8012d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d22:	4858      	ldr	r0, [pc, #352]	; (8012e84 <_vfiprintf_r+0x24c>)
 8012d24:	f7ed fa7c 	bl	8000220 <memchr>
 8012d28:	9a04      	ldr	r2, [sp, #16]
 8012d2a:	b9d8      	cbnz	r0, 8012d64 <_vfiprintf_r+0x12c>
 8012d2c:	06d1      	lsls	r1, r2, #27
 8012d2e:	bf44      	itt	mi
 8012d30:	2320      	movmi	r3, #32
 8012d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d36:	0713      	lsls	r3, r2, #28
 8012d38:	bf44      	itt	mi
 8012d3a:	232b      	movmi	r3, #43	; 0x2b
 8012d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d40:	f89a 3000 	ldrb.w	r3, [sl]
 8012d44:	2b2a      	cmp	r3, #42	; 0x2a
 8012d46:	d015      	beq.n	8012d74 <_vfiprintf_r+0x13c>
 8012d48:	9a07      	ldr	r2, [sp, #28]
 8012d4a:	4654      	mov	r4, sl
 8012d4c:	2000      	movs	r0, #0
 8012d4e:	f04f 0c0a 	mov.w	ip, #10
 8012d52:	4621      	mov	r1, r4
 8012d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d58:	3b30      	subs	r3, #48	; 0x30
 8012d5a:	2b09      	cmp	r3, #9
 8012d5c:	d94e      	bls.n	8012dfc <_vfiprintf_r+0x1c4>
 8012d5e:	b1b0      	cbz	r0, 8012d8e <_vfiprintf_r+0x156>
 8012d60:	9207      	str	r2, [sp, #28]
 8012d62:	e014      	b.n	8012d8e <_vfiprintf_r+0x156>
 8012d64:	eba0 0308 	sub.w	r3, r0, r8
 8012d68:	fa09 f303 	lsl.w	r3, r9, r3
 8012d6c:	4313      	orrs	r3, r2
 8012d6e:	9304      	str	r3, [sp, #16]
 8012d70:	46a2      	mov	sl, r4
 8012d72:	e7d2      	b.n	8012d1a <_vfiprintf_r+0xe2>
 8012d74:	9b03      	ldr	r3, [sp, #12]
 8012d76:	1d19      	adds	r1, r3, #4
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	9103      	str	r1, [sp, #12]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	bfbb      	ittet	lt
 8012d80:	425b      	neglt	r3, r3
 8012d82:	f042 0202 	orrlt.w	r2, r2, #2
 8012d86:	9307      	strge	r3, [sp, #28]
 8012d88:	9307      	strlt	r3, [sp, #28]
 8012d8a:	bfb8      	it	lt
 8012d8c:	9204      	strlt	r2, [sp, #16]
 8012d8e:	7823      	ldrb	r3, [r4, #0]
 8012d90:	2b2e      	cmp	r3, #46	; 0x2e
 8012d92:	d10c      	bne.n	8012dae <_vfiprintf_r+0x176>
 8012d94:	7863      	ldrb	r3, [r4, #1]
 8012d96:	2b2a      	cmp	r3, #42	; 0x2a
 8012d98:	d135      	bne.n	8012e06 <_vfiprintf_r+0x1ce>
 8012d9a:	9b03      	ldr	r3, [sp, #12]
 8012d9c:	1d1a      	adds	r2, r3, #4
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	9203      	str	r2, [sp, #12]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	bfb8      	it	lt
 8012da6:	f04f 33ff 	movlt.w	r3, #4294967295
 8012daa:	3402      	adds	r4, #2
 8012dac:	9305      	str	r3, [sp, #20]
 8012dae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012e94 <_vfiprintf_r+0x25c>
 8012db2:	7821      	ldrb	r1, [r4, #0]
 8012db4:	2203      	movs	r2, #3
 8012db6:	4650      	mov	r0, sl
 8012db8:	f7ed fa32 	bl	8000220 <memchr>
 8012dbc:	b140      	cbz	r0, 8012dd0 <_vfiprintf_r+0x198>
 8012dbe:	2340      	movs	r3, #64	; 0x40
 8012dc0:	eba0 000a 	sub.w	r0, r0, sl
 8012dc4:	fa03 f000 	lsl.w	r0, r3, r0
 8012dc8:	9b04      	ldr	r3, [sp, #16]
 8012dca:	4303      	orrs	r3, r0
 8012dcc:	3401      	adds	r4, #1
 8012dce:	9304      	str	r3, [sp, #16]
 8012dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dd4:	482c      	ldr	r0, [pc, #176]	; (8012e88 <_vfiprintf_r+0x250>)
 8012dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012dda:	2206      	movs	r2, #6
 8012ddc:	f7ed fa20 	bl	8000220 <memchr>
 8012de0:	2800      	cmp	r0, #0
 8012de2:	d03f      	beq.n	8012e64 <_vfiprintf_r+0x22c>
 8012de4:	4b29      	ldr	r3, [pc, #164]	; (8012e8c <_vfiprintf_r+0x254>)
 8012de6:	bb1b      	cbnz	r3, 8012e30 <_vfiprintf_r+0x1f8>
 8012de8:	9b03      	ldr	r3, [sp, #12]
 8012dea:	3307      	adds	r3, #7
 8012dec:	f023 0307 	bic.w	r3, r3, #7
 8012df0:	3308      	adds	r3, #8
 8012df2:	9303      	str	r3, [sp, #12]
 8012df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012df6:	443b      	add	r3, r7
 8012df8:	9309      	str	r3, [sp, #36]	; 0x24
 8012dfa:	e767      	b.n	8012ccc <_vfiprintf_r+0x94>
 8012dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e00:	460c      	mov	r4, r1
 8012e02:	2001      	movs	r0, #1
 8012e04:	e7a5      	b.n	8012d52 <_vfiprintf_r+0x11a>
 8012e06:	2300      	movs	r3, #0
 8012e08:	3401      	adds	r4, #1
 8012e0a:	9305      	str	r3, [sp, #20]
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	f04f 0c0a 	mov.w	ip, #10
 8012e12:	4620      	mov	r0, r4
 8012e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e18:	3a30      	subs	r2, #48	; 0x30
 8012e1a:	2a09      	cmp	r2, #9
 8012e1c:	d903      	bls.n	8012e26 <_vfiprintf_r+0x1ee>
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d0c5      	beq.n	8012dae <_vfiprintf_r+0x176>
 8012e22:	9105      	str	r1, [sp, #20]
 8012e24:	e7c3      	b.n	8012dae <_vfiprintf_r+0x176>
 8012e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e2a:	4604      	mov	r4, r0
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	e7f0      	b.n	8012e12 <_vfiprintf_r+0x1da>
 8012e30:	ab03      	add	r3, sp, #12
 8012e32:	9300      	str	r3, [sp, #0]
 8012e34:	462a      	mov	r2, r5
 8012e36:	4b16      	ldr	r3, [pc, #88]	; (8012e90 <_vfiprintf_r+0x258>)
 8012e38:	a904      	add	r1, sp, #16
 8012e3a:	4630      	mov	r0, r6
 8012e3c:	f7fb fc20 	bl	800e680 <_printf_float>
 8012e40:	4607      	mov	r7, r0
 8012e42:	1c78      	adds	r0, r7, #1
 8012e44:	d1d6      	bne.n	8012df4 <_vfiprintf_r+0x1bc>
 8012e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e48:	07d9      	lsls	r1, r3, #31
 8012e4a:	d405      	bmi.n	8012e58 <_vfiprintf_r+0x220>
 8012e4c:	89ab      	ldrh	r3, [r5, #12]
 8012e4e:	059a      	lsls	r2, r3, #22
 8012e50:	d402      	bmi.n	8012e58 <_vfiprintf_r+0x220>
 8012e52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e54:	f7fe fe38 	bl	8011ac8 <__retarget_lock_release_recursive>
 8012e58:	89ab      	ldrh	r3, [r5, #12]
 8012e5a:	065b      	lsls	r3, r3, #25
 8012e5c:	f53f af12 	bmi.w	8012c84 <_vfiprintf_r+0x4c>
 8012e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e62:	e711      	b.n	8012c88 <_vfiprintf_r+0x50>
 8012e64:	ab03      	add	r3, sp, #12
 8012e66:	9300      	str	r3, [sp, #0]
 8012e68:	462a      	mov	r2, r5
 8012e6a:	4b09      	ldr	r3, [pc, #36]	; (8012e90 <_vfiprintf_r+0x258>)
 8012e6c:	a904      	add	r1, sp, #16
 8012e6e:	4630      	mov	r0, r6
 8012e70:	f7fb feaa 	bl	800ebc8 <_printf_i>
 8012e74:	e7e4      	b.n	8012e40 <_vfiprintf_r+0x208>
 8012e76:	bf00      	nop
 8012e78:	08014adc 	.word	0x08014adc
 8012e7c:	08014afc 	.word	0x08014afc
 8012e80:	08014abc 	.word	0x08014abc
 8012e84:	08014cfc 	.word	0x08014cfc
 8012e88:	08014d06 	.word	0x08014d06
 8012e8c:	0800e681 	.word	0x0800e681
 8012e90:	08012c13 	.word	0x08012c13
 8012e94:	08014d02 	.word	0x08014d02

08012e98 <_scanf_chars>:
 8012e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e9c:	4615      	mov	r5, r2
 8012e9e:	688a      	ldr	r2, [r1, #8]
 8012ea0:	4680      	mov	r8, r0
 8012ea2:	460c      	mov	r4, r1
 8012ea4:	b932      	cbnz	r2, 8012eb4 <_scanf_chars+0x1c>
 8012ea6:	698a      	ldr	r2, [r1, #24]
 8012ea8:	2a00      	cmp	r2, #0
 8012eaa:	bf0c      	ite	eq
 8012eac:	2201      	moveq	r2, #1
 8012eae:	f04f 32ff 	movne.w	r2, #4294967295
 8012eb2:	608a      	str	r2, [r1, #8]
 8012eb4:	6822      	ldr	r2, [r4, #0]
 8012eb6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8012f44 <_scanf_chars+0xac>
 8012eba:	06d1      	lsls	r1, r2, #27
 8012ebc:	bf5f      	itttt	pl
 8012ebe:	681a      	ldrpl	r2, [r3, #0]
 8012ec0:	1d11      	addpl	r1, r2, #4
 8012ec2:	6019      	strpl	r1, [r3, #0]
 8012ec4:	6816      	ldrpl	r6, [r2, #0]
 8012ec6:	2700      	movs	r7, #0
 8012ec8:	69a0      	ldr	r0, [r4, #24]
 8012eca:	b188      	cbz	r0, 8012ef0 <_scanf_chars+0x58>
 8012ecc:	2801      	cmp	r0, #1
 8012ece:	d107      	bne.n	8012ee0 <_scanf_chars+0x48>
 8012ed0:	682b      	ldr	r3, [r5, #0]
 8012ed2:	781a      	ldrb	r2, [r3, #0]
 8012ed4:	6963      	ldr	r3, [r4, #20]
 8012ed6:	5c9b      	ldrb	r3, [r3, r2]
 8012ed8:	b953      	cbnz	r3, 8012ef0 <_scanf_chars+0x58>
 8012eda:	bb27      	cbnz	r7, 8012f26 <_scanf_chars+0x8e>
 8012edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ee0:	2802      	cmp	r0, #2
 8012ee2:	d120      	bne.n	8012f26 <_scanf_chars+0x8e>
 8012ee4:	682b      	ldr	r3, [r5, #0]
 8012ee6:	781b      	ldrb	r3, [r3, #0]
 8012ee8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8012eec:	071b      	lsls	r3, r3, #28
 8012eee:	d41a      	bmi.n	8012f26 <_scanf_chars+0x8e>
 8012ef0:	6823      	ldr	r3, [r4, #0]
 8012ef2:	06da      	lsls	r2, r3, #27
 8012ef4:	bf5e      	ittt	pl
 8012ef6:	682b      	ldrpl	r3, [r5, #0]
 8012ef8:	781b      	ldrbpl	r3, [r3, #0]
 8012efa:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012efe:	682a      	ldr	r2, [r5, #0]
 8012f00:	686b      	ldr	r3, [r5, #4]
 8012f02:	3201      	adds	r2, #1
 8012f04:	602a      	str	r2, [r5, #0]
 8012f06:	68a2      	ldr	r2, [r4, #8]
 8012f08:	3b01      	subs	r3, #1
 8012f0a:	3a01      	subs	r2, #1
 8012f0c:	606b      	str	r3, [r5, #4]
 8012f0e:	3701      	adds	r7, #1
 8012f10:	60a2      	str	r2, [r4, #8]
 8012f12:	b142      	cbz	r2, 8012f26 <_scanf_chars+0x8e>
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	dcd7      	bgt.n	8012ec8 <_scanf_chars+0x30>
 8012f18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012f1c:	4629      	mov	r1, r5
 8012f1e:	4640      	mov	r0, r8
 8012f20:	4798      	blx	r3
 8012f22:	2800      	cmp	r0, #0
 8012f24:	d0d0      	beq.n	8012ec8 <_scanf_chars+0x30>
 8012f26:	6823      	ldr	r3, [r4, #0]
 8012f28:	f013 0310 	ands.w	r3, r3, #16
 8012f2c:	d105      	bne.n	8012f3a <_scanf_chars+0xa2>
 8012f2e:	68e2      	ldr	r2, [r4, #12]
 8012f30:	3201      	adds	r2, #1
 8012f32:	60e2      	str	r2, [r4, #12]
 8012f34:	69a2      	ldr	r2, [r4, #24]
 8012f36:	b102      	cbz	r2, 8012f3a <_scanf_chars+0xa2>
 8012f38:	7033      	strb	r3, [r6, #0]
 8012f3a:	6923      	ldr	r3, [r4, #16]
 8012f3c:	441f      	add	r7, r3
 8012f3e:	6127      	str	r7, [r4, #16]
 8012f40:	2000      	movs	r0, #0
 8012f42:	e7cb      	b.n	8012edc <_scanf_chars+0x44>
 8012f44:	08014899 	.word	0x08014899

08012f48 <_scanf_i>:
 8012f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f4c:	4698      	mov	r8, r3
 8012f4e:	4b74      	ldr	r3, [pc, #464]	; (8013120 <_scanf_i+0x1d8>)
 8012f50:	460c      	mov	r4, r1
 8012f52:	4682      	mov	sl, r0
 8012f54:	4616      	mov	r6, r2
 8012f56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012f5a:	b087      	sub	sp, #28
 8012f5c:	ab03      	add	r3, sp, #12
 8012f5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012f62:	4b70      	ldr	r3, [pc, #448]	; (8013124 <_scanf_i+0x1dc>)
 8012f64:	69a1      	ldr	r1, [r4, #24]
 8012f66:	4a70      	ldr	r2, [pc, #448]	; (8013128 <_scanf_i+0x1e0>)
 8012f68:	2903      	cmp	r1, #3
 8012f6a:	bf18      	it	ne
 8012f6c:	461a      	movne	r2, r3
 8012f6e:	68a3      	ldr	r3, [r4, #8]
 8012f70:	9201      	str	r2, [sp, #4]
 8012f72:	1e5a      	subs	r2, r3, #1
 8012f74:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012f78:	bf88      	it	hi
 8012f7a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012f7e:	4627      	mov	r7, r4
 8012f80:	bf82      	ittt	hi
 8012f82:	eb03 0905 	addhi.w	r9, r3, r5
 8012f86:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012f8a:	60a3      	strhi	r3, [r4, #8]
 8012f8c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012f90:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012f94:	bf98      	it	ls
 8012f96:	f04f 0900 	movls.w	r9, #0
 8012f9a:	6023      	str	r3, [r4, #0]
 8012f9c:	463d      	mov	r5, r7
 8012f9e:	f04f 0b00 	mov.w	fp, #0
 8012fa2:	6831      	ldr	r1, [r6, #0]
 8012fa4:	ab03      	add	r3, sp, #12
 8012fa6:	7809      	ldrb	r1, [r1, #0]
 8012fa8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012fac:	2202      	movs	r2, #2
 8012fae:	f7ed f937 	bl	8000220 <memchr>
 8012fb2:	b328      	cbz	r0, 8013000 <_scanf_i+0xb8>
 8012fb4:	f1bb 0f01 	cmp.w	fp, #1
 8012fb8:	d159      	bne.n	801306e <_scanf_i+0x126>
 8012fba:	6862      	ldr	r2, [r4, #4]
 8012fbc:	b92a      	cbnz	r2, 8012fca <_scanf_i+0x82>
 8012fbe:	6822      	ldr	r2, [r4, #0]
 8012fc0:	2308      	movs	r3, #8
 8012fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012fc6:	6063      	str	r3, [r4, #4]
 8012fc8:	6022      	str	r2, [r4, #0]
 8012fca:	6822      	ldr	r2, [r4, #0]
 8012fcc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012fd0:	6022      	str	r2, [r4, #0]
 8012fd2:	68a2      	ldr	r2, [r4, #8]
 8012fd4:	1e51      	subs	r1, r2, #1
 8012fd6:	60a1      	str	r1, [r4, #8]
 8012fd8:	b192      	cbz	r2, 8013000 <_scanf_i+0xb8>
 8012fda:	6832      	ldr	r2, [r6, #0]
 8012fdc:	1c51      	adds	r1, r2, #1
 8012fde:	6031      	str	r1, [r6, #0]
 8012fe0:	7812      	ldrb	r2, [r2, #0]
 8012fe2:	f805 2b01 	strb.w	r2, [r5], #1
 8012fe6:	6872      	ldr	r2, [r6, #4]
 8012fe8:	3a01      	subs	r2, #1
 8012fea:	2a00      	cmp	r2, #0
 8012fec:	6072      	str	r2, [r6, #4]
 8012fee:	dc07      	bgt.n	8013000 <_scanf_i+0xb8>
 8012ff0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012ff4:	4631      	mov	r1, r6
 8012ff6:	4650      	mov	r0, sl
 8012ff8:	4790      	blx	r2
 8012ffa:	2800      	cmp	r0, #0
 8012ffc:	f040 8085 	bne.w	801310a <_scanf_i+0x1c2>
 8013000:	f10b 0b01 	add.w	fp, fp, #1
 8013004:	f1bb 0f03 	cmp.w	fp, #3
 8013008:	d1cb      	bne.n	8012fa2 <_scanf_i+0x5a>
 801300a:	6863      	ldr	r3, [r4, #4]
 801300c:	b90b      	cbnz	r3, 8013012 <_scanf_i+0xca>
 801300e:	230a      	movs	r3, #10
 8013010:	6063      	str	r3, [r4, #4]
 8013012:	6863      	ldr	r3, [r4, #4]
 8013014:	4945      	ldr	r1, [pc, #276]	; (801312c <_scanf_i+0x1e4>)
 8013016:	6960      	ldr	r0, [r4, #20]
 8013018:	1ac9      	subs	r1, r1, r3
 801301a:	f000 f8a5 	bl	8013168 <__sccl>
 801301e:	f04f 0b00 	mov.w	fp, #0
 8013022:	68a3      	ldr	r3, [r4, #8]
 8013024:	6822      	ldr	r2, [r4, #0]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d03d      	beq.n	80130a6 <_scanf_i+0x15e>
 801302a:	6831      	ldr	r1, [r6, #0]
 801302c:	6960      	ldr	r0, [r4, #20]
 801302e:	f891 c000 	ldrb.w	ip, [r1]
 8013032:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013036:	2800      	cmp	r0, #0
 8013038:	d035      	beq.n	80130a6 <_scanf_i+0x15e>
 801303a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801303e:	d124      	bne.n	801308a <_scanf_i+0x142>
 8013040:	0510      	lsls	r0, r2, #20
 8013042:	d522      	bpl.n	801308a <_scanf_i+0x142>
 8013044:	f10b 0b01 	add.w	fp, fp, #1
 8013048:	f1b9 0f00 	cmp.w	r9, #0
 801304c:	d003      	beq.n	8013056 <_scanf_i+0x10e>
 801304e:	3301      	adds	r3, #1
 8013050:	f109 39ff 	add.w	r9, r9, #4294967295
 8013054:	60a3      	str	r3, [r4, #8]
 8013056:	6873      	ldr	r3, [r6, #4]
 8013058:	3b01      	subs	r3, #1
 801305a:	2b00      	cmp	r3, #0
 801305c:	6073      	str	r3, [r6, #4]
 801305e:	dd1b      	ble.n	8013098 <_scanf_i+0x150>
 8013060:	6833      	ldr	r3, [r6, #0]
 8013062:	3301      	adds	r3, #1
 8013064:	6033      	str	r3, [r6, #0]
 8013066:	68a3      	ldr	r3, [r4, #8]
 8013068:	3b01      	subs	r3, #1
 801306a:	60a3      	str	r3, [r4, #8]
 801306c:	e7d9      	b.n	8013022 <_scanf_i+0xda>
 801306e:	f1bb 0f02 	cmp.w	fp, #2
 8013072:	d1ae      	bne.n	8012fd2 <_scanf_i+0x8a>
 8013074:	6822      	ldr	r2, [r4, #0]
 8013076:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801307a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801307e:	d1bf      	bne.n	8013000 <_scanf_i+0xb8>
 8013080:	2310      	movs	r3, #16
 8013082:	6063      	str	r3, [r4, #4]
 8013084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013088:	e7a2      	b.n	8012fd0 <_scanf_i+0x88>
 801308a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801308e:	6022      	str	r2, [r4, #0]
 8013090:	780b      	ldrb	r3, [r1, #0]
 8013092:	f805 3b01 	strb.w	r3, [r5], #1
 8013096:	e7de      	b.n	8013056 <_scanf_i+0x10e>
 8013098:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801309c:	4631      	mov	r1, r6
 801309e:	4650      	mov	r0, sl
 80130a0:	4798      	blx	r3
 80130a2:	2800      	cmp	r0, #0
 80130a4:	d0df      	beq.n	8013066 <_scanf_i+0x11e>
 80130a6:	6823      	ldr	r3, [r4, #0]
 80130a8:	05d9      	lsls	r1, r3, #23
 80130aa:	d50d      	bpl.n	80130c8 <_scanf_i+0x180>
 80130ac:	42bd      	cmp	r5, r7
 80130ae:	d909      	bls.n	80130c4 <_scanf_i+0x17c>
 80130b0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80130b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80130b8:	4632      	mov	r2, r6
 80130ba:	4650      	mov	r0, sl
 80130bc:	4798      	blx	r3
 80130be:	f105 39ff 	add.w	r9, r5, #4294967295
 80130c2:	464d      	mov	r5, r9
 80130c4:	42bd      	cmp	r5, r7
 80130c6:	d028      	beq.n	801311a <_scanf_i+0x1d2>
 80130c8:	6822      	ldr	r2, [r4, #0]
 80130ca:	f012 0210 	ands.w	r2, r2, #16
 80130ce:	d113      	bne.n	80130f8 <_scanf_i+0x1b0>
 80130d0:	702a      	strb	r2, [r5, #0]
 80130d2:	6863      	ldr	r3, [r4, #4]
 80130d4:	9e01      	ldr	r6, [sp, #4]
 80130d6:	4639      	mov	r1, r7
 80130d8:	4650      	mov	r0, sl
 80130da:	47b0      	blx	r6
 80130dc:	f8d8 3000 	ldr.w	r3, [r8]
 80130e0:	6821      	ldr	r1, [r4, #0]
 80130e2:	1d1a      	adds	r2, r3, #4
 80130e4:	f8c8 2000 	str.w	r2, [r8]
 80130e8:	f011 0f20 	tst.w	r1, #32
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	d00f      	beq.n	8013110 <_scanf_i+0x1c8>
 80130f0:	6018      	str	r0, [r3, #0]
 80130f2:	68e3      	ldr	r3, [r4, #12]
 80130f4:	3301      	adds	r3, #1
 80130f6:	60e3      	str	r3, [r4, #12]
 80130f8:	1bed      	subs	r5, r5, r7
 80130fa:	44ab      	add	fp, r5
 80130fc:	6925      	ldr	r5, [r4, #16]
 80130fe:	445d      	add	r5, fp
 8013100:	6125      	str	r5, [r4, #16]
 8013102:	2000      	movs	r0, #0
 8013104:	b007      	add	sp, #28
 8013106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801310a:	f04f 0b00 	mov.w	fp, #0
 801310e:	e7ca      	b.n	80130a6 <_scanf_i+0x15e>
 8013110:	07ca      	lsls	r2, r1, #31
 8013112:	bf4c      	ite	mi
 8013114:	8018      	strhmi	r0, [r3, #0]
 8013116:	6018      	strpl	r0, [r3, #0]
 8013118:	e7eb      	b.n	80130f2 <_scanf_i+0x1aa>
 801311a:	2001      	movs	r0, #1
 801311c:	e7f2      	b.n	8013104 <_scanf_i+0x1bc>
 801311e:	bf00      	nop
 8013120:	0801479c 	.word	0x0801479c
 8013124:	080132d5 	.word	0x080132d5
 8013128:	08010131 	.word	0x08010131
 801312c:	08014d26 	.word	0x08014d26

08013130 <_read_r>:
 8013130:	b538      	push	{r3, r4, r5, lr}
 8013132:	4d07      	ldr	r5, [pc, #28]	; (8013150 <_read_r+0x20>)
 8013134:	4604      	mov	r4, r0
 8013136:	4608      	mov	r0, r1
 8013138:	4611      	mov	r1, r2
 801313a:	2200      	movs	r2, #0
 801313c:	602a      	str	r2, [r5, #0]
 801313e:	461a      	mov	r2, r3
 8013140:	f7f1 f962 	bl	8004408 <_read>
 8013144:	1c43      	adds	r3, r0, #1
 8013146:	d102      	bne.n	801314e <_read_r+0x1e>
 8013148:	682b      	ldr	r3, [r5, #0]
 801314a:	b103      	cbz	r3, 801314e <_read_r+0x1e>
 801314c:	6023      	str	r3, [r4, #0]
 801314e:	bd38      	pop	{r3, r4, r5, pc}
 8013150:	20001898 	.word	0x20001898
 8013154:	00000000 	.word	0x00000000

08013158 <nan>:
 8013158:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013160 <nan+0x8>
 801315c:	4770      	bx	lr
 801315e:	bf00      	nop
 8013160:	00000000 	.word	0x00000000
 8013164:	7ff80000 	.word	0x7ff80000

08013168 <__sccl>:
 8013168:	b570      	push	{r4, r5, r6, lr}
 801316a:	780b      	ldrb	r3, [r1, #0]
 801316c:	4604      	mov	r4, r0
 801316e:	2b5e      	cmp	r3, #94	; 0x5e
 8013170:	bf0b      	itete	eq
 8013172:	784b      	ldrbeq	r3, [r1, #1]
 8013174:	1c48      	addne	r0, r1, #1
 8013176:	1c88      	addeq	r0, r1, #2
 8013178:	2200      	movne	r2, #0
 801317a:	bf08      	it	eq
 801317c:	2201      	moveq	r2, #1
 801317e:	1e61      	subs	r1, r4, #1
 8013180:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013184:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013188:	42a9      	cmp	r1, r5
 801318a:	d1fb      	bne.n	8013184 <__sccl+0x1c>
 801318c:	b90b      	cbnz	r3, 8013192 <__sccl+0x2a>
 801318e:	3801      	subs	r0, #1
 8013190:	bd70      	pop	{r4, r5, r6, pc}
 8013192:	f082 0101 	eor.w	r1, r2, #1
 8013196:	54e1      	strb	r1, [r4, r3]
 8013198:	1c42      	adds	r2, r0, #1
 801319a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801319e:	2d2d      	cmp	r5, #45	; 0x2d
 80131a0:	f102 36ff 	add.w	r6, r2, #4294967295
 80131a4:	4610      	mov	r0, r2
 80131a6:	d006      	beq.n	80131b6 <__sccl+0x4e>
 80131a8:	2d5d      	cmp	r5, #93	; 0x5d
 80131aa:	d0f1      	beq.n	8013190 <__sccl+0x28>
 80131ac:	b90d      	cbnz	r5, 80131b2 <__sccl+0x4a>
 80131ae:	4630      	mov	r0, r6
 80131b0:	e7ee      	b.n	8013190 <__sccl+0x28>
 80131b2:	462b      	mov	r3, r5
 80131b4:	e7ef      	b.n	8013196 <__sccl+0x2e>
 80131b6:	7816      	ldrb	r6, [r2, #0]
 80131b8:	2e5d      	cmp	r6, #93	; 0x5d
 80131ba:	d0fa      	beq.n	80131b2 <__sccl+0x4a>
 80131bc:	42b3      	cmp	r3, r6
 80131be:	dcf8      	bgt.n	80131b2 <__sccl+0x4a>
 80131c0:	4618      	mov	r0, r3
 80131c2:	3001      	adds	r0, #1
 80131c4:	4286      	cmp	r6, r0
 80131c6:	5421      	strb	r1, [r4, r0]
 80131c8:	dcfb      	bgt.n	80131c2 <__sccl+0x5a>
 80131ca:	43d8      	mvns	r0, r3
 80131cc:	4430      	add	r0, r6
 80131ce:	1c5d      	adds	r5, r3, #1
 80131d0:	42b3      	cmp	r3, r6
 80131d2:	bfa8      	it	ge
 80131d4:	2000      	movge	r0, #0
 80131d6:	182b      	adds	r3, r5, r0
 80131d8:	3202      	adds	r2, #2
 80131da:	e7de      	b.n	801319a <__sccl+0x32>

080131dc <_strtoul_l.isra.0>:
 80131dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80131e0:	4e3b      	ldr	r6, [pc, #236]	; (80132d0 <_strtoul_l.isra.0+0xf4>)
 80131e2:	4686      	mov	lr, r0
 80131e4:	468c      	mov	ip, r1
 80131e6:	4660      	mov	r0, ip
 80131e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80131ec:	5da5      	ldrb	r5, [r4, r6]
 80131ee:	f015 0508 	ands.w	r5, r5, #8
 80131f2:	d1f8      	bne.n	80131e6 <_strtoul_l.isra.0+0xa>
 80131f4:	2c2d      	cmp	r4, #45	; 0x2d
 80131f6:	d134      	bne.n	8013262 <_strtoul_l.isra.0+0x86>
 80131f8:	f89c 4000 	ldrb.w	r4, [ip]
 80131fc:	f04f 0801 	mov.w	r8, #1
 8013200:	f100 0c02 	add.w	ip, r0, #2
 8013204:	2b00      	cmp	r3, #0
 8013206:	d05e      	beq.n	80132c6 <_strtoul_l.isra.0+0xea>
 8013208:	2b10      	cmp	r3, #16
 801320a:	d10c      	bne.n	8013226 <_strtoul_l.isra.0+0x4a>
 801320c:	2c30      	cmp	r4, #48	; 0x30
 801320e:	d10a      	bne.n	8013226 <_strtoul_l.isra.0+0x4a>
 8013210:	f89c 0000 	ldrb.w	r0, [ip]
 8013214:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013218:	2858      	cmp	r0, #88	; 0x58
 801321a:	d14f      	bne.n	80132bc <_strtoul_l.isra.0+0xe0>
 801321c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8013220:	2310      	movs	r3, #16
 8013222:	f10c 0c02 	add.w	ip, ip, #2
 8013226:	f04f 37ff 	mov.w	r7, #4294967295
 801322a:	2500      	movs	r5, #0
 801322c:	fbb7 f7f3 	udiv	r7, r7, r3
 8013230:	fb03 f907 	mul.w	r9, r3, r7
 8013234:	ea6f 0909 	mvn.w	r9, r9
 8013238:	4628      	mov	r0, r5
 801323a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801323e:	2e09      	cmp	r6, #9
 8013240:	d818      	bhi.n	8013274 <_strtoul_l.isra.0+0x98>
 8013242:	4634      	mov	r4, r6
 8013244:	42a3      	cmp	r3, r4
 8013246:	dd24      	ble.n	8013292 <_strtoul_l.isra.0+0xb6>
 8013248:	2d00      	cmp	r5, #0
 801324a:	db1f      	blt.n	801328c <_strtoul_l.isra.0+0xb0>
 801324c:	4287      	cmp	r7, r0
 801324e:	d31d      	bcc.n	801328c <_strtoul_l.isra.0+0xb0>
 8013250:	d101      	bne.n	8013256 <_strtoul_l.isra.0+0x7a>
 8013252:	45a1      	cmp	r9, r4
 8013254:	db1a      	blt.n	801328c <_strtoul_l.isra.0+0xb0>
 8013256:	fb00 4003 	mla	r0, r0, r3, r4
 801325a:	2501      	movs	r5, #1
 801325c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013260:	e7eb      	b.n	801323a <_strtoul_l.isra.0+0x5e>
 8013262:	2c2b      	cmp	r4, #43	; 0x2b
 8013264:	bf08      	it	eq
 8013266:	f89c 4000 	ldrbeq.w	r4, [ip]
 801326a:	46a8      	mov	r8, r5
 801326c:	bf08      	it	eq
 801326e:	f100 0c02 	addeq.w	ip, r0, #2
 8013272:	e7c7      	b.n	8013204 <_strtoul_l.isra.0+0x28>
 8013274:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8013278:	2e19      	cmp	r6, #25
 801327a:	d801      	bhi.n	8013280 <_strtoul_l.isra.0+0xa4>
 801327c:	3c37      	subs	r4, #55	; 0x37
 801327e:	e7e1      	b.n	8013244 <_strtoul_l.isra.0+0x68>
 8013280:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8013284:	2e19      	cmp	r6, #25
 8013286:	d804      	bhi.n	8013292 <_strtoul_l.isra.0+0xb6>
 8013288:	3c57      	subs	r4, #87	; 0x57
 801328a:	e7db      	b.n	8013244 <_strtoul_l.isra.0+0x68>
 801328c:	f04f 35ff 	mov.w	r5, #4294967295
 8013290:	e7e4      	b.n	801325c <_strtoul_l.isra.0+0x80>
 8013292:	2d00      	cmp	r5, #0
 8013294:	da07      	bge.n	80132a6 <_strtoul_l.isra.0+0xca>
 8013296:	2322      	movs	r3, #34	; 0x22
 8013298:	f8ce 3000 	str.w	r3, [lr]
 801329c:	f04f 30ff 	mov.w	r0, #4294967295
 80132a0:	b942      	cbnz	r2, 80132b4 <_strtoul_l.isra.0+0xd8>
 80132a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132a6:	f1b8 0f00 	cmp.w	r8, #0
 80132aa:	d000      	beq.n	80132ae <_strtoul_l.isra.0+0xd2>
 80132ac:	4240      	negs	r0, r0
 80132ae:	2a00      	cmp	r2, #0
 80132b0:	d0f7      	beq.n	80132a2 <_strtoul_l.isra.0+0xc6>
 80132b2:	b10d      	cbz	r5, 80132b8 <_strtoul_l.isra.0+0xdc>
 80132b4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80132b8:	6011      	str	r1, [r2, #0]
 80132ba:	e7f2      	b.n	80132a2 <_strtoul_l.isra.0+0xc6>
 80132bc:	2430      	movs	r4, #48	; 0x30
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d1b1      	bne.n	8013226 <_strtoul_l.isra.0+0x4a>
 80132c2:	2308      	movs	r3, #8
 80132c4:	e7af      	b.n	8013226 <_strtoul_l.isra.0+0x4a>
 80132c6:	2c30      	cmp	r4, #48	; 0x30
 80132c8:	d0a2      	beq.n	8013210 <_strtoul_l.isra.0+0x34>
 80132ca:	230a      	movs	r3, #10
 80132cc:	e7ab      	b.n	8013226 <_strtoul_l.isra.0+0x4a>
 80132ce:	bf00      	nop
 80132d0:	08014899 	.word	0x08014899

080132d4 <_strtoul_r>:
 80132d4:	f7ff bf82 	b.w	80131dc <_strtoul_l.isra.0>

080132d8 <__submore>:
 80132d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132dc:	460c      	mov	r4, r1
 80132de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80132e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132e4:	4299      	cmp	r1, r3
 80132e6:	d11d      	bne.n	8013324 <__submore+0x4c>
 80132e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80132ec:	f7fb f8ce 	bl	800e48c <_malloc_r>
 80132f0:	b918      	cbnz	r0, 80132fa <__submore+0x22>
 80132f2:	f04f 30ff 	mov.w	r0, #4294967295
 80132f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8013300:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013304:	6360      	str	r0, [r4, #52]	; 0x34
 8013306:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801330a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801330e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013312:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013316:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801331a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801331e:	6020      	str	r0, [r4, #0]
 8013320:	2000      	movs	r0, #0
 8013322:	e7e8      	b.n	80132f6 <__submore+0x1e>
 8013324:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013326:	0077      	lsls	r7, r6, #1
 8013328:	463a      	mov	r2, r7
 801332a:	f000 f889 	bl	8013440 <_realloc_r>
 801332e:	4605      	mov	r5, r0
 8013330:	2800      	cmp	r0, #0
 8013332:	d0de      	beq.n	80132f2 <__submore+0x1a>
 8013334:	eb00 0806 	add.w	r8, r0, r6
 8013338:	4601      	mov	r1, r0
 801333a:	4632      	mov	r2, r6
 801333c:	4640      	mov	r0, r8
 801333e:	f7fb f83f 	bl	800e3c0 <memcpy>
 8013342:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013346:	f8c4 8000 	str.w	r8, [r4]
 801334a:	e7e9      	b.n	8013320 <__submore+0x48>

0801334c <__ascii_wctomb>:
 801334c:	b149      	cbz	r1, 8013362 <__ascii_wctomb+0x16>
 801334e:	2aff      	cmp	r2, #255	; 0xff
 8013350:	bf85      	ittet	hi
 8013352:	238a      	movhi	r3, #138	; 0x8a
 8013354:	6003      	strhi	r3, [r0, #0]
 8013356:	700a      	strbls	r2, [r1, #0]
 8013358:	f04f 30ff 	movhi.w	r0, #4294967295
 801335c:	bf98      	it	ls
 801335e:	2001      	movls	r0, #1
 8013360:	4770      	bx	lr
 8013362:	4608      	mov	r0, r1
 8013364:	4770      	bx	lr
	...

08013368 <__assert_func>:
 8013368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801336a:	4614      	mov	r4, r2
 801336c:	461a      	mov	r2, r3
 801336e:	4b09      	ldr	r3, [pc, #36]	; (8013394 <__assert_func+0x2c>)
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	4605      	mov	r5, r0
 8013374:	68d8      	ldr	r0, [r3, #12]
 8013376:	b14c      	cbz	r4, 801338c <__assert_func+0x24>
 8013378:	4b07      	ldr	r3, [pc, #28]	; (8013398 <__assert_func+0x30>)
 801337a:	9100      	str	r1, [sp, #0]
 801337c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013380:	4906      	ldr	r1, [pc, #24]	; (801339c <__assert_func+0x34>)
 8013382:	462b      	mov	r3, r5
 8013384:	f000 f80e 	bl	80133a4 <fiprintf>
 8013388:	f000 f880 	bl	801348c <abort>
 801338c:	4b04      	ldr	r3, [pc, #16]	; (80133a0 <__assert_func+0x38>)
 801338e:	461c      	mov	r4, r3
 8013390:	e7f3      	b.n	801337a <__assert_func+0x12>
 8013392:	bf00      	nop
 8013394:	20000028 	.word	0x20000028
 8013398:	08014d28 	.word	0x08014d28
 801339c:	08014d35 	.word	0x08014d35
 80133a0:	08014d63 	.word	0x08014d63

080133a4 <fiprintf>:
 80133a4:	b40e      	push	{r1, r2, r3}
 80133a6:	b503      	push	{r0, r1, lr}
 80133a8:	4601      	mov	r1, r0
 80133aa:	ab03      	add	r3, sp, #12
 80133ac:	4805      	ldr	r0, [pc, #20]	; (80133c4 <fiprintf+0x20>)
 80133ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80133b2:	6800      	ldr	r0, [r0, #0]
 80133b4:	9301      	str	r3, [sp, #4]
 80133b6:	f7ff fc3f 	bl	8012c38 <_vfiprintf_r>
 80133ba:	b002      	add	sp, #8
 80133bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80133c0:	b003      	add	sp, #12
 80133c2:	4770      	bx	lr
 80133c4:	20000028 	.word	0x20000028

080133c8 <_fstat_r>:
 80133c8:	b538      	push	{r3, r4, r5, lr}
 80133ca:	4d07      	ldr	r5, [pc, #28]	; (80133e8 <_fstat_r+0x20>)
 80133cc:	2300      	movs	r3, #0
 80133ce:	4604      	mov	r4, r0
 80133d0:	4608      	mov	r0, r1
 80133d2:	4611      	mov	r1, r2
 80133d4:	602b      	str	r3, [r5, #0]
 80133d6:	f7f1 f85c 	bl	8004492 <_fstat>
 80133da:	1c43      	adds	r3, r0, #1
 80133dc:	d102      	bne.n	80133e4 <_fstat_r+0x1c>
 80133de:	682b      	ldr	r3, [r5, #0]
 80133e0:	b103      	cbz	r3, 80133e4 <_fstat_r+0x1c>
 80133e2:	6023      	str	r3, [r4, #0]
 80133e4:	bd38      	pop	{r3, r4, r5, pc}
 80133e6:	bf00      	nop
 80133e8:	20001898 	.word	0x20001898

080133ec <_isatty_r>:
 80133ec:	b538      	push	{r3, r4, r5, lr}
 80133ee:	4d06      	ldr	r5, [pc, #24]	; (8013408 <_isatty_r+0x1c>)
 80133f0:	2300      	movs	r3, #0
 80133f2:	4604      	mov	r4, r0
 80133f4:	4608      	mov	r0, r1
 80133f6:	602b      	str	r3, [r5, #0]
 80133f8:	f7f1 f85b 	bl	80044b2 <_isatty>
 80133fc:	1c43      	adds	r3, r0, #1
 80133fe:	d102      	bne.n	8013406 <_isatty_r+0x1a>
 8013400:	682b      	ldr	r3, [r5, #0]
 8013402:	b103      	cbz	r3, 8013406 <_isatty_r+0x1a>
 8013404:	6023      	str	r3, [r4, #0]
 8013406:	bd38      	pop	{r3, r4, r5, pc}
 8013408:	20001898 	.word	0x20001898

0801340c <memmove>:
 801340c:	4288      	cmp	r0, r1
 801340e:	b510      	push	{r4, lr}
 8013410:	eb01 0402 	add.w	r4, r1, r2
 8013414:	d902      	bls.n	801341c <memmove+0x10>
 8013416:	4284      	cmp	r4, r0
 8013418:	4623      	mov	r3, r4
 801341a:	d807      	bhi.n	801342c <memmove+0x20>
 801341c:	1e43      	subs	r3, r0, #1
 801341e:	42a1      	cmp	r1, r4
 8013420:	d008      	beq.n	8013434 <memmove+0x28>
 8013422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013426:	f803 2f01 	strb.w	r2, [r3, #1]!
 801342a:	e7f8      	b.n	801341e <memmove+0x12>
 801342c:	4402      	add	r2, r0
 801342e:	4601      	mov	r1, r0
 8013430:	428a      	cmp	r2, r1
 8013432:	d100      	bne.n	8013436 <memmove+0x2a>
 8013434:	bd10      	pop	{r4, pc}
 8013436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801343a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801343e:	e7f7      	b.n	8013430 <memmove+0x24>

08013440 <_realloc_r>:
 8013440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013442:	4607      	mov	r7, r0
 8013444:	4614      	mov	r4, r2
 8013446:	460e      	mov	r6, r1
 8013448:	b921      	cbnz	r1, 8013454 <_realloc_r+0x14>
 801344a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801344e:	4611      	mov	r1, r2
 8013450:	f7fb b81c 	b.w	800e48c <_malloc_r>
 8013454:	b922      	cbnz	r2, 8013460 <_realloc_r+0x20>
 8013456:	f7fa ffc9 	bl	800e3ec <_free_r>
 801345a:	4625      	mov	r5, r4
 801345c:	4628      	mov	r0, r5
 801345e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013460:	f000 f81b 	bl	801349a <_malloc_usable_size_r>
 8013464:	42a0      	cmp	r0, r4
 8013466:	d20f      	bcs.n	8013488 <_realloc_r+0x48>
 8013468:	4621      	mov	r1, r4
 801346a:	4638      	mov	r0, r7
 801346c:	f7fb f80e 	bl	800e48c <_malloc_r>
 8013470:	4605      	mov	r5, r0
 8013472:	2800      	cmp	r0, #0
 8013474:	d0f2      	beq.n	801345c <_realloc_r+0x1c>
 8013476:	4631      	mov	r1, r6
 8013478:	4622      	mov	r2, r4
 801347a:	f7fa ffa1 	bl	800e3c0 <memcpy>
 801347e:	4631      	mov	r1, r6
 8013480:	4638      	mov	r0, r7
 8013482:	f7fa ffb3 	bl	800e3ec <_free_r>
 8013486:	e7e9      	b.n	801345c <_realloc_r+0x1c>
 8013488:	4635      	mov	r5, r6
 801348a:	e7e7      	b.n	801345c <_realloc_r+0x1c>

0801348c <abort>:
 801348c:	b508      	push	{r3, lr}
 801348e:	2006      	movs	r0, #6
 8013490:	f000 f834 	bl	80134fc <raise>
 8013494:	2001      	movs	r0, #1
 8013496:	f7f0 ffad 	bl	80043f4 <_exit>

0801349a <_malloc_usable_size_r>:
 801349a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801349e:	1f18      	subs	r0, r3, #4
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	bfbc      	itt	lt
 80134a4:	580b      	ldrlt	r3, [r1, r0]
 80134a6:	18c0      	addlt	r0, r0, r3
 80134a8:	4770      	bx	lr

080134aa <_raise_r>:
 80134aa:	291f      	cmp	r1, #31
 80134ac:	b538      	push	{r3, r4, r5, lr}
 80134ae:	4604      	mov	r4, r0
 80134b0:	460d      	mov	r5, r1
 80134b2:	d904      	bls.n	80134be <_raise_r+0x14>
 80134b4:	2316      	movs	r3, #22
 80134b6:	6003      	str	r3, [r0, #0]
 80134b8:	f04f 30ff 	mov.w	r0, #4294967295
 80134bc:	bd38      	pop	{r3, r4, r5, pc}
 80134be:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80134c0:	b112      	cbz	r2, 80134c8 <_raise_r+0x1e>
 80134c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80134c6:	b94b      	cbnz	r3, 80134dc <_raise_r+0x32>
 80134c8:	4620      	mov	r0, r4
 80134ca:	f000 f831 	bl	8013530 <_getpid_r>
 80134ce:	462a      	mov	r2, r5
 80134d0:	4601      	mov	r1, r0
 80134d2:	4620      	mov	r0, r4
 80134d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134d8:	f000 b818 	b.w	801350c <_kill_r>
 80134dc:	2b01      	cmp	r3, #1
 80134de:	d00a      	beq.n	80134f6 <_raise_r+0x4c>
 80134e0:	1c59      	adds	r1, r3, #1
 80134e2:	d103      	bne.n	80134ec <_raise_r+0x42>
 80134e4:	2316      	movs	r3, #22
 80134e6:	6003      	str	r3, [r0, #0]
 80134e8:	2001      	movs	r0, #1
 80134ea:	e7e7      	b.n	80134bc <_raise_r+0x12>
 80134ec:	2400      	movs	r4, #0
 80134ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80134f2:	4628      	mov	r0, r5
 80134f4:	4798      	blx	r3
 80134f6:	2000      	movs	r0, #0
 80134f8:	e7e0      	b.n	80134bc <_raise_r+0x12>
	...

080134fc <raise>:
 80134fc:	4b02      	ldr	r3, [pc, #8]	; (8013508 <raise+0xc>)
 80134fe:	4601      	mov	r1, r0
 8013500:	6818      	ldr	r0, [r3, #0]
 8013502:	f7ff bfd2 	b.w	80134aa <_raise_r>
 8013506:	bf00      	nop
 8013508:	20000028 	.word	0x20000028

0801350c <_kill_r>:
 801350c:	b538      	push	{r3, r4, r5, lr}
 801350e:	4d07      	ldr	r5, [pc, #28]	; (801352c <_kill_r+0x20>)
 8013510:	2300      	movs	r3, #0
 8013512:	4604      	mov	r4, r0
 8013514:	4608      	mov	r0, r1
 8013516:	4611      	mov	r1, r2
 8013518:	602b      	str	r3, [r5, #0]
 801351a:	f7f0 ff5b 	bl	80043d4 <_kill>
 801351e:	1c43      	adds	r3, r0, #1
 8013520:	d102      	bne.n	8013528 <_kill_r+0x1c>
 8013522:	682b      	ldr	r3, [r5, #0]
 8013524:	b103      	cbz	r3, 8013528 <_kill_r+0x1c>
 8013526:	6023      	str	r3, [r4, #0]
 8013528:	bd38      	pop	{r3, r4, r5, pc}
 801352a:	bf00      	nop
 801352c:	20001898 	.word	0x20001898

08013530 <_getpid_r>:
 8013530:	f7f0 bf48 	b.w	80043c4 <_getpid>

08013534 <pow>:
 8013534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013538:	ec59 8b10 	vmov	r8, r9, d0
 801353c:	ec57 6b11 	vmov	r6, r7, d1
 8013540:	f000 f8a6 	bl	8013690 <__ieee754_pow>
 8013544:	4b4e      	ldr	r3, [pc, #312]	; (8013680 <pow+0x14c>)
 8013546:	f993 3000 	ldrsb.w	r3, [r3]
 801354a:	3301      	adds	r3, #1
 801354c:	ec55 4b10 	vmov	r4, r5, d0
 8013550:	d015      	beq.n	801357e <pow+0x4a>
 8013552:	4632      	mov	r2, r6
 8013554:	463b      	mov	r3, r7
 8013556:	4630      	mov	r0, r6
 8013558:	4639      	mov	r1, r7
 801355a:	f7ed fb07 	bl	8000b6c <__aeabi_dcmpun>
 801355e:	b970      	cbnz	r0, 801357e <pow+0x4a>
 8013560:	4642      	mov	r2, r8
 8013562:	464b      	mov	r3, r9
 8013564:	4640      	mov	r0, r8
 8013566:	4649      	mov	r1, r9
 8013568:	f7ed fb00 	bl	8000b6c <__aeabi_dcmpun>
 801356c:	2200      	movs	r2, #0
 801356e:	2300      	movs	r3, #0
 8013570:	b148      	cbz	r0, 8013586 <pow+0x52>
 8013572:	4630      	mov	r0, r6
 8013574:	4639      	mov	r1, r7
 8013576:	f7ed fac7 	bl	8000b08 <__aeabi_dcmpeq>
 801357a:	2800      	cmp	r0, #0
 801357c:	d17d      	bne.n	801367a <pow+0x146>
 801357e:	ec45 4b10 	vmov	d0, r4, r5
 8013582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013586:	4640      	mov	r0, r8
 8013588:	4649      	mov	r1, r9
 801358a:	f7ed fabd 	bl	8000b08 <__aeabi_dcmpeq>
 801358e:	b1e0      	cbz	r0, 80135ca <pow+0x96>
 8013590:	2200      	movs	r2, #0
 8013592:	2300      	movs	r3, #0
 8013594:	4630      	mov	r0, r6
 8013596:	4639      	mov	r1, r7
 8013598:	f7ed fab6 	bl	8000b08 <__aeabi_dcmpeq>
 801359c:	2800      	cmp	r0, #0
 801359e:	d16c      	bne.n	801367a <pow+0x146>
 80135a0:	ec47 6b10 	vmov	d0, r6, r7
 80135a4:	f000 fe53 	bl	801424e <finite>
 80135a8:	2800      	cmp	r0, #0
 80135aa:	d0e8      	beq.n	801357e <pow+0x4a>
 80135ac:	2200      	movs	r2, #0
 80135ae:	2300      	movs	r3, #0
 80135b0:	4630      	mov	r0, r6
 80135b2:	4639      	mov	r1, r7
 80135b4:	f7ed fab2 	bl	8000b1c <__aeabi_dcmplt>
 80135b8:	2800      	cmp	r0, #0
 80135ba:	d0e0      	beq.n	801357e <pow+0x4a>
 80135bc:	f7fa fece 	bl	800e35c <__errno>
 80135c0:	2321      	movs	r3, #33	; 0x21
 80135c2:	6003      	str	r3, [r0, #0]
 80135c4:	2400      	movs	r4, #0
 80135c6:	4d2f      	ldr	r5, [pc, #188]	; (8013684 <pow+0x150>)
 80135c8:	e7d9      	b.n	801357e <pow+0x4a>
 80135ca:	ec45 4b10 	vmov	d0, r4, r5
 80135ce:	f000 fe3e 	bl	801424e <finite>
 80135d2:	bbb8      	cbnz	r0, 8013644 <pow+0x110>
 80135d4:	ec49 8b10 	vmov	d0, r8, r9
 80135d8:	f000 fe39 	bl	801424e <finite>
 80135dc:	b390      	cbz	r0, 8013644 <pow+0x110>
 80135de:	ec47 6b10 	vmov	d0, r6, r7
 80135e2:	f000 fe34 	bl	801424e <finite>
 80135e6:	b368      	cbz	r0, 8013644 <pow+0x110>
 80135e8:	4622      	mov	r2, r4
 80135ea:	462b      	mov	r3, r5
 80135ec:	4620      	mov	r0, r4
 80135ee:	4629      	mov	r1, r5
 80135f0:	f7ed fabc 	bl	8000b6c <__aeabi_dcmpun>
 80135f4:	b160      	cbz	r0, 8013610 <pow+0xdc>
 80135f6:	f7fa feb1 	bl	800e35c <__errno>
 80135fa:	2321      	movs	r3, #33	; 0x21
 80135fc:	6003      	str	r3, [r0, #0]
 80135fe:	2200      	movs	r2, #0
 8013600:	2300      	movs	r3, #0
 8013602:	4610      	mov	r0, r2
 8013604:	4619      	mov	r1, r3
 8013606:	f7ed f941 	bl	800088c <__aeabi_ddiv>
 801360a:	4604      	mov	r4, r0
 801360c:	460d      	mov	r5, r1
 801360e:	e7b6      	b.n	801357e <pow+0x4a>
 8013610:	f7fa fea4 	bl	800e35c <__errno>
 8013614:	2322      	movs	r3, #34	; 0x22
 8013616:	6003      	str	r3, [r0, #0]
 8013618:	2200      	movs	r2, #0
 801361a:	2300      	movs	r3, #0
 801361c:	4640      	mov	r0, r8
 801361e:	4649      	mov	r1, r9
 8013620:	f7ed fa7c 	bl	8000b1c <__aeabi_dcmplt>
 8013624:	2400      	movs	r4, #0
 8013626:	b158      	cbz	r0, 8013640 <pow+0x10c>
 8013628:	ec47 6b10 	vmov	d0, r6, r7
 801362c:	f000 fe1a 	bl	8014264 <rint>
 8013630:	4632      	mov	r2, r6
 8013632:	ec51 0b10 	vmov	r0, r1, d0
 8013636:	463b      	mov	r3, r7
 8013638:	f7ed fa66 	bl	8000b08 <__aeabi_dcmpeq>
 801363c:	2800      	cmp	r0, #0
 801363e:	d0c2      	beq.n	80135c6 <pow+0x92>
 8013640:	4d11      	ldr	r5, [pc, #68]	; (8013688 <pow+0x154>)
 8013642:	e79c      	b.n	801357e <pow+0x4a>
 8013644:	2200      	movs	r2, #0
 8013646:	2300      	movs	r3, #0
 8013648:	4620      	mov	r0, r4
 801364a:	4629      	mov	r1, r5
 801364c:	f7ed fa5c 	bl	8000b08 <__aeabi_dcmpeq>
 8013650:	2800      	cmp	r0, #0
 8013652:	d094      	beq.n	801357e <pow+0x4a>
 8013654:	ec49 8b10 	vmov	d0, r8, r9
 8013658:	f000 fdf9 	bl	801424e <finite>
 801365c:	2800      	cmp	r0, #0
 801365e:	d08e      	beq.n	801357e <pow+0x4a>
 8013660:	ec47 6b10 	vmov	d0, r6, r7
 8013664:	f000 fdf3 	bl	801424e <finite>
 8013668:	2800      	cmp	r0, #0
 801366a:	d088      	beq.n	801357e <pow+0x4a>
 801366c:	f7fa fe76 	bl	800e35c <__errno>
 8013670:	2322      	movs	r3, #34	; 0x22
 8013672:	6003      	str	r3, [r0, #0]
 8013674:	2400      	movs	r4, #0
 8013676:	2500      	movs	r5, #0
 8013678:	e781      	b.n	801357e <pow+0x4a>
 801367a:	4d04      	ldr	r5, [pc, #16]	; (801368c <pow+0x158>)
 801367c:	2400      	movs	r4, #0
 801367e:	e77e      	b.n	801357e <pow+0x4a>
 8013680:	200001fc 	.word	0x200001fc
 8013684:	fff00000 	.word	0xfff00000
 8013688:	7ff00000 	.word	0x7ff00000
 801368c:	3ff00000 	.word	0x3ff00000

08013690 <__ieee754_pow>:
 8013690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013694:	ed2d 8b06 	vpush	{d8-d10}
 8013698:	b08d      	sub	sp, #52	; 0x34
 801369a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801369e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80136a2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80136a6:	ea56 0100 	orrs.w	r1, r6, r0
 80136aa:	ec53 2b10 	vmov	r2, r3, d0
 80136ae:	f000 84d1 	beq.w	8014054 <__ieee754_pow+0x9c4>
 80136b2:	497f      	ldr	r1, [pc, #508]	; (80138b0 <__ieee754_pow+0x220>)
 80136b4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80136b8:	428c      	cmp	r4, r1
 80136ba:	ee10 8a10 	vmov	r8, s0
 80136be:	4699      	mov	r9, r3
 80136c0:	dc09      	bgt.n	80136d6 <__ieee754_pow+0x46>
 80136c2:	d103      	bne.n	80136cc <__ieee754_pow+0x3c>
 80136c4:	b97a      	cbnz	r2, 80136e6 <__ieee754_pow+0x56>
 80136c6:	42a6      	cmp	r6, r4
 80136c8:	dd02      	ble.n	80136d0 <__ieee754_pow+0x40>
 80136ca:	e00c      	b.n	80136e6 <__ieee754_pow+0x56>
 80136cc:	428e      	cmp	r6, r1
 80136ce:	dc02      	bgt.n	80136d6 <__ieee754_pow+0x46>
 80136d0:	428e      	cmp	r6, r1
 80136d2:	d110      	bne.n	80136f6 <__ieee754_pow+0x66>
 80136d4:	b178      	cbz	r0, 80136f6 <__ieee754_pow+0x66>
 80136d6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80136da:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80136de:	ea54 0308 	orrs.w	r3, r4, r8
 80136e2:	f000 84b7 	beq.w	8014054 <__ieee754_pow+0x9c4>
 80136e6:	4873      	ldr	r0, [pc, #460]	; (80138b4 <__ieee754_pow+0x224>)
 80136e8:	b00d      	add	sp, #52	; 0x34
 80136ea:	ecbd 8b06 	vpop	{d8-d10}
 80136ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f2:	f7ff bd31 	b.w	8013158 <nan>
 80136f6:	f1b9 0f00 	cmp.w	r9, #0
 80136fa:	da36      	bge.n	801376a <__ieee754_pow+0xda>
 80136fc:	496e      	ldr	r1, [pc, #440]	; (80138b8 <__ieee754_pow+0x228>)
 80136fe:	428e      	cmp	r6, r1
 8013700:	dc51      	bgt.n	80137a6 <__ieee754_pow+0x116>
 8013702:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8013706:	428e      	cmp	r6, r1
 8013708:	f340 84af 	ble.w	801406a <__ieee754_pow+0x9da>
 801370c:	1531      	asrs	r1, r6, #20
 801370e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013712:	2914      	cmp	r1, #20
 8013714:	dd0f      	ble.n	8013736 <__ieee754_pow+0xa6>
 8013716:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801371a:	fa20 fc01 	lsr.w	ip, r0, r1
 801371e:	fa0c f101 	lsl.w	r1, ip, r1
 8013722:	4281      	cmp	r1, r0
 8013724:	f040 84a1 	bne.w	801406a <__ieee754_pow+0x9da>
 8013728:	f00c 0c01 	and.w	ip, ip, #1
 801372c:	f1cc 0102 	rsb	r1, ip, #2
 8013730:	9100      	str	r1, [sp, #0]
 8013732:	b180      	cbz	r0, 8013756 <__ieee754_pow+0xc6>
 8013734:	e059      	b.n	80137ea <__ieee754_pow+0x15a>
 8013736:	2800      	cmp	r0, #0
 8013738:	d155      	bne.n	80137e6 <__ieee754_pow+0x156>
 801373a:	f1c1 0114 	rsb	r1, r1, #20
 801373e:	fa46 fc01 	asr.w	ip, r6, r1
 8013742:	fa0c f101 	lsl.w	r1, ip, r1
 8013746:	42b1      	cmp	r1, r6
 8013748:	f040 848c 	bne.w	8014064 <__ieee754_pow+0x9d4>
 801374c:	f00c 0c01 	and.w	ip, ip, #1
 8013750:	f1cc 0102 	rsb	r1, ip, #2
 8013754:	9100      	str	r1, [sp, #0]
 8013756:	4959      	ldr	r1, [pc, #356]	; (80138bc <__ieee754_pow+0x22c>)
 8013758:	428e      	cmp	r6, r1
 801375a:	d12d      	bne.n	80137b8 <__ieee754_pow+0x128>
 801375c:	2f00      	cmp	r7, #0
 801375e:	da79      	bge.n	8013854 <__ieee754_pow+0x1c4>
 8013760:	4956      	ldr	r1, [pc, #344]	; (80138bc <__ieee754_pow+0x22c>)
 8013762:	2000      	movs	r0, #0
 8013764:	f7ed f892 	bl	800088c <__aeabi_ddiv>
 8013768:	e016      	b.n	8013798 <__ieee754_pow+0x108>
 801376a:	2100      	movs	r1, #0
 801376c:	9100      	str	r1, [sp, #0]
 801376e:	2800      	cmp	r0, #0
 8013770:	d13b      	bne.n	80137ea <__ieee754_pow+0x15a>
 8013772:	494f      	ldr	r1, [pc, #316]	; (80138b0 <__ieee754_pow+0x220>)
 8013774:	428e      	cmp	r6, r1
 8013776:	d1ee      	bne.n	8013756 <__ieee754_pow+0xc6>
 8013778:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801377c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013780:	ea53 0308 	orrs.w	r3, r3, r8
 8013784:	f000 8466 	beq.w	8014054 <__ieee754_pow+0x9c4>
 8013788:	4b4d      	ldr	r3, [pc, #308]	; (80138c0 <__ieee754_pow+0x230>)
 801378a:	429c      	cmp	r4, r3
 801378c:	dd0d      	ble.n	80137aa <__ieee754_pow+0x11a>
 801378e:	2f00      	cmp	r7, #0
 8013790:	f280 8464 	bge.w	801405c <__ieee754_pow+0x9cc>
 8013794:	2000      	movs	r0, #0
 8013796:	2100      	movs	r1, #0
 8013798:	ec41 0b10 	vmov	d0, r0, r1
 801379c:	b00d      	add	sp, #52	; 0x34
 801379e:	ecbd 8b06 	vpop	{d8-d10}
 80137a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a6:	2102      	movs	r1, #2
 80137a8:	e7e0      	b.n	801376c <__ieee754_pow+0xdc>
 80137aa:	2f00      	cmp	r7, #0
 80137ac:	daf2      	bge.n	8013794 <__ieee754_pow+0x104>
 80137ae:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80137b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80137b6:	e7ef      	b.n	8013798 <__ieee754_pow+0x108>
 80137b8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80137bc:	d104      	bne.n	80137c8 <__ieee754_pow+0x138>
 80137be:	4610      	mov	r0, r2
 80137c0:	4619      	mov	r1, r3
 80137c2:	f7ec ff39 	bl	8000638 <__aeabi_dmul>
 80137c6:	e7e7      	b.n	8013798 <__ieee754_pow+0x108>
 80137c8:	493e      	ldr	r1, [pc, #248]	; (80138c4 <__ieee754_pow+0x234>)
 80137ca:	428f      	cmp	r7, r1
 80137cc:	d10d      	bne.n	80137ea <__ieee754_pow+0x15a>
 80137ce:	f1b9 0f00 	cmp.w	r9, #0
 80137d2:	db0a      	blt.n	80137ea <__ieee754_pow+0x15a>
 80137d4:	ec43 2b10 	vmov	d0, r2, r3
 80137d8:	b00d      	add	sp, #52	; 0x34
 80137da:	ecbd 8b06 	vpop	{d8-d10}
 80137de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137e2:	f000 bc77 	b.w	80140d4 <__ieee754_sqrt>
 80137e6:	2100      	movs	r1, #0
 80137e8:	9100      	str	r1, [sp, #0]
 80137ea:	ec43 2b10 	vmov	d0, r2, r3
 80137ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80137f2:	f000 fd23 	bl	801423c <fabs>
 80137f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80137fa:	ec51 0b10 	vmov	r0, r1, d0
 80137fe:	f1b8 0f00 	cmp.w	r8, #0
 8013802:	d12a      	bne.n	801385a <__ieee754_pow+0x1ca>
 8013804:	b12c      	cbz	r4, 8013812 <__ieee754_pow+0x182>
 8013806:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80138bc <__ieee754_pow+0x22c>
 801380a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801380e:	45e6      	cmp	lr, ip
 8013810:	d123      	bne.n	801385a <__ieee754_pow+0x1ca>
 8013812:	2f00      	cmp	r7, #0
 8013814:	da05      	bge.n	8013822 <__ieee754_pow+0x192>
 8013816:	4602      	mov	r2, r0
 8013818:	460b      	mov	r3, r1
 801381a:	2000      	movs	r0, #0
 801381c:	4927      	ldr	r1, [pc, #156]	; (80138bc <__ieee754_pow+0x22c>)
 801381e:	f7ed f835 	bl	800088c <__aeabi_ddiv>
 8013822:	f1b9 0f00 	cmp.w	r9, #0
 8013826:	dab7      	bge.n	8013798 <__ieee754_pow+0x108>
 8013828:	9b00      	ldr	r3, [sp, #0]
 801382a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801382e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013832:	4323      	orrs	r3, r4
 8013834:	d108      	bne.n	8013848 <__ieee754_pow+0x1b8>
 8013836:	4602      	mov	r2, r0
 8013838:	460b      	mov	r3, r1
 801383a:	4610      	mov	r0, r2
 801383c:	4619      	mov	r1, r3
 801383e:	f7ec fd43 	bl	80002c8 <__aeabi_dsub>
 8013842:	4602      	mov	r2, r0
 8013844:	460b      	mov	r3, r1
 8013846:	e78d      	b.n	8013764 <__ieee754_pow+0xd4>
 8013848:	9b00      	ldr	r3, [sp, #0]
 801384a:	2b01      	cmp	r3, #1
 801384c:	d1a4      	bne.n	8013798 <__ieee754_pow+0x108>
 801384e:	4602      	mov	r2, r0
 8013850:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013854:	4610      	mov	r0, r2
 8013856:	4619      	mov	r1, r3
 8013858:	e79e      	b.n	8013798 <__ieee754_pow+0x108>
 801385a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801385e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8013862:	950a      	str	r5, [sp, #40]	; 0x28
 8013864:	9d00      	ldr	r5, [sp, #0]
 8013866:	46ac      	mov	ip, r5
 8013868:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801386a:	ea5c 0505 	orrs.w	r5, ip, r5
 801386e:	d0e4      	beq.n	801383a <__ieee754_pow+0x1aa>
 8013870:	4b15      	ldr	r3, [pc, #84]	; (80138c8 <__ieee754_pow+0x238>)
 8013872:	429e      	cmp	r6, r3
 8013874:	f340 80fc 	ble.w	8013a70 <__ieee754_pow+0x3e0>
 8013878:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801387c:	429e      	cmp	r6, r3
 801387e:	4b10      	ldr	r3, [pc, #64]	; (80138c0 <__ieee754_pow+0x230>)
 8013880:	dd07      	ble.n	8013892 <__ieee754_pow+0x202>
 8013882:	429c      	cmp	r4, r3
 8013884:	dc0a      	bgt.n	801389c <__ieee754_pow+0x20c>
 8013886:	2f00      	cmp	r7, #0
 8013888:	da84      	bge.n	8013794 <__ieee754_pow+0x104>
 801388a:	a307      	add	r3, pc, #28	; (adr r3, 80138a8 <__ieee754_pow+0x218>)
 801388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013890:	e795      	b.n	80137be <__ieee754_pow+0x12e>
 8013892:	429c      	cmp	r4, r3
 8013894:	dbf7      	blt.n	8013886 <__ieee754_pow+0x1f6>
 8013896:	4b09      	ldr	r3, [pc, #36]	; (80138bc <__ieee754_pow+0x22c>)
 8013898:	429c      	cmp	r4, r3
 801389a:	dd17      	ble.n	80138cc <__ieee754_pow+0x23c>
 801389c:	2f00      	cmp	r7, #0
 801389e:	dcf4      	bgt.n	801388a <__ieee754_pow+0x1fa>
 80138a0:	e778      	b.n	8013794 <__ieee754_pow+0x104>
 80138a2:	bf00      	nop
 80138a4:	f3af 8000 	nop.w
 80138a8:	8800759c 	.word	0x8800759c
 80138ac:	7e37e43c 	.word	0x7e37e43c
 80138b0:	7ff00000 	.word	0x7ff00000
 80138b4:	08014d63 	.word	0x08014d63
 80138b8:	433fffff 	.word	0x433fffff
 80138bc:	3ff00000 	.word	0x3ff00000
 80138c0:	3fefffff 	.word	0x3fefffff
 80138c4:	3fe00000 	.word	0x3fe00000
 80138c8:	41e00000 	.word	0x41e00000
 80138cc:	4b64      	ldr	r3, [pc, #400]	; (8013a60 <__ieee754_pow+0x3d0>)
 80138ce:	2200      	movs	r2, #0
 80138d0:	f7ec fcfa 	bl	80002c8 <__aeabi_dsub>
 80138d4:	a356      	add	r3, pc, #344	; (adr r3, 8013a30 <__ieee754_pow+0x3a0>)
 80138d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138da:	4604      	mov	r4, r0
 80138dc:	460d      	mov	r5, r1
 80138de:	f7ec feab 	bl	8000638 <__aeabi_dmul>
 80138e2:	a355      	add	r3, pc, #340	; (adr r3, 8013a38 <__ieee754_pow+0x3a8>)
 80138e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e8:	4606      	mov	r6, r0
 80138ea:	460f      	mov	r7, r1
 80138ec:	4620      	mov	r0, r4
 80138ee:	4629      	mov	r1, r5
 80138f0:	f7ec fea2 	bl	8000638 <__aeabi_dmul>
 80138f4:	4b5b      	ldr	r3, [pc, #364]	; (8013a64 <__ieee754_pow+0x3d4>)
 80138f6:	4682      	mov	sl, r0
 80138f8:	468b      	mov	fp, r1
 80138fa:	2200      	movs	r2, #0
 80138fc:	4620      	mov	r0, r4
 80138fe:	4629      	mov	r1, r5
 8013900:	f7ec fe9a 	bl	8000638 <__aeabi_dmul>
 8013904:	4602      	mov	r2, r0
 8013906:	460b      	mov	r3, r1
 8013908:	a14d      	add	r1, pc, #308	; (adr r1, 8013a40 <__ieee754_pow+0x3b0>)
 801390a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801390e:	f7ec fcdb 	bl	80002c8 <__aeabi_dsub>
 8013912:	4622      	mov	r2, r4
 8013914:	462b      	mov	r3, r5
 8013916:	f7ec fe8f 	bl	8000638 <__aeabi_dmul>
 801391a:	4602      	mov	r2, r0
 801391c:	460b      	mov	r3, r1
 801391e:	2000      	movs	r0, #0
 8013920:	4951      	ldr	r1, [pc, #324]	; (8013a68 <__ieee754_pow+0x3d8>)
 8013922:	f7ec fcd1 	bl	80002c8 <__aeabi_dsub>
 8013926:	4622      	mov	r2, r4
 8013928:	4680      	mov	r8, r0
 801392a:	4689      	mov	r9, r1
 801392c:	462b      	mov	r3, r5
 801392e:	4620      	mov	r0, r4
 8013930:	4629      	mov	r1, r5
 8013932:	f7ec fe81 	bl	8000638 <__aeabi_dmul>
 8013936:	4602      	mov	r2, r0
 8013938:	460b      	mov	r3, r1
 801393a:	4640      	mov	r0, r8
 801393c:	4649      	mov	r1, r9
 801393e:	f7ec fe7b 	bl	8000638 <__aeabi_dmul>
 8013942:	a341      	add	r3, pc, #260	; (adr r3, 8013a48 <__ieee754_pow+0x3b8>)
 8013944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013948:	f7ec fe76 	bl	8000638 <__aeabi_dmul>
 801394c:	4602      	mov	r2, r0
 801394e:	460b      	mov	r3, r1
 8013950:	4650      	mov	r0, sl
 8013952:	4659      	mov	r1, fp
 8013954:	f7ec fcb8 	bl	80002c8 <__aeabi_dsub>
 8013958:	4602      	mov	r2, r0
 801395a:	460b      	mov	r3, r1
 801395c:	4680      	mov	r8, r0
 801395e:	4689      	mov	r9, r1
 8013960:	4630      	mov	r0, r6
 8013962:	4639      	mov	r1, r7
 8013964:	f7ec fcb2 	bl	80002cc <__adddf3>
 8013968:	2400      	movs	r4, #0
 801396a:	4632      	mov	r2, r6
 801396c:	463b      	mov	r3, r7
 801396e:	4620      	mov	r0, r4
 8013970:	460d      	mov	r5, r1
 8013972:	f7ec fca9 	bl	80002c8 <__aeabi_dsub>
 8013976:	4602      	mov	r2, r0
 8013978:	460b      	mov	r3, r1
 801397a:	4640      	mov	r0, r8
 801397c:	4649      	mov	r1, r9
 801397e:	f7ec fca3 	bl	80002c8 <__aeabi_dsub>
 8013982:	9b00      	ldr	r3, [sp, #0]
 8013984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013986:	3b01      	subs	r3, #1
 8013988:	4313      	orrs	r3, r2
 801398a:	4682      	mov	sl, r0
 801398c:	468b      	mov	fp, r1
 801398e:	f040 81f1 	bne.w	8013d74 <__ieee754_pow+0x6e4>
 8013992:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8013a50 <__ieee754_pow+0x3c0>
 8013996:	eeb0 8a47 	vmov.f32	s16, s14
 801399a:	eef0 8a67 	vmov.f32	s17, s15
 801399e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80139a2:	2600      	movs	r6, #0
 80139a4:	4632      	mov	r2, r6
 80139a6:	463b      	mov	r3, r7
 80139a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139ac:	f7ec fc8c 	bl	80002c8 <__aeabi_dsub>
 80139b0:	4622      	mov	r2, r4
 80139b2:	462b      	mov	r3, r5
 80139b4:	f7ec fe40 	bl	8000638 <__aeabi_dmul>
 80139b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80139bc:	4680      	mov	r8, r0
 80139be:	4689      	mov	r9, r1
 80139c0:	4650      	mov	r0, sl
 80139c2:	4659      	mov	r1, fp
 80139c4:	f7ec fe38 	bl	8000638 <__aeabi_dmul>
 80139c8:	4602      	mov	r2, r0
 80139ca:	460b      	mov	r3, r1
 80139cc:	4640      	mov	r0, r8
 80139ce:	4649      	mov	r1, r9
 80139d0:	f7ec fc7c 	bl	80002cc <__adddf3>
 80139d4:	4632      	mov	r2, r6
 80139d6:	463b      	mov	r3, r7
 80139d8:	4680      	mov	r8, r0
 80139da:	4689      	mov	r9, r1
 80139dc:	4620      	mov	r0, r4
 80139de:	4629      	mov	r1, r5
 80139e0:	f7ec fe2a 	bl	8000638 <__aeabi_dmul>
 80139e4:	460b      	mov	r3, r1
 80139e6:	4604      	mov	r4, r0
 80139e8:	460d      	mov	r5, r1
 80139ea:	4602      	mov	r2, r0
 80139ec:	4649      	mov	r1, r9
 80139ee:	4640      	mov	r0, r8
 80139f0:	f7ec fc6c 	bl	80002cc <__adddf3>
 80139f4:	4b1d      	ldr	r3, [pc, #116]	; (8013a6c <__ieee754_pow+0x3dc>)
 80139f6:	4299      	cmp	r1, r3
 80139f8:	ec45 4b19 	vmov	d9, r4, r5
 80139fc:	4606      	mov	r6, r0
 80139fe:	460f      	mov	r7, r1
 8013a00:	468b      	mov	fp, r1
 8013a02:	f340 82fe 	ble.w	8014002 <__ieee754_pow+0x972>
 8013a06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013a0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013a0e:	4303      	orrs	r3, r0
 8013a10:	f000 81f0 	beq.w	8013df4 <__ieee754_pow+0x764>
 8013a14:	a310      	add	r3, pc, #64	; (adr r3, 8013a58 <__ieee754_pow+0x3c8>)
 8013a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a1a:	ec51 0b18 	vmov	r0, r1, d8
 8013a1e:	f7ec fe0b 	bl	8000638 <__aeabi_dmul>
 8013a22:	a30d      	add	r3, pc, #52	; (adr r3, 8013a58 <__ieee754_pow+0x3c8>)
 8013a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a28:	e6cb      	b.n	80137c2 <__ieee754_pow+0x132>
 8013a2a:	bf00      	nop
 8013a2c:	f3af 8000 	nop.w
 8013a30:	60000000 	.word	0x60000000
 8013a34:	3ff71547 	.word	0x3ff71547
 8013a38:	f85ddf44 	.word	0xf85ddf44
 8013a3c:	3e54ae0b 	.word	0x3e54ae0b
 8013a40:	55555555 	.word	0x55555555
 8013a44:	3fd55555 	.word	0x3fd55555
 8013a48:	652b82fe 	.word	0x652b82fe
 8013a4c:	3ff71547 	.word	0x3ff71547
 8013a50:	00000000 	.word	0x00000000
 8013a54:	bff00000 	.word	0xbff00000
 8013a58:	8800759c 	.word	0x8800759c
 8013a5c:	7e37e43c 	.word	0x7e37e43c
 8013a60:	3ff00000 	.word	0x3ff00000
 8013a64:	3fd00000 	.word	0x3fd00000
 8013a68:	3fe00000 	.word	0x3fe00000
 8013a6c:	408fffff 	.word	0x408fffff
 8013a70:	4bd7      	ldr	r3, [pc, #860]	; (8013dd0 <__ieee754_pow+0x740>)
 8013a72:	ea03 0309 	and.w	r3, r3, r9
 8013a76:	2200      	movs	r2, #0
 8013a78:	b92b      	cbnz	r3, 8013a86 <__ieee754_pow+0x3f6>
 8013a7a:	4bd6      	ldr	r3, [pc, #856]	; (8013dd4 <__ieee754_pow+0x744>)
 8013a7c:	f7ec fddc 	bl	8000638 <__aeabi_dmul>
 8013a80:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013a84:	460c      	mov	r4, r1
 8013a86:	1523      	asrs	r3, r4, #20
 8013a88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013a8c:	4413      	add	r3, r2
 8013a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8013a90:	4bd1      	ldr	r3, [pc, #836]	; (8013dd8 <__ieee754_pow+0x748>)
 8013a92:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013a96:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013a9a:	429c      	cmp	r4, r3
 8013a9c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013aa0:	dd08      	ble.n	8013ab4 <__ieee754_pow+0x424>
 8013aa2:	4bce      	ldr	r3, [pc, #824]	; (8013ddc <__ieee754_pow+0x74c>)
 8013aa4:	429c      	cmp	r4, r3
 8013aa6:	f340 8163 	ble.w	8013d70 <__ieee754_pow+0x6e0>
 8013aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aac:	3301      	adds	r3, #1
 8013aae:	9309      	str	r3, [sp, #36]	; 0x24
 8013ab0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013ab4:	2400      	movs	r4, #0
 8013ab6:	00e3      	lsls	r3, r4, #3
 8013ab8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013aba:	4bc9      	ldr	r3, [pc, #804]	; (8013de0 <__ieee754_pow+0x750>)
 8013abc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013ac0:	ed93 7b00 	vldr	d7, [r3]
 8013ac4:	4629      	mov	r1, r5
 8013ac6:	ec53 2b17 	vmov	r2, r3, d7
 8013aca:	eeb0 8a47 	vmov.f32	s16, s14
 8013ace:	eef0 8a67 	vmov.f32	s17, s15
 8013ad2:	4682      	mov	sl, r0
 8013ad4:	f7ec fbf8 	bl	80002c8 <__aeabi_dsub>
 8013ad8:	4652      	mov	r2, sl
 8013ada:	4606      	mov	r6, r0
 8013adc:	460f      	mov	r7, r1
 8013ade:	462b      	mov	r3, r5
 8013ae0:	ec51 0b18 	vmov	r0, r1, d8
 8013ae4:	f7ec fbf2 	bl	80002cc <__adddf3>
 8013ae8:	4602      	mov	r2, r0
 8013aea:	460b      	mov	r3, r1
 8013aec:	2000      	movs	r0, #0
 8013aee:	49bd      	ldr	r1, [pc, #756]	; (8013de4 <__ieee754_pow+0x754>)
 8013af0:	f7ec fecc 	bl	800088c <__aeabi_ddiv>
 8013af4:	ec41 0b19 	vmov	d9, r0, r1
 8013af8:	4602      	mov	r2, r0
 8013afa:	460b      	mov	r3, r1
 8013afc:	4630      	mov	r0, r6
 8013afe:	4639      	mov	r1, r7
 8013b00:	f7ec fd9a 	bl	8000638 <__aeabi_dmul>
 8013b04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013b08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b10:	2300      	movs	r3, #0
 8013b12:	9304      	str	r3, [sp, #16]
 8013b14:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013b18:	46ab      	mov	fp, r5
 8013b1a:	106d      	asrs	r5, r5, #1
 8013b1c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013b20:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013b24:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013b28:	2200      	movs	r2, #0
 8013b2a:	4640      	mov	r0, r8
 8013b2c:	4649      	mov	r1, r9
 8013b2e:	4614      	mov	r4, r2
 8013b30:	461d      	mov	r5, r3
 8013b32:	f7ec fd81 	bl	8000638 <__aeabi_dmul>
 8013b36:	4602      	mov	r2, r0
 8013b38:	460b      	mov	r3, r1
 8013b3a:	4630      	mov	r0, r6
 8013b3c:	4639      	mov	r1, r7
 8013b3e:	f7ec fbc3 	bl	80002c8 <__aeabi_dsub>
 8013b42:	ec53 2b18 	vmov	r2, r3, d8
 8013b46:	4606      	mov	r6, r0
 8013b48:	460f      	mov	r7, r1
 8013b4a:	4620      	mov	r0, r4
 8013b4c:	4629      	mov	r1, r5
 8013b4e:	f7ec fbbb 	bl	80002c8 <__aeabi_dsub>
 8013b52:	4602      	mov	r2, r0
 8013b54:	460b      	mov	r3, r1
 8013b56:	4650      	mov	r0, sl
 8013b58:	4659      	mov	r1, fp
 8013b5a:	f7ec fbb5 	bl	80002c8 <__aeabi_dsub>
 8013b5e:	4642      	mov	r2, r8
 8013b60:	464b      	mov	r3, r9
 8013b62:	f7ec fd69 	bl	8000638 <__aeabi_dmul>
 8013b66:	4602      	mov	r2, r0
 8013b68:	460b      	mov	r3, r1
 8013b6a:	4630      	mov	r0, r6
 8013b6c:	4639      	mov	r1, r7
 8013b6e:	f7ec fbab 	bl	80002c8 <__aeabi_dsub>
 8013b72:	ec53 2b19 	vmov	r2, r3, d9
 8013b76:	f7ec fd5f 	bl	8000638 <__aeabi_dmul>
 8013b7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b7e:	ec41 0b18 	vmov	d8, r0, r1
 8013b82:	4610      	mov	r0, r2
 8013b84:	4619      	mov	r1, r3
 8013b86:	f7ec fd57 	bl	8000638 <__aeabi_dmul>
 8013b8a:	a37d      	add	r3, pc, #500	; (adr r3, 8013d80 <__ieee754_pow+0x6f0>)
 8013b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b90:	4604      	mov	r4, r0
 8013b92:	460d      	mov	r5, r1
 8013b94:	f7ec fd50 	bl	8000638 <__aeabi_dmul>
 8013b98:	a37b      	add	r3, pc, #492	; (adr r3, 8013d88 <__ieee754_pow+0x6f8>)
 8013b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b9e:	f7ec fb95 	bl	80002cc <__adddf3>
 8013ba2:	4622      	mov	r2, r4
 8013ba4:	462b      	mov	r3, r5
 8013ba6:	f7ec fd47 	bl	8000638 <__aeabi_dmul>
 8013baa:	a379      	add	r3, pc, #484	; (adr r3, 8013d90 <__ieee754_pow+0x700>)
 8013bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb0:	f7ec fb8c 	bl	80002cc <__adddf3>
 8013bb4:	4622      	mov	r2, r4
 8013bb6:	462b      	mov	r3, r5
 8013bb8:	f7ec fd3e 	bl	8000638 <__aeabi_dmul>
 8013bbc:	a376      	add	r3, pc, #472	; (adr r3, 8013d98 <__ieee754_pow+0x708>)
 8013bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc2:	f7ec fb83 	bl	80002cc <__adddf3>
 8013bc6:	4622      	mov	r2, r4
 8013bc8:	462b      	mov	r3, r5
 8013bca:	f7ec fd35 	bl	8000638 <__aeabi_dmul>
 8013bce:	a374      	add	r3, pc, #464	; (adr r3, 8013da0 <__ieee754_pow+0x710>)
 8013bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd4:	f7ec fb7a 	bl	80002cc <__adddf3>
 8013bd8:	4622      	mov	r2, r4
 8013bda:	462b      	mov	r3, r5
 8013bdc:	f7ec fd2c 	bl	8000638 <__aeabi_dmul>
 8013be0:	a371      	add	r3, pc, #452	; (adr r3, 8013da8 <__ieee754_pow+0x718>)
 8013be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be6:	f7ec fb71 	bl	80002cc <__adddf3>
 8013bea:	4622      	mov	r2, r4
 8013bec:	4606      	mov	r6, r0
 8013bee:	460f      	mov	r7, r1
 8013bf0:	462b      	mov	r3, r5
 8013bf2:	4620      	mov	r0, r4
 8013bf4:	4629      	mov	r1, r5
 8013bf6:	f7ec fd1f 	bl	8000638 <__aeabi_dmul>
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	4630      	mov	r0, r6
 8013c00:	4639      	mov	r1, r7
 8013c02:	f7ec fd19 	bl	8000638 <__aeabi_dmul>
 8013c06:	4642      	mov	r2, r8
 8013c08:	4604      	mov	r4, r0
 8013c0a:	460d      	mov	r5, r1
 8013c0c:	464b      	mov	r3, r9
 8013c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c12:	f7ec fb5b 	bl	80002cc <__adddf3>
 8013c16:	ec53 2b18 	vmov	r2, r3, d8
 8013c1a:	f7ec fd0d 	bl	8000638 <__aeabi_dmul>
 8013c1e:	4622      	mov	r2, r4
 8013c20:	462b      	mov	r3, r5
 8013c22:	f7ec fb53 	bl	80002cc <__adddf3>
 8013c26:	4642      	mov	r2, r8
 8013c28:	4682      	mov	sl, r0
 8013c2a:	468b      	mov	fp, r1
 8013c2c:	464b      	mov	r3, r9
 8013c2e:	4640      	mov	r0, r8
 8013c30:	4649      	mov	r1, r9
 8013c32:	f7ec fd01 	bl	8000638 <__aeabi_dmul>
 8013c36:	4b6c      	ldr	r3, [pc, #432]	; (8013de8 <__ieee754_pow+0x758>)
 8013c38:	2200      	movs	r2, #0
 8013c3a:	4606      	mov	r6, r0
 8013c3c:	460f      	mov	r7, r1
 8013c3e:	f7ec fb45 	bl	80002cc <__adddf3>
 8013c42:	4652      	mov	r2, sl
 8013c44:	465b      	mov	r3, fp
 8013c46:	f7ec fb41 	bl	80002cc <__adddf3>
 8013c4a:	9c04      	ldr	r4, [sp, #16]
 8013c4c:	460d      	mov	r5, r1
 8013c4e:	4622      	mov	r2, r4
 8013c50:	460b      	mov	r3, r1
 8013c52:	4640      	mov	r0, r8
 8013c54:	4649      	mov	r1, r9
 8013c56:	f7ec fcef 	bl	8000638 <__aeabi_dmul>
 8013c5a:	4b63      	ldr	r3, [pc, #396]	; (8013de8 <__ieee754_pow+0x758>)
 8013c5c:	4680      	mov	r8, r0
 8013c5e:	4689      	mov	r9, r1
 8013c60:	2200      	movs	r2, #0
 8013c62:	4620      	mov	r0, r4
 8013c64:	4629      	mov	r1, r5
 8013c66:	f7ec fb2f 	bl	80002c8 <__aeabi_dsub>
 8013c6a:	4632      	mov	r2, r6
 8013c6c:	463b      	mov	r3, r7
 8013c6e:	f7ec fb2b 	bl	80002c8 <__aeabi_dsub>
 8013c72:	4602      	mov	r2, r0
 8013c74:	460b      	mov	r3, r1
 8013c76:	4650      	mov	r0, sl
 8013c78:	4659      	mov	r1, fp
 8013c7a:	f7ec fb25 	bl	80002c8 <__aeabi_dsub>
 8013c7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c82:	f7ec fcd9 	bl	8000638 <__aeabi_dmul>
 8013c86:	4622      	mov	r2, r4
 8013c88:	4606      	mov	r6, r0
 8013c8a:	460f      	mov	r7, r1
 8013c8c:	462b      	mov	r3, r5
 8013c8e:	ec51 0b18 	vmov	r0, r1, d8
 8013c92:	f7ec fcd1 	bl	8000638 <__aeabi_dmul>
 8013c96:	4602      	mov	r2, r0
 8013c98:	460b      	mov	r3, r1
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	4639      	mov	r1, r7
 8013c9e:	f7ec fb15 	bl	80002cc <__adddf3>
 8013ca2:	4606      	mov	r6, r0
 8013ca4:	460f      	mov	r7, r1
 8013ca6:	4602      	mov	r2, r0
 8013ca8:	460b      	mov	r3, r1
 8013caa:	4640      	mov	r0, r8
 8013cac:	4649      	mov	r1, r9
 8013cae:	f7ec fb0d 	bl	80002cc <__adddf3>
 8013cb2:	9c04      	ldr	r4, [sp, #16]
 8013cb4:	a33e      	add	r3, pc, #248	; (adr r3, 8013db0 <__ieee754_pow+0x720>)
 8013cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cba:	4620      	mov	r0, r4
 8013cbc:	460d      	mov	r5, r1
 8013cbe:	f7ec fcbb 	bl	8000638 <__aeabi_dmul>
 8013cc2:	4642      	mov	r2, r8
 8013cc4:	ec41 0b18 	vmov	d8, r0, r1
 8013cc8:	464b      	mov	r3, r9
 8013cca:	4620      	mov	r0, r4
 8013ccc:	4629      	mov	r1, r5
 8013cce:	f7ec fafb 	bl	80002c8 <__aeabi_dsub>
 8013cd2:	4602      	mov	r2, r0
 8013cd4:	460b      	mov	r3, r1
 8013cd6:	4630      	mov	r0, r6
 8013cd8:	4639      	mov	r1, r7
 8013cda:	f7ec faf5 	bl	80002c8 <__aeabi_dsub>
 8013cde:	a336      	add	r3, pc, #216	; (adr r3, 8013db8 <__ieee754_pow+0x728>)
 8013ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce4:	f7ec fca8 	bl	8000638 <__aeabi_dmul>
 8013ce8:	a335      	add	r3, pc, #212	; (adr r3, 8013dc0 <__ieee754_pow+0x730>)
 8013cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cee:	4606      	mov	r6, r0
 8013cf0:	460f      	mov	r7, r1
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	4629      	mov	r1, r5
 8013cf6:	f7ec fc9f 	bl	8000638 <__aeabi_dmul>
 8013cfa:	4602      	mov	r2, r0
 8013cfc:	460b      	mov	r3, r1
 8013cfe:	4630      	mov	r0, r6
 8013d00:	4639      	mov	r1, r7
 8013d02:	f7ec fae3 	bl	80002cc <__adddf3>
 8013d06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d08:	4b38      	ldr	r3, [pc, #224]	; (8013dec <__ieee754_pow+0x75c>)
 8013d0a:	4413      	add	r3, r2
 8013d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d10:	f7ec fadc 	bl	80002cc <__adddf3>
 8013d14:	4682      	mov	sl, r0
 8013d16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d18:	468b      	mov	fp, r1
 8013d1a:	f7ec fc23 	bl	8000564 <__aeabi_i2d>
 8013d1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d20:	4b33      	ldr	r3, [pc, #204]	; (8013df0 <__ieee754_pow+0x760>)
 8013d22:	4413      	add	r3, r2
 8013d24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013d28:	4606      	mov	r6, r0
 8013d2a:	460f      	mov	r7, r1
 8013d2c:	4652      	mov	r2, sl
 8013d2e:	465b      	mov	r3, fp
 8013d30:	ec51 0b18 	vmov	r0, r1, d8
 8013d34:	f7ec faca 	bl	80002cc <__adddf3>
 8013d38:	4642      	mov	r2, r8
 8013d3a:	464b      	mov	r3, r9
 8013d3c:	f7ec fac6 	bl	80002cc <__adddf3>
 8013d40:	4632      	mov	r2, r6
 8013d42:	463b      	mov	r3, r7
 8013d44:	f7ec fac2 	bl	80002cc <__adddf3>
 8013d48:	9c04      	ldr	r4, [sp, #16]
 8013d4a:	4632      	mov	r2, r6
 8013d4c:	463b      	mov	r3, r7
 8013d4e:	4620      	mov	r0, r4
 8013d50:	460d      	mov	r5, r1
 8013d52:	f7ec fab9 	bl	80002c8 <__aeabi_dsub>
 8013d56:	4642      	mov	r2, r8
 8013d58:	464b      	mov	r3, r9
 8013d5a:	f7ec fab5 	bl	80002c8 <__aeabi_dsub>
 8013d5e:	ec53 2b18 	vmov	r2, r3, d8
 8013d62:	f7ec fab1 	bl	80002c8 <__aeabi_dsub>
 8013d66:	4602      	mov	r2, r0
 8013d68:	460b      	mov	r3, r1
 8013d6a:	4650      	mov	r0, sl
 8013d6c:	4659      	mov	r1, fp
 8013d6e:	e606      	b.n	801397e <__ieee754_pow+0x2ee>
 8013d70:	2401      	movs	r4, #1
 8013d72:	e6a0      	b.n	8013ab6 <__ieee754_pow+0x426>
 8013d74:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8013dc8 <__ieee754_pow+0x738>
 8013d78:	e60d      	b.n	8013996 <__ieee754_pow+0x306>
 8013d7a:	bf00      	nop
 8013d7c:	f3af 8000 	nop.w
 8013d80:	4a454eef 	.word	0x4a454eef
 8013d84:	3fca7e28 	.word	0x3fca7e28
 8013d88:	93c9db65 	.word	0x93c9db65
 8013d8c:	3fcd864a 	.word	0x3fcd864a
 8013d90:	a91d4101 	.word	0xa91d4101
 8013d94:	3fd17460 	.word	0x3fd17460
 8013d98:	518f264d 	.word	0x518f264d
 8013d9c:	3fd55555 	.word	0x3fd55555
 8013da0:	db6fabff 	.word	0xdb6fabff
 8013da4:	3fdb6db6 	.word	0x3fdb6db6
 8013da8:	33333303 	.word	0x33333303
 8013dac:	3fe33333 	.word	0x3fe33333
 8013db0:	e0000000 	.word	0xe0000000
 8013db4:	3feec709 	.word	0x3feec709
 8013db8:	dc3a03fd 	.word	0xdc3a03fd
 8013dbc:	3feec709 	.word	0x3feec709
 8013dc0:	145b01f5 	.word	0x145b01f5
 8013dc4:	be3e2fe0 	.word	0xbe3e2fe0
 8013dc8:	00000000 	.word	0x00000000
 8013dcc:	3ff00000 	.word	0x3ff00000
 8013dd0:	7ff00000 	.word	0x7ff00000
 8013dd4:	43400000 	.word	0x43400000
 8013dd8:	0003988e 	.word	0x0003988e
 8013ddc:	000bb679 	.word	0x000bb679
 8013de0:	08014d68 	.word	0x08014d68
 8013de4:	3ff00000 	.word	0x3ff00000
 8013de8:	40080000 	.word	0x40080000
 8013dec:	08014d88 	.word	0x08014d88
 8013df0:	08014d78 	.word	0x08014d78
 8013df4:	a3b5      	add	r3, pc, #724	; (adr r3, 80140cc <__ieee754_pow+0xa3c>)
 8013df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dfa:	4640      	mov	r0, r8
 8013dfc:	4649      	mov	r1, r9
 8013dfe:	f7ec fa65 	bl	80002cc <__adddf3>
 8013e02:	4622      	mov	r2, r4
 8013e04:	ec41 0b1a 	vmov	d10, r0, r1
 8013e08:	462b      	mov	r3, r5
 8013e0a:	4630      	mov	r0, r6
 8013e0c:	4639      	mov	r1, r7
 8013e0e:	f7ec fa5b 	bl	80002c8 <__aeabi_dsub>
 8013e12:	4602      	mov	r2, r0
 8013e14:	460b      	mov	r3, r1
 8013e16:	ec51 0b1a 	vmov	r0, r1, d10
 8013e1a:	f7ec fe9d 	bl	8000b58 <__aeabi_dcmpgt>
 8013e1e:	2800      	cmp	r0, #0
 8013e20:	f47f adf8 	bne.w	8013a14 <__ieee754_pow+0x384>
 8013e24:	4aa4      	ldr	r2, [pc, #656]	; (80140b8 <__ieee754_pow+0xa28>)
 8013e26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013e2a:	4293      	cmp	r3, r2
 8013e2c:	f340 810b 	ble.w	8014046 <__ieee754_pow+0x9b6>
 8013e30:	151b      	asrs	r3, r3, #20
 8013e32:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013e36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013e3a:	fa4a f303 	asr.w	r3, sl, r3
 8013e3e:	445b      	add	r3, fp
 8013e40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013e44:	4e9d      	ldr	r6, [pc, #628]	; (80140bc <__ieee754_pow+0xa2c>)
 8013e46:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013e4a:	4116      	asrs	r6, r2
 8013e4c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013e50:	2000      	movs	r0, #0
 8013e52:	ea23 0106 	bic.w	r1, r3, r6
 8013e56:	f1c2 0214 	rsb	r2, r2, #20
 8013e5a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013e5e:	fa4a fa02 	asr.w	sl, sl, r2
 8013e62:	f1bb 0f00 	cmp.w	fp, #0
 8013e66:	4602      	mov	r2, r0
 8013e68:	460b      	mov	r3, r1
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	4629      	mov	r1, r5
 8013e6e:	bfb8      	it	lt
 8013e70:	f1ca 0a00 	rsblt	sl, sl, #0
 8013e74:	f7ec fa28 	bl	80002c8 <__aeabi_dsub>
 8013e78:	ec41 0b19 	vmov	d9, r0, r1
 8013e7c:	4642      	mov	r2, r8
 8013e7e:	464b      	mov	r3, r9
 8013e80:	ec51 0b19 	vmov	r0, r1, d9
 8013e84:	f7ec fa22 	bl	80002cc <__adddf3>
 8013e88:	2400      	movs	r4, #0
 8013e8a:	a379      	add	r3, pc, #484	; (adr r3, 8014070 <__ieee754_pow+0x9e0>)
 8013e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e90:	4620      	mov	r0, r4
 8013e92:	460d      	mov	r5, r1
 8013e94:	f7ec fbd0 	bl	8000638 <__aeabi_dmul>
 8013e98:	ec53 2b19 	vmov	r2, r3, d9
 8013e9c:	4606      	mov	r6, r0
 8013e9e:	460f      	mov	r7, r1
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	4629      	mov	r1, r5
 8013ea4:	f7ec fa10 	bl	80002c8 <__aeabi_dsub>
 8013ea8:	4602      	mov	r2, r0
 8013eaa:	460b      	mov	r3, r1
 8013eac:	4640      	mov	r0, r8
 8013eae:	4649      	mov	r1, r9
 8013eb0:	f7ec fa0a 	bl	80002c8 <__aeabi_dsub>
 8013eb4:	a370      	add	r3, pc, #448	; (adr r3, 8014078 <__ieee754_pow+0x9e8>)
 8013eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eba:	f7ec fbbd 	bl	8000638 <__aeabi_dmul>
 8013ebe:	a370      	add	r3, pc, #448	; (adr r3, 8014080 <__ieee754_pow+0x9f0>)
 8013ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec4:	4680      	mov	r8, r0
 8013ec6:	4689      	mov	r9, r1
 8013ec8:	4620      	mov	r0, r4
 8013eca:	4629      	mov	r1, r5
 8013ecc:	f7ec fbb4 	bl	8000638 <__aeabi_dmul>
 8013ed0:	4602      	mov	r2, r0
 8013ed2:	460b      	mov	r3, r1
 8013ed4:	4640      	mov	r0, r8
 8013ed6:	4649      	mov	r1, r9
 8013ed8:	f7ec f9f8 	bl	80002cc <__adddf3>
 8013edc:	4604      	mov	r4, r0
 8013ede:	460d      	mov	r5, r1
 8013ee0:	4602      	mov	r2, r0
 8013ee2:	460b      	mov	r3, r1
 8013ee4:	4630      	mov	r0, r6
 8013ee6:	4639      	mov	r1, r7
 8013ee8:	f7ec f9f0 	bl	80002cc <__adddf3>
 8013eec:	4632      	mov	r2, r6
 8013eee:	463b      	mov	r3, r7
 8013ef0:	4680      	mov	r8, r0
 8013ef2:	4689      	mov	r9, r1
 8013ef4:	f7ec f9e8 	bl	80002c8 <__aeabi_dsub>
 8013ef8:	4602      	mov	r2, r0
 8013efa:	460b      	mov	r3, r1
 8013efc:	4620      	mov	r0, r4
 8013efe:	4629      	mov	r1, r5
 8013f00:	f7ec f9e2 	bl	80002c8 <__aeabi_dsub>
 8013f04:	4642      	mov	r2, r8
 8013f06:	4606      	mov	r6, r0
 8013f08:	460f      	mov	r7, r1
 8013f0a:	464b      	mov	r3, r9
 8013f0c:	4640      	mov	r0, r8
 8013f0e:	4649      	mov	r1, r9
 8013f10:	f7ec fb92 	bl	8000638 <__aeabi_dmul>
 8013f14:	a35c      	add	r3, pc, #368	; (adr r3, 8014088 <__ieee754_pow+0x9f8>)
 8013f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f1a:	4604      	mov	r4, r0
 8013f1c:	460d      	mov	r5, r1
 8013f1e:	f7ec fb8b 	bl	8000638 <__aeabi_dmul>
 8013f22:	a35b      	add	r3, pc, #364	; (adr r3, 8014090 <__ieee754_pow+0xa00>)
 8013f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f28:	f7ec f9ce 	bl	80002c8 <__aeabi_dsub>
 8013f2c:	4622      	mov	r2, r4
 8013f2e:	462b      	mov	r3, r5
 8013f30:	f7ec fb82 	bl	8000638 <__aeabi_dmul>
 8013f34:	a358      	add	r3, pc, #352	; (adr r3, 8014098 <__ieee754_pow+0xa08>)
 8013f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f3a:	f7ec f9c7 	bl	80002cc <__adddf3>
 8013f3e:	4622      	mov	r2, r4
 8013f40:	462b      	mov	r3, r5
 8013f42:	f7ec fb79 	bl	8000638 <__aeabi_dmul>
 8013f46:	a356      	add	r3, pc, #344	; (adr r3, 80140a0 <__ieee754_pow+0xa10>)
 8013f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f4c:	f7ec f9bc 	bl	80002c8 <__aeabi_dsub>
 8013f50:	4622      	mov	r2, r4
 8013f52:	462b      	mov	r3, r5
 8013f54:	f7ec fb70 	bl	8000638 <__aeabi_dmul>
 8013f58:	a353      	add	r3, pc, #332	; (adr r3, 80140a8 <__ieee754_pow+0xa18>)
 8013f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f5e:	f7ec f9b5 	bl	80002cc <__adddf3>
 8013f62:	4622      	mov	r2, r4
 8013f64:	462b      	mov	r3, r5
 8013f66:	f7ec fb67 	bl	8000638 <__aeabi_dmul>
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	460b      	mov	r3, r1
 8013f6e:	4640      	mov	r0, r8
 8013f70:	4649      	mov	r1, r9
 8013f72:	f7ec f9a9 	bl	80002c8 <__aeabi_dsub>
 8013f76:	4604      	mov	r4, r0
 8013f78:	460d      	mov	r5, r1
 8013f7a:	4602      	mov	r2, r0
 8013f7c:	460b      	mov	r3, r1
 8013f7e:	4640      	mov	r0, r8
 8013f80:	4649      	mov	r1, r9
 8013f82:	f7ec fb59 	bl	8000638 <__aeabi_dmul>
 8013f86:	2200      	movs	r2, #0
 8013f88:	ec41 0b19 	vmov	d9, r0, r1
 8013f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013f90:	4620      	mov	r0, r4
 8013f92:	4629      	mov	r1, r5
 8013f94:	f7ec f998 	bl	80002c8 <__aeabi_dsub>
 8013f98:	4602      	mov	r2, r0
 8013f9a:	460b      	mov	r3, r1
 8013f9c:	ec51 0b19 	vmov	r0, r1, d9
 8013fa0:	f7ec fc74 	bl	800088c <__aeabi_ddiv>
 8013fa4:	4632      	mov	r2, r6
 8013fa6:	4604      	mov	r4, r0
 8013fa8:	460d      	mov	r5, r1
 8013faa:	463b      	mov	r3, r7
 8013fac:	4640      	mov	r0, r8
 8013fae:	4649      	mov	r1, r9
 8013fb0:	f7ec fb42 	bl	8000638 <__aeabi_dmul>
 8013fb4:	4632      	mov	r2, r6
 8013fb6:	463b      	mov	r3, r7
 8013fb8:	f7ec f988 	bl	80002cc <__adddf3>
 8013fbc:	4602      	mov	r2, r0
 8013fbe:	460b      	mov	r3, r1
 8013fc0:	4620      	mov	r0, r4
 8013fc2:	4629      	mov	r1, r5
 8013fc4:	f7ec f980 	bl	80002c8 <__aeabi_dsub>
 8013fc8:	4642      	mov	r2, r8
 8013fca:	464b      	mov	r3, r9
 8013fcc:	f7ec f97c 	bl	80002c8 <__aeabi_dsub>
 8013fd0:	460b      	mov	r3, r1
 8013fd2:	4602      	mov	r2, r0
 8013fd4:	493a      	ldr	r1, [pc, #232]	; (80140c0 <__ieee754_pow+0xa30>)
 8013fd6:	2000      	movs	r0, #0
 8013fd8:	f7ec f976 	bl	80002c8 <__aeabi_dsub>
 8013fdc:	e9cd 0100 	strd	r0, r1, [sp]
 8013fe0:	9b01      	ldr	r3, [sp, #4]
 8013fe2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013fea:	da2f      	bge.n	801404c <__ieee754_pow+0x9bc>
 8013fec:	4650      	mov	r0, sl
 8013fee:	ed9d 0b00 	vldr	d0, [sp]
 8013ff2:	f000 f9c1 	bl	8014378 <scalbn>
 8013ff6:	ec51 0b10 	vmov	r0, r1, d0
 8013ffa:	ec53 2b18 	vmov	r2, r3, d8
 8013ffe:	f7ff bbe0 	b.w	80137c2 <__ieee754_pow+0x132>
 8014002:	4b30      	ldr	r3, [pc, #192]	; (80140c4 <__ieee754_pow+0xa34>)
 8014004:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014008:	429e      	cmp	r6, r3
 801400a:	f77f af0b 	ble.w	8013e24 <__ieee754_pow+0x794>
 801400e:	4b2e      	ldr	r3, [pc, #184]	; (80140c8 <__ieee754_pow+0xa38>)
 8014010:	440b      	add	r3, r1
 8014012:	4303      	orrs	r3, r0
 8014014:	d00b      	beq.n	801402e <__ieee754_pow+0x99e>
 8014016:	a326      	add	r3, pc, #152	; (adr r3, 80140b0 <__ieee754_pow+0xa20>)
 8014018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801401c:	ec51 0b18 	vmov	r0, r1, d8
 8014020:	f7ec fb0a 	bl	8000638 <__aeabi_dmul>
 8014024:	a322      	add	r3, pc, #136	; (adr r3, 80140b0 <__ieee754_pow+0xa20>)
 8014026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801402a:	f7ff bbca 	b.w	80137c2 <__ieee754_pow+0x132>
 801402e:	4622      	mov	r2, r4
 8014030:	462b      	mov	r3, r5
 8014032:	f7ec f949 	bl	80002c8 <__aeabi_dsub>
 8014036:	4642      	mov	r2, r8
 8014038:	464b      	mov	r3, r9
 801403a:	f7ec fd83 	bl	8000b44 <__aeabi_dcmpge>
 801403e:	2800      	cmp	r0, #0
 8014040:	f43f aef0 	beq.w	8013e24 <__ieee754_pow+0x794>
 8014044:	e7e7      	b.n	8014016 <__ieee754_pow+0x986>
 8014046:	f04f 0a00 	mov.w	sl, #0
 801404a:	e717      	b.n	8013e7c <__ieee754_pow+0x7ec>
 801404c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014050:	4619      	mov	r1, r3
 8014052:	e7d2      	b.n	8013ffa <__ieee754_pow+0x96a>
 8014054:	491a      	ldr	r1, [pc, #104]	; (80140c0 <__ieee754_pow+0xa30>)
 8014056:	2000      	movs	r0, #0
 8014058:	f7ff bb9e 	b.w	8013798 <__ieee754_pow+0x108>
 801405c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014060:	f7ff bb9a 	b.w	8013798 <__ieee754_pow+0x108>
 8014064:	9000      	str	r0, [sp, #0]
 8014066:	f7ff bb76 	b.w	8013756 <__ieee754_pow+0xc6>
 801406a:	2100      	movs	r1, #0
 801406c:	f7ff bb60 	b.w	8013730 <__ieee754_pow+0xa0>
 8014070:	00000000 	.word	0x00000000
 8014074:	3fe62e43 	.word	0x3fe62e43
 8014078:	fefa39ef 	.word	0xfefa39ef
 801407c:	3fe62e42 	.word	0x3fe62e42
 8014080:	0ca86c39 	.word	0x0ca86c39
 8014084:	be205c61 	.word	0xbe205c61
 8014088:	72bea4d0 	.word	0x72bea4d0
 801408c:	3e663769 	.word	0x3e663769
 8014090:	c5d26bf1 	.word	0xc5d26bf1
 8014094:	3ebbbd41 	.word	0x3ebbbd41
 8014098:	af25de2c 	.word	0xaf25de2c
 801409c:	3f11566a 	.word	0x3f11566a
 80140a0:	16bebd93 	.word	0x16bebd93
 80140a4:	3f66c16c 	.word	0x3f66c16c
 80140a8:	5555553e 	.word	0x5555553e
 80140ac:	3fc55555 	.word	0x3fc55555
 80140b0:	c2f8f359 	.word	0xc2f8f359
 80140b4:	01a56e1f 	.word	0x01a56e1f
 80140b8:	3fe00000 	.word	0x3fe00000
 80140bc:	000fffff 	.word	0x000fffff
 80140c0:	3ff00000 	.word	0x3ff00000
 80140c4:	4090cbff 	.word	0x4090cbff
 80140c8:	3f6f3400 	.word	0x3f6f3400
 80140cc:	652b82fe 	.word	0x652b82fe
 80140d0:	3c971547 	.word	0x3c971547

080140d4 <__ieee754_sqrt>:
 80140d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140d8:	ec55 4b10 	vmov	r4, r5, d0
 80140dc:	4e56      	ldr	r6, [pc, #344]	; (8014238 <__ieee754_sqrt+0x164>)
 80140de:	43ae      	bics	r6, r5
 80140e0:	ee10 0a10 	vmov	r0, s0
 80140e4:	ee10 3a10 	vmov	r3, s0
 80140e8:	4629      	mov	r1, r5
 80140ea:	462a      	mov	r2, r5
 80140ec:	d110      	bne.n	8014110 <__ieee754_sqrt+0x3c>
 80140ee:	ee10 2a10 	vmov	r2, s0
 80140f2:	462b      	mov	r3, r5
 80140f4:	f7ec faa0 	bl	8000638 <__aeabi_dmul>
 80140f8:	4602      	mov	r2, r0
 80140fa:	460b      	mov	r3, r1
 80140fc:	4620      	mov	r0, r4
 80140fe:	4629      	mov	r1, r5
 8014100:	f7ec f8e4 	bl	80002cc <__adddf3>
 8014104:	4604      	mov	r4, r0
 8014106:	460d      	mov	r5, r1
 8014108:	ec45 4b10 	vmov	d0, r4, r5
 801410c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014110:	2d00      	cmp	r5, #0
 8014112:	dc10      	bgt.n	8014136 <__ieee754_sqrt+0x62>
 8014114:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014118:	4330      	orrs	r0, r6
 801411a:	d0f5      	beq.n	8014108 <__ieee754_sqrt+0x34>
 801411c:	b15d      	cbz	r5, 8014136 <__ieee754_sqrt+0x62>
 801411e:	ee10 2a10 	vmov	r2, s0
 8014122:	462b      	mov	r3, r5
 8014124:	ee10 0a10 	vmov	r0, s0
 8014128:	f7ec f8ce 	bl	80002c8 <__aeabi_dsub>
 801412c:	4602      	mov	r2, r0
 801412e:	460b      	mov	r3, r1
 8014130:	f7ec fbac 	bl	800088c <__aeabi_ddiv>
 8014134:	e7e6      	b.n	8014104 <__ieee754_sqrt+0x30>
 8014136:	1509      	asrs	r1, r1, #20
 8014138:	d076      	beq.n	8014228 <__ieee754_sqrt+0x154>
 801413a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801413e:	07ce      	lsls	r6, r1, #31
 8014140:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8014144:	bf5e      	ittt	pl
 8014146:	0fda      	lsrpl	r2, r3, #31
 8014148:	005b      	lslpl	r3, r3, #1
 801414a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801414e:	0fda      	lsrs	r2, r3, #31
 8014150:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8014154:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8014158:	2000      	movs	r0, #0
 801415a:	106d      	asrs	r5, r5, #1
 801415c:	005b      	lsls	r3, r3, #1
 801415e:	f04f 0e16 	mov.w	lr, #22
 8014162:	4684      	mov	ip, r0
 8014164:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014168:	eb0c 0401 	add.w	r4, ip, r1
 801416c:	4294      	cmp	r4, r2
 801416e:	bfde      	ittt	le
 8014170:	1b12      	suble	r2, r2, r4
 8014172:	eb04 0c01 	addle.w	ip, r4, r1
 8014176:	1840      	addle	r0, r0, r1
 8014178:	0052      	lsls	r2, r2, #1
 801417a:	f1be 0e01 	subs.w	lr, lr, #1
 801417e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014182:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014186:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801418a:	d1ed      	bne.n	8014168 <__ieee754_sqrt+0x94>
 801418c:	4671      	mov	r1, lr
 801418e:	2720      	movs	r7, #32
 8014190:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8014194:	4562      	cmp	r2, ip
 8014196:	eb04 060e 	add.w	r6, r4, lr
 801419a:	dc02      	bgt.n	80141a2 <__ieee754_sqrt+0xce>
 801419c:	d113      	bne.n	80141c6 <__ieee754_sqrt+0xf2>
 801419e:	429e      	cmp	r6, r3
 80141a0:	d811      	bhi.n	80141c6 <__ieee754_sqrt+0xf2>
 80141a2:	2e00      	cmp	r6, #0
 80141a4:	eb06 0e04 	add.w	lr, r6, r4
 80141a8:	da43      	bge.n	8014232 <__ieee754_sqrt+0x15e>
 80141aa:	f1be 0f00 	cmp.w	lr, #0
 80141ae:	db40      	blt.n	8014232 <__ieee754_sqrt+0x15e>
 80141b0:	f10c 0801 	add.w	r8, ip, #1
 80141b4:	eba2 020c 	sub.w	r2, r2, ip
 80141b8:	429e      	cmp	r6, r3
 80141ba:	bf88      	it	hi
 80141bc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80141c0:	1b9b      	subs	r3, r3, r6
 80141c2:	4421      	add	r1, r4
 80141c4:	46c4      	mov	ip, r8
 80141c6:	0052      	lsls	r2, r2, #1
 80141c8:	3f01      	subs	r7, #1
 80141ca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80141ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80141d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80141d6:	d1dd      	bne.n	8014194 <__ieee754_sqrt+0xc0>
 80141d8:	4313      	orrs	r3, r2
 80141da:	d006      	beq.n	80141ea <__ieee754_sqrt+0x116>
 80141dc:	1c4c      	adds	r4, r1, #1
 80141de:	bf13      	iteet	ne
 80141e0:	3101      	addne	r1, #1
 80141e2:	3001      	addeq	r0, #1
 80141e4:	4639      	moveq	r1, r7
 80141e6:	f021 0101 	bicne.w	r1, r1, #1
 80141ea:	1043      	asrs	r3, r0, #1
 80141ec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80141f0:	0849      	lsrs	r1, r1, #1
 80141f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80141f6:	07c2      	lsls	r2, r0, #31
 80141f8:	bf48      	it	mi
 80141fa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80141fe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8014202:	460c      	mov	r4, r1
 8014204:	463d      	mov	r5, r7
 8014206:	e77f      	b.n	8014108 <__ieee754_sqrt+0x34>
 8014208:	0ada      	lsrs	r2, r3, #11
 801420a:	3815      	subs	r0, #21
 801420c:	055b      	lsls	r3, r3, #21
 801420e:	2a00      	cmp	r2, #0
 8014210:	d0fa      	beq.n	8014208 <__ieee754_sqrt+0x134>
 8014212:	02d7      	lsls	r7, r2, #11
 8014214:	d50a      	bpl.n	801422c <__ieee754_sqrt+0x158>
 8014216:	f1c1 0420 	rsb	r4, r1, #32
 801421a:	fa23 f404 	lsr.w	r4, r3, r4
 801421e:	1e4d      	subs	r5, r1, #1
 8014220:	408b      	lsls	r3, r1
 8014222:	4322      	orrs	r2, r4
 8014224:	1b41      	subs	r1, r0, r5
 8014226:	e788      	b.n	801413a <__ieee754_sqrt+0x66>
 8014228:	4608      	mov	r0, r1
 801422a:	e7f0      	b.n	801420e <__ieee754_sqrt+0x13a>
 801422c:	0052      	lsls	r2, r2, #1
 801422e:	3101      	adds	r1, #1
 8014230:	e7ef      	b.n	8014212 <__ieee754_sqrt+0x13e>
 8014232:	46e0      	mov	r8, ip
 8014234:	e7be      	b.n	80141b4 <__ieee754_sqrt+0xe0>
 8014236:	bf00      	nop
 8014238:	7ff00000 	.word	0x7ff00000

0801423c <fabs>:
 801423c:	ec51 0b10 	vmov	r0, r1, d0
 8014240:	ee10 2a10 	vmov	r2, s0
 8014244:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014248:	ec43 2b10 	vmov	d0, r2, r3
 801424c:	4770      	bx	lr

0801424e <finite>:
 801424e:	b082      	sub	sp, #8
 8014250:	ed8d 0b00 	vstr	d0, [sp]
 8014254:	9801      	ldr	r0, [sp, #4]
 8014256:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801425a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801425e:	0fc0      	lsrs	r0, r0, #31
 8014260:	b002      	add	sp, #8
 8014262:	4770      	bx	lr

08014264 <rint>:
 8014264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014266:	ec51 0b10 	vmov	r0, r1, d0
 801426a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801426e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014272:	2e13      	cmp	r6, #19
 8014274:	ee10 4a10 	vmov	r4, s0
 8014278:	460b      	mov	r3, r1
 801427a:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801427e:	dc58      	bgt.n	8014332 <rint+0xce>
 8014280:	2e00      	cmp	r6, #0
 8014282:	da2b      	bge.n	80142dc <rint+0x78>
 8014284:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014288:	4302      	orrs	r2, r0
 801428a:	d023      	beq.n	80142d4 <rint+0x70>
 801428c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014290:	4302      	orrs	r2, r0
 8014292:	4254      	negs	r4, r2
 8014294:	4314      	orrs	r4, r2
 8014296:	0c4b      	lsrs	r3, r1, #17
 8014298:	0b24      	lsrs	r4, r4, #12
 801429a:	045b      	lsls	r3, r3, #17
 801429c:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80142a0:	ea44 0103 	orr.w	r1, r4, r3
 80142a4:	4b32      	ldr	r3, [pc, #200]	; (8014370 <rint+0x10c>)
 80142a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80142aa:	e9d3 6700 	ldrd	r6, r7, [r3]
 80142ae:	4602      	mov	r2, r0
 80142b0:	460b      	mov	r3, r1
 80142b2:	4630      	mov	r0, r6
 80142b4:	4639      	mov	r1, r7
 80142b6:	f7ec f809 	bl	80002cc <__adddf3>
 80142ba:	e9cd 0100 	strd	r0, r1, [sp]
 80142be:	463b      	mov	r3, r7
 80142c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142c4:	4632      	mov	r2, r6
 80142c6:	f7eb ffff 	bl	80002c8 <__aeabi_dsub>
 80142ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80142ce:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80142d2:	4639      	mov	r1, r7
 80142d4:	ec41 0b10 	vmov	d0, r0, r1
 80142d8:	b003      	add	sp, #12
 80142da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142dc:	4a25      	ldr	r2, [pc, #148]	; (8014374 <rint+0x110>)
 80142de:	4132      	asrs	r2, r6
 80142e0:	ea01 0702 	and.w	r7, r1, r2
 80142e4:	4307      	orrs	r7, r0
 80142e6:	d0f5      	beq.n	80142d4 <rint+0x70>
 80142e8:	0851      	lsrs	r1, r2, #1
 80142ea:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80142ee:	4314      	orrs	r4, r2
 80142f0:	d00c      	beq.n	801430c <rint+0xa8>
 80142f2:	ea23 0201 	bic.w	r2, r3, r1
 80142f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80142fa:	2e13      	cmp	r6, #19
 80142fc:	fa43 f606 	asr.w	r6, r3, r6
 8014300:	bf0c      	ite	eq
 8014302:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014306:	2400      	movne	r4, #0
 8014308:	ea42 0306 	orr.w	r3, r2, r6
 801430c:	4918      	ldr	r1, [pc, #96]	; (8014370 <rint+0x10c>)
 801430e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8014312:	4622      	mov	r2, r4
 8014314:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014318:	4620      	mov	r0, r4
 801431a:	4629      	mov	r1, r5
 801431c:	f7eb ffd6 	bl	80002cc <__adddf3>
 8014320:	e9cd 0100 	strd	r0, r1, [sp]
 8014324:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014328:	4622      	mov	r2, r4
 801432a:	462b      	mov	r3, r5
 801432c:	f7eb ffcc 	bl	80002c8 <__aeabi_dsub>
 8014330:	e7d0      	b.n	80142d4 <rint+0x70>
 8014332:	2e33      	cmp	r6, #51	; 0x33
 8014334:	dd07      	ble.n	8014346 <rint+0xe2>
 8014336:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801433a:	d1cb      	bne.n	80142d4 <rint+0x70>
 801433c:	ee10 2a10 	vmov	r2, s0
 8014340:	f7eb ffc4 	bl	80002cc <__adddf3>
 8014344:	e7c6      	b.n	80142d4 <rint+0x70>
 8014346:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801434a:	f04f 36ff 	mov.w	r6, #4294967295
 801434e:	40d6      	lsrs	r6, r2
 8014350:	4230      	tst	r0, r6
 8014352:	d0bf      	beq.n	80142d4 <rint+0x70>
 8014354:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8014358:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801435c:	bf1f      	itttt	ne
 801435e:	ea24 0101 	bicne.w	r1, r4, r1
 8014362:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8014366:	fa44 f202 	asrne.w	r2, r4, r2
 801436a:	ea41 0402 	orrne.w	r4, r1, r2
 801436e:	e7cd      	b.n	801430c <rint+0xa8>
 8014370:	08014d98 	.word	0x08014d98
 8014374:	000fffff 	.word	0x000fffff

08014378 <scalbn>:
 8014378:	b570      	push	{r4, r5, r6, lr}
 801437a:	ec55 4b10 	vmov	r4, r5, d0
 801437e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014382:	4606      	mov	r6, r0
 8014384:	462b      	mov	r3, r5
 8014386:	b99a      	cbnz	r2, 80143b0 <scalbn+0x38>
 8014388:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801438c:	4323      	orrs	r3, r4
 801438e:	d036      	beq.n	80143fe <scalbn+0x86>
 8014390:	4b39      	ldr	r3, [pc, #228]	; (8014478 <scalbn+0x100>)
 8014392:	4629      	mov	r1, r5
 8014394:	ee10 0a10 	vmov	r0, s0
 8014398:	2200      	movs	r2, #0
 801439a:	f7ec f94d 	bl	8000638 <__aeabi_dmul>
 801439e:	4b37      	ldr	r3, [pc, #220]	; (801447c <scalbn+0x104>)
 80143a0:	429e      	cmp	r6, r3
 80143a2:	4604      	mov	r4, r0
 80143a4:	460d      	mov	r5, r1
 80143a6:	da10      	bge.n	80143ca <scalbn+0x52>
 80143a8:	a32b      	add	r3, pc, #172	; (adr r3, 8014458 <scalbn+0xe0>)
 80143aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ae:	e03a      	b.n	8014426 <scalbn+0xae>
 80143b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80143b4:	428a      	cmp	r2, r1
 80143b6:	d10c      	bne.n	80143d2 <scalbn+0x5a>
 80143b8:	ee10 2a10 	vmov	r2, s0
 80143bc:	4620      	mov	r0, r4
 80143be:	4629      	mov	r1, r5
 80143c0:	f7eb ff84 	bl	80002cc <__adddf3>
 80143c4:	4604      	mov	r4, r0
 80143c6:	460d      	mov	r5, r1
 80143c8:	e019      	b.n	80143fe <scalbn+0x86>
 80143ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80143ce:	460b      	mov	r3, r1
 80143d0:	3a36      	subs	r2, #54	; 0x36
 80143d2:	4432      	add	r2, r6
 80143d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80143d8:	428a      	cmp	r2, r1
 80143da:	dd08      	ble.n	80143ee <scalbn+0x76>
 80143dc:	2d00      	cmp	r5, #0
 80143de:	a120      	add	r1, pc, #128	; (adr r1, 8014460 <scalbn+0xe8>)
 80143e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143e4:	da1c      	bge.n	8014420 <scalbn+0xa8>
 80143e6:	a120      	add	r1, pc, #128	; (adr r1, 8014468 <scalbn+0xf0>)
 80143e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143ec:	e018      	b.n	8014420 <scalbn+0xa8>
 80143ee:	2a00      	cmp	r2, #0
 80143f0:	dd08      	ble.n	8014404 <scalbn+0x8c>
 80143f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80143f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80143fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80143fe:	ec45 4b10 	vmov	d0, r4, r5
 8014402:	bd70      	pop	{r4, r5, r6, pc}
 8014404:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014408:	da19      	bge.n	801443e <scalbn+0xc6>
 801440a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801440e:	429e      	cmp	r6, r3
 8014410:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8014414:	dd0a      	ble.n	801442c <scalbn+0xb4>
 8014416:	a112      	add	r1, pc, #72	; (adr r1, 8014460 <scalbn+0xe8>)
 8014418:	e9d1 0100 	ldrd	r0, r1, [r1]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d1e2      	bne.n	80143e6 <scalbn+0x6e>
 8014420:	a30f      	add	r3, pc, #60	; (adr r3, 8014460 <scalbn+0xe8>)
 8014422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014426:	f7ec f907 	bl	8000638 <__aeabi_dmul>
 801442a:	e7cb      	b.n	80143c4 <scalbn+0x4c>
 801442c:	a10a      	add	r1, pc, #40	; (adr r1, 8014458 <scalbn+0xe0>)
 801442e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d0b8      	beq.n	80143a8 <scalbn+0x30>
 8014436:	a10e      	add	r1, pc, #56	; (adr r1, 8014470 <scalbn+0xf8>)
 8014438:	e9d1 0100 	ldrd	r0, r1, [r1]
 801443c:	e7b4      	b.n	80143a8 <scalbn+0x30>
 801443e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014442:	3236      	adds	r2, #54	; 0x36
 8014444:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014448:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801444c:	4620      	mov	r0, r4
 801444e:	4b0c      	ldr	r3, [pc, #48]	; (8014480 <scalbn+0x108>)
 8014450:	2200      	movs	r2, #0
 8014452:	e7e8      	b.n	8014426 <scalbn+0xae>
 8014454:	f3af 8000 	nop.w
 8014458:	c2f8f359 	.word	0xc2f8f359
 801445c:	01a56e1f 	.word	0x01a56e1f
 8014460:	8800759c 	.word	0x8800759c
 8014464:	7e37e43c 	.word	0x7e37e43c
 8014468:	8800759c 	.word	0x8800759c
 801446c:	fe37e43c 	.word	0xfe37e43c
 8014470:	c2f8f359 	.word	0xc2f8f359
 8014474:	81a56e1f 	.word	0x81a56e1f
 8014478:	43500000 	.word	0x43500000
 801447c:	ffff3cb0 	.word	0xffff3cb0
 8014480:	3c900000 	.word	0x3c900000

08014484 <_init>:
 8014484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014486:	bf00      	nop
 8014488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801448a:	bc08      	pop	{r3}
 801448c:	469e      	mov	lr, r3
 801448e:	4770      	bx	lr

08014490 <_fini>:
 8014490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014492:	bf00      	nop
 8014494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014496:	bc08      	pop	{r3}
 8014498:	469e      	mov	lr, r3
 801449a:	4770      	bx	lr
