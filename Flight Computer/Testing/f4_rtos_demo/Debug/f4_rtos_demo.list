
f4_rtos_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  08013650  08013650  00023650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013cdc  08013cdc  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  08013cdc  08013cdc  00023cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013ce4  08013ce4  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ce4  08013ce4  00023ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013ce8  08013ce8  00023ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  08013cec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003036c  2**0
                  CONTENTS
 10 .bss          00006e3c  2000036c  2000036c  0003036c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200071a8  200071a8  0003036c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049463  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000070cd  00000000  00000000  000797ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002b18  00000000  00000000  000808d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000028a8  00000000  00000000  000833e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e1a0  00000000  00000000  00085c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000312e1  00000000  00000000  000b3e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102a82  00000000  00000000  000e5111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001e7b93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cf28  00000000  00000000  001e7be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000036c 	.word	0x2000036c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013638 	.word	0x08013638

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000370 	.word	0x20000370
 80001ec:	08013638 	.word	0x08013638

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <GPS_Poll>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Poll(float *latitude, float *longitude, float *time)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 1000;
 8001018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101c:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t max_skip_count = 100;
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	843b      	strh	r3, [r7, #32]
	uint16_t loop_count = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = 0; i < max_skip_count; i++){
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
 800102e:	e01a      	b.n	8001066 <GPS_Poll+0x5a>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8001030:	2364      	movs	r3, #100	; 0x64
 8001032:	2201      	movs	r2, #1
 8001034:	4957      	ldr	r1, [pc, #348]	; (8001194 <GPS_Poll+0x188>)
 8001036:	4858      	ldr	r0, [pc, #352]	; (8001198 <GPS_Poll+0x18c>)
 8001038:	f006 fb87 	bl	800774a <HAL_UART_Receive>
		if(rx_current == '$'){
 800103c:	4b55      	ldr	r3, [pc, #340]	; (8001194 <GPS_Poll+0x188>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	2b24      	cmp	r3, #36	; 0x24
 8001042:	d10d      	bne.n	8001060 <GPS_Poll+0x54>
			rx_buffer[rx_index++] = rx_current;
 8001044:	4b53      	ldr	r3, [pc, #332]	; (8001194 <GPS_Poll+0x188>)
 8001046:	8819      	ldrh	r1, [r3, #0]
 8001048:	4b54      	ldr	r3, [pc, #336]	; (800119c <GPS_Poll+0x190>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	b2d0      	uxtb	r0, r2
 8001050:	4a52      	ldr	r2, [pc, #328]	; (800119c <GPS_Poll+0x190>)
 8001052:	7010      	strb	r0, [r2, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	b2c9      	uxtb	r1, r1
 8001058:	4b51      	ldr	r3, [pc, #324]	; (80011a0 <GPS_Poll+0x194>)
 800105a:	5499      	strb	r1, [r3, r2]
			i = max_skip_count;
 800105c:	8c3b      	ldrh	r3, [r7, #32]
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < max_skip_count; i++){
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	3301      	adds	r3, #1
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
 8001066:	8c3b      	ldrh	r3, [r7, #32]
 8001068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106a:	429a      	cmp	r2, r3
 800106c:	dbe0      	blt.n	8001030 <GPS_Poll+0x24>
		}
	}
	while(loop_count < max_loop_count && !done){
 800106e:	e084      	b.n	800117a <GPS_Poll+0x16e>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	2201      	movs	r2, #1
 8001074:	4947      	ldr	r1, [pc, #284]	; (8001194 <GPS_Poll+0x188>)
 8001076:	4848      	ldr	r0, [pc, #288]	; (8001198 <GPS_Poll+0x18c>)
 8001078:	f006 fb67 	bl	800774a <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart8, (uint8_t*)&rx_current, 1, 100);
		if(rx_current == '$'){
 800107c:	4b45      	ldr	r3, [pc, #276]	; (8001194 <GPS_Poll+0x188>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	2b24      	cmp	r3, #36	; 0x24
 8001082:	d114      	bne.n	80010ae <GPS_Poll+0xa2>
			rx_index = 0;
 8001084:	4b45      	ldr	r3, [pc, #276]	; (800119c <GPS_Poll+0x190>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 800108a:	2264      	movs	r2, #100	; 0x64
 800108c:	2100      	movs	r1, #0
 800108e:	4844      	ldr	r0, [pc, #272]	; (80011a0 <GPS_Poll+0x194>)
 8001090:	f00d fac7 	bl	800e622 <memset>
			rx_buffer[rx_index++] = rx_current;
 8001094:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <GPS_Poll+0x188>)
 8001096:	8819      	ldrh	r1, [r3, #0]
 8001098:	4b40      	ldr	r3, [pc, #256]	; (800119c <GPS_Poll+0x190>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	b2d0      	uxtb	r0, r2
 80010a0:	4a3e      	ldr	r2, [pc, #248]	; (800119c <GPS_Poll+0x190>)
 80010a2:	7010      	strb	r0, [r2, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	b2c9      	uxtb	r1, r1
 80010a8:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <GPS_Poll+0x194>)
 80010aa:	5499      	strb	r1, [r3, r2]
 80010ac:	e036      	b.n	800111c <GPS_Poll+0x110>
		} else if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 80010ae:	4b39      	ldr	r3, [pc, #228]	; (8001194 <GPS_Poll+0x188>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	2b0a      	cmp	r3, #10
 80010b4:	d010      	beq.n	80010d8 <GPS_Poll+0xcc>
 80010b6:	4b39      	ldr	r3, [pc, #228]	; (800119c <GPS_Poll+0x190>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b63      	cmp	r3, #99	; 0x63
 80010bc:	d80c      	bhi.n	80010d8 <GPS_Poll+0xcc>
			rx_buffer[rx_index++] = rx_current;
 80010be:	4b35      	ldr	r3, [pc, #212]	; (8001194 <GPS_Poll+0x188>)
 80010c0:	8819      	ldrh	r1, [r3, #0]
 80010c2:	4b36      	ldr	r3, [pc, #216]	; (800119c <GPS_Poll+0x190>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	b2d0      	uxtb	r0, r2
 80010ca:	4a34      	ldr	r2, [pc, #208]	; (800119c <GPS_Poll+0x190>)
 80010cc:	7010      	strb	r0, [r2, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	b2c9      	uxtb	r1, r1
 80010d2:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <GPS_Poll+0x194>)
 80010d4:	5499      	strb	r1, [r3, r2]
 80010d6:	e021      	b.n	800111c <GPS_Poll+0x110>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80010d8:	4831      	ldr	r0, [pc, #196]	; (80011a0 <GPS_Poll+0x194>)
 80010da:	f000 f865 	bl	80011a8 <GPS_validate>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <GPS_Poll+0x100>
				if(GPS_parse((char*) rx_buffer)){
 80010e4:	482e      	ldr	r0, [pc, #184]	; (80011a0 <GPS_Poll+0x194>)
 80010e6:	f000 f8c1 	bl	800126c <GPS_parse>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00d      	beq.n	800110c <GPS_Poll+0x100>
					*latitude = GPS.dec_latitude;
 80010f0:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <GPS_Poll+0x198>)
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80010f8:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <GPS_Poll+0x198>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <GPS_Poll+0x198>)
 8001102:	695a      	ldr	r2, [r3, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	601a      	str	r2, [r3, #0]
					done = 1;
 8001108:	2301      	movs	r3, #1
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <GPS_Poll+0x190>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8001112:	2264      	movs	r2, #100	; 0x64
 8001114:	2100      	movs	r1, #0
 8001116:	4822      	ldr	r0, [pc, #136]	; (80011a0 <GPS_Poll+0x194>)
 8001118:	f00d fa83 	bl	800e622 <memset>
		// from f303 code
//		__HAL_UART_CLEAR_FLAG(GPS_USART, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <GPS_Poll+0x18c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <GPS_Poll+0x18c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <GPS_Poll+0x18c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <GPS_Poll+0x18c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <GPS_Poll+0x18c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <GPS_Poll+0x18c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697b      	ldr	r3, [r7, #20]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <GPS_Poll+0x18c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <GPS_Poll+0x18c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]

		loop_count++;
 8001174:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001176:	3301      	adds	r3, #1
 8001178:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 800117a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800117c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800117e:	429a      	cmp	r2, r3
 8001180:	d203      	bcs.n	800118a <GPS_Poll+0x17e>
 8001182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001184:	2b00      	cmp	r3, #0
 8001186:	f43f af73 	beq.w	8001070 <GPS_Poll+0x64>
	}

}
 800118a:	bf00      	nop
 800118c:	3730      	adds	r7, #48	; 0x30
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000388 	.word	0x20000388
 8001198:	20005320 	.word	0x20005320
 800119c:	2000038a 	.word	0x2000038a
 80011a0:	20005174 	.word	0x20005174
 80011a4:	2000511c 	.word	0x2000511c

080011a8 <GPS_validate>:

int GPS_validate(char *nmeastr){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$'){
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b24      	cmp	r3, #36	; 0x24
 80011c2:	d103      	bne.n	80011cc <GPS_validate+0x24>
        i++;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
    } else {
        return 0;
    }

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80011ca:	e00c      	b.n	80011e6 <GPS_validate+0x3e>
        return 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	e047      	b.n	8001260 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4053      	eors	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        i++;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d008      	beq.n	8001204 <GPS_validate+0x5c>
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b2a      	cmp	r3, #42	; 0x2a
 80011fc:	d002      	beq.n	8001204 <GPS_validate+0x5c>
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2b4a      	cmp	r3, #74	; 0x4a
 8001202:	dde5      	ble.n	80011d0 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b4a      	cmp	r3, #74	; 0x4a
 8001208:	dd01      	ble.n	800120e <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800120a:	2300      	movs	r3, #0
 800120c:	e028      	b.n	8001260 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b2a      	cmp	r3, #42	; 0x2a
 8001218:	d119      	bne.n	800124e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3302      	adds	r3, #2
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	490a      	ldr	r1, [pc, #40]	; (8001268 <GPS_validate+0xc0>)
 800123e:	4618      	mov	r0, r3
 8001240:	f00e f94c 	bl	800f4dc <siprintf>
    return((checkcalcstr[0] == check[0])
 8001244:	7a3a      	ldrb	r2, [r7, #8]
 8001246:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001248:	429a      	cmp	r2, r3
 800124a:	d108      	bne.n	800125e <GPS_validate+0xb6>
 800124c:	e001      	b.n	8001252 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800124e:	2300      	movs	r3, #0
 8001250:	e006      	b.n	8001260 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001252:	7a7a      	ldrb	r2, [r7, #9]
 8001254:	7b7b      	ldrb	r3, [r7, #13]
 8001256:	429a      	cmp	r2, r3
 8001258:	d101      	bne.n	800125e <GPS_validate+0xb6>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <GPS_validate+0xb8>
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	08013650 	.word	0x08013650

0800126c <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af08      	add	r7, sp, #32
 8001272:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8001274:	2206      	movs	r2, #6
 8001276:	496d      	ldr	r1, [pc, #436]	; (800142c <GPS_parse+0x1c0>)
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f00e f9c0 	bl	800f5fe <strncmp>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d139      	bne.n	80012f8 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001284:	4b6a      	ldr	r3, [pc, #424]	; (8001430 <GPS_parse+0x1c4>)
 8001286:	9307      	str	r3, [sp, #28]
 8001288:	4b6a      	ldr	r3, [pc, #424]	; (8001434 <GPS_parse+0x1c8>)
 800128a:	9306      	str	r3, [sp, #24]
 800128c:	4b6a      	ldr	r3, [pc, #424]	; (8001438 <GPS_parse+0x1cc>)
 800128e:	9305      	str	r3, [sp, #20]
 8001290:	4b6a      	ldr	r3, [pc, #424]	; (800143c <GPS_parse+0x1d0>)
 8001292:	9304      	str	r3, [sp, #16]
 8001294:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <GPS_parse+0x1d4>)
 8001296:	9303      	str	r3, [sp, #12]
 8001298:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <GPS_parse+0x1d8>)
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <GPS_parse+0x1dc>)
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	4b6a      	ldr	r3, [pc, #424]	; (800144c <GPS_parse+0x1e0>)
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	4b6a      	ldr	r3, [pc, #424]	; (8001450 <GPS_parse+0x1e4>)
 80012a6:	4a6b      	ldr	r2, [pc, #428]	; (8001454 <GPS_parse+0x1e8>)
 80012a8:	496b      	ldr	r1, [pc, #428]	; (8001458 <GPS_parse+0x1ec>)
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f00e f936 	bl	800f51c <siscanf>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f340 80b5 	ble.w	8001422 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80012b8:	4b68      	ldr	r3, [pc, #416]	; (800145c <GPS_parse+0x1f0>)
 80012ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80012be:	4b67      	ldr	r3, [pc, #412]	; (800145c <GPS_parse+0x1f0>)
 80012c0:	7e1b      	ldrb	r3, [r3, #24]
 80012c2:	4618      	mov	r0, r3
 80012c4:	eeb0 0a67 	vmov.f32	s0, s15
 80012c8:	f000 f8ec 	bl	80014a4 <GPS_nmea_to_dec>
 80012cc:	eef0 7a40 	vmov.f32	s15, s0
 80012d0:	4b62      	ldr	r3, [pc, #392]	; (800145c <GPS_parse+0x1f0>)
 80012d2:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80012d6:	4b61      	ldr	r3, [pc, #388]	; (800145c <GPS_parse+0x1f0>)
 80012d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80012dc:	4b5f      	ldr	r3, [pc, #380]	; (800145c <GPS_parse+0x1f0>)
 80012de:	7e5b      	ldrb	r3, [r3, #25]
 80012e0:	4618      	mov	r0, r3
 80012e2:	eeb0 0a67 	vmov.f32	s0, s15
 80012e6:	f000 f8dd 	bl	80014a4 <GPS_nmea_to_dec>
 80012ea:	eef0 7a40 	vmov.f32	s15, s0
 80012ee:	4b5b      	ldr	r3, [pc, #364]	; (800145c <GPS_parse+0x1f0>)
 80012f0:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e095      	b.n	8001424 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80012f8:	2206      	movs	r2, #6
 80012fa:	4959      	ldr	r1, [pc, #356]	; (8001460 <GPS_parse+0x1f4>)
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f00e f97e 	bl	800f5fe <strncmp>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d134      	bne.n	8001372 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8001308:	4b56      	ldr	r3, [pc, #344]	; (8001464 <GPS_parse+0x1f8>)
 800130a:	9305      	str	r3, [sp, #20]
 800130c:	4b56      	ldr	r3, [pc, #344]	; (8001468 <GPS_parse+0x1fc>)
 800130e:	9304      	str	r3, [sp, #16]
 8001310:	4b56      	ldr	r3, [pc, #344]	; (800146c <GPS_parse+0x200>)
 8001312:	9303      	str	r3, [sp, #12]
 8001314:	4b4b      	ldr	r3, [pc, #300]	; (8001444 <GPS_parse+0x1d8>)
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <GPS_parse+0x1dc>)
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	4b4b      	ldr	r3, [pc, #300]	; (800144c <GPS_parse+0x1e0>)
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	4b4b      	ldr	r3, [pc, #300]	; (8001450 <GPS_parse+0x1e4>)
 8001322:	4a4c      	ldr	r2, [pc, #304]	; (8001454 <GPS_parse+0x1e8>)
 8001324:	4952      	ldr	r1, [pc, #328]	; (8001470 <GPS_parse+0x204>)
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f00e f8f8 	bl	800f51c <siscanf>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	dd77      	ble.n	8001422 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001332:	4b4a      	ldr	r3, [pc, #296]	; (800145c <GPS_parse+0x1f0>)
 8001334:	edd3 7a04 	vldr	s15, [r3, #16]
 8001338:	4b48      	ldr	r3, [pc, #288]	; (800145c <GPS_parse+0x1f0>)
 800133a:	7e1b      	ldrb	r3, [r3, #24]
 800133c:	4618      	mov	r0, r3
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	f000 f8af 	bl	80014a4 <GPS_nmea_to_dec>
 8001346:	eef0 7a40 	vmov.f32	s15, s0
 800134a:	4b44      	ldr	r3, [pc, #272]	; (800145c <GPS_parse+0x1f0>)
 800134c:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001350:	4b42      	ldr	r3, [pc, #264]	; (800145c <GPS_parse+0x1f0>)
 8001352:	edd3 7a03 	vldr	s15, [r3, #12]
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <GPS_parse+0x1f0>)
 8001358:	7e5b      	ldrb	r3, [r3, #25]
 800135a:	4618      	mov	r0, r3
 800135c:	eeb0 0a67 	vmov.f32	s0, s15
 8001360:	f000 f8a0 	bl	80014a4 <GPS_nmea_to_dec>
 8001364:	eef0 7a40 	vmov.f32	s15, s0
 8001368:	4b3c      	ldr	r3, [pc, #240]	; (800145c <GPS_parse+0x1f0>)
 800136a:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800136e:	2301      	movs	r3, #1
 8001370:	e058      	b.n	8001424 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8001372:	2206      	movs	r2, #6
 8001374:	493f      	ldr	r1, [pc, #252]	; (8001474 <GPS_parse+0x208>)
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f00e f941 	bl	800f5fe <strncmp>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d130      	bne.n	80013e4 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <GPS_parse+0x20c>)
 8001384:	9303      	str	r3, [sp, #12]
 8001386:	4b33      	ldr	r3, [pc, #204]	; (8001454 <GPS_parse+0x1e8>)
 8001388:	9302      	str	r3, [sp, #8]
 800138a:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <GPS_parse+0x1d8>)
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <GPS_parse+0x1dc>)
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <GPS_parse+0x1e0>)
 8001394:	4a2e      	ldr	r2, [pc, #184]	; (8001450 <GPS_parse+0x1e4>)
 8001396:	4939      	ldr	r1, [pc, #228]	; (800147c <GPS_parse+0x210>)
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f00e f8bf 	bl	800f51c <siscanf>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dd3e      	ble.n	8001422 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80013a4:	4b2d      	ldr	r3, [pc, #180]	; (800145c <GPS_parse+0x1f0>)
 80013a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80013aa:	4b2c      	ldr	r3, [pc, #176]	; (800145c <GPS_parse+0x1f0>)
 80013ac:	7e1b      	ldrb	r3, [r3, #24]
 80013ae:	4618      	mov	r0, r3
 80013b0:	eeb0 0a67 	vmov.f32	s0, s15
 80013b4:	f000 f876 	bl	80014a4 <GPS_nmea_to_dec>
 80013b8:	eef0 7a40 	vmov.f32	s15, s0
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <GPS_parse+0x1f0>)
 80013be:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <GPS_parse+0x1f0>)
 80013c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <GPS_parse+0x1f0>)
 80013ca:	7e5b      	ldrb	r3, [r3, #25]
 80013cc:	4618      	mov	r0, r3
 80013ce:	eeb0 0a67 	vmov.f32	s0, s15
 80013d2:	f000 f867 	bl	80014a4 <GPS_nmea_to_dec>
 80013d6:	eef0 7a40 	vmov.f32	s15, s0
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <GPS_parse+0x1f0>)
 80013dc:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e01f      	b.n	8001424 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80013e4:	2206      	movs	r2, #6
 80013e6:	4926      	ldr	r1, [pc, #152]	; (8001480 <GPS_parse+0x214>)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f00e f908 	bl	800f5fe <strncmp>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d116      	bne.n	8001422 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <GPS_parse+0x218>)
 80013f6:	9305      	str	r3, [sp, #20]
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <GPS_parse+0x21c>)
 80013fa:	9304      	str	r3, [sp, #16]
 80013fc:	4b23      	ldr	r3, [pc, #140]	; (800148c <GPS_parse+0x220>)
 80013fe:	9303      	str	r3, [sp, #12]
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <GPS_parse+0x200>)
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <GPS_parse+0x224>)
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <GPS_parse+0x228>)
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <GPS_parse+0x22c>)
 800140e:	4a23      	ldr	r2, [pc, #140]	; (800149c <GPS_parse+0x230>)
 8001410:	4923      	ldr	r1, [pc, #140]	; (80014a0 <GPS_parse+0x234>)
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f00e f882 	bl	800f51c <siscanf>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	dd01      	ble.n	8001422 <GPS_parse+0x1b6>
            return 0;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <GPS_parse+0x1b8>
    }
    return 0;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	08013658 	.word	0x08013658
 8001430:	20005148 	.word	0x20005148
 8001434:	20005144 	.word	0x20005144
 8001438:	20005140 	.word	0x20005140
 800143c:	2000513c 	.word	0x2000513c
 8001440:	20005138 	.word	0x20005138
 8001444:	20005135 	.word	0x20005135
 8001448:	20005128 	.word	0x20005128
 800144c:	20005134 	.word	0x20005134
 8001450:	2000512c 	.word	0x2000512c
 8001454:	20005130 	.word	0x20005130
 8001458:	08013660 	.word	0x08013660
 800145c:	2000511c 	.word	0x2000511c
 8001460:	08013688 	.word	0x08013688
 8001464:	20005154 	.word	0x20005154
 8001468:	20005150 	.word	0x20005150
 800146c:	2000514c 	.word	0x2000514c
 8001470:	08013690 	.word	0x08013690
 8001474:	080136b0 	.word	0x080136b0
 8001478:	20005158 	.word	0x20005158
 800147c:	080136b8 	.word	0x080136b8
 8001480:	080136d4 	.word	0x080136d4
 8001484:	20005170 	.word	0x20005170
 8001488:	2000516c 	.word	0x2000516c
 800148c:	20005169 	.word	0x20005169
 8001490:	20005168 	.word	0x20005168
 8001494:	20005164 	.word	0x20005164
 8001498:	20005160 	.word	0x20005160
 800149c:	2000515c 	.word	0x2000515c
 80014a0:	080136dc 	.word	0x080136dc

080014a4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80014ae:	4603      	mov	r3, r0
 80014b0:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80014b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80014b6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001538 <GPS_nmea_to_dec+0x94>
 80014ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c2:	ee17 3a90 	vmov	r3, s15
 80014c6:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	2264      	movs	r2, #100	; 0x64
 80014cc:	fb02 f303 	mul.w	r3, r2, r3
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80014dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e0:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80014e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80014e8:	eddf 6a14 	vldr	s13, [pc, #80]	; 800153c <GPS_nmea_to_dec+0x98>
 80014ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f0:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	ee07 3a90 	vmov	s15, r3
 80014fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001506:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	2b53      	cmp	r3, #83	; 0x53
 800150e:	d002      	beq.n	8001516 <GPS_nmea_to_dec+0x72>
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	2b57      	cmp	r3, #87	; 0x57
 8001514:	d105      	bne.n	8001522 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001516:	edd7 7a05 	vldr	s15, [r7, #20]
 800151a:	eef1 7a67 	vneg.f32	s15, s15
 800151e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	ee07 3a90 	vmov	s15, r3
}
 8001528:	eeb0 0a67 	vmov.f32	s0, s15
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	42c80000 	.word	0x42c80000
 800153c:	42700000 	.word	0x42700000

08001540 <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b087      	sub	sp, #28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001548:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <lsm6dsl_init+0xc8>)
 800154a:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <lsm6dsl_init+0xcc>)
 800154e:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <lsm6dsl_init+0xd0>)
 8001552:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001554:	200a      	movs	r0, #10
 8001556:	f000 f929 	bl	80017ac <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	492d      	ldr	r1, [pc, #180]	; (8001614 <lsm6dsl_init+0xd4>)
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fb15 	bl	8001b90 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <lsm6dsl_init+0xd4>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b6a      	cmp	r3, #106	; 0x6a
 800156c:	d005      	beq.n	800157a <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	2102      	movs	r1, #2
 8001572:	4829      	ldr	r0, [pc, #164]	; (8001618 <lsm6dsl_init+0xd8>)
 8001574:	f002 f994 	bl	80038a0 <HAL_GPIO_WritePin>
		__BKPT();
 8001578:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	2101      	movs	r1, #1
 8001580:	4618      	mov	r0, r3
 8001582:	f000 fb16 	bl	8001bb2 <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	4924      	ldr	r1, [pc, #144]	; (800161c <lsm6dsl_init+0xdc>)
 800158c:	4618      	mov	r0, r3
 800158e:	f000 fb36 	bl	8001bfe <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <lsm6dsl_init+0xdc>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f5      	bne.n	8001586 <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	2101      	movs	r1, #1
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fa07 	bl	80019b4 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2104      	movs	r1, #4
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f98f 	bl	80018d0 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2104      	movs	r1, #4
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f9d5 	bl	8001968 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	2103      	movs	r1, #3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f95d 	bl	8001884 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2106      	movs	r1, #6
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 f9a3 	bl	800191c <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	2111      	movs	r1, #17
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fb27 	bl	8001c30 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	21a8      	movs	r1, #168	; 0xa8
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fb58 	bl	8001c9e <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	461c      	mov	r4, r3
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}
 8001606:	bf00      	nop
 8001608:	08001739 	.word	0x08001739
 800160c:	08001773 	.word	0x08001773
 8001610:	200051d8 	.word	0x200051d8
 8001614:	2000039a 	.word	0x2000039a
 8001618:	40020800 	.word	0x40020800
 800161c:	2000039b 	.word	0x2000039b

08001620 <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	1d3c      	adds	r4, r7, #4
 8001628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800162c:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 800162e:	f107 0217 	add.w	r2, r7, #23
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f9e2 	bl	8001a00 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d02d      	beq.n	800169e <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001642:	2206      	movs	r2, #6
 8001644:	2100      	movs	r1, #0
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <get_acceleration+0x88>)
 8001648:	f00c ffeb 	bl	800e622 <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	4916      	ldr	r1, [pc, #88]	; (80016a8 <get_acceleration+0x88>)
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fa52 	bl	8001afa <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <get_acceleration+0x88>)
 8001658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f8e1 	bl	8001824 <lsm6dsl_from_fs8g_to_mg>
 8001662:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <get_acceleration+0x88>)
 800166e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001676:	4610      	mov	r0, r2
 8001678:	f000 f8d4 	bl	8001824 <lsm6dsl_from_fs8g_to_mg>
 800167c:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 8001680:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <get_acceleration+0x88>)
 8001686:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001690:	4610      	mov	r0, r2
 8001692:	f000 f8c7 	bl	8001824 <lsm6dsl_from_fs8g_to_mg>
 8001696:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 800169a:	edc4 7a00 	vstr	s15, [r4]
	}

}
 800169e:	bf00      	nop
 80016a0:	371c      	adds	r7, #28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000038c 	.word	0x2000038c

080016ac <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	1d3c      	adds	r4, r7, #4
 80016b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016b8:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 80016ba:	f107 0217 	add.w	r2, r7, #23
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f9b5 	bl	8001a32 <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d02d      	beq.n	800172a <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80016ce:	2206      	movs	r2, #6
 80016d0:	2100      	movs	r1, #0
 80016d2:	4818      	ldr	r0, [pc, #96]	; (8001734 <get_angvelocity+0x88>)
 80016d4:	f00c ffa5 	bl	800e622 <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4916      	ldr	r1, [pc, #88]	; (8001734 <get_angvelocity+0x88>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f9c1 	bl	8001a64 <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <get_angvelocity+0x88>)
 80016e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f8b3 	bl	8001854 <lsm6dsl_from_fs2000dps_to_mdps>
 80016ee:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <get_angvelocity+0x88>)
 80016fa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001702:	4610      	mov	r0, r2
 8001704:	f000 f8a6 	bl	8001854 <lsm6dsl_from_fs2000dps_to_mdps>
 8001708:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 800170c:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <get_angvelocity+0x88>)
 8001712:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800171c:	4610      	mov	r0, r2
 800171e:	f000 f899 	bl	8001854 <lsm6dsl_from_fs2000dps_to_mdps>
 8001722:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 8001726:	edc4 7a00 	vstr	s15, [r4]
	}
}
 800172a:	bf00      	nop
 800172c:	371c      	adds	r7, #28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}
 8001732:	bf00      	nop
 8001734:	20000394 	.word	0x20000394

08001738 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af04      	add	r7, sp, #16
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	461a      	mov	r2, r3
 8001744:	460b      	mov	r3, r1
 8001746:	72fb      	strb	r3, [r7, #11]
 8001748:	4613      	mov	r3, r2
 800174a:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 800174c:	7afb      	ldrb	r3, [r7, #11]
 800174e:	b29a      	uxth	r2, r3
 8001750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001754:	9302      	str	r3, [sp, #8]
 8001756:	893b      	ldrh	r3, [r7, #8]
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2301      	movs	r3, #1
 8001760:	21d5      	movs	r1, #213	; 0xd5
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f002 fa1e 	bl	8003ba4 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b088      	sub	sp, #32
 8001776:	af04      	add	r7, sp, #16
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	461a      	mov	r2, r3
 800177e:	460b      	mov	r3, r1
 8001780:	72fb      	strb	r3, [r7, #11]
 8001782:	4613      	mov	r3, r2
 8001784:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 8001786:	7afb      	ldrb	r3, [r7, #11]
 8001788:	b29a      	uxth	r2, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	9302      	str	r3, [sp, #8]
 8001790:	893b      	ldrh	r3, [r7, #8]
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	21d5      	movs	r1, #213	; 0xd5
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f002 fafb 	bl	8003d98 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f001 fb4f 	bl	8002e58 <HAL_Delay>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80017c2:	b590      	push	{r4, r7, lr}
 80017c4:	b087      	sub	sp, #28
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	461a      	mov	r2, r3
 80017ce:	460b      	mov	r3, r1
 80017d0:	72fb      	strb	r3, [r7, #11]
 80017d2:	4613      	mov	r3, r2
 80017d4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	685c      	ldr	r4, [r3, #4]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6898      	ldr	r0, [r3, #8]
 80017de:	893b      	ldrh	r3, [r7, #8]
 80017e0:	7af9      	ldrb	r1, [r7, #11]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	47a0      	blx	r4
 80017e6:	6178      	str	r0, [r7, #20]

  return ret;
 80017e8:	697b      	ldr	r3, [r7, #20]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	371c      	adds	r7, #28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}

080017f2 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80017f2:	b590      	push	{r4, r7, lr}
 80017f4:	b087      	sub	sp, #28
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	461a      	mov	r2, r3
 80017fe:	460b      	mov	r3, r1
 8001800:	72fb      	strb	r3, [r7, #11]
 8001802:	4613      	mov	r3, r2
 8001804:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681c      	ldr	r4, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6898      	ldr	r0, [r3, #8]
 800180e:	893b      	ldrh	r3, [r7, #8]
 8001810:	7af9      	ldrb	r1, [r7, #11]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	47a0      	blx	r4
 8001816:	6178      	str	r0, [r7, #20]

  return ret;
 8001818:	697b      	ldr	r3, [r7, #20]
}
 800181a:	4618      	mov	r0, r3
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd90      	pop	{r4, r7, pc}
	...

08001824 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 800182e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001850 <lsm6dsl_from_fs8g_to_mg+0x2c>
 800183e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001842:	eeb0 0a67 	vmov.f32	s0, s15
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	3e79db23 	.word	0x3e79db23

08001854 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800185e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001880 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 800186e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001872:	eeb0 0a67 	vmov.f32	s0, s15
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	428c0000 	.word	0x428c0000

08001884 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001890:	f107 0208 	add.w	r2, r7, #8
 8001894:	2301      	movs	r3, #1
 8001896:	2110      	movs	r1, #16
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff92 	bl	80017c2 <lsm6dsl_read_reg>
 800189e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10f      	bne.n	80018c6 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	7a3b      	ldrb	r3, [r7, #8]
 80018b0:	f362 0383 	bfi	r3, r2, #2, #2
 80018b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80018b6:	f107 0208 	add.w	r2, r7, #8
 80018ba:	2301      	movs	r3, #1
 80018bc:	2110      	movs	r1, #16
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ff97 	bl	80017f2 <lsm6dsl_write_reg>
 80018c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80018dc:	f107 0208 	add.w	r2, r7, #8
 80018e0:	2301      	movs	r3, #1
 80018e2:	2110      	movs	r1, #16
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff6c 	bl	80017c2 <lsm6dsl_read_reg>
 80018ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10f      	bne.n	8001912 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	7a3b      	ldrb	r3, [r7, #8]
 80018fc:	f362 1307 	bfi	r3, r2, #4, #4
 8001900:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001902:	f107 0208 	add.w	r2, r7, #8
 8001906:	2301      	movs	r3, #1
 8001908:	2110      	movs	r1, #16
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ff71 	bl	80017f2 <lsm6dsl_write_reg>
 8001910:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001928:	f107 0208 	add.w	r2, r7, #8
 800192c:	2301      	movs	r3, #1
 800192e:	2111      	movs	r1, #17
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff46 	bl	80017c2 <lsm6dsl_read_reg>
 8001936:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10f      	bne.n	800195e <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	b2da      	uxtb	r2, r3
 8001946:	7a3b      	ldrb	r3, [r7, #8]
 8001948:	f362 0343 	bfi	r3, r2, #1, #3
 800194c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800194e:	f107 0208 	add.w	r2, r7, #8
 8001952:	2301      	movs	r3, #1
 8001954:	2111      	movs	r1, #17
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ff4b 	bl	80017f2 <lsm6dsl_write_reg>
 800195c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001974:	f107 0208 	add.w	r2, r7, #8
 8001978:	2301      	movs	r3, #1
 800197a:	2111      	movs	r1, #17
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff20 	bl	80017c2 <lsm6dsl_read_reg>
 8001982:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10f      	bne.n	80019aa <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	b2da      	uxtb	r2, r3
 8001992:	7a3b      	ldrb	r3, [r7, #8]
 8001994:	f362 1307 	bfi	r3, r2, #4, #4
 8001998:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800199a:	f107 0208 	add.w	r2, r7, #8
 800199e:	2301      	movs	r3, #1
 80019a0:	2111      	movs	r1, #17
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff25 	bl	80017f2 <lsm6dsl_write_reg>
 80019a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80019c0:	f107 0208 	add.w	r2, r7, #8
 80019c4:	2301      	movs	r3, #1
 80019c6:	2112      	movs	r1, #18
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fefa 	bl	80017c2 <lsm6dsl_read_reg>
 80019ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10f      	bne.n	80019f6 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	7a3b      	ldrb	r3, [r7, #8]
 80019e0:	f362 1386 	bfi	r3, r2, #6, #1
 80019e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80019e6:	f107 0208 	add.w	r2, r7, #8
 80019ea:	2301      	movs	r3, #1
 80019ec:	2112      	movs	r1, #18
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff feff 	bl	80017f2 <lsm6dsl_write_reg>
 80019f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001a0a:	f107 0208 	add.w	r2, r7, #8
 8001a0e:	2301      	movs	r3, #1
 8001a10:	211e      	movs	r1, #30
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fed5 	bl	80017c2 <lsm6dsl_read_reg>
 8001a18:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8001a1a:	7a3b      	ldrb	r3, [r7, #8]
 8001a1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	701a      	strb	r2, [r3, #0]

  return ret;
 8001a28:	68fb      	ldr	r3, [r7, #12]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001a3c:	f107 0208 	add.w	r2, r7, #8
 8001a40:	2301      	movs	r3, #1
 8001a42:	211e      	movs	r1, #30
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff febc 	bl	80017c2 <lsm6dsl_read_reg>
 8001a4a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8001a4c:	7a3b      	ldrb	r3, [r7, #8]
 8001a4e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	701a      	strb	r2, [r3, #0]

  return ret;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8001a6e:	f107 020c 	add.w	r2, r7, #12
 8001a72:	2306      	movs	r3, #6
 8001a74:	2122      	movs	r1, #34	; 0x22
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fea3 	bl	80017c2 <lsm6dsl_read_reg>
 8001a7c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001a7e:	7b7b      	ldrb	r3, [r7, #13]
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	7b3b      	ldrb	r3, [r7, #12]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	b212      	sxth	r2, r2
 8001aa8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	3302      	adds	r3, #2
 8001aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	7bbb      	ldrb	r3, [r7, #14]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	b212      	sxth	r2, r2
 8001ac6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001ac8:	7c7a      	ldrb	r2, [r7, #17]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	3304      	adds	r3, #4
 8001ace:	b212      	sxth	r2, r2
 8001ad0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	7c3b      	ldrb	r3, [r7, #16]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	3304      	adds	r3, #4
 8001aec:	b212      	sxth	r2, r2
 8001aee:	801a      	strh	r2, [r3, #0]

  return ret;
 8001af0:	697b      	ldr	r3, [r7, #20]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001b04:	f107 020c 	add.w	r2, r7, #12
 8001b08:	2306      	movs	r3, #6
 8001b0a:	2128      	movs	r1, #40	; 0x28
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff fe58 	bl	80017c2 <lsm6dsl_read_reg>
 8001b12:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001b14:	7b7b      	ldrb	r3, [r7, #13]
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	7b3b      	ldrb	r3, [r7, #12]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	b212      	sxth	r2, r2
 8001b3e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	3302      	adds	r3, #2
 8001b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	7bbb      	ldrb	r3, [r7, #14]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	3302      	adds	r3, #2
 8001b5a:	b212      	sxth	r2, r2
 8001b5c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001b5e:	7c7a      	ldrb	r2, [r7, #17]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3304      	adds	r3, #4
 8001b64:	b212      	sxth	r2, r2
 8001b66:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	7c3b      	ldrb	r3, [r7, #16]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	3304      	adds	r3, #4
 8001b82:	b212      	sxth	r2, r2
 8001b84:	801a      	strh	r2, [r3, #0]

  return ret;
 8001b86:	697b      	ldr	r3, [r7, #20]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff fe0e 	bl	80017c2 <lsm6dsl_read_reg>
 8001ba6:	60f8      	str	r0, [r7, #12]

  return ret;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001bbe:	f107 0208 	add.w	r2, r7, #8
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	2112      	movs	r1, #18
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fdfb 	bl	80017c2 <lsm6dsl_read_reg>
 8001bcc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10f      	bne.n	8001bf4 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	7a3b      	ldrb	r3, [r7, #8]
 8001bde:	f362 0300 	bfi	r3, r2, #0, #1
 8001be2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001be4:	f107 0208 	add.w	r2, r7, #8
 8001be8:	2301      	movs	r3, #1
 8001bea:	2112      	movs	r1, #18
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff fe00 	bl	80017f2 <lsm6dsl_write_reg>
 8001bf2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c08:	f107 0208 	add.w	r2, r7, #8
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	2112      	movs	r1, #18
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fdd6 	bl	80017c2 <lsm6dsl_read_reg>
 8001c16:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001c18:	7a3b      	ldrb	r3, [r7, #8]
 8001c1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	701a      	strb	r2, [r3, #0]

  return ret;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001c3c:	f107 0208 	add.w	r2, r7, #8
 8001c40:	2301      	movs	r3, #1
 8001c42:	2117      	movs	r1, #23
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fdbc 	bl	80017c2 <lsm6dsl_read_reg>
 8001c4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d120      	bne.n	8001c94 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	7a3b      	ldrb	r3, [r7, #8]
 8001c5e:	f362 03c3 	bfi	r3, r2, #3, #1
 8001c62:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	7a3b      	ldrb	r3, [r7, #8]
 8001c6e:	f362 1346 	bfi	r3, r2, #5, #2
 8001c72:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8001c74:	7a3b      	ldrb	r3, [r7, #8]
 8001c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001c7c:	7a3b      	ldrb	r3, [r7, #8]
 8001c7e:	f36f 0382 	bfc	r3, #2, #1
 8001c82:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001c84:	f107 0208 	add.w	r2, r7, #8
 8001c88:	2301      	movs	r3, #1
 8001c8a:	2117      	movs	r1, #23
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fdb0 	bl	80017f2 <lsm6dsl_write_reg>
 8001c92:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c94:	68fb      	ldr	r3, [r7, #12]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001caa:	f107 0208 	add.w	r2, r7, #8
 8001cae:	2301      	movs	r3, #1
 8001cb0:	2116      	movs	r1, #22
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fd85 	bl	80017c2 <lsm6dsl_read_reg>
 8001cb8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d157      	bne.n	8001d70 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	7a3b      	ldrb	r3, [r7, #8]
 8001ccc:	f362 1305 	bfi	r3, r2, #4, #2
 8001cd0:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	09db      	lsrs	r3, r3, #7
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	7a3b      	ldrb	r3, [r7, #8]
 8001ce0:	f362 1386 	bfi	r3, r2, #6, #1
 8001ce4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001ce6:	f107 0208 	add.w	r2, r7, #8
 8001cea:	2301      	movs	r3, #1
 8001cec:	2116      	movs	r1, #22
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fd7f 	bl	80017f2 <lsm6dsl_write_reg>
 8001cf4:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d139      	bne.n	8001d70 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001cfc:	f107 020c 	add.w	r2, r7, #12
 8001d00:	2301      	movs	r3, #1
 8001d02:	2115      	movs	r1, #21
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fd5c 	bl	80017c2 <lsm6dsl_read_reg>
 8001d0a:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d12e      	bne.n	8001d70 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	7b3b      	ldrb	r3, [r7, #12]
 8001d1c:	f362 0301 	bfi	r3, r2, #0, #2
 8001d20:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001d22:	f107 020c 	add.w	r2, r7, #12
 8001d26:	2301      	movs	r3, #1
 8001d28:	2115      	movs	r1, #21
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fd61 	bl	80017f2 <lsm6dsl_write_reg>
 8001d30:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d11b      	bne.n	8001d70 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8001d38:	f107 0210 	add.w	r2, r7, #16
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	2113      	movs	r1, #19
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fd3e 	bl	80017c2 <lsm6dsl_read_reg>
 8001d46:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d110      	bne.n	8001d70 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	08db      	lsrs	r3, r3, #3
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	7c3b      	ldrb	r3, [r7, #16]
 8001d5a:	f362 0341 	bfi	r3, r2, #1, #1
 8001d5e:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8001d60:	f107 0210 	add.w	r2, r7, #16
 8001d64:	2301      	movs	r3, #1
 8001d66:	2113      	movs	r1, #19
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff fd42 	bl	80017f2 <lsm6dsl_write_reg>
 8001d6e:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001d70:	697b      	ldr	r3, [r7, #20]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d82:	f001 f827 	bl	8002dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d86:	f000 f83f 	bl	8001e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d8a:	f000 fa6f 	bl	800226c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d8e:	f000 f8a5 	bl	8001edc <MX_ADC1_Init>
  MX_SPI4_Init();
 8001d92:	f000 f935 	bl	8002000 <MX_SPI4_Init>
  MX_TIM2_Init();
 8001d96:	f000 f99f 	bl	80020d8 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001d9a:	f000 f967 	bl	800206c <MX_SPI5_Init>
  MX_FATFS_Init();
 8001d9e:	f007 fb27 	bl	80093f0 <MX_FATFS_Init>
  MX_I2C3_Init();
 8001da2:	f000 f8ed 	bl	8001f80 <MX_I2C3_Init>
  MX_USART6_UART_Init();
 8001da6:	f000 fa37 	bl	8002218 <MX_USART6_UART_Init>
  MX_UART8_Init();
 8001daa:	f000 fa0b 	bl	80021c4 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  dev_ctx_lsm = lsm6dsl_init();
 8001dae:	4c0f      	ldr	r4, [pc, #60]	; (8001dec <main+0x70>)
 8001db0:	463b      	mov	r3, r7
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fbc4 	bl	8001540 <lsm6dsl_init>
 8001db8:	463b      	mov	r3, r7
 8001dba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001dbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  //dev_ctx_lps = lps22hh_init();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001dc2:	f009 f87d 	bl	800aec0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of printSensors */
  printSensorsHandle = osThreadNew(printSensorsFunc, NULL, &printSensors_attributes);
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <main+0x74>)
 8001dc8:	2100      	movs	r1, #0
 8001dca:	480a      	ldr	r0, [pc, #40]	; (8001df4 <main+0x78>)
 8001dcc:	f009 f8c2 	bl	800af54 <osThreadNew>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <main+0x7c>)
 8001dd4:	6013      	str	r3, [r2, #0]

  /* creation of pollSensors */
  pollSensorsHandle = osThreadNew(pollSensorsFunction, NULL, &pollSensors_attributes);
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <main+0x80>)
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4809      	ldr	r0, [pc, #36]	; (8001e00 <main+0x84>)
 8001ddc:	f009 f8ba 	bl	800af54 <osThreadNew>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <main+0x88>)
 8001de4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001de6:	f009 f88f 	bl	800af08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <main+0x6e>
 8001dec:	200053b0 	.word	0x200053b0
 8001df0:	080137b0 	.word	0x080137b0
 8001df4:	080024d1 	.word	0x080024d1
 8001df8:	20005284 	.word	0x20005284
 8001dfc:	080137d4 	.word	0x080137d4
 8001e00:	08002579 	.word	0x08002579
 8001e04:	20005288 	.word	0x20005288

08001e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b094      	sub	sp, #80	; 0x50
 8001e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	2230      	movs	r2, #48	; 0x30
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f00c fc03 	bl	800e622 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <SystemClock_Config+0xcc>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	4a27      	ldr	r2, [pc, #156]	; (8001ed4 <SystemClock_Config+0xcc>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <SystemClock_Config+0xcc>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <SystemClock_Config+0xd0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e54:	4a20      	ldr	r2, [pc, #128]	; (8001ed8 <SystemClock_Config+0xd0>)
 8001e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <SystemClock_Config+0xd0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e72:	2302      	movs	r3, #2
 8001e74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001e80:	2348      	movs	r3, #72	; 0x48
 8001e82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e84:	2302      	movs	r3, #2
 8001e86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8c:	f107 0320 	add.w	r3, r7, #32
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 ff01 	bl	8005c98 <HAL_RCC_OscConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e9c:	f000 fba2 	bl	80025e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	2102      	movs	r1, #2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f004 f963 	bl	8006188 <HAL_RCC_ClockConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ec8:	f000 fb8c 	bl	80025e4 <Error_Handler>
  }
}
 8001ecc:	bf00      	nop
 8001ece:	3750      	adds	r7, #80	; 0x50
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40007000 	.word	0x40007000

08001edc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ee2:	463b      	mov	r3, r7
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001ef0:	4a21      	ldr	r2, [pc, #132]	; (8001f78 <MX_ADC1_Init+0x9c>)
 8001ef2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001f1c:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <MX_ADC1_Init+0xa0>)
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f3a:	480e      	ldr	r0, [pc, #56]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001f3c:	f000 ffb0 	bl	8002ea0 <HAL_ADC_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f46:	f000 fb4d 	bl	80025e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f52:	2307      	movs	r3, #7
 8001f54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f56:	463b      	mov	r3, r7
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4806      	ldr	r0, [pc, #24]	; (8001f74 <MX_ADC1_Init+0x98>)
 8001f5c:	f000 ffe4 	bl	8002f28 <HAL_ADC_ConfigChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001f66:	f000 fb3d 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000528c 	.word	0x2000528c
 8001f78:	40012000 	.word	0x40012000
 8001f7c:	0f000001 	.word	0x0f000001

08001f80 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <MX_I2C3_Init+0x74>)
 8001f86:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <MX_I2C3_Init+0x78>)
 8001f88:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <MX_I2C3_Init+0x74>)
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <MX_I2C3_Init+0x7c>)
 8001f8e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f90:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <MX_I2C3_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <MX_I2C3_Init+0x74>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f9c:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <MX_I2C3_Init+0x74>)
 8001f9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <MX_I2C3_Init+0x74>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <MX_I2C3_Init+0x74>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb0:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <MX_I2C3_Init+0x74>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <MX_I2C3_Init+0x74>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001fbc:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <MX_I2C3_Init+0x74>)
 8001fbe:	f001 fcad 	bl	800391c <HAL_I2C_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001fc8:	f000 fb0c 	bl	80025e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <MX_I2C3_Init+0x74>)
 8001fd0:	f002 fc63 	bl	800489a <HAL_I2CEx_ConfigAnalogFilter>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001fda:	f000 fb03 	bl	80025e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <MX_I2C3_Init+0x74>)
 8001fe2:	f002 fc96 	bl	8004912 <HAL_I2CEx_ConfigDigitalFilter>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001fec:	f000 fafa 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200051d8 	.word	0x200051d8
 8001ff8:	40005c00 	.word	0x40005c00
 8001ffc:	000186a0 	.word	0x000186a0

08002000 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002004:	4b17      	ldr	r3, [pc, #92]	; (8002064 <MX_SPI4_Init+0x64>)
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <MX_SPI4_Init+0x68>)
 8002008:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <MX_SPI4_Init+0x64>)
 800200c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002010:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <MX_SPI4_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <MX_SPI4_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_SPI4_Init+0x64>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <MX_SPI4_Init+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_SPI4_Init+0x64>)
 800202c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002030:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_SPI4_Init+0x64>)
 8002034:	2230      	movs	r2, #48	; 0x30
 8002036:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <MX_SPI4_Init+0x64>)
 800203a:	2200      	movs	r2, #0
 800203c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_SPI4_Init+0x64>)
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <MX_SPI4_Init+0x64>)
 8002046:	2200      	movs	r2, #0
 8002048:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_SPI4_Init+0x64>)
 800204c:	220a      	movs	r2, #10
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002050:	4804      	ldr	r0, [pc, #16]	; (8002064 <MX_SPI4_Init+0x64>)
 8002052:	f004 fac5 	bl	80065e0 <HAL_SPI_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800205c:	f000 fac2 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200050c4 	.word	0x200050c4
 8002068:	40013400 	.word	0x40013400

0800206c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002070:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <MX_SPI5_Init+0x64>)
 8002072:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <MX_SPI5_Init+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <MX_SPI5_Init+0x64>)
 8002078:	f44f 7282 	mov.w	r2, #260	; 0x104
 800207c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <MX_SPI5_Init+0x64>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <MX_SPI5_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_SPI5_Init+0x64>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <MX_SPI5_Init+0x64>)
 8002092:	2200      	movs	r2, #0
 8002094:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MX_SPI5_Init+0x64>)
 8002098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MX_SPI5_Init+0x64>)
 80020a0:	2238      	movs	r2, #56	; 0x38
 80020a2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <MX_SPI5_Init+0x64>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MX_SPI5_Init+0x64>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <MX_SPI5_Init+0x64>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <MX_SPI5_Init+0x64>)
 80020b8:	220a      	movs	r2, #10
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80020bc:	4804      	ldr	r0, [pc, #16]	; (80020d0 <MX_SPI5_Init+0x64>)
 80020be:	f004 fa8f 	bl	80065e0 <HAL_SPI_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80020c8:	f000 fa8c 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	2000522c 	.word	0x2000522c
 80020d4:	40015000 	.word	0x40015000

080020d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08e      	sub	sp, #56	; 0x38
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ec:	f107 0320 	add.w	r3, r7, #32
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
 8002104:	615a      	str	r2, [r3, #20]
 8002106:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002108:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <MX_TIM2_Init+0xe8>)
 800210a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800210e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 8002110:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <MX_TIM2_Init+0xe8>)
 8002112:	2232      	movs	r2, #50	; 0x32
 8002114:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <MX_TIM2_Init+0xe8>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800211c:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <MX_TIM2_Init+0xe8>)
 800211e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002122:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002124:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <MX_TIM2_Init+0xe8>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <MX_TIM2_Init+0xe8>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002130:	4823      	ldr	r0, [pc, #140]	; (80021c0 <MX_TIM2_Init+0xe8>)
 8002132:	f004 fade 	bl	80066f2 <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800213c:	f000 fa52 	bl	80025e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800214a:	4619      	mov	r1, r3
 800214c:	481c      	ldr	r0, [pc, #112]	; (80021c0 <MX_TIM2_Init+0xe8>)
 800214e:	f004 fdb3 	bl	8006cb8 <HAL_TIM_ConfigClockSource>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002158:	f000 fa44 	bl	80025e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800215c:	4818      	ldr	r0, [pc, #96]	; (80021c0 <MX_TIM2_Init+0xe8>)
 800215e:	f004 fb87 	bl	8006870 <HAL_TIM_PWM_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002168:	f000 fa3c 	bl	80025e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800216c:	2320      	movs	r3, #32
 800216e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002174:	f107 0320 	add.w	r3, r7, #32
 8002178:	4619      	mov	r1, r3
 800217a:	4811      	ldr	r0, [pc, #68]	; (80021c0 <MX_TIM2_Init+0xe8>)
 800217c:	f005 f976 	bl	800746c <HAL_TIMEx_MasterConfigSynchronization>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002186:	f000 fa2d 	bl	80025e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800218a:	2360      	movs	r3, #96	; 0x60
 800218c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800218e:	2364      	movs	r3, #100	; 0x64
 8002190:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2208      	movs	r2, #8
 800219e:	4619      	mov	r1, r3
 80021a0:	4807      	ldr	r0, [pc, #28]	; (80021c0 <MX_TIM2_Init+0xe8>)
 80021a2:	f004 fcc7 	bl	8006b34 <HAL_TIM_PWM_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80021ac:	f000 fa1a 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <MX_TIM2_Init+0xe8>)
 80021b2:	f000 fbc1 	bl	8002938 <HAL_TIM_MspPostInit>

}
 80021b6:	bf00      	nop
 80021b8:	3738      	adds	r7, #56	; 0x38
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20005368 	.word	0x20005368

080021c4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <MX_UART8_Init+0x4c>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <MX_UART8_Init+0x50>)
 80021cc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <MX_UART8_Init+0x4c>)
 80021d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021d4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <MX_UART8_Init+0x4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <MX_UART8_Init+0x4c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <MX_UART8_Init+0x4c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <MX_UART8_Init+0x4c>)
 80021ea:	220c      	movs	r2, #12
 80021ec:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <MX_UART8_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <MX_UART8_Init+0x4c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_UART8_Init+0x4c>)
 80021fc:	f005 f9c6 	bl	800758c <HAL_UART_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8002206:	f000 f9ed 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200052dc 	.word	0x200052dc
 8002214:	40007c00 	.word	0x40007c00

08002218 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_USART6_UART_Init+0x4c>)
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <MX_USART6_UART_Init+0x50>)
 8002220:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <MX_USART6_UART_Init+0x4c>)
 8002224:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002228:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_USART6_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <MX_USART6_UART_Init+0x4c>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <MX_USART6_UART_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_USART6_UART_Init+0x4c>)
 800223e:	220c      	movs	r2, #12
 8002240:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <MX_USART6_UART_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_USART6_UART_Init+0x4c>)
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_USART6_UART_Init+0x4c>)
 8002250:	f005 f99c 	bl	800758c <HAL_UART_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800225a:	f000 f9c3 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20005320 	.word	0x20005320
 8002268:	40011400 	.word	0x40011400

0800226c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	; 0x30
 8002270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	4b8b      	ldr	r3, [pc, #556]	; (80024b4 <MX_GPIO_Init+0x248>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a8a      	ldr	r2, [pc, #552]	; (80024b4 <MX_GPIO_Init+0x248>)
 800228c:	f043 0310 	orr.w	r3, r3, #16
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b88      	ldr	r3, [pc, #544]	; (80024b4 <MX_GPIO_Init+0x248>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	4b84      	ldr	r3, [pc, #528]	; (80024b4 <MX_GPIO_Init+0x248>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a83      	ldr	r2, [pc, #524]	; (80024b4 <MX_GPIO_Init+0x248>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b81      	ldr	r3, [pc, #516]	; (80024b4 <MX_GPIO_Init+0x248>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b7d      	ldr	r3, [pc, #500]	; (80024b4 <MX_GPIO_Init+0x248>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a7c      	ldr	r2, [pc, #496]	; (80024b4 <MX_GPIO_Init+0x248>)
 80022c4:	f043 0320 	orr.w	r3, r3, #32
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b7a      	ldr	r3, [pc, #488]	; (80024b4 <MX_GPIO_Init+0x248>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b76      	ldr	r3, [pc, #472]	; (80024b4 <MX_GPIO_Init+0x248>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a75      	ldr	r2, [pc, #468]	; (80024b4 <MX_GPIO_Init+0x248>)
 80022e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b73      	ldr	r3, [pc, #460]	; (80024b4 <MX_GPIO_Init+0x248>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b6f      	ldr	r3, [pc, #444]	; (80024b4 <MX_GPIO_Init+0x248>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a6e      	ldr	r2, [pc, #440]	; (80024b4 <MX_GPIO_Init+0x248>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b6c      	ldr	r3, [pc, #432]	; (80024b4 <MX_GPIO_Init+0x248>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b68      	ldr	r3, [pc, #416]	; (80024b4 <MX_GPIO_Init+0x248>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a67      	ldr	r2, [pc, #412]	; (80024b4 <MX_GPIO_Init+0x248>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b65      	ldr	r3, [pc, #404]	; (80024b4 <MX_GPIO_Init+0x248>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <MX_GPIO_Init+0x248>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a60      	ldr	r2, [pc, #384]	; (80024b4 <MX_GPIO_Init+0x248>)
 8002334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <MX_GPIO_Init+0x248>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 8002346:	2200      	movs	r2, #0
 8002348:	f640 6184 	movw	r1, #3716	; 0xe84
 800234c:	485a      	ldr	r0, [pc, #360]	; (80024b8 <MX_GPIO_Init+0x24c>)
 800234e:	f001 faa7 	bl	80038a0 <HAL_GPIO_WritePin>
                          |TH_CS_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002358:	4858      	ldr	r0, [pc, #352]	; (80024bc <MX_GPIO_Init+0x250>)
 800235a:	f001 faa1 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|VR_CTRL_PWR_Pin, GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	f240 410e 	movw	r1, #1038	; 0x40e
 8002364:	4856      	ldr	r0, [pc, #344]	; (80024c0 <MX_GPIO_Init+0x254>)
 8002366:	f001 fa9b 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin, GPIO_PIN_RESET);
 800236a:	2200      	movs	r2, #0
 800236c:	f645 0102 	movw	r1, #22530	; 0x5802
 8002370:	4854      	ldr	r0, [pc, #336]	; (80024c4 <MX_GPIO_Init+0x258>)
 8002372:	f001 fa95 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, GPIO_PIN_RESET);
 8002376:	2200      	movs	r2, #0
 8002378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800237c:	4852      	ldr	r0, [pc, #328]	; (80024c8 <MX_GPIO_Init+0x25c>)
 800237e:	f001 fa8f 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PM_12V_EN_Pin Vent_Valve_EN_Pin Payload_EN_Pin TH_CS_1_Pin
                           TH_CS_2_Pin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 8002382:	f640 6384 	movw	r3, #3716	; 0xe84
 8002386:	61fb      	str	r3, [r7, #28]
                          |TH_CS_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002388:	2301      	movs	r3, #1
 800238a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	4619      	mov	r1, r3
 800239a:	4847      	ldr	r0, [pc, #284]	; (80024b8 <MX_GPIO_Init+0x24c>)
 800239c:	f001 f8d4 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80023a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80023b2:	f107 031c 	add.w	r3, r7, #28
 80023b6:	4619      	mov	r1, r3
 80023b8:	4840      	ldr	r0, [pc, #256]	; (80024bc <MX_GPIO_Init+0x250>)
 80023ba:	f001 f8c5 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80023be:	2301      	movs	r3, #1
 80023c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	4619      	mov	r1, r3
 80023d2:	483b      	ldr	r0, [pc, #236]	; (80024c0 <MX_GPIO_Init+0x254>)
 80023d4:	f001 f8b8 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin VR_CTRL_PWR_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|VR_CTRL_PWR_Pin;
 80023d8:	f240 430e 	movw	r3, #1038	; 0x40e
 80023dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023de:	2301      	movs	r3, #1
 80023e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	4619      	mov	r1, r3
 80023f0:	4833      	ldr	r0, [pc, #204]	; (80024c0 <MX_GPIO_Init+0x254>)
 80023f2:	f001 f8a9 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pin : Vent_Valve_FB_Pin */
  GPIO_InitStruct.Pin = Vent_Valve_FB_Pin;
 80023f6:	2302      	movs	r3, #2
 80023f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Vent_Valve_FB_GPIO_Port, &GPIO_InitStruct);
 8002402:	f107 031c 	add.w	r3, r7, #28
 8002406:	4619      	mov	r1, r3
 8002408:	4830      	ldr	r0, [pc, #192]	; (80024cc <MX_GPIO_Init+0x260>)
 800240a:	f001 f89d 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pin : Prop_Cont_2_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 800240e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002414:	2300      	movs	r3, #0
 8002416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	4826      	ldr	r0, [pc, #152]	; (80024bc <MX_GPIO_Init+0x250>)
 8002424:	f001 f890 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Gate_2_Pin Prop_Gate_1_Pin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 8002428:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800242c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242e:	2301      	movs	r3, #1
 8002430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800243a:	f107 031c 	add.w	r3, r7, #28
 800243e:	4619      	mov	r1, r3
 8002440:	481e      	ldr	r0, [pc, #120]	; (80024bc <MX_GPIO_Init+0x250>)
 8002442:	f001 f881 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Cont_1_Pin Rcov_Cont_Main_Pin Rcov_Cont_Drogue_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|Rcov_Cont_Main_Pin|Rcov_Cont_Drogue_Pin;
 8002446:	f242 4301 	movw	r3, #9217	; 0x2401
 800244a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002454:	f107 031c 	add.w	r3, r7, #28
 8002458:	4619      	mov	r1, r3
 800245a:	481a      	ldr	r0, [pc, #104]	; (80024c4 <MX_GPIO_Init+0x258>)
 800245c:	f001 f874 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Pyro_Arming_Pin Rcov_Gate_Main_Pin Rcov_Gate_Drogue_Pin Rcov_Arm_Pin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin;
 8002460:	f645 0302 	movw	r3, #22530	; 0x5802
 8002464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002466:	2301      	movs	r3, #1
 8002468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002472:	f107 031c 	add.w	r3, r7, #28
 8002476:	4619      	mov	r1, r3
 8002478:	4812      	ldr	r0, [pc, #72]	; (80024c4 <MX_GPIO_Init+0x258>)
 800247a:	f001 f865 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pin : VR_CTRL_REC_Pin */
  GPIO_InitStruct.Pin = VR_CTRL_REC_Pin;
 800247e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002484:	2301      	movs	r3, #1
 8002486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(VR_CTRL_REC_GPIO_Port, &GPIO_InitStruct);
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	4619      	mov	r1, r3
 8002496:	480c      	ldr	r0, [pc, #48]	; (80024c8 <MX_GPIO_Init+0x25c>)
 8002498:	f001 f856 	bl	8003548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800249c:	2200      	movs	r2, #0
 800249e:	2105      	movs	r1, #5
 80024a0:	2006      	movs	r0, #6
 80024a2:	f001 f827 	bl	80034f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80024a6:	2006      	movs	r0, #6
 80024a8:	f001 f840 	bl	800352c <HAL_NVIC_EnableIRQ>

}
 80024ac:	bf00      	nop
 80024ae:	3730      	adds	r7, #48	; 0x30
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40021400 	.word	0x40021400
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40021800 	.word	0x40021800
 80024c8:	40020000 	.word	0x40020000
 80024cc:	40020400 	.word	0x40020400

080024d0 <printSensorsFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_printSensorsFunc */
void printSensorsFunc(void *argument)
{
 80024d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af04      	add	r7, sp, #16
 80024d8:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80024da:	f00b fa6f 	bl	800d9bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	myprintf("ACCEL: %f, %f, %f\r\n", acceleration[0], acceleration[1], acceleration[2]);
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <printSensorsFunc+0x90>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe f840 	bl	8000568 <__aeabi_f2d>
 80024e8:	4680      	mov	r8, r0
 80024ea:	4689      	mov	r9, r1
 80024ec:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <printSensorsFunc+0x90>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe f839 	bl	8000568 <__aeabi_f2d>
 80024f6:	4604      	mov	r4, r0
 80024f8:	460d      	mov	r5, r1
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <printSensorsFunc+0x90>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe f832 	bl	8000568 <__aeabi_f2d>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800250c:	e9cd 4500 	strd	r4, r5, [sp]
 8002510:	4642      	mov	r2, r8
 8002512:	464b      	mov	r3, r9
 8002514:	4813      	ldr	r0, [pc, #76]	; (8002564 <printSensorsFunc+0x94>)
 8002516:	f000 f86b 	bl	80025f0 <myprintf>
	myprintf("IN GPS: %f, %f, %f\r\n", latitude, longitude, time);
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <printSensorsFunc+0x98>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe f822 	bl	8000568 <__aeabi_f2d>
 8002524:	4680      	mov	r8, r0
 8002526:	4689      	mov	r9, r1
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <printSensorsFunc+0x9c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe f81b 	bl	8000568 <__aeabi_f2d>
 8002532:	4604      	mov	r4, r0
 8002534:	460d      	mov	r5, r1
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <printSensorsFunc+0xa0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe f814 	bl	8000568 <__aeabi_f2d>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002548:	e9cd 4500 	strd	r4, r5, [sp]
 800254c:	4642      	mov	r2, r8
 800254e:	464b      	mov	r3, r9
 8002550:	4808      	ldr	r0, [pc, #32]	; (8002574 <printSensorsFunc+0xa4>)
 8002552:	f000 f84d 	bl	80025f0 <myprintf>
    osDelay(2000);
 8002556:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800255a:	f008 fd8d 	bl	800b078 <osDelay>
	myprintf("ACCEL: %f, %f, %f\r\n", acceleration[0], acceleration[1], acceleration[2]);
 800255e:	e7be      	b.n	80024de <printSensorsFunc+0xe>
 8002560:	2000039c 	.word	0x2000039c
 8002564:	08013718 	.word	0x08013718
 8002568:	20005364 	.word	0x20005364
 800256c:	200052d4 	.word	0x200052d4
 8002570:	200052d8 	.word	0x200052d8
 8002574:	0801372c 	.word	0x0801372c

08002578 <pollSensorsFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pollSensorsFunction */
void pollSensorsFunction(void *argument)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pollSensorsFunction */
  /* Infinite loop */
  for(;;)
  {
	get_acceleration(dev_ctx_lsm, acceleration);
 8002580:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <pollSensorsFunction+0x30>)
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <pollSensorsFunction+0x34>)
 8002584:	ca07      	ldmia	r2, {r0, r1, r2}
 8002586:	f7ff f84b 	bl	8001620 <get_acceleration>
	get_angvelocity(dev_ctx_lsm, angular_rate);
 800258a:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <pollSensorsFunction+0x30>)
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <pollSensorsFunction+0x38>)
 800258e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002590:	f7ff f88c 	bl	80016ac <get_angvelocity>
	GPS_Poll(&latitude, &longitude, &time);
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <pollSensorsFunction+0x3c>)
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <pollSensorsFunction+0x40>)
 8002598:	4808      	ldr	r0, [pc, #32]	; (80025bc <pollSensorsFunction+0x44>)
 800259a:	f7fe fd37 	bl	800100c <GPS_Poll>
	//myprintf("IN GPS: %f, %f, %f\r\n", latitude, longitude, time);
    osDelay(1000);
 800259e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025a2:	f008 fd69 	bl	800b078 <osDelay>
	get_acceleration(dev_ctx_lsm, acceleration);
 80025a6:	e7eb      	b.n	8002580 <pollSensorsFunction+0x8>
 80025a8:	200053b0 	.word	0x200053b0
 80025ac:	2000039c 	.word	0x2000039c
 80025b0:	200003a8 	.word	0x200003a8
 80025b4:	200052d8 	.word	0x200052d8
 80025b8:	200052d4 	.word	0x200052d4
 80025bc:	20005364 	.word	0x20005364

080025c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025d2:	f000 fc21 	bl	8002e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40001000 	.word	0x40001000

080025e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e8:	b672      	cpsid	i
}
 80025ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025ec:	e7fe      	b.n	80025ec <Error_Handler+0x8>
	...

080025f0 <myprintf>:
extern FIL fil;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 80025f0:	b40f      	push	{r0, r1, r2, r3}
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002606:	480a      	ldr	r0, [pc, #40]	; (8002630 <myprintf+0x40>)
 8002608:	f00d feec 	bl	80103e4 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, strlen(buffer), -1);
 800260c:	4808      	ldr	r0, [pc, #32]	; (8002630 <myprintf+0x40>)
 800260e:	f7fd fdef 	bl	80001f0 <strlen>
 8002612:	4603      	mov	r3, r0
 8002614:	b29a      	uxth	r2, r3
 8002616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800261a:	4905      	ldr	r1, [pc, #20]	; (8002630 <myprintf+0x40>)
 800261c:	4805      	ldr	r0, [pc, #20]	; (8002634 <myprintf+0x44>)
 800261e:	f005 f802 	bl	8007626 <HAL_UART_Transmit>

}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800262c:	b004      	add	sp, #16
 800262e:	4770      	bx	lr
 8002630:	200003b4 	.word	0x200003b4
 8002634:	200052dc 	.word	0x200052dc

08002638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_MspInit+0x54>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a11      	ldr	r2, [pc, #68]	; (800268c <HAL_MspInit+0x54>)
 8002648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b0f      	ldr	r3, [pc, #60]	; (800268c <HAL_MspInit+0x54>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_MspInit+0x54>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <HAL_MspInit+0x54>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_MspInit+0x54>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	210f      	movs	r1, #15
 800267a:	f06f 0001 	mvn.w	r0, #1
 800267e:	f000 ff39 	bl	80034f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800

08002690 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a17      	ldr	r2, [pc, #92]	; (800270c <HAL_ADC_MspInit+0x7c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d127      	bne.n	8002702 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_ADC_MspInit+0x80>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4a15      	ldr	r2, [pc, #84]	; (8002710 <HAL_ADC_MspInit+0x80>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c0:	6453      	str	r3, [r2, #68]	; 0x44
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_ADC_MspInit+0x80>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_ADC_MspInit+0x80>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <HAL_ADC_MspInit+0x80>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <HAL_ADC_MspInit+0x80>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026ea:	2340      	movs	r3, #64	; 0x40
 80026ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ee:	2303      	movs	r3, #3
 80026f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4619      	mov	r1, r3
 80026fc:	4805      	ldr	r0, [pc, #20]	; (8002714 <HAL_ADC_MspInit+0x84>)
 80026fe:	f000 ff23 	bl	8003548 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002702:	bf00      	nop
 8002704:	3728      	adds	r7, #40	; 0x28
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40012000 	.word	0x40012000
 8002710:	40023800 	.word	0x40023800
 8002714:	40020000 	.word	0x40020000

08002718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <HAL_I2C_MspInit+0xc4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d14b      	bne.n	80027d2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HAL_I2C_MspInit+0xc8>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a27      	ldr	r2, [pc, #156]	; (80027e0 <HAL_I2C_MspInit+0xc8>)
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_I2C_MspInit+0xc8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <HAL_I2C_MspInit+0xc8>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a20      	ldr	r2, [pc, #128]	; (80027e0 <HAL_I2C_MspInit+0xc8>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_I2C_MspInit+0xc8>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002778:	2312      	movs	r3, #18
 800277a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002784:	2304      	movs	r3, #4
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	4619      	mov	r1, r3
 800278e:	4815      	ldr	r0, [pc, #84]	; (80027e4 <HAL_I2C_MspInit+0xcc>)
 8002790:	f000 feda 	bl	8003548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800279a:	2312      	movs	r3, #18
 800279c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a2:	2303      	movs	r3, #3
 80027a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027a6:	2304      	movs	r3, #4
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	480d      	ldr	r0, [pc, #52]	; (80027e8 <HAL_I2C_MspInit+0xd0>)
 80027b2:	f000 fec9 	bl	8003548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_I2C_MspInit+0xc8>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a08      	ldr	r2, [pc, #32]	; (80027e0 <HAL_I2C_MspInit+0xc8>)
 80027c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_I2C_MspInit+0xc8>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	; 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40005c00 	.word	0x40005c00
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020800 	.word	0x40020800
 80027e8:	40020000 	.word	0x40020000

080027ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	; 0x30
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 031c 	add.w	r3, r7, #28
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a33      	ldr	r2, [pc, #204]	; (80028d8 <HAL_SPI_MspInit+0xec>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d12d      	bne.n	800286a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	4b32      	ldr	r3, [pc, #200]	; (80028dc <HAL_SPI_MspInit+0xf0>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	4a31      	ldr	r2, [pc, #196]	; (80028dc <HAL_SPI_MspInit+0xf0>)
 8002818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800281c:	6453      	str	r3, [r2, #68]	; 0x44
 800281e:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <HAL_SPI_MspInit+0xf0>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <HAL_SPI_MspInit+0xf0>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <HAL_SPI_MspInit+0xf0>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b28      	ldr	r3, [pc, #160]	; (80028dc <HAL_SPI_MspInit+0xf0>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002846:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800284a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002858:	2305      	movs	r3, #5
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	4619      	mov	r1, r3
 8002862:	481f      	ldr	r0, [pc, #124]	; (80028e0 <HAL_SPI_MspInit+0xf4>)
 8002864:	f000 fe70 	bl	8003548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002868:	e031      	b.n	80028ce <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI5)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_SPI_MspInit+0xf8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d12c      	bne.n	80028ce <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_SPI_MspInit+0xf0>)
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	4a17      	ldr	r2, [pc, #92]	; (80028dc <HAL_SPI_MspInit+0xf0>)
 800287e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002882:	6453      	str	r3, [r2, #68]	; 0x44
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <HAL_SPI_MspInit+0xf0>)
 8002886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_SPI_MspInit+0xf0>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	4a10      	ldr	r2, [pc, #64]	; (80028dc <HAL_SPI_MspInit+0xf0>)
 800289a:	f043 0320 	orr.w	r3, r3, #32
 800289e:	6313      	str	r3, [r2, #48]	; 0x30
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_SPI_MspInit+0xf0>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80028ac:	f44f 7360 	mov.w	r3, #896	; 0x380
 80028b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b6:	2301      	movs	r3, #1
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ba:	2303      	movs	r3, #3
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80028be:	2305      	movs	r3, #5
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028c2:	f107 031c 	add.w	r3, r7, #28
 80028c6:	4619      	mov	r1, r3
 80028c8:	4807      	ldr	r0, [pc, #28]	; (80028e8 <HAL_SPI_MspInit+0xfc>)
 80028ca:	f000 fe3d 	bl	8003548 <HAL_GPIO_Init>
}
 80028ce:	bf00      	nop
 80028d0:	3730      	adds	r7, #48	; 0x30
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40013400 	.word	0x40013400
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40015000 	.word	0x40015000
 80028e8:	40021400 	.word	0x40021400

080028ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d115      	bne.n	800292a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <HAL_TIM_Base_MspInit+0x48>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <HAL_TIM_Base_MspInit+0x48>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6413      	str	r3, [r2, #64]	; 0x40
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_TIM_Base_MspInit+0x48>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2105      	movs	r1, #5
 800291e:	201c      	movs	r0, #28
 8002920:	f000 fde8 	bl	80034f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002924:	201c      	movs	r0, #28
 8002926:	f000 fe01 	bl	800352c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002958:	d11d      	bne.n	8002996 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_TIM_MspPostInit+0x68>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <HAL_TIM_MspPostInit+0x68>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_TIM_MspPostInit+0x68>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002976:	2304      	movs	r3, #4
 8002978:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002986:	2301      	movs	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	4619      	mov	r1, r3
 8002990:	4804      	ldr	r0, [pc, #16]	; (80029a4 <HAL_TIM_MspPostInit+0x6c>)
 8002992:	f000 fdd9 	bl	8003548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002996:	bf00      	nop
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020000 	.word	0x40020000

080029a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	; 0x30
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a32      	ldr	r2, [pc, #200]	; (8002a90 <HAL_UART_MspInit+0xe8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d12c      	bne.n	8002a24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_UART_MspInit+0xec>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a30      	ldr	r2, [pc, #192]	; (8002a94 <HAL_UART_MspInit+0xec>)
 80029d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b2e      	ldr	r3, [pc, #184]	; (8002a94 <HAL_UART_MspInit+0xec>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <HAL_UART_MspInit+0xec>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a29      	ldr	r2, [pc, #164]	; (8002a94 <HAL_UART_MspInit+0xec>)
 80029f0:	f043 0310 	orr.w	r3, r3, #16
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b27      	ldr	r3, [pc, #156]	; (8002a94 <HAL_UART_MspInit+0xec>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a02:	2303      	movs	r3, #3
 8002a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002a12:	2308      	movs	r3, #8
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a16:	f107 031c 	add.w	r3, r7, #28
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	481e      	ldr	r0, [pc, #120]	; (8002a98 <HAL_UART_MspInit+0xf0>)
 8002a1e:	f000 fd93 	bl	8003548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a22:	e030      	b.n	8002a86 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1c      	ldr	r2, [pc, #112]	; (8002a9c <HAL_UART_MspInit+0xf4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d12b      	bne.n	8002a86 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <HAL_UART_MspInit+0xec>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a17      	ldr	r2, [pc, #92]	; (8002a94 <HAL_UART_MspInit+0xec>)
 8002a38:	f043 0320 	orr.w	r3, r3, #32
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_UART_MspInit+0xec>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <HAL_UART_MspInit+0xec>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a10      	ldr	r2, [pc, #64]	; (8002a94 <HAL_UART_MspInit+0xec>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <HAL_UART_MspInit+0xec>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a66:	23c0      	movs	r3, #192	; 0xc0
 8002a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a72:	2303      	movs	r3, #3
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a76:	2308      	movs	r3, #8
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7a:	f107 031c 	add.w	r3, r7, #28
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4807      	ldr	r0, [pc, #28]	; (8002aa0 <HAL_UART_MspInit+0xf8>)
 8002a82:	f000 fd61 	bl	8003548 <HAL_GPIO_Init>
}
 8002a86:	bf00      	nop
 8002a88:	3730      	adds	r7, #48	; 0x30
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40007c00 	.word	0x40007c00
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40011400 	.word	0x40011400
 8002aa0:	40020800 	.word	0x40020800

08002aa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	; 0x30
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	2036      	movs	r0, #54	; 0x36
 8002aba:	f000 fd1b 	bl	80034f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002abe:	2036      	movs	r0, #54	; 0x36
 8002ac0:	f000 fd34 	bl	800352c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	4b1f      	ldr	r3, [pc, #124]	; (8002b48 <HAL_InitTick+0xa4>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <HAL_InitTick+0xa4>)
 8002ace:	f043 0310 	orr.w	r3, r3, #16
 8002ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <HAL_InitTick+0xa4>)
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ae0:	f107 0210 	add.w	r2, r7, #16
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f003 fd46 	bl	800657c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002af0:	f003 fd1c 	bl	800652c <HAL_RCC_GetPCLK1Freq>
 8002af4:	4603      	mov	r3, r0
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <HAL_InitTick+0xa8>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9b      	lsrs	r3, r3, #18
 8002b04:	3b01      	subs	r3, #1
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_InitTick+0xac>)
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <HAL_InitTick+0xb0>)
 8002b0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_InitTick+0xac>)
 8002b10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b14:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_InitTick+0xac>)
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_InitTick+0xac>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_InitTick+0xac>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b28:	4809      	ldr	r0, [pc, #36]	; (8002b50 <HAL_InitTick+0xac>)
 8002b2a:	f003 fde2 	bl	80066f2 <HAL_TIM_Base_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d104      	bne.n	8002b3e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b34:	4806      	ldr	r0, [pc, #24]	; (8002b50 <HAL_InitTick+0xac>)
 8002b36:	f003 fe2b 	bl	8006790 <HAL_TIM_Base_Start_IT>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	e000      	b.n	8002b40 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3730      	adds	r7, #48	; 0x30
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	431bde83 	.word	0x431bde83
 8002b50:	200053c8 	.word	0x200053c8
 8002b54:	40001000 	.word	0x40001000

08002b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <NMI_Handler+0x4>

08002b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b62:	e7fe      	b.n	8002b62 <HardFault_Handler+0x4>

08002b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <MemManage_Handler+0x4>

08002b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b6e:	e7fe      	b.n	8002b6e <BusFault_Handler+0x4>

08002b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <UsageFault_Handler+0x4>

08002b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002b88:	2001      	movs	r0, #1
 8002b8a:	f000 fea3 	bl	80038d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b98:	4802      	ldr	r0, [pc, #8]	; (8002ba4 <TIM2_IRQHandler+0x10>)
 8002b9a:	f003 fec2 	bl	8006922 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20005368 	.word	0x20005368

08002ba8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bac:	4802      	ldr	r0, [pc, #8]	; (8002bb8 <TIM6_DAC_IRQHandler+0x10>)
 8002bae:	f003 feb8 	bl	8006922 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	200053c8 	.word	0x200053c8

08002bbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002bc0:	4802      	ldr	r0, [pc, #8]	; (8002bcc <OTG_FS_IRQHandler+0x10>)
 8002bc2:	f002 f835 	bl	8004c30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20006d90 	.word	0x20006d90

08002bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
	return 1;
 8002bd4:	2301      	movs	r3, #1
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <_kill>:

int _kill(int pid, int sig)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bea:	f00b fbe9 	bl	800e3c0 <__errno>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2216      	movs	r2, #22
 8002bf2:	601a      	str	r2, [r3, #0]
	return -1;
 8002bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_exit>:

void _exit (int status)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ffe7 	bl	8002be0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c12:	e7fe      	b.n	8002c12 <_exit+0x12>

08002c14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	e00a      	b.n	8002c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c26:	f3af 8000 	nop.w
 8002c2a:	4601      	mov	r1, r0
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	60ba      	str	r2, [r7, #8]
 8002c32:	b2ca      	uxtb	r2, r1
 8002c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	dbf0      	blt.n	8002c26 <_read+0x12>
	}

return len;
 8002c44:	687b      	ldr	r3, [r7, #4]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	e009      	b.n	8002c74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	60ba      	str	r2, [r7, #8]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	dbf1      	blt.n	8002c60 <_write+0x12>
	}
	return len;
 8002c7c:	687b      	ldr	r3, [r7, #4]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_close>:

int _close(int file)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cae:	605a      	str	r2, [r3, #4]
	return 0;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <_isatty>:

int _isatty(int file)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8002cc6:	2301      	movs	r3, #1
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
	return 0;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <_sbrk+0x5c>)
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <_sbrk+0x60>)
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <_sbrk+0x64>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <_sbrk+0x64>)
 8002d0e:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <_sbrk+0x68>)
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <_sbrk+0x64>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d207      	bcs.n	8002d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d20:	f00b fb4e 	bl	800e3c0 <__errno>
 8002d24:	4603      	mov	r3, r0
 8002d26:	220c      	movs	r2, #12
 8002d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d2e:	e009      	b.n	8002d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <_sbrk+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <_sbrk+0x64>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <_sbrk+0x64>)
 8002d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20030000 	.word	0x20030000
 8002d50:	00000400 	.word	0x00000400
 8002d54:	200004b4 	.word	0x200004b4
 8002d58:	200071a8 	.word	0x200071a8

08002d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <SystemInit+0x20>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <SystemInit+0x20>)
 8002d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d84:	480d      	ldr	r0, [pc, #52]	; (8002dbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d86:	490e      	ldr	r1, [pc, #56]	; (8002dc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d88:	4a0e      	ldr	r2, [pc, #56]	; (8002dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d8c:	e002      	b.n	8002d94 <LoopCopyDataInit>

08002d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d92:	3304      	adds	r3, #4

08002d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d98:	d3f9      	bcc.n	8002d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d9c:	4c0b      	ldr	r4, [pc, #44]	; (8002dcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da0:	e001      	b.n	8002da6 <LoopFillZerobss>

08002da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da4:	3204      	adds	r2, #4

08002da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da8:	d3fb      	bcc.n	8002da2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002daa:	f7ff ffd7 	bl	8002d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dae:	f00b fc03 	bl	800e5b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002db2:	f7fe ffe3 	bl	8001d7c <main>
  bx  lr    
 8002db6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002db8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dc0:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 8002dc4:	08013cec 	.word	0x08013cec
  ldr r2, =_sbss
 8002dc8:	2000036c 	.word	0x2000036c
  ldr r4, =_ebss
 8002dcc:	200071a8 	.word	0x200071a8

08002dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dd0:	e7fe      	b.n	8002dd0 <ADC_IRQHandler>
	...

08002dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <HAL_Init+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	; (8002e14 <HAL_Init+0x40>)
 8002dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_Init+0x40>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <HAL_Init+0x40>)
 8002dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <HAL_Init+0x40>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <HAL_Init+0x40>)
 8002df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dfc:	2003      	movs	r0, #3
 8002dfe:	f000 fb6e 	bl	80034de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e02:	200f      	movs	r0, #15
 8002e04:	f7ff fe4e 	bl	8002aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e08:	f7ff fc16 	bl	8002638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023c00 	.word	0x40023c00

08002e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_IncTick+0x20>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_IncTick+0x24>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4413      	add	r3, r2
 8002e28:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <HAL_IncTick+0x24>)
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000008 	.word	0x20000008
 8002e3c:	20005410 	.word	0x20005410

08002e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return uwTick;
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_GetTick+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20005410 	.word	0x20005410

08002e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e60:	f7ff ffee 	bl	8002e40 <HAL_GetTick>
 8002e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e70:	d005      	beq.n	8002e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e72:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <HAL_Delay+0x44>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e7e:	bf00      	nop
 8002e80:	f7ff ffde 	bl	8002e40 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d8f7      	bhi.n	8002e80 <HAL_Delay+0x28>
  {
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000008 	.word	0x20000008

08002ea0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e033      	b.n	8002f1e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff fbe6 	bl	8002690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d118      	bne.n	8002f10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ee6:	f023 0302 	bic.w	r3, r3, #2
 8002eea:	f043 0202 	orr.w	r2, r3, #2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f94a 	bl	800318c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f0e:	e001      	b.n	8002f14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x1c>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e113      	b.n	800316c <HAL_ADC_ConfigChannel+0x244>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b09      	cmp	r3, #9
 8002f52:	d925      	bls.n	8002fa0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68d9      	ldr	r1, [r3, #12]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	3b1e      	subs	r3, #30
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43da      	mvns	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	400a      	ands	r2, r1
 8002f78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68d9      	ldr	r1, [r3, #12]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4403      	add	r3, r0
 8002f92:	3b1e      	subs	r3, #30
 8002f94:	409a      	lsls	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	e022      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6919      	ldr	r1, [r3, #16]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6919      	ldr	r1, [r3, #16]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4403      	add	r3, r0
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d824      	bhi.n	8003038 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3b05      	subs	r3, #5
 8003000:	221f      	movs	r2, #31
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43da      	mvns	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	400a      	ands	r2, r1
 800300e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	4618      	mov	r0, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	3b05      	subs	r3, #5
 800302a:	fa00 f203 	lsl.w	r2, r0, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	635a      	str	r2, [r3, #52]	; 0x34
 8003036:	e04c      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d824      	bhi.n	800308a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	3b23      	subs	r3, #35	; 0x23
 8003052:	221f      	movs	r2, #31
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43da      	mvns	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	400a      	ands	r2, r1
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	4618      	mov	r0, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	3b23      	subs	r3, #35	; 0x23
 800307c:	fa00 f203 	lsl.w	r2, r0, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
 8003088:	e023      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	3b41      	subs	r3, #65	; 0x41
 800309c:	221f      	movs	r2, #31
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	400a      	ands	r2, r1
 80030aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4618      	mov	r0, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	3b41      	subs	r3, #65	; 0x41
 80030c6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030d2:	4b29      	ldr	r3, [pc, #164]	; (8003178 <HAL_ADC_ConfigChannel+0x250>)
 80030d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a28      	ldr	r2, [pc, #160]	; (800317c <HAL_ADC_ConfigChannel+0x254>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d10f      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x1d8>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b12      	cmp	r3, #18
 80030e6:	d10b      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1d      	ldr	r2, [pc, #116]	; (800317c <HAL_ADC_ConfigChannel+0x254>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d12b      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x23a>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <HAL_ADC_ConfigChannel+0x258>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <HAL_ADC_ConfigChannel+0x1f4>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b11      	cmp	r3, #17
 800311a:	d122      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a11      	ldr	r2, [pc, #68]	; (8003180 <HAL_ADC_ConfigChannel+0x258>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d111      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_ADC_ConfigChannel+0x25c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a11      	ldr	r2, [pc, #68]	; (8003188 <HAL_ADC_ConfigChannel+0x260>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	0c9a      	lsrs	r2, r3, #18
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003154:	e002      	b.n	800315c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	3b01      	subs	r3, #1
 800315a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f9      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	40012300 	.word	0x40012300
 800317c:	40012000 	.word	0x40012000
 8003180:	10000012 	.word	0x10000012
 8003184:	20000000 	.word	0x20000000
 8003188:	431bde83 	.word	0x431bde83

0800318c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003194:	4b79      	ldr	r3, [pc, #484]	; (800337c <ADC_Init+0x1f0>)
 8003196:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	021a      	lsls	r2, r3, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6899      	ldr	r1, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	4a58      	ldr	r2, [pc, #352]	; (8003380 <ADC_Init+0x1f4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003232:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6899      	ldr	r1, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6899      	ldr	r1, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	e00f      	b.n	800328a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003278:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003288:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0202 	bic.w	r2, r2, #2
 8003298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6899      	ldr	r1, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7e1b      	ldrb	r3, [r3, #24]
 80032a4:	005a      	lsls	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01b      	beq.n	80032f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	3b01      	subs	r3, #1
 80032e4:	035a      	lsls	r2, r3, #13
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	e007      	b.n	8003300 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	3b01      	subs	r3, #1
 800331c:	051a      	lsls	r2, r3, #20
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6899      	ldr	r1, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003342:	025a      	lsls	r2, r3, #9
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6899      	ldr	r1, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	029a      	lsls	r2, r3, #10
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	40012300 	.word	0x40012300
 8003380:	0f000001 	.word	0x0f000001

08003384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a0:	4013      	ands	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b6:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60d3      	str	r3, [r2, #12]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <__NVIC_GetPriorityGrouping+0x18>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 0307 	and.w	r3, r3, #7
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	db0b      	blt.n	8003412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <__NVIC_EnableIRQ+0x38>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2001      	movs	r0, #1
 800340a:	fa00 f202 	lsl.w	r2, r0, r2
 800340e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	e000e100 	.word	0xe000e100

08003424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	db0a      	blt.n	800344e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <__NVIC_SetPriority+0x4c>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	440b      	add	r3, r1
 8003448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800344c:	e00a      	b.n	8003464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4908      	ldr	r1, [pc, #32]	; (8003474 <__NVIC_SetPriority+0x50>)
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3b04      	subs	r3, #4
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	440b      	add	r3, r1
 8003462:	761a      	strb	r2, [r3, #24]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000e100 	.word	0xe000e100
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f1c3 0307 	rsb	r3, r3, #7
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf28      	it	cs
 8003496:	2304      	movcs	r3, #4
 8003498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3304      	adds	r3, #4
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d902      	bls.n	80034a8 <NVIC_EncodePriority+0x30>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3b03      	subs	r3, #3
 80034a6:	e000      	b.n	80034aa <NVIC_EncodePriority+0x32>
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	401a      	ands	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43d9      	mvns	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	4313      	orrs	r3, r2
         );
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ff4c 	bl	8003384 <__NVIC_SetPriorityGrouping>
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003506:	f7ff ff61 	bl	80033cc <__NVIC_GetPriorityGrouping>
 800350a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	6978      	ldr	r0, [r7, #20]
 8003512:	f7ff ffb1 	bl	8003478 <NVIC_EncodePriority>
 8003516:	4602      	mov	r2, r0
 8003518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ff80 	bl	8003424 <__NVIC_SetPriority>
}
 8003524:	bf00      	nop
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ff54 	bl	80033e8 <__NVIC_EnableIRQ>
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	; 0x24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	e177      	b.n	8003854 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003564:	2201      	movs	r2, #1
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	429a      	cmp	r2, r3
 800357e:	f040 8166 	bne.w	800384e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d005      	beq.n	800359a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003596:	2b02      	cmp	r3, #2
 8003598:	d130      	bne.n	80035fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	2203      	movs	r2, #3
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035d0:	2201      	movs	r2, #1
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	091b      	lsrs	r3, r3, #4
 80035e6:	f003 0201 	and.w	r2, r3, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b03      	cmp	r3, #3
 8003606:	d017      	beq.n	8003638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d123      	bne.n	800368c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	08da      	lsrs	r2, r3, #3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3208      	adds	r2, #8
 800364c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	220f      	movs	r2, #15
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	08da      	lsrs	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	69b9      	ldr	r1, [r7, #24]
 8003688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	2203      	movs	r2, #3
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0203 	and.w	r2, r3, #3
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80c0 	beq.w	800384e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	4b66      	ldr	r3, [pc, #408]	; (800386c <HAL_GPIO_Init+0x324>)
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	4a65      	ldr	r2, [pc, #404]	; (800386c <HAL_GPIO_Init+0x324>)
 80036d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036dc:	6453      	str	r3, [r2, #68]	; 0x44
 80036de:	4b63      	ldr	r3, [pc, #396]	; (800386c <HAL_GPIO_Init+0x324>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ea:	4a61      	ldr	r2, [pc, #388]	; (8003870 <HAL_GPIO_Init+0x328>)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	089b      	lsrs	r3, r3, #2
 80036f0:	3302      	adds	r3, #2
 80036f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	220f      	movs	r2, #15
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4013      	ands	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a58      	ldr	r2, [pc, #352]	; (8003874 <HAL_GPIO_Init+0x32c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d037      	beq.n	8003786 <HAL_GPIO_Init+0x23e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a57      	ldr	r2, [pc, #348]	; (8003878 <HAL_GPIO_Init+0x330>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d031      	beq.n	8003782 <HAL_GPIO_Init+0x23a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a56      	ldr	r2, [pc, #344]	; (800387c <HAL_GPIO_Init+0x334>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d02b      	beq.n	800377e <HAL_GPIO_Init+0x236>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a55      	ldr	r2, [pc, #340]	; (8003880 <HAL_GPIO_Init+0x338>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d025      	beq.n	800377a <HAL_GPIO_Init+0x232>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a54      	ldr	r2, [pc, #336]	; (8003884 <HAL_GPIO_Init+0x33c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01f      	beq.n	8003776 <HAL_GPIO_Init+0x22e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a53      	ldr	r2, [pc, #332]	; (8003888 <HAL_GPIO_Init+0x340>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d019      	beq.n	8003772 <HAL_GPIO_Init+0x22a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a52      	ldr	r2, [pc, #328]	; (800388c <HAL_GPIO_Init+0x344>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_GPIO_Init+0x226>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a51      	ldr	r2, [pc, #324]	; (8003890 <HAL_GPIO_Init+0x348>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00d      	beq.n	800376a <HAL_GPIO_Init+0x222>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a50      	ldr	r2, [pc, #320]	; (8003894 <HAL_GPIO_Init+0x34c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d007      	beq.n	8003766 <HAL_GPIO_Init+0x21e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a4f      	ldr	r2, [pc, #316]	; (8003898 <HAL_GPIO_Init+0x350>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_GPIO_Init+0x21a>
 800375e:	2309      	movs	r3, #9
 8003760:	e012      	b.n	8003788 <HAL_GPIO_Init+0x240>
 8003762:	230a      	movs	r3, #10
 8003764:	e010      	b.n	8003788 <HAL_GPIO_Init+0x240>
 8003766:	2308      	movs	r3, #8
 8003768:	e00e      	b.n	8003788 <HAL_GPIO_Init+0x240>
 800376a:	2307      	movs	r3, #7
 800376c:	e00c      	b.n	8003788 <HAL_GPIO_Init+0x240>
 800376e:	2306      	movs	r3, #6
 8003770:	e00a      	b.n	8003788 <HAL_GPIO_Init+0x240>
 8003772:	2305      	movs	r3, #5
 8003774:	e008      	b.n	8003788 <HAL_GPIO_Init+0x240>
 8003776:	2304      	movs	r3, #4
 8003778:	e006      	b.n	8003788 <HAL_GPIO_Init+0x240>
 800377a:	2303      	movs	r3, #3
 800377c:	e004      	b.n	8003788 <HAL_GPIO_Init+0x240>
 800377e:	2302      	movs	r3, #2
 8003780:	e002      	b.n	8003788 <HAL_GPIO_Init+0x240>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_GPIO_Init+0x240>
 8003786:	2300      	movs	r3, #0
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	f002 0203 	and.w	r2, r2, #3
 800378e:	0092      	lsls	r2, r2, #2
 8003790:	4093      	lsls	r3, r2
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003798:	4935      	ldr	r1, [pc, #212]	; (8003870 <HAL_GPIO_Init+0x328>)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	089b      	lsrs	r3, r3, #2
 800379e:	3302      	adds	r3, #2
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a6:	4b3d      	ldr	r3, [pc, #244]	; (800389c <HAL_GPIO_Init+0x354>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037ca:	4a34      	ldr	r2, [pc, #208]	; (800389c <HAL_GPIO_Init+0x354>)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037d0:	4b32      	ldr	r3, [pc, #200]	; (800389c <HAL_GPIO_Init+0x354>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037f4:	4a29      	ldr	r2, [pc, #164]	; (800389c <HAL_GPIO_Init+0x354>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037fa:	4b28      	ldr	r3, [pc, #160]	; (800389c <HAL_GPIO_Init+0x354>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800381e:	4a1f      	ldr	r2, [pc, #124]	; (800389c <HAL_GPIO_Init+0x354>)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <HAL_GPIO_Init+0x354>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003848:	4a14      	ldr	r2, [pc, #80]	; (800389c <HAL_GPIO_Init+0x354>)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3301      	adds	r3, #1
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b0f      	cmp	r3, #15
 8003858:	f67f ae84 	bls.w	8003564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	3724      	adds	r7, #36	; 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	40013800 	.word	0x40013800
 8003874:	40020000 	.word	0x40020000
 8003878:	40020400 	.word	0x40020400
 800387c:	40020800 	.word	0x40020800
 8003880:	40020c00 	.word	0x40020c00
 8003884:	40021000 	.word	0x40021000
 8003888:	40021400 	.word	0x40021400
 800388c:	40021800 	.word	0x40021800
 8003890:	40021c00 	.word	0x40021c00
 8003894:	40022000 	.word	0x40022000
 8003898:	40022400 	.word	0x40022400
 800389c:	40013c00 	.word	0x40013c00

080038a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
 80038ac:	4613      	mov	r3, r2
 80038ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b0:	787b      	ldrb	r3, [r7, #1]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038bc:	e003      	b.n	80038c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038be:	887b      	ldrh	r3, [r7, #2]
 80038c0:	041a      	lsls	r2, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	619a      	str	r2, [r3, #24]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d006      	beq.n	80038f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ea:	4a05      	ldr	r2, [pc, #20]	; (8003900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f806 	bl	8003904 <HAL_GPIO_EXTI_Callback>
  }
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40013c00 	.word	0x40013c00

08003904 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e12b      	b.n	8003b86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fe fee8 	bl	8002718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800396e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800397e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003980:	f002 fdd4 	bl	800652c <HAL_RCC_GetPCLK1Freq>
 8003984:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4a81      	ldr	r2, [pc, #516]	; (8003b90 <HAL_I2C_Init+0x274>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d807      	bhi.n	80039a0 <HAL_I2C_Init+0x84>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4a80      	ldr	r2, [pc, #512]	; (8003b94 <HAL_I2C_Init+0x278>)
 8003994:	4293      	cmp	r3, r2
 8003996:	bf94      	ite	ls
 8003998:	2301      	movls	r3, #1
 800399a:	2300      	movhi	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	e006      	b.n	80039ae <HAL_I2C_Init+0x92>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a7d      	ldr	r2, [pc, #500]	; (8003b98 <HAL_I2C_Init+0x27c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	bf94      	ite	ls
 80039a8:	2301      	movls	r3, #1
 80039aa:	2300      	movhi	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e0e7      	b.n	8003b86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a78      	ldr	r2, [pc, #480]	; (8003b9c <HAL_I2C_Init+0x280>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	0c9b      	lsrs	r3, r3, #18
 80039c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4a6a      	ldr	r2, [pc, #424]	; (8003b90 <HAL_I2C_Init+0x274>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d802      	bhi.n	80039f0 <HAL_I2C_Init+0xd4>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	3301      	adds	r3, #1
 80039ee:	e009      	b.n	8003a04 <HAL_I2C_Init+0xe8>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	4a69      	ldr	r2, [pc, #420]	; (8003ba0 <HAL_I2C_Init+0x284>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	099b      	lsrs	r3, r3, #6
 8003a02:	3301      	adds	r3, #1
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	495c      	ldr	r1, [pc, #368]	; (8003b90 <HAL_I2C_Init+0x274>)
 8003a20:	428b      	cmp	r3, r1
 8003a22:	d819      	bhi.n	8003a58 <HAL_I2C_Init+0x13c>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1e59      	subs	r1, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a32:	1c59      	adds	r1, r3, #1
 8003a34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a38:	400b      	ands	r3, r1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_I2C_Init+0x138>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1e59      	subs	r1, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a52:	e051      	b.n	8003af8 <HAL_I2C_Init+0x1dc>
 8003a54:	2304      	movs	r3, #4
 8003a56:	e04f      	b.n	8003af8 <HAL_I2C_Init+0x1dc>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d111      	bne.n	8003a84 <HAL_I2C_Init+0x168>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1e58      	subs	r0, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	440b      	add	r3, r1
 8003a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	e012      	b.n	8003aaa <HAL_I2C_Init+0x18e>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1e58      	subs	r0, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	0099      	lsls	r1, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_I2C_Init+0x196>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e022      	b.n	8003af8 <HAL_I2C_Init+0x1dc>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10e      	bne.n	8003ad8 <HAL_I2C_Init+0x1bc>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1e58      	subs	r0, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6859      	ldr	r1, [r3, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	440b      	add	r3, r1
 8003ac8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003acc:	3301      	adds	r3, #1
 8003ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad6:	e00f      	b.n	8003af8 <HAL_I2C_Init+0x1dc>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1e58      	subs	r0, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	0099      	lsls	r1, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	6809      	ldr	r1, [r1, #0]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6911      	ldr	r1, [r2, #16]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	68d2      	ldr	r2, [r2, #12]
 8003b32:	4311      	orrs	r1, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	000186a0 	.word	0x000186a0
 8003b94:	001e847f 	.word	0x001e847f
 8003b98:	003d08ff 	.word	0x003d08ff
 8003b9c:	431bde83 	.word	0x431bde83
 8003ba0:	10624dd3 	.word	0x10624dd3

08003ba4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	4608      	mov	r0, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	817b      	strh	r3, [r7, #10]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	813b      	strh	r3, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bbe:	f7ff f93f 	bl	8002e40 <HAL_GetTick>
 8003bc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	f040 80d9 	bne.w	8003d84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	2319      	movs	r3, #25
 8003bd8:	2201      	movs	r2, #1
 8003bda:	496d      	ldr	r1, [pc, #436]	; (8003d90 <HAL_I2C_Mem_Write+0x1ec>)
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 fc7f 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
 8003bea:	e0cc      	b.n	8003d86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_I2C_Mem_Write+0x56>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e0c5      	b.n	8003d86 <HAL_I2C_Mem_Write+0x1e2>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d007      	beq.n	8003c20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2221      	movs	r2, #33	; 0x21
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2240      	movs	r2, #64	; 0x40
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a3a      	ldr	r2, [r7, #32]
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a4d      	ldr	r2, [pc, #308]	; (8003d94 <HAL_I2C_Mem_Write+0x1f0>)
 8003c60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c62:	88f8      	ldrh	r0, [r7, #6]
 8003c64:	893a      	ldrh	r2, [r7, #8]
 8003c66:	8979      	ldrh	r1, [r7, #10]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	4603      	mov	r3, r0
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 fab6 	bl	80041e4 <I2C_RequestMemoryWrite>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d052      	beq.n	8003d24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e081      	b.n	8003d86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fd00 	bl	800468c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d107      	bne.n	8003caa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e06b      	b.n	8003d86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d11b      	bne.n	8003d24 <HAL_I2C_Mem_Write+0x180>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d017      	beq.n	8003d24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1aa      	bne.n	8003c82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fcec 	bl	800470e <I2C_WaitOnBTFFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00d      	beq.n	8003d58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d107      	bne.n	8003d54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e016      	b.n	8003d86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e000      	b.n	8003d86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
  }
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	00100002 	.word	0x00100002
 8003d94:	ffff0000 	.word	0xffff0000

08003d98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08c      	sub	sp, #48	; 0x30
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	4608      	mov	r0, r1
 8003da2:	4611      	mov	r1, r2
 8003da4:	461a      	mov	r2, r3
 8003da6:	4603      	mov	r3, r0
 8003da8:	817b      	strh	r3, [r7, #10]
 8003daa:	460b      	mov	r3, r1
 8003dac:	813b      	strh	r3, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003db2:	f7ff f845 	bl	8002e40 <HAL_GetTick>
 8003db6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	f040 8208 	bne.w	80041d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	2319      	movs	r3, #25
 8003dcc:	2201      	movs	r2, #1
 8003dce:	497b      	ldr	r1, [pc, #492]	; (8003fbc <HAL_I2C_Mem_Read+0x224>)
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fb85 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e1fb      	b.n	80041d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_I2C_Mem_Read+0x56>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e1f4      	b.n	80041d8 <HAL_I2C_Mem_Read+0x440>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d007      	beq.n	8003e14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2222      	movs	r2, #34	; 0x22
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2240      	movs	r2, #64	; 0x40
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a5b      	ldr	r2, [pc, #364]	; (8003fc0 <HAL_I2C_Mem_Read+0x228>)
 8003e54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e56:	88f8      	ldrh	r0, [r7, #6]
 8003e58:	893a      	ldrh	r2, [r7, #8]
 8003e5a:	8979      	ldrh	r1, [r7, #10]
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	4603      	mov	r3, r0
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fa52 	bl	8004310 <I2C_RequestMemoryRead>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e1b0      	b.n	80041d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d113      	bne.n	8003ea6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	623b      	str	r3, [r7, #32]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	623b      	str	r3, [r7, #32]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	623b      	str	r3, [r7, #32]
 8003e92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	e184      	b.n	80041b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d11b      	bne.n	8003ee6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e164      	b.n	80041b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d11b      	bne.n	8003f26 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	e144      	b.n	80041b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f3c:	e138      	b.n	80041b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	f200 80f1 	bhi.w	800412a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d123      	bne.n	8003f98 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fc1b 	bl	8004790 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e139      	b.n	80041d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f96:	e10b      	b.n	80041b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d14e      	bne.n	800403e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	4906      	ldr	r1, [pc, #24]	; (8003fc4 <HAL_I2C_Mem_Read+0x22c>)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fa98 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e10e      	b.n	80041d8 <HAL_I2C_Mem_Read+0x440>
 8003fba:	bf00      	nop
 8003fbc:	00100002 	.word	0x00100002
 8003fc0:	ffff0000 	.word	0xffff0000
 8003fc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800403c:	e0b8      	b.n	80041b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	2200      	movs	r2, #0
 8004046:	4966      	ldr	r1, [pc, #408]	; (80041e0 <HAL_I2C_Mem_Read+0x448>)
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fa49 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0bf      	b.n	80041d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004066:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a0:	2200      	movs	r2, #0
 80040a2:	494f      	ldr	r1, [pc, #316]	; (80041e0 <HAL_I2C_Mem_Read+0x448>)
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fa1b 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e091      	b.n	80041d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004128:	e042      	b.n	80041b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fb2e 	bl	8004790 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e04c      	b.n	80041d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b04      	cmp	r3, #4
 800417c:	d118      	bne.n	80041b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f47f aec2 	bne.w	8003f3e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e000      	b.n	80041d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80041d6:	2302      	movs	r3, #2
  }
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3728      	adds	r7, #40	; 0x28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	00010004 	.word	0x00010004

080041e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	461a      	mov	r2, r3
 80041f2:	4603      	mov	r3, r0
 80041f4:	817b      	strh	r3, [r7, #10]
 80041f6:	460b      	mov	r3, r1
 80041f8:	813b      	strh	r3, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800420c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	2200      	movs	r2, #0
 8004216:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f960 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004234:	d103      	bne.n	800423e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e05f      	b.n	8004302 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004242:	897b      	ldrh	r3, [r7, #10]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004250:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	6a3a      	ldr	r2, [r7, #32]
 8004256:	492d      	ldr	r1, [pc, #180]	; (800430c <I2C_RequestMemoryWrite+0x128>)
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f998 	bl	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e04c      	b.n	8004302 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800427e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004280:	6a39      	ldr	r1, [r7, #32]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fa02 	bl	800468c <I2C_WaitOnTXEFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00d      	beq.n	80042aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	2b04      	cmp	r3, #4
 8004294:	d107      	bne.n	80042a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e02b      	b.n	8004302 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d105      	bne.n	80042bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042b0:	893b      	ldrh	r3, [r7, #8]
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	611a      	str	r2, [r3, #16]
 80042ba:	e021      	b.n	8004300 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042bc:	893b      	ldrh	r3, [r7, #8]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	6a39      	ldr	r1, [r7, #32]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f9dc 	bl	800468c <I2C_WaitOnTXEFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00d      	beq.n	80042f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d107      	bne.n	80042f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e005      	b.n	8004302 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042f6:	893b      	ldrh	r3, [r7, #8]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	00010002 	.word	0x00010002

08004310 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4603      	mov	r3, r0
 8004320:	817b      	strh	r3, [r7, #10]
 8004322:	460b      	mov	r3, r1
 8004324:	813b      	strh	r3, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004338:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004348:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	2200      	movs	r2, #0
 8004352:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f8c2 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004370:	d103      	bne.n	800437a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e0aa      	b.n	80044d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800437e:	897b      	ldrh	r3, [r7, #10]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800438c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	6a3a      	ldr	r2, [r7, #32]
 8004392:	4952      	ldr	r1, [pc, #328]	; (80044dc <I2C_RequestMemoryRead+0x1cc>)
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f8fa 	bl	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e097      	b.n	80044d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043bc:	6a39      	ldr	r1, [r7, #32]
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f964 	bl	800468c <I2C_WaitOnTXEFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00d      	beq.n	80043e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d107      	bne.n	80043e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e076      	b.n	80044d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d105      	bne.n	80043f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043ec:	893b      	ldrh	r3, [r7, #8]
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	611a      	str	r2, [r3, #16]
 80043f6:	e021      	b.n	800443c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043f8:	893b      	ldrh	r3, [r7, #8]
 80043fa:	0a1b      	lsrs	r3, r3, #8
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004408:	6a39      	ldr	r1, [r7, #32]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f93e 	bl	800468c <I2C_WaitOnTXEFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00d      	beq.n	8004432 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	2b04      	cmp	r3, #4
 800441c:	d107      	bne.n	800442e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e050      	b.n	80044d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004432:	893b      	ldrh	r3, [r7, #8]
 8004434:	b2da      	uxtb	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800443c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443e:	6a39      	ldr	r1, [r7, #32]
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f923 	bl	800468c <I2C_WaitOnTXEFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00d      	beq.n	8004468 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2b04      	cmp	r3, #4
 8004452:	d107      	bne.n	8004464 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004462:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e035      	b.n	80044d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004476:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	2200      	movs	r2, #0
 8004480:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f82b 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00d      	beq.n	80044ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449e:	d103      	bne.n	80044a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e013      	b.n	80044d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044ac:	897b      	ldrh	r3, [r7, #10]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	6a3a      	ldr	r2, [r7, #32]
 80044c0:	4906      	ldr	r1, [pc, #24]	; (80044dc <I2C_RequestMemoryRead+0x1cc>)
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f863 	bl	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	00010002 	.word	0x00010002

080044e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044f0:	e025      	b.n	800453e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f8:	d021      	beq.n	800453e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fa:	f7fe fca1 	bl	8002e40 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d302      	bcc.n	8004510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d116      	bne.n	800453e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f043 0220 	orr.w	r2, r3, #32
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e023      	b.n	8004586 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	0c1b      	lsrs	r3, r3, #16
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d10d      	bne.n	8004564 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	43da      	mvns	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	bf0c      	ite	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	2300      	movne	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	e00c      	b.n	800457e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	43da      	mvns	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4013      	ands	r3, r2
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	429a      	cmp	r2, r3
 8004582:	d0b6      	beq.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800459c:	e051      	b.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ac:	d123      	bne.n	80045f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f043 0204 	orr.w	r2, r3, #4
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e046      	b.n	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045fc:	d021      	beq.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fe:	f7fe fc1f 	bl	8002e40 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d116      	bne.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f043 0220 	orr.w	r2, r3, #32
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e020      	b.n	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10c      	bne.n	8004666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	43da      	mvns	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4013      	ands	r3, r2
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	e00b      	b.n	800467e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	43da      	mvns	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4013      	ands	r3, r2
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d18d      	bne.n	800459e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004698:	e02d      	b.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f8ce 	bl	800483c <I2C_IsAcknowledgeFailed>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e02d      	b.n	8004706 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b0:	d021      	beq.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	f7fe fbc5 	bl	8002e40 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d116      	bne.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f043 0220 	orr.w	r2, r3, #32
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e007      	b.n	8004706 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004700:	2b80      	cmp	r3, #128	; 0x80
 8004702:	d1ca      	bne.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800471a:	e02d      	b.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f88d 	bl	800483c <I2C_IsAcknowledgeFailed>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e02d      	b.n	8004788 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004732:	d021      	beq.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004734:	f7fe fb84 	bl	8002e40 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	d302      	bcc.n	800474a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d116      	bne.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e007      	b.n	8004788 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b04      	cmp	r3, #4
 8004784:	d1ca      	bne.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800479c:	e042      	b.n	8004824 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d119      	bne.n	80047e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0210 	mvn.w	r2, #16
 80047b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e029      	b.n	8004834 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e0:	f7fe fb2e 	bl	8002e40 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d302      	bcc.n	80047f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d116      	bne.n	8004824 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	f043 0220 	orr.w	r2, r3, #32
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e007      	b.n	8004834 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	d1b5      	bne.n	800479e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004852:	d11b      	bne.n	800488c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800485c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	f043 0204 	orr.w	r2, r3, #4
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d129      	bne.n	8004904 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2224      	movs	r2, #36	; 0x24
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0210 	bic.w	r2, r2, #16
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	e000      	b.n	8004906 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b20      	cmp	r3, #32
 800492a:	d12a      	bne.n	8004982 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2224      	movs	r2, #36	; 0x24
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0201 	bic.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800494c:	89fb      	ldrh	r3, [r7, #14]
 800494e:	f023 030f 	bic.w	r3, r3, #15
 8004952:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	b29a      	uxth	r2, r3
 8004958:	89fb      	ldrh	r3, [r7, #14]
 800495a:	4313      	orrs	r3, r2
 800495c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	89fa      	ldrh	r2, [r7, #14]
 8004964:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0201 	orr.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004992:	b08f      	sub	sp, #60	; 0x3c
 8004994:	af0a      	add	r7, sp, #40	; 0x28
 8004996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e10f      	b.n	8004bc2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d106      	bne.n	80049c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f009 f9dd 	bl	800dd7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2203      	movs	r2, #3
 80049c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f003 faa0 	bl	8007f26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	687e      	ldr	r6, [r7, #4]
 80049ee:	466d      	mov	r5, sp
 80049f0:	f106 0410 	add.w	r4, r6, #16
 80049f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a00:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a04:	1d33      	adds	r3, r6, #4
 8004a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a08:	6838      	ldr	r0, [r7, #0]
 8004a0a:	f003 f977 	bl	8007cfc <USB_CoreInit>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0d0      	b.n	8004bc2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f003 fa8e 	bl	8007f48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	73fb      	strb	r3, [r7, #15]
 8004a30:	e04a      	b.n	8004ac8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a32:	7bfa      	ldrb	r2, [r7, #15]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	333d      	adds	r3, #61	; 0x3d
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a46:	7bfa      	ldrb	r2, [r7, #15]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	333c      	adds	r3, #60	; 0x3c
 8004a56:	7bfa      	ldrb	r2, [r7, #15]
 8004a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a5a:	7bfa      	ldrb	r2, [r7, #15]
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	b298      	uxth	r0, r3
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3342      	adds	r3, #66	; 0x42
 8004a6e:	4602      	mov	r2, r0
 8004a70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a72:	7bfa      	ldrb	r2, [r7, #15]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	333f      	adds	r3, #63	; 0x3f
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	3344      	adds	r3, #68	; 0x44
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a9a:	7bfa      	ldrb	r2, [r7, #15]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3348      	adds	r3, #72	; 0x48
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004aae:	7bfa      	ldrb	r2, [r7, #15]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	3350      	adds	r3, #80	; 0x50
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
 8004ac8:	7bfa      	ldrb	r2, [r7, #15]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d3af      	bcc.n	8004a32 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
 8004ad6:	e044      	b.n	8004b62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ad8:	7bfa      	ldrb	r2, [r7, #15]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004aee:	7bfa      	ldrb	r2, [r7, #15]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004b00:	7bfa      	ldrb	r2, [r7, #15]
 8004b02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b04:	7bfa      	ldrb	r2, [r7, #15]
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b1a:	7bfa      	ldrb	r2, [r7, #15]
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	440b      	add	r3, r1
 8004b28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b30:	7bfa      	ldrb	r2, [r7, #15]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b46:	7bfa      	ldrb	r2, [r7, #15]
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	73fb      	strb	r3, [r7, #15]
 8004b62:	7bfa      	ldrb	r2, [r7, #15]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d3b5      	bcc.n	8004ad8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	687e      	ldr	r6, [r7, #4]
 8004b74:	466d      	mov	r5, sp
 8004b76:	f106 0410 	add.w	r4, r6, #16
 8004b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b86:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b8a:	1d33      	adds	r3, r6, #4
 8004b8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b8e:	6838      	ldr	r0, [r7, #0]
 8004b90:	f003 fa26 	bl	8007fe0 <USB_DevInit>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e00d      	b.n	8004bc2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f004 faa2 	bl	8009104 <USB_DevDisconnect>

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_PCD_Start+0x1c>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e020      	b.n	8004c28 <HAL_PCD_Start+0x5e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d109      	bne.n	8004c0a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d005      	beq.n	8004c0a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f003 f978 	bl	8007f04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f004 fa52 	bl	80090c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b08d      	sub	sp, #52	; 0x34
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f004 fb10 	bl	800926c <USB_GetMode>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f040 839d 	bne.w	800538e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f004 fa74 	bl	8009146 <USB_ReadInterrupts>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8393 	beq.w	800538c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f004 fa6b 	bl	8009146 <USB_ReadInterrupts>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d107      	bne.n	8004c8a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f002 0202 	and.w	r2, r2, #2
 8004c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f004 fa59 	bl	8009146 <USB_ReadInterrupts>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d161      	bne.n	8004d62 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699a      	ldr	r2, [r3, #24]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0210 	bic.w	r2, r2, #16
 8004cac:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f003 020f 	and.w	r2, r3, #15
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4413      	add	r3, r2
 8004cca:	3304      	adds	r3, #4
 8004ccc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	0c5b      	lsrs	r3, r3, #17
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d124      	bne.n	8004d24 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d035      	beq.n	8004d52 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6a38      	ldr	r0, [r7, #32]
 8004cfa:	f004 f890 	bl	8008e1e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	091b      	lsrs	r3, r3, #4
 8004d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d0a:	441a      	add	r2, r3
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d1c:	441a      	add	r2, r3
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	619a      	str	r2, [r3, #24]
 8004d22:	e016      	b.n	8004d52 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	0c5b      	lsrs	r3, r3, #17
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	2b06      	cmp	r3, #6
 8004d2e:	d110      	bne.n	8004d52 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d36:	2208      	movs	r2, #8
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6a38      	ldr	r0, [r7, #32]
 8004d3c:	f004 f86f 	bl	8008e1e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	699a      	ldr	r2, [r3, #24]
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d4c:	441a      	add	r2, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699a      	ldr	r2, [r3, #24]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0210 	orr.w	r2, r2, #16
 8004d60:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f004 f9ed 	bl	8009146 <USB_ReadInterrupts>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d76:	d16e      	bne.n	8004e56 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f004 f9f3 	bl	800916c <USB_ReadDevAllOutEpInterrupt>
 8004d86:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004d88:	e062      	b.n	8004e50 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d057      	beq.n	8004e44 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f004 fa18 	bl	80091d4 <USB_ReadDevOutEPInterrupt>
 8004da4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00c      	beq.n	8004dca <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004dc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fdb1 	bl	800592c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00c      	beq.n	8004dee <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de0:	461a      	mov	r2, r3
 8004de2:	2308      	movs	r3, #8
 8004de4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 feab 	bl	8005b44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e04:	461a      	mov	r2, r3
 8004e06:	2310      	movs	r3, #16
 8004e08:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e20:	461a      	mov	r2, r3
 8004e22:	2320      	movs	r3, #32
 8004e24:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e42:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	3301      	adds	r3, #1
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	085b      	lsrs	r3, r3, #1
 8004e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d199      	bne.n	8004d8a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f004 f973 	bl	8009146 <USB_ReadInterrupts>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e6a:	f040 80c0 	bne.w	8004fee <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f004 f994 	bl	80091a0 <USB_ReadDevAllInEpInterrupt>
 8004e78:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004e7e:	e0b2      	b.n	8004fe6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80a7 	beq.w	8004fda <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	4611      	mov	r1, r2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f004 f9ba 	bl	8009210 <USB_ReadDevInEPInterrupt>
 8004e9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d057      	beq.n	8004f58 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	2201      	movs	r2, #1
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	69f9      	ldr	r1, [r7, #28]
 8004ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec8:	4013      	ands	r3, r2
 8004eca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2301      	movs	r3, #1
 8004edc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d132      	bne.n	8004f4c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eea:	4613      	mov	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3348      	adds	r3, #72	; 0x48
 8004ef6:	6819      	ldr	r1, [r3, #0]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efc:	4613      	mov	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	1a9b      	subs	r3, r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4403      	add	r3, r0
 8004f06:	3344      	adds	r3, #68	; 0x44
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4419      	add	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f10:	4613      	mov	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4403      	add	r3, r0
 8004f1a:	3348      	adds	r3, #72	; 0x48
 8004f1c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d113      	bne.n	8004f4c <HAL_PCD_IRQHandler+0x31c>
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f28:	4613      	mov	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	3350      	adds	r3, #80	; 0x50
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d108      	bne.n	8004f4c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f44:	461a      	mov	r2, r3
 8004f46:	2101      	movs	r1, #1
 8004f48:	f004 f9c2 	bl	80092d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f008 ffa1 	bl	800de9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d008      	beq.n	8004f74 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6e:	461a      	mov	r2, r3
 8004f70:	2308      	movs	r3, #8
 8004f72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d008      	beq.n	8004f90 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d008      	beq.n	8004fac <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	2340      	movs	r3, #64	; 0x40
 8004faa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d008      	beq.n	8004fc8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004fd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fc1b 	bl	8005810 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	3301      	adds	r3, #1
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	085b      	lsrs	r3, r3, #1
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f47f af49 	bne.w	8004e80 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f004 f8a7 	bl	8009146 <USB_ReadInterrupts>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005002:	d122      	bne.n	800504a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800501e:	2b01      	cmp	r3, #1
 8005020:	d108      	bne.n	8005034 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800502a:	2100      	movs	r1, #0
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fe27 	bl	8005c80 <HAL_PCDEx_LPM_Callback>
 8005032:	e002      	b.n	800503a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f008 ffa7 	bl	800df88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f004 f879 	bl	8009146 <USB_ReadInterrupts>
 8005054:	4603      	mov	r3, r0
 8005056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800505e:	d112      	bne.n	8005086 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b01      	cmp	r3, #1
 800506e:	d102      	bne.n	8005076 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f008 ff63 	bl	800df3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005084:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f004 f85b 	bl	8009146 <USB_ReadInterrupts>
 8005090:	4603      	mov	r3, r0
 8005092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509a:	f040 80c7 	bne.w	800522c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ac:	f023 0301 	bic.w	r3, r3, #1
 80050b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2110      	movs	r1, #16
 80050b8:	4618      	mov	r0, r3
 80050ba:	f003 f8f5 	bl	80082a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050be:	2300      	movs	r3, #0
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c2:	e056      	b.n	8005172 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d0:	461a      	mov	r2, r3
 80050d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e8:	0151      	lsls	r1, r2, #5
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	440a      	add	r2, r1
 80050ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050f6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	440a      	add	r2, r1
 800510e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005112:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005116:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005124:	461a      	mov	r2, r3
 8005126:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800512a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800513c:	0151      	lsls	r1, r2, #5
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	440a      	add	r2, r1
 8005142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005146:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800514a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800516a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516e:	3301      	adds	r3, #1
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005178:	429a      	cmp	r2, r3
 800517a:	d3a3      	bcc.n	80050c4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800518a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800518e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	2b00      	cmp	r3, #0
 8005196:	d016      	beq.n	80051c6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a2:	69fa      	ldr	r2, [r7, #28]
 80051a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051a8:	f043 030b 	orr.w	r3, r3, #11
 80051ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051be:	f043 030b 	orr.w	r3, r3, #11
 80051c2:	6453      	str	r3, [r2, #68]	; 0x44
 80051c4:	e015      	b.n	80051f2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80051d8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80051dc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ec:	f043 030b 	orr.w	r3, r3, #11
 80051f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005200:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005204:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005216:	461a      	mov	r2, r3
 8005218:	f004 f85a 	bl	80092d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695a      	ldr	r2, [r3, #20]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800522a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f003 ff88 	bl	8009146 <USB_ReadInterrupts>
 8005236:	4603      	mov	r3, r0
 8005238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800523c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005240:	d124      	bne.n	800528c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f004 f81e 	bl	8009288 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f003 f886 	bl	8008362 <USB_GetDevSpeed>
 8005256:	4603      	mov	r3, r0
 8005258:	461a      	mov	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681c      	ldr	r4, [r3, #0]
 8005262:	f001 f957 	bl	8006514 <HAL_RCC_GetHCLKFreq>
 8005266:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800526c:	b2db      	uxtb	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	4620      	mov	r0, r4
 8005272:	f002 fda5 	bl	8007dc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f008 fe37 	bl	800deea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695a      	ldr	r2, [r3, #20]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800528a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f003 ff58 	bl	8009146 <USB_ReadInterrupts>
 8005296:	4603      	mov	r3, r0
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b08      	cmp	r3, #8
 800529e:	d10a      	bne.n	80052b6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f008 fe14 	bl	800dece <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695a      	ldr	r2, [r3, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f002 0208 	and.w	r2, r2, #8
 80052b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f003 ff43 	bl	8009146 <USB_ReadInterrupts>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ca:	d10f      	bne.n	80052ec <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f008 fe76 	bl	800dfc8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80052ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f003 ff28 	bl	8009146 <USB_ReadInterrupts>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005300:	d10f      	bne.n	8005322 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	b2db      	uxtb	r3, r3
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f008 fe49 	bl	800dfa4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695a      	ldr	r2, [r3, #20]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f003 ff0d 	bl	8009146 <USB_ReadInterrupts>
 800532c:	4603      	mov	r3, r0
 800532e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005336:	d10a      	bne.n	800534e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f008 fe57 	bl	800dfec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695a      	ldr	r2, [r3, #20]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800534c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f003 fef7 	bl	8009146 <USB_ReadInterrupts>
 8005358:	4603      	mov	r3, r0
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b04      	cmp	r3, #4
 8005360:	d115      	bne.n	800538e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f008 fe47 	bl	800e008 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6859      	ldr	r1, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	e000      	b.n	800538e <HAL_PCD_IRQHandler+0x75e>
      return;
 800538c:	bf00      	nop
    }
  }
}
 800538e:	3734      	adds	r7, #52	; 0x34
 8005390:	46bd      	mov	sp, r7
 8005392:	bd90      	pop	{r4, r7, pc}

08005394 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <HAL_PCD_SetAddress+0x1a>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e013      	b.n	80053d6 <HAL_PCD_SetAddress+0x42>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	78fa      	ldrb	r2, [r7, #3]
 80053ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	78fa      	ldrb	r2, [r7, #3]
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f003 fe55 	bl	8009076 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	4608      	mov	r0, r1
 80053e8:	4611      	mov	r1, r2
 80053ea:	461a      	mov	r2, r3
 80053ec:	4603      	mov	r3, r0
 80053ee:	70fb      	strb	r3, [r7, #3]
 80053f0:	460b      	mov	r3, r1
 80053f2:	803b      	strh	r3, [r7, #0]
 80053f4:	4613      	mov	r3, r2
 80053f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005400:	2b00      	cmp	r3, #0
 8005402:	da0f      	bge.n	8005424 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005404:	78fb      	ldrb	r3, [r7, #3]
 8005406:	f003 020f 	and.w	r2, r3, #15
 800540a:	4613      	mov	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	3338      	adds	r3, #56	; 0x38
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	4413      	add	r3, r2
 8005418:	3304      	adds	r3, #4
 800541a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	705a      	strb	r2, [r3, #1]
 8005422:	e00f      	b.n	8005444 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	f003 020f 	and.w	r2, r3, #15
 800542a:	4613      	mov	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	4413      	add	r3, r2
 800543a:	3304      	adds	r3, #4
 800543c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	b2da      	uxtb	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005450:	883a      	ldrh	r2, [r7, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	78ba      	ldrb	r2, [r7, #2]
 800545a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d004      	beq.n	800546e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800546e:	78bb      	ldrb	r3, [r7, #2]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d102      	bne.n	800547a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_PCD_EP_Open+0xaa>
 8005484:	2302      	movs	r3, #2
 8005486:	e00e      	b.n	80054a6 <HAL_PCD_EP_Open+0xc8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68f9      	ldr	r1, [r7, #12]
 8005496:	4618      	mov	r0, r3
 8005498:	f002 ff88 	bl	80083ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80054a4:	7afb      	ldrb	r3, [r7, #11]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	460b      	mov	r3, r1
 80054b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	da0f      	bge.n	80054e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	f003 020f 	and.w	r2, r3, #15
 80054c8:	4613      	mov	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	3338      	adds	r3, #56	; 0x38
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	4413      	add	r3, r2
 80054d6:	3304      	adds	r3, #4
 80054d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	705a      	strb	r2, [r3, #1]
 80054e0:	e00f      	b.n	8005502 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	f003 020f 	and.w	r2, r3, #15
 80054e8:	4613      	mov	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	4413      	add	r3, r2
 80054f8:	3304      	adds	r3, #4
 80054fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_PCD_EP_Close+0x6e>
 8005518:	2302      	movs	r3, #2
 800551a:	e00e      	b.n	800553a <HAL_PCD_EP_Close+0x8c>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68f9      	ldr	r1, [r7, #12]
 800552a:	4618      	mov	r0, r3
 800552c:	f002 ffc6 	bl	80084bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b086      	sub	sp, #24
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	460b      	mov	r3, r1
 8005550:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005552:	7afb      	ldrb	r3, [r7, #11]
 8005554:	f003 020f 	and.w	r2, r3, #15
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	3304      	adds	r3, #4
 800556a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2200      	movs	r2, #0
 800557c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2200      	movs	r2, #0
 8005582:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005584:	7afb      	ldrb	r3, [r7, #11]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	b2da      	uxtb	r2, r3
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d102      	bne.n	800559e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800559e:	7afb      	ldrb	r3, [r7, #11]
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	6979      	ldr	r1, [r7, #20]
 80055b6:	f003 faa1 	bl	8008afc <USB_EP0StartXfer>
 80055ba:	e008      	b.n	80055ce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	6979      	ldr	r1, [r7, #20]
 80055ca:	f003 f853 	bl	8008674 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	f003 020f 	and.w	r2, r3, #15
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80055fa:	681b      	ldr	r3, [r3, #0]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	607a      	str	r2, [r7, #4]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	460b      	mov	r3, r1
 8005616:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005618:	7afb      	ldrb	r3, [r7, #11]
 800561a:	f003 020f 	and.w	r2, r3, #15
 800561e:	4613      	mov	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	3338      	adds	r3, #56	; 0x38
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	3304      	adds	r3, #4
 800562e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2200      	movs	r2, #0
 8005640:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2201      	movs	r2, #1
 8005646:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005648:	7afb      	ldrb	r3, [r7, #11]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	b2da      	uxtb	r2, r3
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d102      	bne.n	8005662 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005662:	7afb      	ldrb	r3, [r7, #11]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	6979      	ldr	r1, [r7, #20]
 800567a:	f003 fa3f 	bl	8008afc <USB_EP0StartXfer>
 800567e:	e008      	b.n	8005692 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	b2db      	uxtb	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	6979      	ldr	r1, [r7, #20]
 800568e:	f002 fff1 	bl	8008674 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	f003 020f 	and.w	r2, r3, #15
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d901      	bls.n	80056ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e050      	b.n	800575c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	da0f      	bge.n	80056e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	f003 020f 	and.w	r2, r3, #15
 80056c8:	4613      	mov	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	3338      	adds	r3, #56	; 0x38
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	4413      	add	r3, r2
 80056d6:	3304      	adds	r3, #4
 80056d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	705a      	strb	r2, [r3, #1]
 80056e0:	e00d      	b.n	80056fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056e2:	78fa      	ldrb	r2, [r7, #3]
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	4413      	add	r3, r2
 80056f4:	3304      	adds	r3, #4
 80056f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	b2da      	uxtb	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_PCD_EP_SetStall+0x82>
 800571a:	2302      	movs	r3, #2
 800571c:	e01e      	b.n	800575c <HAL_PCD_EP_SetStall+0xc0>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68f9      	ldr	r1, [r7, #12]
 800572c:	4618      	mov	r0, r3
 800572e:	f003 fbce 	bl	8008ece <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	b2d9      	uxtb	r1, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800574c:	461a      	mov	r2, r3
 800574e:	f003 fdbf 	bl	80092d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	f003 020f 	and.w	r2, r3, #15
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	429a      	cmp	r2, r3
 800577c:	d901      	bls.n	8005782 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e042      	b.n	8005808 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005786:	2b00      	cmp	r3, #0
 8005788:	da0f      	bge.n	80057aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800578a:	78fb      	ldrb	r3, [r7, #3]
 800578c:	f003 020f 	and.w	r2, r3, #15
 8005790:	4613      	mov	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	3338      	adds	r3, #56	; 0x38
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	4413      	add	r3, r2
 800579e:	3304      	adds	r3, #4
 80057a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	705a      	strb	r2, [r3, #1]
 80057a8:	e00f      	b.n	80057ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	f003 020f 	and.w	r2, r3, #15
 80057b0:	4613      	mov	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	1a9b      	subs	r3, r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	4413      	add	r3, r2
 80057c0:	3304      	adds	r3, #4
 80057c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_PCD_EP_ClrStall+0x86>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e00e      	b.n	8005808 <HAL_PCD_EP_ClrStall+0xa4>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f003 fbd6 	bl	8008faa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af02      	add	r7, sp, #8
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	4613      	mov	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	1a9b      	subs	r3, r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	3338      	adds	r3, #56	; 0x38
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	4413      	add	r3, r2
 8005834:	3304      	adds	r3, #4
 8005836:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	429a      	cmp	r2, r3
 8005842:	d901      	bls.n	8005848 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e06c      	b.n	8005922 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	695a      	ldr	r2, [r3, #20]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	429a      	cmp	r2, r3
 800585c:	d902      	bls.n	8005864 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	3303      	adds	r3, #3
 8005868:	089b      	lsrs	r3, r3, #2
 800586a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800586c:	e02b      	b.n	80058c6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	429a      	cmp	r2, r3
 8005882:	d902      	bls.n	800588a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3303      	adds	r3, #3
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	68d9      	ldr	r1, [r3, #12]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	4603      	mov	r3, r0
 80058a8:	6978      	ldr	r0, [r7, #20]
 80058aa:	f003 fa7a 	bl	8008da2 <USB_WritePacket>

    ep->xfer_buff  += len;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	441a      	add	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	441a      	add	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d809      	bhi.n	80058f0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	699a      	ldr	r2, [r3, #24]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d203      	bcs.n	80058f0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1be      	bne.n	800586e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	695a      	ldr	r2, [r3, #20]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d811      	bhi.n	8005920 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	2201      	movs	r2, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	43db      	mvns	r3, r3
 8005916:	6939      	ldr	r1, [r7, #16]
 8005918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800591c:	4013      	ands	r3, r2
 800591e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	333c      	adds	r3, #60	; 0x3c
 8005944:	3304      	adds	r3, #4
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b01      	cmp	r3, #1
 8005960:	f040 80a0 	bne.w	8005aa4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d015      	beq.n	800599a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4a72      	ldr	r2, [pc, #456]	; (8005b3c <PCD_EP_OutXfrComplete_int+0x210>)
 8005972:	4293      	cmp	r3, r2
 8005974:	f240 80dd 	bls.w	8005b32 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 80d7 	beq.w	8005b32 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005990:	461a      	mov	r2, r3
 8005992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005996:	6093      	str	r3, [r2, #8]
 8005998:	e0cb      	b.n	8005b32 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d009      	beq.n	80059b8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	461a      	mov	r2, r3
 80059b2:	2320      	movs	r3, #32
 80059b4:	6093      	str	r3, [r2, #8]
 80059b6:	e0bc      	b.n	8005b32 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f040 80b7 	bne.w	8005b32 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4a5d      	ldr	r2, [pc, #372]	; (8005b3c <PCD_EP_OutXfrComplete_int+0x210>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d90f      	bls.n	80059ec <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e2:	461a      	mov	r2, r3
 80059e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e8:	6093      	str	r3, [r2, #8]
 80059ea:	e0a2      	b.n	8005b32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80059fe:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	0159      	lsls	r1, r3, #5
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	440b      	add	r3, r1
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005a12:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4403      	add	r3, r0
 8005a22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005a26:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a3a:	6819      	ldr	r1, [r3, #0]
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	4613      	mov	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4403      	add	r3, r0
 8005a4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4419      	add	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	1a9b      	subs	r3, r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4403      	add	r3, r0
 8005a60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a64:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d114      	bne.n	8005a96 <PCD_EP_OutXfrComplete_int+0x16a>
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d108      	bne.n	8005a96 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a8e:	461a      	mov	r2, r3
 8005a90:	2101      	movs	r1, #1
 8005a92:	f003 fc1d 	bl	80092d0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f008 f9e1 	bl	800de64 <HAL_PCD_DataOutStageCallback>
 8005aa2:	e046      	b.n	8005b32 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4a26      	ldr	r2, [pc, #152]	; (8005b40 <PCD_EP_OutXfrComplete_int+0x214>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d124      	bne.n	8005af6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac8:	6093      	str	r3, [r2, #8]
 8005aca:	e032      	b.n	8005b32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2320      	movs	r3, #32
 8005ae6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f008 f9b8 	bl	800de64 <HAL_PCD_DataOutStageCallback>
 8005af4:	e01d      	b.n	8005b32 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d114      	bne.n	8005b26 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	4613      	mov	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d108      	bne.n	8005b26 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2100      	movs	r1, #0
 8005b22:	f003 fbd5 	bl	80092d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f008 f999 	bl	800de64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	4f54300a 	.word	0x4f54300a
 8005b40:	4f54310a 	.word	0x4f54310a

08005b44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	333c      	adds	r3, #60	; 0x3c
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <PCD_EP_OutSetupPacket_int+0x88>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d90e      	bls.n	8005b98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	461a      	mov	r2, r3
 8005b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f008 f951 	bl	800de40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <PCD_EP_OutSetupPacket_int+0x88>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d90c      	bls.n	8005bc0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d108      	bne.n	8005bc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005bb8:	461a      	mov	r2, r3
 8005bba:	2101      	movs	r1, #1
 8005bbc:	f003 fb88 	bl	80092d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	4f54300a 	.word	0x4f54300a

08005bd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	70fb      	strb	r3, [r7, #3]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d107      	bne.n	8005bfe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005bee:	883b      	ldrh	r3, [r7, #0]
 8005bf0:	0419      	lsls	r1, r3, #16
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8005bfc:	e028      	b.n	8005c50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	0c1b      	lsrs	r3, r3, #16
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	4413      	add	r3, r2
 8005c0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]
 8005c10:	e00d      	b.n	8005c2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	3340      	adds	r3, #64	; 0x40
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	0c1b      	lsrs	r3, r3, #16
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	4413      	add	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	73fb      	strb	r3, [r7, #15]
 8005c2e:	7bfa      	ldrb	r2, [r7, #15]
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d3ec      	bcc.n	8005c12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c38:	883b      	ldrh	r3, [r7, #0]
 8005c3a:	0418      	lsls	r0, r3, #16
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6819      	ldr	r1, [r3, #0]
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	4302      	orrs	r2, r0
 8005c48:	3340      	adds	r3, #64	; 0x40
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	460b      	mov	r3, r1
 8005c68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	887a      	ldrh	r2, [r7, #2]
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e264      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d075      	beq.n	8005da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cb6:	4ba3      	ldr	r3, [pc, #652]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d00c      	beq.n	8005cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cc2:	4ba0      	ldr	r3, [pc, #640]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d112      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cce:	4b9d      	ldr	r3, [pc, #628]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cda:	d10b      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cdc:	4b99      	ldr	r3, [pc, #612]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d05b      	beq.n	8005da0 <HAL_RCC_OscConfig+0x108>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d157      	bne.n	8005da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e23f      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfc:	d106      	bne.n	8005d0c <HAL_RCC_OscConfig+0x74>
 8005cfe:	4b91      	ldr	r3, [pc, #580]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a90      	ldr	r2, [pc, #576]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e01d      	b.n	8005d48 <HAL_RCC_OscConfig+0xb0>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d14:	d10c      	bne.n	8005d30 <HAL_RCC_OscConfig+0x98>
 8005d16:	4b8b      	ldr	r3, [pc, #556]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a8a      	ldr	r2, [pc, #552]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	4b88      	ldr	r3, [pc, #544]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a87      	ldr	r2, [pc, #540]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	e00b      	b.n	8005d48 <HAL_RCC_OscConfig+0xb0>
 8005d30:	4b84      	ldr	r3, [pc, #528]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a83      	ldr	r2, [pc, #524]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	4b81      	ldr	r3, [pc, #516]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a80      	ldr	r2, [pc, #512]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d013      	beq.n	8005d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d50:	f7fd f876 	bl	8002e40 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d58:	f7fd f872 	bl	8002e40 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b64      	cmp	r3, #100	; 0x64
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e204      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6a:	4b76      	ldr	r3, [pc, #472]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0f0      	beq.n	8005d58 <HAL_RCC_OscConfig+0xc0>
 8005d76:	e014      	b.n	8005da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d78:	f7fd f862 	bl	8002e40 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d80:	f7fd f85e 	bl	8002e40 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b64      	cmp	r3, #100	; 0x64
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e1f0      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d92:	4b6c      	ldr	r3, [pc, #432]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f0      	bne.n	8005d80 <HAL_RCC_OscConfig+0xe8>
 8005d9e:	e000      	b.n	8005da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d063      	beq.n	8005e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dae:	4b65      	ldr	r3, [pc, #404]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dba:	4b62      	ldr	r3, [pc, #392]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d11c      	bne.n	8005e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dc6:	4b5f      	ldr	r3, [pc, #380]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d116      	bne.n	8005e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dd2:	4b5c      	ldr	r3, [pc, #368]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <HAL_RCC_OscConfig+0x152>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d001      	beq.n	8005dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e1c4      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dea:	4b56      	ldr	r3, [pc, #344]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4952      	ldr	r1, [pc, #328]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dfe:	e03a      	b.n	8005e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d020      	beq.n	8005e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e08:	4b4f      	ldr	r3, [pc, #316]	; (8005f48 <HAL_RCC_OscConfig+0x2b0>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0e:	f7fd f817 	bl	8002e40 <HAL_GetTick>
 8005e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e16:	f7fd f813 	bl	8002e40 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e1a5      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e28:	4b46      	ldr	r3, [pc, #280]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0f0      	beq.n	8005e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e34:	4b43      	ldr	r3, [pc, #268]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	4940      	ldr	r1, [pc, #256]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	600b      	str	r3, [r1, #0]
 8005e48:	e015      	b.n	8005e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e4a:	4b3f      	ldr	r3, [pc, #252]	; (8005f48 <HAL_RCC_OscConfig+0x2b0>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e50:	f7fc fff6 	bl	8002e40 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e58:	f7fc fff2 	bl	8002e40 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e184      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e6a:	4b36      	ldr	r3, [pc, #216]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f0      	bne.n	8005e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d030      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d016      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e8a:	4b30      	ldr	r3, [pc, #192]	; (8005f4c <HAL_RCC_OscConfig+0x2b4>)
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e90:	f7fc ffd6 	bl	8002e40 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e98:	f7fc ffd2 	bl	8002e40 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e164      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eaa:	4b26      	ldr	r3, [pc, #152]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0x200>
 8005eb6:	e015      	b.n	8005ee4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eb8:	4b24      	ldr	r3, [pc, #144]	; (8005f4c <HAL_RCC_OscConfig+0x2b4>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ebe:	f7fc ffbf 	bl	8002e40 <HAL_GetTick>
 8005ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec6:	f7fc ffbb 	bl	8002e40 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e14d      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed8:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1f0      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80a0 	beq.w	8006032 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ef6:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10f      	bne.n	8005f22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f02:	2300      	movs	r3, #0
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	4a0e      	ldr	r2, [pc, #56]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f10:	6413      	str	r3, [r2, #64]	; 0x40
 8005f12:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f22:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <HAL_RCC_OscConfig+0x2b8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d121      	bne.n	8005f72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f2e:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <HAL_RCC_OscConfig+0x2b8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a07      	ldr	r2, [pc, #28]	; (8005f50 <HAL_RCC_OscConfig+0x2b8>)
 8005f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f3a:	f7fc ff81 	bl	8002e40 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f40:	e011      	b.n	8005f66 <HAL_RCC_OscConfig+0x2ce>
 8005f42:	bf00      	nop
 8005f44:	40023800 	.word	0x40023800
 8005f48:	42470000 	.word	0x42470000
 8005f4c:	42470e80 	.word	0x42470e80
 8005f50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f54:	f7fc ff74 	bl	8002e40 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e106      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f66:	4b85      	ldr	r3, [pc, #532]	; (800617c <HAL_RCC_OscConfig+0x4e4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d106      	bne.n	8005f88 <HAL_RCC_OscConfig+0x2f0>
 8005f7a:	4b81      	ldr	r3, [pc, #516]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	4a80      	ldr	r2, [pc, #512]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005f80:	f043 0301 	orr.w	r3, r3, #1
 8005f84:	6713      	str	r3, [r2, #112]	; 0x70
 8005f86:	e01c      	b.n	8005fc2 <HAL_RCC_OscConfig+0x32a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b05      	cmp	r3, #5
 8005f8e:	d10c      	bne.n	8005faa <HAL_RCC_OscConfig+0x312>
 8005f90:	4b7b      	ldr	r3, [pc, #492]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	4a7a      	ldr	r2, [pc, #488]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005f96:	f043 0304 	orr.w	r3, r3, #4
 8005f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9c:	4b78      	ldr	r3, [pc, #480]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa0:	4a77      	ldr	r2, [pc, #476]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa8:	e00b      	b.n	8005fc2 <HAL_RCC_OscConfig+0x32a>
 8005faa:	4b75      	ldr	r3, [pc, #468]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	4a74      	ldr	r2, [pc, #464]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb6:	4b72      	ldr	r3, [pc, #456]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fba:	4a71      	ldr	r2, [pc, #452]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005fbc:	f023 0304 	bic.w	r3, r3, #4
 8005fc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d015      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fca:	f7fc ff39 	bl	8002e40 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fd2:	f7fc ff35 	bl	8002e40 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e0c5      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe8:	4b65      	ldr	r3, [pc, #404]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0ee      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x33a>
 8005ff4:	e014      	b.n	8006020 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff6:	f7fc ff23 	bl	8002e40 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ffc:	e00a      	b.n	8006014 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ffe:	f7fc ff1f 	bl	8002e40 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	f241 3288 	movw	r2, #5000	; 0x1388
 800600c:	4293      	cmp	r3, r2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e0af      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006014:	4b5a      	ldr	r3, [pc, #360]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1ee      	bne.n	8005ffe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d105      	bne.n	8006032 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006026:	4b56      	ldr	r3, [pc, #344]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	4a55      	ldr	r2, [pc, #340]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 800602c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006030:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 809b 	beq.w	8006172 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800603c:	4b50      	ldr	r3, [pc, #320]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 030c 	and.w	r3, r3, #12
 8006044:	2b08      	cmp	r3, #8
 8006046:	d05c      	beq.n	8006102 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d141      	bne.n	80060d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006050:	4b4c      	ldr	r3, [pc, #304]	; (8006184 <HAL_RCC_OscConfig+0x4ec>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006056:	f7fc fef3 	bl	8002e40 <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800605e:	f7fc feef 	bl	8002e40 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e081      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006070:	4b43      	ldr	r3, [pc, #268]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f0      	bne.n	800605e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	69da      	ldr	r2, [r3, #28]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	019b      	lsls	r3, r3, #6
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	3b01      	subs	r3, #1
 8006096:	041b      	lsls	r3, r3, #16
 8006098:	431a      	orrs	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	061b      	lsls	r3, r3, #24
 80060a0:	4937      	ldr	r1, [pc, #220]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060a6:	4b37      	ldr	r3, [pc, #220]	; (8006184 <HAL_RCC_OscConfig+0x4ec>)
 80060a8:	2201      	movs	r2, #1
 80060aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ac:	f7fc fec8 	bl	8002e40 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060b4:	f7fc fec4 	bl	8002e40 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e056      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c6:	4b2e      	ldr	r3, [pc, #184]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCC_OscConfig+0x41c>
 80060d2:	e04e      	b.n	8006172 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d4:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <HAL_RCC_OscConfig+0x4ec>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060da:	f7fc feb1 	bl	8002e40 <HAL_GetTick>
 80060de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e2:	f7fc fead 	bl	8002e40 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e03f      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060f4:	4b22      	ldr	r3, [pc, #136]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1f0      	bne.n	80060e2 <HAL_RCC_OscConfig+0x44a>
 8006100:	e037      	b.n	8006172 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e032      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800610e:	4b1c      	ldr	r3, [pc, #112]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d028      	beq.n	800616e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006126:	429a      	cmp	r2, r3
 8006128:	d121      	bne.n	800616e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006134:	429a      	cmp	r2, r3
 8006136:	d11a      	bne.n	800616e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800613e:	4013      	ands	r3, r2
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006144:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006146:	4293      	cmp	r3, r2
 8006148:	d111      	bne.n	800616e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	3b01      	subs	r3, #1
 8006158:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800615a:	429a      	cmp	r2, r3
 800615c:	d107      	bne.n	800616e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800616a:	429a      	cmp	r2, r3
 800616c:	d001      	beq.n	8006172 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40007000 	.word	0x40007000
 8006180:	40023800 	.word	0x40023800
 8006184:	42470060 	.word	0x42470060

08006188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e0cc      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800619c:	4b68      	ldr	r3, [pc, #416]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d90c      	bls.n	80061c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061aa:	4b65      	ldr	r3, [pc, #404]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b2:	4b63      	ldr	r3, [pc, #396]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d001      	beq.n	80061c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e0b8      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d020      	beq.n	8006212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061dc:	4b59      	ldr	r3, [pc, #356]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4a58      	ldr	r2, [pc, #352]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061f4:	4b53      	ldr	r3, [pc, #332]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4a52      	ldr	r2, [pc, #328]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006200:	4b50      	ldr	r3, [pc, #320]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	494d      	ldr	r1, [pc, #308]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	4313      	orrs	r3, r2
 8006210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d044      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d107      	bne.n	8006236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006226:	4b47      	ldr	r3, [pc, #284]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d119      	bne.n	8006266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e07f      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b02      	cmp	r3, #2
 800623c:	d003      	beq.n	8006246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006242:	2b03      	cmp	r3, #3
 8006244:	d107      	bne.n	8006256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006246:	4b3f      	ldr	r3, [pc, #252]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d109      	bne.n	8006266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e06f      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006256:	4b3b      	ldr	r3, [pc, #236]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e067      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006266:	4b37      	ldr	r3, [pc, #220]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f023 0203 	bic.w	r2, r3, #3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	4934      	ldr	r1, [pc, #208]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006274:	4313      	orrs	r3, r2
 8006276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006278:	f7fc fde2 	bl	8002e40 <HAL_GetTick>
 800627c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800627e:	e00a      	b.n	8006296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006280:	f7fc fdde 	bl	8002e40 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	f241 3288 	movw	r2, #5000	; 0x1388
 800628e:	4293      	cmp	r3, r2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e04f      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006296:	4b2b      	ldr	r3, [pc, #172]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 020c 	and.w	r2, r3, #12
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d1eb      	bne.n	8006280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d20c      	bcs.n	80062d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b6:	4b22      	ldr	r3, [pc, #136]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062be:	4b20      	ldr	r3, [pc, #128]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d001      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e032      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062dc:	4b19      	ldr	r3, [pc, #100]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4916      	ldr	r1, [pc, #88]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062fa:	4b12      	ldr	r3, [pc, #72]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	490e      	ldr	r1, [pc, #56]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	4313      	orrs	r3, r2
 800630c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800630e:	f000 f821 	bl	8006354 <HAL_RCC_GetSysClockFreq>
 8006312:	4602      	mov	r2, r0
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	490a      	ldr	r1, [pc, #40]	; (8006348 <HAL_RCC_ClockConfig+0x1c0>)
 8006320:	5ccb      	ldrb	r3, [r1, r3]
 8006322:	fa22 f303 	lsr.w	r3, r2, r3
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <HAL_RCC_ClockConfig+0x1c4>)
 8006328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800632a:	4b09      	ldr	r3, [pc, #36]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f7fc fbb8 	bl	8002aa4 <HAL_InitTick>

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40023c00 	.word	0x40023c00
 8006344:	40023800 	.word	0x40023800
 8006348:	080137f8 	.word	0x080137f8
 800634c:	20000000 	.word	0x20000000
 8006350:	20000004 	.word	0x20000004

08006354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006354:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	607b      	str	r3, [r7, #4]
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	2300      	movs	r3, #0
 8006366:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800636c:	4b67      	ldr	r3, [pc, #412]	; (800650c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 030c 	and.w	r3, r3, #12
 8006374:	2b08      	cmp	r3, #8
 8006376:	d00d      	beq.n	8006394 <HAL_RCC_GetSysClockFreq+0x40>
 8006378:	2b08      	cmp	r3, #8
 800637a:	f200 80bd 	bhi.w	80064f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_RCC_GetSysClockFreq+0x34>
 8006382:	2b04      	cmp	r3, #4
 8006384:	d003      	beq.n	800638e <HAL_RCC_GetSysClockFreq+0x3a>
 8006386:	e0b7      	b.n	80064f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006388:	4b61      	ldr	r3, [pc, #388]	; (8006510 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800638a:	60bb      	str	r3, [r7, #8]
       break;
 800638c:	e0b7      	b.n	80064fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800638e:	4b60      	ldr	r3, [pc, #384]	; (8006510 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006390:	60bb      	str	r3, [r7, #8]
      break;
 8006392:	e0b4      	b.n	80064fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006394:	4b5d      	ldr	r3, [pc, #372]	; (800650c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800639c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800639e:	4b5b      	ldr	r3, [pc, #364]	; (800650c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d04d      	beq.n	8006446 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063aa:	4b58      	ldr	r3, [pc, #352]	; (800650c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	099b      	lsrs	r3, r3, #6
 80063b0:	461a      	mov	r2, r3
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80063ba:	f04f 0100 	mov.w	r1, #0
 80063be:	ea02 0800 	and.w	r8, r2, r0
 80063c2:	ea03 0901 	and.w	r9, r3, r1
 80063c6:	4640      	mov	r0, r8
 80063c8:	4649      	mov	r1, r9
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	014b      	lsls	r3, r1, #5
 80063d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80063d8:	0142      	lsls	r2, r0, #5
 80063da:	4610      	mov	r0, r2
 80063dc:	4619      	mov	r1, r3
 80063de:	ebb0 0008 	subs.w	r0, r0, r8
 80063e2:	eb61 0109 	sbc.w	r1, r1, r9
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	018b      	lsls	r3, r1, #6
 80063f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80063f4:	0182      	lsls	r2, r0, #6
 80063f6:	1a12      	subs	r2, r2, r0
 80063f8:	eb63 0301 	sbc.w	r3, r3, r1
 80063fc:	f04f 0000 	mov.w	r0, #0
 8006400:	f04f 0100 	mov.w	r1, #0
 8006404:	00d9      	lsls	r1, r3, #3
 8006406:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800640a:	00d0      	lsls	r0, r2, #3
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	eb12 0208 	adds.w	r2, r2, r8
 8006414:	eb43 0309 	adc.w	r3, r3, r9
 8006418:	f04f 0000 	mov.w	r0, #0
 800641c:	f04f 0100 	mov.w	r1, #0
 8006420:	0299      	lsls	r1, r3, #10
 8006422:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006426:	0290      	lsls	r0, r2, #10
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4610      	mov	r0, r2
 800642e:	4619      	mov	r1, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	461a      	mov	r2, r3
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	f7fa fc36 	bl	8000ca8 <__aeabi_uldivmod>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4613      	mov	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	e04a      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006446:	4b31      	ldr	r3, [pc, #196]	; (800650c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	099b      	lsrs	r3, r3, #6
 800644c:	461a      	mov	r2, r3
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006456:	f04f 0100 	mov.w	r1, #0
 800645a:	ea02 0400 	and.w	r4, r2, r0
 800645e:	ea03 0501 	and.w	r5, r3, r1
 8006462:	4620      	mov	r0, r4
 8006464:	4629      	mov	r1, r5
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	014b      	lsls	r3, r1, #5
 8006470:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006474:	0142      	lsls	r2, r0, #5
 8006476:	4610      	mov	r0, r2
 8006478:	4619      	mov	r1, r3
 800647a:	1b00      	subs	r0, r0, r4
 800647c:	eb61 0105 	sbc.w	r1, r1, r5
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	018b      	lsls	r3, r1, #6
 800648a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800648e:	0182      	lsls	r2, r0, #6
 8006490:	1a12      	subs	r2, r2, r0
 8006492:	eb63 0301 	sbc.w	r3, r3, r1
 8006496:	f04f 0000 	mov.w	r0, #0
 800649a:	f04f 0100 	mov.w	r1, #0
 800649e:	00d9      	lsls	r1, r3, #3
 80064a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064a4:	00d0      	lsls	r0, r2, #3
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	1912      	adds	r2, r2, r4
 80064ac:	eb45 0303 	adc.w	r3, r5, r3
 80064b0:	f04f 0000 	mov.w	r0, #0
 80064b4:	f04f 0100 	mov.w	r1, #0
 80064b8:	0299      	lsls	r1, r3, #10
 80064ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80064be:	0290      	lsls	r0, r2, #10
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4610      	mov	r0, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	461a      	mov	r2, r3
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	f7fa fbea 	bl	8000ca8 <__aeabi_uldivmod>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4613      	mov	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064dc:	4b0b      	ldr	r3, [pc, #44]	; (800650c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	0c1b      	lsrs	r3, r3, #16
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	3301      	adds	r3, #1
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f4:	60bb      	str	r3, [r7, #8]
      break;
 80064f6:	e002      	b.n	80064fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064f8:	4b05      	ldr	r3, [pc, #20]	; (8006510 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80064fa:	60bb      	str	r3, [r7, #8]
      break;
 80064fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064fe:	68bb      	ldr	r3, [r7, #8]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800650a:	bf00      	nop
 800650c:	40023800 	.word	0x40023800
 8006510:	00f42400 	.word	0x00f42400

08006514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006518:	4b03      	ldr	r3, [pc, #12]	; (8006528 <HAL_RCC_GetHCLKFreq+0x14>)
 800651a:	681b      	ldr	r3, [r3, #0]
}
 800651c:	4618      	mov	r0, r3
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20000000 	.word	0x20000000

0800652c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006530:	f7ff fff0 	bl	8006514 <HAL_RCC_GetHCLKFreq>
 8006534:	4602      	mov	r2, r0
 8006536:	4b05      	ldr	r3, [pc, #20]	; (800654c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	0a9b      	lsrs	r3, r3, #10
 800653c:	f003 0307 	and.w	r3, r3, #7
 8006540:	4903      	ldr	r1, [pc, #12]	; (8006550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006542:	5ccb      	ldrb	r3, [r1, r3]
 8006544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006548:	4618      	mov	r0, r3
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40023800 	.word	0x40023800
 8006550:	08013808 	.word	0x08013808

08006554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006558:	f7ff ffdc 	bl	8006514 <HAL_RCC_GetHCLKFreq>
 800655c:	4602      	mov	r2, r0
 800655e:	4b05      	ldr	r3, [pc, #20]	; (8006574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	0b5b      	lsrs	r3, r3, #13
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	4903      	ldr	r1, [pc, #12]	; (8006578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800656a:	5ccb      	ldrb	r3, [r1, r3]
 800656c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006570:	4618      	mov	r0, r3
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40023800 	.word	0x40023800
 8006578:	08013808 	.word	0x08013808

0800657c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	220f      	movs	r2, #15
 800658a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800658c:	4b12      	ldr	r3, [pc, #72]	; (80065d8 <HAL_RCC_GetClockConfig+0x5c>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f003 0203 	and.w	r2, r3, #3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006598:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <HAL_RCC_GetClockConfig+0x5c>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065a4:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <HAL_RCC_GetClockConfig+0x5c>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80065b0:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <HAL_RCC_GetClockConfig+0x5c>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	08db      	lsrs	r3, r3, #3
 80065b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065be:	4b07      	ldr	r3, [pc, #28]	; (80065dc <HAL_RCC_GetClockConfig+0x60>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 020f 	and.w	r2, r3, #15
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	601a      	str	r2, [r3, #0]
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40023800 	.word	0x40023800
 80065dc:	40023c00 	.word	0x40023c00

080065e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e07b      	b.n	80066ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d108      	bne.n	800660c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006602:	d009      	beq.n	8006618 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	61da      	str	r2, [r3, #28]
 800660a:	e005      	b.n	8006618 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fc f8da 	bl	80027ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006660:	431a      	orrs	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	431a      	orrs	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669c:	ea42 0103 	orr.w	r1, r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	0c1b      	lsrs	r3, r3, #16
 80066b6:	f003 0104 	and.w	r1, r3, #4
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	f003 0210 	and.w	r2, r3, #16
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e041      	b.n	8006788 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	d106      	bne.n	800671e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7fc f8e7 	bl	80028ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3304      	adds	r3, #4
 800672e:	4619      	mov	r1, r3
 8006730:	4610      	mov	r0, r2
 8006732:	f000 fbb1 	bl	8006e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d001      	beq.n	80067a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e04e      	b.n	8006846 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0201 	orr.w	r2, r2, #1
 80067be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a23      	ldr	r2, [pc, #140]	; (8006854 <HAL_TIM_Base_Start_IT+0xc4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d022      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d2:	d01d      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a1f      	ldr	r2, [pc, #124]	; (8006858 <HAL_TIM_Base_Start_IT+0xc8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d018      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1e      	ldr	r2, [pc, #120]	; (800685c <HAL_TIM_Base_Start_IT+0xcc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d013      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a1c      	ldr	r2, [pc, #112]	; (8006860 <HAL_TIM_Base_Start_IT+0xd0>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00e      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a1b      	ldr	r2, [pc, #108]	; (8006864 <HAL_TIM_Base_Start_IT+0xd4>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d009      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a19      	ldr	r2, [pc, #100]	; (8006868 <HAL_TIM_Base_Start_IT+0xd8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d004      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a18      	ldr	r2, [pc, #96]	; (800686c <HAL_TIM_Base_Start_IT+0xdc>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d111      	bne.n	8006834 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b06      	cmp	r3, #6
 8006820:	d010      	beq.n	8006844 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0201 	orr.w	r2, r2, #1
 8006830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006832:	e007      	b.n	8006844 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40010000 	.word	0x40010000
 8006858:	40000400 	.word	0x40000400
 800685c:	40000800 	.word	0x40000800
 8006860:	40000c00 	.word	0x40000c00
 8006864:	40010400 	.word	0x40010400
 8006868:	40014000 	.word	0x40014000
 800686c:	40001800 	.word	0x40001800

08006870 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e041      	b.n	8006906 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f839 	bl	800690e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f000 faf2 	bl	8006e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b02      	cmp	r3, #2
 8006936:	d122      	bne.n	800697e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b02      	cmp	r3, #2
 8006944:	d11b      	bne.n	800697e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f06f 0202 	mvn.w	r2, #2
 800694e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	f003 0303 	and.w	r3, r3, #3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fa78 	bl	8006e5a <HAL_TIM_IC_CaptureCallback>
 800696a:	e005      	b.n	8006978 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fa6a 	bl	8006e46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fa7b 	bl	8006e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b04      	cmp	r3, #4
 800698a:	d122      	bne.n	80069d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b04      	cmp	r3, #4
 8006998:	d11b      	bne.n	80069d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f06f 0204 	mvn.w	r2, #4
 80069a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fa4e 	bl	8006e5a <HAL_TIM_IC_CaptureCallback>
 80069be:	e005      	b.n	80069cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fa40 	bl	8006e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa51 	bl	8006e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f003 0308 	and.w	r3, r3, #8
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d122      	bne.n	8006a26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d11b      	bne.n	8006a26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f06f 0208 	mvn.w	r2, #8
 80069f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2204      	movs	r2, #4
 80069fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	f003 0303 	and.w	r3, r3, #3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fa24 	bl	8006e5a <HAL_TIM_IC_CaptureCallback>
 8006a12:	e005      	b.n	8006a20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fa16 	bl	8006e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa27 	bl	8006e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b10      	cmp	r3, #16
 8006a32:	d122      	bne.n	8006a7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b10      	cmp	r3, #16
 8006a40:	d11b      	bne.n	8006a7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f06f 0210 	mvn.w	r2, #16
 8006a4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2208      	movs	r2, #8
 8006a50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9fa 	bl	8006e5a <HAL_TIM_IC_CaptureCallback>
 8006a66:	e005      	b.n	8006a74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f9ec 	bl	8006e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f9fd 	bl	8006e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d10e      	bne.n	8006aa6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d107      	bne.n	8006aa6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f06f 0201 	mvn.w	r2, #1
 8006a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7fb fd8d 	bl	80025c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab0:	2b80      	cmp	r3, #128	; 0x80
 8006ab2:	d10e      	bne.n	8006ad2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abe:	2b80      	cmp	r3, #128	; 0x80
 8006ac0:	d107      	bne.n	8006ad2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fd53 	bl	8007578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	d10e      	bne.n	8006afe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	d107      	bne.n	8006afe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f9c2 	bl	8006e82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d10e      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d107      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f06f 0220 	mvn.w	r2, #32
 8006b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fd1d 	bl	8007564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d101      	bne.n	8006b52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e0ae      	b.n	8006cb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b0c      	cmp	r3, #12
 8006b5e:	f200 809f 	bhi.w	8006ca0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b62:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b68:	08006b9d 	.word	0x08006b9d
 8006b6c:	08006ca1 	.word	0x08006ca1
 8006b70:	08006ca1 	.word	0x08006ca1
 8006b74:	08006ca1 	.word	0x08006ca1
 8006b78:	08006bdd 	.word	0x08006bdd
 8006b7c:	08006ca1 	.word	0x08006ca1
 8006b80:	08006ca1 	.word	0x08006ca1
 8006b84:	08006ca1 	.word	0x08006ca1
 8006b88:	08006c1f 	.word	0x08006c1f
 8006b8c:	08006ca1 	.word	0x08006ca1
 8006b90:	08006ca1 	.word	0x08006ca1
 8006b94:	08006ca1 	.word	0x08006ca1
 8006b98:	08006c5f 	.word	0x08006c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68b9      	ldr	r1, [r7, #8]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fa18 	bl	8006fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0208 	orr.w	r2, r2, #8
 8006bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0204 	bic.w	r2, r2, #4
 8006bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6999      	ldr	r1, [r3, #24]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	691a      	ldr	r2, [r3, #16]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	619a      	str	r2, [r3, #24]
      break;
 8006bda:	e064      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68b9      	ldr	r1, [r7, #8]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fa68 	bl	80070b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699a      	ldr	r2, [r3, #24]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	699a      	ldr	r2, [r3, #24]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6999      	ldr	r1, [r3, #24]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	021a      	lsls	r2, r3, #8
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	619a      	str	r2, [r3, #24]
      break;
 8006c1c:	e043      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68b9      	ldr	r1, [r7, #8]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fabd 	bl	80071a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69da      	ldr	r2, [r3, #28]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0208 	orr.w	r2, r2, #8
 8006c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69da      	ldr	r2, [r3, #28]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0204 	bic.w	r2, r2, #4
 8006c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69d9      	ldr	r1, [r3, #28]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	61da      	str	r2, [r3, #28]
      break;
 8006c5c:	e023      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fb11 	bl	800728c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69da      	ldr	r2, [r3, #28]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69da      	ldr	r2, [r3, #28]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69d9      	ldr	r1, [r3, #28]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	021a      	lsls	r2, r3, #8
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	61da      	str	r2, [r3, #28]
      break;
 8006c9e:	e002      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d101      	bne.n	8006cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e0b4      	b.n	8006e3e <HAL_TIM_ConfigClockSource+0x186>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0c:	d03e      	beq.n	8006d8c <HAL_TIM_ConfigClockSource+0xd4>
 8006d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d12:	f200 8087 	bhi.w	8006e24 <HAL_TIM_ConfigClockSource+0x16c>
 8006d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1a:	f000 8086 	beq.w	8006e2a <HAL_TIM_ConfigClockSource+0x172>
 8006d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d22:	d87f      	bhi.n	8006e24 <HAL_TIM_ConfigClockSource+0x16c>
 8006d24:	2b70      	cmp	r3, #112	; 0x70
 8006d26:	d01a      	beq.n	8006d5e <HAL_TIM_ConfigClockSource+0xa6>
 8006d28:	2b70      	cmp	r3, #112	; 0x70
 8006d2a:	d87b      	bhi.n	8006e24 <HAL_TIM_ConfigClockSource+0x16c>
 8006d2c:	2b60      	cmp	r3, #96	; 0x60
 8006d2e:	d050      	beq.n	8006dd2 <HAL_TIM_ConfigClockSource+0x11a>
 8006d30:	2b60      	cmp	r3, #96	; 0x60
 8006d32:	d877      	bhi.n	8006e24 <HAL_TIM_ConfigClockSource+0x16c>
 8006d34:	2b50      	cmp	r3, #80	; 0x50
 8006d36:	d03c      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0xfa>
 8006d38:	2b50      	cmp	r3, #80	; 0x50
 8006d3a:	d873      	bhi.n	8006e24 <HAL_TIM_ConfigClockSource+0x16c>
 8006d3c:	2b40      	cmp	r3, #64	; 0x40
 8006d3e:	d058      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x13a>
 8006d40:	2b40      	cmp	r3, #64	; 0x40
 8006d42:	d86f      	bhi.n	8006e24 <HAL_TIM_ConfigClockSource+0x16c>
 8006d44:	2b30      	cmp	r3, #48	; 0x30
 8006d46:	d064      	beq.n	8006e12 <HAL_TIM_ConfigClockSource+0x15a>
 8006d48:	2b30      	cmp	r3, #48	; 0x30
 8006d4a:	d86b      	bhi.n	8006e24 <HAL_TIM_ConfigClockSource+0x16c>
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	d060      	beq.n	8006e12 <HAL_TIM_ConfigClockSource+0x15a>
 8006d50:	2b20      	cmp	r3, #32
 8006d52:	d867      	bhi.n	8006e24 <HAL_TIM_ConfigClockSource+0x16c>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d05c      	beq.n	8006e12 <HAL_TIM_ConfigClockSource+0x15a>
 8006d58:	2b10      	cmp	r3, #16
 8006d5a:	d05a      	beq.n	8006e12 <HAL_TIM_ConfigClockSource+0x15a>
 8006d5c:	e062      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	6899      	ldr	r1, [r3, #8]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f000 fb5d 	bl	800742c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	609a      	str	r2, [r3, #8]
      break;
 8006d8a:	e04f      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6818      	ldr	r0, [r3, #0]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	6899      	ldr	r1, [r3, #8]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f000 fb46 	bl	800742c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dae:	609a      	str	r2, [r3, #8]
      break;
 8006db0:	e03c      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	6859      	ldr	r1, [r3, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f000 faba 	bl	8007338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2150      	movs	r1, #80	; 0x50
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fb13 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006dd0:	e02c      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6818      	ldr	r0, [r3, #0]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	6859      	ldr	r1, [r3, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	461a      	mov	r2, r3
 8006de0:	f000 fad9 	bl	8007396 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2160      	movs	r1, #96	; 0x60
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 fb03 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006df0:	e01c      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	6859      	ldr	r1, [r3, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f000 fa9a 	bl	8007338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2140      	movs	r1, #64	; 0x40
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 faf3 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006e10:	e00c      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	f000 faea 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006e22:	e003      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	73fb      	strb	r3, [r7, #15]
      break;
 8006e28:	e000      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
	...

08006e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a40      	ldr	r2, [pc, #256]	; (8006fac <TIM_Base_SetConfig+0x114>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d013      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb6:	d00f      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a3d      	ldr	r2, [pc, #244]	; (8006fb0 <TIM_Base_SetConfig+0x118>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00b      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a3c      	ldr	r2, [pc, #240]	; (8006fb4 <TIM_Base_SetConfig+0x11c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d007      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a3b      	ldr	r2, [pc, #236]	; (8006fb8 <TIM_Base_SetConfig+0x120>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a3a      	ldr	r2, [pc, #232]	; (8006fbc <TIM_Base_SetConfig+0x124>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d108      	bne.n	8006eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a2f      	ldr	r2, [pc, #188]	; (8006fac <TIM_Base_SetConfig+0x114>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d02b      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef8:	d027      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a2c      	ldr	r2, [pc, #176]	; (8006fb0 <TIM_Base_SetConfig+0x118>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d023      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a2b      	ldr	r2, [pc, #172]	; (8006fb4 <TIM_Base_SetConfig+0x11c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d01f      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a2a      	ldr	r2, [pc, #168]	; (8006fb8 <TIM_Base_SetConfig+0x120>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d01b      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a29      	ldr	r2, [pc, #164]	; (8006fbc <TIM_Base_SetConfig+0x124>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d017      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a28      	ldr	r2, [pc, #160]	; (8006fc0 <TIM_Base_SetConfig+0x128>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d013      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a27      	ldr	r2, [pc, #156]	; (8006fc4 <TIM_Base_SetConfig+0x12c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d00f      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a26      	ldr	r2, [pc, #152]	; (8006fc8 <TIM_Base_SetConfig+0x130>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00b      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a25      	ldr	r2, [pc, #148]	; (8006fcc <TIM_Base_SetConfig+0x134>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d007      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a24      	ldr	r2, [pc, #144]	; (8006fd0 <TIM_Base_SetConfig+0x138>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d003      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a23      	ldr	r2, [pc, #140]	; (8006fd4 <TIM_Base_SetConfig+0x13c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d108      	bne.n	8006f5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <TIM_Base_SetConfig+0x114>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_Base_SetConfig+0xf8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a0c      	ldr	r2, [pc, #48]	; (8006fbc <TIM_Base_SetConfig+0x124>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d103      	bne.n	8006f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	615a      	str	r2, [r3, #20]
}
 8006f9e:	bf00      	nop
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40010000 	.word	0x40010000
 8006fb0:	40000400 	.word	0x40000400
 8006fb4:	40000800 	.word	0x40000800
 8006fb8:	40000c00 	.word	0x40000c00
 8006fbc:	40010400 	.word	0x40010400
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40014400 	.word	0x40014400
 8006fc8:	40014800 	.word	0x40014800
 8006fcc:	40001800 	.word	0x40001800
 8006fd0:	40001c00 	.word	0x40001c00
 8006fd4:	40002000 	.word	0x40002000

08006fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f023 0201 	bic.w	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0303 	bic.w	r3, r3, #3
 800700e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f023 0302 	bic.w	r3, r3, #2
 8007020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a20      	ldr	r2, [pc, #128]	; (80070b0 <TIM_OC1_SetConfig+0xd8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_OC1_SetConfig+0x64>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a1f      	ldr	r2, [pc, #124]	; (80070b4 <TIM_OC1_SetConfig+0xdc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d10c      	bne.n	8007056 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f023 0308 	bic.w	r3, r3, #8
 8007042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f023 0304 	bic.w	r3, r3, #4
 8007054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <TIM_OC1_SetConfig+0xd8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_OC1_SetConfig+0x8e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <TIM_OC1_SetConfig+0xdc>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d111      	bne.n	800708a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800706c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	4313      	orrs	r3, r2
 800707e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	621a      	str	r2, [r3, #32]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40010000 	.word	0x40010000
 80070b4:	40010400 	.word	0x40010400

080070b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f023 0210 	bic.w	r2, r3, #16
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f023 0320 	bic.w	r3, r3, #32
 8007102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	011b      	lsls	r3, r3, #4
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a22      	ldr	r2, [pc, #136]	; (800719c <TIM_OC2_SetConfig+0xe4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d003      	beq.n	8007120 <TIM_OC2_SetConfig+0x68>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a21      	ldr	r2, [pc, #132]	; (80071a0 <TIM_OC2_SetConfig+0xe8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d10d      	bne.n	800713c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4313      	orrs	r3, r2
 8007132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800713a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a17      	ldr	r2, [pc, #92]	; (800719c <TIM_OC2_SetConfig+0xe4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_OC2_SetConfig+0x94>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a16      	ldr	r2, [pc, #88]	; (80071a0 <TIM_OC2_SetConfig+0xe8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d113      	bne.n	8007174 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800715a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	4313      	orrs	r3, r2
 8007166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	4313      	orrs	r3, r2
 8007172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	621a      	str	r2, [r3, #32]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	40010000 	.word	0x40010000
 80071a0:	40010400 	.word	0x40010400

080071a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0303 	bic.w	r3, r3, #3
 80071da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a21      	ldr	r2, [pc, #132]	; (8007284 <TIM_OC3_SetConfig+0xe0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d003      	beq.n	800720a <TIM_OC3_SetConfig+0x66>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a20      	ldr	r2, [pc, #128]	; (8007288 <TIM_OC3_SetConfig+0xe4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d10d      	bne.n	8007226 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a16      	ldr	r2, [pc, #88]	; (8007284 <TIM_OC3_SetConfig+0xe0>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d003      	beq.n	8007236 <TIM_OC3_SetConfig+0x92>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a15      	ldr	r2, [pc, #84]	; (8007288 <TIM_OC3_SetConfig+0xe4>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d113      	bne.n	800725e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800723c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	621a      	str	r2, [r3, #32]
}
 8007278:	bf00      	nop
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	40010000 	.word	0x40010000
 8007288:	40010400 	.word	0x40010400

0800728c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	031b      	lsls	r3, r3, #12
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a12      	ldr	r2, [pc, #72]	; (8007330 <TIM_OC4_SetConfig+0xa4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d003      	beq.n	80072f4 <TIM_OC4_SetConfig+0x68>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a11      	ldr	r2, [pc, #68]	; (8007334 <TIM_OC4_SetConfig+0xa8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d109      	bne.n	8007308 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	019b      	lsls	r3, r3, #6
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40010000 	.word	0x40010000
 8007334:	40010400 	.word	0x40010400

08007338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	f023 0201 	bic.w	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f023 030a 	bic.w	r3, r3, #10
 8007374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007396:	b480      	push	{r7}
 8007398:	b087      	sub	sp, #28
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f023 0210 	bic.w	r2, r3, #16
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	031b      	lsls	r3, r3, #12
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	f043 0307 	orr.w	r3, r3, #7
 8007418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	609a      	str	r2, [r3, #8]
}
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	021a      	lsls	r2, r3, #8
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	431a      	orrs	r2, r3
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	4313      	orrs	r3, r2
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	4313      	orrs	r3, r2
 8007458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	609a      	str	r2, [r3, #8]
}
 8007460:	bf00      	nop
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007480:	2302      	movs	r3, #2
 8007482:	e05a      	b.n	800753a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a21      	ldr	r2, [pc, #132]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d022      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d0:	d01d      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1d      	ldr	r2, [pc, #116]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d018      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1b      	ldr	r2, [pc, #108]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1a      	ldr	r2, [pc, #104]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00e      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a18      	ldr	r2, [pc, #96]	; (8007558 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d009      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a17      	ldr	r2, [pc, #92]	; (800755c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d004      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a15      	ldr	r2, [pc, #84]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d10c      	bne.n	8007528 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	4313      	orrs	r3, r2
 800751e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40010000 	.word	0x40010000
 800754c:	40000400 	.word	0x40000400
 8007550:	40000800 	.word	0x40000800
 8007554:	40000c00 	.word	0x40000c00
 8007558:	40010400 	.word	0x40010400
 800755c:	40014000 	.word	0x40014000
 8007560:	40001800 	.word	0x40001800

08007564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e03f      	b.n	800761e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d106      	bne.n	80075b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fb f9f8 	bl	80029a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2224      	movs	r2, #36	; 0x24
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f9cb 	bl	800796c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	695a      	ldr	r2, [r3, #20]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2220      	movs	r2, #32
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2220      	movs	r2, #32
 8007618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b08a      	sub	sp, #40	; 0x28
 800762a:	af02      	add	r7, sp, #8
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	603b      	str	r3, [r7, #0]
 8007632:	4613      	mov	r3, r2
 8007634:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b20      	cmp	r3, #32
 8007644:	d17c      	bne.n	8007740 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <HAL_UART_Transmit+0x2c>
 800764c:	88fb      	ldrh	r3, [r7, #6]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e075      	b.n	8007742 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_UART_Transmit+0x3e>
 8007660:	2302      	movs	r3, #2
 8007662:	e06e      	b.n	8007742 <HAL_UART_Transmit+0x11c>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2221      	movs	r2, #33	; 0x21
 8007676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800767a:	f7fb fbe1 	bl	8002e40 <HAL_GetTick>
 800767e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	88fa      	ldrh	r2, [r7, #6]
 8007684:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	88fa      	ldrh	r2, [r7, #6]
 800768a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007694:	d108      	bne.n	80076a8 <HAL_UART_Transmit+0x82>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d104      	bne.n	80076a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	e003      	b.n	80076b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076ac:	2300      	movs	r3, #0
 80076ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80076b8:	e02a      	b.n	8007710 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2200      	movs	r2, #0
 80076c2:	2180      	movs	r1, #128	; 0x80
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 f8e2 	bl	800788e <UART_WaitOnFlagUntilTimeout>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e036      	b.n	8007742 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10b      	bne.n	80076f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	3302      	adds	r3, #2
 80076ee:	61bb      	str	r3, [r7, #24]
 80076f0:	e007      	b.n	8007702 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	781a      	ldrb	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	3301      	adds	r3, #1
 8007700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007706:	b29b      	uxth	r3, r3
 8007708:	3b01      	subs	r3, #1
 800770a:	b29a      	uxth	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1cf      	bne.n	80076ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2200      	movs	r2, #0
 8007722:	2140      	movs	r1, #64	; 0x40
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f8b2 	bl	800788e <UART_WaitOnFlagUntilTimeout>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e006      	b.n	8007742 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2220      	movs	r2, #32
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	e000      	b.n	8007742 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007740:	2302      	movs	r3, #2
  }
}
 8007742:	4618      	mov	r0, r3
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b08a      	sub	sp, #40	; 0x28
 800774e:	af02      	add	r7, sp, #8
 8007750:	60f8      	str	r0, [r7, #12]
 8007752:	60b9      	str	r1, [r7, #8]
 8007754:	603b      	str	r3, [r7, #0]
 8007756:	4613      	mov	r3, r2
 8007758:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b20      	cmp	r3, #32
 8007768:	f040 808c 	bne.w	8007884 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_UART_Receive+0x2e>
 8007772:	88fb      	ldrh	r3, [r7, #6]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e084      	b.n	8007886 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_UART_Receive+0x40>
 8007786:	2302      	movs	r3, #2
 8007788:	e07d      	b.n	8007886 <HAL_UART_Receive+0x13c>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2222      	movs	r2, #34	; 0x22
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077a6:	f7fb fb4b 	bl	8002e40 <HAL_GetTick>
 80077aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	88fa      	ldrh	r2, [r7, #6]
 80077b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c0:	d108      	bne.n	80077d4 <HAL_UART_Receive+0x8a>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	e003      	b.n	80077dc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077d8:	2300      	movs	r3, #0
 80077da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80077e4:	e043      	b.n	800786e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2200      	movs	r2, #0
 80077ee:	2120      	movs	r1, #32
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 f84c 	bl	800788e <UART_WaitOnFlagUntilTimeout>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e042      	b.n	8007886 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10c      	bne.n	8007820 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	b29b      	uxth	r3, r3
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	b29a      	uxth	r2, r3
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	3302      	adds	r3, #2
 800781c:	61bb      	str	r3, [r7, #24]
 800781e:	e01f      	b.n	8007860 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007828:	d007      	beq.n	800783a <HAL_UART_Receive+0xf0>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <HAL_UART_Receive+0xfe>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	b2da      	uxtb	r2, r3
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	e008      	b.n	800785a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007854:	b2da      	uxtb	r2, r3
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	3301      	adds	r3, #1
 800785e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1b6      	bne.n	80077e6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	e000      	b.n	8007886 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007884:	2302      	movs	r3, #2
  }
}
 8007886:	4618      	mov	r0, r3
 8007888:	3720      	adds	r7, #32
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b090      	sub	sp, #64	; 0x40
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	603b      	str	r3, [r7, #0]
 800789a:	4613      	mov	r3, r2
 800789c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800789e:	e050      	b.n	8007942 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078a6:	d04c      	beq.n	8007942 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d007      	beq.n	80078be <UART_WaitOnFlagUntilTimeout+0x30>
 80078ae:	f7fb fac7 	bl	8002e40 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d241      	bcs.n	8007942 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	330c      	adds	r3, #12
 80078c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	330c      	adds	r3, #12
 80078dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078de:	637a      	str	r2, [r7, #52]	; 0x34
 80078e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e5      	bne.n	80078be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3314      	adds	r3, #20
 80078f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	613b      	str	r3, [r7, #16]
   return(result);
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f023 0301 	bic.w	r3, r3, #1
 8007908:	63bb      	str	r3, [r7, #56]	; 0x38
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3314      	adds	r3, #20
 8007910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007912:	623a      	str	r2, [r7, #32]
 8007914:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	69f9      	ldr	r1, [r7, #28]
 8007918:	6a3a      	ldr	r2, [r7, #32]
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e5      	bne.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2220      	movs	r2, #32
 800792a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2220      	movs	r2, #32
 8007932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e00f      	b.n	8007962 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	4013      	ands	r3, r2
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	429a      	cmp	r2, r3
 8007950:	bf0c      	ite	eq
 8007952:	2301      	moveq	r3, #1
 8007954:	2300      	movne	r3, #0
 8007956:	b2db      	uxtb	r3, r3
 8007958:	461a      	mov	r2, r3
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	429a      	cmp	r2, r3
 800795e:	d09f      	beq.n	80078a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3740      	adds	r7, #64	; 0x40
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800796c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007970:	b09f      	sub	sp, #124	; 0x7c
 8007972:	af00      	add	r7, sp, #0
 8007974:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007982:	68d9      	ldr	r1, [r3, #12]
 8007984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	ea40 0301 	orr.w	r3, r0, r1
 800798c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800798e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	431a      	orrs	r2, r3
 8007998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	431a      	orrs	r2, r3
 800799e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80079a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079b0:	f021 010c 	bic.w	r1, r1, #12
 80079b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079ba:	430b      	orrs	r3, r1
 80079bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ca:	6999      	ldr	r1, [r3, #24]
 80079cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	ea40 0301 	orr.w	r3, r0, r1
 80079d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4bc5      	ldr	r3, [pc, #788]	; (8007cf0 <UART_SetConfig+0x384>)
 80079dc:	429a      	cmp	r2, r3
 80079de:	d004      	beq.n	80079ea <UART_SetConfig+0x7e>
 80079e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	4bc3      	ldr	r3, [pc, #780]	; (8007cf4 <UART_SetConfig+0x388>)
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d103      	bne.n	80079f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079ea:	f7fe fdb3 	bl	8006554 <HAL_RCC_GetPCLK2Freq>
 80079ee:	6778      	str	r0, [r7, #116]	; 0x74
 80079f0:	e002      	b.n	80079f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079f2:	f7fe fd9b 	bl	800652c <HAL_RCC_GetPCLK1Freq>
 80079f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a00:	f040 80b6 	bne.w	8007b70 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a06:	461c      	mov	r4, r3
 8007a08:	f04f 0500 	mov.w	r5, #0
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	462b      	mov	r3, r5
 8007a10:	1891      	adds	r1, r2, r2
 8007a12:	6439      	str	r1, [r7, #64]	; 0x40
 8007a14:	415b      	adcs	r3, r3
 8007a16:	647b      	str	r3, [r7, #68]	; 0x44
 8007a18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a1c:	1912      	adds	r2, r2, r4
 8007a1e:	eb45 0303 	adc.w	r3, r5, r3
 8007a22:	f04f 0000 	mov.w	r0, #0
 8007a26:	f04f 0100 	mov.w	r1, #0
 8007a2a:	00d9      	lsls	r1, r3, #3
 8007a2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a30:	00d0      	lsls	r0, r2, #3
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	1911      	adds	r1, r2, r4
 8007a38:	6639      	str	r1, [r7, #96]	; 0x60
 8007a3a:	416b      	adcs	r3, r5
 8007a3c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	461a      	mov	r2, r3
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	1891      	adds	r1, r2, r2
 8007a4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a4c:	415b      	adcs	r3, r3
 8007a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a54:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007a58:	f7f9 f926 	bl	8000ca8 <__aeabi_uldivmod>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4ba5      	ldr	r3, [pc, #660]	; (8007cf8 <UART_SetConfig+0x38c>)
 8007a62:	fba3 2302 	umull	r2, r3, r3, r2
 8007a66:	095b      	lsrs	r3, r3, #5
 8007a68:	011e      	lsls	r6, r3, #4
 8007a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a6c:	461c      	mov	r4, r3
 8007a6e:	f04f 0500 	mov.w	r5, #0
 8007a72:	4622      	mov	r2, r4
 8007a74:	462b      	mov	r3, r5
 8007a76:	1891      	adds	r1, r2, r2
 8007a78:	6339      	str	r1, [r7, #48]	; 0x30
 8007a7a:	415b      	adcs	r3, r3
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007a82:	1912      	adds	r2, r2, r4
 8007a84:	eb45 0303 	adc.w	r3, r5, r3
 8007a88:	f04f 0000 	mov.w	r0, #0
 8007a8c:	f04f 0100 	mov.w	r1, #0
 8007a90:	00d9      	lsls	r1, r3, #3
 8007a92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a96:	00d0      	lsls	r0, r2, #3
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	1911      	adds	r1, r2, r4
 8007a9e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007aa0:	416b      	adcs	r3, r5
 8007aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	f04f 0300 	mov.w	r3, #0
 8007aae:	1891      	adds	r1, r2, r2
 8007ab0:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ab2:	415b      	adcs	r3, r3
 8007ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007aba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007abe:	f7f9 f8f3 	bl	8000ca8 <__aeabi_uldivmod>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4b8c      	ldr	r3, [pc, #560]	; (8007cf8 <UART_SetConfig+0x38c>)
 8007ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	2164      	movs	r1, #100	; 0x64
 8007ad0:	fb01 f303 	mul.w	r3, r1, r3
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	3332      	adds	r3, #50	; 0x32
 8007ada:	4a87      	ldr	r2, [pc, #540]	; (8007cf8 <UART_SetConfig+0x38c>)
 8007adc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae0:	095b      	lsrs	r3, r3, #5
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ae8:	441e      	add	r6, r3
 8007aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aec:	4618      	mov	r0, r3
 8007aee:	f04f 0100 	mov.w	r1, #0
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	1894      	adds	r4, r2, r2
 8007af8:	623c      	str	r4, [r7, #32]
 8007afa:	415b      	adcs	r3, r3
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
 8007afe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b02:	1812      	adds	r2, r2, r0
 8007b04:	eb41 0303 	adc.w	r3, r1, r3
 8007b08:	f04f 0400 	mov.w	r4, #0
 8007b0c:	f04f 0500 	mov.w	r5, #0
 8007b10:	00dd      	lsls	r5, r3, #3
 8007b12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b16:	00d4      	lsls	r4, r2, #3
 8007b18:	4622      	mov	r2, r4
 8007b1a:	462b      	mov	r3, r5
 8007b1c:	1814      	adds	r4, r2, r0
 8007b1e:	653c      	str	r4, [r7, #80]	; 0x50
 8007b20:	414b      	adcs	r3, r1
 8007b22:	657b      	str	r3, [r7, #84]	; 0x54
 8007b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	f04f 0300 	mov.w	r3, #0
 8007b2e:	1891      	adds	r1, r2, r2
 8007b30:	61b9      	str	r1, [r7, #24]
 8007b32:	415b      	adcs	r3, r3
 8007b34:	61fb      	str	r3, [r7, #28]
 8007b36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b3a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007b3e:	f7f9 f8b3 	bl	8000ca8 <__aeabi_uldivmod>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4b6c      	ldr	r3, [pc, #432]	; (8007cf8 <UART_SetConfig+0x38c>)
 8007b48:	fba3 1302 	umull	r1, r3, r3, r2
 8007b4c:	095b      	lsrs	r3, r3, #5
 8007b4e:	2164      	movs	r1, #100	; 0x64
 8007b50:	fb01 f303 	mul.w	r3, r1, r3
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	3332      	adds	r3, #50	; 0x32
 8007b5a:	4a67      	ldr	r2, [pc, #412]	; (8007cf8 <UART_SetConfig+0x38c>)
 8007b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b60:	095b      	lsrs	r3, r3, #5
 8007b62:	f003 0207 	and.w	r2, r3, #7
 8007b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4432      	add	r2, r6
 8007b6c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b6e:	e0b9      	b.n	8007ce4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b72:	461c      	mov	r4, r3
 8007b74:	f04f 0500 	mov.w	r5, #0
 8007b78:	4622      	mov	r2, r4
 8007b7a:	462b      	mov	r3, r5
 8007b7c:	1891      	adds	r1, r2, r2
 8007b7e:	6139      	str	r1, [r7, #16]
 8007b80:	415b      	adcs	r3, r3
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007b88:	1912      	adds	r2, r2, r4
 8007b8a:	eb45 0303 	adc.w	r3, r5, r3
 8007b8e:	f04f 0000 	mov.w	r0, #0
 8007b92:	f04f 0100 	mov.w	r1, #0
 8007b96:	00d9      	lsls	r1, r3, #3
 8007b98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b9c:	00d0      	lsls	r0, r2, #3
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	eb12 0804 	adds.w	r8, r2, r4
 8007ba6:	eb43 0905 	adc.w	r9, r3, r5
 8007baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f04f 0100 	mov.w	r1, #0
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	f04f 0300 	mov.w	r3, #0
 8007bbc:	008b      	lsls	r3, r1, #2
 8007bbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007bc2:	0082      	lsls	r2, r0, #2
 8007bc4:	4640      	mov	r0, r8
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	f7f9 f86e 	bl	8000ca8 <__aeabi_uldivmod>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4b49      	ldr	r3, [pc, #292]	; (8007cf8 <UART_SetConfig+0x38c>)
 8007bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007bd6:	095b      	lsrs	r3, r3, #5
 8007bd8:	011e      	lsls	r6, r3, #4
 8007bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f04f 0100 	mov.w	r1, #0
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	1894      	adds	r4, r2, r2
 8007be8:	60bc      	str	r4, [r7, #8]
 8007bea:	415b      	adcs	r3, r3
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bf2:	1812      	adds	r2, r2, r0
 8007bf4:	eb41 0303 	adc.w	r3, r1, r3
 8007bf8:	f04f 0400 	mov.w	r4, #0
 8007bfc:	f04f 0500 	mov.w	r5, #0
 8007c00:	00dd      	lsls	r5, r3, #3
 8007c02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c06:	00d4      	lsls	r4, r2, #3
 8007c08:	4622      	mov	r2, r4
 8007c0a:	462b      	mov	r3, r5
 8007c0c:	1814      	adds	r4, r2, r0
 8007c0e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007c10:	414b      	adcs	r3, r1
 8007c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f04f 0100 	mov.w	r1, #0
 8007c1e:	f04f 0200 	mov.w	r2, #0
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	008b      	lsls	r3, r1, #2
 8007c28:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c2c:	0082      	lsls	r2, r0, #2
 8007c2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007c32:	f7f9 f839 	bl	8000ca8 <__aeabi_uldivmod>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4b2f      	ldr	r3, [pc, #188]	; (8007cf8 <UART_SetConfig+0x38c>)
 8007c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c40:	095b      	lsrs	r3, r3, #5
 8007c42:	2164      	movs	r1, #100	; 0x64
 8007c44:	fb01 f303 	mul.w	r3, r1, r3
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	3332      	adds	r3, #50	; 0x32
 8007c4e:	4a2a      	ldr	r2, [pc, #168]	; (8007cf8 <UART_SetConfig+0x38c>)
 8007c50:	fba2 2303 	umull	r2, r3, r2, r3
 8007c54:	095b      	lsrs	r3, r3, #5
 8007c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c5a:	441e      	add	r6, r3
 8007c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f04f 0100 	mov.w	r1, #0
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	1894      	adds	r4, r2, r2
 8007c6a:	603c      	str	r4, [r7, #0]
 8007c6c:	415b      	adcs	r3, r3
 8007c6e:	607b      	str	r3, [r7, #4]
 8007c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c74:	1812      	adds	r2, r2, r0
 8007c76:	eb41 0303 	adc.w	r3, r1, r3
 8007c7a:	f04f 0400 	mov.w	r4, #0
 8007c7e:	f04f 0500 	mov.w	r5, #0
 8007c82:	00dd      	lsls	r5, r3, #3
 8007c84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c88:	00d4      	lsls	r4, r2, #3
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	462b      	mov	r3, r5
 8007c8e:	eb12 0a00 	adds.w	sl, r2, r0
 8007c92:	eb43 0b01 	adc.w	fp, r3, r1
 8007c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f04f 0100 	mov.w	r1, #0
 8007ca0:	f04f 0200 	mov.w	r2, #0
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	008b      	lsls	r3, r1, #2
 8007caa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007cae:	0082      	lsls	r2, r0, #2
 8007cb0:	4650      	mov	r0, sl
 8007cb2:	4659      	mov	r1, fp
 8007cb4:	f7f8 fff8 	bl	8000ca8 <__aeabi_uldivmod>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4b0e      	ldr	r3, [pc, #56]	; (8007cf8 <UART_SetConfig+0x38c>)
 8007cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8007cc2:	095b      	lsrs	r3, r3, #5
 8007cc4:	2164      	movs	r1, #100	; 0x64
 8007cc6:	fb01 f303 	mul.w	r3, r1, r3
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	3332      	adds	r3, #50	; 0x32
 8007cd0:	4a09      	ldr	r2, [pc, #36]	; (8007cf8 <UART_SetConfig+0x38c>)
 8007cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd6:	095b      	lsrs	r3, r3, #5
 8007cd8:	f003 020f 	and.w	r2, r3, #15
 8007cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4432      	add	r2, r6
 8007ce2:	609a      	str	r2, [r3, #8]
}
 8007ce4:	bf00      	nop
 8007ce6:	377c      	adds	r7, #124	; 0x7c
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cee:	bf00      	nop
 8007cf0:	40011000 	.word	0x40011000
 8007cf4:	40011400 	.word	0x40011400
 8007cf8:	51eb851f 	.word	0x51eb851f

08007cfc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b084      	sub	sp, #16
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	f107 001c 	add.w	r0, r7, #28
 8007d0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d122      	bne.n	8007d5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d105      	bne.n	8007d4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f001 fb1c 	bl	800938c <USB_CoreReset>
 8007d54:	4603      	mov	r3, r0
 8007d56:	73fb      	strb	r3, [r7, #15]
 8007d58:	e01a      	b.n	8007d90 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 fb10 	bl	800938c <USB_CoreReset>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d106      	bne.n	8007d84 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	639a      	str	r2, [r3, #56]	; 0x38
 8007d82:	e005      	b.n	8007d90 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d10b      	bne.n	8007dae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f043 0206 	orr.w	r2, r3, #6
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f043 0220 	orr.w	r2, r3, #32
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dba:	b004      	add	sp, #16
 8007dbc:	4770      	bx	lr
	...

08007dc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007dce:	79fb      	ldrb	r3, [r7, #7]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d165      	bne.n	8007ea0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	4a41      	ldr	r2, [pc, #260]	; (8007edc <USB_SetTurnaroundTime+0x11c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d906      	bls.n	8007dea <USB_SetTurnaroundTime+0x2a>
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4a40      	ldr	r2, [pc, #256]	; (8007ee0 <USB_SetTurnaroundTime+0x120>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d202      	bcs.n	8007dea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007de4:	230f      	movs	r3, #15
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	e062      	b.n	8007eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	4a3c      	ldr	r2, [pc, #240]	; (8007ee0 <USB_SetTurnaroundTime+0x120>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d306      	bcc.n	8007e00 <USB_SetTurnaroundTime+0x40>
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	4a3b      	ldr	r2, [pc, #236]	; (8007ee4 <USB_SetTurnaroundTime+0x124>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d202      	bcs.n	8007e00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007dfa:	230e      	movs	r3, #14
 8007dfc:	617b      	str	r3, [r7, #20]
 8007dfe:	e057      	b.n	8007eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	4a38      	ldr	r2, [pc, #224]	; (8007ee4 <USB_SetTurnaroundTime+0x124>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d306      	bcc.n	8007e16 <USB_SetTurnaroundTime+0x56>
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	4a37      	ldr	r2, [pc, #220]	; (8007ee8 <USB_SetTurnaroundTime+0x128>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d202      	bcs.n	8007e16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e10:	230d      	movs	r3, #13
 8007e12:	617b      	str	r3, [r7, #20]
 8007e14:	e04c      	b.n	8007eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	4a33      	ldr	r2, [pc, #204]	; (8007ee8 <USB_SetTurnaroundTime+0x128>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d306      	bcc.n	8007e2c <USB_SetTurnaroundTime+0x6c>
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	4a32      	ldr	r2, [pc, #200]	; (8007eec <USB_SetTurnaroundTime+0x12c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d802      	bhi.n	8007e2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007e26:	230c      	movs	r3, #12
 8007e28:	617b      	str	r3, [r7, #20]
 8007e2a:	e041      	b.n	8007eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	4a2f      	ldr	r2, [pc, #188]	; (8007eec <USB_SetTurnaroundTime+0x12c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d906      	bls.n	8007e42 <USB_SetTurnaroundTime+0x82>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	4a2e      	ldr	r2, [pc, #184]	; (8007ef0 <USB_SetTurnaroundTime+0x130>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d802      	bhi.n	8007e42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007e3c:	230b      	movs	r3, #11
 8007e3e:	617b      	str	r3, [r7, #20]
 8007e40:	e036      	b.n	8007eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	4a2a      	ldr	r2, [pc, #168]	; (8007ef0 <USB_SetTurnaroundTime+0x130>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d906      	bls.n	8007e58 <USB_SetTurnaroundTime+0x98>
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	4a29      	ldr	r2, [pc, #164]	; (8007ef4 <USB_SetTurnaroundTime+0x134>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d802      	bhi.n	8007e58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007e52:	230a      	movs	r3, #10
 8007e54:	617b      	str	r3, [r7, #20]
 8007e56:	e02b      	b.n	8007eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4a26      	ldr	r2, [pc, #152]	; (8007ef4 <USB_SetTurnaroundTime+0x134>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d906      	bls.n	8007e6e <USB_SetTurnaroundTime+0xae>
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4a25      	ldr	r2, [pc, #148]	; (8007ef8 <USB_SetTurnaroundTime+0x138>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d202      	bcs.n	8007e6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007e68:	2309      	movs	r3, #9
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	e020      	b.n	8007eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	4a21      	ldr	r2, [pc, #132]	; (8007ef8 <USB_SetTurnaroundTime+0x138>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d306      	bcc.n	8007e84 <USB_SetTurnaroundTime+0xc4>
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	4a20      	ldr	r2, [pc, #128]	; (8007efc <USB_SetTurnaroundTime+0x13c>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d802      	bhi.n	8007e84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007e7e:	2308      	movs	r3, #8
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	e015      	b.n	8007eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	4a1d      	ldr	r2, [pc, #116]	; (8007efc <USB_SetTurnaroundTime+0x13c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d906      	bls.n	8007e9a <USB_SetTurnaroundTime+0xda>
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4a1c      	ldr	r2, [pc, #112]	; (8007f00 <USB_SetTurnaroundTime+0x140>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d202      	bcs.n	8007e9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007e94:	2307      	movs	r3, #7
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	e00a      	b.n	8007eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007e9a:	2306      	movs	r3, #6
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	e007      	b.n	8007eb0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d102      	bne.n	8007eac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007ea6:	2309      	movs	r3, #9
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	e001      	b.n	8007eb0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007eac:	2309      	movs	r3, #9
 8007eae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	029b      	lsls	r3, r3, #10
 8007ec4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	371c      	adds	r7, #28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	00d8acbf 	.word	0x00d8acbf
 8007ee0:	00e4e1c0 	.word	0x00e4e1c0
 8007ee4:	00f42400 	.word	0x00f42400
 8007ee8:	01067380 	.word	0x01067380
 8007eec:	011a499f 	.word	0x011a499f
 8007ef0:	01312cff 	.word	0x01312cff
 8007ef4:	014ca43f 	.word	0x014ca43f
 8007ef8:	016e3600 	.word	0x016e3600
 8007efc:	01a6ab1f 	.word	0x01a6ab1f
 8007f00:	01e84800 	.word	0x01e84800

08007f04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f043 0201 	orr.w	r2, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f023 0201 	bic.w	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f64:	78fb      	ldrb	r3, [r7, #3]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d115      	bne.n	8007f96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f76:	2001      	movs	r0, #1
 8007f78:	f7fa ff6e 	bl	8002e58 <HAL_Delay>
      ms++;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f001 f972 	bl	800926c <USB_GetMode>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d01e      	beq.n	8007fcc <USB_SetCurrentMode+0x84>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b31      	cmp	r3, #49	; 0x31
 8007f92:	d9f0      	bls.n	8007f76 <USB_SetCurrentMode+0x2e>
 8007f94:	e01a      	b.n	8007fcc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f96:	78fb      	ldrb	r3, [r7, #3]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d115      	bne.n	8007fc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fa8:	2001      	movs	r0, #1
 8007faa:	f7fa ff55 	bl	8002e58 <HAL_Delay>
      ms++;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 f959 	bl	800926c <USB_GetMode>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <USB_SetCurrentMode+0x84>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b31      	cmp	r3, #49	; 0x31
 8007fc4:	d9f0      	bls.n	8007fa8 <USB_SetCurrentMode+0x60>
 8007fc6:	e001      	b.n	8007fcc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e005      	b.n	8007fd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b32      	cmp	r3, #50	; 0x32
 8007fd0:	d101      	bne.n	8007fd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	e009      	b.n	8008014 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	3340      	adds	r3, #64	; 0x40
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3301      	adds	r3, #1
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	2b0e      	cmp	r3, #14
 8008018:	d9f2      	bls.n	8008000 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800801a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d11c      	bne.n	800805a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800802e:	f043 0302 	orr.w	r3, r3, #2
 8008032:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008038:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008044:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008050:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	639a      	str	r2, [r3, #56]	; 0x38
 8008058:	e00b      	b.n	8008072 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008078:	461a      	mov	r2, r3
 800807a:	2300      	movs	r3, #0
 800807c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008084:	4619      	mov	r1, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808c:	461a      	mov	r2, r3
 800808e:	680b      	ldr	r3, [r1, #0]
 8008090:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	2b01      	cmp	r3, #1
 8008096:	d10c      	bne.n	80080b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d104      	bne.n	80080a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800809e:	2100      	movs	r1, #0
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f945 	bl	8008330 <USB_SetDevSpeed>
 80080a6:	e008      	b.n	80080ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080a8:	2101      	movs	r1, #1
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f940 	bl	8008330 <USB_SetDevSpeed>
 80080b0:	e003      	b.n	80080ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80080b2:	2103      	movs	r1, #3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f93b 	bl	8008330 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080ba:	2110      	movs	r1, #16
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f8f3 	bl	80082a8 <USB_FlushTxFifo>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f90f 	bl	80082f0 <USB_FlushRxFifo>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e2:	461a      	mov	r2, r3
 80080e4:	2300      	movs	r3, #0
 80080e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ee:	461a      	mov	r2, r3
 80080f0:	2300      	movs	r3, #0
 80080f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fa:	461a      	mov	r2, r3
 80080fc:	2300      	movs	r3, #0
 80080fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008100:	2300      	movs	r3, #0
 8008102:	613b      	str	r3, [r7, #16]
 8008104:	e043      	b.n	800818e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800811c:	d118      	bne.n	8008150 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10a      	bne.n	800813a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008130:	461a      	mov	r2, r3
 8008132:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	e013      	b.n	8008162 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008146:	461a      	mov	r2, r3
 8008148:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	e008      	b.n	8008162 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815c:	461a      	mov	r2, r3
 800815e:	2300      	movs	r3, #0
 8008160:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816e:	461a      	mov	r2, r3
 8008170:	2300      	movs	r3, #0
 8008172:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008180:	461a      	mov	r2, r3
 8008182:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008186:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	3301      	adds	r3, #1
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	429a      	cmp	r2, r3
 8008194:	d3b7      	bcc.n	8008106 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008196:	2300      	movs	r3, #0
 8008198:	613b      	str	r3, [r7, #16]
 800819a:	e043      	b.n	8008224 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081b2:	d118      	bne.n	80081e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10a      	bne.n	80081d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c6:	461a      	mov	r2, r3
 80081c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	e013      	b.n	80081f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081dc:	461a      	mov	r2, r3
 80081de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	e008      	b.n	80081f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f2:	461a      	mov	r2, r3
 80081f4:	2300      	movs	r3, #0
 80081f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	015a      	lsls	r2, r3, #5
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	4413      	add	r3, r2
 8008200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008204:	461a      	mov	r2, r3
 8008206:	2300      	movs	r3, #0
 8008208:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	4413      	add	r3, r2
 8008212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008216:	461a      	mov	r2, r3
 8008218:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800821c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	3301      	adds	r3, #1
 8008222:	613b      	str	r3, [r7, #16]
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	429a      	cmp	r2, r3
 800822a:	d3b7      	bcc.n	800819c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800823a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800823e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800824c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	2b00      	cmp	r3, #0
 8008252:	d105      	bne.n	8008260 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f043 0210 	orr.w	r2, r3, #16
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	699a      	ldr	r2, [r3, #24]
 8008264:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <USB_DevInit+0x2c4>)
 8008266:	4313      	orrs	r3, r2
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800826c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826e:	2b00      	cmp	r3, #0
 8008270:	d005      	beq.n	800827e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	f043 0208 	orr.w	r2, r3, #8
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800827e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d107      	bne.n	8008294 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800828c:	f043 0304 	orr.w	r3, r3, #4
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082a0:	b004      	add	sp, #16
 80082a2:	4770      	bx	lr
 80082a4:	803c3800 	.word	0x803c3800

080082a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	019b      	lsls	r3, r3, #6
 80082ba:	f043 0220 	orr.w	r2, r3, #32
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3301      	adds	r3, #1
 80082c6:	60fb      	str	r3, [r7, #12]
 80082c8:	4a08      	ldr	r2, [pc, #32]	; (80082ec <USB_FlushTxFifo+0x44>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d901      	bls.n	80082d2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e006      	b.n	80082e0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d0f1      	beq.n	80082c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	00030d40 	.word	0x00030d40

080082f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2210      	movs	r2, #16
 8008300:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3301      	adds	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	4a08      	ldr	r2, [pc, #32]	; (800832c <USB_FlushRxFifo+0x3c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d901      	bls.n	8008312 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e006      	b.n	8008320 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	f003 0310 	and.w	r3, r3, #16
 800831a:	2b10      	cmp	r3, #16
 800831c:	d0f1      	beq.n	8008302 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	00030d40 	.word	0x00030d40

08008330 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	68f9      	ldr	r1, [r7, #12]
 800834c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008350:	4313      	orrs	r3, r2
 8008352:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008362:	b480      	push	{r7}
 8008364:	b087      	sub	sp, #28
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f003 0306 	and.w	r3, r3, #6
 800837a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d102      	bne.n	8008388 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008382:	2300      	movs	r3, #0
 8008384:	75fb      	strb	r3, [r7, #23]
 8008386:	e00a      	b.n	800839e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d002      	beq.n	8008394 <USB_GetDevSpeed+0x32>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b06      	cmp	r3, #6
 8008392:	d102      	bne.n	800839a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008394:	2302      	movs	r3, #2
 8008396:	75fb      	strb	r3, [r7, #23]
 8008398:	e001      	b.n	800839e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800839a:	230f      	movs	r3, #15
 800839c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800839e:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	371c      	adds	r7, #28
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	785b      	ldrb	r3, [r3, #1]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d13a      	bne.n	800843e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ce:	69da      	ldr	r2, [r3, #28]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	f003 030f 	and.w	r3, r3, #15
 80083d8:	2101      	movs	r1, #1
 80083da:	fa01 f303 	lsl.w	r3, r1, r3
 80083de:	b29b      	uxth	r3, r3
 80083e0:	68f9      	ldr	r1, [r7, #12]
 80083e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083e6:	4313      	orrs	r3, r2
 80083e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d155      	bne.n	80084ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	78db      	ldrb	r3, [r3, #3]
 800841a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800841c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	059b      	lsls	r3, r3, #22
 8008422:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008424:	4313      	orrs	r3, r2
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	0151      	lsls	r1, r2, #5
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	440a      	add	r2, r1
 800842e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	e036      	b.n	80084ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008444:	69da      	ldr	r2, [r3, #28]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	f003 030f 	and.w	r3, r3, #15
 800844e:	2101      	movs	r1, #1
 8008450:	fa01 f303 	lsl.w	r3, r1, r3
 8008454:	041b      	lsls	r3, r3, #16
 8008456:	68f9      	ldr	r1, [r7, #12]
 8008458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800845c:	4313      	orrs	r3, r2
 800845e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	015a      	lsls	r2, r3, #5
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4413      	add	r3, r2
 8008468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d11a      	bne.n	80084ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	78db      	ldrb	r3, [r3, #3]
 8008490:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008492:	430b      	orrs	r3, r1
 8008494:	4313      	orrs	r3, r2
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	0151      	lsls	r1, r2, #5
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	440a      	add	r2, r1
 800849e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
	...

080084bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	785b      	ldrb	r3, [r3, #1]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d161      	bne.n	800859c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084ee:	d11f      	bne.n	8008530 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	0151      	lsls	r1, r2, #5
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	440a      	add	r2, r1
 8008506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800850a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800850e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	0151      	lsls	r1, r2, #5
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	440a      	add	r2, r1
 8008526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800852a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800852e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	f003 030f 	and.w	r3, r3, #15
 8008540:	2101      	movs	r1, #1
 8008542:	fa01 f303 	lsl.w	r3, r1, r3
 8008546:	b29b      	uxth	r3, r3
 8008548:	43db      	mvns	r3, r3
 800854a:	68f9      	ldr	r1, [r7, #12]
 800854c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008550:	4013      	ands	r3, r2
 8008552:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855a:	69da      	ldr	r2, [r3, #28]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	f003 030f 	and.w	r3, r3, #15
 8008564:	2101      	movs	r1, #1
 8008566:	fa01 f303 	lsl.w	r3, r1, r3
 800856a:	b29b      	uxth	r3, r3
 800856c:	43db      	mvns	r3, r3
 800856e:	68f9      	ldr	r1, [r7, #12]
 8008570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008574:	4013      	ands	r3, r2
 8008576:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4413      	add	r3, r2
 8008580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	0159      	lsls	r1, r3, #5
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	440b      	add	r3, r1
 800858e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008592:	4619      	mov	r1, r3
 8008594:	4b35      	ldr	r3, [pc, #212]	; (800866c <USB_DeactivateEndpoint+0x1b0>)
 8008596:	4013      	ands	r3, r2
 8008598:	600b      	str	r3, [r1, #0]
 800859a:	e060      	b.n	800865e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085b2:	d11f      	bne.n	80085f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	0151      	lsls	r1, r2, #5
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	440a      	add	r2, r1
 80085ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	0151      	lsls	r1, r2, #5
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	440a      	add	r2, r1
 80085ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	f003 030f 	and.w	r3, r3, #15
 8008604:	2101      	movs	r1, #1
 8008606:	fa01 f303 	lsl.w	r3, r1, r3
 800860a:	041b      	lsls	r3, r3, #16
 800860c:	43db      	mvns	r3, r3
 800860e:	68f9      	ldr	r1, [r7, #12]
 8008610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008614:	4013      	ands	r3, r2
 8008616:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861e:	69da      	ldr	r2, [r3, #28]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	f003 030f 	and.w	r3, r3, #15
 8008628:	2101      	movs	r1, #1
 800862a:	fa01 f303 	lsl.w	r3, r1, r3
 800862e:	041b      	lsls	r3, r3, #16
 8008630:	43db      	mvns	r3, r3
 8008632:	68f9      	ldr	r1, [r7, #12]
 8008634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008638:	4013      	ands	r3, r2
 800863a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	0159      	lsls	r1, r3, #5
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	440b      	add	r3, r1
 8008652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008656:	4619      	mov	r1, r3
 8008658:	4b05      	ldr	r3, [pc, #20]	; (8008670 <USB_DeactivateEndpoint+0x1b4>)
 800865a:	4013      	ands	r3, r2
 800865c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	ec337800 	.word	0xec337800
 8008670:	eff37800 	.word	0xeff37800

08008674 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b08a      	sub	sp, #40	; 0x28
 8008678:	af02      	add	r7, sp, #8
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	785b      	ldrb	r3, [r3, #1]
 8008690:	2b01      	cmp	r3, #1
 8008692:	f040 815c 	bne.w	800894e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d132      	bne.n	8008704 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	69ba      	ldr	r2, [r7, #24]
 80086ae:	0151      	lsls	r1, r2, #5
 80086b0:	69fa      	ldr	r2, [r7, #28]
 80086b2:	440a      	add	r2, r1
 80086b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	0151      	lsls	r1, r2, #5
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	440a      	add	r2, r1
 80086d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	0151      	lsls	r1, r2, #5
 80086f4:	69fa      	ldr	r2, [r7, #28]
 80086f6:	440a      	add	r2, r1
 80086f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fc:	0cdb      	lsrs	r3, r3, #19
 80086fe:	04db      	lsls	r3, r3, #19
 8008700:	6113      	str	r3, [r2, #16]
 8008702:	e074      	b.n	80087ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	015a      	lsls	r2, r3, #5
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	4413      	add	r3, r2
 800870c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	69ba      	ldr	r2, [r7, #24]
 8008714:	0151      	lsls	r1, r2, #5
 8008716:	69fa      	ldr	r2, [r7, #28]
 8008718:	440a      	add	r2, r1
 800871a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800871e:	0cdb      	lsrs	r3, r3, #19
 8008720:	04db      	lsls	r3, r3, #19
 8008722:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	4413      	add	r3, r2
 800872c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	0151      	lsls	r1, r2, #5
 8008736:	69fa      	ldr	r2, [r7, #28]
 8008738:	440a      	add	r2, r1
 800873a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800873e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008742:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008754:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	6959      	ldr	r1, [r3, #20]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	440b      	add	r3, r1
 8008760:	1e59      	subs	r1, r3, #1
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	fbb1 f3f3 	udiv	r3, r1, r3
 800876a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800876c:	4b9d      	ldr	r3, [pc, #628]	; (80089e4 <USB_EPStartXfer+0x370>)
 800876e:	400b      	ands	r3, r1
 8008770:	69b9      	ldr	r1, [r7, #24]
 8008772:	0148      	lsls	r0, r1, #5
 8008774:	69f9      	ldr	r1, [r7, #28]
 8008776:	4401      	add	r1, r0
 8008778:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800877c:	4313      	orrs	r3, r2
 800877e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878c:	691a      	ldr	r2, [r3, #16]
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008796:	69b9      	ldr	r1, [r7, #24]
 8008798:	0148      	lsls	r0, r1, #5
 800879a:	69f9      	ldr	r1, [r7, #28]
 800879c:	4401      	add	r1, r0
 800879e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80087a2:	4313      	orrs	r3, r2
 80087a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	78db      	ldrb	r3, [r3, #3]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d11f      	bne.n	80087ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	0151      	lsls	r1, r2, #5
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	440a      	add	r2, r1
 80087c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80087cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	0151      	lsls	r1, r2, #5
 80087e0:	69fa      	ldr	r2, [r7, #28]
 80087e2:	440a      	add	r2, r1
 80087e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80087ee:	79fb      	ldrb	r3, [r7, #7]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d14b      	bne.n	800888c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d009      	beq.n	8008810 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	015a      	lsls	r2, r3, #5
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	4413      	add	r3, r2
 8008804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008808:	461a      	mov	r2, r3
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	78db      	ldrb	r3, [r3, #3]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d128      	bne.n	800886a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008824:	2b00      	cmp	r3, #0
 8008826:	d110      	bne.n	800884a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	69fa      	ldr	r2, [r7, #28]
 800883c:	440a      	add	r2, r1
 800883e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008842:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	e00f      	b.n	800886a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	4413      	add	r3, r2
 8008852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	69ba      	ldr	r2, [r7, #24]
 800885a:	0151      	lsls	r1, r2, #5
 800885c:	69fa      	ldr	r2, [r7, #28]
 800885e:	440a      	add	r2, r1
 8008860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008868:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	69ba      	ldr	r2, [r7, #24]
 800887a:	0151      	lsls	r1, r2, #5
 800887c:	69fa      	ldr	r2, [r7, #28]
 800887e:	440a      	add	r2, r1
 8008880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008884:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	e12f      	b.n	8008aec <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	0151      	lsls	r1, r2, #5
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	440a      	add	r2, r1
 80088a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	78db      	ldrb	r3, [r3, #3]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d015      	beq.n	80088e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 8117 	beq.w	8008aec <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	f003 030f 	and.w	r3, r3, #15
 80088ce:	2101      	movs	r1, #1
 80088d0:	fa01 f303 	lsl.w	r3, r1, r3
 80088d4:	69f9      	ldr	r1, [r7, #28]
 80088d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088da:	4313      	orrs	r3, r2
 80088dc:	634b      	str	r3, [r1, #52]	; 0x34
 80088de:	e105      	b.n	8008aec <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d110      	bne.n	8008912 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	0151      	lsls	r1, r2, #5
 8008902:	69fa      	ldr	r2, [r7, #28]
 8008904:	440a      	add	r2, r1
 8008906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800890a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	e00f      	b.n	8008932 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	0151      	lsls	r1, r2, #5
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	440a      	add	r2, r1
 8008928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800892c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008930:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	68d9      	ldr	r1, [r3, #12]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	781a      	ldrb	r2, [r3, #0]
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	b298      	uxth	r0, r3
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	4603      	mov	r3, r0
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 fa2b 	bl	8008da2 <USB_WritePacket>
 800894c:	e0ce      	b.n	8008aec <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	0151      	lsls	r1, r2, #5
 8008960:	69fa      	ldr	r2, [r7, #28]
 8008962:	440a      	add	r2, r1
 8008964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008968:	0cdb      	lsrs	r3, r3, #19
 800896a:	04db      	lsls	r3, r3, #19
 800896c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	0151      	lsls	r1, r2, #5
 8008980:	69fa      	ldr	r2, [r7, #28]
 8008982:	440a      	add	r2, r1
 8008984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008988:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800898c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008990:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d126      	bne.n	80089e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a6:	691a      	ldr	r2, [r3, #16]
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089b0:	69b9      	ldr	r1, [r7, #24]
 80089b2:	0148      	lsls	r0, r1, #5
 80089b4:	69f9      	ldr	r1, [r7, #28]
 80089b6:	4401      	add	r1, r0
 80089b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089bc:	4313      	orrs	r3, r2
 80089be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	69ba      	ldr	r2, [r7, #24]
 80089d0:	0151      	lsls	r1, r2, #5
 80089d2:	69fa      	ldr	r2, [r7, #28]
 80089d4:	440a      	add	r2, r1
 80089d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089de:	6113      	str	r3, [r2, #16]
 80089e0:	e036      	b.n	8008a50 <USB_EPStartXfer+0x3dc>
 80089e2:	bf00      	nop
 80089e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	695a      	ldr	r2, [r3, #20]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	4413      	add	r3, r2
 80089f2:	1e5a      	subs	r2, r3, #1
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089fc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	015a      	lsls	r2, r3, #5
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0a:	691a      	ldr	r2, [r3, #16]
 8008a0c:	8afb      	ldrh	r3, [r7, #22]
 8008a0e:	04d9      	lsls	r1, r3, #19
 8008a10:	4b39      	ldr	r3, [pc, #228]	; (8008af8 <USB_EPStartXfer+0x484>)
 8008a12:	400b      	ands	r3, r1
 8008a14:	69b9      	ldr	r1, [r7, #24]
 8008a16:	0148      	lsls	r0, r1, #5
 8008a18:	69f9      	ldr	r1, [r7, #28]
 8008a1a:	4401      	add	r1, r0
 8008a1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a20:	4313      	orrs	r3, r2
 8008a22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	015a      	lsls	r2, r3, #5
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a30:	691a      	ldr	r2, [r3, #16]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	8af9      	ldrh	r1, [r7, #22]
 8008a38:	fb01 f303 	mul.w	r3, r1, r3
 8008a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a40:	69b9      	ldr	r1, [r7, #24]
 8008a42:	0148      	lsls	r0, r1, #5
 8008a44:	69f9      	ldr	r1, [r7, #28]
 8008a46:	4401      	add	r1, r0
 8008a48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a50:	79fb      	ldrb	r3, [r7, #7]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d10d      	bne.n	8008a72 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d009      	beq.n	8008a72 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	68d9      	ldr	r1, [r3, #12]
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6e:	460a      	mov	r2, r1
 8008a70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	78db      	ldrb	r3, [r3, #3]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d128      	bne.n	8008acc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d110      	bne.n	8008aac <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	0151      	lsls	r1, r2, #5
 8008a9c:	69fa      	ldr	r2, [r7, #28]
 8008a9e:	440a      	add	r2, r1
 8008aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008aa8:	6013      	str	r3, [r2, #0]
 8008aaa:	e00f      	b.n	8008acc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	0151      	lsls	r1, r2, #5
 8008abe:	69fa      	ldr	r2, [r7, #28]
 8008ac0:	440a      	add	r2, r1
 8008ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	0151      	lsls	r1, r2, #5
 8008ade:	69fa      	ldr	r2, [r7, #28]
 8008ae0:	440a      	add	r2, r1
 8008ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008aea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3720      	adds	r7, #32
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	1ff80000 	.word	0x1ff80000

08008afc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	4613      	mov	r3, r2
 8008b08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	785b      	ldrb	r3, [r3, #1]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	f040 80cd 	bne.w	8008cb8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d132      	bne.n	8008b8c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	0151      	lsls	r1, r2, #5
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	440a      	add	r2, r1
 8008b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	0151      	lsls	r1, r2, #5
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	440a      	add	r2, r1
 8008b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	0151      	lsls	r1, r2, #5
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	440a      	add	r2, r1
 8008b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b84:	0cdb      	lsrs	r3, r3, #19
 8008b86:	04db      	lsls	r3, r3, #19
 8008b88:	6113      	str	r3, [r2, #16]
 8008b8a:	e04e      	b.n	8008c2a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	0151      	lsls	r1, r2, #5
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	440a      	add	r2, r1
 8008ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba6:	0cdb      	lsrs	r3, r3, #19
 8008ba8:	04db      	lsls	r3, r3, #19
 8008baa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	0151      	lsls	r1, r2, #5
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	440a      	add	r2, r1
 8008bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008bca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008bce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	695a      	ldr	r2, [r3, #20]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d903      	bls.n	8008be4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	689a      	ldr	r2, [r3, #8]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	0151      	lsls	r1, r2, #5
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	440a      	add	r2, r1
 8008bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c10:	691a      	ldr	r2, [r3, #16]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c1a:	6939      	ldr	r1, [r7, #16]
 8008c1c:	0148      	lsls	r0, r1, #5
 8008c1e:	6979      	ldr	r1, [r7, #20]
 8008c20:	4401      	add	r1, r0
 8008c22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c26:	4313      	orrs	r3, r2
 8008c28:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008c2a:	79fb      	ldrb	r3, [r7, #7]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d11e      	bne.n	8008c6e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d009      	beq.n	8008c4c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	015a      	lsls	r2, r3, #5
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c44:	461a      	mov	r2, r3
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	0151      	lsls	r1, r2, #5
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	440a      	add	r2, r1
 8008c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c6a:	6013      	str	r3, [r2, #0]
 8008c6c:	e092      	b.n	8008d94 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	0151      	lsls	r1, r2, #5
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	440a      	add	r2, r1
 8008c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c8c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d07e      	beq.n	8008d94 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	f003 030f 	and.w	r3, r3, #15
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cac:	6979      	ldr	r1, [r7, #20]
 8008cae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	634b      	str	r3, [r1, #52]	; 0x34
 8008cb6:	e06d      	b.n	8008d94 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	015a      	lsls	r2, r3, #5
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	0151      	lsls	r1, r2, #5
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	440a      	add	r2, r1
 8008cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cd2:	0cdb      	lsrs	r3, r3, #19
 8008cd4:	04db      	lsls	r3, r3, #19
 8008cd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	0151      	lsls	r1, r2, #5
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	440a      	add	r2, r1
 8008cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cfa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d003      	beq.n	8008d0c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	689a      	ldr	r2, [r3, #8]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	0151      	lsls	r1, r2, #5
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	440a      	add	r2, r1
 8008d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d38:	691a      	ldr	r2, [r3, #16]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d42:	6939      	ldr	r1, [r7, #16]
 8008d44:	0148      	lsls	r0, r1, #5
 8008d46:	6979      	ldr	r1, [r7, #20]
 8008d48:	4401      	add	r1, r0
 8008d4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008d52:	79fb      	ldrb	r3, [r7, #7]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d10d      	bne.n	8008d74 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d009      	beq.n	8008d74 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	68d9      	ldr	r1, [r3, #12]
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d70:	460a      	mov	r2, r1
 8008d72:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	015a      	lsls	r2, r3, #5
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	0151      	lsls	r1, r2, #5
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	440a      	add	r2, r1
 8008d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	371c      	adds	r7, #28
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b089      	sub	sp, #36	; 0x24
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	4611      	mov	r1, r2
 8008dae:	461a      	mov	r2, r3
 8008db0:	460b      	mov	r3, r1
 8008db2:	71fb      	strb	r3, [r7, #7]
 8008db4:	4613      	mov	r3, r2
 8008db6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008dc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d123      	bne.n	8008e10 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008dc8:	88bb      	ldrh	r3, [r7, #4]
 8008dca:	3303      	adds	r3, #3
 8008dcc:	089b      	lsrs	r3, r3, #2
 8008dce:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	61bb      	str	r3, [r7, #24]
 8008dd4:	e018      	b.n	8008e08 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008dd6:	79fb      	ldrb	r3, [r7, #7]
 8008dd8:	031a      	lsls	r2, r3, #12
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de2:	461a      	mov	r2, r3
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	3301      	adds	r3, #1
 8008dee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	3301      	adds	r3, #1
 8008df4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	3301      	adds	r3, #1
 8008e06:	61bb      	str	r3, [r7, #24]
 8008e08:	69ba      	ldr	r2, [r7, #24]
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d3e2      	bcc.n	8008dd6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3724      	adds	r7, #36	; 0x24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b08b      	sub	sp, #44	; 0x2c
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e34:	88fb      	ldrh	r3, [r7, #6]
 8008e36:	089b      	lsrs	r3, r3, #2
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e3c:	88fb      	ldrh	r3, [r7, #6]
 8008e3e:	f003 0303 	and.w	r3, r3, #3
 8008e42:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e44:	2300      	movs	r3, #0
 8008e46:	623b      	str	r3, [r7, #32]
 8008e48:	e014      	b.n	8008e74 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	3301      	adds	r3, #1
 8008e5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	3301      	adds	r3, #1
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	3301      	adds	r3, #1
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	3301      	adds	r3, #1
 8008e72:	623b      	str	r3, [r7, #32]
 8008e74:	6a3a      	ldr	r2, [r7, #32]
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d3e6      	bcc.n	8008e4a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e7c:	8bfb      	ldrh	r3, [r7, #30]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d01e      	beq.n	8008ec0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	f107 0310 	add.w	r3, r7, #16
 8008e92:	6812      	ldr	r2, [r2, #0]
 8008e94:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	701a      	strb	r2, [r3, #0]
      i++;
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	623b      	str	r3, [r7, #32]
      pDest++;
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008eb4:	8bfb      	ldrh	r3, [r7, #30]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008eba:	8bfb      	ldrh	r3, [r7, #30]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1ea      	bne.n	8008e96 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	372c      	adds	r7, #44	; 0x2c
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b085      	sub	sp, #20
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	785b      	ldrb	r3, [r3, #1]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d12c      	bne.n	8008f44 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	db12      	blt.n	8008f22 <USB_EPSetStall+0x54>
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00f      	beq.n	8008f22 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	0151      	lsls	r1, r2, #5
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	440a      	add	r2, r1
 8008f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f20:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	0151      	lsls	r1, r2, #5
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	440a      	add	r2, r1
 8008f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	e02b      	b.n	8008f9c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	db12      	blt.n	8008f7c <USB_EPSetStall+0xae>
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00f      	beq.n	8008f7c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	0151      	lsls	r1, r2, #5
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	440a      	add	r2, r1
 8008f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f7a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	0151      	lsls	r1, r2, #5
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	440a      	add	r2, r1
 8008f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b085      	sub	sp, #20
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	785b      	ldrb	r3, [r3, #1]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d128      	bne.n	8009018 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	0151      	lsls	r1, r2, #5
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	440a      	add	r2, r1
 8008fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fe0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fe4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	78db      	ldrb	r3, [r3, #3]
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	d003      	beq.n	8008ff6 <USB_EPClearStall+0x4c>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	78db      	ldrb	r3, [r3, #3]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d138      	bne.n	8009068 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	0151      	lsls	r1, r2, #5
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	440a      	add	r2, r1
 800900c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	e027      	b.n	8009068 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009032:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009036:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	78db      	ldrb	r3, [r3, #3]
 800903c:	2b03      	cmp	r3, #3
 800903e:	d003      	beq.n	8009048 <USB_EPClearStall+0x9e>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	78db      	ldrb	r3, [r3, #3]
 8009044:	2b02      	cmp	r3, #2
 8009046:	d10f      	bne.n	8009068 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	0151      	lsls	r1, r2, #5
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	440a      	add	r2, r1
 800905e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009066:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009076:	b480      	push	{r7}
 8009078:	b085      	sub	sp, #20
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	460b      	mov	r3, r1
 8009080:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009094:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009098:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	78fb      	ldrb	r3, [r7, #3]
 80090a4:	011b      	lsls	r3, r3, #4
 80090a6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80090aa:	68f9      	ldr	r1, [r7, #12]
 80090ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b0:	4313      	orrs	r3, r2
 80090b2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b085      	sub	sp, #20
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090dc:	f023 0303 	bic.w	r3, r3, #3
 80090e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090f0:	f023 0302 	bic.w	r3, r3, #2
 80090f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800911e:	f023 0303 	bic.w	r3, r3, #3
 8009122:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009132:	f043 0302 	orr.w	r3, r3, #2
 8009136:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	4013      	ands	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800915e:	68fb      	ldr	r3, [r7, #12]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	4013      	ands	r3, r2
 800918e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	0c1b      	lsrs	r3, r3, #16
}
 8009194:	4618      	mov	r0, r3
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	4013      	ands	r3, r2
 80091c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	b29b      	uxth	r3, r3
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091e4:	78fb      	ldrb	r3, [r7, #3]
 80091e6:	015a      	lsls	r2, r3, #5
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4413      	add	r3, r2
 80091ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	4013      	ands	r3, r2
 8009200:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009202:	68bb      	ldr	r3, [r7, #8]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009210:	b480      	push	{r7}
 8009212:	b087      	sub	sp, #28
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009232:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	f003 030f 	and.w	r3, r3, #15
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	fa22 f303 	lsr.w	r3, r2, r3
 8009240:	01db      	lsls	r3, r3, #7
 8009242:	b2db      	uxtb	r3, r3
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	4313      	orrs	r3, r2
 8009248:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	4413      	add	r3, r2
 8009252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	4013      	ands	r3, r2
 800925c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800925e:	68bb      	ldr	r3, [r7, #8]
}
 8009260:	4618      	mov	r0, r3
 8009262:	371c      	adds	r7, #28
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	f003 0301 	and.w	r3, r3, #1
}
 800927c:	4618      	mov	r0, r3
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80092a6:	f023 0307 	bic.w	r3, r3, #7
 80092aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
	...

080092d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	460b      	mov	r3, r1
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	333c      	adds	r3, #60	; 0x3c
 80092e6:	3304      	adds	r3, #4
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	4a26      	ldr	r2, [pc, #152]	; (8009388 <USB_EP0_OutStart+0xb8>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d90a      	bls.n	800930a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009304:	d101      	bne.n	800930a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	e037      	b.n	800937a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009310:	461a      	mov	r2, r3
 8009312:	2300      	movs	r3, #0
 8009314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009324:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009328:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009338:	f043 0318 	orr.w	r3, r3, #24
 800933c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009350:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009352:	7afb      	ldrb	r3, [r7, #11]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d10f      	bne.n	8009378 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800935e:	461a      	mov	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009372:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009376:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	371c      	adds	r7, #28
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	4f54300a 	.word	0x4f54300a

0800938c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3301      	adds	r3, #1
 800939c:	60fb      	str	r3, [r7, #12]
 800939e:	4a13      	ldr	r2, [pc, #76]	; (80093ec <USB_CoreReset+0x60>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d901      	bls.n	80093a8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e01a      	b.n	80093de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	daf3      	bge.n	8009398 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	f043 0201 	orr.w	r2, r3, #1
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3301      	adds	r3, #1
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	4a09      	ldr	r2, [pc, #36]	; (80093ec <USB_CoreReset+0x60>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d901      	bls.n	80093d0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e006      	b.n	80093de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d0f1      	beq.n	80093c0 <USB_CoreReset+0x34>

  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	00030d40 	.word	0x00030d40

080093f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80093f4:	4904      	ldr	r1, [pc, #16]	; (8009408 <MX_FATFS_Init+0x18>)
 80093f6:	4805      	ldr	r0, [pc, #20]	; (800940c <MX_FATFS_Init+0x1c>)
 80093f8:	f001 fd0e 	bl	800ae18 <FATFS_LinkDriver>
 80093fc:	4603      	mov	r3, r0
 80093fe:	461a      	mov	r2, r3
 8009400:	4b03      	ldr	r3, [pc, #12]	; (8009410 <MX_FATFS_Init+0x20>)
 8009402:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009404:	bf00      	nop
 8009406:	bd80      	pop	{r7, pc}
 8009408:	20005414 	.word	0x20005414
 800940c:	2000000c 	.word	0x2000000c
 8009410:	20005418 	.word	0x20005418

08009414 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800941e:	4b06      	ldr	r3, [pc, #24]	; (8009438 <USER_initialize+0x24>)
 8009420:	2201      	movs	r2, #1
 8009422:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009424:	4b04      	ldr	r3, [pc, #16]	; (8009438 <USER_initialize+0x24>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800942a:	4618      	mov	r0, r3
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	20000009 	.word	0x20000009

0800943c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8009446:	4b06      	ldr	r3, [pc, #24]	; (8009460 <USER_status+0x24>)
 8009448:	2201      	movs	r2, #1
 800944a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800944c:	4b04      	ldr	r3, [pc, #16]	; (8009460 <USER_status+0x24>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009452:	4618      	mov	r0, r3
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	20000009 	.word	0x20000009

08009464 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	60b9      	str	r1, [r7, #8]
 800946c:	607a      	str	r2, [r7, #4]
 800946e:	603b      	str	r3, [r7, #0]
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8009474:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8009476:	4618      	mov	r0, r3
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009482:	b480      	push	{r7}
 8009484:	b085      	sub	sp, #20
 8009486:	af00      	add	r7, sp, #0
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
 800948c:	603b      	str	r3, [r7, #0]
 800948e:	4603      	mov	r3, r0
 8009490:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8009492:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	603a      	str	r2, [r7, #0]
 80094aa:	71fb      	strb	r3, [r7, #7]
 80094ac:	460b      	mov	r3, r1
 80094ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	73fb      	strb	r3, [r7, #15]
    return res;
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80094ce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80094d2:	f004 ff31 	bl	800e338 <USBD_static_malloc>
 80094d6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d105      	bne.n	80094ea <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80094e6:	2302      	movs	r3, #2
 80094e8:	e066      	b.n	80095b8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	7c1b      	ldrb	r3, [r3, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d119      	bne.n	800952e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80094fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094fe:	2202      	movs	r2, #2
 8009500:	2181      	movs	r1, #129	; 0x81
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f004 fdf5 	bl	800e0f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800950e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009512:	2202      	movs	r2, #2
 8009514:	2101      	movs	r1, #1
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f004 fdeb 	bl	800e0f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2210      	movs	r2, #16
 8009528:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800952c:	e016      	b.n	800955c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800952e:	2340      	movs	r3, #64	; 0x40
 8009530:	2202      	movs	r2, #2
 8009532:	2181      	movs	r1, #129	; 0x81
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f004 fddc 	bl	800e0f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2201      	movs	r2, #1
 800953e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009540:	2340      	movs	r3, #64	; 0x40
 8009542:	2202      	movs	r2, #2
 8009544:	2101      	movs	r1, #1
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f004 fdd3 	bl	800e0f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2210      	movs	r2, #16
 8009558:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800955c:	2308      	movs	r3, #8
 800955e:	2203      	movs	r2, #3
 8009560:	2182      	movs	r1, #130	; 0x82
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f004 fdc5 	bl	800e0f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	7c1b      	ldrb	r3, [r3, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d109      	bne.n	80095a6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800959c:	2101      	movs	r1, #1
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f004 fe96 	bl	800e2d0 <USBD_LL_PrepareReceive>
 80095a4:	e007      	b.n	80095b6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80095ac:	2340      	movs	r3, #64	; 0x40
 80095ae:	2101      	movs	r1, #1
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f004 fe8d 	bl	800e2d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80095cc:	2181      	movs	r1, #129	; 0x81
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f004 fdb5 	bl	800e13e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80095da:	2101      	movs	r1, #1
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f004 fdae 	bl	800e13e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80095ea:	2182      	movs	r1, #130	; 0x82
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f004 fda6 	bl	800e13e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00e      	beq.n	800962a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800961c:	4618      	mov	r0, r3
 800961e:	f004 fe99 	bl	800e354 <USBD_static_free>
    pdev->pClassData = NULL;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009644:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009646:	2300      	movs	r3, #0
 8009648:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800964a:	2300      	movs	r3, #0
 800964c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009658:	2303      	movs	r3, #3
 800965a:	e0af      	b.n	80097bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009664:	2b00      	cmp	r3, #0
 8009666:	d03f      	beq.n	80096e8 <USBD_CDC_Setup+0xb4>
 8009668:	2b20      	cmp	r3, #32
 800966a:	f040 809f 	bne.w	80097ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	88db      	ldrh	r3, [r3, #6]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d02e      	beq.n	80096d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	b25b      	sxtb	r3, r3
 800967c:	2b00      	cmp	r3, #0
 800967e:	da16      	bge.n	80096ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800968c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	88d2      	ldrh	r2, [r2, #6]
 8009692:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	88db      	ldrh	r3, [r3, #6]
 8009698:	2b07      	cmp	r3, #7
 800969a:	bf28      	it	cs
 800969c:	2307      	movcs	r3, #7
 800969e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	89fa      	ldrh	r2, [r7, #14]
 80096a4:	4619      	mov	r1, r3
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f001 fae9 	bl	800ac7e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80096ac:	e085      	b.n	80097ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	785a      	ldrb	r2, [r3, #1]
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	88db      	ldrh	r3, [r3, #6]
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80096c4:	6939      	ldr	r1, [r7, #16]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	88db      	ldrh	r3, [r3, #6]
 80096ca:	461a      	mov	r2, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 fb02 	bl	800acd6 <USBD_CtlPrepareRx>
      break;
 80096d2:	e072      	b.n	80097ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	7850      	ldrb	r0, [r2, #1]
 80096e0:	2200      	movs	r2, #0
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	4798      	blx	r3
      break;
 80096e6:	e068      	b.n	80097ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	785b      	ldrb	r3, [r3, #1]
 80096ec:	2b0b      	cmp	r3, #11
 80096ee:	d852      	bhi.n	8009796 <USBD_CDC_Setup+0x162>
 80096f0:	a201      	add	r2, pc, #4	; (adr r2, 80096f8 <USBD_CDC_Setup+0xc4>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	08009729 	.word	0x08009729
 80096fc:	080097a5 	.word	0x080097a5
 8009700:	08009797 	.word	0x08009797
 8009704:	08009797 	.word	0x08009797
 8009708:	08009797 	.word	0x08009797
 800970c:	08009797 	.word	0x08009797
 8009710:	08009797 	.word	0x08009797
 8009714:	08009797 	.word	0x08009797
 8009718:	08009797 	.word	0x08009797
 800971c:	08009797 	.word	0x08009797
 8009720:	08009753 	.word	0x08009753
 8009724:	0800977d 	.word	0x0800977d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b03      	cmp	r3, #3
 8009732:	d107      	bne.n	8009744 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009734:	f107 030a 	add.w	r3, r7, #10
 8009738:	2202      	movs	r2, #2
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 fa9e 	bl	800ac7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009742:	e032      	b.n	80097aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f001 fa28 	bl	800ab9c <USBD_CtlError>
            ret = USBD_FAIL;
 800974c:	2303      	movs	r3, #3
 800974e:	75fb      	strb	r3, [r7, #23]
          break;
 8009750:	e02b      	b.n	80097aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b03      	cmp	r3, #3
 800975c:	d107      	bne.n	800976e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800975e:	f107 030d 	add.w	r3, r7, #13
 8009762:	2201      	movs	r2, #1
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f001 fa89 	bl	800ac7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800976c:	e01d      	b.n	80097aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f001 fa13 	bl	800ab9c <USBD_CtlError>
            ret = USBD_FAIL;
 8009776:	2303      	movs	r3, #3
 8009778:	75fb      	strb	r3, [r7, #23]
          break;
 800977a:	e016      	b.n	80097aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b03      	cmp	r3, #3
 8009786:	d00f      	beq.n	80097a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 fa06 	bl	800ab9c <USBD_CtlError>
            ret = USBD_FAIL;
 8009790:	2303      	movs	r3, #3
 8009792:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009794:	e008      	b.n	80097a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f001 f9ff 	bl	800ab9c <USBD_CtlError>
          ret = USBD_FAIL;
 800979e:	2303      	movs	r3, #3
 80097a0:	75fb      	strb	r3, [r7, #23]
          break;
 80097a2:	e002      	b.n	80097aa <USBD_CDC_Setup+0x176>
          break;
 80097a4:	bf00      	nop
 80097a6:	e008      	b.n	80097ba <USBD_CDC_Setup+0x186>
          break;
 80097a8:	bf00      	nop
      }
      break;
 80097aa:	e006      	b.n	80097ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f001 f9f4 	bl	800ab9c <USBD_CtlError>
      ret = USBD_FAIL;
 80097b4:	2303      	movs	r3, #3
 80097b6:	75fb      	strb	r3, [r7, #23]
      break;
 80097b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80097ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e04f      	b.n	8009886 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80097ee:	78fa      	ldrb	r2, [r7, #3]
 80097f0:	6879      	ldr	r1, [r7, #4]
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	440b      	add	r3, r1
 80097fc:	3318      	adds	r3, #24
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d029      	beq.n	8009858 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009804:	78fa      	ldrb	r2, [r7, #3]
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	4613      	mov	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	440b      	add	r3, r1
 8009812:	3318      	adds	r3, #24
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	78f9      	ldrb	r1, [r7, #3]
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	460b      	mov	r3, r1
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	1a5b      	subs	r3, r3, r1
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4403      	add	r3, r0
 8009824:	3344      	adds	r3, #68	; 0x44
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	fbb2 f1f3 	udiv	r1, r2, r3
 800982c:	fb03 f301 	mul.w	r3, r3, r1
 8009830:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009832:	2b00      	cmp	r3, #0
 8009834:	d110      	bne.n	8009858 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009836:	78fa      	ldrb	r2, [r7, #3]
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	440b      	add	r3, r1
 8009844:	3318      	adds	r3, #24
 8009846:	2200      	movs	r2, #0
 8009848:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800984a:	78f9      	ldrb	r1, [r7, #3]
 800984c:	2300      	movs	r3, #0
 800984e:	2200      	movs	r2, #0
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f004 fd1c 	bl	800e28e <USBD_LL_Transmit>
 8009856:	e015      	b.n	8009884 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	2200      	movs	r2, #0
 800985c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00b      	beq.n	8009884 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009880:	78fa      	ldrb	r2, [r7, #3]
 8009882:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	460b      	mov	r3, r1
 8009898:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d101      	bne.n	80098b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e015      	b.n	80098dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80098b0:	78fb      	ldrb	r3, [r7, #3]
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f004 fd2c 	bl	800e312 <USBD_LL_GetRxDataSize>
 80098ba:	4602      	mov	r2, r0
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80098d6:	4611      	mov	r1, r2
 80098d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e01b      	b.n	8009936 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d015      	beq.n	8009934 <USBD_CDC_EP0_RxReady+0x50>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800990e:	2bff      	cmp	r3, #255	; 0xff
 8009910:	d010      	beq.n	8009934 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009920:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009928:	b292      	uxth	r2, r2
 800992a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	22ff      	movs	r2, #255	; 0xff
 8009930:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2243      	movs	r2, #67	; 0x43
 800994c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800994e:	4b03      	ldr	r3, [pc, #12]	; (800995c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009950:	4618      	mov	r0, r3
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	200000a8 	.word	0x200000a8

08009960 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2243      	movs	r2, #67	; 0x43
 800996c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800996e:	4b03      	ldr	r3, [pc, #12]	; (800997c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009970:	4618      	mov	r0, r3
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	20000064 	.word	0x20000064

08009980 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2243      	movs	r2, #67	; 0x43
 800998c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800998e:	4b03      	ldr	r3, [pc, #12]	; (800999c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009990:	4618      	mov	r0, r3
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	200000ec 	.word	0x200000ec

080099a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	220a      	movs	r2, #10
 80099ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80099ae:	4b03      	ldr	r3, [pc, #12]	; (80099bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	20000020 	.word	0x20000020

080099c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e004      	b.n	80099de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b087      	sub	sp, #28
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e008      	b.n	8009a1a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b085      	sub	sp, #20
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d101      	bne.n	8009a42 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e004      	b.n	8009a4c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e016      	b.n	8009aa4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	7c1b      	ldrb	r3, [r3, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d109      	bne.n	8009a92 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a88:	2101      	movs	r1, #1
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f004 fc20 	bl	800e2d0 <USBD_LL_PrepareReceive>
 8009a90:	e007      	b.n	8009aa2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a98:	2340      	movs	r3, #64	; 0x40
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f004 fc17 	bl	800e2d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e01f      	b.n	8009b04 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	79fa      	ldrb	r2, [r7, #7]
 8009af6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f004 fa93 	bl	800e024 <USBD_LL_Init>
 8009afe:	4603      	mov	r3, r0
 8009b00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b16:	2300      	movs	r3, #0
 8009b18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e016      	b.n	8009b52 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00b      	beq.n	8009b50 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b40:	f107 020e 	add.w	r2, r7, #14
 8009b44:	4610      	mov	r0, r2
 8009b46:	4798      	blx	r3
 8009b48:	4602      	mov	r2, r0
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f004 faaa 	bl	800e0bc <USBD_LL_Start>
 8009b68:	4603      	mov	r3, r0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009b94:	2303      	movs	r3, #3
 8009b96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d009      	beq.n	8009bb6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	78fa      	ldrb	r2, [r7, #3]
 8009bac:	4611      	mov	r1, r2
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	4798      	blx	r3
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d007      	beq.n	8009be6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	78fa      	ldrb	r2, [r7, #3]
 8009be0:	4611      	mov	r1, r2
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	4798      	blx	r3
  }

  return USBD_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 ff90 	bl	800ab28 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009c16:	461a      	mov	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c24:	f003 031f 	and.w	r3, r3, #31
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d01a      	beq.n	8009c62 <USBD_LL_SetupStage+0x72>
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d822      	bhi.n	8009c76 <USBD_LL_SetupStage+0x86>
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <USBD_LL_SetupStage+0x4a>
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d00a      	beq.n	8009c4e <USBD_LL_SetupStage+0x5e>
 8009c38:	e01d      	b.n	8009c76 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fa62 	bl	800a10c <USBD_StdDevReq>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c4c:	e020      	b.n	8009c90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fac6 	bl	800a1e8 <USBD_StdItfReq>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c60:	e016      	b.n	8009c90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fb05 	bl	800a27a <USBD_StdEPReq>
 8009c70:	4603      	mov	r3, r0
 8009c72:	73fb      	strb	r3, [r7, #15]
      break;
 8009c74:	e00c      	b.n	8009c90 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f004 fa79 	bl	800e17c <USBD_LL_StallEP>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c8e:	bf00      	nop
  }

  return ret;
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b086      	sub	sp, #24
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	60f8      	str	r0, [r7, #12]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	607a      	str	r2, [r7, #4]
 8009ca6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009ca8:	7afb      	ldrb	r3, [r7, #11]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d138      	bne.n	8009d20 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009cb4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	d14a      	bne.n	8009d56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	689a      	ldr	r2, [r3, #8]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d913      	bls.n	8009cf4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	689a      	ldr	r2, [r3, #8]
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	1ad2      	subs	r2, r2, r3
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	68da      	ldr	r2, [r3, #12]
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	bf28      	it	cs
 8009ce6:	4613      	movcs	r3, r2
 8009ce8:	461a      	mov	r2, r3
 8009cea:	6879      	ldr	r1, [r7, #4]
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f001 f80f 	bl	800ad10 <USBD_CtlContinueRx>
 8009cf2:	e030      	b.n	8009d56 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	2b03      	cmp	r3, #3
 8009cfe:	d10b      	bne.n	8009d18 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d005      	beq.n	8009d18 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f001 f80a 	bl	800ad32 <USBD_CtlSendStatus>
 8009d1e:	e01a      	b.n	8009d56 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d114      	bne.n	8009d56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d32:	699b      	ldr	r3, [r3, #24]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00e      	beq.n	8009d56 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	7afa      	ldrb	r2, [r7, #11]
 8009d42:	4611      	mov	r1, r2
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	4798      	blx	r3
 8009d48:	4603      	mov	r3, r0
 8009d4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009d52:	7dfb      	ldrb	r3, [r7, #23]
 8009d54:	e000      	b.n	8009d58 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009d6e:	7afb      	ldrb	r3, [r7, #11]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d16b      	bne.n	8009e4c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	3314      	adds	r3, #20
 8009d78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d156      	bne.n	8009e32 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	689a      	ldr	r2, [r3, #8]
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d914      	bls.n	8009dba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	689a      	ldr	r2, [r3, #8]
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	1ad2      	subs	r2, r2, r3
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	461a      	mov	r2, r3
 8009da4:	6879      	ldr	r1, [r7, #4]
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 ff84 	bl	800acb4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009dac:	2300      	movs	r3, #0
 8009dae:	2200      	movs	r2, #0
 8009db0:	2100      	movs	r1, #0
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f004 fa8c 	bl	800e2d0 <USBD_LL_PrepareReceive>
 8009db8:	e03b      	b.n	8009e32 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	68da      	ldr	r2, [r3, #12]
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d11c      	bne.n	8009e00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	685a      	ldr	r2, [r3, #4]
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d316      	bcc.n	8009e00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d20f      	bcs.n	8009e00 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009de0:	2200      	movs	r2, #0
 8009de2:	2100      	movs	r1, #0
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 ff65 	bl	800acb4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009df2:	2300      	movs	r3, #0
 8009df4:	2200      	movs	r2, #0
 8009df6:	2100      	movs	r1, #0
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f004 fa69 	bl	800e2d0 <USBD_LL_PrepareReceive>
 8009dfe:	e018      	b.n	8009e32 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b03      	cmp	r3, #3
 8009e0a:	d10b      	bne.n	8009e24 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d005      	beq.n	8009e24 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e24:	2180      	movs	r1, #128	; 0x80
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f004 f9a8 	bl	800e17c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f000 ff93 	bl	800ad58 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d122      	bne.n	8009e82 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7ff fe98 	bl	8009b72 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009e4a:	e01a      	b.n	8009e82 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b03      	cmp	r3, #3
 8009e56:	d114      	bne.n	8009e82 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00e      	beq.n	8009e82 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	7afa      	ldrb	r2, [r7, #11]
 8009e6e:	4611      	mov	r1, r2
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	4798      	blx	r3
 8009e74:	4603      	mov	r3, r0
 8009e76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
 8009e80:	e000      	b.n	8009e84 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e02f      	b.n	8009f20 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00f      	beq.n	8009eea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d009      	beq.n	8009eea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	6852      	ldr	r2, [r2, #4]
 8009ee2:	b2d2      	uxtb	r2, r2
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009eea:	2340      	movs	r3, #64	; 0x40
 8009eec:	2200      	movs	r2, #0
 8009eee:	2100      	movs	r1, #0
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f004 f8fe 	bl	800e0f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2240      	movs	r2, #64	; 0x40
 8009f02:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f06:	2340      	movs	r3, #64	; 0x40
 8009f08:	2200      	movs	r2, #0
 8009f0a:	2180      	movs	r1, #128	; 0x80
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f004 f8f0 	bl	800e0f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2240      	movs	r2, #64	; 0x40
 8009f1c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	78fa      	ldrb	r2, [r7, #3]
 8009f38:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2204      	movs	r2, #4
 8009f62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	d106      	bne.n	8009f96 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e012      	b.n	8009fe0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d10b      	bne.n	8009fde <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fcc:	69db      	ldr	r3, [r3, #28]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d005      	beq.n	8009fde <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3708      	adds	r7, #8
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d101      	bne.n	800a002 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e014      	b.n	800a02c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	2b03      	cmp	r3, #3
 800a00c:	d10d      	bne.n	800a02a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d007      	beq.n	800a02a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a020:	6a1b      	ldr	r3, [r3, #32]
 800a022:	78fa      	ldrb	r2, [r7, #3]
 800a024:	4611      	mov	r1, r2
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	460b      	mov	r3, r1
 800a03e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e014      	b.n	800a078 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b03      	cmp	r3, #3
 800a058:	d10d      	bne.n	800a076 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a062:	2b00      	cmp	r3, #0
 800a064:	d007      	beq.n	800a076 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	78fa      	ldrb	r2, [r7, #3]
 800a070:	4611      	mov	r1, r2
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d009      	beq.n	800a0c4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	6852      	ldr	r2, [r2, #4]
 800a0bc:	b2d2      	uxtb	r2, r2
 800a0be:	4611      	mov	r1, r2
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	4798      	blx	r3
  }

  return USBD_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b087      	sub	sp, #28
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a0ec:	8a3b      	ldrh	r3, [r7, #16]
 800a0ee:	021b      	lsls	r3, r3, #8
 800a0f0:	b21a      	sxth	r2, r3
 800a0f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	b21b      	sxth	r3, r3
 800a0fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a0fc:	89fb      	ldrh	r3, [r7, #14]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	371c      	adds	r7, #28
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
	...

0800a10c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a122:	2b40      	cmp	r3, #64	; 0x40
 800a124:	d005      	beq.n	800a132 <USBD_StdDevReq+0x26>
 800a126:	2b40      	cmp	r3, #64	; 0x40
 800a128:	d853      	bhi.n	800a1d2 <USBD_StdDevReq+0xc6>
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00b      	beq.n	800a146 <USBD_StdDevReq+0x3a>
 800a12e:	2b20      	cmp	r3, #32
 800a130:	d14f      	bne.n	800a1d2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	4798      	blx	r3
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]
      break;
 800a144:	e04a      	b.n	800a1dc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	785b      	ldrb	r3, [r3, #1]
 800a14a:	2b09      	cmp	r3, #9
 800a14c:	d83b      	bhi.n	800a1c6 <USBD_StdDevReq+0xba>
 800a14e:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <USBD_StdDevReq+0x48>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a1a9 	.word	0x0800a1a9
 800a158:	0800a1bd 	.word	0x0800a1bd
 800a15c:	0800a1c7 	.word	0x0800a1c7
 800a160:	0800a1b3 	.word	0x0800a1b3
 800a164:	0800a1c7 	.word	0x0800a1c7
 800a168:	0800a187 	.word	0x0800a187
 800a16c:	0800a17d 	.word	0x0800a17d
 800a170:	0800a1c7 	.word	0x0800a1c7
 800a174:	0800a19f 	.word	0x0800a19f
 800a178:	0800a191 	.word	0x0800a191
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f9de 	bl	800a540 <USBD_GetDescriptor>
          break;
 800a184:	e024      	b.n	800a1d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fb43 	bl	800a814 <USBD_SetAddress>
          break;
 800a18e:	e01f      	b.n	800a1d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a190:	6839      	ldr	r1, [r7, #0]
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fb82 	bl	800a89c <USBD_SetConfig>
 800a198:	4603      	mov	r3, r0
 800a19a:	73fb      	strb	r3, [r7, #15]
          break;
 800a19c:	e018      	b.n	800a1d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fc21 	bl	800a9e8 <USBD_GetConfig>
          break;
 800a1a6:	e013      	b.n	800a1d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fc52 	bl	800aa54 <USBD_GetStatus>
          break;
 800a1b0:	e00e      	b.n	800a1d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fc81 	bl	800aabc <USBD_SetFeature>
          break;
 800a1ba:	e009      	b.n	800a1d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fc90 	bl	800aae4 <USBD_ClrFeature>
          break;
 800a1c4:	e004      	b.n	800a1d0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fce7 	bl	800ab9c <USBD_CtlError>
          break;
 800a1ce:	bf00      	nop
      }
      break;
 800a1d0:	e004      	b.n	800a1dc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fce1 	bl	800ab9c <USBD_CtlError>
      break;
 800a1da:	bf00      	nop
  }

  return ret;
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop

0800a1e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1fe:	2b40      	cmp	r3, #64	; 0x40
 800a200:	d005      	beq.n	800a20e <USBD_StdItfReq+0x26>
 800a202:	2b40      	cmp	r3, #64	; 0x40
 800a204:	d82f      	bhi.n	800a266 <USBD_StdItfReq+0x7e>
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <USBD_StdItfReq+0x26>
 800a20a:	2b20      	cmp	r3, #32
 800a20c:	d12b      	bne.n	800a266 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a214:	b2db      	uxtb	r3, r3
 800a216:	3b01      	subs	r3, #1
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d81d      	bhi.n	800a258 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	889b      	ldrh	r3, [r3, #4]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b01      	cmp	r3, #1
 800a224:	d813      	bhi.n	800a24e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	6839      	ldr	r1, [r7, #0]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	4798      	blx	r3
 800a234:	4603      	mov	r3, r0
 800a236:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	88db      	ldrh	r3, [r3, #6]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d110      	bne.n	800a262 <USBD_StdItfReq+0x7a>
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10d      	bne.n	800a262 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fd73 	bl	800ad32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a24c:	e009      	b.n	800a262 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fca3 	bl	800ab9c <USBD_CtlError>
          break;
 800a256:	e004      	b.n	800a262 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fc9e 	bl	800ab9c <USBD_CtlError>
          break;
 800a260:	e000      	b.n	800a264 <USBD_StdItfReq+0x7c>
          break;
 800a262:	bf00      	nop
      }
      break;
 800a264:	e004      	b.n	800a270 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fc97 	bl	800ab9c <USBD_CtlError>
      break;
 800a26e:	bf00      	nop
  }

  return ret;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b084      	sub	sp, #16
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	889b      	ldrh	r3, [r3, #4]
 800a28c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a296:	2b40      	cmp	r3, #64	; 0x40
 800a298:	d007      	beq.n	800a2aa <USBD_StdEPReq+0x30>
 800a29a:	2b40      	cmp	r3, #64	; 0x40
 800a29c:	f200 8145 	bhi.w	800a52a <USBD_StdEPReq+0x2b0>
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00c      	beq.n	800a2be <USBD_StdEPReq+0x44>
 800a2a4:	2b20      	cmp	r3, #32
 800a2a6:	f040 8140 	bne.w	800a52a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	4798      	blx	r3
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a2bc:	e13a      	b.n	800a534 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	785b      	ldrb	r3, [r3, #1]
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d007      	beq.n	800a2d6 <USBD_StdEPReq+0x5c>
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	f300 8129 	bgt.w	800a51e <USBD_StdEPReq+0x2a4>
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d07f      	beq.n	800a3d0 <USBD_StdEPReq+0x156>
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d03c      	beq.n	800a34e <USBD_StdEPReq+0xd4>
 800a2d4:	e123      	b.n	800a51e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d002      	beq.n	800a2e8 <USBD_StdEPReq+0x6e>
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d016      	beq.n	800a314 <USBD_StdEPReq+0x9a>
 800a2e6:	e02c      	b.n	800a342 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2e8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00d      	beq.n	800a30a <USBD_StdEPReq+0x90>
 800a2ee:	7bbb      	ldrb	r3, [r7, #14]
 800a2f0:	2b80      	cmp	r3, #128	; 0x80
 800a2f2:	d00a      	beq.n	800a30a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2f4:	7bbb      	ldrb	r3, [r7, #14]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f003 ff3f 	bl	800e17c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2fe:	2180      	movs	r1, #128	; 0x80
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f003 ff3b 	bl	800e17c <USBD_LL_StallEP>
 800a306:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a308:	e020      	b.n	800a34c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fc45 	bl	800ab9c <USBD_CtlError>
              break;
 800a312:	e01b      	b.n	800a34c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	885b      	ldrh	r3, [r3, #2]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10e      	bne.n	800a33a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00b      	beq.n	800a33a <USBD_StdEPReq+0xc0>
 800a322:	7bbb      	ldrb	r3, [r7, #14]
 800a324:	2b80      	cmp	r3, #128	; 0x80
 800a326:	d008      	beq.n	800a33a <USBD_StdEPReq+0xc0>
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	88db      	ldrh	r3, [r3, #6]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d104      	bne.n	800a33a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a330:	7bbb      	ldrb	r3, [r7, #14]
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f003 ff21 	bl	800e17c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fcf9 	bl	800ad32 <USBD_CtlSendStatus>

              break;
 800a340:	e004      	b.n	800a34c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a342:	6839      	ldr	r1, [r7, #0]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fc29 	bl	800ab9c <USBD_CtlError>
              break;
 800a34a:	bf00      	nop
          }
          break;
 800a34c:	e0ec      	b.n	800a528 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b02      	cmp	r3, #2
 800a358:	d002      	beq.n	800a360 <USBD_StdEPReq+0xe6>
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d016      	beq.n	800a38c <USBD_StdEPReq+0x112>
 800a35e:	e030      	b.n	800a3c2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a360:	7bbb      	ldrb	r3, [r7, #14]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00d      	beq.n	800a382 <USBD_StdEPReq+0x108>
 800a366:	7bbb      	ldrb	r3, [r7, #14]
 800a368:	2b80      	cmp	r3, #128	; 0x80
 800a36a:	d00a      	beq.n	800a382 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f003 ff03 	bl	800e17c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a376:	2180      	movs	r1, #128	; 0x80
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f003 feff 	bl	800e17c <USBD_LL_StallEP>
 800a37e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a380:	e025      	b.n	800a3ce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fc09 	bl	800ab9c <USBD_CtlError>
              break;
 800a38a:	e020      	b.n	800a3ce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	885b      	ldrh	r3, [r3, #2]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d11b      	bne.n	800a3cc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a394:	7bbb      	ldrb	r3, [r7, #14]
 800a396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d004      	beq.n	800a3a8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f003 ff09 	bl	800e1ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fcc2 	bl	800ad32 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	4798      	blx	r3
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a3c0:	e004      	b.n	800a3cc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fbe9 	bl	800ab9c <USBD_CtlError>
              break;
 800a3ca:	e000      	b.n	800a3ce <USBD_StdEPReq+0x154>
              break;
 800a3cc:	bf00      	nop
          }
          break;
 800a3ce:	e0ab      	b.n	800a528 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d002      	beq.n	800a3e2 <USBD_StdEPReq+0x168>
 800a3dc:	2b03      	cmp	r3, #3
 800a3de:	d032      	beq.n	800a446 <USBD_StdEPReq+0x1cc>
 800a3e0:	e097      	b.n	800a512 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3e2:	7bbb      	ldrb	r3, [r7, #14]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d007      	beq.n	800a3f8 <USBD_StdEPReq+0x17e>
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	2b80      	cmp	r3, #128	; 0x80
 800a3ec:	d004      	beq.n	800a3f8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 fbd3 	bl	800ab9c <USBD_CtlError>
                break;
 800a3f6:	e091      	b.n	800a51c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	da0b      	bge.n	800a418 <USBD_StdEPReq+0x19e>
 800a400:	7bbb      	ldrb	r3, [r7, #14]
 800a402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a406:	4613      	mov	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4413      	add	r3, r2
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	3310      	adds	r3, #16
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	4413      	add	r3, r2
 800a414:	3304      	adds	r3, #4
 800a416:	e00b      	b.n	800a430 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a418:	7bbb      	ldrb	r3, [r7, #14]
 800a41a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a41e:	4613      	mov	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	4413      	add	r3, r2
 800a42e:	3304      	adds	r3, #4
 800a430:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2202      	movs	r2, #2
 800a43c:	4619      	mov	r1, r3
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fc1d 	bl	800ac7e <USBD_CtlSendData>
              break;
 800a444:	e06a      	b.n	800a51c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	da11      	bge.n	800a472 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
 800a450:	f003 020f 	and.w	r2, r3, #15
 800a454:	6879      	ldr	r1, [r7, #4]
 800a456:	4613      	mov	r3, r2
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4413      	add	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	440b      	add	r3, r1
 800a460:	3324      	adds	r3, #36	; 0x24
 800a462:	881b      	ldrh	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d117      	bne.n	800a498 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a468:	6839      	ldr	r1, [r7, #0]
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 fb96 	bl	800ab9c <USBD_CtlError>
                  break;
 800a470:	e054      	b.n	800a51c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	f003 020f 	and.w	r2, r3, #15
 800a478:	6879      	ldr	r1, [r7, #4]
 800a47a:	4613      	mov	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4413      	add	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	440b      	add	r3, r1
 800a484:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d104      	bne.n	800a498 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fb83 	bl	800ab9c <USBD_CtlError>
                  break;
 800a496:	e041      	b.n	800a51c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	da0b      	bge.n	800a4b8 <USBD_StdEPReq+0x23e>
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	3310      	adds	r3, #16
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	e00b      	b.n	800a4d0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4be:	4613      	mov	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4413      	add	r3, r2
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a4d2:	7bbb      	ldrb	r3, [r7, #14]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <USBD_StdEPReq+0x264>
 800a4d8:	7bbb      	ldrb	r3, [r7, #14]
 800a4da:	2b80      	cmp	r3, #128	; 0x80
 800a4dc:	d103      	bne.n	800a4e6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	e00e      	b.n	800a504 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a4e6:	7bbb      	ldrb	r3, [r7, #14]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f003 fe84 	bl	800e1f8 <USBD_LL_IsStallEP>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	e002      	b.n	800a504 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2200      	movs	r2, #0
 800a502:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2202      	movs	r2, #2
 800a508:	4619      	mov	r1, r3
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fbb7 	bl	800ac7e <USBD_CtlSendData>
              break;
 800a510:	e004      	b.n	800a51c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fb41 	bl	800ab9c <USBD_CtlError>
              break;
 800a51a:	bf00      	nop
          }
          break;
 800a51c:	e004      	b.n	800a528 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a51e:	6839      	ldr	r1, [r7, #0]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fb3b 	bl	800ab9c <USBD_CtlError>
          break;
 800a526:	bf00      	nop
      }
      break;
 800a528:	e004      	b.n	800a534 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a52a:	6839      	ldr	r1, [r7, #0]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fb35 	bl	800ab9c <USBD_CtlError>
      break;
 800a532:	bf00      	nop
  }

  return ret;
 800a534:	7bfb      	ldrb	r3, [r7, #15]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
	...

0800a540 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a54a:	2300      	movs	r3, #0
 800a54c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a552:	2300      	movs	r3, #0
 800a554:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	885b      	ldrh	r3, [r3, #2]
 800a55a:	0a1b      	lsrs	r3, r3, #8
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	3b01      	subs	r3, #1
 800a560:	2b06      	cmp	r3, #6
 800a562:	f200 8128 	bhi.w	800a7b6 <USBD_GetDescriptor+0x276>
 800a566:	a201      	add	r2, pc, #4	; (adr r2, 800a56c <USBD_GetDescriptor+0x2c>)
 800a568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56c:	0800a589 	.word	0x0800a589
 800a570:	0800a5a1 	.word	0x0800a5a1
 800a574:	0800a5e1 	.word	0x0800a5e1
 800a578:	0800a7b7 	.word	0x0800a7b7
 800a57c:	0800a7b7 	.word	0x0800a7b7
 800a580:	0800a757 	.word	0x0800a757
 800a584:	0800a783 	.word	0x0800a783
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	7c12      	ldrb	r2, [r2, #16]
 800a594:	f107 0108 	add.w	r1, r7, #8
 800a598:	4610      	mov	r0, r2
 800a59a:	4798      	blx	r3
 800a59c:	60f8      	str	r0, [r7, #12]
      break;
 800a59e:	e112      	b.n	800a7c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	7c1b      	ldrb	r3, [r3, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10d      	bne.n	800a5c4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b0:	f107 0208 	add.w	r2, r7, #8
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	4798      	blx	r3
 800a5b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	2202      	movs	r2, #2
 800a5c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a5c2:	e100      	b.n	800a7c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5cc:	f107 0208 	add.w	r2, r7, #8
 800a5d0:	4610      	mov	r0, r2
 800a5d2:	4798      	blx	r3
 800a5d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	2202      	movs	r2, #2
 800a5dc:	701a      	strb	r2, [r3, #0]
      break;
 800a5de:	e0f2      	b.n	800a7c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	885b      	ldrh	r3, [r3, #2]
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	2b05      	cmp	r3, #5
 800a5e8:	f200 80ac 	bhi.w	800a744 <USBD_GetDescriptor+0x204>
 800a5ec:	a201      	add	r2, pc, #4	; (adr r2, 800a5f4 <USBD_GetDescriptor+0xb4>)
 800a5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f2:	bf00      	nop
 800a5f4:	0800a60d 	.word	0x0800a60d
 800a5f8:	0800a641 	.word	0x0800a641
 800a5fc:	0800a675 	.word	0x0800a675
 800a600:	0800a6a9 	.word	0x0800a6a9
 800a604:	0800a6dd 	.word	0x0800a6dd
 800a608:	0800a711 	.word	0x0800a711
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	7c12      	ldrb	r2, [r2, #16]
 800a624:	f107 0108 	add.w	r1, r7, #8
 800a628:	4610      	mov	r0, r2
 800a62a:	4798      	blx	r3
 800a62c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a62e:	e091      	b.n	800a754 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fab2 	bl	800ab9c <USBD_CtlError>
            err++;
 800a638:	7afb      	ldrb	r3, [r7, #11]
 800a63a:	3301      	adds	r3, #1
 800a63c:	72fb      	strb	r3, [r7, #11]
          break;
 800a63e:	e089      	b.n	800a754 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00b      	beq.n	800a664 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	7c12      	ldrb	r2, [r2, #16]
 800a658:	f107 0108 	add.w	r1, r7, #8
 800a65c:	4610      	mov	r0, r2
 800a65e:	4798      	blx	r3
 800a660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a662:	e077      	b.n	800a754 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fa98 	bl	800ab9c <USBD_CtlError>
            err++;
 800a66c:	7afb      	ldrb	r3, [r7, #11]
 800a66e:	3301      	adds	r3, #1
 800a670:	72fb      	strb	r3, [r7, #11]
          break;
 800a672:	e06f      	b.n	800a754 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00b      	beq.n	800a698 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	7c12      	ldrb	r2, [r2, #16]
 800a68c:	f107 0108 	add.w	r1, r7, #8
 800a690:	4610      	mov	r0, r2
 800a692:	4798      	blx	r3
 800a694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a696:	e05d      	b.n	800a754 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a698:	6839      	ldr	r1, [r7, #0]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fa7e 	bl	800ab9c <USBD_CtlError>
            err++;
 800a6a0:	7afb      	ldrb	r3, [r7, #11]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a6a6:	e055      	b.n	800a754 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00b      	beq.n	800a6cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	7c12      	ldrb	r2, [r2, #16]
 800a6c0:	f107 0108 	add.w	r1, r7, #8
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	4798      	blx	r3
 800a6c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ca:	e043      	b.n	800a754 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fa64 	bl	800ab9c <USBD_CtlError>
            err++;
 800a6d4:	7afb      	ldrb	r3, [r7, #11]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a6da:	e03b      	b.n	800a754 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6e2:	695b      	ldr	r3, [r3, #20]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00b      	beq.n	800a700 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	7c12      	ldrb	r2, [r2, #16]
 800a6f4:	f107 0108 	add.w	r1, r7, #8
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	4798      	blx	r3
 800a6fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6fe:	e029      	b.n	800a754 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a700:	6839      	ldr	r1, [r7, #0]
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fa4a 	bl	800ab9c <USBD_CtlError>
            err++;
 800a708:	7afb      	ldrb	r3, [r7, #11]
 800a70a:	3301      	adds	r3, #1
 800a70c:	72fb      	strb	r3, [r7, #11]
          break;
 800a70e:	e021      	b.n	800a754 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00b      	beq.n	800a734 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	7c12      	ldrb	r2, [r2, #16]
 800a728:	f107 0108 	add.w	r1, r7, #8
 800a72c:	4610      	mov	r0, r2
 800a72e:	4798      	blx	r3
 800a730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a732:	e00f      	b.n	800a754 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a734:	6839      	ldr	r1, [r7, #0]
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fa30 	bl	800ab9c <USBD_CtlError>
            err++;
 800a73c:	7afb      	ldrb	r3, [r7, #11]
 800a73e:	3301      	adds	r3, #1
 800a740:	72fb      	strb	r3, [r7, #11]
          break;
 800a742:	e007      	b.n	800a754 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a744:	6839      	ldr	r1, [r7, #0]
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 fa28 	bl	800ab9c <USBD_CtlError>
          err++;
 800a74c:	7afb      	ldrb	r3, [r7, #11]
 800a74e:	3301      	adds	r3, #1
 800a750:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a752:	bf00      	nop
      }
      break;
 800a754:	e037      	b.n	800a7c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	7c1b      	ldrb	r3, [r3, #16]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d109      	bne.n	800a772 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a766:	f107 0208 	add.w	r2, r7, #8
 800a76a:	4610      	mov	r0, r2
 800a76c:	4798      	blx	r3
 800a76e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a770:	e029      	b.n	800a7c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fa11 	bl	800ab9c <USBD_CtlError>
        err++;
 800a77a:	7afb      	ldrb	r3, [r7, #11]
 800a77c:	3301      	adds	r3, #1
 800a77e:	72fb      	strb	r3, [r7, #11]
      break;
 800a780:	e021      	b.n	800a7c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	7c1b      	ldrb	r3, [r3, #16]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10d      	bne.n	800a7a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a792:	f107 0208 	add.w	r2, r7, #8
 800a796:	4610      	mov	r0, r2
 800a798:	4798      	blx	r3
 800a79a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	2207      	movs	r2, #7
 800a7a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a7a4:	e00f      	b.n	800a7c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 f9f7 	bl	800ab9c <USBD_CtlError>
        err++;
 800a7ae:	7afb      	ldrb	r3, [r7, #11]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a7b4:	e007      	b.n	800a7c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f9ef 	bl	800ab9c <USBD_CtlError>
      err++;
 800a7be:	7afb      	ldrb	r3, [r7, #11]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a7c4:	bf00      	nop
  }

  if (err != 0U)
 800a7c6:	7afb      	ldrb	r3, [r7, #11]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d11e      	bne.n	800a80a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	88db      	ldrh	r3, [r3, #6]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d016      	beq.n	800a802 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a7d4:	893b      	ldrh	r3, [r7, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00e      	beq.n	800a7f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	88da      	ldrh	r2, [r3, #6]
 800a7de:	893b      	ldrh	r3, [r7, #8]
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	bf28      	it	cs
 800a7e4:	4613      	movcs	r3, r2
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a7ea:	893b      	ldrh	r3, [r7, #8]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	68f9      	ldr	r1, [r7, #12]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fa44 	bl	800ac7e <USBD_CtlSendData>
 800a7f6:	e009      	b.n	800a80c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f9ce 	bl	800ab9c <USBD_CtlError>
 800a800:	e004      	b.n	800a80c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fa95 	bl	800ad32 <USBD_CtlSendStatus>
 800a808:	e000      	b.n	800a80c <USBD_GetDescriptor+0x2cc>
    return;
 800a80a:	bf00      	nop
  }
}
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop

0800a814 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	889b      	ldrh	r3, [r3, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d131      	bne.n	800a88a <USBD_SetAddress+0x76>
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	88db      	ldrh	r3, [r3, #6]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d12d      	bne.n	800a88a <USBD_SetAddress+0x76>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	885b      	ldrh	r3, [r3, #2]
 800a832:	2b7f      	cmp	r3, #127	; 0x7f
 800a834:	d829      	bhi.n	800a88a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	885b      	ldrh	r3, [r3, #2]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a840:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	d104      	bne.n	800a858 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f9a3 	bl	800ab9c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a856:	e01d      	b.n	800a894 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	7bfa      	ldrb	r2, [r7, #15]
 800a85c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a860:	7bfb      	ldrb	r3, [r7, #15]
 800a862:	4619      	mov	r1, r3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f003 fcf3 	bl	800e250 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fa61 	bl	800ad32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d004      	beq.n	800a880 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2202      	movs	r2, #2
 800a87a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a87e:	e009      	b.n	800a894 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a888:	e004      	b.n	800a894 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f985 	bl	800ab9c <USBD_CtlError>
  }
}
 800a892:	bf00      	nop
 800a894:	bf00      	nop
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	885b      	ldrh	r3, [r3, #2]
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	4b4c      	ldr	r3, [pc, #304]	; (800a9e4 <USBD_SetConfig+0x148>)
 800a8b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a8b4:	4b4b      	ldr	r3, [pc, #300]	; (800a9e4 <USBD_SetConfig+0x148>)
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d905      	bls.n	800a8c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a8bc:	6839      	ldr	r1, [r7, #0]
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f96c 	bl	800ab9c <USBD_CtlError>
    return USBD_FAIL;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	e088      	b.n	800a9da <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d002      	beq.n	800a8da <USBD_SetConfig+0x3e>
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d025      	beq.n	800a924 <USBD_SetConfig+0x88>
 800a8d8:	e071      	b.n	800a9be <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a8da:	4b42      	ldr	r3, [pc, #264]	; (800a9e4 <USBD_SetConfig+0x148>)
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d01c      	beq.n	800a91c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a8e2:	4b40      	ldr	r3, [pc, #256]	; (800a9e4 <USBD_SetConfig+0x148>)
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a8ec:	4b3d      	ldr	r3, [pc, #244]	; (800a9e4 <USBD_SetConfig+0x148>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7ff f948 	bl	8009b88 <USBD_SetClassConfig>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d004      	beq.n	800a90c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a902:	6839      	ldr	r1, [r7, #0]
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f949 	bl	800ab9c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a90a:	e065      	b.n	800a9d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fa10 	bl	800ad32 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2203      	movs	r2, #3
 800a916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a91a:	e05d      	b.n	800a9d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fa08 	bl	800ad32 <USBD_CtlSendStatus>
      break;
 800a922:	e059      	b.n	800a9d8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a924:	4b2f      	ldr	r3, [pc, #188]	; (800a9e4 <USBD_SetConfig+0x148>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d112      	bne.n	800a952 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2202      	movs	r2, #2
 800a930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a934:	4b2b      	ldr	r3, [pc, #172]	; (800a9e4 <USBD_SetConfig+0x148>)
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	461a      	mov	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a93e:	4b29      	ldr	r3, [pc, #164]	; (800a9e4 <USBD_SetConfig+0x148>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	4619      	mov	r1, r3
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7ff f93b 	bl	8009bc0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f9f1 	bl	800ad32 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a950:	e042      	b.n	800a9d8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a952:	4b24      	ldr	r3, [pc, #144]	; (800a9e4 <USBD_SetConfig+0x148>)
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	461a      	mov	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d02a      	beq.n	800a9b6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	b2db      	uxtb	r3, r3
 800a966:	4619      	mov	r1, r3
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7ff f929 	bl	8009bc0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a96e:	4b1d      	ldr	r3, [pc, #116]	; (800a9e4 <USBD_SetConfig+0x148>)
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a978:	4b1a      	ldr	r3, [pc, #104]	; (800a9e4 <USBD_SetConfig+0x148>)
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	4619      	mov	r1, r3
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7ff f902 	bl	8009b88 <USBD_SetClassConfig>
 800a984:	4603      	mov	r3, r0
 800a986:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a988:	7bfb      	ldrb	r3, [r7, #15]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00f      	beq.n	800a9ae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f903 	bl	800ab9c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7ff f90e 	bl	8009bc0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a9ac:	e014      	b.n	800a9d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f9bf 	bl	800ad32 <USBD_CtlSendStatus>
      break;
 800a9b4:	e010      	b.n	800a9d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f9bb 	bl	800ad32 <USBD_CtlSendStatus>
      break;
 800a9bc:	e00c      	b.n	800a9d8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a9be:	6839      	ldr	r1, [r7, #0]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f8eb 	bl	800ab9c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a9c6:	4b07      	ldr	r3, [pc, #28]	; (800a9e4 <USBD_SetConfig+0x148>)
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7ff f8f7 	bl	8009bc0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a9d6:	bf00      	nop
  }

  return ret;
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	200004b8 	.word	0x200004b8

0800a9e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	88db      	ldrh	r3, [r3, #6]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d004      	beq.n	800aa04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f8cd 	bl	800ab9c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aa02:	e023      	b.n	800aa4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	dc02      	bgt.n	800aa16 <USBD_GetConfig+0x2e>
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	dc03      	bgt.n	800aa1c <USBD_GetConfig+0x34>
 800aa14:	e015      	b.n	800aa42 <USBD_GetConfig+0x5a>
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d00b      	beq.n	800aa32 <USBD_GetConfig+0x4a>
 800aa1a:	e012      	b.n	800aa42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	3308      	adds	r3, #8
 800aa26:	2201      	movs	r2, #1
 800aa28:	4619      	mov	r1, r3
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 f927 	bl	800ac7e <USBD_CtlSendData>
        break;
 800aa30:	e00c      	b.n	800aa4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3304      	adds	r3, #4
 800aa36:	2201      	movs	r2, #1
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f91f 	bl	800ac7e <USBD_CtlSendData>
        break;
 800aa40:	e004      	b.n	800aa4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aa42:	6839      	ldr	r1, [r7, #0]
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f8a9 	bl	800ab9c <USBD_CtlError>
        break;
 800aa4a:	bf00      	nop
}
 800aa4c:	bf00      	nop
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	3b01      	subs	r3, #1
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d81e      	bhi.n	800aaaa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	88db      	ldrh	r3, [r3, #6]
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d004      	beq.n	800aa7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f890 	bl	800ab9c <USBD_CtlError>
        break;
 800aa7c:	e01a      	b.n	800aab4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2201      	movs	r2, #1
 800aa82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d005      	beq.n	800aa9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	f043 0202 	orr.w	r2, r3, #2
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	330c      	adds	r3, #12
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f8eb 	bl	800ac7e <USBD_CtlSendData>
      break;
 800aaa8:	e004      	b.n	800aab4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f875 	bl	800ab9c <USBD_CtlError>
      break;
 800aab2:	bf00      	nop
  }
}
 800aab4:	bf00      	nop
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	885b      	ldrh	r3, [r3, #2]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d106      	bne.n	800aadc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2201      	movs	r2, #1
 800aad2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f92b 	bl	800ad32 <USBD_CtlSendStatus>
  }
}
 800aadc:	bf00      	nop
 800aade:	3708      	adds	r7, #8
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d80b      	bhi.n	800ab14 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	885b      	ldrh	r3, [r3, #2]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d10c      	bne.n	800ab1e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f910 	bl	800ad32 <USBD_CtlSendStatus>
      }
      break;
 800ab12:	e004      	b.n	800ab1e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f840 	bl	800ab9c <USBD_CtlError>
      break;
 800ab1c:	e000      	b.n	800ab20 <USBD_ClrFeature+0x3c>
      break;
 800ab1e:	bf00      	nop
  }
}
 800ab20:	bf00      	nop
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	781a      	ldrb	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	3301      	adds	r3, #1
 800ab42:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	781a      	ldrb	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f7ff fabb 	bl	800a0ce <SWAPBYTE>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	3301      	adds	r3, #1
 800ab64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f7ff faae 	bl	800a0ce <SWAPBYTE>
 800ab72:	4603      	mov	r3, r0
 800ab74:	461a      	mov	r2, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	3301      	adds	r3, #1
 800ab84:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f7ff faa1 	bl	800a0ce <SWAPBYTE>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	461a      	mov	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	80da      	strh	r2, [r3, #6]
}
 800ab94:	bf00      	nop
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aba6:	2180      	movs	r1, #128	; 0x80
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f003 fae7 	bl	800e17c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800abae:	2100      	movs	r1, #0
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f003 fae3 	bl	800e17c <USBD_LL_StallEP>
}
 800abb6:	bf00      	nop
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b086      	sub	sp, #24
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	60f8      	str	r0, [r7, #12]
 800abc6:	60b9      	str	r1, [r7, #8]
 800abc8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800abca:	2300      	movs	r3, #0
 800abcc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d036      	beq.n	800ac42 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800abd8:	6938      	ldr	r0, [r7, #16]
 800abda:	f000 f836 	bl	800ac4a <USBD_GetLen>
 800abde:	4603      	mov	r3, r0
 800abe0:	3301      	adds	r3, #1
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	005b      	lsls	r3, r3, #1
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800abec:	7dfb      	ldrb	r3, [r7, #23]
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	4413      	add	r3, r2
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	7812      	ldrb	r2, [r2, #0]
 800abf6:	701a      	strb	r2, [r3, #0]
  idx++;
 800abf8:	7dfb      	ldrb	r3, [r7, #23]
 800abfa:	3301      	adds	r3, #1
 800abfc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	4413      	add	r3, r2
 800ac04:	2203      	movs	r2, #3
 800ac06:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac08:	7dfb      	ldrb	r3, [r7, #23]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ac0e:	e013      	b.n	800ac38 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ac10:	7dfb      	ldrb	r3, [r7, #23]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	4413      	add	r3, r2
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	7812      	ldrb	r2, [r2, #0]
 800ac1a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	613b      	str	r3, [r7, #16]
    idx++;
 800ac22:	7dfb      	ldrb	r3, [r7, #23]
 800ac24:	3301      	adds	r3, #1
 800ac26:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ac28:	7dfb      	ldrb	r3, [r7, #23]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	2200      	movs	r2, #0
 800ac30:	701a      	strb	r2, [r3, #0]
    idx++;
 800ac32:	7dfb      	ldrb	r3, [r7, #23]
 800ac34:	3301      	adds	r3, #1
 800ac36:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1e7      	bne.n	800ac10 <USBD_GetString+0x52>
 800ac40:	e000      	b.n	800ac44 <USBD_GetString+0x86>
    return;
 800ac42:	bf00      	nop
  }
}
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b085      	sub	sp, #20
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ac52:	2300      	movs	r3, #0
 800ac54:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ac5a:	e005      	b.n	800ac68 <USBD_GetLen+0x1e>
  {
    len++;
 800ac5c:	7bfb      	ldrb	r3, [r7, #15]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	3301      	adds	r3, #1
 800ac66:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1f5      	bne.n	800ac5c <USBD_GetLen+0x12>
  }

  return len;
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3714      	adds	r7, #20
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b084      	sub	sp, #16
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	60f8      	str	r0, [r7, #12]
 800ac86:	60b9      	str	r1, [r7, #8]
 800ac88:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	2100      	movs	r1, #0
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f003 faf2 	bl	800e28e <USBD_LL_Transmit>

  return USBD_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	2100      	movs	r1, #0
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f003 fae1 	bl	800e28e <USBD_LL_Transmit>

  return USBD_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b084      	sub	sp, #16
 800acda:	af00      	add	r7, sp, #0
 800acdc:	60f8      	str	r0, [r7, #12]
 800acde:	60b9      	str	r1, [r7, #8]
 800ace0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2203      	movs	r2, #3
 800ace6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	2100      	movs	r1, #0
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f003 fae5 	bl	800e2d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	68ba      	ldr	r2, [r7, #8]
 800ad20:	2100      	movs	r1, #0
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f003 fad4 	bl	800e2d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b082      	sub	sp, #8
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2204      	movs	r2, #4
 800ad3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad42:	2300      	movs	r3, #0
 800ad44:	2200      	movs	r2, #0
 800ad46:	2100      	movs	r1, #0
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f003 faa0 	bl	800e28e <USBD_LL_Transmit>

  return USBD_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2205      	movs	r2, #5
 800ad64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad68:	2300      	movs	r3, #0
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f003 faae 	bl	800e2d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
	...

0800ad80 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b087      	sub	sp, #28
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ad92:	2300      	movs	r3, #0
 800ad94:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ad96:	4b1f      	ldr	r3, [pc, #124]	; (800ae14 <FATFS_LinkDriverEx+0x94>)
 800ad98:	7a5b      	ldrb	r3, [r3, #9]
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d131      	bne.n	800ae04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ada0:	4b1c      	ldr	r3, [pc, #112]	; (800ae14 <FATFS_LinkDriverEx+0x94>)
 800ada2:	7a5b      	ldrb	r3, [r3, #9]
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	461a      	mov	r2, r3
 800ada8:	4b1a      	ldr	r3, [pc, #104]	; (800ae14 <FATFS_LinkDriverEx+0x94>)
 800adaa:	2100      	movs	r1, #0
 800adac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800adae:	4b19      	ldr	r3, [pc, #100]	; (800ae14 <FATFS_LinkDriverEx+0x94>)
 800adb0:	7a5b      	ldrb	r3, [r3, #9]
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	4a17      	ldr	r2, [pc, #92]	; (800ae14 <FATFS_LinkDriverEx+0x94>)
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	4413      	add	r3, r2
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800adbe:	4b15      	ldr	r3, [pc, #84]	; (800ae14 <FATFS_LinkDriverEx+0x94>)
 800adc0:	7a5b      	ldrb	r3, [r3, #9]
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	461a      	mov	r2, r3
 800adc6:	4b13      	ldr	r3, [pc, #76]	; (800ae14 <FATFS_LinkDriverEx+0x94>)
 800adc8:	4413      	add	r3, r2
 800adca:	79fa      	ldrb	r2, [r7, #7]
 800adcc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800adce:	4b11      	ldr	r3, [pc, #68]	; (800ae14 <FATFS_LinkDriverEx+0x94>)
 800add0:	7a5b      	ldrb	r3, [r3, #9]
 800add2:	b2db      	uxtb	r3, r3
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	b2d1      	uxtb	r1, r2
 800add8:	4a0e      	ldr	r2, [pc, #56]	; (800ae14 <FATFS_LinkDriverEx+0x94>)
 800adda:	7251      	strb	r1, [r2, #9]
 800addc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800adde:	7dbb      	ldrb	r3, [r7, #22]
 800ade0:	3330      	adds	r3, #48	; 0x30
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	3301      	adds	r3, #1
 800adec:	223a      	movs	r2, #58	; 0x3a
 800adee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	3302      	adds	r3, #2
 800adf4:	222f      	movs	r2, #47	; 0x2f
 800adf6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	3303      	adds	r3, #3
 800adfc:	2200      	movs	r2, #0
 800adfe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ae04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	371c      	adds	r7, #28
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	200004bc 	.word	0x200004bc

0800ae18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ae22:	2200      	movs	r2, #0
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7ff ffaa 	bl	800ad80 <FATFS_LinkDriverEx>
 800ae2c:	4603      	mov	r3, r0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
	...

0800ae38 <__NVIC_SetPriority>:
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	6039      	str	r1, [r7, #0]
 800ae42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	db0a      	blt.n	800ae62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	490c      	ldr	r1, [pc, #48]	; (800ae84 <__NVIC_SetPriority+0x4c>)
 800ae52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae56:	0112      	lsls	r2, r2, #4
 800ae58:	b2d2      	uxtb	r2, r2
 800ae5a:	440b      	add	r3, r1
 800ae5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ae60:	e00a      	b.n	800ae78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	4908      	ldr	r1, [pc, #32]	; (800ae88 <__NVIC_SetPriority+0x50>)
 800ae68:	79fb      	ldrb	r3, [r7, #7]
 800ae6a:	f003 030f 	and.w	r3, r3, #15
 800ae6e:	3b04      	subs	r3, #4
 800ae70:	0112      	lsls	r2, r2, #4
 800ae72:	b2d2      	uxtb	r2, r2
 800ae74:	440b      	add	r3, r1
 800ae76:	761a      	strb	r2, [r3, #24]
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	e000e100 	.word	0xe000e100
 800ae88:	e000ed00 	.word	0xe000ed00

0800ae8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ae90:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <SysTick_Handler+0x1c>)
 800ae92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ae94:	f001 fd28 	bl	800c8e8 <xTaskGetSchedulerState>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d001      	beq.n	800aea2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ae9e:	f002 fb13 	bl	800d4c8 <xPortSysTickHandler>
  }
}
 800aea2:	bf00      	nop
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	e000e010 	.word	0xe000e010

0800aeac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aeac:	b580      	push	{r7, lr}
 800aeae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	f06f 0004 	mvn.w	r0, #4
 800aeb6:	f7ff ffbf 	bl	800ae38 <__NVIC_SetPriority>
#endif
}
 800aeba:	bf00      	nop
 800aebc:	bd80      	pop	{r7, pc}
	...

0800aec0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aec6:	f3ef 8305 	mrs	r3, IPSR
 800aeca:	603b      	str	r3, [r7, #0]
  return(result);
 800aecc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d003      	beq.n	800aeda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aed2:	f06f 0305 	mvn.w	r3, #5
 800aed6:	607b      	str	r3, [r7, #4]
 800aed8:	e00c      	b.n	800aef4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aeda:	4b0a      	ldr	r3, [pc, #40]	; (800af04 <osKernelInitialize+0x44>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d105      	bne.n	800aeee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aee2:	4b08      	ldr	r3, [pc, #32]	; (800af04 <osKernelInitialize+0x44>)
 800aee4:	2201      	movs	r2, #1
 800aee6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aee8:	2300      	movs	r3, #0
 800aeea:	607b      	str	r3, [r7, #4]
 800aeec:	e002      	b.n	800aef4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aeee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aef2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aef4:	687b      	ldr	r3, [r7, #4]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	200004c8 	.word	0x200004c8

0800af08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af0e:	f3ef 8305 	mrs	r3, IPSR
 800af12:	603b      	str	r3, [r7, #0]
  return(result);
 800af14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af16:	2b00      	cmp	r3, #0
 800af18:	d003      	beq.n	800af22 <osKernelStart+0x1a>
    stat = osErrorISR;
 800af1a:	f06f 0305 	mvn.w	r3, #5
 800af1e:	607b      	str	r3, [r7, #4]
 800af20:	e010      	b.n	800af44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800af22:	4b0b      	ldr	r3, [pc, #44]	; (800af50 <osKernelStart+0x48>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d109      	bne.n	800af3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800af2a:	f7ff ffbf 	bl	800aeac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800af2e:	4b08      	ldr	r3, [pc, #32]	; (800af50 <osKernelStart+0x48>)
 800af30:	2202      	movs	r2, #2
 800af32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800af34:	f001 f87c 	bl	800c030 <vTaskStartScheduler>
      stat = osOK;
 800af38:	2300      	movs	r3, #0
 800af3a:	607b      	str	r3, [r7, #4]
 800af3c:	e002      	b.n	800af44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800af3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800af44:	687b      	ldr	r3, [r7, #4]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3708      	adds	r7, #8
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	200004c8 	.word	0x200004c8

0800af54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800af54:	b580      	push	{r7, lr}
 800af56:	b08e      	sub	sp, #56	; 0x38
 800af58:	af04      	add	r7, sp, #16
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800af60:	2300      	movs	r3, #0
 800af62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af64:	f3ef 8305 	mrs	r3, IPSR
 800af68:	617b      	str	r3, [r7, #20]
  return(result);
 800af6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d17e      	bne.n	800b06e <osThreadNew+0x11a>
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d07b      	beq.n	800b06e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800af76:	2380      	movs	r3, #128	; 0x80
 800af78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800af7a:	2318      	movs	r3, #24
 800af7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800af7e:	2300      	movs	r3, #0
 800af80:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800af82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d045      	beq.n	800b01a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d002      	beq.n	800af9c <osThreadNew+0x48>
        name = attr->name;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d008      	beq.n	800afc2 <osThreadNew+0x6e>
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	2b38      	cmp	r3, #56	; 0x38
 800afb4:	d805      	bhi.n	800afc2 <osThreadNew+0x6e>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	f003 0301 	and.w	r3, r3, #1
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <osThreadNew+0x72>
        return (NULL);
 800afc2:	2300      	movs	r3, #0
 800afc4:	e054      	b.n	800b070 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d003      	beq.n	800afd6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	089b      	lsrs	r3, r3, #2
 800afd4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00e      	beq.n	800affc <osThreadNew+0xa8>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	2bbb      	cmp	r3, #187	; 0xbb
 800afe4:	d90a      	bls.n	800affc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800afea:	2b00      	cmp	r3, #0
 800afec:	d006      	beq.n	800affc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <osThreadNew+0xa8>
        mem = 1;
 800aff6:	2301      	movs	r3, #1
 800aff8:	61bb      	str	r3, [r7, #24]
 800affa:	e010      	b.n	800b01e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10c      	bne.n	800b01e <osThreadNew+0xca>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d108      	bne.n	800b01e <osThreadNew+0xca>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d104      	bne.n	800b01e <osThreadNew+0xca>
          mem = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	61bb      	str	r3, [r7, #24]
 800b018:	e001      	b.n	800b01e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d110      	bne.n	800b046 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b02c:	9202      	str	r2, [sp, #8]
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	6a3a      	ldr	r2, [r7, #32]
 800b038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f000 fe0c 	bl	800bc58 <xTaskCreateStatic>
 800b040:	4603      	mov	r3, r0
 800b042:	613b      	str	r3, [r7, #16]
 800b044:	e013      	b.n	800b06e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d110      	bne.n	800b06e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b04c:	6a3b      	ldr	r3, [r7, #32]
 800b04e:	b29a      	uxth	r2, r3
 800b050:	f107 0310 	add.w	r3, r7, #16
 800b054:	9301      	str	r3, [sp, #4]
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f000 fe57 	bl	800bd12 <xTaskCreate>
 800b064:	4603      	mov	r3, r0
 800b066:	2b01      	cmp	r3, #1
 800b068:	d001      	beq.n	800b06e <osThreadNew+0x11a>
            hTask = NULL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b06e:	693b      	ldr	r3, [r7, #16]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3728      	adds	r7, #40	; 0x28
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b080:	f3ef 8305 	mrs	r3, IPSR
 800b084:	60bb      	str	r3, [r7, #8]
  return(result);
 800b086:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d003      	beq.n	800b094 <osDelay+0x1c>
    stat = osErrorISR;
 800b08c:	f06f 0305 	mvn.w	r3, #5
 800b090:	60fb      	str	r3, [r7, #12]
 800b092:	e007      	b.n	800b0a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b094:	2300      	movs	r3, #0
 800b096:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d002      	beq.n	800b0a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 ff92 	bl	800bfc8 <vTaskDelay>
    }
  }

  return (stat);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
	...

0800b0b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b0b0:	b480      	push	{r7}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	4a07      	ldr	r2, [pc, #28]	; (800b0dc <vApplicationGetIdleTaskMemory+0x2c>)
 800b0c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	4a06      	ldr	r2, [pc, #24]	; (800b0e0 <vApplicationGetIdleTaskMemory+0x30>)
 800b0c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2280      	movs	r2, #128	; 0x80
 800b0cc:	601a      	str	r2, [r3, #0]
}
 800b0ce:	bf00      	nop
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	200004cc 	.word	0x200004cc
 800b0e0:	20000588 	.word	0x20000588

0800b0e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	4a07      	ldr	r2, [pc, #28]	; (800b110 <vApplicationGetTimerTaskMemory+0x2c>)
 800b0f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	4a06      	ldr	r2, [pc, #24]	; (800b114 <vApplicationGetTimerTaskMemory+0x30>)
 800b0fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b102:	601a      	str	r2, [r3, #0]
}
 800b104:	bf00      	nop
 800b106:	3714      	adds	r7, #20
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr
 800b110:	20000788 	.word	0x20000788
 800b114:	20000844 	.word	0x20000844

0800b118 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f103 0208 	add.w	r2, r3, #8
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b130:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f103 0208 	add.w	r2, r3, #8
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f103 0208 	add.w	r2, r3, #8
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b14c:	bf00      	nop
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b166:	bf00      	nop
 800b168:	370c      	adds	r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b172:	b480      	push	{r7}
 800b174:	b085      	sub	sp, #20
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	689a      	ldr	r2, [r3, #8]
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	601a      	str	r2, [r3, #0]
}
 800b1ae:	bf00      	nop
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b085      	sub	sp, #20
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1d0:	d103      	bne.n	800b1da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	60fb      	str	r3, [r7, #12]
 800b1d8:	e00c      	b.n	800b1f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3308      	adds	r3, #8
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	e002      	b.n	800b1e8 <vListInsert+0x2e>
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	60fb      	str	r3, [r7, #12]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d2f6      	bcs.n	800b1e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	683a      	ldr	r2, [r7, #0]
 800b20e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	1c5a      	adds	r2, r3, #1
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	601a      	str	r2, [r3, #0]
}
 800b220:	bf00      	nop
 800b222:	3714      	adds	r7, #20
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b22c:	b480      	push	{r7}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	6892      	ldr	r2, [r2, #8]
 800b242:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	6852      	ldr	r2, [r2, #4]
 800b24c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d103      	bne.n	800b260 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	1e5a      	subs	r2, r3, #1
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3714      	adds	r7, #20
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10a      	bne.n	800b2aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b298:	f383 8811 	msr	BASEPRI, r3
 800b29c:	f3bf 8f6f 	isb	sy
 800b2a0:	f3bf 8f4f 	dsb	sy
 800b2a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b2a6:	bf00      	nop
 800b2a8:	e7fe      	b.n	800b2a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b2aa:	f002 f87b 	bl	800d3a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2b6:	68f9      	ldr	r1, [r7, #12]
 800b2b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2ba:	fb01 f303 	mul.w	r3, r1, r3
 800b2be:	441a      	add	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	68f9      	ldr	r1, [r7, #12]
 800b2de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2e0:	fb01 f303 	mul.w	r3, r1, r3
 800b2e4:	441a      	add	r2, r3
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	22ff      	movs	r2, #255	; 0xff
 800b2ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	22ff      	movs	r2, #255	; 0xff
 800b2f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d114      	bne.n	800b32a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	691b      	ldr	r3, [r3, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d01a      	beq.n	800b33e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	3310      	adds	r3, #16
 800b30c:	4618      	mov	r0, r3
 800b30e:	f001 f929 	bl	800c564 <xTaskRemoveFromEventList>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d012      	beq.n	800b33e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b318:	4b0c      	ldr	r3, [pc, #48]	; (800b34c <xQueueGenericReset+0xcc>)
 800b31a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b31e:	601a      	str	r2, [r3, #0]
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	e009      	b.n	800b33e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3310      	adds	r3, #16
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff fef2 	bl	800b118 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	3324      	adds	r3, #36	; 0x24
 800b338:	4618      	mov	r0, r3
 800b33a:	f7ff feed 	bl	800b118 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b33e:	f002 f861 	bl	800d404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b342:	2301      	movs	r3, #1
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	e000ed04 	.word	0xe000ed04

0800b350 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b350:	b580      	push	{r7, lr}
 800b352:	b08e      	sub	sp, #56	; 0x38
 800b354:	af02      	add	r7, sp, #8
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
 800b35c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10a      	bne.n	800b37a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b376:	bf00      	nop
 800b378:	e7fe      	b.n	800b378 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10a      	bne.n	800b396 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d002      	beq.n	800b3a2 <xQueueGenericCreateStatic+0x52>
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d001      	beq.n	800b3a6 <xQueueGenericCreateStatic+0x56>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e000      	b.n	800b3a8 <xQueueGenericCreateStatic+0x58>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d10a      	bne.n	800b3c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b0:	f383 8811 	msr	BASEPRI, r3
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	623b      	str	r3, [r7, #32]
}
 800b3be:	bf00      	nop
 800b3c0:	e7fe      	b.n	800b3c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d102      	bne.n	800b3ce <xQueueGenericCreateStatic+0x7e>
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <xQueueGenericCreateStatic+0x82>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e000      	b.n	800b3d4 <xQueueGenericCreateStatic+0x84>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10a      	bne.n	800b3ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3dc:	f383 8811 	msr	BASEPRI, r3
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	61fb      	str	r3, [r7, #28]
}
 800b3ea:	bf00      	nop
 800b3ec:	e7fe      	b.n	800b3ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b3ee:	2350      	movs	r3, #80	; 0x50
 800b3f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2b50      	cmp	r3, #80	; 0x50
 800b3f6:	d00a      	beq.n	800b40e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	61bb      	str	r3, [r7, #24]
}
 800b40a:	bf00      	nop
 800b40c:	e7fe      	b.n	800b40c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b40e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00d      	beq.n	800b436 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41c:	2201      	movs	r2, #1
 800b41e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b422:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	4613      	mov	r3, r2
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	68b9      	ldr	r1, [r7, #8]
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f000 f805 	bl	800b440 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b438:	4618      	mov	r0, r3
 800b43a:	3730      	adds	r7, #48	; 0x30
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d103      	bne.n	800b45c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	69ba      	ldr	r2, [r7, #24]
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	e002      	b.n	800b462 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b46e:	2101      	movs	r1, #1
 800b470:	69b8      	ldr	r0, [r7, #24]
 800b472:	f7ff ff05 	bl	800b280 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	78fa      	ldrb	r2, [r7, #3]
 800b47a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b47e:	bf00      	nop
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
	...

0800b488 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08e      	sub	sp, #56	; 0x38
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
 800b494:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b496:	2300      	movs	r3, #0
 800b498:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10a      	bne.n	800b4ba <xQueueGenericSend+0x32>
	__asm volatile
 800b4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a8:	f383 8811 	msr	BASEPRI, r3
 800b4ac:	f3bf 8f6f 	isb	sy
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b4b6:	bf00      	nop
 800b4b8:	e7fe      	b.n	800b4b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d103      	bne.n	800b4c8 <xQueueGenericSend+0x40>
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d101      	bne.n	800b4cc <xQueueGenericSend+0x44>
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e000      	b.n	800b4ce <xQueueGenericSend+0x46>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d10a      	bne.n	800b4e8 <xQueueGenericSend+0x60>
	__asm volatile
 800b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d6:	f383 8811 	msr	BASEPRI, r3
 800b4da:	f3bf 8f6f 	isb	sy
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4e4:	bf00      	nop
 800b4e6:	e7fe      	b.n	800b4e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d103      	bne.n	800b4f6 <xQueueGenericSend+0x6e>
 800b4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d101      	bne.n	800b4fa <xQueueGenericSend+0x72>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e000      	b.n	800b4fc <xQueueGenericSend+0x74>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10a      	bne.n	800b516 <xQueueGenericSend+0x8e>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	623b      	str	r3, [r7, #32]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b516:	f001 f9e7 	bl	800c8e8 <xTaskGetSchedulerState>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d102      	bne.n	800b526 <xQueueGenericSend+0x9e>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d101      	bne.n	800b52a <xQueueGenericSend+0xa2>
 800b526:	2301      	movs	r3, #1
 800b528:	e000      	b.n	800b52c <xQueueGenericSend+0xa4>
 800b52a:	2300      	movs	r3, #0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d10a      	bne.n	800b546 <xQueueGenericSend+0xbe>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	61fb      	str	r3, [r7, #28]
}
 800b542:	bf00      	nop
 800b544:	e7fe      	b.n	800b544 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b546:	f001 ff2d 	bl	800d3a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b552:	429a      	cmp	r2, r3
 800b554:	d302      	bcc.n	800b55c <xQueueGenericSend+0xd4>
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d129      	bne.n	800b5b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b55c:	683a      	ldr	r2, [r7, #0]
 800b55e:	68b9      	ldr	r1, [r7, #8]
 800b560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b562:	f000 fa0b 	bl	800b97c <prvCopyDataToQueue>
 800b566:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d010      	beq.n	800b592 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b572:	3324      	adds	r3, #36	; 0x24
 800b574:	4618      	mov	r0, r3
 800b576:	f000 fff5 	bl	800c564 <xTaskRemoveFromEventList>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d013      	beq.n	800b5a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b580:	4b3f      	ldr	r3, [pc, #252]	; (800b680 <xQueueGenericSend+0x1f8>)
 800b582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b586:	601a      	str	r2, [r3, #0]
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	f3bf 8f6f 	isb	sy
 800b590:	e00a      	b.n	800b5a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b594:	2b00      	cmp	r3, #0
 800b596:	d007      	beq.n	800b5a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b598:	4b39      	ldr	r3, [pc, #228]	; (800b680 <xQueueGenericSend+0x1f8>)
 800b59a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b59e:	601a      	str	r2, [r3, #0]
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b5a8:	f001 ff2c 	bl	800d404 <vPortExitCritical>
				return pdPASS;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e063      	b.n	800b678 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d103      	bne.n	800b5be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5b6:	f001 ff25 	bl	800d404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	e05c      	b.n	800b678 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d106      	bne.n	800b5d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5c4:	f107 0314 	add.w	r3, r7, #20
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f001 f82f 	bl	800c62c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5d2:	f001 ff17 	bl	800d404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5d6:	f000 fd9b 	bl	800c110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5da:	f001 fee3 	bl	800d3a4 <vPortEnterCritical>
 800b5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5e4:	b25b      	sxtb	r3, r3
 800b5e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5ea:	d103      	bne.n	800b5f4 <xQueueGenericSend+0x16c>
 800b5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5fa:	b25b      	sxtb	r3, r3
 800b5fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b600:	d103      	bne.n	800b60a <xQueueGenericSend+0x182>
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	2200      	movs	r2, #0
 800b606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b60a:	f001 fefb 	bl	800d404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b60e:	1d3a      	adds	r2, r7, #4
 800b610:	f107 0314 	add.w	r3, r7, #20
 800b614:	4611      	mov	r1, r2
 800b616:	4618      	mov	r0, r3
 800b618:	f001 f81e 	bl	800c658 <xTaskCheckForTimeOut>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d124      	bne.n	800b66c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b624:	f000 faa2 	bl	800bb6c <prvIsQueueFull>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d018      	beq.n	800b660 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b630:	3310      	adds	r3, #16
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	4611      	mov	r1, r2
 800b636:	4618      	mov	r0, r3
 800b638:	f000 ff44 	bl	800c4c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b63c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b63e:	f000 fa2d 	bl	800ba9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b642:	f000 fd73 	bl	800c12c <xTaskResumeAll>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f47f af7c 	bne.w	800b546 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b64e:	4b0c      	ldr	r3, [pc, #48]	; (800b680 <xQueueGenericSend+0x1f8>)
 800b650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b654:	601a      	str	r2, [r3, #0]
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	e772      	b.n	800b546 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b662:	f000 fa1b 	bl	800ba9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b666:	f000 fd61 	bl	800c12c <xTaskResumeAll>
 800b66a:	e76c      	b.n	800b546 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b66c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b66e:	f000 fa15 	bl	800ba9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b672:	f000 fd5b 	bl	800c12c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b676:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3738      	adds	r7, #56	; 0x38
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	e000ed04 	.word	0xe000ed04

0800b684 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b090      	sub	sp, #64	; 0x40
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
 800b690:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d10a      	bne.n	800b6b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a0:	f383 8811 	msr	BASEPRI, r3
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6ae:	bf00      	nop
 800b6b0:	e7fe      	b.n	800b6b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d103      	bne.n	800b6c0 <xQueueGenericSendFromISR+0x3c>
 800b6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d101      	bne.n	800b6c4 <xQueueGenericSendFromISR+0x40>
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e000      	b.n	800b6c6 <xQueueGenericSendFromISR+0x42>
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10a      	bne.n	800b6e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ce:	f383 8811 	msr	BASEPRI, r3
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6dc:	bf00      	nop
 800b6de:	e7fe      	b.n	800b6de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d103      	bne.n	800b6ee <xQueueGenericSendFromISR+0x6a>
 800b6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d101      	bne.n	800b6f2 <xQueueGenericSendFromISR+0x6e>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e000      	b.n	800b6f4 <xQueueGenericSendFromISR+0x70>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10a      	bne.n	800b70e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fc:	f383 8811 	msr	BASEPRI, r3
 800b700:	f3bf 8f6f 	isb	sy
 800b704:	f3bf 8f4f 	dsb	sy
 800b708:	623b      	str	r3, [r7, #32]
}
 800b70a:	bf00      	nop
 800b70c:	e7fe      	b.n	800b70c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b70e:	f001 ff2b 	bl	800d568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b712:	f3ef 8211 	mrs	r2, BASEPRI
 800b716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	61fa      	str	r2, [r7, #28]
 800b728:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b72a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b72c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b736:	429a      	cmp	r2, r3
 800b738:	d302      	bcc.n	800b740 <xQueueGenericSendFromISR+0xbc>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d12f      	bne.n	800b7a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b750:	683a      	ldr	r2, [r7, #0]
 800b752:	68b9      	ldr	r1, [r7, #8]
 800b754:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b756:	f000 f911 	bl	800b97c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b75a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b75e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b762:	d112      	bne.n	800b78a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d016      	beq.n	800b79a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76e:	3324      	adds	r3, #36	; 0x24
 800b770:	4618      	mov	r0, r3
 800b772:	f000 fef7 	bl	800c564 <xTaskRemoveFromEventList>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00e      	beq.n	800b79a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00b      	beq.n	800b79a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	601a      	str	r2, [r3, #0]
 800b788:	e007      	b.n	800b79a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b78a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b78e:	3301      	adds	r3, #1
 800b790:	b2db      	uxtb	r3, r3
 800b792:	b25a      	sxtb	r2, r3
 800b794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b79a:	2301      	movs	r3, #1
 800b79c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b79e:	e001      	b.n	800b7a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b7ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3740      	adds	r7, #64	; 0x40
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
	...

0800b7bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b08c      	sub	sp, #48	; 0x30
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10a      	bne.n	800b7ec <xQueueReceive+0x30>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	623b      	str	r3, [r7, #32]
}
 800b7e8:	bf00      	nop
 800b7ea:	e7fe      	b.n	800b7ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d103      	bne.n	800b7fa <xQueueReceive+0x3e>
 800b7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d101      	bne.n	800b7fe <xQueueReceive+0x42>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e000      	b.n	800b800 <xQueueReceive+0x44>
 800b7fe:	2300      	movs	r3, #0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10a      	bne.n	800b81a <xQueueReceive+0x5e>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	61fb      	str	r3, [r7, #28]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b81a:	f001 f865 	bl	800c8e8 <xTaskGetSchedulerState>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d102      	bne.n	800b82a <xQueueReceive+0x6e>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d101      	bne.n	800b82e <xQueueReceive+0x72>
 800b82a:	2301      	movs	r3, #1
 800b82c:	e000      	b.n	800b830 <xQueueReceive+0x74>
 800b82e:	2300      	movs	r3, #0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10a      	bne.n	800b84a <xQueueReceive+0x8e>
	__asm volatile
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	61bb      	str	r3, [r7, #24]
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b84a:	f001 fdab 	bl	800d3a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b852:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	2b00      	cmp	r3, #0
 800b858:	d01f      	beq.n	800b89a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b85a:	68b9      	ldr	r1, [r7, #8]
 800b85c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b85e:	f000 f8f7 	bl	800ba50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b864:	1e5a      	subs	r2, r3, #1
 800b866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b868:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00f      	beq.n	800b892 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b874:	3310      	adds	r3, #16
 800b876:	4618      	mov	r0, r3
 800b878:	f000 fe74 	bl	800c564 <xTaskRemoveFromEventList>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d007      	beq.n	800b892 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b882:	4b3d      	ldr	r3, [pc, #244]	; (800b978 <xQueueReceive+0x1bc>)
 800b884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b892:	f001 fdb7 	bl	800d404 <vPortExitCritical>
				return pdPASS;
 800b896:	2301      	movs	r3, #1
 800b898:	e069      	b.n	800b96e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d103      	bne.n	800b8a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8a0:	f001 fdb0 	bl	800d404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	e062      	b.n	800b96e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d106      	bne.n	800b8bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8ae:	f107 0310 	add.w	r3, r7, #16
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 feba 	bl	800c62c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8bc:	f001 fda2 	bl	800d404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8c0:	f000 fc26 	bl	800c110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8c4:	f001 fd6e 	bl	800d3a4 <vPortEnterCritical>
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8ce:	b25b      	sxtb	r3, r3
 800b8d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8d4:	d103      	bne.n	800b8de <xQueueReceive+0x122>
 800b8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8e4:	b25b      	sxtb	r3, r3
 800b8e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8ea:	d103      	bne.n	800b8f4 <xQueueReceive+0x138>
 800b8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8f4:	f001 fd86 	bl	800d404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8f8:	1d3a      	adds	r2, r7, #4
 800b8fa:	f107 0310 	add.w	r3, r7, #16
 800b8fe:	4611      	mov	r1, r2
 800b900:	4618      	mov	r0, r3
 800b902:	f000 fea9 	bl	800c658 <xTaskCheckForTimeOut>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d123      	bne.n	800b954 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b90c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b90e:	f000 f917 	bl	800bb40 <prvIsQueueEmpty>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d017      	beq.n	800b948 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91a:	3324      	adds	r3, #36	; 0x24
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	4611      	mov	r1, r2
 800b920:	4618      	mov	r0, r3
 800b922:	f000 fdcf 	bl	800c4c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b928:	f000 f8b8 	bl	800ba9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b92c:	f000 fbfe 	bl	800c12c <xTaskResumeAll>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d189      	bne.n	800b84a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b936:	4b10      	ldr	r3, [pc, #64]	; (800b978 <xQueueReceive+0x1bc>)
 800b938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b93c:	601a      	str	r2, [r3, #0]
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	e780      	b.n	800b84a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b94a:	f000 f8a7 	bl	800ba9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b94e:	f000 fbed 	bl	800c12c <xTaskResumeAll>
 800b952:	e77a      	b.n	800b84a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b956:	f000 f8a1 	bl	800ba9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b95a:	f000 fbe7 	bl	800c12c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b960:	f000 f8ee 	bl	800bb40 <prvIsQueueEmpty>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	f43f af6f 	beq.w	800b84a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b96c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3730      	adds	r7, #48	; 0x30
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	e000ed04 	.word	0xe000ed04

0800b97c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b988:	2300      	movs	r3, #0
 800b98a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b990:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10d      	bne.n	800b9b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d14d      	bne.n	800ba3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 ffbc 	bl	800c924 <xTaskPriorityDisinherit>
 800b9ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	609a      	str	r2, [r3, #8]
 800b9b4:	e043      	b.n	800ba3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d119      	bne.n	800b9f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6858      	ldr	r0, [r3, #4]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	68b9      	ldr	r1, [r7, #8]
 800b9c8:	f002 fe1d 	bl	800e606 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	685a      	ldr	r2, [r3, #4]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d4:	441a      	add	r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d32b      	bcc.n	800ba3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	605a      	str	r2, [r3, #4]
 800b9ee:	e026      	b.n	800ba3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	68d8      	ldr	r0, [r3, #12]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	f002 fe03 	bl	800e606 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	68da      	ldr	r2, [r3, #12]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba08:	425b      	negs	r3, r3
 800ba0a:	441a      	add	r2, r3
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	68da      	ldr	r2, [r3, #12]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d207      	bcs.n	800ba2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	689a      	ldr	r2, [r3, #8]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba24:	425b      	negs	r3, r3
 800ba26:	441a      	add	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d105      	bne.n	800ba3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d002      	beq.n	800ba3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	3b01      	subs	r3, #1
 800ba3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	1c5a      	adds	r2, r3, #1
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ba46:	697b      	ldr	r3, [r7, #20]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d018      	beq.n	800ba94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	68da      	ldr	r2, [r3, #12]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6a:	441a      	add	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	68da      	ldr	r2, [r3, #12]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d303      	bcc.n	800ba84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	68d9      	ldr	r1, [r3, #12]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	6838      	ldr	r0, [r7, #0]
 800ba90:	f002 fdb9 	bl	800e606 <memcpy>
	}
}
 800ba94:	bf00      	nop
 800ba96:	3708      	adds	r7, #8
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800baa4:	f001 fc7e 	bl	800d3a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bab0:	e011      	b.n	800bad6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d012      	beq.n	800bae0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	3324      	adds	r3, #36	; 0x24
 800babe:	4618      	mov	r0, r3
 800bac0:	f000 fd50 	bl	800c564 <xTaskRemoveFromEventList>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d001      	beq.n	800bace <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800baca:	f000 fe27 	bl	800c71c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bace:	7bfb      	ldrb	r3, [r7, #15]
 800bad0:	3b01      	subs	r3, #1
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bada:	2b00      	cmp	r3, #0
 800badc:	dce9      	bgt.n	800bab2 <prvUnlockQueue+0x16>
 800bade:	e000      	b.n	800bae2 <prvUnlockQueue+0x46>
					break;
 800bae0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	22ff      	movs	r2, #255	; 0xff
 800bae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800baea:	f001 fc8b 	bl	800d404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800baee:	f001 fc59 	bl	800d3a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800baf8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bafa:	e011      	b.n	800bb20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d012      	beq.n	800bb2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	3310      	adds	r3, #16
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f000 fd2b 	bl	800c564 <xTaskRemoveFromEventList>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d001      	beq.n	800bb18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb14:	f000 fe02 	bl	800c71c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	dce9      	bgt.n	800bafc <prvUnlockQueue+0x60>
 800bb28:	e000      	b.n	800bb2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	22ff      	movs	r2, #255	; 0xff
 800bb30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bb34:	f001 fc66 	bl	800d404 <vPortExitCritical>
}
 800bb38:	bf00      	nop
 800bb3a:	3710      	adds	r7, #16
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb48:	f001 fc2c 	bl	800d3a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d102      	bne.n	800bb5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bb54:	2301      	movs	r3, #1
 800bb56:	60fb      	str	r3, [r7, #12]
 800bb58:	e001      	b.n	800bb5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb5e:	f001 fc51 	bl	800d404 <vPortExitCritical>

	return xReturn;
 800bb62:	68fb      	ldr	r3, [r7, #12]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb74:	f001 fc16 	bl	800d3a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d102      	bne.n	800bb8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bb84:	2301      	movs	r3, #1
 800bb86:	60fb      	str	r3, [r7, #12]
 800bb88:	e001      	b.n	800bb8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb8e:	f001 fc39 	bl	800d404 <vPortExitCritical>

	return xReturn;
 800bb92:	68fb      	ldr	r3, [r7, #12]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bba6:	2300      	movs	r3, #0
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	e014      	b.n	800bbd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bbac:	4a0f      	ldr	r2, [pc, #60]	; (800bbec <vQueueAddToRegistry+0x50>)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10b      	bne.n	800bbd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bbb8:	490c      	ldr	r1, [pc, #48]	; (800bbec <vQueueAddToRegistry+0x50>)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bbc2:	4a0a      	ldr	r2, [pc, #40]	; (800bbec <vQueueAddToRegistry+0x50>)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	00db      	lsls	r3, r3, #3
 800bbc8:	4413      	add	r3, r2
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bbce:	e006      	b.n	800bbde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	60fb      	str	r3, [r7, #12]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2b07      	cmp	r3, #7
 800bbda:	d9e7      	bls.n	800bbac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bbdc:	bf00      	nop
 800bbde:	bf00      	nop
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	20005880 	.word	0x20005880

0800bbf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bc00:	f001 fbd0 	bl	800d3a4 <vPortEnterCritical>
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc0a:	b25b      	sxtb	r3, r3
 800bc0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc10:	d103      	bne.n	800bc1a <vQueueWaitForMessageRestricted+0x2a>
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc20:	b25b      	sxtb	r3, r3
 800bc22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc26:	d103      	bne.n	800bc30 <vQueueWaitForMessageRestricted+0x40>
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc30:	f001 fbe8 	bl	800d404 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d106      	bne.n	800bc4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	3324      	adds	r3, #36	; 0x24
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	68b9      	ldr	r1, [r7, #8]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f000 fc61 	bl	800c50c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bc4a:	6978      	ldr	r0, [r7, #20]
 800bc4c:	f7ff ff26 	bl	800ba9c <prvUnlockQueue>
	}
 800bc50:	bf00      	nop
 800bc52:	3718      	adds	r7, #24
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b08e      	sub	sp, #56	; 0x38
 800bc5c:	af04      	add	r7, sp, #16
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	607a      	str	r2, [r7, #4]
 800bc64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10a      	bne.n	800bc82 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc70:	f383 8811 	msr	BASEPRI, r3
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	f3bf 8f4f 	dsb	sy
 800bc7c:	623b      	str	r3, [r7, #32]
}
 800bc7e:	bf00      	nop
 800bc80:	e7fe      	b.n	800bc80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10a      	bne.n	800bc9e <xTaskCreateStatic+0x46>
	__asm volatile
 800bc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	61fb      	str	r3, [r7, #28]
}
 800bc9a:	bf00      	nop
 800bc9c:	e7fe      	b.n	800bc9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc9e:	23bc      	movs	r3, #188	; 0xbc
 800bca0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	2bbc      	cmp	r3, #188	; 0xbc
 800bca6:	d00a      	beq.n	800bcbe <xTaskCreateStatic+0x66>
	__asm volatile
 800bca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcac:	f383 8811 	msr	BASEPRI, r3
 800bcb0:	f3bf 8f6f 	isb	sy
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	61bb      	str	r3, [r7, #24]
}
 800bcba:	bf00      	nop
 800bcbc:	e7fe      	b.n	800bcbc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bcbe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d01e      	beq.n	800bd04 <xTaskCreateStatic+0xac>
 800bcc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d01b      	beq.n	800bd04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcd4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd8:	2202      	movs	r2, #2
 800bcda:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcde:	2300      	movs	r3, #0
 800bce0:	9303      	str	r3, [sp, #12]
 800bce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce4:	9302      	str	r3, [sp, #8]
 800bce6:	f107 0314 	add.w	r3, r7, #20
 800bcea:	9301      	str	r3, [sp, #4]
 800bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	68b9      	ldr	r1, [r7, #8]
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f000 f850 	bl	800bd9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcfe:	f000 f8f3 	bl	800bee8 <prvAddNewTaskToReadyList>
 800bd02:	e001      	b.n	800bd08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bd04:	2300      	movs	r3, #0
 800bd06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd08:	697b      	ldr	r3, [r7, #20]
	}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3728      	adds	r7, #40	; 0x28
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b08c      	sub	sp, #48	; 0x30
 800bd16:	af04      	add	r7, sp, #16
 800bd18:	60f8      	str	r0, [r7, #12]
 800bd1a:	60b9      	str	r1, [r7, #8]
 800bd1c:	603b      	str	r3, [r7, #0]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd22:	88fb      	ldrh	r3, [r7, #6]
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4618      	mov	r0, r3
 800bd28:	f001 fc5e 	bl	800d5e8 <pvPortMalloc>
 800bd2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00e      	beq.n	800bd52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd34:	20bc      	movs	r0, #188	; 0xbc
 800bd36:	f001 fc57 	bl	800d5e8 <pvPortMalloc>
 800bd3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d003      	beq.n	800bd4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	697a      	ldr	r2, [r7, #20]
 800bd46:	631a      	str	r2, [r3, #48]	; 0x30
 800bd48:	e005      	b.n	800bd56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd4a:	6978      	ldr	r0, [r7, #20]
 800bd4c:	f001 fd18 	bl	800d780 <vPortFree>
 800bd50:	e001      	b.n	800bd56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd52:	2300      	movs	r3, #0
 800bd54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d017      	beq.n	800bd8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd64:	88fa      	ldrh	r2, [r7, #6]
 800bd66:	2300      	movs	r3, #0
 800bd68:	9303      	str	r3, [sp, #12]
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	9302      	str	r3, [sp, #8]
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	9301      	str	r3, [sp, #4]
 800bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	68b9      	ldr	r1, [r7, #8]
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	f000 f80e 	bl	800bd9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd80:	69f8      	ldr	r0, [r7, #28]
 800bd82:	f000 f8b1 	bl	800bee8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd86:	2301      	movs	r3, #1
 800bd88:	61bb      	str	r3, [r7, #24]
 800bd8a:	e002      	b.n	800bd92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd92:	69bb      	ldr	r3, [r7, #24]
	}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3720      	adds	r7, #32
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b088      	sub	sp, #32
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
 800bda8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	21a5      	movs	r1, #165	; 0xa5
 800bdb6:	f002 fc34 	bl	800e622 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	4413      	add	r3, r2
 800bdca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	f023 0307 	bic.w	r3, r3, #7
 800bdd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	f003 0307 	and.w	r3, r3, #7
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d00a      	beq.n	800bdf4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	617b      	str	r3, [r7, #20]
}
 800bdf0:	bf00      	nop
 800bdf2:	e7fe      	b.n	800bdf2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d01f      	beq.n	800be3a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	61fb      	str	r3, [r7, #28]
 800bdfe:	e012      	b.n	800be26 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	4413      	add	r3, r2
 800be06:	7819      	ldrb	r1, [r3, #0]
 800be08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	4413      	add	r3, r2
 800be0e:	3334      	adds	r3, #52	; 0x34
 800be10:	460a      	mov	r2, r1
 800be12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	4413      	add	r3, r2
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d006      	beq.n	800be2e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be20:	69fb      	ldr	r3, [r7, #28]
 800be22:	3301      	adds	r3, #1
 800be24:	61fb      	str	r3, [r7, #28]
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	2b0f      	cmp	r3, #15
 800be2a:	d9e9      	bls.n	800be00 <prvInitialiseNewTask+0x64>
 800be2c:	e000      	b.n	800be30 <prvInitialiseNewTask+0x94>
			{
				break;
 800be2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be32:	2200      	movs	r2, #0
 800be34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be38:	e003      	b.n	800be42 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	2200      	movs	r2, #0
 800be3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	2b37      	cmp	r3, #55	; 0x37
 800be46:	d901      	bls.n	800be4c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be48:	2337      	movs	r3, #55	; 0x37
 800be4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800be58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5a:	2200      	movs	r2, #0
 800be5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be60:	3304      	adds	r3, #4
 800be62:	4618      	mov	r0, r3
 800be64:	f7ff f978 	bl	800b158 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6a:	3318      	adds	r3, #24
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7ff f973 	bl	800b158 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	2200      	movs	r2, #0
 800be8c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	2200      	movs	r2, #0
 800be94:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	3354      	adds	r3, #84	; 0x54
 800be9c:	2260      	movs	r2, #96	; 0x60
 800be9e:	2100      	movs	r1, #0
 800bea0:	4618      	mov	r0, r3
 800bea2:	f002 fbbe 	bl	800e622 <memset>
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	4a0c      	ldr	r2, [pc, #48]	; (800bedc <prvInitialiseNewTask+0x140>)
 800beaa:	659a      	str	r2, [r3, #88]	; 0x58
 800beac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beae:	4a0c      	ldr	r2, [pc, #48]	; (800bee0 <prvInitialiseNewTask+0x144>)
 800beb0:	65da      	str	r2, [r3, #92]	; 0x5c
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	4a0b      	ldr	r2, [pc, #44]	; (800bee4 <prvInitialiseNewTask+0x148>)
 800beb6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800beb8:	683a      	ldr	r2, [r7, #0]
 800beba:	68f9      	ldr	r1, [r7, #12]
 800bebc:	69b8      	ldr	r0, [r7, #24]
 800bebe:	f001 f941 	bl	800d144 <pxPortInitialiseStack>
 800bec2:	4602      	mov	r2, r0
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beca:	2b00      	cmp	r3, #0
 800becc:	d002      	beq.n	800bed4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bed2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bed4:	bf00      	nop
 800bed6:	3720      	adds	r7, #32
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	08013934 	.word	0x08013934
 800bee0:	08013954 	.word	0x08013954
 800bee4:	08013914 	.word	0x08013914

0800bee8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bef0:	f001 fa58 	bl	800d3a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bef4:	4b2d      	ldr	r3, [pc, #180]	; (800bfac <prvAddNewTaskToReadyList+0xc4>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3301      	adds	r3, #1
 800befa:	4a2c      	ldr	r2, [pc, #176]	; (800bfac <prvAddNewTaskToReadyList+0xc4>)
 800befc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800befe:	4b2c      	ldr	r3, [pc, #176]	; (800bfb0 <prvAddNewTaskToReadyList+0xc8>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d109      	bne.n	800bf1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf06:	4a2a      	ldr	r2, [pc, #168]	; (800bfb0 <prvAddNewTaskToReadyList+0xc8>)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf0c:	4b27      	ldr	r3, [pc, #156]	; (800bfac <prvAddNewTaskToReadyList+0xc4>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d110      	bne.n	800bf36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf14:	f000 fc26 	bl	800c764 <prvInitialiseTaskLists>
 800bf18:	e00d      	b.n	800bf36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf1a:	4b26      	ldr	r3, [pc, #152]	; (800bfb4 <prvAddNewTaskToReadyList+0xcc>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d109      	bne.n	800bf36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf22:	4b23      	ldr	r3, [pc, #140]	; (800bfb0 <prvAddNewTaskToReadyList+0xc8>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d802      	bhi.n	800bf36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf30:	4a1f      	ldr	r2, [pc, #124]	; (800bfb0 <prvAddNewTaskToReadyList+0xc8>)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf36:	4b20      	ldr	r3, [pc, #128]	; (800bfb8 <prvAddNewTaskToReadyList+0xd0>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	4a1e      	ldr	r2, [pc, #120]	; (800bfb8 <prvAddNewTaskToReadyList+0xd0>)
 800bf3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bf40:	4b1d      	ldr	r3, [pc, #116]	; (800bfb8 <prvAddNewTaskToReadyList+0xd0>)
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf4c:	4b1b      	ldr	r3, [pc, #108]	; (800bfbc <prvAddNewTaskToReadyList+0xd4>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d903      	bls.n	800bf5c <prvAddNewTaskToReadyList+0x74>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf58:	4a18      	ldr	r2, [pc, #96]	; (800bfbc <prvAddNewTaskToReadyList+0xd4>)
 800bf5a:	6013      	str	r3, [r2, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf60:	4613      	mov	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4a15      	ldr	r2, [pc, #84]	; (800bfc0 <prvAddNewTaskToReadyList+0xd8>)
 800bf6a:	441a      	add	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	3304      	adds	r3, #4
 800bf70:	4619      	mov	r1, r3
 800bf72:	4610      	mov	r0, r2
 800bf74:	f7ff f8fd 	bl	800b172 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf78:	f001 fa44 	bl	800d404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf7c:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <prvAddNewTaskToReadyList+0xcc>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00e      	beq.n	800bfa2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf84:	4b0a      	ldr	r3, [pc, #40]	; (800bfb0 <prvAddNewTaskToReadyList+0xc8>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d207      	bcs.n	800bfa2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf92:	4b0c      	ldr	r3, [pc, #48]	; (800bfc4 <prvAddNewTaskToReadyList+0xdc>)
 800bf94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf98:	601a      	str	r2, [r3, #0]
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfa2:	bf00      	nop
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	20001118 	.word	0x20001118
 800bfb0:	20000c44 	.word	0x20000c44
 800bfb4:	20001124 	.word	0x20001124
 800bfb8:	20001134 	.word	0x20001134
 800bfbc:	20001120 	.word	0x20001120
 800bfc0:	20000c48 	.word	0x20000c48
 800bfc4:	e000ed04 	.word	0xe000ed04

0800bfc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d017      	beq.n	800c00a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bfda:	4b13      	ldr	r3, [pc, #76]	; (800c028 <vTaskDelay+0x60>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00a      	beq.n	800bff8 <vTaskDelay+0x30>
	__asm volatile
 800bfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	60bb      	str	r3, [r7, #8]
}
 800bff4:	bf00      	nop
 800bff6:	e7fe      	b.n	800bff6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bff8:	f000 f88a 	bl	800c110 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bffc:	2100      	movs	r1, #0
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 fcfe 	bl	800ca00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c004:	f000 f892 	bl	800c12c <xTaskResumeAll>
 800c008:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d107      	bne.n	800c020 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c010:	4b06      	ldr	r3, [pc, #24]	; (800c02c <vTaskDelay+0x64>)
 800c012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c016:	601a      	str	r2, [r3, #0]
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c020:	bf00      	nop
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	20001140 	.word	0x20001140
 800c02c:	e000ed04 	.word	0xe000ed04

0800c030 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b08a      	sub	sp, #40	; 0x28
 800c034:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c036:	2300      	movs	r3, #0
 800c038:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c03a:	2300      	movs	r3, #0
 800c03c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c03e:	463a      	mov	r2, r7
 800c040:	1d39      	adds	r1, r7, #4
 800c042:	f107 0308 	add.w	r3, r7, #8
 800c046:	4618      	mov	r0, r3
 800c048:	f7ff f832 	bl	800b0b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c04c:	6839      	ldr	r1, [r7, #0]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	9202      	str	r2, [sp, #8]
 800c054:	9301      	str	r3, [sp, #4]
 800c056:	2300      	movs	r3, #0
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	2300      	movs	r3, #0
 800c05c:	460a      	mov	r2, r1
 800c05e:	4924      	ldr	r1, [pc, #144]	; (800c0f0 <vTaskStartScheduler+0xc0>)
 800c060:	4824      	ldr	r0, [pc, #144]	; (800c0f4 <vTaskStartScheduler+0xc4>)
 800c062:	f7ff fdf9 	bl	800bc58 <xTaskCreateStatic>
 800c066:	4603      	mov	r3, r0
 800c068:	4a23      	ldr	r2, [pc, #140]	; (800c0f8 <vTaskStartScheduler+0xc8>)
 800c06a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c06c:	4b22      	ldr	r3, [pc, #136]	; (800c0f8 <vTaskStartScheduler+0xc8>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c074:	2301      	movs	r3, #1
 800c076:	617b      	str	r3, [r7, #20]
 800c078:	e001      	b.n	800c07e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c07a:	2300      	movs	r3, #0
 800c07c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d102      	bne.n	800c08a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c084:	f000 fd10 	bl	800caa8 <xTimerCreateTimerTask>
 800c088:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d11b      	bne.n	800c0c8 <vTaskStartScheduler+0x98>
	__asm volatile
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	613b      	str	r3, [r7, #16]
}
 800c0a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c0a4:	4b15      	ldr	r3, [pc, #84]	; (800c0fc <vTaskStartScheduler+0xcc>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	3354      	adds	r3, #84	; 0x54
 800c0aa:	4a15      	ldr	r2, [pc, #84]	; (800c100 <vTaskStartScheduler+0xd0>)
 800c0ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c0ae:	4b15      	ldr	r3, [pc, #84]	; (800c104 <vTaskStartScheduler+0xd4>)
 800c0b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c0b6:	4b14      	ldr	r3, [pc, #80]	; (800c108 <vTaskStartScheduler+0xd8>)
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c0bc:	4b13      	ldr	r3, [pc, #76]	; (800c10c <vTaskStartScheduler+0xdc>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c0c2:	f001 f8cd 	bl	800d260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c0c6:	e00e      	b.n	800c0e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0ce:	d10a      	bne.n	800c0e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	60fb      	str	r3, [r7, #12]
}
 800c0e2:	bf00      	nop
 800c0e4:	e7fe      	b.n	800c0e4 <vTaskStartScheduler+0xb4>
}
 800c0e6:	bf00      	nop
 800c0e8:	3718      	adds	r7, #24
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	08013744 	.word	0x08013744
 800c0f4:	0800c735 	.word	0x0800c735
 800c0f8:	2000113c 	.word	0x2000113c
 800c0fc:	20000c44 	.word	0x20000c44
 800c100:	20000198 	.word	0x20000198
 800c104:	20001138 	.word	0x20001138
 800c108:	20001124 	.word	0x20001124
 800c10c:	2000111c 	.word	0x2000111c

0800c110 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c110:	b480      	push	{r7}
 800c112:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c114:	4b04      	ldr	r3, [pc, #16]	; (800c128 <vTaskSuspendAll+0x18>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	3301      	adds	r3, #1
 800c11a:	4a03      	ldr	r2, [pc, #12]	; (800c128 <vTaskSuspendAll+0x18>)
 800c11c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c11e:	bf00      	nop
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr
 800c128:	20001140 	.word	0x20001140

0800c12c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c132:	2300      	movs	r3, #0
 800c134:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c136:	2300      	movs	r3, #0
 800c138:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c13a:	4b42      	ldr	r3, [pc, #264]	; (800c244 <xTaskResumeAll+0x118>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d10a      	bne.n	800c158 <xTaskResumeAll+0x2c>
	__asm volatile
 800c142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c146:	f383 8811 	msr	BASEPRI, r3
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	603b      	str	r3, [r7, #0]
}
 800c154:	bf00      	nop
 800c156:	e7fe      	b.n	800c156 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c158:	f001 f924 	bl	800d3a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c15c:	4b39      	ldr	r3, [pc, #228]	; (800c244 <xTaskResumeAll+0x118>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	3b01      	subs	r3, #1
 800c162:	4a38      	ldr	r2, [pc, #224]	; (800c244 <xTaskResumeAll+0x118>)
 800c164:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c166:	4b37      	ldr	r3, [pc, #220]	; (800c244 <xTaskResumeAll+0x118>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d162      	bne.n	800c234 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c16e:	4b36      	ldr	r3, [pc, #216]	; (800c248 <xTaskResumeAll+0x11c>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d05e      	beq.n	800c234 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c176:	e02f      	b.n	800c1d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c178:	4b34      	ldr	r3, [pc, #208]	; (800c24c <xTaskResumeAll+0x120>)
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	3318      	adds	r3, #24
 800c184:	4618      	mov	r0, r3
 800c186:	f7ff f851 	bl	800b22c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	3304      	adds	r3, #4
 800c18e:	4618      	mov	r0, r3
 800c190:	f7ff f84c 	bl	800b22c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c198:	4b2d      	ldr	r3, [pc, #180]	; (800c250 <xTaskResumeAll+0x124>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d903      	bls.n	800c1a8 <xTaskResumeAll+0x7c>
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a4:	4a2a      	ldr	r2, [pc, #168]	; (800c250 <xTaskResumeAll+0x124>)
 800c1a6:	6013      	str	r3, [r2, #0]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4413      	add	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4a27      	ldr	r2, [pc, #156]	; (800c254 <xTaskResumeAll+0x128>)
 800c1b6:	441a      	add	r2, r3
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	3304      	adds	r3, #4
 800c1bc:	4619      	mov	r1, r3
 800c1be:	4610      	mov	r0, r2
 800c1c0:	f7fe ffd7 	bl	800b172 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c8:	4b23      	ldr	r3, [pc, #140]	; (800c258 <xTaskResumeAll+0x12c>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d302      	bcc.n	800c1d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c1d2:	4b22      	ldr	r3, [pc, #136]	; (800c25c <xTaskResumeAll+0x130>)
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c1d8:	4b1c      	ldr	r3, [pc, #112]	; (800c24c <xTaskResumeAll+0x120>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1cb      	bne.n	800c178 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d001      	beq.n	800c1ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c1e6:	f000 fb5f 	bl	800c8a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c1ea:	4b1d      	ldr	r3, [pc, #116]	; (800c260 <xTaskResumeAll+0x134>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d010      	beq.n	800c218 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c1f6:	f000 f847 	bl	800c288 <xTaskIncrementTick>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d002      	beq.n	800c206 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c200:	4b16      	ldr	r3, [pc, #88]	; (800c25c <xTaskResumeAll+0x130>)
 800c202:	2201      	movs	r2, #1
 800c204:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	3b01      	subs	r3, #1
 800c20a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1f1      	bne.n	800c1f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c212:	4b13      	ldr	r3, [pc, #76]	; (800c260 <xTaskResumeAll+0x134>)
 800c214:	2200      	movs	r2, #0
 800c216:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c218:	4b10      	ldr	r3, [pc, #64]	; (800c25c <xTaskResumeAll+0x130>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d009      	beq.n	800c234 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c220:	2301      	movs	r3, #1
 800c222:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c224:	4b0f      	ldr	r3, [pc, #60]	; (800c264 <xTaskResumeAll+0x138>)
 800c226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c22a:	601a      	str	r2, [r3, #0]
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c234:	f001 f8e6 	bl	800d404 <vPortExitCritical>

	return xAlreadyYielded;
 800c238:	68bb      	ldr	r3, [r7, #8]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	20001140 	.word	0x20001140
 800c248:	20001118 	.word	0x20001118
 800c24c:	200010d8 	.word	0x200010d8
 800c250:	20001120 	.word	0x20001120
 800c254:	20000c48 	.word	0x20000c48
 800c258:	20000c44 	.word	0x20000c44
 800c25c:	2000112c 	.word	0x2000112c
 800c260:	20001128 	.word	0x20001128
 800c264:	e000ed04 	.word	0xe000ed04

0800c268 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c26e:	4b05      	ldr	r3, [pc, #20]	; (800c284 <xTaskGetTickCount+0x1c>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c274:	687b      	ldr	r3, [r7, #4]
}
 800c276:	4618      	mov	r0, r3
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	2000111c 	.word	0x2000111c

0800c288 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b086      	sub	sp, #24
 800c28c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c28e:	2300      	movs	r3, #0
 800c290:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c292:	4b4f      	ldr	r3, [pc, #316]	; (800c3d0 <xTaskIncrementTick+0x148>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	f040 808f 	bne.w	800c3ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c29c:	4b4d      	ldr	r3, [pc, #308]	; (800c3d4 <xTaskIncrementTick+0x14c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c2a4:	4a4b      	ldr	r2, [pc, #300]	; (800c3d4 <xTaskIncrementTick+0x14c>)
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d120      	bne.n	800c2f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c2b0:	4b49      	ldr	r3, [pc, #292]	; (800c3d8 <xTaskIncrementTick+0x150>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00a      	beq.n	800c2d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	603b      	str	r3, [r7, #0]
}
 800c2cc:	bf00      	nop
 800c2ce:	e7fe      	b.n	800c2ce <xTaskIncrementTick+0x46>
 800c2d0:	4b41      	ldr	r3, [pc, #260]	; (800c3d8 <xTaskIncrementTick+0x150>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	4b41      	ldr	r3, [pc, #260]	; (800c3dc <xTaskIncrementTick+0x154>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a3f      	ldr	r2, [pc, #252]	; (800c3d8 <xTaskIncrementTick+0x150>)
 800c2dc:	6013      	str	r3, [r2, #0]
 800c2de:	4a3f      	ldr	r2, [pc, #252]	; (800c3dc <xTaskIncrementTick+0x154>)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6013      	str	r3, [r2, #0]
 800c2e4:	4b3e      	ldr	r3, [pc, #248]	; (800c3e0 <xTaskIncrementTick+0x158>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	4a3d      	ldr	r2, [pc, #244]	; (800c3e0 <xTaskIncrementTick+0x158>)
 800c2ec:	6013      	str	r3, [r2, #0]
 800c2ee:	f000 fadb 	bl	800c8a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c2f2:	4b3c      	ldr	r3, [pc, #240]	; (800c3e4 <xTaskIncrementTick+0x15c>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d349      	bcc.n	800c390 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2fc:	4b36      	ldr	r3, [pc, #216]	; (800c3d8 <xTaskIncrementTick+0x150>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d104      	bne.n	800c310 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c306:	4b37      	ldr	r3, [pc, #220]	; (800c3e4 <xTaskIncrementTick+0x15c>)
 800c308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c30c:	601a      	str	r2, [r3, #0]
					break;
 800c30e:	e03f      	b.n	800c390 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c310:	4b31      	ldr	r3, [pc, #196]	; (800c3d8 <xTaskIncrementTick+0x150>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	429a      	cmp	r2, r3
 800c326:	d203      	bcs.n	800c330 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c328:	4a2e      	ldr	r2, [pc, #184]	; (800c3e4 <xTaskIncrementTick+0x15c>)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c32e:	e02f      	b.n	800c390 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	3304      	adds	r3, #4
 800c334:	4618      	mov	r0, r3
 800c336:	f7fe ff79 	bl	800b22c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d004      	beq.n	800c34c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	3318      	adds	r3, #24
 800c346:	4618      	mov	r0, r3
 800c348:	f7fe ff70 	bl	800b22c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c350:	4b25      	ldr	r3, [pc, #148]	; (800c3e8 <xTaskIncrementTick+0x160>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	429a      	cmp	r2, r3
 800c356:	d903      	bls.n	800c360 <xTaskIncrementTick+0xd8>
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35c:	4a22      	ldr	r2, [pc, #136]	; (800c3e8 <xTaskIncrementTick+0x160>)
 800c35e:	6013      	str	r3, [r2, #0]
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c364:	4613      	mov	r3, r2
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	4413      	add	r3, r2
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4a1f      	ldr	r2, [pc, #124]	; (800c3ec <xTaskIncrementTick+0x164>)
 800c36e:	441a      	add	r2, r3
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	3304      	adds	r3, #4
 800c374:	4619      	mov	r1, r3
 800c376:	4610      	mov	r0, r2
 800c378:	f7fe fefb 	bl	800b172 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c380:	4b1b      	ldr	r3, [pc, #108]	; (800c3f0 <xTaskIncrementTick+0x168>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c386:	429a      	cmp	r2, r3
 800c388:	d3b8      	bcc.n	800c2fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c38a:	2301      	movs	r3, #1
 800c38c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c38e:	e7b5      	b.n	800c2fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c390:	4b17      	ldr	r3, [pc, #92]	; (800c3f0 <xTaskIncrementTick+0x168>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c396:	4915      	ldr	r1, [pc, #84]	; (800c3ec <xTaskIncrementTick+0x164>)
 800c398:	4613      	mov	r3, r2
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	440b      	add	r3, r1
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d901      	bls.n	800c3ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c3ac:	4b11      	ldr	r3, [pc, #68]	; (800c3f4 <xTaskIncrementTick+0x16c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d007      	beq.n	800c3c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	e004      	b.n	800c3c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c3ba:	4b0f      	ldr	r3, [pc, #60]	; (800c3f8 <xTaskIncrementTick+0x170>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	4a0d      	ldr	r2, [pc, #52]	; (800c3f8 <xTaskIncrementTick+0x170>)
 800c3c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c3c4:	697b      	ldr	r3, [r7, #20]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3718      	adds	r7, #24
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	20001140 	.word	0x20001140
 800c3d4:	2000111c 	.word	0x2000111c
 800c3d8:	200010d0 	.word	0x200010d0
 800c3dc:	200010d4 	.word	0x200010d4
 800c3e0:	20001130 	.word	0x20001130
 800c3e4:	20001138 	.word	0x20001138
 800c3e8:	20001120 	.word	0x20001120
 800c3ec:	20000c48 	.word	0x20000c48
 800c3f0:	20000c44 	.word	0x20000c44
 800c3f4:	2000112c 	.word	0x2000112c
 800c3f8:	20001128 	.word	0x20001128

0800c3fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b085      	sub	sp, #20
 800c400:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c402:	4b2a      	ldr	r3, [pc, #168]	; (800c4ac <vTaskSwitchContext+0xb0>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d003      	beq.n	800c412 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c40a:	4b29      	ldr	r3, [pc, #164]	; (800c4b0 <vTaskSwitchContext+0xb4>)
 800c40c:	2201      	movs	r2, #1
 800c40e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c410:	e046      	b.n	800c4a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c412:	4b27      	ldr	r3, [pc, #156]	; (800c4b0 <vTaskSwitchContext+0xb4>)
 800c414:	2200      	movs	r2, #0
 800c416:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c418:	4b26      	ldr	r3, [pc, #152]	; (800c4b4 <vTaskSwitchContext+0xb8>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	60fb      	str	r3, [r7, #12]
 800c41e:	e010      	b.n	800c442 <vTaskSwitchContext+0x46>
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10a      	bne.n	800c43c <vTaskSwitchContext+0x40>
	__asm volatile
 800c426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	607b      	str	r3, [r7, #4]
}
 800c438:	bf00      	nop
 800c43a:	e7fe      	b.n	800c43a <vTaskSwitchContext+0x3e>
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	3b01      	subs	r3, #1
 800c440:	60fb      	str	r3, [r7, #12]
 800c442:	491d      	ldr	r1, [pc, #116]	; (800c4b8 <vTaskSwitchContext+0xbc>)
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	4613      	mov	r3, r2
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4413      	add	r3, r2
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	440b      	add	r3, r1
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d0e4      	beq.n	800c420 <vTaskSwitchContext+0x24>
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	4613      	mov	r3, r2
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4413      	add	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4a15      	ldr	r2, [pc, #84]	; (800c4b8 <vTaskSwitchContext+0xbc>)
 800c462:	4413      	add	r3, r2
 800c464:	60bb      	str	r3, [r7, #8]
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	605a      	str	r2, [r3, #4]
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	685a      	ldr	r2, [r3, #4]
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	3308      	adds	r3, #8
 800c478:	429a      	cmp	r2, r3
 800c47a:	d104      	bne.n	800c486 <vTaskSwitchContext+0x8a>
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	685a      	ldr	r2, [r3, #4]
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	605a      	str	r2, [r3, #4]
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	4a0b      	ldr	r2, [pc, #44]	; (800c4bc <vTaskSwitchContext+0xc0>)
 800c48e:	6013      	str	r3, [r2, #0]
 800c490:	4a08      	ldr	r2, [pc, #32]	; (800c4b4 <vTaskSwitchContext+0xb8>)
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c496:	4b09      	ldr	r3, [pc, #36]	; (800c4bc <vTaskSwitchContext+0xc0>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	3354      	adds	r3, #84	; 0x54
 800c49c:	4a08      	ldr	r2, [pc, #32]	; (800c4c0 <vTaskSwitchContext+0xc4>)
 800c49e:	6013      	str	r3, [r2, #0]
}
 800c4a0:	bf00      	nop
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	20001140 	.word	0x20001140
 800c4b0:	2000112c 	.word	0x2000112c
 800c4b4:	20001120 	.word	0x20001120
 800c4b8:	20000c48 	.word	0x20000c48
 800c4bc:	20000c44 	.word	0x20000c44
 800c4c0:	20000198 	.word	0x20000198

0800c4c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10a      	bne.n	800c4ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	60fb      	str	r3, [r7, #12]
}
 800c4e6:	bf00      	nop
 800c4e8:	e7fe      	b.n	800c4e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4ea:	4b07      	ldr	r3, [pc, #28]	; (800c508 <vTaskPlaceOnEventList+0x44>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	3318      	adds	r3, #24
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7fe fe61 	bl	800b1ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c4f8:	2101      	movs	r1, #1
 800c4fa:	6838      	ldr	r0, [r7, #0]
 800c4fc:	f000 fa80 	bl	800ca00 <prvAddCurrentTaskToDelayedList>
}
 800c500:	bf00      	nop
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	20000c44 	.word	0x20000c44

0800c50c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b086      	sub	sp, #24
 800c510:	af00      	add	r7, sp, #0
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	60b9      	str	r1, [r7, #8]
 800c516:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d10a      	bne.n	800c534 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	617b      	str	r3, [r7, #20]
}
 800c530:	bf00      	nop
 800c532:	e7fe      	b.n	800c532 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c534:	4b0a      	ldr	r3, [pc, #40]	; (800c560 <vTaskPlaceOnEventListRestricted+0x54>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	3318      	adds	r3, #24
 800c53a:	4619      	mov	r1, r3
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f7fe fe18 	bl	800b172 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d002      	beq.n	800c54e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c54c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c54e:	6879      	ldr	r1, [r7, #4]
 800c550:	68b8      	ldr	r0, [r7, #8]
 800c552:	f000 fa55 	bl	800ca00 <prvAddCurrentTaskToDelayedList>
	}
 800c556:	bf00      	nop
 800c558:	3718      	adds	r7, #24
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	20000c44 	.word	0x20000c44

0800c564 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b086      	sub	sp, #24
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d10a      	bne.n	800c590 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57e:	f383 8811 	msr	BASEPRI, r3
 800c582:	f3bf 8f6f 	isb	sy
 800c586:	f3bf 8f4f 	dsb	sy
 800c58a:	60fb      	str	r3, [r7, #12]
}
 800c58c:	bf00      	nop
 800c58e:	e7fe      	b.n	800c58e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	3318      	adds	r3, #24
 800c594:	4618      	mov	r0, r3
 800c596:	f7fe fe49 	bl	800b22c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c59a:	4b1e      	ldr	r3, [pc, #120]	; (800c614 <xTaskRemoveFromEventList+0xb0>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d11d      	bne.n	800c5de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fe fe40 	bl	800b22c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b0:	4b19      	ldr	r3, [pc, #100]	; (800c618 <xTaskRemoveFromEventList+0xb4>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d903      	bls.n	800c5c0 <xTaskRemoveFromEventList+0x5c>
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5bc:	4a16      	ldr	r2, [pc, #88]	; (800c618 <xTaskRemoveFromEventList+0xb4>)
 800c5be:	6013      	str	r3, [r2, #0]
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4a13      	ldr	r2, [pc, #76]	; (800c61c <xTaskRemoveFromEventList+0xb8>)
 800c5ce:	441a      	add	r2, r3
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	3304      	adds	r3, #4
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	4610      	mov	r0, r2
 800c5d8:	f7fe fdcb 	bl	800b172 <vListInsertEnd>
 800c5dc:	e005      	b.n	800c5ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	3318      	adds	r3, #24
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	480e      	ldr	r0, [pc, #56]	; (800c620 <xTaskRemoveFromEventList+0xbc>)
 800c5e6:	f7fe fdc4 	bl	800b172 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ee:	4b0d      	ldr	r3, [pc, #52]	; (800c624 <xTaskRemoveFromEventList+0xc0>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d905      	bls.n	800c604 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c5fc:	4b0a      	ldr	r3, [pc, #40]	; (800c628 <xTaskRemoveFromEventList+0xc4>)
 800c5fe:	2201      	movs	r2, #1
 800c600:	601a      	str	r2, [r3, #0]
 800c602:	e001      	b.n	800c608 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c604:	2300      	movs	r3, #0
 800c606:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c608:	697b      	ldr	r3, [r7, #20]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3718      	adds	r7, #24
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20001140 	.word	0x20001140
 800c618:	20001120 	.word	0x20001120
 800c61c:	20000c48 	.word	0x20000c48
 800c620:	200010d8 	.word	0x200010d8
 800c624:	20000c44 	.word	0x20000c44
 800c628:	2000112c 	.word	0x2000112c

0800c62c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c634:	4b06      	ldr	r3, [pc, #24]	; (800c650 <vTaskInternalSetTimeOutState+0x24>)
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c63c:	4b05      	ldr	r3, [pc, #20]	; (800c654 <vTaskInternalSetTimeOutState+0x28>)
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	605a      	str	r2, [r3, #4]
}
 800c644:	bf00      	nop
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr
 800c650:	20001130 	.word	0x20001130
 800c654:	2000111c 	.word	0x2000111c

0800c658 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b088      	sub	sp, #32
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d10a      	bne.n	800c67e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	613b      	str	r3, [r7, #16]
}
 800c67a:	bf00      	nop
 800c67c:	e7fe      	b.n	800c67c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	60fb      	str	r3, [r7, #12]
}
 800c696:	bf00      	nop
 800c698:	e7fe      	b.n	800c698 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c69a:	f000 fe83 	bl	800d3a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c69e:	4b1d      	ldr	r3, [pc, #116]	; (800c714 <xTaskCheckForTimeOut+0xbc>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	69ba      	ldr	r2, [r7, #24]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6b6:	d102      	bne.n	800c6be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	61fb      	str	r3, [r7, #28]
 800c6bc:	e023      	b.n	800c706 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	4b15      	ldr	r3, [pc, #84]	; (800c718 <xTaskCheckForTimeOut+0xc0>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d007      	beq.n	800c6da <xTaskCheckForTimeOut+0x82>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	69ba      	ldr	r2, [r7, #24]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d302      	bcc.n	800c6da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	61fb      	str	r3, [r7, #28]
 800c6d8:	e015      	b.n	800c706 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d20b      	bcs.n	800c6fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	1ad2      	subs	r2, r2, r3
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff ff9b 	bl	800c62c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	61fb      	str	r3, [r7, #28]
 800c6fa:	e004      	b.n	800c706 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	2200      	movs	r2, #0
 800c700:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c702:	2301      	movs	r3, #1
 800c704:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c706:	f000 fe7d 	bl	800d404 <vPortExitCritical>

	return xReturn;
 800c70a:	69fb      	ldr	r3, [r7, #28]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3720      	adds	r7, #32
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	2000111c 	.word	0x2000111c
 800c718:	20001130 	.word	0x20001130

0800c71c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c71c:	b480      	push	{r7}
 800c71e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c720:	4b03      	ldr	r3, [pc, #12]	; (800c730 <vTaskMissedYield+0x14>)
 800c722:	2201      	movs	r2, #1
 800c724:	601a      	str	r2, [r3, #0]
}
 800c726:	bf00      	nop
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr
 800c730:	2000112c 	.word	0x2000112c

0800c734 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c73c:	f000 f852 	bl	800c7e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c740:	4b06      	ldr	r3, [pc, #24]	; (800c75c <prvIdleTask+0x28>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b01      	cmp	r3, #1
 800c746:	d9f9      	bls.n	800c73c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c748:	4b05      	ldr	r3, [pc, #20]	; (800c760 <prvIdleTask+0x2c>)
 800c74a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c758:	e7f0      	b.n	800c73c <prvIdleTask+0x8>
 800c75a:	bf00      	nop
 800c75c:	20000c48 	.word	0x20000c48
 800c760:	e000ed04 	.word	0xe000ed04

0800c764 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c76a:	2300      	movs	r3, #0
 800c76c:	607b      	str	r3, [r7, #4]
 800c76e:	e00c      	b.n	800c78a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	4613      	mov	r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	4413      	add	r3, r2
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4a12      	ldr	r2, [pc, #72]	; (800c7c4 <prvInitialiseTaskLists+0x60>)
 800c77c:	4413      	add	r3, r2
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fe fcca 	bl	800b118 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	3301      	adds	r3, #1
 800c788:	607b      	str	r3, [r7, #4]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2b37      	cmp	r3, #55	; 0x37
 800c78e:	d9ef      	bls.n	800c770 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c790:	480d      	ldr	r0, [pc, #52]	; (800c7c8 <prvInitialiseTaskLists+0x64>)
 800c792:	f7fe fcc1 	bl	800b118 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c796:	480d      	ldr	r0, [pc, #52]	; (800c7cc <prvInitialiseTaskLists+0x68>)
 800c798:	f7fe fcbe 	bl	800b118 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c79c:	480c      	ldr	r0, [pc, #48]	; (800c7d0 <prvInitialiseTaskLists+0x6c>)
 800c79e:	f7fe fcbb 	bl	800b118 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c7a2:	480c      	ldr	r0, [pc, #48]	; (800c7d4 <prvInitialiseTaskLists+0x70>)
 800c7a4:	f7fe fcb8 	bl	800b118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c7a8:	480b      	ldr	r0, [pc, #44]	; (800c7d8 <prvInitialiseTaskLists+0x74>)
 800c7aa:	f7fe fcb5 	bl	800b118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c7ae:	4b0b      	ldr	r3, [pc, #44]	; (800c7dc <prvInitialiseTaskLists+0x78>)
 800c7b0:	4a05      	ldr	r2, [pc, #20]	; (800c7c8 <prvInitialiseTaskLists+0x64>)
 800c7b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c7b4:	4b0a      	ldr	r3, [pc, #40]	; (800c7e0 <prvInitialiseTaskLists+0x7c>)
 800c7b6:	4a05      	ldr	r2, [pc, #20]	; (800c7cc <prvInitialiseTaskLists+0x68>)
 800c7b8:	601a      	str	r2, [r3, #0]
}
 800c7ba:	bf00      	nop
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	20000c48 	.word	0x20000c48
 800c7c8:	200010a8 	.word	0x200010a8
 800c7cc:	200010bc 	.word	0x200010bc
 800c7d0:	200010d8 	.word	0x200010d8
 800c7d4:	200010ec 	.word	0x200010ec
 800c7d8:	20001104 	.word	0x20001104
 800c7dc:	200010d0 	.word	0x200010d0
 800c7e0:	200010d4 	.word	0x200010d4

0800c7e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7ea:	e019      	b.n	800c820 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c7ec:	f000 fdda 	bl	800d3a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7f0:	4b10      	ldr	r3, [pc, #64]	; (800c834 <prvCheckTasksWaitingTermination+0x50>)
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fe fd15 	bl	800b22c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c802:	4b0d      	ldr	r3, [pc, #52]	; (800c838 <prvCheckTasksWaitingTermination+0x54>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	3b01      	subs	r3, #1
 800c808:	4a0b      	ldr	r2, [pc, #44]	; (800c838 <prvCheckTasksWaitingTermination+0x54>)
 800c80a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c80c:	4b0b      	ldr	r3, [pc, #44]	; (800c83c <prvCheckTasksWaitingTermination+0x58>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	3b01      	subs	r3, #1
 800c812:	4a0a      	ldr	r2, [pc, #40]	; (800c83c <prvCheckTasksWaitingTermination+0x58>)
 800c814:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c816:	f000 fdf5 	bl	800d404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 f810 	bl	800c840 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c820:	4b06      	ldr	r3, [pc, #24]	; (800c83c <prvCheckTasksWaitingTermination+0x58>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1e1      	bne.n	800c7ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c828:	bf00      	nop
 800c82a:	bf00      	nop
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	200010ec 	.word	0x200010ec
 800c838:	20001118 	.word	0x20001118
 800c83c:	20001100 	.word	0x20001100

0800c840 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	3354      	adds	r3, #84	; 0x54
 800c84c:	4618      	mov	r0, r3
 800c84e:	f002 fdd3 	bl	800f3f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d108      	bne.n	800c86e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c860:	4618      	mov	r0, r3
 800c862:	f000 ff8d 	bl	800d780 <vPortFree>
				vPortFree( pxTCB );
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 ff8a 	bl	800d780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c86c:	e018      	b.n	800c8a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c874:	2b01      	cmp	r3, #1
 800c876:	d103      	bne.n	800c880 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 ff81 	bl	800d780 <vPortFree>
	}
 800c87e:	e00f      	b.n	800c8a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c886:	2b02      	cmp	r3, #2
 800c888:	d00a      	beq.n	800c8a0 <prvDeleteTCB+0x60>
	__asm volatile
 800c88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	60fb      	str	r3, [r7, #12]
}
 800c89c:	bf00      	nop
 800c89e:	e7fe      	b.n	800c89e <prvDeleteTCB+0x5e>
	}
 800c8a0:	bf00      	nop
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8ae:	4b0c      	ldr	r3, [pc, #48]	; (800c8e0 <prvResetNextTaskUnblockTime+0x38>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d104      	bne.n	800c8c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c8b8:	4b0a      	ldr	r3, [pc, #40]	; (800c8e4 <prvResetNextTaskUnblockTime+0x3c>)
 800c8ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c8c0:	e008      	b.n	800c8d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8c2:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <prvResetNextTaskUnblockTime+0x38>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	4a04      	ldr	r2, [pc, #16]	; (800c8e4 <prvResetNextTaskUnblockTime+0x3c>)
 800c8d2:	6013      	str	r3, [r2, #0]
}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	200010d0 	.word	0x200010d0
 800c8e4:	20001138 	.word	0x20001138

0800c8e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c8ee:	4b0b      	ldr	r3, [pc, #44]	; (800c91c <xTaskGetSchedulerState+0x34>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d102      	bne.n	800c8fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	607b      	str	r3, [r7, #4]
 800c8fa:	e008      	b.n	800c90e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8fc:	4b08      	ldr	r3, [pc, #32]	; (800c920 <xTaskGetSchedulerState+0x38>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d102      	bne.n	800c90a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c904:	2302      	movs	r3, #2
 800c906:	607b      	str	r3, [r7, #4]
 800c908:	e001      	b.n	800c90e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c90a:	2300      	movs	r3, #0
 800c90c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c90e:	687b      	ldr	r3, [r7, #4]
	}
 800c910:	4618      	mov	r0, r3
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr
 800c91c:	20001124 	.word	0x20001124
 800c920:	20001140 	.word	0x20001140

0800c924 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c930:	2300      	movs	r3, #0
 800c932:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d056      	beq.n	800c9e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c93a:	4b2e      	ldr	r3, [pc, #184]	; (800c9f4 <xTaskPriorityDisinherit+0xd0>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	693a      	ldr	r2, [r7, #16]
 800c940:	429a      	cmp	r2, r3
 800c942:	d00a      	beq.n	800c95a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	60fb      	str	r3, [r7, #12]
}
 800c956:	bf00      	nop
 800c958:	e7fe      	b.n	800c958 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10a      	bne.n	800c978 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c966:	f383 8811 	msr	BASEPRI, r3
 800c96a:	f3bf 8f6f 	isb	sy
 800c96e:	f3bf 8f4f 	dsb	sy
 800c972:	60bb      	str	r3, [r7, #8]
}
 800c974:	bf00      	nop
 800c976:	e7fe      	b.n	800c976 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c97c:	1e5a      	subs	r2, r3, #1
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d02c      	beq.n	800c9e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c992:	2b00      	cmp	r3, #0
 800c994:	d128      	bne.n	800c9e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	3304      	adds	r3, #4
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fe fc46 	bl	800b22c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9b8:	4b0f      	ldr	r3, [pc, #60]	; (800c9f8 <xTaskPriorityDisinherit+0xd4>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d903      	bls.n	800c9c8 <xTaskPriorityDisinherit+0xa4>
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c4:	4a0c      	ldr	r2, [pc, #48]	; (800c9f8 <xTaskPriorityDisinherit+0xd4>)
 800c9c6:	6013      	str	r3, [r2, #0]
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4413      	add	r3, r2
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	4a09      	ldr	r2, [pc, #36]	; (800c9fc <xTaskPriorityDisinherit+0xd8>)
 800c9d6:	441a      	add	r2, r3
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	3304      	adds	r3, #4
 800c9dc:	4619      	mov	r1, r3
 800c9de:	4610      	mov	r0, r2
 800c9e0:	f7fe fbc7 	bl	800b172 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c9e8:	697b      	ldr	r3, [r7, #20]
	}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	20000c44 	.word	0x20000c44
 800c9f8:	20001120 	.word	0x20001120
 800c9fc:	20000c48 	.word	0x20000c48

0800ca00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca0a:	4b21      	ldr	r3, [pc, #132]	; (800ca90 <prvAddCurrentTaskToDelayedList+0x90>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca10:	4b20      	ldr	r3, [pc, #128]	; (800ca94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	3304      	adds	r3, #4
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fe fc08 	bl	800b22c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca22:	d10a      	bne.n	800ca3a <prvAddCurrentTaskToDelayedList+0x3a>
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d007      	beq.n	800ca3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca2a:	4b1a      	ldr	r3, [pc, #104]	; (800ca94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	3304      	adds	r3, #4
 800ca30:	4619      	mov	r1, r3
 800ca32:	4819      	ldr	r0, [pc, #100]	; (800ca98 <prvAddCurrentTaskToDelayedList+0x98>)
 800ca34:	f7fe fb9d 	bl	800b172 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca38:	e026      	b.n	800ca88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4413      	add	r3, r2
 800ca40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca42:	4b14      	ldr	r3, [pc, #80]	; (800ca94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	68ba      	ldr	r2, [r7, #8]
 800ca48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d209      	bcs.n	800ca66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca52:	4b12      	ldr	r3, [pc, #72]	; (800ca9c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	4b0f      	ldr	r3, [pc, #60]	; (800ca94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	3304      	adds	r3, #4
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	4610      	mov	r0, r2
 800ca60:	f7fe fbab 	bl	800b1ba <vListInsert>
}
 800ca64:	e010      	b.n	800ca88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca66:	4b0e      	ldr	r3, [pc, #56]	; (800caa0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	4b0a      	ldr	r3, [pc, #40]	; (800ca94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	3304      	adds	r3, #4
 800ca70:	4619      	mov	r1, r3
 800ca72:	4610      	mov	r0, r2
 800ca74:	f7fe fba1 	bl	800b1ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca78:	4b0a      	ldr	r3, [pc, #40]	; (800caa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d202      	bcs.n	800ca88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ca82:	4a08      	ldr	r2, [pc, #32]	; (800caa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	6013      	str	r3, [r2, #0]
}
 800ca88:	bf00      	nop
 800ca8a:	3710      	adds	r7, #16
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}
 800ca90:	2000111c 	.word	0x2000111c
 800ca94:	20000c44 	.word	0x20000c44
 800ca98:	20001104 	.word	0x20001104
 800ca9c:	200010d4 	.word	0x200010d4
 800caa0:	200010d0 	.word	0x200010d0
 800caa4:	20001138 	.word	0x20001138

0800caa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08a      	sub	sp, #40	; 0x28
 800caac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800caae:	2300      	movs	r3, #0
 800cab0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cab2:	f000 fb07 	bl	800d0c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cab6:	4b1c      	ldr	r3, [pc, #112]	; (800cb28 <xTimerCreateTimerTask+0x80>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d021      	beq.n	800cb02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cabe:	2300      	movs	r3, #0
 800cac0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cac2:	2300      	movs	r3, #0
 800cac4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cac6:	1d3a      	adds	r2, r7, #4
 800cac8:	f107 0108 	add.w	r1, r7, #8
 800cacc:	f107 030c 	add.w	r3, r7, #12
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fe fb07 	bl	800b0e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cad6:	6879      	ldr	r1, [r7, #4]
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	9202      	str	r2, [sp, #8]
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	2302      	movs	r3, #2
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	2300      	movs	r3, #0
 800cae6:	460a      	mov	r2, r1
 800cae8:	4910      	ldr	r1, [pc, #64]	; (800cb2c <xTimerCreateTimerTask+0x84>)
 800caea:	4811      	ldr	r0, [pc, #68]	; (800cb30 <xTimerCreateTimerTask+0x88>)
 800caec:	f7ff f8b4 	bl	800bc58 <xTaskCreateStatic>
 800caf0:	4603      	mov	r3, r0
 800caf2:	4a10      	ldr	r2, [pc, #64]	; (800cb34 <xTimerCreateTimerTask+0x8c>)
 800caf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800caf6:	4b0f      	ldr	r3, [pc, #60]	; (800cb34 <xTimerCreateTimerTask+0x8c>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cafe:	2301      	movs	r3, #1
 800cb00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d10a      	bne.n	800cb1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0c:	f383 8811 	msr	BASEPRI, r3
 800cb10:	f3bf 8f6f 	isb	sy
 800cb14:	f3bf 8f4f 	dsb	sy
 800cb18:	613b      	str	r3, [r7, #16]
}
 800cb1a:	bf00      	nop
 800cb1c:	e7fe      	b.n	800cb1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cb1e:	697b      	ldr	r3, [r7, #20]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3718      	adds	r7, #24
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	20001174 	.word	0x20001174
 800cb2c:	0801374c 	.word	0x0801374c
 800cb30:	0800cc6d 	.word	0x0800cc6d
 800cb34:	20001178 	.word	0x20001178

0800cb38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b08a      	sub	sp, #40	; 0x28
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cb46:	2300      	movs	r3, #0
 800cb48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10a      	bne.n	800cb66 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	623b      	str	r3, [r7, #32]
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cb66:	4b1a      	ldr	r3, [pc, #104]	; (800cbd0 <xTimerGenericCommand+0x98>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d02a      	beq.n	800cbc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	2b05      	cmp	r3, #5
 800cb7e:	dc18      	bgt.n	800cbb2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cb80:	f7ff feb2 	bl	800c8e8 <xTaskGetSchedulerState>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	d109      	bne.n	800cb9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cb8a:	4b11      	ldr	r3, [pc, #68]	; (800cbd0 <xTimerGenericCommand+0x98>)
 800cb8c:	6818      	ldr	r0, [r3, #0]
 800cb8e:	f107 0110 	add.w	r1, r7, #16
 800cb92:	2300      	movs	r3, #0
 800cb94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb96:	f7fe fc77 	bl	800b488 <xQueueGenericSend>
 800cb9a:	6278      	str	r0, [r7, #36]	; 0x24
 800cb9c:	e012      	b.n	800cbc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cb9e:	4b0c      	ldr	r3, [pc, #48]	; (800cbd0 <xTimerGenericCommand+0x98>)
 800cba0:	6818      	ldr	r0, [r3, #0]
 800cba2:	f107 0110 	add.w	r1, r7, #16
 800cba6:	2300      	movs	r3, #0
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f7fe fc6d 	bl	800b488 <xQueueGenericSend>
 800cbae:	6278      	str	r0, [r7, #36]	; 0x24
 800cbb0:	e008      	b.n	800cbc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cbb2:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <xTimerGenericCommand+0x98>)
 800cbb4:	6818      	ldr	r0, [r3, #0]
 800cbb6:	f107 0110 	add.w	r1, r7, #16
 800cbba:	2300      	movs	r3, #0
 800cbbc:	683a      	ldr	r2, [r7, #0]
 800cbbe:	f7fe fd61 	bl	800b684 <xQueueGenericSendFromISR>
 800cbc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3728      	adds	r7, #40	; 0x28
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	20001174 	.word	0x20001174

0800cbd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af02      	add	r7, sp, #8
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbde:	4b22      	ldr	r3, [pc, #136]	; (800cc68 <prvProcessExpiredTimer+0x94>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	3304      	adds	r3, #4
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7fe fb1d 	bl	800b22c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbf8:	f003 0304 	and.w	r3, r3, #4
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d022      	beq.n	800cc46 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	699a      	ldr	r2, [r3, #24]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	18d1      	adds	r1, r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	6978      	ldr	r0, [r7, #20]
 800cc0e:	f000 f8d1 	bl	800cdb4 <prvInsertTimerInActiveList>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01f      	beq.n	800cc58 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc18:	2300      	movs	r3, #0
 800cc1a:	9300      	str	r3, [sp, #0]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	2100      	movs	r1, #0
 800cc22:	6978      	ldr	r0, [r7, #20]
 800cc24:	f7ff ff88 	bl	800cb38 <xTimerGenericCommand>
 800cc28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d113      	bne.n	800cc58 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	60fb      	str	r3, [r7, #12]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc4c:	f023 0301 	bic.w	r3, r3, #1
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	6a1b      	ldr	r3, [r3, #32]
 800cc5c:	6978      	ldr	r0, [r7, #20]
 800cc5e:	4798      	blx	r3
}
 800cc60:	bf00      	nop
 800cc62:	3718      	adds	r7, #24
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	2000116c 	.word	0x2000116c

0800cc6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc74:	f107 0308 	add.w	r3, r7, #8
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f000 f857 	bl	800cd2c <prvGetNextExpireTime>
 800cc7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	4619      	mov	r1, r3
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f000 f803 	bl	800cc90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cc8a:	f000 f8d5 	bl	800ce38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc8e:	e7f1      	b.n	800cc74 <prvTimerTask+0x8>

0800cc90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cc9a:	f7ff fa39 	bl	800c110 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc9e:	f107 0308 	add.w	r3, r7, #8
 800cca2:	4618      	mov	r0, r3
 800cca4:	f000 f866 	bl	800cd74 <prvSampleTimeNow>
 800cca8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d130      	bne.n	800cd12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d10a      	bne.n	800cccc <prvProcessTimerOrBlockTask+0x3c>
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d806      	bhi.n	800cccc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ccbe:	f7ff fa35 	bl	800c12c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ccc2:	68f9      	ldr	r1, [r7, #12]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f7ff ff85 	bl	800cbd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ccca:	e024      	b.n	800cd16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d008      	beq.n	800cce4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ccd2:	4b13      	ldr	r3, [pc, #76]	; (800cd20 <prvProcessTimerOrBlockTask+0x90>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d101      	bne.n	800cce0 <prvProcessTimerOrBlockTask+0x50>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e000      	b.n	800cce2 <prvProcessTimerOrBlockTask+0x52>
 800cce0:	2300      	movs	r3, #0
 800cce2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cce4:	4b0f      	ldr	r3, [pc, #60]	; (800cd24 <prvProcessTimerOrBlockTask+0x94>)
 800cce6:	6818      	ldr	r0, [r3, #0]
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	683a      	ldr	r2, [r7, #0]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	f7fe ff7d 	bl	800bbf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ccf6:	f7ff fa19 	bl	800c12c <xTaskResumeAll>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d10a      	bne.n	800cd16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cd00:	4b09      	ldr	r3, [pc, #36]	; (800cd28 <prvProcessTimerOrBlockTask+0x98>)
 800cd02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd06:	601a      	str	r2, [r3, #0]
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	f3bf 8f6f 	isb	sy
}
 800cd10:	e001      	b.n	800cd16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cd12:	f7ff fa0b 	bl	800c12c <xTaskResumeAll>
}
 800cd16:	bf00      	nop
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	20001170 	.word	0x20001170
 800cd24:	20001174 	.word	0x20001174
 800cd28:	e000ed04 	.word	0xe000ed04

0800cd2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b085      	sub	sp, #20
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cd34:	4b0e      	ldr	r3, [pc, #56]	; (800cd70 <prvGetNextExpireTime+0x44>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d101      	bne.n	800cd42 <prvGetNextExpireTime+0x16>
 800cd3e:	2201      	movs	r2, #1
 800cd40:	e000      	b.n	800cd44 <prvGetNextExpireTime+0x18>
 800cd42:	2200      	movs	r2, #0
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d105      	bne.n	800cd5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd50:	4b07      	ldr	r3, [pc, #28]	; (800cd70 <prvGetNextExpireTime+0x44>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	60fb      	str	r3, [r7, #12]
 800cd5a:	e001      	b.n	800cd60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cd60:	68fb      	ldr	r3, [r7, #12]
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3714      	adds	r7, #20
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr
 800cd6e:	bf00      	nop
 800cd70:	2000116c 	.word	0x2000116c

0800cd74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cd7c:	f7ff fa74 	bl	800c268 <xTaskGetTickCount>
 800cd80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cd82:	4b0b      	ldr	r3, [pc, #44]	; (800cdb0 <prvSampleTimeNow+0x3c>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d205      	bcs.n	800cd98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cd8c:	f000 f936 	bl	800cffc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2201      	movs	r2, #1
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	e002      	b.n	800cd9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cd9e:	4a04      	ldr	r2, [pc, #16]	; (800cdb0 <prvSampleTimeNow+0x3c>)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cda4:	68fb      	ldr	r3, [r7, #12]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	2000117c 	.word	0x2000117c

0800cdb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b086      	sub	sp, #24
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	607a      	str	r2, [r7, #4]
 800cdc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d812      	bhi.n	800ce00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	1ad2      	subs	r2, r2, r3
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	699b      	ldr	r3, [r3, #24]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d302      	bcc.n	800cdee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cde8:	2301      	movs	r3, #1
 800cdea:	617b      	str	r3, [r7, #20]
 800cdec:	e01b      	b.n	800ce26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cdee:	4b10      	ldr	r3, [pc, #64]	; (800ce30 <prvInsertTimerInActiveList+0x7c>)
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	f7fe f9de 	bl	800b1ba <vListInsert>
 800cdfe:	e012      	b.n	800ce26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d206      	bcs.n	800ce16 <prvInsertTimerInActiveList+0x62>
 800ce08:	68ba      	ldr	r2, [r7, #8]
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d302      	bcc.n	800ce16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ce10:	2301      	movs	r3, #1
 800ce12:	617b      	str	r3, [r7, #20]
 800ce14:	e007      	b.n	800ce26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce16:	4b07      	ldr	r3, [pc, #28]	; (800ce34 <prvInsertTimerInActiveList+0x80>)
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	4619      	mov	r1, r3
 800ce20:	4610      	mov	r0, r2
 800ce22:	f7fe f9ca 	bl	800b1ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ce26:	697b      	ldr	r3, [r7, #20]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3718      	adds	r7, #24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	20001170 	.word	0x20001170
 800ce34:	2000116c 	.word	0x2000116c

0800ce38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b08e      	sub	sp, #56	; 0x38
 800ce3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce3e:	e0ca      	b.n	800cfd6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	da18      	bge.n	800ce78 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ce46:	1d3b      	adds	r3, r7, #4
 800ce48:	3304      	adds	r3, #4
 800ce4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ce4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d10a      	bne.n	800ce68 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ce52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce56:	f383 8811 	msr	BASEPRI, r3
 800ce5a:	f3bf 8f6f 	isb	sy
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	61fb      	str	r3, [r7, #28]
}
 800ce64:	bf00      	nop
 800ce66:	e7fe      	b.n	800ce66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce6e:	6850      	ldr	r0, [r2, #4]
 800ce70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce72:	6892      	ldr	r2, [r2, #8]
 800ce74:	4611      	mov	r1, r2
 800ce76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	f2c0 80aa 	blt.w	800cfd4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ce84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce86:	695b      	ldr	r3, [r3, #20]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d004      	beq.n	800ce96 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8e:	3304      	adds	r3, #4
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fe f9cb 	bl	800b22c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce96:	463b      	mov	r3, r7
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7ff ff6b 	bl	800cd74 <prvSampleTimeNow>
 800ce9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2b09      	cmp	r3, #9
 800cea4:	f200 8097 	bhi.w	800cfd6 <prvProcessReceivedCommands+0x19e>
 800cea8:	a201      	add	r2, pc, #4	; (adr r2, 800ceb0 <prvProcessReceivedCommands+0x78>)
 800ceaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceae:	bf00      	nop
 800ceb0:	0800ced9 	.word	0x0800ced9
 800ceb4:	0800ced9 	.word	0x0800ced9
 800ceb8:	0800ced9 	.word	0x0800ced9
 800cebc:	0800cf4d 	.word	0x0800cf4d
 800cec0:	0800cf61 	.word	0x0800cf61
 800cec4:	0800cfab 	.word	0x0800cfab
 800cec8:	0800ced9 	.word	0x0800ced9
 800cecc:	0800ced9 	.word	0x0800ced9
 800ced0:	0800cf4d 	.word	0x0800cf4d
 800ced4:	0800cf61 	.word	0x0800cf61
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ced8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cede:	f043 0301 	orr.w	r3, r3, #1
 800cee2:	b2da      	uxtb	r2, r3
 800cee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ceea:	68ba      	ldr	r2, [r7, #8]
 800ceec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceee:	699b      	ldr	r3, [r3, #24]
 800cef0:	18d1      	adds	r1, r2, r3
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cef8:	f7ff ff5c 	bl	800cdb4 <prvInsertTimerInActiveList>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d069      	beq.n	800cfd6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf04:	6a1b      	ldr	r3, [r3, #32]
 800cf06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf10:	f003 0304 	and.w	r3, r3, #4
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d05e      	beq.n	800cfd6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1c:	699b      	ldr	r3, [r3, #24]
 800cf1e:	441a      	add	r2, r3
 800cf20:	2300      	movs	r3, #0
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	2300      	movs	r3, #0
 800cf26:	2100      	movs	r1, #0
 800cf28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf2a:	f7ff fe05 	bl	800cb38 <xTimerGenericCommand>
 800cf2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cf30:	6a3b      	ldr	r3, [r7, #32]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d14f      	bne.n	800cfd6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cf36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3a:	f383 8811 	msr	BASEPRI, r3
 800cf3e:	f3bf 8f6f 	isb	sy
 800cf42:	f3bf 8f4f 	dsb	sy
 800cf46:	61bb      	str	r3, [r7, #24]
}
 800cf48:	bf00      	nop
 800cf4a:	e7fe      	b.n	800cf4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf52:	f023 0301 	bic.w	r3, r3, #1
 800cf56:	b2da      	uxtb	r2, r3
 800cf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cf5e:	e03a      	b.n	800cfd6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf66:	f043 0301 	orr.w	r3, r3, #1
 800cf6a:	b2da      	uxtb	r2, r3
 800cf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d10a      	bne.n	800cf96 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	617b      	str	r3, [r7, #20]
}
 800cf92:	bf00      	nop
 800cf94:	e7fe      	b.n	800cf94 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cf96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf98:	699a      	ldr	r2, [r3, #24]
 800cf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9c:	18d1      	adds	r1, r2, r3
 800cf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfa4:	f7ff ff06 	bl	800cdb4 <prvInsertTimerInActiveList>
					break;
 800cfa8:	e015      	b.n	800cfd6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfb0:	f003 0302 	and.w	r3, r3, #2
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d103      	bne.n	800cfc0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cfb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfba:	f000 fbe1 	bl	800d780 <vPortFree>
 800cfbe:	e00a      	b.n	800cfd6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfc6:	f023 0301 	bic.w	r3, r3, #1
 800cfca:	b2da      	uxtb	r2, r3
 800cfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cfd2:	e000      	b.n	800cfd6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cfd4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cfd6:	4b08      	ldr	r3, [pc, #32]	; (800cff8 <prvProcessReceivedCommands+0x1c0>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	1d39      	adds	r1, r7, #4
 800cfdc:	2200      	movs	r2, #0
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7fe fbec 	bl	800b7bc <xQueueReceive>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f47f af2a 	bne.w	800ce40 <prvProcessReceivedCommands+0x8>
	}
}
 800cfec:	bf00      	nop
 800cfee:	bf00      	nop
 800cff0:	3730      	adds	r7, #48	; 0x30
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	20001174 	.word	0x20001174

0800cffc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b088      	sub	sp, #32
 800d000:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d002:	e048      	b.n	800d096 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d004:	4b2d      	ldr	r3, [pc, #180]	; (800d0bc <prvSwitchTimerLists+0xc0>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d00e:	4b2b      	ldr	r3, [pc, #172]	; (800d0bc <prvSwitchTimerLists+0xc0>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	3304      	adds	r3, #4
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fe f905 	bl	800b22c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6a1b      	ldr	r3, [r3, #32]
 800d026:	68f8      	ldr	r0, [r7, #12]
 800d028:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d030:	f003 0304 	and.w	r3, r3, #4
 800d034:	2b00      	cmp	r3, #0
 800d036:	d02e      	beq.n	800d096 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	693a      	ldr	r2, [r7, #16]
 800d03e:	4413      	add	r3, r2
 800d040:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	429a      	cmp	r2, r3
 800d048:	d90e      	bls.n	800d068 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d056:	4b19      	ldr	r3, [pc, #100]	; (800d0bc <prvSwitchTimerLists+0xc0>)
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	3304      	adds	r3, #4
 800d05e:	4619      	mov	r1, r3
 800d060:	4610      	mov	r0, r2
 800d062:	f7fe f8aa 	bl	800b1ba <vListInsert>
 800d066:	e016      	b.n	800d096 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d068:	2300      	movs	r3, #0
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	2300      	movs	r3, #0
 800d06e:	693a      	ldr	r2, [r7, #16]
 800d070:	2100      	movs	r1, #0
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f7ff fd60 	bl	800cb38 <xTimerGenericCommand>
 800d078:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10a      	bne.n	800d096 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d084:	f383 8811 	msr	BASEPRI, r3
 800d088:	f3bf 8f6f 	isb	sy
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	603b      	str	r3, [r7, #0]
}
 800d092:	bf00      	nop
 800d094:	e7fe      	b.n	800d094 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d096:	4b09      	ldr	r3, [pc, #36]	; (800d0bc <prvSwitchTimerLists+0xc0>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1b1      	bne.n	800d004 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d0a0:	4b06      	ldr	r3, [pc, #24]	; (800d0bc <prvSwitchTimerLists+0xc0>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d0a6:	4b06      	ldr	r3, [pc, #24]	; (800d0c0 <prvSwitchTimerLists+0xc4>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a04      	ldr	r2, [pc, #16]	; (800d0bc <prvSwitchTimerLists+0xc0>)
 800d0ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d0ae:	4a04      	ldr	r2, [pc, #16]	; (800d0c0 <prvSwitchTimerLists+0xc4>)
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	6013      	str	r3, [r2, #0]
}
 800d0b4:	bf00      	nop
 800d0b6:	3718      	adds	r7, #24
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	2000116c 	.word	0x2000116c
 800d0c0:	20001170 	.word	0x20001170

0800d0c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d0ca:	f000 f96b 	bl	800d3a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d0ce:	4b15      	ldr	r3, [pc, #84]	; (800d124 <prvCheckForValidListAndQueue+0x60>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d120      	bne.n	800d118 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d0d6:	4814      	ldr	r0, [pc, #80]	; (800d128 <prvCheckForValidListAndQueue+0x64>)
 800d0d8:	f7fe f81e 	bl	800b118 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d0dc:	4813      	ldr	r0, [pc, #76]	; (800d12c <prvCheckForValidListAndQueue+0x68>)
 800d0de:	f7fe f81b 	bl	800b118 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d0e2:	4b13      	ldr	r3, [pc, #76]	; (800d130 <prvCheckForValidListAndQueue+0x6c>)
 800d0e4:	4a10      	ldr	r2, [pc, #64]	; (800d128 <prvCheckForValidListAndQueue+0x64>)
 800d0e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d0e8:	4b12      	ldr	r3, [pc, #72]	; (800d134 <prvCheckForValidListAndQueue+0x70>)
 800d0ea:	4a10      	ldr	r2, [pc, #64]	; (800d12c <prvCheckForValidListAndQueue+0x68>)
 800d0ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	4b11      	ldr	r3, [pc, #68]	; (800d138 <prvCheckForValidListAndQueue+0x74>)
 800d0f4:	4a11      	ldr	r2, [pc, #68]	; (800d13c <prvCheckForValidListAndQueue+0x78>)
 800d0f6:	2110      	movs	r1, #16
 800d0f8:	200a      	movs	r0, #10
 800d0fa:	f7fe f929 	bl	800b350 <xQueueGenericCreateStatic>
 800d0fe:	4603      	mov	r3, r0
 800d100:	4a08      	ldr	r2, [pc, #32]	; (800d124 <prvCheckForValidListAndQueue+0x60>)
 800d102:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d104:	4b07      	ldr	r3, [pc, #28]	; (800d124 <prvCheckForValidListAndQueue+0x60>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d005      	beq.n	800d118 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d10c:	4b05      	ldr	r3, [pc, #20]	; (800d124 <prvCheckForValidListAndQueue+0x60>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	490b      	ldr	r1, [pc, #44]	; (800d140 <prvCheckForValidListAndQueue+0x7c>)
 800d112:	4618      	mov	r0, r3
 800d114:	f7fe fd42 	bl	800bb9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d118:	f000 f974 	bl	800d404 <vPortExitCritical>
}
 800d11c:	bf00      	nop
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	20001174 	.word	0x20001174
 800d128:	20001144 	.word	0x20001144
 800d12c:	20001158 	.word	0x20001158
 800d130:	2000116c 	.word	0x2000116c
 800d134:	20001170 	.word	0x20001170
 800d138:	20001220 	.word	0x20001220
 800d13c:	20001180 	.word	0x20001180
 800d140:	08013754 	.word	0x08013754

0800d144 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	3b04      	subs	r3, #4
 800d154:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d15c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	3b04      	subs	r3, #4
 800d162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	f023 0201 	bic.w	r2, r3, #1
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	3b04      	subs	r3, #4
 800d172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d174:	4a0c      	ldr	r2, [pc, #48]	; (800d1a8 <pxPortInitialiseStack+0x64>)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	3b14      	subs	r3, #20
 800d17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	3b04      	subs	r3, #4
 800d18a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f06f 0202 	mvn.w	r2, #2
 800d192:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	3b20      	subs	r3, #32
 800d198:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d19a:	68fb      	ldr	r3, [r7, #12]
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3714      	adds	r7, #20
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr
 800d1a8:	0800d1ad 	.word	0x0800d1ad

0800d1ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d1b6:	4b12      	ldr	r3, [pc, #72]	; (800d200 <prvTaskExitError+0x54>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1be:	d00a      	beq.n	800d1d6 <prvTaskExitError+0x2a>
	__asm volatile
 800d1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c4:	f383 8811 	msr	BASEPRI, r3
 800d1c8:	f3bf 8f6f 	isb	sy
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	60fb      	str	r3, [r7, #12]
}
 800d1d2:	bf00      	nop
 800d1d4:	e7fe      	b.n	800d1d4 <prvTaskExitError+0x28>
	__asm volatile
 800d1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1da:	f383 8811 	msr	BASEPRI, r3
 800d1de:	f3bf 8f6f 	isb	sy
 800d1e2:	f3bf 8f4f 	dsb	sy
 800d1e6:	60bb      	str	r3, [r7, #8]
}
 800d1e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d1ea:	bf00      	nop
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d0fc      	beq.n	800d1ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d1f2:	bf00      	nop
 800d1f4:	bf00      	nop
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	20000130 	.word	0x20000130
	...

0800d210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d210:	4b07      	ldr	r3, [pc, #28]	; (800d230 <pxCurrentTCBConst2>)
 800d212:	6819      	ldr	r1, [r3, #0]
 800d214:	6808      	ldr	r0, [r1, #0]
 800d216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21a:	f380 8809 	msr	PSP, r0
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	f04f 0000 	mov.w	r0, #0
 800d226:	f380 8811 	msr	BASEPRI, r0
 800d22a:	4770      	bx	lr
 800d22c:	f3af 8000 	nop.w

0800d230 <pxCurrentTCBConst2>:
 800d230:	20000c44 	.word	0x20000c44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d234:	bf00      	nop
 800d236:	bf00      	nop

0800d238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d238:	4808      	ldr	r0, [pc, #32]	; (800d25c <prvPortStartFirstTask+0x24>)
 800d23a:	6800      	ldr	r0, [r0, #0]
 800d23c:	6800      	ldr	r0, [r0, #0]
 800d23e:	f380 8808 	msr	MSP, r0
 800d242:	f04f 0000 	mov.w	r0, #0
 800d246:	f380 8814 	msr	CONTROL, r0
 800d24a:	b662      	cpsie	i
 800d24c:	b661      	cpsie	f
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	f3bf 8f6f 	isb	sy
 800d256:	df00      	svc	0
 800d258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d25a:	bf00      	nop
 800d25c:	e000ed08 	.word	0xe000ed08

0800d260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b086      	sub	sp, #24
 800d264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d266:	4b46      	ldr	r3, [pc, #280]	; (800d380 <xPortStartScheduler+0x120>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a46      	ldr	r2, [pc, #280]	; (800d384 <xPortStartScheduler+0x124>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d10a      	bne.n	800d286 <xPortStartScheduler+0x26>
	__asm volatile
 800d270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d274:	f383 8811 	msr	BASEPRI, r3
 800d278:	f3bf 8f6f 	isb	sy
 800d27c:	f3bf 8f4f 	dsb	sy
 800d280:	613b      	str	r3, [r7, #16]
}
 800d282:	bf00      	nop
 800d284:	e7fe      	b.n	800d284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d286:	4b3e      	ldr	r3, [pc, #248]	; (800d380 <xPortStartScheduler+0x120>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a3f      	ldr	r2, [pc, #252]	; (800d388 <xPortStartScheduler+0x128>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d10a      	bne.n	800d2a6 <xPortStartScheduler+0x46>
	__asm volatile
 800d290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d294:	f383 8811 	msr	BASEPRI, r3
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	f3bf 8f4f 	dsb	sy
 800d2a0:	60fb      	str	r3, [r7, #12]
}
 800d2a2:	bf00      	nop
 800d2a4:	e7fe      	b.n	800d2a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d2a6:	4b39      	ldr	r3, [pc, #228]	; (800d38c <xPortStartScheduler+0x12c>)
 800d2a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	22ff      	movs	r2, #255	; 0xff
 800d2b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d2c0:	78fb      	ldrb	r3, [r7, #3]
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	4b31      	ldr	r3, [pc, #196]	; (800d390 <xPortStartScheduler+0x130>)
 800d2cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d2ce:	4b31      	ldr	r3, [pc, #196]	; (800d394 <xPortStartScheduler+0x134>)
 800d2d0:	2207      	movs	r2, #7
 800d2d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d2d4:	e009      	b.n	800d2ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d2d6:	4b2f      	ldr	r3, [pc, #188]	; (800d394 <xPortStartScheduler+0x134>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	4a2d      	ldr	r2, [pc, #180]	; (800d394 <xPortStartScheduler+0x134>)
 800d2de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d2e0:	78fb      	ldrb	r3, [r7, #3]
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	005b      	lsls	r3, r3, #1
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d2ea:	78fb      	ldrb	r3, [r7, #3]
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2f2:	2b80      	cmp	r3, #128	; 0x80
 800d2f4:	d0ef      	beq.n	800d2d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d2f6:	4b27      	ldr	r3, [pc, #156]	; (800d394 <xPortStartScheduler+0x134>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f1c3 0307 	rsb	r3, r3, #7
 800d2fe:	2b04      	cmp	r3, #4
 800d300:	d00a      	beq.n	800d318 <xPortStartScheduler+0xb8>
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d306:	f383 8811 	msr	BASEPRI, r3
 800d30a:	f3bf 8f6f 	isb	sy
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	60bb      	str	r3, [r7, #8]
}
 800d314:	bf00      	nop
 800d316:	e7fe      	b.n	800d316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d318:	4b1e      	ldr	r3, [pc, #120]	; (800d394 <xPortStartScheduler+0x134>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	021b      	lsls	r3, r3, #8
 800d31e:	4a1d      	ldr	r2, [pc, #116]	; (800d394 <xPortStartScheduler+0x134>)
 800d320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d322:	4b1c      	ldr	r3, [pc, #112]	; (800d394 <xPortStartScheduler+0x134>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d32a:	4a1a      	ldr	r2, [pc, #104]	; (800d394 <xPortStartScheduler+0x134>)
 800d32c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	b2da      	uxtb	r2, r3
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d336:	4b18      	ldr	r3, [pc, #96]	; (800d398 <xPortStartScheduler+0x138>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a17      	ldr	r2, [pc, #92]	; (800d398 <xPortStartScheduler+0x138>)
 800d33c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d342:	4b15      	ldr	r3, [pc, #84]	; (800d398 <xPortStartScheduler+0x138>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a14      	ldr	r2, [pc, #80]	; (800d398 <xPortStartScheduler+0x138>)
 800d348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d34c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d34e:	f000 f8dd 	bl	800d50c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d352:	4b12      	ldr	r3, [pc, #72]	; (800d39c <xPortStartScheduler+0x13c>)
 800d354:	2200      	movs	r2, #0
 800d356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d358:	f000 f8fc 	bl	800d554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d35c:	4b10      	ldr	r3, [pc, #64]	; (800d3a0 <xPortStartScheduler+0x140>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a0f      	ldr	r2, [pc, #60]	; (800d3a0 <xPortStartScheduler+0x140>)
 800d362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d368:	f7ff ff66 	bl	800d238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d36c:	f7ff f846 	bl	800c3fc <vTaskSwitchContext>
	prvTaskExitError();
 800d370:	f7ff ff1c 	bl	800d1ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	3718      	adds	r7, #24
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	e000ed00 	.word	0xe000ed00
 800d384:	410fc271 	.word	0x410fc271
 800d388:	410fc270 	.word	0x410fc270
 800d38c:	e000e400 	.word	0xe000e400
 800d390:	20001270 	.word	0x20001270
 800d394:	20001274 	.word	0x20001274
 800d398:	e000ed20 	.word	0xe000ed20
 800d39c:	20000130 	.word	0x20000130
 800d3a0:	e000ef34 	.word	0xe000ef34

0800d3a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
	__asm volatile
 800d3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ae:	f383 8811 	msr	BASEPRI, r3
 800d3b2:	f3bf 8f6f 	isb	sy
 800d3b6:	f3bf 8f4f 	dsb	sy
 800d3ba:	607b      	str	r3, [r7, #4]
}
 800d3bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d3be:	4b0f      	ldr	r3, [pc, #60]	; (800d3fc <vPortEnterCritical+0x58>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	4a0d      	ldr	r2, [pc, #52]	; (800d3fc <vPortEnterCritical+0x58>)
 800d3c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d3c8:	4b0c      	ldr	r3, [pc, #48]	; (800d3fc <vPortEnterCritical+0x58>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d10f      	bne.n	800d3f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d3d0:	4b0b      	ldr	r3, [pc, #44]	; (800d400 <vPortEnterCritical+0x5c>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00a      	beq.n	800d3f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3de:	f383 8811 	msr	BASEPRI, r3
 800d3e2:	f3bf 8f6f 	isb	sy
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	603b      	str	r3, [r7, #0]
}
 800d3ec:	bf00      	nop
 800d3ee:	e7fe      	b.n	800d3ee <vPortEnterCritical+0x4a>
	}
}
 800d3f0:	bf00      	nop
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr
 800d3fc:	20000130 	.word	0x20000130
 800d400:	e000ed04 	.word	0xe000ed04

0800d404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d40a:	4b12      	ldr	r3, [pc, #72]	; (800d454 <vPortExitCritical+0x50>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d10a      	bne.n	800d428 <vPortExitCritical+0x24>
	__asm volatile
 800d412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d416:	f383 8811 	msr	BASEPRI, r3
 800d41a:	f3bf 8f6f 	isb	sy
 800d41e:	f3bf 8f4f 	dsb	sy
 800d422:	607b      	str	r3, [r7, #4]
}
 800d424:	bf00      	nop
 800d426:	e7fe      	b.n	800d426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d428:	4b0a      	ldr	r3, [pc, #40]	; (800d454 <vPortExitCritical+0x50>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	3b01      	subs	r3, #1
 800d42e:	4a09      	ldr	r2, [pc, #36]	; (800d454 <vPortExitCritical+0x50>)
 800d430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d432:	4b08      	ldr	r3, [pc, #32]	; (800d454 <vPortExitCritical+0x50>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d105      	bne.n	800d446 <vPortExitCritical+0x42>
 800d43a:	2300      	movs	r3, #0
 800d43c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	f383 8811 	msr	BASEPRI, r3
}
 800d444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d446:	bf00      	nop
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop
 800d454:	20000130 	.word	0x20000130
	...

0800d460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d460:	f3ef 8009 	mrs	r0, PSP
 800d464:	f3bf 8f6f 	isb	sy
 800d468:	4b15      	ldr	r3, [pc, #84]	; (800d4c0 <pxCurrentTCBConst>)
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	f01e 0f10 	tst.w	lr, #16
 800d470:	bf08      	it	eq
 800d472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47a:	6010      	str	r0, [r2, #0]
 800d47c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d480:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d484:	f380 8811 	msr	BASEPRI, r0
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f7fe ffb4 	bl	800c3fc <vTaskSwitchContext>
 800d494:	f04f 0000 	mov.w	r0, #0
 800d498:	f380 8811 	msr	BASEPRI, r0
 800d49c:	bc09      	pop	{r0, r3}
 800d49e:	6819      	ldr	r1, [r3, #0]
 800d4a0:	6808      	ldr	r0, [r1, #0]
 800d4a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a6:	f01e 0f10 	tst.w	lr, #16
 800d4aa:	bf08      	it	eq
 800d4ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d4b0:	f380 8809 	msr	PSP, r0
 800d4b4:	f3bf 8f6f 	isb	sy
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	f3af 8000 	nop.w

0800d4c0 <pxCurrentTCBConst>:
 800d4c0:	20000c44 	.word	0x20000c44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d4c4:	bf00      	nop
 800d4c6:	bf00      	nop

0800d4c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d2:	f383 8811 	msr	BASEPRI, r3
 800d4d6:	f3bf 8f6f 	isb	sy
 800d4da:	f3bf 8f4f 	dsb	sy
 800d4de:	607b      	str	r3, [r7, #4]
}
 800d4e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d4e2:	f7fe fed1 	bl	800c288 <xTaskIncrementTick>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d003      	beq.n	800d4f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d4ec:	4b06      	ldr	r3, [pc, #24]	; (800d508 <xPortSysTickHandler+0x40>)
 800d4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4f2:	601a      	str	r2, [r3, #0]
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	f383 8811 	msr	BASEPRI, r3
}
 800d4fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d500:	bf00      	nop
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	e000ed04 	.word	0xe000ed04

0800d50c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d50c:	b480      	push	{r7}
 800d50e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d510:	4b0b      	ldr	r3, [pc, #44]	; (800d540 <vPortSetupTimerInterrupt+0x34>)
 800d512:	2200      	movs	r2, #0
 800d514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d516:	4b0b      	ldr	r3, [pc, #44]	; (800d544 <vPortSetupTimerInterrupt+0x38>)
 800d518:	2200      	movs	r2, #0
 800d51a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d51c:	4b0a      	ldr	r3, [pc, #40]	; (800d548 <vPortSetupTimerInterrupt+0x3c>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a0a      	ldr	r2, [pc, #40]	; (800d54c <vPortSetupTimerInterrupt+0x40>)
 800d522:	fba2 2303 	umull	r2, r3, r2, r3
 800d526:	099b      	lsrs	r3, r3, #6
 800d528:	4a09      	ldr	r2, [pc, #36]	; (800d550 <vPortSetupTimerInterrupt+0x44>)
 800d52a:	3b01      	subs	r3, #1
 800d52c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d52e:	4b04      	ldr	r3, [pc, #16]	; (800d540 <vPortSetupTimerInterrupt+0x34>)
 800d530:	2207      	movs	r2, #7
 800d532:	601a      	str	r2, [r3, #0]
}
 800d534:	bf00      	nop
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	e000e010 	.word	0xe000e010
 800d544:	e000e018 	.word	0xe000e018
 800d548:	20000000 	.word	0x20000000
 800d54c:	10624dd3 	.word	0x10624dd3
 800d550:	e000e014 	.word	0xe000e014

0800d554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d564 <vPortEnableVFP+0x10>
 800d558:	6801      	ldr	r1, [r0, #0]
 800d55a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d55e:	6001      	str	r1, [r0, #0]
 800d560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d562:	bf00      	nop
 800d564:	e000ed88 	.word	0xe000ed88

0800d568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d568:	b480      	push	{r7}
 800d56a:	b085      	sub	sp, #20
 800d56c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d56e:	f3ef 8305 	mrs	r3, IPSR
 800d572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2b0f      	cmp	r3, #15
 800d578:	d914      	bls.n	800d5a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d57a:	4a17      	ldr	r2, [pc, #92]	; (800d5d8 <vPortValidateInterruptPriority+0x70>)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	4413      	add	r3, r2
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d584:	4b15      	ldr	r3, [pc, #84]	; (800d5dc <vPortValidateInterruptPriority+0x74>)
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	7afa      	ldrb	r2, [r7, #11]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d20a      	bcs.n	800d5a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	607b      	str	r3, [r7, #4]
}
 800d5a0:	bf00      	nop
 800d5a2:	e7fe      	b.n	800d5a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d5a4:	4b0e      	ldr	r3, [pc, #56]	; (800d5e0 <vPortValidateInterruptPriority+0x78>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d5ac:	4b0d      	ldr	r3, [pc, #52]	; (800d5e4 <vPortValidateInterruptPriority+0x7c>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d90a      	bls.n	800d5ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b8:	f383 8811 	msr	BASEPRI, r3
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	603b      	str	r3, [r7, #0]
}
 800d5c6:	bf00      	nop
 800d5c8:	e7fe      	b.n	800d5c8 <vPortValidateInterruptPriority+0x60>
	}
 800d5ca:	bf00      	nop
 800d5cc:	3714      	adds	r7, #20
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	e000e3f0 	.word	0xe000e3f0
 800d5dc:	20001270 	.word	0x20001270
 800d5e0:	e000ed0c 	.word	0xe000ed0c
 800d5e4:	20001274 	.word	0x20001274

0800d5e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b08a      	sub	sp, #40	; 0x28
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d5f4:	f7fe fd8c 	bl	800c110 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d5f8:	4b5b      	ldr	r3, [pc, #364]	; (800d768 <pvPortMalloc+0x180>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d101      	bne.n	800d604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d600:	f000 f920 	bl	800d844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d604:	4b59      	ldr	r3, [pc, #356]	; (800d76c <pvPortMalloc+0x184>)
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4013      	ands	r3, r2
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f040 8093 	bne.w	800d738 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d01d      	beq.n	800d654 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d618:	2208      	movs	r2, #8
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4413      	add	r3, r2
 800d61e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f003 0307 	and.w	r3, r3, #7
 800d626:	2b00      	cmp	r3, #0
 800d628:	d014      	beq.n	800d654 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f023 0307 	bic.w	r3, r3, #7
 800d630:	3308      	adds	r3, #8
 800d632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f003 0307 	and.w	r3, r3, #7
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00a      	beq.n	800d654 <pvPortMalloc+0x6c>
	__asm volatile
 800d63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d642:	f383 8811 	msr	BASEPRI, r3
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	617b      	str	r3, [r7, #20]
}
 800d650:	bf00      	nop
 800d652:	e7fe      	b.n	800d652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d06e      	beq.n	800d738 <pvPortMalloc+0x150>
 800d65a:	4b45      	ldr	r3, [pc, #276]	; (800d770 <pvPortMalloc+0x188>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	429a      	cmp	r2, r3
 800d662:	d869      	bhi.n	800d738 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d664:	4b43      	ldr	r3, [pc, #268]	; (800d774 <pvPortMalloc+0x18c>)
 800d666:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d668:	4b42      	ldr	r3, [pc, #264]	; (800d774 <pvPortMalloc+0x18c>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d66e:	e004      	b.n	800d67a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	429a      	cmp	r2, r3
 800d682:	d903      	bls.n	800d68c <pvPortMalloc+0xa4>
 800d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d1f1      	bne.n	800d670 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d68c:	4b36      	ldr	r3, [pc, #216]	; (800d768 <pvPortMalloc+0x180>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d692:	429a      	cmp	r2, r3
 800d694:	d050      	beq.n	800d738 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d696:	6a3b      	ldr	r3, [r7, #32]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2208      	movs	r2, #8
 800d69c:	4413      	add	r3, r2
 800d69e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	6a3b      	ldr	r3, [r7, #32]
 800d6a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	1ad2      	subs	r2, r2, r3
 800d6b0:	2308      	movs	r3, #8
 800d6b2:	005b      	lsls	r3, r3, #1
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d91f      	bls.n	800d6f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4413      	add	r3, r2
 800d6be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6c0:	69bb      	ldr	r3, [r7, #24]
 800d6c2:	f003 0307 	and.w	r3, r3, #7
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00a      	beq.n	800d6e0 <pvPortMalloc+0xf8>
	__asm volatile
 800d6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ce:	f383 8811 	msr	BASEPRI, r3
 800d6d2:	f3bf 8f6f 	isb	sy
 800d6d6:	f3bf 8f4f 	dsb	sy
 800d6da:	613b      	str	r3, [r7, #16]
}
 800d6dc:	bf00      	nop
 800d6de:	e7fe      	b.n	800d6de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e2:	685a      	ldr	r2, [r3, #4]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	1ad2      	subs	r2, r2, r3
 800d6e8:	69bb      	ldr	r3, [r7, #24]
 800d6ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d6f2:	69b8      	ldr	r0, [r7, #24]
 800d6f4:	f000 f908 	bl	800d908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d6f8:	4b1d      	ldr	r3, [pc, #116]	; (800d770 <pvPortMalloc+0x188>)
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	4a1b      	ldr	r2, [pc, #108]	; (800d770 <pvPortMalloc+0x188>)
 800d704:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d706:	4b1a      	ldr	r3, [pc, #104]	; (800d770 <pvPortMalloc+0x188>)
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	4b1b      	ldr	r3, [pc, #108]	; (800d778 <pvPortMalloc+0x190>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d203      	bcs.n	800d71a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d712:	4b17      	ldr	r3, [pc, #92]	; (800d770 <pvPortMalloc+0x188>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a18      	ldr	r2, [pc, #96]	; (800d778 <pvPortMalloc+0x190>)
 800d718:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71c:	685a      	ldr	r2, [r3, #4]
 800d71e:	4b13      	ldr	r3, [pc, #76]	; (800d76c <pvPortMalloc+0x184>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	431a      	orrs	r2, r3
 800d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d726:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72a:	2200      	movs	r2, #0
 800d72c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d72e:	4b13      	ldr	r3, [pc, #76]	; (800d77c <pvPortMalloc+0x194>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3301      	adds	r3, #1
 800d734:	4a11      	ldr	r2, [pc, #68]	; (800d77c <pvPortMalloc+0x194>)
 800d736:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d738:	f7fe fcf8 	bl	800c12c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	f003 0307 	and.w	r3, r3, #7
 800d742:	2b00      	cmp	r3, #0
 800d744:	d00a      	beq.n	800d75c <pvPortMalloc+0x174>
	__asm volatile
 800d746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	60fb      	str	r3, [r7, #12]
}
 800d758:	bf00      	nop
 800d75a:	e7fe      	b.n	800d75a <pvPortMalloc+0x172>
	return pvReturn;
 800d75c:	69fb      	ldr	r3, [r7, #28]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3728      	adds	r7, #40	; 0x28
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	20004e80 	.word	0x20004e80
 800d76c:	20004e94 	.word	0x20004e94
 800d770:	20004e84 	.word	0x20004e84
 800d774:	20004e78 	.word	0x20004e78
 800d778:	20004e88 	.word	0x20004e88
 800d77c:	20004e8c 	.word	0x20004e8c

0800d780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d04d      	beq.n	800d82e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d792:	2308      	movs	r3, #8
 800d794:	425b      	negs	r3, r3
 800d796:	697a      	ldr	r2, [r7, #20]
 800d798:	4413      	add	r3, r2
 800d79a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	685a      	ldr	r2, [r3, #4]
 800d7a4:	4b24      	ldr	r3, [pc, #144]	; (800d838 <vPortFree+0xb8>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4013      	ands	r3, r2
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d10a      	bne.n	800d7c4 <vPortFree+0x44>
	__asm volatile
 800d7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b2:	f383 8811 	msr	BASEPRI, r3
 800d7b6:	f3bf 8f6f 	isb	sy
 800d7ba:	f3bf 8f4f 	dsb	sy
 800d7be:	60fb      	str	r3, [r7, #12]
}
 800d7c0:	bf00      	nop
 800d7c2:	e7fe      	b.n	800d7c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00a      	beq.n	800d7e2 <vPortFree+0x62>
	__asm volatile
 800d7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d0:	f383 8811 	msr	BASEPRI, r3
 800d7d4:	f3bf 8f6f 	isb	sy
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	60bb      	str	r3, [r7, #8]
}
 800d7de:	bf00      	nop
 800d7e0:	e7fe      	b.n	800d7e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	685a      	ldr	r2, [r3, #4]
 800d7e6:	4b14      	ldr	r3, [pc, #80]	; (800d838 <vPortFree+0xb8>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4013      	ands	r3, r2
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d01e      	beq.n	800d82e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d11a      	bne.n	800d82e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	685a      	ldr	r2, [r3, #4]
 800d7fc:	4b0e      	ldr	r3, [pc, #56]	; (800d838 <vPortFree+0xb8>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	43db      	mvns	r3, r3
 800d802:	401a      	ands	r2, r3
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d808:	f7fe fc82 	bl	800c110 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	685a      	ldr	r2, [r3, #4]
 800d810:	4b0a      	ldr	r3, [pc, #40]	; (800d83c <vPortFree+0xbc>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4413      	add	r3, r2
 800d816:	4a09      	ldr	r2, [pc, #36]	; (800d83c <vPortFree+0xbc>)
 800d818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d81a:	6938      	ldr	r0, [r7, #16]
 800d81c:	f000 f874 	bl	800d908 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d820:	4b07      	ldr	r3, [pc, #28]	; (800d840 <vPortFree+0xc0>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	3301      	adds	r3, #1
 800d826:	4a06      	ldr	r2, [pc, #24]	; (800d840 <vPortFree+0xc0>)
 800d828:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d82a:	f7fe fc7f 	bl	800c12c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d82e:	bf00      	nop
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	20004e94 	.word	0x20004e94
 800d83c:	20004e84 	.word	0x20004e84
 800d840:	20004e90 	.word	0x20004e90

0800d844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d844:	b480      	push	{r7}
 800d846:	b085      	sub	sp, #20
 800d848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d84a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d84e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d850:	4b27      	ldr	r3, [pc, #156]	; (800d8f0 <prvHeapInit+0xac>)
 800d852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f003 0307 	and.w	r3, r3, #7
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d00c      	beq.n	800d878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	3307      	adds	r3, #7
 800d862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f023 0307 	bic.w	r3, r3, #7
 800d86a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	1ad3      	subs	r3, r2, r3
 800d872:	4a1f      	ldr	r2, [pc, #124]	; (800d8f0 <prvHeapInit+0xac>)
 800d874:	4413      	add	r3, r2
 800d876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d87c:	4a1d      	ldr	r2, [pc, #116]	; (800d8f4 <prvHeapInit+0xb0>)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d882:	4b1c      	ldr	r3, [pc, #112]	; (800d8f4 <prvHeapInit+0xb0>)
 800d884:	2200      	movs	r2, #0
 800d886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	68ba      	ldr	r2, [r7, #8]
 800d88c:	4413      	add	r3, r2
 800d88e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d890:	2208      	movs	r2, #8
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	1a9b      	subs	r3, r3, r2
 800d896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f023 0307 	bic.w	r3, r3, #7
 800d89e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	4a15      	ldr	r2, [pc, #84]	; (800d8f8 <prvHeapInit+0xb4>)
 800d8a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d8a6:	4b14      	ldr	r3, [pc, #80]	; (800d8f8 <prvHeapInit+0xb4>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d8ae:	4b12      	ldr	r3, [pc, #72]	; (800d8f8 <prvHeapInit+0xb4>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	1ad2      	subs	r2, r2, r3
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d8c4:	4b0c      	ldr	r3, [pc, #48]	; (800d8f8 <prvHeapInit+0xb4>)
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	4a0a      	ldr	r2, [pc, #40]	; (800d8fc <prvHeapInit+0xb8>)
 800d8d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	4a09      	ldr	r2, [pc, #36]	; (800d900 <prvHeapInit+0xbc>)
 800d8da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d8dc:	4b09      	ldr	r3, [pc, #36]	; (800d904 <prvHeapInit+0xc0>)
 800d8de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d8e2:	601a      	str	r2, [r3, #0]
}
 800d8e4:	bf00      	nop
 800d8e6:	3714      	adds	r7, #20
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr
 800d8f0:	20001278 	.word	0x20001278
 800d8f4:	20004e78 	.word	0x20004e78
 800d8f8:	20004e80 	.word	0x20004e80
 800d8fc:	20004e88 	.word	0x20004e88
 800d900:	20004e84 	.word	0x20004e84
 800d904:	20004e94 	.word	0x20004e94

0800d908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d910:	4b28      	ldr	r3, [pc, #160]	; (800d9b4 <prvInsertBlockIntoFreeList+0xac>)
 800d912:	60fb      	str	r3, [r7, #12]
 800d914:	e002      	b.n	800d91c <prvInsertBlockIntoFreeList+0x14>
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	60fb      	str	r3, [r7, #12]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	429a      	cmp	r2, r3
 800d924:	d8f7      	bhi.n	800d916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	68ba      	ldr	r2, [r7, #8]
 800d930:	4413      	add	r3, r2
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	429a      	cmp	r2, r3
 800d936:	d108      	bne.n	800d94a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	685a      	ldr	r2, [r3, #4]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	441a      	add	r2, r3
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	68ba      	ldr	r2, [r7, #8]
 800d954:	441a      	add	r2, r3
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d118      	bne.n	800d990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	4b15      	ldr	r3, [pc, #84]	; (800d9b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	429a      	cmp	r2, r3
 800d968:	d00d      	beq.n	800d986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	685a      	ldr	r2, [r3, #4]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	441a      	add	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	601a      	str	r2, [r3, #0]
 800d984:	e008      	b.n	800d998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d986:	4b0c      	ldr	r3, [pc, #48]	; (800d9b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d988:	681a      	ldr	r2, [r3, #0]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	601a      	str	r2, [r3, #0]
 800d98e:	e003      	b.n	800d998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d002      	beq.n	800d9a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9a6:	bf00      	nop
 800d9a8:	3714      	adds	r7, #20
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	20004e78 	.word	0x20004e78
 800d9b8:	20004e80 	.word	0x20004e80

0800d9bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	4912      	ldr	r1, [pc, #72]	; (800da0c <MX_USB_DEVICE_Init+0x50>)
 800d9c4:	4812      	ldr	r0, [pc, #72]	; (800da10 <MX_USB_DEVICE_Init+0x54>)
 800d9c6:	f7fc f871 	bl	8009aac <USBD_Init>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d9d0:	f7f4 fe08 	bl	80025e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d9d4:	490f      	ldr	r1, [pc, #60]	; (800da14 <MX_USB_DEVICE_Init+0x58>)
 800d9d6:	480e      	ldr	r0, [pc, #56]	; (800da10 <MX_USB_DEVICE_Init+0x54>)
 800d9d8:	f7fc f898 	bl	8009b0c <USBD_RegisterClass>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d001      	beq.n	800d9e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d9e2:	f7f4 fdff 	bl	80025e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d9e6:	490c      	ldr	r1, [pc, #48]	; (800da18 <MX_USB_DEVICE_Init+0x5c>)
 800d9e8:	4809      	ldr	r0, [pc, #36]	; (800da10 <MX_USB_DEVICE_Init+0x54>)
 800d9ea:	f7fb ffe9 	bl	80099c0 <USBD_CDC_RegisterInterface>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d001      	beq.n	800d9f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d9f4:	f7f4 fdf6 	bl	80025e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d9f8:	4805      	ldr	r0, [pc, #20]	; (800da10 <MX_USB_DEVICE_Init+0x54>)
 800d9fa:	f7fc f8ae 	bl	8009b5a <USBD_Start>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d001      	beq.n	800da08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800da04:	f7f4 fdee 	bl	80025e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800da08:	bf00      	nop
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	20000148 	.word	0x20000148
 800da10:	200058c0 	.word	0x200058c0
 800da14:	2000002c 	.word	0x2000002c
 800da18:	20000134 	.word	0x20000134

0800da1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800da20:	2200      	movs	r2, #0
 800da22:	4905      	ldr	r1, [pc, #20]	; (800da38 <CDC_Init_FS+0x1c>)
 800da24:	4805      	ldr	r0, [pc, #20]	; (800da3c <CDC_Init_FS+0x20>)
 800da26:	f7fb ffe0 	bl	80099ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800da2a:	4905      	ldr	r1, [pc, #20]	; (800da40 <CDC_Init_FS+0x24>)
 800da2c:	4803      	ldr	r0, [pc, #12]	; (800da3c <CDC_Init_FS+0x20>)
 800da2e:	f7fb fffa 	bl	8009a26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800da32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800da34:	4618      	mov	r0, r3
 800da36:	bd80      	pop	{r7, pc}
 800da38:	20006390 	.word	0x20006390
 800da3c:	200058c0 	.word	0x200058c0
 800da40:	20005b90 	.word	0x20005b90

0800da44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800da44:	b480      	push	{r7}
 800da46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800da48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	4603      	mov	r3, r0
 800da5c:	6039      	str	r1, [r7, #0]
 800da5e:	71fb      	strb	r3, [r7, #7]
 800da60:	4613      	mov	r3, r2
 800da62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800da64:	79fb      	ldrb	r3, [r7, #7]
 800da66:	2b23      	cmp	r3, #35	; 0x23
 800da68:	d84a      	bhi.n	800db00 <CDC_Control_FS+0xac>
 800da6a:	a201      	add	r2, pc, #4	; (adr r2, 800da70 <CDC_Control_FS+0x1c>)
 800da6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da70:	0800db01 	.word	0x0800db01
 800da74:	0800db01 	.word	0x0800db01
 800da78:	0800db01 	.word	0x0800db01
 800da7c:	0800db01 	.word	0x0800db01
 800da80:	0800db01 	.word	0x0800db01
 800da84:	0800db01 	.word	0x0800db01
 800da88:	0800db01 	.word	0x0800db01
 800da8c:	0800db01 	.word	0x0800db01
 800da90:	0800db01 	.word	0x0800db01
 800da94:	0800db01 	.word	0x0800db01
 800da98:	0800db01 	.word	0x0800db01
 800da9c:	0800db01 	.word	0x0800db01
 800daa0:	0800db01 	.word	0x0800db01
 800daa4:	0800db01 	.word	0x0800db01
 800daa8:	0800db01 	.word	0x0800db01
 800daac:	0800db01 	.word	0x0800db01
 800dab0:	0800db01 	.word	0x0800db01
 800dab4:	0800db01 	.word	0x0800db01
 800dab8:	0800db01 	.word	0x0800db01
 800dabc:	0800db01 	.word	0x0800db01
 800dac0:	0800db01 	.word	0x0800db01
 800dac4:	0800db01 	.word	0x0800db01
 800dac8:	0800db01 	.word	0x0800db01
 800dacc:	0800db01 	.word	0x0800db01
 800dad0:	0800db01 	.word	0x0800db01
 800dad4:	0800db01 	.word	0x0800db01
 800dad8:	0800db01 	.word	0x0800db01
 800dadc:	0800db01 	.word	0x0800db01
 800dae0:	0800db01 	.word	0x0800db01
 800dae4:	0800db01 	.word	0x0800db01
 800dae8:	0800db01 	.word	0x0800db01
 800daec:	0800db01 	.word	0x0800db01
 800daf0:	0800db01 	.word	0x0800db01
 800daf4:	0800db01 	.word	0x0800db01
 800daf8:	0800db01 	.word	0x0800db01
 800dafc:	0800db01 	.word	0x0800db01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800db00:	bf00      	nop
  }

  return (USBD_OK);
 800db02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800db04:	4618      	mov	r0, r3
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800db1a:	6879      	ldr	r1, [r7, #4]
 800db1c:	4805      	ldr	r0, [pc, #20]	; (800db34 <CDC_Receive_FS+0x24>)
 800db1e:	f7fb ff82 	bl	8009a26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800db22:	4804      	ldr	r0, [pc, #16]	; (800db34 <CDC_Receive_FS+0x24>)
 800db24:	f7fb ff98 	bl	8009a58 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800db28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3708      	adds	r7, #8
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	200058c0 	.word	0x200058c0

0800db38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800db38:	b480      	push	{r7}
 800db3a:	b087      	sub	sp, #28
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	4613      	mov	r3, r2
 800db44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800db46:	2300      	movs	r3, #0
 800db48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800db4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	371c      	adds	r7, #28
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr
	...

0800db5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	4603      	mov	r3, r0
 800db64:	6039      	str	r1, [r7, #0]
 800db66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	2212      	movs	r2, #18
 800db6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800db6e:	4b03      	ldr	r3, [pc, #12]	; (800db7c <USBD_FS_DeviceDescriptor+0x20>)
}
 800db70:	4618      	mov	r0, r3
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	20000164 	.word	0x20000164

0800db80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	4603      	mov	r3, r0
 800db88:	6039      	str	r1, [r7, #0]
 800db8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	2204      	movs	r2, #4
 800db90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db92:	4b03      	ldr	r3, [pc, #12]	; (800dba0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800db94:	4618      	mov	r0, r3
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	20000178 	.word	0x20000178

0800dba4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	4603      	mov	r3, r0
 800dbac:	6039      	str	r1, [r7, #0]
 800dbae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dbb0:	79fb      	ldrb	r3, [r7, #7]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d105      	bne.n	800dbc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dbb6:	683a      	ldr	r2, [r7, #0]
 800dbb8:	4907      	ldr	r1, [pc, #28]	; (800dbd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dbba:	4808      	ldr	r0, [pc, #32]	; (800dbdc <USBD_FS_ProductStrDescriptor+0x38>)
 800dbbc:	f7fc ffff 	bl	800abbe <USBD_GetString>
 800dbc0:	e004      	b.n	800dbcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dbc2:	683a      	ldr	r2, [r7, #0]
 800dbc4:	4904      	ldr	r1, [pc, #16]	; (800dbd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dbc6:	4805      	ldr	r0, [pc, #20]	; (800dbdc <USBD_FS_ProductStrDescriptor+0x38>)
 800dbc8:	f7fc fff9 	bl	800abbe <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbcc:	4b02      	ldr	r3, [pc, #8]	; (800dbd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3708      	adds	r7, #8
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	20006b90 	.word	0x20006b90
 800dbdc:	0801375c 	.word	0x0801375c

0800dbe0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	6039      	str	r1, [r7, #0]
 800dbea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dbec:	683a      	ldr	r2, [r7, #0]
 800dbee:	4904      	ldr	r1, [pc, #16]	; (800dc00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dbf0:	4804      	ldr	r0, [pc, #16]	; (800dc04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dbf2:	f7fc ffe4 	bl	800abbe <USBD_GetString>
  return USBD_StrDesc;
 800dbf6:	4b02      	ldr	r3, [pc, #8]	; (800dc00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	20006b90 	.word	0x20006b90
 800dc04:	08013774 	.word	0x08013774

0800dc08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	4603      	mov	r3, r0
 800dc10:	6039      	str	r1, [r7, #0]
 800dc12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	221a      	movs	r2, #26
 800dc18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dc1a:	f000 f843 	bl	800dca4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dc1e:	4b02      	ldr	r3, [pc, #8]	; (800dc28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	2000017c 	.word	0x2000017c

0800dc2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	4603      	mov	r3, r0
 800dc34:	6039      	str	r1, [r7, #0]
 800dc36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dc38:	79fb      	ldrb	r3, [r7, #7]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d105      	bne.n	800dc4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	4907      	ldr	r1, [pc, #28]	; (800dc60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc42:	4808      	ldr	r0, [pc, #32]	; (800dc64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc44:	f7fc ffbb 	bl	800abbe <USBD_GetString>
 800dc48:	e004      	b.n	800dc54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	4904      	ldr	r1, [pc, #16]	; (800dc60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc4e:	4805      	ldr	r0, [pc, #20]	; (800dc64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc50:	f7fc ffb5 	bl	800abbe <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc54:	4b02      	ldr	r3, [pc, #8]	; (800dc60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	20006b90 	.word	0x20006b90
 800dc64:	08013788 	.word	0x08013788

0800dc68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	4603      	mov	r3, r0
 800dc70:	6039      	str	r1, [r7, #0]
 800dc72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc74:	79fb      	ldrb	r3, [r7, #7]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d105      	bne.n	800dc86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	4907      	ldr	r1, [pc, #28]	; (800dc9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc7e:	4808      	ldr	r0, [pc, #32]	; (800dca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc80:	f7fc ff9d 	bl	800abbe <USBD_GetString>
 800dc84:	e004      	b.n	800dc90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	4904      	ldr	r1, [pc, #16]	; (800dc9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc8a:	4805      	ldr	r0, [pc, #20]	; (800dca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc8c:	f7fc ff97 	bl	800abbe <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc90:	4b02      	ldr	r3, [pc, #8]	; (800dc9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3708      	adds	r7, #8
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	20006b90 	.word	0x20006b90
 800dca0:	08013794 	.word	0x08013794

0800dca4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dcaa:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <Get_SerialNum+0x44>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dcb0:	4b0e      	ldr	r3, [pc, #56]	; (800dcec <Get_SerialNum+0x48>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dcb6:	4b0e      	ldr	r3, [pc, #56]	; (800dcf0 <Get_SerialNum+0x4c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d009      	beq.n	800dcde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dcca:	2208      	movs	r2, #8
 800dccc:	4909      	ldr	r1, [pc, #36]	; (800dcf4 <Get_SerialNum+0x50>)
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f000 f814 	bl	800dcfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dcd4:	2204      	movs	r2, #4
 800dcd6:	4908      	ldr	r1, [pc, #32]	; (800dcf8 <Get_SerialNum+0x54>)
 800dcd8:	68b8      	ldr	r0, [r7, #8]
 800dcda:	f000 f80f 	bl	800dcfc <IntToUnicode>
  }
}
 800dcde:	bf00      	nop
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	1fff7a10 	.word	0x1fff7a10
 800dcec:	1fff7a14 	.word	0x1fff7a14
 800dcf0:	1fff7a18 	.word	0x1fff7a18
 800dcf4:	2000017e 	.word	0x2000017e
 800dcf8:	2000018e 	.word	0x2000018e

0800dcfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b087      	sub	sp, #28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	4613      	mov	r3, r2
 800dd08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dd0e:	2300      	movs	r3, #0
 800dd10:	75fb      	strb	r3, [r7, #23]
 800dd12:	e027      	b.n	800dd64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	0f1b      	lsrs	r3, r3, #28
 800dd18:	2b09      	cmp	r3, #9
 800dd1a:	d80b      	bhi.n	800dd34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	0f1b      	lsrs	r3, r3, #28
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	7dfb      	ldrb	r3, [r7, #23]
 800dd24:	005b      	lsls	r3, r3, #1
 800dd26:	4619      	mov	r1, r3
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	440b      	add	r3, r1
 800dd2c:	3230      	adds	r2, #48	; 0x30
 800dd2e:	b2d2      	uxtb	r2, r2
 800dd30:	701a      	strb	r2, [r3, #0]
 800dd32:	e00a      	b.n	800dd4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	0f1b      	lsrs	r3, r3, #28
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	7dfb      	ldrb	r3, [r7, #23]
 800dd3c:	005b      	lsls	r3, r3, #1
 800dd3e:	4619      	mov	r1, r3
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	440b      	add	r3, r1
 800dd44:	3237      	adds	r2, #55	; 0x37
 800dd46:	b2d2      	uxtb	r2, r2
 800dd48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	011b      	lsls	r3, r3, #4
 800dd4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd50:	7dfb      	ldrb	r3, [r7, #23]
 800dd52:	005b      	lsls	r3, r3, #1
 800dd54:	3301      	adds	r3, #1
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	4413      	add	r3, r2
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd5e:	7dfb      	ldrb	r3, [r7, #23]
 800dd60:	3301      	adds	r3, #1
 800dd62:	75fb      	strb	r3, [r7, #23]
 800dd64:	7dfa      	ldrb	r2, [r7, #23]
 800dd66:	79fb      	ldrb	r3, [r7, #7]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d3d3      	bcc.n	800dd14 <IntToUnicode+0x18>
  }
}
 800dd6c:	bf00      	nop
 800dd6e:	bf00      	nop
 800dd70:	371c      	adds	r7, #28
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr
	...

0800dd7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b08a      	sub	sp, #40	; 0x28
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd84:	f107 0314 	add.w	r3, r7, #20
 800dd88:	2200      	movs	r2, #0
 800dd8a:	601a      	str	r2, [r3, #0]
 800dd8c:	605a      	str	r2, [r3, #4]
 800dd8e:	609a      	str	r2, [r3, #8]
 800dd90:	60da      	str	r2, [r3, #12]
 800dd92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dd9c:	d147      	bne.n	800de2e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd9e:	2300      	movs	r3, #0
 800dda0:	613b      	str	r3, [r7, #16]
 800dda2:	4b25      	ldr	r3, [pc, #148]	; (800de38 <HAL_PCD_MspInit+0xbc>)
 800dda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dda6:	4a24      	ldr	r2, [pc, #144]	; (800de38 <HAL_PCD_MspInit+0xbc>)
 800dda8:	f043 0301 	orr.w	r3, r3, #1
 800ddac:	6313      	str	r3, [r2, #48]	; 0x30
 800ddae:	4b22      	ldr	r3, [pc, #136]	; (800de38 <HAL_PCD_MspInit+0xbc>)
 800ddb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddb2:	f003 0301 	and.w	r3, r3, #1
 800ddb6:	613b      	str	r3, [r7, #16]
 800ddb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ddba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ddc8:	f107 0314 	add.w	r3, r7, #20
 800ddcc:	4619      	mov	r1, r3
 800ddce:	481b      	ldr	r0, [pc, #108]	; (800de3c <HAL_PCD_MspInit+0xc0>)
 800ddd0:	f7f5 fbba 	bl	8003548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ddd4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ddd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddda:	2302      	movs	r3, #2
 800dddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddde:	2300      	movs	r3, #0
 800dde0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dde2:	2303      	movs	r3, #3
 800dde4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dde6:	230a      	movs	r3, #10
 800dde8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ddea:	f107 0314 	add.w	r3, r7, #20
 800ddee:	4619      	mov	r1, r3
 800ddf0:	4812      	ldr	r0, [pc, #72]	; (800de3c <HAL_PCD_MspInit+0xc0>)
 800ddf2:	f7f5 fba9 	bl	8003548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ddf6:	4b10      	ldr	r3, [pc, #64]	; (800de38 <HAL_PCD_MspInit+0xbc>)
 800ddf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddfa:	4a0f      	ldr	r2, [pc, #60]	; (800de38 <HAL_PCD_MspInit+0xbc>)
 800ddfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de00:	6353      	str	r3, [r2, #52]	; 0x34
 800de02:	2300      	movs	r3, #0
 800de04:	60fb      	str	r3, [r7, #12]
 800de06:	4b0c      	ldr	r3, [pc, #48]	; (800de38 <HAL_PCD_MspInit+0xbc>)
 800de08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de0a:	4a0b      	ldr	r2, [pc, #44]	; (800de38 <HAL_PCD_MspInit+0xbc>)
 800de0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800de10:	6453      	str	r3, [r2, #68]	; 0x44
 800de12:	4b09      	ldr	r3, [pc, #36]	; (800de38 <HAL_PCD_MspInit+0xbc>)
 800de14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de1a:	60fb      	str	r3, [r7, #12]
 800de1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800de1e:	2200      	movs	r2, #0
 800de20:	2105      	movs	r1, #5
 800de22:	2043      	movs	r0, #67	; 0x43
 800de24:	f7f5 fb66 	bl	80034f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800de28:	2043      	movs	r0, #67	; 0x43
 800de2a:	f7f5 fb7f 	bl	800352c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800de2e:	bf00      	nop
 800de30:	3728      	adds	r7, #40	; 0x28
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	40023800 	.word	0x40023800
 800de3c:	40020000 	.word	0x40020000

0800de40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800de54:	4619      	mov	r1, r3
 800de56:	4610      	mov	r0, r2
 800de58:	f7fb feca 	bl	8009bf0 <USBD_LL_SetupStage>
}
 800de5c:	bf00      	nop
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	460b      	mov	r3, r1
 800de6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800de76:	78fa      	ldrb	r2, [r7, #3]
 800de78:	6879      	ldr	r1, [r7, #4]
 800de7a:	4613      	mov	r3, r2
 800de7c:	00db      	lsls	r3, r3, #3
 800de7e:	1a9b      	subs	r3, r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	440b      	add	r3, r1
 800de84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	78fb      	ldrb	r3, [r7, #3]
 800de8c:	4619      	mov	r1, r3
 800de8e:	f7fb ff04 	bl	8009c9a <USBD_LL_DataOutStage>
}
 800de92:	bf00      	nop
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b082      	sub	sp, #8
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
 800dea2:	460b      	mov	r3, r1
 800dea4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800deac:	78fa      	ldrb	r2, [r7, #3]
 800deae:	6879      	ldr	r1, [r7, #4]
 800deb0:	4613      	mov	r3, r2
 800deb2:	00db      	lsls	r3, r3, #3
 800deb4:	1a9b      	subs	r3, r3, r2
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	440b      	add	r3, r1
 800deba:	3348      	adds	r3, #72	; 0x48
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	78fb      	ldrb	r3, [r7, #3]
 800dec0:	4619      	mov	r1, r3
 800dec2:	f7fb ff4d 	bl	8009d60 <USBD_LL_DataInStage>
}
 800dec6:	bf00      	nop
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}

0800dece <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b082      	sub	sp, #8
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fc f861 	bl	8009fa4 <USBD_LL_SOF>
}
 800dee2:	bf00      	nop
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}

0800deea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deea:	b580      	push	{r7, lr}
 800deec:	b084      	sub	sp, #16
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800def2:	2301      	movs	r3, #1
 800def4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d102      	bne.n	800df04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800defe:	2300      	movs	r3, #0
 800df00:	73fb      	strb	r3, [r7, #15]
 800df02:	e008      	b.n	800df16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	2b02      	cmp	r3, #2
 800df0a:	d102      	bne.n	800df12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800df0c:	2301      	movs	r3, #1
 800df0e:	73fb      	strb	r3, [r7, #15]
 800df10:	e001      	b.n	800df16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800df12:	f7f4 fb67 	bl	80025e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df1c:	7bfa      	ldrb	r2, [r7, #15]
 800df1e:	4611      	mov	r1, r2
 800df20:	4618      	mov	r0, r3
 800df22:	f7fc f801 	bl	8009f28 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fb ffad 	bl	8009e8c <USBD_LL_Reset>
}
 800df32:	bf00      	nop
 800df34:	3710      	adds	r7, #16
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
	...

0800df3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fb fffc 	bl	8009f48 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	6812      	ldr	r2, [r2, #0]
 800df5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df62:	f043 0301 	orr.w	r3, r3, #1
 800df66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6a1b      	ldr	r3, [r3, #32]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d005      	beq.n	800df7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df70:	4b04      	ldr	r3, [pc, #16]	; (800df84 <HAL_PCD_SuspendCallback+0x48>)
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	4a03      	ldr	r2, [pc, #12]	; (800df84 <HAL_PCD_SuspendCallback+0x48>)
 800df76:	f043 0306 	orr.w	r3, r3, #6
 800df7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800df7c:	bf00      	nop
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	e000ed00 	.word	0xe000ed00

0800df88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df96:	4618      	mov	r0, r3
 800df98:	f7fb ffec 	bl	8009f74 <USBD_LL_Resume>
}
 800df9c:	bf00      	nop
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	460b      	mov	r3, r1
 800dfae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dfb6:	78fa      	ldrb	r2, [r7, #3]
 800dfb8:	4611      	mov	r1, r2
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fc f83a 	bl	800a034 <USBD_LL_IsoOUTIncomplete>
}
 800dfc0:	bf00      	nop
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dfda:	78fa      	ldrb	r2, [r7, #3]
 800dfdc:	4611      	mov	r1, r2
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7fc f802 	bl	8009fe8 <USBD_LL_IsoINIncomplete>
}
 800dfe4:	bf00      	nop
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fc f840 	bl	800a080 <USBD_LL_DevConnected>
}
 800e000:	bf00      	nop
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e016:	4618      	mov	r0, r3
 800e018:	f7fc f83d 	bl	800a096 <USBD_LL_DevDisconnected>
}
 800e01c:	bf00      	nop
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d13c      	bne.n	800e0ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e034:	4a20      	ldr	r2, [pc, #128]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	4a1e      	ldr	r2, [pc, #120]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e040:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e044:	4b1c      	ldr	r3, [pc, #112]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e046:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e04a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e04c:	4b1a      	ldr	r3, [pc, #104]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e04e:	2204      	movs	r2, #4
 800e050:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e052:	4b19      	ldr	r3, [pc, #100]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e054:	2202      	movs	r2, #2
 800e056:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e058:	4b17      	ldr	r3, [pc, #92]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e05a:	2200      	movs	r2, #0
 800e05c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e05e:	4b16      	ldr	r3, [pc, #88]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e060:	2202      	movs	r2, #2
 800e062:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e064:	4b14      	ldr	r3, [pc, #80]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e066:	2200      	movs	r2, #0
 800e068:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e06a:	4b13      	ldr	r3, [pc, #76]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e06c:	2200      	movs	r2, #0
 800e06e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e070:	4b11      	ldr	r3, [pc, #68]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e072:	2200      	movs	r2, #0
 800e074:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e076:	4b10      	ldr	r3, [pc, #64]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e078:	2201      	movs	r2, #1
 800e07a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e07c:	4b0e      	ldr	r3, [pc, #56]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e07e:	2200      	movs	r2, #0
 800e080:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e082:	480d      	ldr	r0, [pc, #52]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e084:	f7f6 fc84 	bl	8004990 <HAL_PCD_Init>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d001      	beq.n	800e092 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e08e:	f7f4 faa9 	bl	80025e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e092:	2180      	movs	r1, #128	; 0x80
 800e094:	4808      	ldr	r0, [pc, #32]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e096:	f7f7 fde2 	bl	8005c5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e09a:	2240      	movs	r2, #64	; 0x40
 800e09c:	2100      	movs	r1, #0
 800e09e:	4806      	ldr	r0, [pc, #24]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e0a0:	f7f7 fd96 	bl	8005bd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e0a4:	2280      	movs	r2, #128	; 0x80
 800e0a6:	2101      	movs	r1, #1
 800e0a8:	4803      	ldr	r0, [pc, #12]	; (800e0b8 <USBD_LL_Init+0x94>)
 800e0aa:	f7f7 fd91 	bl	8005bd0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	20006d90 	.word	0x20006d90

0800e0bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7f6 fd79 	bl	8004bca <HAL_PCD_Start>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0dc:	7bfb      	ldrb	r3, [r7, #15]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f000 f942 	bl	800e368 <USBD_Get_USB_Status>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b084      	sub	sp, #16
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
 800e0fa:	4608      	mov	r0, r1
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	461a      	mov	r2, r3
 800e100:	4603      	mov	r3, r0
 800e102:	70fb      	strb	r3, [r7, #3]
 800e104:	460b      	mov	r3, r1
 800e106:	70bb      	strb	r3, [r7, #2]
 800e108:	4613      	mov	r3, r2
 800e10a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e10c:	2300      	movs	r3, #0
 800e10e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e110:	2300      	movs	r3, #0
 800e112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e11a:	78bb      	ldrb	r3, [r7, #2]
 800e11c:	883a      	ldrh	r2, [r7, #0]
 800e11e:	78f9      	ldrb	r1, [r7, #3]
 800e120:	f7f7 f95d 	bl	80053de <HAL_PCD_EP_Open>
 800e124:	4603      	mov	r3, r0
 800e126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e128:	7bfb      	ldrb	r3, [r7, #15]
 800e12a:	4618      	mov	r0, r3
 800e12c:	f000 f91c 	bl	800e368 <USBD_Get_USB_Status>
 800e130:	4603      	mov	r3, r0
 800e132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e134:	7bbb      	ldrb	r3, [r7, #14]
}
 800e136:	4618      	mov	r0, r3
 800e138:	3710      	adds	r7, #16
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b084      	sub	sp, #16
 800e142:	af00      	add	r7, sp, #0
 800e144:	6078      	str	r0, [r7, #4]
 800e146:	460b      	mov	r3, r1
 800e148:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e14a:	2300      	movs	r3, #0
 800e14c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e14e:	2300      	movs	r3, #0
 800e150:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e158:	78fa      	ldrb	r2, [r7, #3]
 800e15a:	4611      	mov	r1, r2
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7f7 f9a6 	bl	80054ae <HAL_PCD_EP_Close>
 800e162:	4603      	mov	r3, r0
 800e164:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e166:	7bfb      	ldrb	r3, [r7, #15]
 800e168:	4618      	mov	r0, r3
 800e16a:	f000 f8fd 	bl	800e368 <USBD_Get_USB_Status>
 800e16e:	4603      	mov	r3, r0
 800e170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e172:	7bbb      	ldrb	r3, [r7, #14]
}
 800e174:	4618      	mov	r0, r3
 800e176:	3710      	adds	r7, #16
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	460b      	mov	r3, r1
 800e186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e188:	2300      	movs	r3, #0
 800e18a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e18c:	2300      	movs	r3, #0
 800e18e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e196:	78fa      	ldrb	r2, [r7, #3]
 800e198:	4611      	mov	r1, r2
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7f7 fa7e 	bl	800569c <HAL_PCD_EP_SetStall>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1a4:	7bfb      	ldrb	r3, [r7, #15]
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f000 f8de 	bl	800e368 <USBD_Get_USB_Status>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3710      	adds	r7, #16
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}

0800e1ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b084      	sub	sp, #16
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e1d4:	78fa      	ldrb	r2, [r7, #3]
 800e1d6:	4611      	mov	r1, r2
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7f7 fac3 	bl	8005764 <HAL_PCD_EP_ClrStall>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1e2:	7bfb      	ldrb	r3, [r7, #15]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f000 f8bf 	bl	800e368 <USBD_Get_USB_Status>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	460b      	mov	r3, r1
 800e202:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e20a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e20c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e210:	2b00      	cmp	r3, #0
 800e212:	da0b      	bge.n	800e22c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e214:	78fb      	ldrb	r3, [r7, #3]
 800e216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e21a:	68f9      	ldr	r1, [r7, #12]
 800e21c:	4613      	mov	r3, r2
 800e21e:	00db      	lsls	r3, r3, #3
 800e220:	1a9b      	subs	r3, r3, r2
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	440b      	add	r3, r1
 800e226:	333e      	adds	r3, #62	; 0x3e
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	e00b      	b.n	800e244 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e22c:	78fb      	ldrb	r3, [r7, #3]
 800e22e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e232:	68f9      	ldr	r1, [r7, #12]
 800e234:	4613      	mov	r3, r2
 800e236:	00db      	lsls	r3, r3, #3
 800e238:	1a9b      	subs	r3, r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	440b      	add	r3, r1
 800e23e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e242:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e244:	4618      	mov	r0, r3
 800e246:	3714      	adds	r7, #20
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr

0800e250 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	460b      	mov	r3, r1
 800e25a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e25c:	2300      	movs	r3, #0
 800e25e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e260:	2300      	movs	r3, #0
 800e262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e26a:	78fa      	ldrb	r2, [r7, #3]
 800e26c:	4611      	mov	r1, r2
 800e26e:	4618      	mov	r0, r3
 800e270:	f7f7 f890 	bl	8005394 <HAL_PCD_SetAddress>
 800e274:	4603      	mov	r3, r0
 800e276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e278:	7bfb      	ldrb	r3, [r7, #15]
 800e27a:	4618      	mov	r0, r3
 800e27c:	f000 f874 	bl	800e368 <USBD_Get_USB_Status>
 800e280:	4603      	mov	r3, r0
 800e282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e284:	7bbb      	ldrb	r3, [r7, #14]
}
 800e286:	4618      	mov	r0, r3
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e28e:	b580      	push	{r7, lr}
 800e290:	b086      	sub	sp, #24
 800e292:	af00      	add	r7, sp, #0
 800e294:	60f8      	str	r0, [r7, #12]
 800e296:	607a      	str	r2, [r7, #4]
 800e298:	603b      	str	r3, [r7, #0]
 800e29a:	460b      	mov	r3, r1
 800e29c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e2ac:	7af9      	ldrb	r1, [r7, #11]
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	f7f7 f9a9 	bl	8005608 <HAL_PCD_EP_Transmit>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2ba:	7dfb      	ldrb	r3, [r7, #23]
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f000 f853 	bl	800e368 <USBD_Get_USB_Status>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	607a      	str	r2, [r7, #4]
 800e2da:	603b      	str	r3, [r7, #0]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e2ee:	7af9      	ldrb	r1, [r7, #11]
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	f7f7 f925 	bl	8005542 <HAL_PCD_EP_Receive>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2fc:	7dfb      	ldrb	r3, [r7, #23]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f000 f832 	bl	800e368 <USBD_Get_USB_Status>
 800e304:	4603      	mov	r3, r0
 800e306:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e308:	7dbb      	ldrb	r3, [r7, #22]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3718      	adds	r7, #24
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e312:	b580      	push	{r7, lr}
 800e314:	b082      	sub	sp, #8
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
 800e31a:	460b      	mov	r3, r1
 800e31c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e324:	78fa      	ldrb	r2, [r7, #3]
 800e326:	4611      	mov	r1, r2
 800e328:	4618      	mov	r0, r3
 800e32a:	f7f7 f955 	bl	80055d8 <HAL_PCD_EP_GetRxCount>
 800e32e:	4603      	mov	r3, r0
}
 800e330:	4618      	mov	r0, r3
 800e332:	3708      	adds	r7, #8
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}

0800e338 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e340:	4b03      	ldr	r3, [pc, #12]	; (800e350 <USBD_static_malloc+0x18>)
}
 800e342:	4618      	mov	r0, r3
 800e344:	370c      	adds	r7, #12
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop
 800e350:	20004e98 	.word	0x20004e98

0800e354 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e354:	b480      	push	{r7}
 800e356:	b083      	sub	sp, #12
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]

}
 800e35c:	bf00      	nop
 800e35e:	370c      	adds	r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	4603      	mov	r3, r0
 800e370:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e372:	2300      	movs	r3, #0
 800e374:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e376:	79fb      	ldrb	r3, [r7, #7]
 800e378:	2b03      	cmp	r3, #3
 800e37a:	d817      	bhi.n	800e3ac <USBD_Get_USB_Status+0x44>
 800e37c:	a201      	add	r2, pc, #4	; (adr r2, 800e384 <USBD_Get_USB_Status+0x1c>)
 800e37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e382:	bf00      	nop
 800e384:	0800e395 	.word	0x0800e395
 800e388:	0800e39b 	.word	0x0800e39b
 800e38c:	0800e3a1 	.word	0x0800e3a1
 800e390:	0800e3a7 	.word	0x0800e3a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e394:	2300      	movs	r3, #0
 800e396:	73fb      	strb	r3, [r7, #15]
    break;
 800e398:	e00b      	b.n	800e3b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e39a:	2303      	movs	r3, #3
 800e39c:	73fb      	strb	r3, [r7, #15]
    break;
 800e39e:	e008      	b.n	800e3b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e3a4:	e005      	b.n	800e3b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e3a6:	2303      	movs	r3, #3
 800e3a8:	73fb      	strb	r3, [r7, #15]
    break;
 800e3aa:	e002      	b.n	800e3b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e3ac:	2303      	movs	r3, #3
 800e3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800e3b0:	bf00      	nop
  }
  return usb_status;
 800e3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3714      	adds	r7, #20
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <__errno>:
 800e3c0:	4b01      	ldr	r3, [pc, #4]	; (800e3c8 <__errno+0x8>)
 800e3c2:	6818      	ldr	r0, [r3, #0]
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop
 800e3c8:	20000198 	.word	0x20000198

0800e3cc <std>:
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	b510      	push	{r4, lr}
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	e9c0 3300 	strd	r3, r3, [r0]
 800e3d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3da:	6083      	str	r3, [r0, #8]
 800e3dc:	8181      	strh	r1, [r0, #12]
 800e3de:	6643      	str	r3, [r0, #100]	; 0x64
 800e3e0:	81c2      	strh	r2, [r0, #14]
 800e3e2:	6183      	str	r3, [r0, #24]
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	2208      	movs	r2, #8
 800e3e8:	305c      	adds	r0, #92	; 0x5c
 800e3ea:	f000 f91a 	bl	800e622 <memset>
 800e3ee:	4b05      	ldr	r3, [pc, #20]	; (800e404 <std+0x38>)
 800e3f0:	6263      	str	r3, [r4, #36]	; 0x24
 800e3f2:	4b05      	ldr	r3, [pc, #20]	; (800e408 <std+0x3c>)
 800e3f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3f6:	4b05      	ldr	r3, [pc, #20]	; (800e40c <std+0x40>)
 800e3f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3fa:	4b05      	ldr	r3, [pc, #20]	; (800e410 <std+0x44>)
 800e3fc:	6224      	str	r4, [r4, #32]
 800e3fe:	6323      	str	r3, [r4, #48]	; 0x30
 800e400:	bd10      	pop	{r4, pc}
 800e402:	bf00      	nop
 800e404:	0800f575 	.word	0x0800f575
 800e408:	0800f59b 	.word	0x0800f59b
 800e40c:	0800f5d3 	.word	0x0800f5d3
 800e410:	0800f5f7 	.word	0x0800f5f7

0800e414 <_cleanup_r>:
 800e414:	4901      	ldr	r1, [pc, #4]	; (800e41c <_cleanup_r+0x8>)
 800e416:	f000 b8af 	b.w	800e578 <_fwalk_reent>
 800e41a:	bf00      	nop
 800e41c:	08011245 	.word	0x08011245

0800e420 <__sfmoreglue>:
 800e420:	b570      	push	{r4, r5, r6, lr}
 800e422:	1e4a      	subs	r2, r1, #1
 800e424:	2568      	movs	r5, #104	; 0x68
 800e426:	4355      	muls	r5, r2
 800e428:	460e      	mov	r6, r1
 800e42a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e42e:	f000 f901 	bl	800e634 <_malloc_r>
 800e432:	4604      	mov	r4, r0
 800e434:	b140      	cbz	r0, 800e448 <__sfmoreglue+0x28>
 800e436:	2100      	movs	r1, #0
 800e438:	e9c0 1600 	strd	r1, r6, [r0]
 800e43c:	300c      	adds	r0, #12
 800e43e:	60a0      	str	r0, [r4, #8]
 800e440:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e444:	f000 f8ed 	bl	800e622 <memset>
 800e448:	4620      	mov	r0, r4
 800e44a:	bd70      	pop	{r4, r5, r6, pc}

0800e44c <__sfp_lock_acquire>:
 800e44c:	4801      	ldr	r0, [pc, #4]	; (800e454 <__sfp_lock_acquire+0x8>)
 800e44e:	f000 b8d8 	b.w	800e602 <__retarget_lock_acquire_recursive>
 800e452:	bf00      	nop
 800e454:	200071a0 	.word	0x200071a0

0800e458 <__sfp_lock_release>:
 800e458:	4801      	ldr	r0, [pc, #4]	; (800e460 <__sfp_lock_release+0x8>)
 800e45a:	f000 b8d3 	b.w	800e604 <__retarget_lock_release_recursive>
 800e45e:	bf00      	nop
 800e460:	200071a0 	.word	0x200071a0

0800e464 <__sinit_lock_acquire>:
 800e464:	4801      	ldr	r0, [pc, #4]	; (800e46c <__sinit_lock_acquire+0x8>)
 800e466:	f000 b8cc 	b.w	800e602 <__retarget_lock_acquire_recursive>
 800e46a:	bf00      	nop
 800e46c:	2000719b 	.word	0x2000719b

0800e470 <__sinit_lock_release>:
 800e470:	4801      	ldr	r0, [pc, #4]	; (800e478 <__sinit_lock_release+0x8>)
 800e472:	f000 b8c7 	b.w	800e604 <__retarget_lock_release_recursive>
 800e476:	bf00      	nop
 800e478:	2000719b 	.word	0x2000719b

0800e47c <__sinit>:
 800e47c:	b510      	push	{r4, lr}
 800e47e:	4604      	mov	r4, r0
 800e480:	f7ff fff0 	bl	800e464 <__sinit_lock_acquire>
 800e484:	69a3      	ldr	r3, [r4, #24]
 800e486:	b11b      	cbz	r3, 800e490 <__sinit+0x14>
 800e488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e48c:	f7ff bff0 	b.w	800e470 <__sinit_lock_release>
 800e490:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e494:	6523      	str	r3, [r4, #80]	; 0x50
 800e496:	4b13      	ldr	r3, [pc, #76]	; (800e4e4 <__sinit+0x68>)
 800e498:	4a13      	ldr	r2, [pc, #76]	; (800e4e8 <__sinit+0x6c>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e49e:	42a3      	cmp	r3, r4
 800e4a0:	bf04      	itt	eq
 800e4a2:	2301      	moveq	r3, #1
 800e4a4:	61a3      	streq	r3, [r4, #24]
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	f000 f820 	bl	800e4ec <__sfp>
 800e4ac:	6060      	str	r0, [r4, #4]
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	f000 f81c 	bl	800e4ec <__sfp>
 800e4b4:	60a0      	str	r0, [r4, #8]
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	f000 f818 	bl	800e4ec <__sfp>
 800e4bc:	2200      	movs	r2, #0
 800e4be:	60e0      	str	r0, [r4, #12]
 800e4c0:	2104      	movs	r1, #4
 800e4c2:	6860      	ldr	r0, [r4, #4]
 800e4c4:	f7ff ff82 	bl	800e3cc <std>
 800e4c8:	68a0      	ldr	r0, [r4, #8]
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	2109      	movs	r1, #9
 800e4ce:	f7ff ff7d 	bl	800e3cc <std>
 800e4d2:	68e0      	ldr	r0, [r4, #12]
 800e4d4:	2202      	movs	r2, #2
 800e4d6:	2112      	movs	r1, #18
 800e4d8:	f7ff ff78 	bl	800e3cc <std>
 800e4dc:	2301      	movs	r3, #1
 800e4de:	61a3      	str	r3, [r4, #24]
 800e4e0:	e7d2      	b.n	800e488 <__sinit+0xc>
 800e4e2:	bf00      	nop
 800e4e4:	08013974 	.word	0x08013974
 800e4e8:	0800e415 	.word	0x0800e415

0800e4ec <__sfp>:
 800e4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ee:	4607      	mov	r7, r0
 800e4f0:	f7ff ffac 	bl	800e44c <__sfp_lock_acquire>
 800e4f4:	4b1e      	ldr	r3, [pc, #120]	; (800e570 <__sfp+0x84>)
 800e4f6:	681e      	ldr	r6, [r3, #0]
 800e4f8:	69b3      	ldr	r3, [r6, #24]
 800e4fa:	b913      	cbnz	r3, 800e502 <__sfp+0x16>
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	f7ff ffbd 	bl	800e47c <__sinit>
 800e502:	3648      	adds	r6, #72	; 0x48
 800e504:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e508:	3b01      	subs	r3, #1
 800e50a:	d503      	bpl.n	800e514 <__sfp+0x28>
 800e50c:	6833      	ldr	r3, [r6, #0]
 800e50e:	b30b      	cbz	r3, 800e554 <__sfp+0x68>
 800e510:	6836      	ldr	r6, [r6, #0]
 800e512:	e7f7      	b.n	800e504 <__sfp+0x18>
 800e514:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e518:	b9d5      	cbnz	r5, 800e550 <__sfp+0x64>
 800e51a:	4b16      	ldr	r3, [pc, #88]	; (800e574 <__sfp+0x88>)
 800e51c:	60e3      	str	r3, [r4, #12]
 800e51e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e522:	6665      	str	r5, [r4, #100]	; 0x64
 800e524:	f000 f86c 	bl	800e600 <__retarget_lock_init_recursive>
 800e528:	f7ff ff96 	bl	800e458 <__sfp_lock_release>
 800e52c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e530:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e534:	6025      	str	r5, [r4, #0]
 800e536:	61a5      	str	r5, [r4, #24]
 800e538:	2208      	movs	r2, #8
 800e53a:	4629      	mov	r1, r5
 800e53c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e540:	f000 f86f 	bl	800e622 <memset>
 800e544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e54c:	4620      	mov	r0, r4
 800e54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e550:	3468      	adds	r4, #104	; 0x68
 800e552:	e7d9      	b.n	800e508 <__sfp+0x1c>
 800e554:	2104      	movs	r1, #4
 800e556:	4638      	mov	r0, r7
 800e558:	f7ff ff62 	bl	800e420 <__sfmoreglue>
 800e55c:	4604      	mov	r4, r0
 800e55e:	6030      	str	r0, [r6, #0]
 800e560:	2800      	cmp	r0, #0
 800e562:	d1d5      	bne.n	800e510 <__sfp+0x24>
 800e564:	f7ff ff78 	bl	800e458 <__sfp_lock_release>
 800e568:	230c      	movs	r3, #12
 800e56a:	603b      	str	r3, [r7, #0]
 800e56c:	e7ee      	b.n	800e54c <__sfp+0x60>
 800e56e:	bf00      	nop
 800e570:	08013974 	.word	0x08013974
 800e574:	ffff0001 	.word	0xffff0001

0800e578 <_fwalk_reent>:
 800e578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e57c:	4606      	mov	r6, r0
 800e57e:	4688      	mov	r8, r1
 800e580:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e584:	2700      	movs	r7, #0
 800e586:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e58a:	f1b9 0901 	subs.w	r9, r9, #1
 800e58e:	d505      	bpl.n	800e59c <_fwalk_reent+0x24>
 800e590:	6824      	ldr	r4, [r4, #0]
 800e592:	2c00      	cmp	r4, #0
 800e594:	d1f7      	bne.n	800e586 <_fwalk_reent+0xe>
 800e596:	4638      	mov	r0, r7
 800e598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e59c:	89ab      	ldrh	r3, [r5, #12]
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d907      	bls.n	800e5b2 <_fwalk_reent+0x3a>
 800e5a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	d003      	beq.n	800e5b2 <_fwalk_reent+0x3a>
 800e5aa:	4629      	mov	r1, r5
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	47c0      	blx	r8
 800e5b0:	4307      	orrs	r7, r0
 800e5b2:	3568      	adds	r5, #104	; 0x68
 800e5b4:	e7e9      	b.n	800e58a <_fwalk_reent+0x12>
	...

0800e5b8 <__libc_init_array>:
 800e5b8:	b570      	push	{r4, r5, r6, lr}
 800e5ba:	4d0d      	ldr	r5, [pc, #52]	; (800e5f0 <__libc_init_array+0x38>)
 800e5bc:	4c0d      	ldr	r4, [pc, #52]	; (800e5f4 <__libc_init_array+0x3c>)
 800e5be:	1b64      	subs	r4, r4, r5
 800e5c0:	10a4      	asrs	r4, r4, #2
 800e5c2:	2600      	movs	r6, #0
 800e5c4:	42a6      	cmp	r6, r4
 800e5c6:	d109      	bne.n	800e5dc <__libc_init_array+0x24>
 800e5c8:	4d0b      	ldr	r5, [pc, #44]	; (800e5f8 <__libc_init_array+0x40>)
 800e5ca:	4c0c      	ldr	r4, [pc, #48]	; (800e5fc <__libc_init_array+0x44>)
 800e5cc:	f005 f834 	bl	8013638 <_init>
 800e5d0:	1b64      	subs	r4, r4, r5
 800e5d2:	10a4      	asrs	r4, r4, #2
 800e5d4:	2600      	movs	r6, #0
 800e5d6:	42a6      	cmp	r6, r4
 800e5d8:	d105      	bne.n	800e5e6 <__libc_init_array+0x2e>
 800e5da:	bd70      	pop	{r4, r5, r6, pc}
 800e5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5e0:	4798      	blx	r3
 800e5e2:	3601      	adds	r6, #1
 800e5e4:	e7ee      	b.n	800e5c4 <__libc_init_array+0xc>
 800e5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5ea:	4798      	blx	r3
 800e5ec:	3601      	adds	r6, #1
 800e5ee:	e7f2      	b.n	800e5d6 <__libc_init_array+0x1e>
 800e5f0:	08013ce4 	.word	0x08013ce4
 800e5f4:	08013ce4 	.word	0x08013ce4
 800e5f8:	08013ce4 	.word	0x08013ce4
 800e5fc:	08013ce8 	.word	0x08013ce8

0800e600 <__retarget_lock_init_recursive>:
 800e600:	4770      	bx	lr

0800e602 <__retarget_lock_acquire_recursive>:
 800e602:	4770      	bx	lr

0800e604 <__retarget_lock_release_recursive>:
 800e604:	4770      	bx	lr

0800e606 <memcpy>:
 800e606:	440a      	add	r2, r1
 800e608:	4291      	cmp	r1, r2
 800e60a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e60e:	d100      	bne.n	800e612 <memcpy+0xc>
 800e610:	4770      	bx	lr
 800e612:	b510      	push	{r4, lr}
 800e614:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e61c:	4291      	cmp	r1, r2
 800e61e:	d1f9      	bne.n	800e614 <memcpy+0xe>
 800e620:	bd10      	pop	{r4, pc}

0800e622 <memset>:
 800e622:	4402      	add	r2, r0
 800e624:	4603      	mov	r3, r0
 800e626:	4293      	cmp	r3, r2
 800e628:	d100      	bne.n	800e62c <memset+0xa>
 800e62a:	4770      	bx	lr
 800e62c:	f803 1b01 	strb.w	r1, [r3], #1
 800e630:	e7f9      	b.n	800e626 <memset+0x4>
	...

0800e634 <_malloc_r>:
 800e634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e636:	1ccd      	adds	r5, r1, #3
 800e638:	f025 0503 	bic.w	r5, r5, #3
 800e63c:	3508      	adds	r5, #8
 800e63e:	2d0c      	cmp	r5, #12
 800e640:	bf38      	it	cc
 800e642:	250c      	movcc	r5, #12
 800e644:	2d00      	cmp	r5, #0
 800e646:	4606      	mov	r6, r0
 800e648:	db01      	blt.n	800e64e <_malloc_r+0x1a>
 800e64a:	42a9      	cmp	r1, r5
 800e64c:	d903      	bls.n	800e656 <_malloc_r+0x22>
 800e64e:	230c      	movs	r3, #12
 800e650:	6033      	str	r3, [r6, #0]
 800e652:	2000      	movs	r0, #0
 800e654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e656:	f003 f9d1 	bl	80119fc <__malloc_lock>
 800e65a:	4921      	ldr	r1, [pc, #132]	; (800e6e0 <_malloc_r+0xac>)
 800e65c:	680a      	ldr	r2, [r1, #0]
 800e65e:	4614      	mov	r4, r2
 800e660:	b99c      	cbnz	r4, 800e68a <_malloc_r+0x56>
 800e662:	4f20      	ldr	r7, [pc, #128]	; (800e6e4 <_malloc_r+0xb0>)
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	b923      	cbnz	r3, 800e672 <_malloc_r+0x3e>
 800e668:	4621      	mov	r1, r4
 800e66a:	4630      	mov	r0, r6
 800e66c:	f000 ff20 	bl	800f4b0 <_sbrk_r>
 800e670:	6038      	str	r0, [r7, #0]
 800e672:	4629      	mov	r1, r5
 800e674:	4630      	mov	r0, r6
 800e676:	f000 ff1b 	bl	800f4b0 <_sbrk_r>
 800e67a:	1c43      	adds	r3, r0, #1
 800e67c:	d123      	bne.n	800e6c6 <_malloc_r+0x92>
 800e67e:	230c      	movs	r3, #12
 800e680:	6033      	str	r3, [r6, #0]
 800e682:	4630      	mov	r0, r6
 800e684:	f003 f9c0 	bl	8011a08 <__malloc_unlock>
 800e688:	e7e3      	b.n	800e652 <_malloc_r+0x1e>
 800e68a:	6823      	ldr	r3, [r4, #0]
 800e68c:	1b5b      	subs	r3, r3, r5
 800e68e:	d417      	bmi.n	800e6c0 <_malloc_r+0x8c>
 800e690:	2b0b      	cmp	r3, #11
 800e692:	d903      	bls.n	800e69c <_malloc_r+0x68>
 800e694:	6023      	str	r3, [r4, #0]
 800e696:	441c      	add	r4, r3
 800e698:	6025      	str	r5, [r4, #0]
 800e69a:	e004      	b.n	800e6a6 <_malloc_r+0x72>
 800e69c:	6863      	ldr	r3, [r4, #4]
 800e69e:	42a2      	cmp	r2, r4
 800e6a0:	bf0c      	ite	eq
 800e6a2:	600b      	streq	r3, [r1, #0]
 800e6a4:	6053      	strne	r3, [r2, #4]
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	f003 f9ae 	bl	8011a08 <__malloc_unlock>
 800e6ac:	f104 000b 	add.w	r0, r4, #11
 800e6b0:	1d23      	adds	r3, r4, #4
 800e6b2:	f020 0007 	bic.w	r0, r0, #7
 800e6b6:	1ac2      	subs	r2, r0, r3
 800e6b8:	d0cc      	beq.n	800e654 <_malloc_r+0x20>
 800e6ba:	1a1b      	subs	r3, r3, r0
 800e6bc:	50a3      	str	r3, [r4, r2]
 800e6be:	e7c9      	b.n	800e654 <_malloc_r+0x20>
 800e6c0:	4622      	mov	r2, r4
 800e6c2:	6864      	ldr	r4, [r4, #4]
 800e6c4:	e7cc      	b.n	800e660 <_malloc_r+0x2c>
 800e6c6:	1cc4      	adds	r4, r0, #3
 800e6c8:	f024 0403 	bic.w	r4, r4, #3
 800e6cc:	42a0      	cmp	r0, r4
 800e6ce:	d0e3      	beq.n	800e698 <_malloc_r+0x64>
 800e6d0:	1a21      	subs	r1, r4, r0
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	f000 feec 	bl	800f4b0 <_sbrk_r>
 800e6d8:	3001      	adds	r0, #1
 800e6da:	d1dd      	bne.n	800e698 <_malloc_r+0x64>
 800e6dc:	e7cf      	b.n	800e67e <_malloc_r+0x4a>
 800e6de:	bf00      	nop
 800e6e0:	200050b8 	.word	0x200050b8
 800e6e4:	200050bc 	.word	0x200050bc

0800e6e8 <__cvt>:
 800e6e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6ec:	ec55 4b10 	vmov	r4, r5, d0
 800e6f0:	2d00      	cmp	r5, #0
 800e6f2:	460e      	mov	r6, r1
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	462b      	mov	r3, r5
 800e6f8:	bfbb      	ittet	lt
 800e6fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e6fe:	461d      	movlt	r5, r3
 800e700:	2300      	movge	r3, #0
 800e702:	232d      	movlt	r3, #45	; 0x2d
 800e704:	700b      	strb	r3, [r1, #0]
 800e706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e708:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e70c:	4691      	mov	r9, r2
 800e70e:	f023 0820 	bic.w	r8, r3, #32
 800e712:	bfbc      	itt	lt
 800e714:	4622      	movlt	r2, r4
 800e716:	4614      	movlt	r4, r2
 800e718:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e71c:	d005      	beq.n	800e72a <__cvt+0x42>
 800e71e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e722:	d100      	bne.n	800e726 <__cvt+0x3e>
 800e724:	3601      	adds	r6, #1
 800e726:	2102      	movs	r1, #2
 800e728:	e000      	b.n	800e72c <__cvt+0x44>
 800e72a:	2103      	movs	r1, #3
 800e72c:	ab03      	add	r3, sp, #12
 800e72e:	9301      	str	r3, [sp, #4]
 800e730:	ab02      	add	r3, sp, #8
 800e732:	9300      	str	r3, [sp, #0]
 800e734:	ec45 4b10 	vmov	d0, r4, r5
 800e738:	4653      	mov	r3, sl
 800e73a:	4632      	mov	r2, r6
 800e73c:	f001 ff10 	bl	8010560 <_dtoa_r>
 800e740:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e744:	4607      	mov	r7, r0
 800e746:	d102      	bne.n	800e74e <__cvt+0x66>
 800e748:	f019 0f01 	tst.w	r9, #1
 800e74c:	d022      	beq.n	800e794 <__cvt+0xac>
 800e74e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e752:	eb07 0906 	add.w	r9, r7, r6
 800e756:	d110      	bne.n	800e77a <__cvt+0x92>
 800e758:	783b      	ldrb	r3, [r7, #0]
 800e75a:	2b30      	cmp	r3, #48	; 0x30
 800e75c:	d10a      	bne.n	800e774 <__cvt+0x8c>
 800e75e:	2200      	movs	r2, #0
 800e760:	2300      	movs	r3, #0
 800e762:	4620      	mov	r0, r4
 800e764:	4629      	mov	r1, r5
 800e766:	f7f2 f9bf 	bl	8000ae8 <__aeabi_dcmpeq>
 800e76a:	b918      	cbnz	r0, 800e774 <__cvt+0x8c>
 800e76c:	f1c6 0601 	rsb	r6, r6, #1
 800e770:	f8ca 6000 	str.w	r6, [sl]
 800e774:	f8da 3000 	ldr.w	r3, [sl]
 800e778:	4499      	add	r9, r3
 800e77a:	2200      	movs	r2, #0
 800e77c:	2300      	movs	r3, #0
 800e77e:	4620      	mov	r0, r4
 800e780:	4629      	mov	r1, r5
 800e782:	f7f2 f9b1 	bl	8000ae8 <__aeabi_dcmpeq>
 800e786:	b108      	cbz	r0, 800e78c <__cvt+0xa4>
 800e788:	f8cd 900c 	str.w	r9, [sp, #12]
 800e78c:	2230      	movs	r2, #48	; 0x30
 800e78e:	9b03      	ldr	r3, [sp, #12]
 800e790:	454b      	cmp	r3, r9
 800e792:	d307      	bcc.n	800e7a4 <__cvt+0xbc>
 800e794:	9b03      	ldr	r3, [sp, #12]
 800e796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e798:	1bdb      	subs	r3, r3, r7
 800e79a:	4638      	mov	r0, r7
 800e79c:	6013      	str	r3, [r2, #0]
 800e79e:	b004      	add	sp, #16
 800e7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7a4:	1c59      	adds	r1, r3, #1
 800e7a6:	9103      	str	r1, [sp, #12]
 800e7a8:	701a      	strb	r2, [r3, #0]
 800e7aa:	e7f0      	b.n	800e78e <__cvt+0xa6>

0800e7ac <__exponent>:
 800e7ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2900      	cmp	r1, #0
 800e7b2:	bfb8      	it	lt
 800e7b4:	4249      	neglt	r1, r1
 800e7b6:	f803 2b02 	strb.w	r2, [r3], #2
 800e7ba:	bfb4      	ite	lt
 800e7bc:	222d      	movlt	r2, #45	; 0x2d
 800e7be:	222b      	movge	r2, #43	; 0x2b
 800e7c0:	2909      	cmp	r1, #9
 800e7c2:	7042      	strb	r2, [r0, #1]
 800e7c4:	dd2a      	ble.n	800e81c <__exponent+0x70>
 800e7c6:	f10d 0407 	add.w	r4, sp, #7
 800e7ca:	46a4      	mov	ip, r4
 800e7cc:	270a      	movs	r7, #10
 800e7ce:	46a6      	mov	lr, r4
 800e7d0:	460a      	mov	r2, r1
 800e7d2:	fb91 f6f7 	sdiv	r6, r1, r7
 800e7d6:	fb07 1516 	mls	r5, r7, r6, r1
 800e7da:	3530      	adds	r5, #48	; 0x30
 800e7dc:	2a63      	cmp	r2, #99	; 0x63
 800e7de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e7e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e7e6:	4631      	mov	r1, r6
 800e7e8:	dcf1      	bgt.n	800e7ce <__exponent+0x22>
 800e7ea:	3130      	adds	r1, #48	; 0x30
 800e7ec:	f1ae 0502 	sub.w	r5, lr, #2
 800e7f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e7f4:	1c44      	adds	r4, r0, #1
 800e7f6:	4629      	mov	r1, r5
 800e7f8:	4561      	cmp	r1, ip
 800e7fa:	d30a      	bcc.n	800e812 <__exponent+0x66>
 800e7fc:	f10d 0209 	add.w	r2, sp, #9
 800e800:	eba2 020e 	sub.w	r2, r2, lr
 800e804:	4565      	cmp	r5, ip
 800e806:	bf88      	it	hi
 800e808:	2200      	movhi	r2, #0
 800e80a:	4413      	add	r3, r2
 800e80c:	1a18      	subs	r0, r3, r0
 800e80e:	b003      	add	sp, #12
 800e810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e812:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e816:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e81a:	e7ed      	b.n	800e7f8 <__exponent+0x4c>
 800e81c:	2330      	movs	r3, #48	; 0x30
 800e81e:	3130      	adds	r1, #48	; 0x30
 800e820:	7083      	strb	r3, [r0, #2]
 800e822:	70c1      	strb	r1, [r0, #3]
 800e824:	1d03      	adds	r3, r0, #4
 800e826:	e7f1      	b.n	800e80c <__exponent+0x60>

0800e828 <_printf_float>:
 800e828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e82c:	ed2d 8b02 	vpush	{d8}
 800e830:	b08d      	sub	sp, #52	; 0x34
 800e832:	460c      	mov	r4, r1
 800e834:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e838:	4616      	mov	r6, r2
 800e83a:	461f      	mov	r7, r3
 800e83c:	4605      	mov	r5, r0
 800e83e:	f003 f8ad 	bl	801199c <_localeconv_r>
 800e842:	f8d0 a000 	ldr.w	sl, [r0]
 800e846:	4650      	mov	r0, sl
 800e848:	f7f1 fcd2 	bl	80001f0 <strlen>
 800e84c:	2300      	movs	r3, #0
 800e84e:	930a      	str	r3, [sp, #40]	; 0x28
 800e850:	6823      	ldr	r3, [r4, #0]
 800e852:	9305      	str	r3, [sp, #20]
 800e854:	f8d8 3000 	ldr.w	r3, [r8]
 800e858:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e85c:	3307      	adds	r3, #7
 800e85e:	f023 0307 	bic.w	r3, r3, #7
 800e862:	f103 0208 	add.w	r2, r3, #8
 800e866:	f8c8 2000 	str.w	r2, [r8]
 800e86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e872:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e876:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e87a:	9307      	str	r3, [sp, #28]
 800e87c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e880:	ee08 0a10 	vmov	s16, r0
 800e884:	4b9f      	ldr	r3, [pc, #636]	; (800eb04 <_printf_float+0x2dc>)
 800e886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e88a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e88e:	f7f2 f95d 	bl	8000b4c <__aeabi_dcmpun>
 800e892:	bb88      	cbnz	r0, 800e8f8 <_printf_float+0xd0>
 800e894:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e898:	4b9a      	ldr	r3, [pc, #616]	; (800eb04 <_printf_float+0x2dc>)
 800e89a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e89e:	f7f2 f937 	bl	8000b10 <__aeabi_dcmple>
 800e8a2:	bb48      	cbnz	r0, 800e8f8 <_printf_float+0xd0>
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	4640      	mov	r0, r8
 800e8aa:	4649      	mov	r1, r9
 800e8ac:	f7f2 f926 	bl	8000afc <__aeabi_dcmplt>
 800e8b0:	b110      	cbz	r0, 800e8b8 <_printf_float+0x90>
 800e8b2:	232d      	movs	r3, #45	; 0x2d
 800e8b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8b8:	4b93      	ldr	r3, [pc, #588]	; (800eb08 <_printf_float+0x2e0>)
 800e8ba:	4894      	ldr	r0, [pc, #592]	; (800eb0c <_printf_float+0x2e4>)
 800e8bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e8c0:	bf94      	ite	ls
 800e8c2:	4698      	movls	r8, r3
 800e8c4:	4680      	movhi	r8, r0
 800e8c6:	2303      	movs	r3, #3
 800e8c8:	6123      	str	r3, [r4, #16]
 800e8ca:	9b05      	ldr	r3, [sp, #20]
 800e8cc:	f023 0204 	bic.w	r2, r3, #4
 800e8d0:	6022      	str	r2, [r4, #0]
 800e8d2:	f04f 0900 	mov.w	r9, #0
 800e8d6:	9700      	str	r7, [sp, #0]
 800e8d8:	4633      	mov	r3, r6
 800e8da:	aa0b      	add	r2, sp, #44	; 0x2c
 800e8dc:	4621      	mov	r1, r4
 800e8de:	4628      	mov	r0, r5
 800e8e0:	f000 f9d8 	bl	800ec94 <_printf_common>
 800e8e4:	3001      	adds	r0, #1
 800e8e6:	f040 8090 	bne.w	800ea0a <_printf_float+0x1e2>
 800e8ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8ee:	b00d      	add	sp, #52	; 0x34
 800e8f0:	ecbd 8b02 	vpop	{d8}
 800e8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f8:	4642      	mov	r2, r8
 800e8fa:	464b      	mov	r3, r9
 800e8fc:	4640      	mov	r0, r8
 800e8fe:	4649      	mov	r1, r9
 800e900:	f7f2 f924 	bl	8000b4c <__aeabi_dcmpun>
 800e904:	b140      	cbz	r0, 800e918 <_printf_float+0xf0>
 800e906:	464b      	mov	r3, r9
 800e908:	2b00      	cmp	r3, #0
 800e90a:	bfbc      	itt	lt
 800e90c:	232d      	movlt	r3, #45	; 0x2d
 800e90e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e912:	487f      	ldr	r0, [pc, #508]	; (800eb10 <_printf_float+0x2e8>)
 800e914:	4b7f      	ldr	r3, [pc, #508]	; (800eb14 <_printf_float+0x2ec>)
 800e916:	e7d1      	b.n	800e8bc <_printf_float+0x94>
 800e918:	6863      	ldr	r3, [r4, #4]
 800e91a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e91e:	9206      	str	r2, [sp, #24]
 800e920:	1c5a      	adds	r2, r3, #1
 800e922:	d13f      	bne.n	800e9a4 <_printf_float+0x17c>
 800e924:	2306      	movs	r3, #6
 800e926:	6063      	str	r3, [r4, #4]
 800e928:	9b05      	ldr	r3, [sp, #20]
 800e92a:	6861      	ldr	r1, [r4, #4]
 800e92c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e930:	2300      	movs	r3, #0
 800e932:	9303      	str	r3, [sp, #12]
 800e934:	ab0a      	add	r3, sp, #40	; 0x28
 800e936:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e93a:	ab09      	add	r3, sp, #36	; 0x24
 800e93c:	ec49 8b10 	vmov	d0, r8, r9
 800e940:	9300      	str	r3, [sp, #0]
 800e942:	6022      	str	r2, [r4, #0]
 800e944:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e948:	4628      	mov	r0, r5
 800e94a:	f7ff fecd 	bl	800e6e8 <__cvt>
 800e94e:	9b06      	ldr	r3, [sp, #24]
 800e950:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e952:	2b47      	cmp	r3, #71	; 0x47
 800e954:	4680      	mov	r8, r0
 800e956:	d108      	bne.n	800e96a <_printf_float+0x142>
 800e958:	1cc8      	adds	r0, r1, #3
 800e95a:	db02      	blt.n	800e962 <_printf_float+0x13a>
 800e95c:	6863      	ldr	r3, [r4, #4]
 800e95e:	4299      	cmp	r1, r3
 800e960:	dd41      	ble.n	800e9e6 <_printf_float+0x1be>
 800e962:	f1ab 0b02 	sub.w	fp, fp, #2
 800e966:	fa5f fb8b 	uxtb.w	fp, fp
 800e96a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e96e:	d820      	bhi.n	800e9b2 <_printf_float+0x18a>
 800e970:	3901      	subs	r1, #1
 800e972:	465a      	mov	r2, fp
 800e974:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e978:	9109      	str	r1, [sp, #36]	; 0x24
 800e97a:	f7ff ff17 	bl	800e7ac <__exponent>
 800e97e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e980:	1813      	adds	r3, r2, r0
 800e982:	2a01      	cmp	r2, #1
 800e984:	4681      	mov	r9, r0
 800e986:	6123      	str	r3, [r4, #16]
 800e988:	dc02      	bgt.n	800e990 <_printf_float+0x168>
 800e98a:	6822      	ldr	r2, [r4, #0]
 800e98c:	07d2      	lsls	r2, r2, #31
 800e98e:	d501      	bpl.n	800e994 <_printf_float+0x16c>
 800e990:	3301      	adds	r3, #1
 800e992:	6123      	str	r3, [r4, #16]
 800e994:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d09c      	beq.n	800e8d6 <_printf_float+0xae>
 800e99c:	232d      	movs	r3, #45	; 0x2d
 800e99e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9a2:	e798      	b.n	800e8d6 <_printf_float+0xae>
 800e9a4:	9a06      	ldr	r2, [sp, #24]
 800e9a6:	2a47      	cmp	r2, #71	; 0x47
 800e9a8:	d1be      	bne.n	800e928 <_printf_float+0x100>
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d1bc      	bne.n	800e928 <_printf_float+0x100>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e7b9      	b.n	800e926 <_printf_float+0xfe>
 800e9b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e9b6:	d118      	bne.n	800e9ea <_printf_float+0x1c2>
 800e9b8:	2900      	cmp	r1, #0
 800e9ba:	6863      	ldr	r3, [r4, #4]
 800e9bc:	dd0b      	ble.n	800e9d6 <_printf_float+0x1ae>
 800e9be:	6121      	str	r1, [r4, #16]
 800e9c0:	b913      	cbnz	r3, 800e9c8 <_printf_float+0x1a0>
 800e9c2:	6822      	ldr	r2, [r4, #0]
 800e9c4:	07d0      	lsls	r0, r2, #31
 800e9c6:	d502      	bpl.n	800e9ce <_printf_float+0x1a6>
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	440b      	add	r3, r1
 800e9cc:	6123      	str	r3, [r4, #16]
 800e9ce:	65a1      	str	r1, [r4, #88]	; 0x58
 800e9d0:	f04f 0900 	mov.w	r9, #0
 800e9d4:	e7de      	b.n	800e994 <_printf_float+0x16c>
 800e9d6:	b913      	cbnz	r3, 800e9de <_printf_float+0x1b6>
 800e9d8:	6822      	ldr	r2, [r4, #0]
 800e9da:	07d2      	lsls	r2, r2, #31
 800e9dc:	d501      	bpl.n	800e9e2 <_printf_float+0x1ba>
 800e9de:	3302      	adds	r3, #2
 800e9e0:	e7f4      	b.n	800e9cc <_printf_float+0x1a4>
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	e7f2      	b.n	800e9cc <_printf_float+0x1a4>
 800e9e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e9ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9ec:	4299      	cmp	r1, r3
 800e9ee:	db05      	blt.n	800e9fc <_printf_float+0x1d4>
 800e9f0:	6823      	ldr	r3, [r4, #0]
 800e9f2:	6121      	str	r1, [r4, #16]
 800e9f4:	07d8      	lsls	r0, r3, #31
 800e9f6:	d5ea      	bpl.n	800e9ce <_printf_float+0x1a6>
 800e9f8:	1c4b      	adds	r3, r1, #1
 800e9fa:	e7e7      	b.n	800e9cc <_printf_float+0x1a4>
 800e9fc:	2900      	cmp	r1, #0
 800e9fe:	bfd4      	ite	le
 800ea00:	f1c1 0202 	rsble	r2, r1, #2
 800ea04:	2201      	movgt	r2, #1
 800ea06:	4413      	add	r3, r2
 800ea08:	e7e0      	b.n	800e9cc <_printf_float+0x1a4>
 800ea0a:	6823      	ldr	r3, [r4, #0]
 800ea0c:	055a      	lsls	r2, r3, #21
 800ea0e:	d407      	bmi.n	800ea20 <_printf_float+0x1f8>
 800ea10:	6923      	ldr	r3, [r4, #16]
 800ea12:	4642      	mov	r2, r8
 800ea14:	4631      	mov	r1, r6
 800ea16:	4628      	mov	r0, r5
 800ea18:	47b8      	blx	r7
 800ea1a:	3001      	adds	r0, #1
 800ea1c:	d12c      	bne.n	800ea78 <_printf_float+0x250>
 800ea1e:	e764      	b.n	800e8ea <_printf_float+0xc2>
 800ea20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ea24:	f240 80e0 	bls.w	800ebe8 <_printf_float+0x3c0>
 800ea28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	2300      	movs	r3, #0
 800ea30:	f7f2 f85a 	bl	8000ae8 <__aeabi_dcmpeq>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d034      	beq.n	800eaa2 <_printf_float+0x27a>
 800ea38:	4a37      	ldr	r2, [pc, #220]	; (800eb18 <_printf_float+0x2f0>)
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	4631      	mov	r1, r6
 800ea3e:	4628      	mov	r0, r5
 800ea40:	47b8      	blx	r7
 800ea42:	3001      	adds	r0, #1
 800ea44:	f43f af51 	beq.w	800e8ea <_printf_float+0xc2>
 800ea48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	db02      	blt.n	800ea56 <_printf_float+0x22e>
 800ea50:	6823      	ldr	r3, [r4, #0]
 800ea52:	07d8      	lsls	r0, r3, #31
 800ea54:	d510      	bpl.n	800ea78 <_printf_float+0x250>
 800ea56:	ee18 3a10 	vmov	r3, s16
 800ea5a:	4652      	mov	r2, sl
 800ea5c:	4631      	mov	r1, r6
 800ea5e:	4628      	mov	r0, r5
 800ea60:	47b8      	blx	r7
 800ea62:	3001      	adds	r0, #1
 800ea64:	f43f af41 	beq.w	800e8ea <_printf_float+0xc2>
 800ea68:	f04f 0800 	mov.w	r8, #0
 800ea6c:	f104 091a 	add.w	r9, r4, #26
 800ea70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea72:	3b01      	subs	r3, #1
 800ea74:	4543      	cmp	r3, r8
 800ea76:	dc09      	bgt.n	800ea8c <_printf_float+0x264>
 800ea78:	6823      	ldr	r3, [r4, #0]
 800ea7a:	079b      	lsls	r3, r3, #30
 800ea7c:	f100 8105 	bmi.w	800ec8a <_printf_float+0x462>
 800ea80:	68e0      	ldr	r0, [r4, #12]
 800ea82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea84:	4298      	cmp	r0, r3
 800ea86:	bfb8      	it	lt
 800ea88:	4618      	movlt	r0, r3
 800ea8a:	e730      	b.n	800e8ee <_printf_float+0xc6>
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	464a      	mov	r2, r9
 800ea90:	4631      	mov	r1, r6
 800ea92:	4628      	mov	r0, r5
 800ea94:	47b8      	blx	r7
 800ea96:	3001      	adds	r0, #1
 800ea98:	f43f af27 	beq.w	800e8ea <_printf_float+0xc2>
 800ea9c:	f108 0801 	add.w	r8, r8, #1
 800eaa0:	e7e6      	b.n	800ea70 <_printf_float+0x248>
 800eaa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	dc39      	bgt.n	800eb1c <_printf_float+0x2f4>
 800eaa8:	4a1b      	ldr	r2, [pc, #108]	; (800eb18 <_printf_float+0x2f0>)
 800eaaa:	2301      	movs	r3, #1
 800eaac:	4631      	mov	r1, r6
 800eaae:	4628      	mov	r0, r5
 800eab0:	47b8      	blx	r7
 800eab2:	3001      	adds	r0, #1
 800eab4:	f43f af19 	beq.w	800e8ea <_printf_float+0xc2>
 800eab8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eabc:	4313      	orrs	r3, r2
 800eabe:	d102      	bne.n	800eac6 <_printf_float+0x29e>
 800eac0:	6823      	ldr	r3, [r4, #0]
 800eac2:	07d9      	lsls	r1, r3, #31
 800eac4:	d5d8      	bpl.n	800ea78 <_printf_float+0x250>
 800eac6:	ee18 3a10 	vmov	r3, s16
 800eaca:	4652      	mov	r2, sl
 800eacc:	4631      	mov	r1, r6
 800eace:	4628      	mov	r0, r5
 800ead0:	47b8      	blx	r7
 800ead2:	3001      	adds	r0, #1
 800ead4:	f43f af09 	beq.w	800e8ea <_printf_float+0xc2>
 800ead8:	f04f 0900 	mov.w	r9, #0
 800eadc:	f104 0a1a 	add.w	sl, r4, #26
 800eae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eae2:	425b      	negs	r3, r3
 800eae4:	454b      	cmp	r3, r9
 800eae6:	dc01      	bgt.n	800eaec <_printf_float+0x2c4>
 800eae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaea:	e792      	b.n	800ea12 <_printf_float+0x1ea>
 800eaec:	2301      	movs	r3, #1
 800eaee:	4652      	mov	r2, sl
 800eaf0:	4631      	mov	r1, r6
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	47b8      	blx	r7
 800eaf6:	3001      	adds	r0, #1
 800eaf8:	f43f aef7 	beq.w	800e8ea <_printf_float+0xc2>
 800eafc:	f109 0901 	add.w	r9, r9, #1
 800eb00:	e7ee      	b.n	800eae0 <_printf_float+0x2b8>
 800eb02:	bf00      	nop
 800eb04:	7fefffff 	.word	0x7fefffff
 800eb08:	08013978 	.word	0x08013978
 800eb0c:	0801397c 	.word	0x0801397c
 800eb10:	08013984 	.word	0x08013984
 800eb14:	08013980 	.word	0x08013980
 800eb18:	08013c89 	.word	0x08013c89
 800eb1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb20:	429a      	cmp	r2, r3
 800eb22:	bfa8      	it	ge
 800eb24:	461a      	movge	r2, r3
 800eb26:	2a00      	cmp	r2, #0
 800eb28:	4691      	mov	r9, r2
 800eb2a:	dc37      	bgt.n	800eb9c <_printf_float+0x374>
 800eb2c:	f04f 0b00 	mov.w	fp, #0
 800eb30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb34:	f104 021a 	add.w	r2, r4, #26
 800eb38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb3a:	9305      	str	r3, [sp, #20]
 800eb3c:	eba3 0309 	sub.w	r3, r3, r9
 800eb40:	455b      	cmp	r3, fp
 800eb42:	dc33      	bgt.n	800ebac <_printf_float+0x384>
 800eb44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	db3b      	blt.n	800ebc4 <_printf_float+0x39c>
 800eb4c:	6823      	ldr	r3, [r4, #0]
 800eb4e:	07da      	lsls	r2, r3, #31
 800eb50:	d438      	bmi.n	800ebc4 <_printf_float+0x39c>
 800eb52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb54:	9b05      	ldr	r3, [sp, #20]
 800eb56:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb58:	1ad3      	subs	r3, r2, r3
 800eb5a:	eba2 0901 	sub.w	r9, r2, r1
 800eb5e:	4599      	cmp	r9, r3
 800eb60:	bfa8      	it	ge
 800eb62:	4699      	movge	r9, r3
 800eb64:	f1b9 0f00 	cmp.w	r9, #0
 800eb68:	dc35      	bgt.n	800ebd6 <_printf_float+0x3ae>
 800eb6a:	f04f 0800 	mov.w	r8, #0
 800eb6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb72:	f104 0a1a 	add.w	sl, r4, #26
 800eb76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb7a:	1a9b      	subs	r3, r3, r2
 800eb7c:	eba3 0309 	sub.w	r3, r3, r9
 800eb80:	4543      	cmp	r3, r8
 800eb82:	f77f af79 	ble.w	800ea78 <_printf_float+0x250>
 800eb86:	2301      	movs	r3, #1
 800eb88:	4652      	mov	r2, sl
 800eb8a:	4631      	mov	r1, r6
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	47b8      	blx	r7
 800eb90:	3001      	adds	r0, #1
 800eb92:	f43f aeaa 	beq.w	800e8ea <_printf_float+0xc2>
 800eb96:	f108 0801 	add.w	r8, r8, #1
 800eb9a:	e7ec      	b.n	800eb76 <_printf_float+0x34e>
 800eb9c:	4613      	mov	r3, r2
 800eb9e:	4631      	mov	r1, r6
 800eba0:	4642      	mov	r2, r8
 800eba2:	4628      	mov	r0, r5
 800eba4:	47b8      	blx	r7
 800eba6:	3001      	adds	r0, #1
 800eba8:	d1c0      	bne.n	800eb2c <_printf_float+0x304>
 800ebaa:	e69e      	b.n	800e8ea <_printf_float+0xc2>
 800ebac:	2301      	movs	r3, #1
 800ebae:	4631      	mov	r1, r6
 800ebb0:	4628      	mov	r0, r5
 800ebb2:	9205      	str	r2, [sp, #20]
 800ebb4:	47b8      	blx	r7
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	f43f ae97 	beq.w	800e8ea <_printf_float+0xc2>
 800ebbc:	9a05      	ldr	r2, [sp, #20]
 800ebbe:	f10b 0b01 	add.w	fp, fp, #1
 800ebc2:	e7b9      	b.n	800eb38 <_printf_float+0x310>
 800ebc4:	ee18 3a10 	vmov	r3, s16
 800ebc8:	4652      	mov	r2, sl
 800ebca:	4631      	mov	r1, r6
 800ebcc:	4628      	mov	r0, r5
 800ebce:	47b8      	blx	r7
 800ebd0:	3001      	adds	r0, #1
 800ebd2:	d1be      	bne.n	800eb52 <_printf_float+0x32a>
 800ebd4:	e689      	b.n	800e8ea <_printf_float+0xc2>
 800ebd6:	9a05      	ldr	r2, [sp, #20]
 800ebd8:	464b      	mov	r3, r9
 800ebda:	4442      	add	r2, r8
 800ebdc:	4631      	mov	r1, r6
 800ebde:	4628      	mov	r0, r5
 800ebe0:	47b8      	blx	r7
 800ebe2:	3001      	adds	r0, #1
 800ebe4:	d1c1      	bne.n	800eb6a <_printf_float+0x342>
 800ebe6:	e680      	b.n	800e8ea <_printf_float+0xc2>
 800ebe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebea:	2a01      	cmp	r2, #1
 800ebec:	dc01      	bgt.n	800ebf2 <_printf_float+0x3ca>
 800ebee:	07db      	lsls	r3, r3, #31
 800ebf0:	d538      	bpl.n	800ec64 <_printf_float+0x43c>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	4642      	mov	r2, r8
 800ebf6:	4631      	mov	r1, r6
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	47b8      	blx	r7
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	f43f ae74 	beq.w	800e8ea <_printf_float+0xc2>
 800ec02:	ee18 3a10 	vmov	r3, s16
 800ec06:	4652      	mov	r2, sl
 800ec08:	4631      	mov	r1, r6
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	47b8      	blx	r7
 800ec0e:	3001      	adds	r0, #1
 800ec10:	f43f ae6b 	beq.w	800e8ea <_printf_float+0xc2>
 800ec14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec18:	2200      	movs	r2, #0
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	f7f1 ff64 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec20:	b9d8      	cbnz	r0, 800ec5a <_printf_float+0x432>
 800ec22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec24:	f108 0201 	add.w	r2, r8, #1
 800ec28:	3b01      	subs	r3, #1
 800ec2a:	4631      	mov	r1, r6
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	47b8      	blx	r7
 800ec30:	3001      	adds	r0, #1
 800ec32:	d10e      	bne.n	800ec52 <_printf_float+0x42a>
 800ec34:	e659      	b.n	800e8ea <_printf_float+0xc2>
 800ec36:	2301      	movs	r3, #1
 800ec38:	4652      	mov	r2, sl
 800ec3a:	4631      	mov	r1, r6
 800ec3c:	4628      	mov	r0, r5
 800ec3e:	47b8      	blx	r7
 800ec40:	3001      	adds	r0, #1
 800ec42:	f43f ae52 	beq.w	800e8ea <_printf_float+0xc2>
 800ec46:	f108 0801 	add.w	r8, r8, #1
 800ec4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec4c:	3b01      	subs	r3, #1
 800ec4e:	4543      	cmp	r3, r8
 800ec50:	dcf1      	bgt.n	800ec36 <_printf_float+0x40e>
 800ec52:	464b      	mov	r3, r9
 800ec54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ec58:	e6dc      	b.n	800ea14 <_printf_float+0x1ec>
 800ec5a:	f04f 0800 	mov.w	r8, #0
 800ec5e:	f104 0a1a 	add.w	sl, r4, #26
 800ec62:	e7f2      	b.n	800ec4a <_printf_float+0x422>
 800ec64:	2301      	movs	r3, #1
 800ec66:	4642      	mov	r2, r8
 800ec68:	e7df      	b.n	800ec2a <_printf_float+0x402>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	464a      	mov	r2, r9
 800ec6e:	4631      	mov	r1, r6
 800ec70:	4628      	mov	r0, r5
 800ec72:	47b8      	blx	r7
 800ec74:	3001      	adds	r0, #1
 800ec76:	f43f ae38 	beq.w	800e8ea <_printf_float+0xc2>
 800ec7a:	f108 0801 	add.w	r8, r8, #1
 800ec7e:	68e3      	ldr	r3, [r4, #12]
 800ec80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec82:	1a5b      	subs	r3, r3, r1
 800ec84:	4543      	cmp	r3, r8
 800ec86:	dcf0      	bgt.n	800ec6a <_printf_float+0x442>
 800ec88:	e6fa      	b.n	800ea80 <_printf_float+0x258>
 800ec8a:	f04f 0800 	mov.w	r8, #0
 800ec8e:	f104 0919 	add.w	r9, r4, #25
 800ec92:	e7f4      	b.n	800ec7e <_printf_float+0x456>

0800ec94 <_printf_common>:
 800ec94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec98:	4616      	mov	r6, r2
 800ec9a:	4699      	mov	r9, r3
 800ec9c:	688a      	ldr	r2, [r1, #8]
 800ec9e:	690b      	ldr	r3, [r1, #16]
 800eca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eca4:	4293      	cmp	r3, r2
 800eca6:	bfb8      	it	lt
 800eca8:	4613      	movlt	r3, r2
 800ecaa:	6033      	str	r3, [r6, #0]
 800ecac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecb0:	4607      	mov	r7, r0
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	b10a      	cbz	r2, 800ecba <_printf_common+0x26>
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	6033      	str	r3, [r6, #0]
 800ecba:	6823      	ldr	r3, [r4, #0]
 800ecbc:	0699      	lsls	r1, r3, #26
 800ecbe:	bf42      	ittt	mi
 800ecc0:	6833      	ldrmi	r3, [r6, #0]
 800ecc2:	3302      	addmi	r3, #2
 800ecc4:	6033      	strmi	r3, [r6, #0]
 800ecc6:	6825      	ldr	r5, [r4, #0]
 800ecc8:	f015 0506 	ands.w	r5, r5, #6
 800eccc:	d106      	bne.n	800ecdc <_printf_common+0x48>
 800ecce:	f104 0a19 	add.w	sl, r4, #25
 800ecd2:	68e3      	ldr	r3, [r4, #12]
 800ecd4:	6832      	ldr	r2, [r6, #0]
 800ecd6:	1a9b      	subs	r3, r3, r2
 800ecd8:	42ab      	cmp	r3, r5
 800ecda:	dc26      	bgt.n	800ed2a <_printf_common+0x96>
 800ecdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ece0:	1e13      	subs	r3, r2, #0
 800ece2:	6822      	ldr	r2, [r4, #0]
 800ece4:	bf18      	it	ne
 800ece6:	2301      	movne	r3, #1
 800ece8:	0692      	lsls	r2, r2, #26
 800ecea:	d42b      	bmi.n	800ed44 <_printf_common+0xb0>
 800ecec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecf0:	4649      	mov	r1, r9
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	47c0      	blx	r8
 800ecf6:	3001      	adds	r0, #1
 800ecf8:	d01e      	beq.n	800ed38 <_printf_common+0xa4>
 800ecfa:	6823      	ldr	r3, [r4, #0]
 800ecfc:	68e5      	ldr	r5, [r4, #12]
 800ecfe:	6832      	ldr	r2, [r6, #0]
 800ed00:	f003 0306 	and.w	r3, r3, #6
 800ed04:	2b04      	cmp	r3, #4
 800ed06:	bf08      	it	eq
 800ed08:	1aad      	subeq	r5, r5, r2
 800ed0a:	68a3      	ldr	r3, [r4, #8]
 800ed0c:	6922      	ldr	r2, [r4, #16]
 800ed0e:	bf0c      	ite	eq
 800ed10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed14:	2500      	movne	r5, #0
 800ed16:	4293      	cmp	r3, r2
 800ed18:	bfc4      	itt	gt
 800ed1a:	1a9b      	subgt	r3, r3, r2
 800ed1c:	18ed      	addgt	r5, r5, r3
 800ed1e:	2600      	movs	r6, #0
 800ed20:	341a      	adds	r4, #26
 800ed22:	42b5      	cmp	r5, r6
 800ed24:	d11a      	bne.n	800ed5c <_printf_common+0xc8>
 800ed26:	2000      	movs	r0, #0
 800ed28:	e008      	b.n	800ed3c <_printf_common+0xa8>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	4652      	mov	r2, sl
 800ed2e:	4649      	mov	r1, r9
 800ed30:	4638      	mov	r0, r7
 800ed32:	47c0      	blx	r8
 800ed34:	3001      	adds	r0, #1
 800ed36:	d103      	bne.n	800ed40 <_printf_common+0xac>
 800ed38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed40:	3501      	adds	r5, #1
 800ed42:	e7c6      	b.n	800ecd2 <_printf_common+0x3e>
 800ed44:	18e1      	adds	r1, r4, r3
 800ed46:	1c5a      	adds	r2, r3, #1
 800ed48:	2030      	movs	r0, #48	; 0x30
 800ed4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed4e:	4422      	add	r2, r4
 800ed50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed58:	3302      	adds	r3, #2
 800ed5a:	e7c7      	b.n	800ecec <_printf_common+0x58>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	4622      	mov	r2, r4
 800ed60:	4649      	mov	r1, r9
 800ed62:	4638      	mov	r0, r7
 800ed64:	47c0      	blx	r8
 800ed66:	3001      	adds	r0, #1
 800ed68:	d0e6      	beq.n	800ed38 <_printf_common+0xa4>
 800ed6a:	3601      	adds	r6, #1
 800ed6c:	e7d9      	b.n	800ed22 <_printf_common+0x8e>
	...

0800ed70 <_printf_i>:
 800ed70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed74:	460c      	mov	r4, r1
 800ed76:	4691      	mov	r9, r2
 800ed78:	7e27      	ldrb	r7, [r4, #24]
 800ed7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ed7c:	2f78      	cmp	r7, #120	; 0x78
 800ed7e:	4680      	mov	r8, r0
 800ed80:	469a      	mov	sl, r3
 800ed82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed86:	d807      	bhi.n	800ed98 <_printf_i+0x28>
 800ed88:	2f62      	cmp	r7, #98	; 0x62
 800ed8a:	d80a      	bhi.n	800eda2 <_printf_i+0x32>
 800ed8c:	2f00      	cmp	r7, #0
 800ed8e:	f000 80d8 	beq.w	800ef42 <_printf_i+0x1d2>
 800ed92:	2f58      	cmp	r7, #88	; 0x58
 800ed94:	f000 80a3 	beq.w	800eede <_printf_i+0x16e>
 800ed98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ed9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eda0:	e03a      	b.n	800ee18 <_printf_i+0xa8>
 800eda2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eda6:	2b15      	cmp	r3, #21
 800eda8:	d8f6      	bhi.n	800ed98 <_printf_i+0x28>
 800edaa:	a001      	add	r0, pc, #4	; (adr r0, 800edb0 <_printf_i+0x40>)
 800edac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800edb0:	0800ee09 	.word	0x0800ee09
 800edb4:	0800ee1d 	.word	0x0800ee1d
 800edb8:	0800ed99 	.word	0x0800ed99
 800edbc:	0800ed99 	.word	0x0800ed99
 800edc0:	0800ed99 	.word	0x0800ed99
 800edc4:	0800ed99 	.word	0x0800ed99
 800edc8:	0800ee1d 	.word	0x0800ee1d
 800edcc:	0800ed99 	.word	0x0800ed99
 800edd0:	0800ed99 	.word	0x0800ed99
 800edd4:	0800ed99 	.word	0x0800ed99
 800edd8:	0800ed99 	.word	0x0800ed99
 800eddc:	0800ef29 	.word	0x0800ef29
 800ede0:	0800ee4d 	.word	0x0800ee4d
 800ede4:	0800ef0b 	.word	0x0800ef0b
 800ede8:	0800ed99 	.word	0x0800ed99
 800edec:	0800ed99 	.word	0x0800ed99
 800edf0:	0800ef4b 	.word	0x0800ef4b
 800edf4:	0800ed99 	.word	0x0800ed99
 800edf8:	0800ee4d 	.word	0x0800ee4d
 800edfc:	0800ed99 	.word	0x0800ed99
 800ee00:	0800ed99 	.word	0x0800ed99
 800ee04:	0800ef13 	.word	0x0800ef13
 800ee08:	680b      	ldr	r3, [r1, #0]
 800ee0a:	1d1a      	adds	r2, r3, #4
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	600a      	str	r2, [r1, #0]
 800ee10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ee14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee18:	2301      	movs	r3, #1
 800ee1a:	e0a3      	b.n	800ef64 <_printf_i+0x1f4>
 800ee1c:	6825      	ldr	r5, [r4, #0]
 800ee1e:	6808      	ldr	r0, [r1, #0]
 800ee20:	062e      	lsls	r6, r5, #24
 800ee22:	f100 0304 	add.w	r3, r0, #4
 800ee26:	d50a      	bpl.n	800ee3e <_printf_i+0xce>
 800ee28:	6805      	ldr	r5, [r0, #0]
 800ee2a:	600b      	str	r3, [r1, #0]
 800ee2c:	2d00      	cmp	r5, #0
 800ee2e:	da03      	bge.n	800ee38 <_printf_i+0xc8>
 800ee30:	232d      	movs	r3, #45	; 0x2d
 800ee32:	426d      	negs	r5, r5
 800ee34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee38:	485e      	ldr	r0, [pc, #376]	; (800efb4 <_printf_i+0x244>)
 800ee3a:	230a      	movs	r3, #10
 800ee3c:	e019      	b.n	800ee72 <_printf_i+0x102>
 800ee3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ee42:	6805      	ldr	r5, [r0, #0]
 800ee44:	600b      	str	r3, [r1, #0]
 800ee46:	bf18      	it	ne
 800ee48:	b22d      	sxthne	r5, r5
 800ee4a:	e7ef      	b.n	800ee2c <_printf_i+0xbc>
 800ee4c:	680b      	ldr	r3, [r1, #0]
 800ee4e:	6825      	ldr	r5, [r4, #0]
 800ee50:	1d18      	adds	r0, r3, #4
 800ee52:	6008      	str	r0, [r1, #0]
 800ee54:	0628      	lsls	r0, r5, #24
 800ee56:	d501      	bpl.n	800ee5c <_printf_i+0xec>
 800ee58:	681d      	ldr	r5, [r3, #0]
 800ee5a:	e002      	b.n	800ee62 <_printf_i+0xf2>
 800ee5c:	0669      	lsls	r1, r5, #25
 800ee5e:	d5fb      	bpl.n	800ee58 <_printf_i+0xe8>
 800ee60:	881d      	ldrh	r5, [r3, #0]
 800ee62:	4854      	ldr	r0, [pc, #336]	; (800efb4 <_printf_i+0x244>)
 800ee64:	2f6f      	cmp	r7, #111	; 0x6f
 800ee66:	bf0c      	ite	eq
 800ee68:	2308      	moveq	r3, #8
 800ee6a:	230a      	movne	r3, #10
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee72:	6866      	ldr	r6, [r4, #4]
 800ee74:	60a6      	str	r6, [r4, #8]
 800ee76:	2e00      	cmp	r6, #0
 800ee78:	bfa2      	ittt	ge
 800ee7a:	6821      	ldrge	r1, [r4, #0]
 800ee7c:	f021 0104 	bicge.w	r1, r1, #4
 800ee80:	6021      	strge	r1, [r4, #0]
 800ee82:	b90d      	cbnz	r5, 800ee88 <_printf_i+0x118>
 800ee84:	2e00      	cmp	r6, #0
 800ee86:	d04d      	beq.n	800ef24 <_printf_i+0x1b4>
 800ee88:	4616      	mov	r6, r2
 800ee8a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee8e:	fb03 5711 	mls	r7, r3, r1, r5
 800ee92:	5dc7      	ldrb	r7, [r0, r7]
 800ee94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee98:	462f      	mov	r7, r5
 800ee9a:	42bb      	cmp	r3, r7
 800ee9c:	460d      	mov	r5, r1
 800ee9e:	d9f4      	bls.n	800ee8a <_printf_i+0x11a>
 800eea0:	2b08      	cmp	r3, #8
 800eea2:	d10b      	bne.n	800eebc <_printf_i+0x14c>
 800eea4:	6823      	ldr	r3, [r4, #0]
 800eea6:	07df      	lsls	r7, r3, #31
 800eea8:	d508      	bpl.n	800eebc <_printf_i+0x14c>
 800eeaa:	6923      	ldr	r3, [r4, #16]
 800eeac:	6861      	ldr	r1, [r4, #4]
 800eeae:	4299      	cmp	r1, r3
 800eeb0:	bfde      	ittt	le
 800eeb2:	2330      	movle	r3, #48	; 0x30
 800eeb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eeb8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800eebc:	1b92      	subs	r2, r2, r6
 800eebe:	6122      	str	r2, [r4, #16]
 800eec0:	f8cd a000 	str.w	sl, [sp]
 800eec4:	464b      	mov	r3, r9
 800eec6:	aa03      	add	r2, sp, #12
 800eec8:	4621      	mov	r1, r4
 800eeca:	4640      	mov	r0, r8
 800eecc:	f7ff fee2 	bl	800ec94 <_printf_common>
 800eed0:	3001      	adds	r0, #1
 800eed2:	d14c      	bne.n	800ef6e <_printf_i+0x1fe>
 800eed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eed8:	b004      	add	sp, #16
 800eeda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eede:	4835      	ldr	r0, [pc, #212]	; (800efb4 <_printf_i+0x244>)
 800eee0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eee4:	6823      	ldr	r3, [r4, #0]
 800eee6:	680e      	ldr	r6, [r1, #0]
 800eee8:	061f      	lsls	r7, r3, #24
 800eeea:	f856 5b04 	ldr.w	r5, [r6], #4
 800eeee:	600e      	str	r6, [r1, #0]
 800eef0:	d514      	bpl.n	800ef1c <_printf_i+0x1ac>
 800eef2:	07d9      	lsls	r1, r3, #31
 800eef4:	bf44      	itt	mi
 800eef6:	f043 0320 	orrmi.w	r3, r3, #32
 800eefa:	6023      	strmi	r3, [r4, #0]
 800eefc:	b91d      	cbnz	r5, 800ef06 <_printf_i+0x196>
 800eefe:	6823      	ldr	r3, [r4, #0]
 800ef00:	f023 0320 	bic.w	r3, r3, #32
 800ef04:	6023      	str	r3, [r4, #0]
 800ef06:	2310      	movs	r3, #16
 800ef08:	e7b0      	b.n	800ee6c <_printf_i+0xfc>
 800ef0a:	6823      	ldr	r3, [r4, #0]
 800ef0c:	f043 0320 	orr.w	r3, r3, #32
 800ef10:	6023      	str	r3, [r4, #0]
 800ef12:	2378      	movs	r3, #120	; 0x78
 800ef14:	4828      	ldr	r0, [pc, #160]	; (800efb8 <_printf_i+0x248>)
 800ef16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef1a:	e7e3      	b.n	800eee4 <_printf_i+0x174>
 800ef1c:	065e      	lsls	r6, r3, #25
 800ef1e:	bf48      	it	mi
 800ef20:	b2ad      	uxthmi	r5, r5
 800ef22:	e7e6      	b.n	800eef2 <_printf_i+0x182>
 800ef24:	4616      	mov	r6, r2
 800ef26:	e7bb      	b.n	800eea0 <_printf_i+0x130>
 800ef28:	680b      	ldr	r3, [r1, #0]
 800ef2a:	6826      	ldr	r6, [r4, #0]
 800ef2c:	6960      	ldr	r0, [r4, #20]
 800ef2e:	1d1d      	adds	r5, r3, #4
 800ef30:	600d      	str	r5, [r1, #0]
 800ef32:	0635      	lsls	r5, r6, #24
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	d501      	bpl.n	800ef3c <_printf_i+0x1cc>
 800ef38:	6018      	str	r0, [r3, #0]
 800ef3a:	e002      	b.n	800ef42 <_printf_i+0x1d2>
 800ef3c:	0671      	lsls	r1, r6, #25
 800ef3e:	d5fb      	bpl.n	800ef38 <_printf_i+0x1c8>
 800ef40:	8018      	strh	r0, [r3, #0]
 800ef42:	2300      	movs	r3, #0
 800ef44:	6123      	str	r3, [r4, #16]
 800ef46:	4616      	mov	r6, r2
 800ef48:	e7ba      	b.n	800eec0 <_printf_i+0x150>
 800ef4a:	680b      	ldr	r3, [r1, #0]
 800ef4c:	1d1a      	adds	r2, r3, #4
 800ef4e:	600a      	str	r2, [r1, #0]
 800ef50:	681e      	ldr	r6, [r3, #0]
 800ef52:	6862      	ldr	r2, [r4, #4]
 800ef54:	2100      	movs	r1, #0
 800ef56:	4630      	mov	r0, r6
 800ef58:	f7f1 f952 	bl	8000200 <memchr>
 800ef5c:	b108      	cbz	r0, 800ef62 <_printf_i+0x1f2>
 800ef5e:	1b80      	subs	r0, r0, r6
 800ef60:	6060      	str	r0, [r4, #4]
 800ef62:	6863      	ldr	r3, [r4, #4]
 800ef64:	6123      	str	r3, [r4, #16]
 800ef66:	2300      	movs	r3, #0
 800ef68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef6c:	e7a8      	b.n	800eec0 <_printf_i+0x150>
 800ef6e:	6923      	ldr	r3, [r4, #16]
 800ef70:	4632      	mov	r2, r6
 800ef72:	4649      	mov	r1, r9
 800ef74:	4640      	mov	r0, r8
 800ef76:	47d0      	blx	sl
 800ef78:	3001      	adds	r0, #1
 800ef7a:	d0ab      	beq.n	800eed4 <_printf_i+0x164>
 800ef7c:	6823      	ldr	r3, [r4, #0]
 800ef7e:	079b      	lsls	r3, r3, #30
 800ef80:	d413      	bmi.n	800efaa <_printf_i+0x23a>
 800ef82:	68e0      	ldr	r0, [r4, #12]
 800ef84:	9b03      	ldr	r3, [sp, #12]
 800ef86:	4298      	cmp	r0, r3
 800ef88:	bfb8      	it	lt
 800ef8a:	4618      	movlt	r0, r3
 800ef8c:	e7a4      	b.n	800eed8 <_printf_i+0x168>
 800ef8e:	2301      	movs	r3, #1
 800ef90:	4632      	mov	r2, r6
 800ef92:	4649      	mov	r1, r9
 800ef94:	4640      	mov	r0, r8
 800ef96:	47d0      	blx	sl
 800ef98:	3001      	adds	r0, #1
 800ef9a:	d09b      	beq.n	800eed4 <_printf_i+0x164>
 800ef9c:	3501      	adds	r5, #1
 800ef9e:	68e3      	ldr	r3, [r4, #12]
 800efa0:	9903      	ldr	r1, [sp, #12]
 800efa2:	1a5b      	subs	r3, r3, r1
 800efa4:	42ab      	cmp	r3, r5
 800efa6:	dcf2      	bgt.n	800ef8e <_printf_i+0x21e>
 800efa8:	e7eb      	b.n	800ef82 <_printf_i+0x212>
 800efaa:	2500      	movs	r5, #0
 800efac:	f104 0619 	add.w	r6, r4, #25
 800efb0:	e7f5      	b.n	800ef9e <_printf_i+0x22e>
 800efb2:	bf00      	nop
 800efb4:	08013988 	.word	0x08013988
 800efb8:	08013999 	.word	0x08013999

0800efbc <_scanf_float>:
 800efbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efc0:	b087      	sub	sp, #28
 800efc2:	4617      	mov	r7, r2
 800efc4:	9303      	str	r3, [sp, #12]
 800efc6:	688b      	ldr	r3, [r1, #8]
 800efc8:	1e5a      	subs	r2, r3, #1
 800efca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800efce:	bf83      	ittte	hi
 800efd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800efd4:	195b      	addhi	r3, r3, r5
 800efd6:	9302      	strhi	r3, [sp, #8]
 800efd8:	2300      	movls	r3, #0
 800efda:	bf86      	itte	hi
 800efdc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800efe0:	608b      	strhi	r3, [r1, #8]
 800efe2:	9302      	strls	r3, [sp, #8]
 800efe4:	680b      	ldr	r3, [r1, #0]
 800efe6:	468b      	mov	fp, r1
 800efe8:	2500      	movs	r5, #0
 800efea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800efee:	f84b 3b1c 	str.w	r3, [fp], #28
 800eff2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800eff6:	4680      	mov	r8, r0
 800eff8:	460c      	mov	r4, r1
 800effa:	465e      	mov	r6, fp
 800effc:	46aa      	mov	sl, r5
 800effe:	46a9      	mov	r9, r5
 800f000:	9501      	str	r5, [sp, #4]
 800f002:	68a2      	ldr	r2, [r4, #8]
 800f004:	b152      	cbz	r2, 800f01c <_scanf_float+0x60>
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	2b4e      	cmp	r3, #78	; 0x4e
 800f00c:	d864      	bhi.n	800f0d8 <_scanf_float+0x11c>
 800f00e:	2b40      	cmp	r3, #64	; 0x40
 800f010:	d83c      	bhi.n	800f08c <_scanf_float+0xd0>
 800f012:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f016:	b2c8      	uxtb	r0, r1
 800f018:	280e      	cmp	r0, #14
 800f01a:	d93a      	bls.n	800f092 <_scanf_float+0xd6>
 800f01c:	f1b9 0f00 	cmp.w	r9, #0
 800f020:	d003      	beq.n	800f02a <_scanf_float+0x6e>
 800f022:	6823      	ldr	r3, [r4, #0]
 800f024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f028:	6023      	str	r3, [r4, #0]
 800f02a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f02e:	f1ba 0f01 	cmp.w	sl, #1
 800f032:	f200 8113 	bhi.w	800f25c <_scanf_float+0x2a0>
 800f036:	455e      	cmp	r6, fp
 800f038:	f200 8105 	bhi.w	800f246 <_scanf_float+0x28a>
 800f03c:	2501      	movs	r5, #1
 800f03e:	4628      	mov	r0, r5
 800f040:	b007      	add	sp, #28
 800f042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f046:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f04a:	2a0d      	cmp	r2, #13
 800f04c:	d8e6      	bhi.n	800f01c <_scanf_float+0x60>
 800f04e:	a101      	add	r1, pc, #4	; (adr r1, 800f054 <_scanf_float+0x98>)
 800f050:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f054:	0800f193 	.word	0x0800f193
 800f058:	0800f01d 	.word	0x0800f01d
 800f05c:	0800f01d 	.word	0x0800f01d
 800f060:	0800f01d 	.word	0x0800f01d
 800f064:	0800f1f3 	.word	0x0800f1f3
 800f068:	0800f1cb 	.word	0x0800f1cb
 800f06c:	0800f01d 	.word	0x0800f01d
 800f070:	0800f01d 	.word	0x0800f01d
 800f074:	0800f1a1 	.word	0x0800f1a1
 800f078:	0800f01d 	.word	0x0800f01d
 800f07c:	0800f01d 	.word	0x0800f01d
 800f080:	0800f01d 	.word	0x0800f01d
 800f084:	0800f01d 	.word	0x0800f01d
 800f088:	0800f159 	.word	0x0800f159
 800f08c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f090:	e7db      	b.n	800f04a <_scanf_float+0x8e>
 800f092:	290e      	cmp	r1, #14
 800f094:	d8c2      	bhi.n	800f01c <_scanf_float+0x60>
 800f096:	a001      	add	r0, pc, #4	; (adr r0, 800f09c <_scanf_float+0xe0>)
 800f098:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f09c:	0800f14b 	.word	0x0800f14b
 800f0a0:	0800f01d 	.word	0x0800f01d
 800f0a4:	0800f14b 	.word	0x0800f14b
 800f0a8:	0800f1df 	.word	0x0800f1df
 800f0ac:	0800f01d 	.word	0x0800f01d
 800f0b0:	0800f0f9 	.word	0x0800f0f9
 800f0b4:	0800f135 	.word	0x0800f135
 800f0b8:	0800f135 	.word	0x0800f135
 800f0bc:	0800f135 	.word	0x0800f135
 800f0c0:	0800f135 	.word	0x0800f135
 800f0c4:	0800f135 	.word	0x0800f135
 800f0c8:	0800f135 	.word	0x0800f135
 800f0cc:	0800f135 	.word	0x0800f135
 800f0d0:	0800f135 	.word	0x0800f135
 800f0d4:	0800f135 	.word	0x0800f135
 800f0d8:	2b6e      	cmp	r3, #110	; 0x6e
 800f0da:	d809      	bhi.n	800f0f0 <_scanf_float+0x134>
 800f0dc:	2b60      	cmp	r3, #96	; 0x60
 800f0de:	d8b2      	bhi.n	800f046 <_scanf_float+0x8a>
 800f0e0:	2b54      	cmp	r3, #84	; 0x54
 800f0e2:	d077      	beq.n	800f1d4 <_scanf_float+0x218>
 800f0e4:	2b59      	cmp	r3, #89	; 0x59
 800f0e6:	d199      	bne.n	800f01c <_scanf_float+0x60>
 800f0e8:	2d07      	cmp	r5, #7
 800f0ea:	d197      	bne.n	800f01c <_scanf_float+0x60>
 800f0ec:	2508      	movs	r5, #8
 800f0ee:	e029      	b.n	800f144 <_scanf_float+0x188>
 800f0f0:	2b74      	cmp	r3, #116	; 0x74
 800f0f2:	d06f      	beq.n	800f1d4 <_scanf_float+0x218>
 800f0f4:	2b79      	cmp	r3, #121	; 0x79
 800f0f6:	e7f6      	b.n	800f0e6 <_scanf_float+0x12a>
 800f0f8:	6821      	ldr	r1, [r4, #0]
 800f0fa:	05c8      	lsls	r0, r1, #23
 800f0fc:	d51a      	bpl.n	800f134 <_scanf_float+0x178>
 800f0fe:	9b02      	ldr	r3, [sp, #8]
 800f100:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f104:	6021      	str	r1, [r4, #0]
 800f106:	f109 0901 	add.w	r9, r9, #1
 800f10a:	b11b      	cbz	r3, 800f114 <_scanf_float+0x158>
 800f10c:	3b01      	subs	r3, #1
 800f10e:	3201      	adds	r2, #1
 800f110:	9302      	str	r3, [sp, #8]
 800f112:	60a2      	str	r2, [r4, #8]
 800f114:	68a3      	ldr	r3, [r4, #8]
 800f116:	3b01      	subs	r3, #1
 800f118:	60a3      	str	r3, [r4, #8]
 800f11a:	6923      	ldr	r3, [r4, #16]
 800f11c:	3301      	adds	r3, #1
 800f11e:	6123      	str	r3, [r4, #16]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	3b01      	subs	r3, #1
 800f124:	2b00      	cmp	r3, #0
 800f126:	607b      	str	r3, [r7, #4]
 800f128:	f340 8084 	ble.w	800f234 <_scanf_float+0x278>
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	3301      	adds	r3, #1
 800f130:	603b      	str	r3, [r7, #0]
 800f132:	e766      	b.n	800f002 <_scanf_float+0x46>
 800f134:	eb1a 0f05 	cmn.w	sl, r5
 800f138:	f47f af70 	bne.w	800f01c <_scanf_float+0x60>
 800f13c:	6822      	ldr	r2, [r4, #0]
 800f13e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f142:	6022      	str	r2, [r4, #0]
 800f144:	f806 3b01 	strb.w	r3, [r6], #1
 800f148:	e7e4      	b.n	800f114 <_scanf_float+0x158>
 800f14a:	6822      	ldr	r2, [r4, #0]
 800f14c:	0610      	lsls	r0, r2, #24
 800f14e:	f57f af65 	bpl.w	800f01c <_scanf_float+0x60>
 800f152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f156:	e7f4      	b.n	800f142 <_scanf_float+0x186>
 800f158:	f1ba 0f00 	cmp.w	sl, #0
 800f15c:	d10e      	bne.n	800f17c <_scanf_float+0x1c0>
 800f15e:	f1b9 0f00 	cmp.w	r9, #0
 800f162:	d10e      	bne.n	800f182 <_scanf_float+0x1c6>
 800f164:	6822      	ldr	r2, [r4, #0]
 800f166:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f16a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f16e:	d108      	bne.n	800f182 <_scanf_float+0x1c6>
 800f170:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f174:	6022      	str	r2, [r4, #0]
 800f176:	f04f 0a01 	mov.w	sl, #1
 800f17a:	e7e3      	b.n	800f144 <_scanf_float+0x188>
 800f17c:	f1ba 0f02 	cmp.w	sl, #2
 800f180:	d055      	beq.n	800f22e <_scanf_float+0x272>
 800f182:	2d01      	cmp	r5, #1
 800f184:	d002      	beq.n	800f18c <_scanf_float+0x1d0>
 800f186:	2d04      	cmp	r5, #4
 800f188:	f47f af48 	bne.w	800f01c <_scanf_float+0x60>
 800f18c:	3501      	adds	r5, #1
 800f18e:	b2ed      	uxtb	r5, r5
 800f190:	e7d8      	b.n	800f144 <_scanf_float+0x188>
 800f192:	f1ba 0f01 	cmp.w	sl, #1
 800f196:	f47f af41 	bne.w	800f01c <_scanf_float+0x60>
 800f19a:	f04f 0a02 	mov.w	sl, #2
 800f19e:	e7d1      	b.n	800f144 <_scanf_float+0x188>
 800f1a0:	b97d      	cbnz	r5, 800f1c2 <_scanf_float+0x206>
 800f1a2:	f1b9 0f00 	cmp.w	r9, #0
 800f1a6:	f47f af3c 	bne.w	800f022 <_scanf_float+0x66>
 800f1aa:	6822      	ldr	r2, [r4, #0]
 800f1ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f1b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f1b4:	f47f af39 	bne.w	800f02a <_scanf_float+0x6e>
 800f1b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f1bc:	6022      	str	r2, [r4, #0]
 800f1be:	2501      	movs	r5, #1
 800f1c0:	e7c0      	b.n	800f144 <_scanf_float+0x188>
 800f1c2:	2d03      	cmp	r5, #3
 800f1c4:	d0e2      	beq.n	800f18c <_scanf_float+0x1d0>
 800f1c6:	2d05      	cmp	r5, #5
 800f1c8:	e7de      	b.n	800f188 <_scanf_float+0x1cc>
 800f1ca:	2d02      	cmp	r5, #2
 800f1cc:	f47f af26 	bne.w	800f01c <_scanf_float+0x60>
 800f1d0:	2503      	movs	r5, #3
 800f1d2:	e7b7      	b.n	800f144 <_scanf_float+0x188>
 800f1d4:	2d06      	cmp	r5, #6
 800f1d6:	f47f af21 	bne.w	800f01c <_scanf_float+0x60>
 800f1da:	2507      	movs	r5, #7
 800f1dc:	e7b2      	b.n	800f144 <_scanf_float+0x188>
 800f1de:	6822      	ldr	r2, [r4, #0]
 800f1e0:	0591      	lsls	r1, r2, #22
 800f1e2:	f57f af1b 	bpl.w	800f01c <_scanf_float+0x60>
 800f1e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f1ea:	6022      	str	r2, [r4, #0]
 800f1ec:	f8cd 9004 	str.w	r9, [sp, #4]
 800f1f0:	e7a8      	b.n	800f144 <_scanf_float+0x188>
 800f1f2:	6822      	ldr	r2, [r4, #0]
 800f1f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f1f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f1fc:	d006      	beq.n	800f20c <_scanf_float+0x250>
 800f1fe:	0550      	lsls	r0, r2, #21
 800f200:	f57f af0c 	bpl.w	800f01c <_scanf_float+0x60>
 800f204:	f1b9 0f00 	cmp.w	r9, #0
 800f208:	f43f af0f 	beq.w	800f02a <_scanf_float+0x6e>
 800f20c:	0591      	lsls	r1, r2, #22
 800f20e:	bf58      	it	pl
 800f210:	9901      	ldrpl	r1, [sp, #4]
 800f212:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f216:	bf58      	it	pl
 800f218:	eba9 0101 	subpl.w	r1, r9, r1
 800f21c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f220:	bf58      	it	pl
 800f222:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f226:	6022      	str	r2, [r4, #0]
 800f228:	f04f 0900 	mov.w	r9, #0
 800f22c:	e78a      	b.n	800f144 <_scanf_float+0x188>
 800f22e:	f04f 0a03 	mov.w	sl, #3
 800f232:	e787      	b.n	800f144 <_scanf_float+0x188>
 800f234:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f238:	4639      	mov	r1, r7
 800f23a:	4640      	mov	r0, r8
 800f23c:	4798      	blx	r3
 800f23e:	2800      	cmp	r0, #0
 800f240:	f43f aedf 	beq.w	800f002 <_scanf_float+0x46>
 800f244:	e6ea      	b.n	800f01c <_scanf_float+0x60>
 800f246:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f24a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f24e:	463a      	mov	r2, r7
 800f250:	4640      	mov	r0, r8
 800f252:	4798      	blx	r3
 800f254:	6923      	ldr	r3, [r4, #16]
 800f256:	3b01      	subs	r3, #1
 800f258:	6123      	str	r3, [r4, #16]
 800f25a:	e6ec      	b.n	800f036 <_scanf_float+0x7a>
 800f25c:	1e6b      	subs	r3, r5, #1
 800f25e:	2b06      	cmp	r3, #6
 800f260:	d825      	bhi.n	800f2ae <_scanf_float+0x2f2>
 800f262:	2d02      	cmp	r5, #2
 800f264:	d836      	bhi.n	800f2d4 <_scanf_float+0x318>
 800f266:	455e      	cmp	r6, fp
 800f268:	f67f aee8 	bls.w	800f03c <_scanf_float+0x80>
 800f26c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f270:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f274:	463a      	mov	r2, r7
 800f276:	4640      	mov	r0, r8
 800f278:	4798      	blx	r3
 800f27a:	6923      	ldr	r3, [r4, #16]
 800f27c:	3b01      	subs	r3, #1
 800f27e:	6123      	str	r3, [r4, #16]
 800f280:	e7f1      	b.n	800f266 <_scanf_float+0x2aa>
 800f282:	9802      	ldr	r0, [sp, #8]
 800f284:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f288:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f28c:	9002      	str	r0, [sp, #8]
 800f28e:	463a      	mov	r2, r7
 800f290:	4640      	mov	r0, r8
 800f292:	4798      	blx	r3
 800f294:	6923      	ldr	r3, [r4, #16]
 800f296:	3b01      	subs	r3, #1
 800f298:	6123      	str	r3, [r4, #16]
 800f29a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f29e:	fa5f fa8a 	uxtb.w	sl, sl
 800f2a2:	f1ba 0f02 	cmp.w	sl, #2
 800f2a6:	d1ec      	bne.n	800f282 <_scanf_float+0x2c6>
 800f2a8:	3d03      	subs	r5, #3
 800f2aa:	b2ed      	uxtb	r5, r5
 800f2ac:	1b76      	subs	r6, r6, r5
 800f2ae:	6823      	ldr	r3, [r4, #0]
 800f2b0:	05da      	lsls	r2, r3, #23
 800f2b2:	d52f      	bpl.n	800f314 <_scanf_float+0x358>
 800f2b4:	055b      	lsls	r3, r3, #21
 800f2b6:	d510      	bpl.n	800f2da <_scanf_float+0x31e>
 800f2b8:	455e      	cmp	r6, fp
 800f2ba:	f67f aebf 	bls.w	800f03c <_scanf_float+0x80>
 800f2be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f2c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f2c6:	463a      	mov	r2, r7
 800f2c8:	4640      	mov	r0, r8
 800f2ca:	4798      	blx	r3
 800f2cc:	6923      	ldr	r3, [r4, #16]
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	6123      	str	r3, [r4, #16]
 800f2d2:	e7f1      	b.n	800f2b8 <_scanf_float+0x2fc>
 800f2d4:	46aa      	mov	sl, r5
 800f2d6:	9602      	str	r6, [sp, #8]
 800f2d8:	e7df      	b.n	800f29a <_scanf_float+0x2de>
 800f2da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f2de:	6923      	ldr	r3, [r4, #16]
 800f2e0:	2965      	cmp	r1, #101	; 0x65
 800f2e2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f2e6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800f2ea:	6123      	str	r3, [r4, #16]
 800f2ec:	d00c      	beq.n	800f308 <_scanf_float+0x34c>
 800f2ee:	2945      	cmp	r1, #69	; 0x45
 800f2f0:	d00a      	beq.n	800f308 <_scanf_float+0x34c>
 800f2f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f2f6:	463a      	mov	r2, r7
 800f2f8:	4640      	mov	r0, r8
 800f2fa:	4798      	blx	r3
 800f2fc:	6923      	ldr	r3, [r4, #16]
 800f2fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f302:	3b01      	subs	r3, #1
 800f304:	1eb5      	subs	r5, r6, #2
 800f306:	6123      	str	r3, [r4, #16]
 800f308:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f30c:	463a      	mov	r2, r7
 800f30e:	4640      	mov	r0, r8
 800f310:	4798      	blx	r3
 800f312:	462e      	mov	r6, r5
 800f314:	6825      	ldr	r5, [r4, #0]
 800f316:	f015 0510 	ands.w	r5, r5, #16
 800f31a:	d158      	bne.n	800f3ce <_scanf_float+0x412>
 800f31c:	7035      	strb	r5, [r6, #0]
 800f31e:	6823      	ldr	r3, [r4, #0]
 800f320:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f328:	d11c      	bne.n	800f364 <_scanf_float+0x3a8>
 800f32a:	9b01      	ldr	r3, [sp, #4]
 800f32c:	454b      	cmp	r3, r9
 800f32e:	eba3 0209 	sub.w	r2, r3, r9
 800f332:	d124      	bne.n	800f37e <_scanf_float+0x3c2>
 800f334:	2200      	movs	r2, #0
 800f336:	4659      	mov	r1, fp
 800f338:	4640      	mov	r0, r8
 800f33a:	f000 ff9b 	bl	8010274 <_strtod_r>
 800f33e:	9b03      	ldr	r3, [sp, #12]
 800f340:	6821      	ldr	r1, [r4, #0]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f011 0f02 	tst.w	r1, #2
 800f348:	ec57 6b10 	vmov	r6, r7, d0
 800f34c:	f103 0204 	add.w	r2, r3, #4
 800f350:	d020      	beq.n	800f394 <_scanf_float+0x3d8>
 800f352:	9903      	ldr	r1, [sp, #12]
 800f354:	600a      	str	r2, [r1, #0]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	e9c3 6700 	strd	r6, r7, [r3]
 800f35c:	68e3      	ldr	r3, [r4, #12]
 800f35e:	3301      	adds	r3, #1
 800f360:	60e3      	str	r3, [r4, #12]
 800f362:	e66c      	b.n	800f03e <_scanf_float+0x82>
 800f364:	9b04      	ldr	r3, [sp, #16]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d0e4      	beq.n	800f334 <_scanf_float+0x378>
 800f36a:	9905      	ldr	r1, [sp, #20]
 800f36c:	230a      	movs	r3, #10
 800f36e:	462a      	mov	r2, r5
 800f370:	3101      	adds	r1, #1
 800f372:	4640      	mov	r0, r8
 800f374:	f001 f808 	bl	8010388 <_strtol_r>
 800f378:	9b04      	ldr	r3, [sp, #16]
 800f37a:	9e05      	ldr	r6, [sp, #20]
 800f37c:	1ac2      	subs	r2, r0, r3
 800f37e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f382:	429e      	cmp	r6, r3
 800f384:	bf28      	it	cs
 800f386:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f38a:	4912      	ldr	r1, [pc, #72]	; (800f3d4 <_scanf_float+0x418>)
 800f38c:	4630      	mov	r0, r6
 800f38e:	f000 f8a5 	bl	800f4dc <siprintf>
 800f392:	e7cf      	b.n	800f334 <_scanf_float+0x378>
 800f394:	f011 0f04 	tst.w	r1, #4
 800f398:	9903      	ldr	r1, [sp, #12]
 800f39a:	600a      	str	r2, [r1, #0]
 800f39c:	d1db      	bne.n	800f356 <_scanf_float+0x39a>
 800f39e:	f8d3 8000 	ldr.w	r8, [r3]
 800f3a2:	ee10 2a10 	vmov	r2, s0
 800f3a6:	ee10 0a10 	vmov	r0, s0
 800f3aa:	463b      	mov	r3, r7
 800f3ac:	4639      	mov	r1, r7
 800f3ae:	f7f1 fbcd 	bl	8000b4c <__aeabi_dcmpun>
 800f3b2:	b128      	cbz	r0, 800f3c0 <_scanf_float+0x404>
 800f3b4:	4808      	ldr	r0, [pc, #32]	; (800f3d8 <_scanf_float+0x41c>)
 800f3b6:	f000 f88b 	bl	800f4d0 <nanf>
 800f3ba:	ed88 0a00 	vstr	s0, [r8]
 800f3be:	e7cd      	b.n	800f35c <_scanf_float+0x3a0>
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	4639      	mov	r1, r7
 800f3c4:	f7f1 fc20 	bl	8000c08 <__aeabi_d2f>
 800f3c8:	f8c8 0000 	str.w	r0, [r8]
 800f3cc:	e7c6      	b.n	800f35c <_scanf_float+0x3a0>
 800f3ce:	2500      	movs	r5, #0
 800f3d0:	e635      	b.n	800f03e <_scanf_float+0x82>
 800f3d2:	bf00      	nop
 800f3d4:	080139aa 	.word	0x080139aa
 800f3d8:	08013cdb 	.word	0x08013cdb

0800f3dc <cleanup_glue>:
 800f3dc:	b538      	push	{r3, r4, r5, lr}
 800f3de:	460c      	mov	r4, r1
 800f3e0:	6809      	ldr	r1, [r1, #0]
 800f3e2:	4605      	mov	r5, r0
 800f3e4:	b109      	cbz	r1, 800f3ea <cleanup_glue+0xe>
 800f3e6:	f7ff fff9 	bl	800f3dc <cleanup_glue>
 800f3ea:	4621      	mov	r1, r4
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3f2:	f002 bfd9 	b.w	80123a8 <_free_r>
	...

0800f3f8 <_reclaim_reent>:
 800f3f8:	4b2c      	ldr	r3, [pc, #176]	; (800f4ac <_reclaim_reent+0xb4>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4283      	cmp	r3, r0
 800f3fe:	b570      	push	{r4, r5, r6, lr}
 800f400:	4604      	mov	r4, r0
 800f402:	d051      	beq.n	800f4a8 <_reclaim_reent+0xb0>
 800f404:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f406:	b143      	cbz	r3, 800f41a <_reclaim_reent+0x22>
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d14a      	bne.n	800f4a4 <_reclaim_reent+0xac>
 800f40e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f410:	6819      	ldr	r1, [r3, #0]
 800f412:	b111      	cbz	r1, 800f41a <_reclaim_reent+0x22>
 800f414:	4620      	mov	r0, r4
 800f416:	f002 ffc7 	bl	80123a8 <_free_r>
 800f41a:	6961      	ldr	r1, [r4, #20]
 800f41c:	b111      	cbz	r1, 800f424 <_reclaim_reent+0x2c>
 800f41e:	4620      	mov	r0, r4
 800f420:	f002 ffc2 	bl	80123a8 <_free_r>
 800f424:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f426:	b111      	cbz	r1, 800f42e <_reclaim_reent+0x36>
 800f428:	4620      	mov	r0, r4
 800f42a:	f002 ffbd 	bl	80123a8 <_free_r>
 800f42e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f430:	b111      	cbz	r1, 800f438 <_reclaim_reent+0x40>
 800f432:	4620      	mov	r0, r4
 800f434:	f002 ffb8 	bl	80123a8 <_free_r>
 800f438:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f43a:	b111      	cbz	r1, 800f442 <_reclaim_reent+0x4a>
 800f43c:	4620      	mov	r0, r4
 800f43e:	f002 ffb3 	bl	80123a8 <_free_r>
 800f442:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f444:	b111      	cbz	r1, 800f44c <_reclaim_reent+0x54>
 800f446:	4620      	mov	r0, r4
 800f448:	f002 ffae 	bl	80123a8 <_free_r>
 800f44c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f44e:	b111      	cbz	r1, 800f456 <_reclaim_reent+0x5e>
 800f450:	4620      	mov	r0, r4
 800f452:	f002 ffa9 	bl	80123a8 <_free_r>
 800f456:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f458:	b111      	cbz	r1, 800f460 <_reclaim_reent+0x68>
 800f45a:	4620      	mov	r0, r4
 800f45c:	f002 ffa4 	bl	80123a8 <_free_r>
 800f460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f462:	b111      	cbz	r1, 800f46a <_reclaim_reent+0x72>
 800f464:	4620      	mov	r0, r4
 800f466:	f002 ff9f 	bl	80123a8 <_free_r>
 800f46a:	69a3      	ldr	r3, [r4, #24]
 800f46c:	b1e3      	cbz	r3, 800f4a8 <_reclaim_reent+0xb0>
 800f46e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f470:	4620      	mov	r0, r4
 800f472:	4798      	blx	r3
 800f474:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f476:	b1b9      	cbz	r1, 800f4a8 <_reclaim_reent+0xb0>
 800f478:	4620      	mov	r0, r4
 800f47a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f47e:	f7ff bfad 	b.w	800f3dc <cleanup_glue>
 800f482:	5949      	ldr	r1, [r1, r5]
 800f484:	b941      	cbnz	r1, 800f498 <_reclaim_reent+0xa0>
 800f486:	3504      	adds	r5, #4
 800f488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f48a:	2d80      	cmp	r5, #128	; 0x80
 800f48c:	68d9      	ldr	r1, [r3, #12]
 800f48e:	d1f8      	bne.n	800f482 <_reclaim_reent+0x8a>
 800f490:	4620      	mov	r0, r4
 800f492:	f002 ff89 	bl	80123a8 <_free_r>
 800f496:	e7ba      	b.n	800f40e <_reclaim_reent+0x16>
 800f498:	680e      	ldr	r6, [r1, #0]
 800f49a:	4620      	mov	r0, r4
 800f49c:	f002 ff84 	bl	80123a8 <_free_r>
 800f4a0:	4631      	mov	r1, r6
 800f4a2:	e7ef      	b.n	800f484 <_reclaim_reent+0x8c>
 800f4a4:	2500      	movs	r5, #0
 800f4a6:	e7ef      	b.n	800f488 <_reclaim_reent+0x90>
 800f4a8:	bd70      	pop	{r4, r5, r6, pc}
 800f4aa:	bf00      	nop
 800f4ac:	20000198 	.word	0x20000198

0800f4b0 <_sbrk_r>:
 800f4b0:	b538      	push	{r3, r4, r5, lr}
 800f4b2:	4d06      	ldr	r5, [pc, #24]	; (800f4cc <_sbrk_r+0x1c>)
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	4608      	mov	r0, r1
 800f4ba:	602b      	str	r3, [r5, #0]
 800f4bc:	f7f3 fc18 	bl	8002cf0 <_sbrk>
 800f4c0:	1c43      	adds	r3, r0, #1
 800f4c2:	d102      	bne.n	800f4ca <_sbrk_r+0x1a>
 800f4c4:	682b      	ldr	r3, [r5, #0]
 800f4c6:	b103      	cbz	r3, 800f4ca <_sbrk_r+0x1a>
 800f4c8:	6023      	str	r3, [r4, #0]
 800f4ca:	bd38      	pop	{r3, r4, r5, pc}
 800f4cc:	200071a4 	.word	0x200071a4

0800f4d0 <nanf>:
 800f4d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f4d8 <nanf+0x8>
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop
 800f4d8:	7fc00000 	.word	0x7fc00000

0800f4dc <siprintf>:
 800f4dc:	b40e      	push	{r1, r2, r3}
 800f4de:	b500      	push	{lr}
 800f4e0:	b09c      	sub	sp, #112	; 0x70
 800f4e2:	ab1d      	add	r3, sp, #116	; 0x74
 800f4e4:	9002      	str	r0, [sp, #8]
 800f4e6:	9006      	str	r0, [sp, #24]
 800f4e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4ec:	4809      	ldr	r0, [pc, #36]	; (800f514 <siprintf+0x38>)
 800f4ee:	9107      	str	r1, [sp, #28]
 800f4f0:	9104      	str	r1, [sp, #16]
 800f4f2:	4909      	ldr	r1, [pc, #36]	; (800f518 <siprintf+0x3c>)
 800f4f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4f8:	9105      	str	r1, [sp, #20]
 800f4fa:	6800      	ldr	r0, [r0, #0]
 800f4fc:	9301      	str	r3, [sp, #4]
 800f4fe:	a902      	add	r1, sp, #8
 800f500:	f002 fffe 	bl	8012500 <_svfiprintf_r>
 800f504:	9b02      	ldr	r3, [sp, #8]
 800f506:	2200      	movs	r2, #0
 800f508:	701a      	strb	r2, [r3, #0]
 800f50a:	b01c      	add	sp, #112	; 0x70
 800f50c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f510:	b003      	add	sp, #12
 800f512:	4770      	bx	lr
 800f514:	20000198 	.word	0x20000198
 800f518:	ffff0208 	.word	0xffff0208

0800f51c <siscanf>:
 800f51c:	b40e      	push	{r1, r2, r3}
 800f51e:	b510      	push	{r4, lr}
 800f520:	b09f      	sub	sp, #124	; 0x7c
 800f522:	ac21      	add	r4, sp, #132	; 0x84
 800f524:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f528:	f854 2b04 	ldr.w	r2, [r4], #4
 800f52c:	9201      	str	r2, [sp, #4]
 800f52e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f532:	9004      	str	r0, [sp, #16]
 800f534:	9008      	str	r0, [sp, #32]
 800f536:	f7f0 fe5b 	bl	80001f0 <strlen>
 800f53a:	4b0c      	ldr	r3, [pc, #48]	; (800f56c <siscanf+0x50>)
 800f53c:	9005      	str	r0, [sp, #20]
 800f53e:	9009      	str	r0, [sp, #36]	; 0x24
 800f540:	930d      	str	r3, [sp, #52]	; 0x34
 800f542:	480b      	ldr	r0, [pc, #44]	; (800f570 <siscanf+0x54>)
 800f544:	9a01      	ldr	r2, [sp, #4]
 800f546:	6800      	ldr	r0, [r0, #0]
 800f548:	9403      	str	r4, [sp, #12]
 800f54a:	2300      	movs	r3, #0
 800f54c:	9311      	str	r3, [sp, #68]	; 0x44
 800f54e:	9316      	str	r3, [sp, #88]	; 0x58
 800f550:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f554:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f558:	a904      	add	r1, sp, #16
 800f55a:	4623      	mov	r3, r4
 800f55c:	f003 f92a 	bl	80127b4 <__ssvfiscanf_r>
 800f560:	b01f      	add	sp, #124	; 0x7c
 800f562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f566:	b003      	add	sp, #12
 800f568:	4770      	bx	lr
 800f56a:	bf00      	nop
 800f56c:	0800f597 	.word	0x0800f597
 800f570:	20000198 	.word	0x20000198

0800f574 <__sread>:
 800f574:	b510      	push	{r4, lr}
 800f576:	460c      	mov	r4, r1
 800f578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f57c:	f003 fbde 	bl	8012d3c <_read_r>
 800f580:	2800      	cmp	r0, #0
 800f582:	bfab      	itete	ge
 800f584:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f586:	89a3      	ldrhlt	r3, [r4, #12]
 800f588:	181b      	addge	r3, r3, r0
 800f58a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f58e:	bfac      	ite	ge
 800f590:	6563      	strge	r3, [r4, #84]	; 0x54
 800f592:	81a3      	strhlt	r3, [r4, #12]
 800f594:	bd10      	pop	{r4, pc}

0800f596 <__seofread>:
 800f596:	2000      	movs	r0, #0
 800f598:	4770      	bx	lr

0800f59a <__swrite>:
 800f59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f59e:	461f      	mov	r7, r3
 800f5a0:	898b      	ldrh	r3, [r1, #12]
 800f5a2:	05db      	lsls	r3, r3, #23
 800f5a4:	4605      	mov	r5, r0
 800f5a6:	460c      	mov	r4, r1
 800f5a8:	4616      	mov	r6, r2
 800f5aa:	d505      	bpl.n	800f5b8 <__swrite+0x1e>
 800f5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5b0:	2302      	movs	r3, #2
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f002 f9f6 	bl	80119a4 <_lseek_r>
 800f5b8:	89a3      	ldrh	r3, [r4, #12]
 800f5ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f5c2:	81a3      	strh	r3, [r4, #12]
 800f5c4:	4632      	mov	r2, r6
 800f5c6:	463b      	mov	r3, r7
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ce:	f000 bf17 	b.w	8010400 <_write_r>

0800f5d2 <__sseek>:
 800f5d2:	b510      	push	{r4, lr}
 800f5d4:	460c      	mov	r4, r1
 800f5d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5da:	f002 f9e3 	bl	80119a4 <_lseek_r>
 800f5de:	1c43      	adds	r3, r0, #1
 800f5e0:	89a3      	ldrh	r3, [r4, #12]
 800f5e2:	bf15      	itete	ne
 800f5e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f5e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f5ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f5ee:	81a3      	strheq	r3, [r4, #12]
 800f5f0:	bf18      	it	ne
 800f5f2:	81a3      	strhne	r3, [r4, #12]
 800f5f4:	bd10      	pop	{r4, pc}

0800f5f6 <__sclose>:
 800f5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5fa:	f000 bf13 	b.w	8010424 <_close_r>

0800f5fe <strncmp>:
 800f5fe:	b510      	push	{r4, lr}
 800f600:	b16a      	cbz	r2, 800f61e <strncmp+0x20>
 800f602:	3901      	subs	r1, #1
 800f604:	1884      	adds	r4, r0, r2
 800f606:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f60a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f60e:	4293      	cmp	r3, r2
 800f610:	d103      	bne.n	800f61a <strncmp+0x1c>
 800f612:	42a0      	cmp	r0, r4
 800f614:	d001      	beq.n	800f61a <strncmp+0x1c>
 800f616:	2b00      	cmp	r3, #0
 800f618:	d1f5      	bne.n	800f606 <strncmp+0x8>
 800f61a:	1a98      	subs	r0, r3, r2
 800f61c:	bd10      	pop	{r4, pc}
 800f61e:	4610      	mov	r0, r2
 800f620:	e7fc      	b.n	800f61c <strncmp+0x1e>

0800f622 <sulp>:
 800f622:	b570      	push	{r4, r5, r6, lr}
 800f624:	4604      	mov	r4, r0
 800f626:	460d      	mov	r5, r1
 800f628:	ec45 4b10 	vmov	d0, r4, r5
 800f62c:	4616      	mov	r6, r2
 800f62e:	f002 fd5d 	bl	80120ec <__ulp>
 800f632:	ec51 0b10 	vmov	r0, r1, d0
 800f636:	b17e      	cbz	r6, 800f658 <sulp+0x36>
 800f638:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f63c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f640:	2b00      	cmp	r3, #0
 800f642:	dd09      	ble.n	800f658 <sulp+0x36>
 800f644:	051b      	lsls	r3, r3, #20
 800f646:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f64a:	2400      	movs	r4, #0
 800f64c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f650:	4622      	mov	r2, r4
 800f652:	462b      	mov	r3, r5
 800f654:	f7f0 ffe0 	bl	8000618 <__aeabi_dmul>
 800f658:	bd70      	pop	{r4, r5, r6, pc}
 800f65a:	0000      	movs	r0, r0
 800f65c:	0000      	movs	r0, r0
	...

0800f660 <_strtod_l>:
 800f660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f664:	b0a3      	sub	sp, #140	; 0x8c
 800f666:	461f      	mov	r7, r3
 800f668:	2300      	movs	r3, #0
 800f66a:	931e      	str	r3, [sp, #120]	; 0x78
 800f66c:	4ba4      	ldr	r3, [pc, #656]	; (800f900 <_strtod_l+0x2a0>)
 800f66e:	9219      	str	r2, [sp, #100]	; 0x64
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	9307      	str	r3, [sp, #28]
 800f674:	4604      	mov	r4, r0
 800f676:	4618      	mov	r0, r3
 800f678:	4688      	mov	r8, r1
 800f67a:	f7f0 fdb9 	bl	80001f0 <strlen>
 800f67e:	f04f 0a00 	mov.w	sl, #0
 800f682:	4605      	mov	r5, r0
 800f684:	f04f 0b00 	mov.w	fp, #0
 800f688:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f68c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f68e:	781a      	ldrb	r2, [r3, #0]
 800f690:	2a2b      	cmp	r2, #43	; 0x2b
 800f692:	d04c      	beq.n	800f72e <_strtod_l+0xce>
 800f694:	d839      	bhi.n	800f70a <_strtod_l+0xaa>
 800f696:	2a0d      	cmp	r2, #13
 800f698:	d832      	bhi.n	800f700 <_strtod_l+0xa0>
 800f69a:	2a08      	cmp	r2, #8
 800f69c:	d832      	bhi.n	800f704 <_strtod_l+0xa4>
 800f69e:	2a00      	cmp	r2, #0
 800f6a0:	d03c      	beq.n	800f71c <_strtod_l+0xbc>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	930e      	str	r3, [sp, #56]	; 0x38
 800f6a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f6a8:	7833      	ldrb	r3, [r6, #0]
 800f6aa:	2b30      	cmp	r3, #48	; 0x30
 800f6ac:	f040 80b4 	bne.w	800f818 <_strtod_l+0x1b8>
 800f6b0:	7873      	ldrb	r3, [r6, #1]
 800f6b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f6b6:	2b58      	cmp	r3, #88	; 0x58
 800f6b8:	d16c      	bne.n	800f794 <_strtod_l+0x134>
 800f6ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6bc:	9301      	str	r3, [sp, #4]
 800f6be:	ab1e      	add	r3, sp, #120	; 0x78
 800f6c0:	9702      	str	r7, [sp, #8]
 800f6c2:	9300      	str	r3, [sp, #0]
 800f6c4:	4a8f      	ldr	r2, [pc, #572]	; (800f904 <_strtod_l+0x2a4>)
 800f6c6:	ab1f      	add	r3, sp, #124	; 0x7c
 800f6c8:	a91d      	add	r1, sp, #116	; 0x74
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	f001 fe5e 	bl	801138c <__gethex>
 800f6d0:	f010 0707 	ands.w	r7, r0, #7
 800f6d4:	4605      	mov	r5, r0
 800f6d6:	d005      	beq.n	800f6e4 <_strtod_l+0x84>
 800f6d8:	2f06      	cmp	r7, #6
 800f6da:	d12a      	bne.n	800f732 <_strtod_l+0xd2>
 800f6dc:	3601      	adds	r6, #1
 800f6de:	2300      	movs	r3, #0
 800f6e0:	961d      	str	r6, [sp, #116]	; 0x74
 800f6e2:	930e      	str	r3, [sp, #56]	; 0x38
 800f6e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	f040 8596 	bne.w	8010218 <_strtod_l+0xbb8>
 800f6ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6ee:	b1db      	cbz	r3, 800f728 <_strtod_l+0xc8>
 800f6f0:	4652      	mov	r2, sl
 800f6f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f6f6:	ec43 2b10 	vmov	d0, r2, r3
 800f6fa:	b023      	add	sp, #140	; 0x8c
 800f6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f700:	2a20      	cmp	r2, #32
 800f702:	d1ce      	bne.n	800f6a2 <_strtod_l+0x42>
 800f704:	3301      	adds	r3, #1
 800f706:	931d      	str	r3, [sp, #116]	; 0x74
 800f708:	e7c0      	b.n	800f68c <_strtod_l+0x2c>
 800f70a:	2a2d      	cmp	r2, #45	; 0x2d
 800f70c:	d1c9      	bne.n	800f6a2 <_strtod_l+0x42>
 800f70e:	2201      	movs	r2, #1
 800f710:	920e      	str	r2, [sp, #56]	; 0x38
 800f712:	1c5a      	adds	r2, r3, #1
 800f714:	921d      	str	r2, [sp, #116]	; 0x74
 800f716:	785b      	ldrb	r3, [r3, #1]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d1c4      	bne.n	800f6a6 <_strtod_l+0x46>
 800f71c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f71e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f722:	2b00      	cmp	r3, #0
 800f724:	f040 8576 	bne.w	8010214 <_strtod_l+0xbb4>
 800f728:	4652      	mov	r2, sl
 800f72a:	465b      	mov	r3, fp
 800f72c:	e7e3      	b.n	800f6f6 <_strtod_l+0x96>
 800f72e:	2200      	movs	r2, #0
 800f730:	e7ee      	b.n	800f710 <_strtod_l+0xb0>
 800f732:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f734:	b13a      	cbz	r2, 800f746 <_strtod_l+0xe6>
 800f736:	2135      	movs	r1, #53	; 0x35
 800f738:	a820      	add	r0, sp, #128	; 0x80
 800f73a:	f002 fde2 	bl	8012302 <__copybits>
 800f73e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f740:	4620      	mov	r0, r4
 800f742:	f002 f9a7 	bl	8011a94 <_Bfree>
 800f746:	3f01      	subs	r7, #1
 800f748:	2f05      	cmp	r7, #5
 800f74a:	d807      	bhi.n	800f75c <_strtod_l+0xfc>
 800f74c:	e8df f007 	tbb	[pc, r7]
 800f750:	1d180b0e 	.word	0x1d180b0e
 800f754:	030e      	.short	0x030e
 800f756:	f04f 0b00 	mov.w	fp, #0
 800f75a:	46da      	mov	sl, fp
 800f75c:	0728      	lsls	r0, r5, #28
 800f75e:	d5c1      	bpl.n	800f6e4 <_strtod_l+0x84>
 800f760:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f764:	e7be      	b.n	800f6e4 <_strtod_l+0x84>
 800f766:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800f76a:	e7f7      	b.n	800f75c <_strtod_l+0xfc>
 800f76c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800f770:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f772:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f776:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f77a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f77e:	e7ed      	b.n	800f75c <_strtod_l+0xfc>
 800f780:	f8df b184 	ldr.w	fp, [pc, #388]	; 800f908 <_strtod_l+0x2a8>
 800f784:	f04f 0a00 	mov.w	sl, #0
 800f788:	e7e8      	b.n	800f75c <_strtod_l+0xfc>
 800f78a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f78e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f792:	e7e3      	b.n	800f75c <_strtod_l+0xfc>
 800f794:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f796:	1c5a      	adds	r2, r3, #1
 800f798:	921d      	str	r2, [sp, #116]	; 0x74
 800f79a:	785b      	ldrb	r3, [r3, #1]
 800f79c:	2b30      	cmp	r3, #48	; 0x30
 800f79e:	d0f9      	beq.n	800f794 <_strtod_l+0x134>
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d09f      	beq.n	800f6e4 <_strtod_l+0x84>
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	f04f 0900 	mov.w	r9, #0
 800f7aa:	9304      	str	r3, [sp, #16]
 800f7ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f7ae:	930a      	str	r3, [sp, #40]	; 0x28
 800f7b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f7b4:	464f      	mov	r7, r9
 800f7b6:	220a      	movs	r2, #10
 800f7b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f7ba:	7806      	ldrb	r6, [r0, #0]
 800f7bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f7c0:	b2d9      	uxtb	r1, r3
 800f7c2:	2909      	cmp	r1, #9
 800f7c4:	d92a      	bls.n	800f81c <_strtod_l+0x1bc>
 800f7c6:	9907      	ldr	r1, [sp, #28]
 800f7c8:	462a      	mov	r2, r5
 800f7ca:	f7ff ff18 	bl	800f5fe <strncmp>
 800f7ce:	b398      	cbz	r0, 800f838 <_strtod_l+0x1d8>
 800f7d0:	2000      	movs	r0, #0
 800f7d2:	4633      	mov	r3, r6
 800f7d4:	463d      	mov	r5, r7
 800f7d6:	9007      	str	r0, [sp, #28]
 800f7d8:	4602      	mov	r2, r0
 800f7da:	2b65      	cmp	r3, #101	; 0x65
 800f7dc:	d001      	beq.n	800f7e2 <_strtod_l+0x182>
 800f7de:	2b45      	cmp	r3, #69	; 0x45
 800f7e0:	d118      	bne.n	800f814 <_strtod_l+0x1b4>
 800f7e2:	b91d      	cbnz	r5, 800f7ec <_strtod_l+0x18c>
 800f7e4:	9b04      	ldr	r3, [sp, #16]
 800f7e6:	4303      	orrs	r3, r0
 800f7e8:	d098      	beq.n	800f71c <_strtod_l+0xbc>
 800f7ea:	2500      	movs	r5, #0
 800f7ec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800f7f0:	f108 0301 	add.w	r3, r8, #1
 800f7f4:	931d      	str	r3, [sp, #116]	; 0x74
 800f7f6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f7fa:	2b2b      	cmp	r3, #43	; 0x2b
 800f7fc:	d075      	beq.n	800f8ea <_strtod_l+0x28a>
 800f7fe:	2b2d      	cmp	r3, #45	; 0x2d
 800f800:	d07b      	beq.n	800f8fa <_strtod_l+0x29a>
 800f802:	f04f 0c00 	mov.w	ip, #0
 800f806:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f80a:	2909      	cmp	r1, #9
 800f80c:	f240 8082 	bls.w	800f914 <_strtod_l+0x2b4>
 800f810:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f814:	2600      	movs	r6, #0
 800f816:	e09d      	b.n	800f954 <_strtod_l+0x2f4>
 800f818:	2300      	movs	r3, #0
 800f81a:	e7c4      	b.n	800f7a6 <_strtod_l+0x146>
 800f81c:	2f08      	cmp	r7, #8
 800f81e:	bfd8      	it	le
 800f820:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f822:	f100 0001 	add.w	r0, r0, #1
 800f826:	bfda      	itte	le
 800f828:	fb02 3301 	mlale	r3, r2, r1, r3
 800f82c:	9309      	strle	r3, [sp, #36]	; 0x24
 800f82e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f832:	3701      	adds	r7, #1
 800f834:	901d      	str	r0, [sp, #116]	; 0x74
 800f836:	e7bf      	b.n	800f7b8 <_strtod_l+0x158>
 800f838:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f83a:	195a      	adds	r2, r3, r5
 800f83c:	921d      	str	r2, [sp, #116]	; 0x74
 800f83e:	5d5b      	ldrb	r3, [r3, r5]
 800f840:	2f00      	cmp	r7, #0
 800f842:	d037      	beq.n	800f8b4 <_strtod_l+0x254>
 800f844:	9007      	str	r0, [sp, #28]
 800f846:	463d      	mov	r5, r7
 800f848:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f84c:	2a09      	cmp	r2, #9
 800f84e:	d912      	bls.n	800f876 <_strtod_l+0x216>
 800f850:	2201      	movs	r2, #1
 800f852:	e7c2      	b.n	800f7da <_strtod_l+0x17a>
 800f854:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f856:	1c5a      	adds	r2, r3, #1
 800f858:	921d      	str	r2, [sp, #116]	; 0x74
 800f85a:	785b      	ldrb	r3, [r3, #1]
 800f85c:	3001      	adds	r0, #1
 800f85e:	2b30      	cmp	r3, #48	; 0x30
 800f860:	d0f8      	beq.n	800f854 <_strtod_l+0x1f4>
 800f862:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f866:	2a08      	cmp	r2, #8
 800f868:	f200 84db 	bhi.w	8010222 <_strtod_l+0xbc2>
 800f86c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f86e:	9007      	str	r0, [sp, #28]
 800f870:	2000      	movs	r0, #0
 800f872:	920a      	str	r2, [sp, #40]	; 0x28
 800f874:	4605      	mov	r5, r0
 800f876:	3b30      	subs	r3, #48	; 0x30
 800f878:	f100 0201 	add.w	r2, r0, #1
 800f87c:	d014      	beq.n	800f8a8 <_strtod_l+0x248>
 800f87e:	9907      	ldr	r1, [sp, #28]
 800f880:	4411      	add	r1, r2
 800f882:	9107      	str	r1, [sp, #28]
 800f884:	462a      	mov	r2, r5
 800f886:	eb00 0e05 	add.w	lr, r0, r5
 800f88a:	210a      	movs	r1, #10
 800f88c:	4572      	cmp	r2, lr
 800f88e:	d113      	bne.n	800f8b8 <_strtod_l+0x258>
 800f890:	182a      	adds	r2, r5, r0
 800f892:	2a08      	cmp	r2, #8
 800f894:	f105 0501 	add.w	r5, r5, #1
 800f898:	4405      	add	r5, r0
 800f89a:	dc1c      	bgt.n	800f8d6 <_strtod_l+0x276>
 800f89c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f89e:	220a      	movs	r2, #10
 800f8a0:	fb02 3301 	mla	r3, r2, r1, r3
 800f8a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f8aa:	1c59      	adds	r1, r3, #1
 800f8ac:	911d      	str	r1, [sp, #116]	; 0x74
 800f8ae:	785b      	ldrb	r3, [r3, #1]
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	e7c9      	b.n	800f848 <_strtod_l+0x1e8>
 800f8b4:	4638      	mov	r0, r7
 800f8b6:	e7d2      	b.n	800f85e <_strtod_l+0x1fe>
 800f8b8:	2a08      	cmp	r2, #8
 800f8ba:	dc04      	bgt.n	800f8c6 <_strtod_l+0x266>
 800f8bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f8be:	434e      	muls	r6, r1
 800f8c0:	9609      	str	r6, [sp, #36]	; 0x24
 800f8c2:	3201      	adds	r2, #1
 800f8c4:	e7e2      	b.n	800f88c <_strtod_l+0x22c>
 800f8c6:	f102 0c01 	add.w	ip, r2, #1
 800f8ca:	f1bc 0f10 	cmp.w	ip, #16
 800f8ce:	bfd8      	it	le
 800f8d0:	fb01 f909 	mulle.w	r9, r1, r9
 800f8d4:	e7f5      	b.n	800f8c2 <_strtod_l+0x262>
 800f8d6:	2d10      	cmp	r5, #16
 800f8d8:	bfdc      	itt	le
 800f8da:	220a      	movle	r2, #10
 800f8dc:	fb02 3909 	mlale	r9, r2, r9, r3
 800f8e0:	e7e1      	b.n	800f8a6 <_strtod_l+0x246>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	9307      	str	r3, [sp, #28]
 800f8e6:	2201      	movs	r2, #1
 800f8e8:	e77c      	b.n	800f7e4 <_strtod_l+0x184>
 800f8ea:	f04f 0c00 	mov.w	ip, #0
 800f8ee:	f108 0302 	add.w	r3, r8, #2
 800f8f2:	931d      	str	r3, [sp, #116]	; 0x74
 800f8f4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f8f8:	e785      	b.n	800f806 <_strtod_l+0x1a6>
 800f8fa:	f04f 0c01 	mov.w	ip, #1
 800f8fe:	e7f6      	b.n	800f8ee <_strtod_l+0x28e>
 800f900:	08013b00 	.word	0x08013b00
 800f904:	080139b0 	.word	0x080139b0
 800f908:	7ff00000 	.word	0x7ff00000
 800f90c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f90e:	1c59      	adds	r1, r3, #1
 800f910:	911d      	str	r1, [sp, #116]	; 0x74
 800f912:	785b      	ldrb	r3, [r3, #1]
 800f914:	2b30      	cmp	r3, #48	; 0x30
 800f916:	d0f9      	beq.n	800f90c <_strtod_l+0x2ac>
 800f918:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800f91c:	2908      	cmp	r1, #8
 800f91e:	f63f af79 	bhi.w	800f814 <_strtod_l+0x1b4>
 800f922:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f926:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f928:	9308      	str	r3, [sp, #32]
 800f92a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f92c:	1c59      	adds	r1, r3, #1
 800f92e:	911d      	str	r1, [sp, #116]	; 0x74
 800f930:	785b      	ldrb	r3, [r3, #1]
 800f932:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800f936:	2e09      	cmp	r6, #9
 800f938:	d937      	bls.n	800f9aa <_strtod_l+0x34a>
 800f93a:	9e08      	ldr	r6, [sp, #32]
 800f93c:	1b89      	subs	r1, r1, r6
 800f93e:	2908      	cmp	r1, #8
 800f940:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f944:	dc02      	bgt.n	800f94c <_strtod_l+0x2ec>
 800f946:	4576      	cmp	r6, lr
 800f948:	bfa8      	it	ge
 800f94a:	4676      	movge	r6, lr
 800f94c:	f1bc 0f00 	cmp.w	ip, #0
 800f950:	d000      	beq.n	800f954 <_strtod_l+0x2f4>
 800f952:	4276      	negs	r6, r6
 800f954:	2d00      	cmp	r5, #0
 800f956:	d14f      	bne.n	800f9f8 <_strtod_l+0x398>
 800f958:	9904      	ldr	r1, [sp, #16]
 800f95a:	4301      	orrs	r1, r0
 800f95c:	f47f aec2 	bne.w	800f6e4 <_strtod_l+0x84>
 800f960:	2a00      	cmp	r2, #0
 800f962:	f47f aedb 	bne.w	800f71c <_strtod_l+0xbc>
 800f966:	2b69      	cmp	r3, #105	; 0x69
 800f968:	d027      	beq.n	800f9ba <_strtod_l+0x35a>
 800f96a:	dc24      	bgt.n	800f9b6 <_strtod_l+0x356>
 800f96c:	2b49      	cmp	r3, #73	; 0x49
 800f96e:	d024      	beq.n	800f9ba <_strtod_l+0x35a>
 800f970:	2b4e      	cmp	r3, #78	; 0x4e
 800f972:	f47f aed3 	bne.w	800f71c <_strtod_l+0xbc>
 800f976:	499e      	ldr	r1, [pc, #632]	; (800fbf0 <_strtod_l+0x590>)
 800f978:	a81d      	add	r0, sp, #116	; 0x74
 800f97a:	f001 ff5f 	bl	801183c <__match>
 800f97e:	2800      	cmp	r0, #0
 800f980:	f43f aecc 	beq.w	800f71c <_strtod_l+0xbc>
 800f984:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	2b28      	cmp	r3, #40	; 0x28
 800f98a:	d12d      	bne.n	800f9e8 <_strtod_l+0x388>
 800f98c:	4999      	ldr	r1, [pc, #612]	; (800fbf4 <_strtod_l+0x594>)
 800f98e:	aa20      	add	r2, sp, #128	; 0x80
 800f990:	a81d      	add	r0, sp, #116	; 0x74
 800f992:	f001 ff67 	bl	8011864 <__hexnan>
 800f996:	2805      	cmp	r0, #5
 800f998:	d126      	bne.n	800f9e8 <_strtod_l+0x388>
 800f99a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f99c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800f9a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f9a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f9a8:	e69c      	b.n	800f6e4 <_strtod_l+0x84>
 800f9aa:	210a      	movs	r1, #10
 800f9ac:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f9b0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f9b4:	e7b9      	b.n	800f92a <_strtod_l+0x2ca>
 800f9b6:	2b6e      	cmp	r3, #110	; 0x6e
 800f9b8:	e7db      	b.n	800f972 <_strtod_l+0x312>
 800f9ba:	498f      	ldr	r1, [pc, #572]	; (800fbf8 <_strtod_l+0x598>)
 800f9bc:	a81d      	add	r0, sp, #116	; 0x74
 800f9be:	f001 ff3d 	bl	801183c <__match>
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	f43f aeaa 	beq.w	800f71c <_strtod_l+0xbc>
 800f9c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f9ca:	498c      	ldr	r1, [pc, #560]	; (800fbfc <_strtod_l+0x59c>)
 800f9cc:	3b01      	subs	r3, #1
 800f9ce:	a81d      	add	r0, sp, #116	; 0x74
 800f9d0:	931d      	str	r3, [sp, #116]	; 0x74
 800f9d2:	f001 ff33 	bl	801183c <__match>
 800f9d6:	b910      	cbnz	r0, 800f9de <_strtod_l+0x37e>
 800f9d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f9da:	3301      	adds	r3, #1
 800f9dc:	931d      	str	r3, [sp, #116]	; 0x74
 800f9de:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800fc0c <_strtod_l+0x5ac>
 800f9e2:	f04f 0a00 	mov.w	sl, #0
 800f9e6:	e67d      	b.n	800f6e4 <_strtod_l+0x84>
 800f9e8:	4885      	ldr	r0, [pc, #532]	; (800fc00 <_strtod_l+0x5a0>)
 800f9ea:	f003 f9b9 	bl	8012d60 <nan>
 800f9ee:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f9f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f9f6:	e675      	b.n	800f6e4 <_strtod_l+0x84>
 800f9f8:	9b07      	ldr	r3, [sp, #28]
 800f9fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9fc:	1af3      	subs	r3, r6, r3
 800f9fe:	2f00      	cmp	r7, #0
 800fa00:	bf08      	it	eq
 800fa02:	462f      	moveq	r7, r5
 800fa04:	2d10      	cmp	r5, #16
 800fa06:	9308      	str	r3, [sp, #32]
 800fa08:	46a8      	mov	r8, r5
 800fa0a:	bfa8      	it	ge
 800fa0c:	f04f 0810 	movge.w	r8, #16
 800fa10:	f7f0 fd88 	bl	8000524 <__aeabi_ui2d>
 800fa14:	2d09      	cmp	r5, #9
 800fa16:	4682      	mov	sl, r0
 800fa18:	468b      	mov	fp, r1
 800fa1a:	dd13      	ble.n	800fa44 <_strtod_l+0x3e4>
 800fa1c:	4b79      	ldr	r3, [pc, #484]	; (800fc04 <_strtod_l+0x5a4>)
 800fa1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fa22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fa26:	f7f0 fdf7 	bl	8000618 <__aeabi_dmul>
 800fa2a:	4682      	mov	sl, r0
 800fa2c:	4648      	mov	r0, r9
 800fa2e:	468b      	mov	fp, r1
 800fa30:	f7f0 fd78 	bl	8000524 <__aeabi_ui2d>
 800fa34:	4602      	mov	r2, r0
 800fa36:	460b      	mov	r3, r1
 800fa38:	4650      	mov	r0, sl
 800fa3a:	4659      	mov	r1, fp
 800fa3c:	f7f0 fc36 	bl	80002ac <__adddf3>
 800fa40:	4682      	mov	sl, r0
 800fa42:	468b      	mov	fp, r1
 800fa44:	2d0f      	cmp	r5, #15
 800fa46:	dc38      	bgt.n	800faba <_strtod_l+0x45a>
 800fa48:	9b08      	ldr	r3, [sp, #32]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	f43f ae4a 	beq.w	800f6e4 <_strtod_l+0x84>
 800fa50:	dd24      	ble.n	800fa9c <_strtod_l+0x43c>
 800fa52:	2b16      	cmp	r3, #22
 800fa54:	dc0b      	bgt.n	800fa6e <_strtod_l+0x40e>
 800fa56:	4d6b      	ldr	r5, [pc, #428]	; (800fc04 <_strtod_l+0x5a4>)
 800fa58:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800fa5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fa60:	4652      	mov	r2, sl
 800fa62:	465b      	mov	r3, fp
 800fa64:	f7f0 fdd8 	bl	8000618 <__aeabi_dmul>
 800fa68:	4682      	mov	sl, r0
 800fa6a:	468b      	mov	fp, r1
 800fa6c:	e63a      	b.n	800f6e4 <_strtod_l+0x84>
 800fa6e:	9a08      	ldr	r2, [sp, #32]
 800fa70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fa74:	4293      	cmp	r3, r2
 800fa76:	db20      	blt.n	800faba <_strtod_l+0x45a>
 800fa78:	4c62      	ldr	r4, [pc, #392]	; (800fc04 <_strtod_l+0x5a4>)
 800fa7a:	f1c5 050f 	rsb	r5, r5, #15
 800fa7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fa82:	4652      	mov	r2, sl
 800fa84:	465b      	mov	r3, fp
 800fa86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa8a:	f7f0 fdc5 	bl	8000618 <__aeabi_dmul>
 800fa8e:	9b08      	ldr	r3, [sp, #32]
 800fa90:	1b5d      	subs	r5, r3, r5
 800fa92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fa96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fa9a:	e7e3      	b.n	800fa64 <_strtod_l+0x404>
 800fa9c:	9b08      	ldr	r3, [sp, #32]
 800fa9e:	3316      	adds	r3, #22
 800faa0:	db0b      	blt.n	800faba <_strtod_l+0x45a>
 800faa2:	9b07      	ldr	r3, [sp, #28]
 800faa4:	4a57      	ldr	r2, [pc, #348]	; (800fc04 <_strtod_l+0x5a4>)
 800faa6:	1b9e      	subs	r6, r3, r6
 800faa8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800faac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fab0:	4650      	mov	r0, sl
 800fab2:	4659      	mov	r1, fp
 800fab4:	f7f0 feda 	bl	800086c <__aeabi_ddiv>
 800fab8:	e7d6      	b.n	800fa68 <_strtod_l+0x408>
 800faba:	9b08      	ldr	r3, [sp, #32]
 800fabc:	eba5 0808 	sub.w	r8, r5, r8
 800fac0:	4498      	add	r8, r3
 800fac2:	f1b8 0f00 	cmp.w	r8, #0
 800fac6:	dd71      	ble.n	800fbac <_strtod_l+0x54c>
 800fac8:	f018 030f 	ands.w	r3, r8, #15
 800facc:	d00a      	beq.n	800fae4 <_strtod_l+0x484>
 800face:	494d      	ldr	r1, [pc, #308]	; (800fc04 <_strtod_l+0x5a4>)
 800fad0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fad4:	4652      	mov	r2, sl
 800fad6:	465b      	mov	r3, fp
 800fad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fadc:	f7f0 fd9c 	bl	8000618 <__aeabi_dmul>
 800fae0:	4682      	mov	sl, r0
 800fae2:	468b      	mov	fp, r1
 800fae4:	f038 080f 	bics.w	r8, r8, #15
 800fae8:	d04d      	beq.n	800fb86 <_strtod_l+0x526>
 800faea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800faee:	dd22      	ble.n	800fb36 <_strtod_l+0x4d6>
 800faf0:	2500      	movs	r5, #0
 800faf2:	462e      	mov	r6, r5
 800faf4:	9509      	str	r5, [sp, #36]	; 0x24
 800faf6:	9507      	str	r5, [sp, #28]
 800faf8:	2322      	movs	r3, #34	; 0x22
 800fafa:	f8df b110 	ldr.w	fp, [pc, #272]	; 800fc0c <_strtod_l+0x5ac>
 800fafe:	6023      	str	r3, [r4, #0]
 800fb00:	f04f 0a00 	mov.w	sl, #0
 800fb04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	f43f adec 	beq.w	800f6e4 <_strtod_l+0x84>
 800fb0c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fb0e:	4620      	mov	r0, r4
 800fb10:	f001 ffc0 	bl	8011a94 <_Bfree>
 800fb14:	9907      	ldr	r1, [sp, #28]
 800fb16:	4620      	mov	r0, r4
 800fb18:	f001 ffbc 	bl	8011a94 <_Bfree>
 800fb1c:	4631      	mov	r1, r6
 800fb1e:	4620      	mov	r0, r4
 800fb20:	f001 ffb8 	bl	8011a94 <_Bfree>
 800fb24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb26:	4620      	mov	r0, r4
 800fb28:	f001 ffb4 	bl	8011a94 <_Bfree>
 800fb2c:	4629      	mov	r1, r5
 800fb2e:	4620      	mov	r0, r4
 800fb30:	f001 ffb0 	bl	8011a94 <_Bfree>
 800fb34:	e5d6      	b.n	800f6e4 <_strtod_l+0x84>
 800fb36:	2300      	movs	r3, #0
 800fb38:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fb3c:	4650      	mov	r0, sl
 800fb3e:	4659      	mov	r1, fp
 800fb40:	4699      	mov	r9, r3
 800fb42:	f1b8 0f01 	cmp.w	r8, #1
 800fb46:	dc21      	bgt.n	800fb8c <_strtod_l+0x52c>
 800fb48:	b10b      	cbz	r3, 800fb4e <_strtod_l+0x4ee>
 800fb4a:	4682      	mov	sl, r0
 800fb4c:	468b      	mov	fp, r1
 800fb4e:	4b2e      	ldr	r3, [pc, #184]	; (800fc08 <_strtod_l+0x5a8>)
 800fb50:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fb54:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fb58:	4652      	mov	r2, sl
 800fb5a:	465b      	mov	r3, fp
 800fb5c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fb60:	f7f0 fd5a 	bl	8000618 <__aeabi_dmul>
 800fb64:	4b29      	ldr	r3, [pc, #164]	; (800fc0c <_strtod_l+0x5ac>)
 800fb66:	460a      	mov	r2, r1
 800fb68:	400b      	ands	r3, r1
 800fb6a:	4929      	ldr	r1, [pc, #164]	; (800fc10 <_strtod_l+0x5b0>)
 800fb6c:	428b      	cmp	r3, r1
 800fb6e:	4682      	mov	sl, r0
 800fb70:	d8be      	bhi.n	800faf0 <_strtod_l+0x490>
 800fb72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fb76:	428b      	cmp	r3, r1
 800fb78:	bf86      	itte	hi
 800fb7a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800fc14 <_strtod_l+0x5b4>
 800fb7e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800fb82:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fb86:	2300      	movs	r3, #0
 800fb88:	9304      	str	r3, [sp, #16]
 800fb8a:	e081      	b.n	800fc90 <_strtod_l+0x630>
 800fb8c:	f018 0f01 	tst.w	r8, #1
 800fb90:	d007      	beq.n	800fba2 <_strtod_l+0x542>
 800fb92:	4b1d      	ldr	r3, [pc, #116]	; (800fc08 <_strtod_l+0x5a8>)
 800fb94:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800fb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9c:	f7f0 fd3c 	bl	8000618 <__aeabi_dmul>
 800fba0:	2301      	movs	r3, #1
 800fba2:	f109 0901 	add.w	r9, r9, #1
 800fba6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fbaa:	e7ca      	b.n	800fb42 <_strtod_l+0x4e2>
 800fbac:	d0eb      	beq.n	800fb86 <_strtod_l+0x526>
 800fbae:	f1c8 0800 	rsb	r8, r8, #0
 800fbb2:	f018 020f 	ands.w	r2, r8, #15
 800fbb6:	d00a      	beq.n	800fbce <_strtod_l+0x56e>
 800fbb8:	4b12      	ldr	r3, [pc, #72]	; (800fc04 <_strtod_l+0x5a4>)
 800fbba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fbbe:	4650      	mov	r0, sl
 800fbc0:	4659      	mov	r1, fp
 800fbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc6:	f7f0 fe51 	bl	800086c <__aeabi_ddiv>
 800fbca:	4682      	mov	sl, r0
 800fbcc:	468b      	mov	fp, r1
 800fbce:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fbd2:	d0d8      	beq.n	800fb86 <_strtod_l+0x526>
 800fbd4:	f1b8 0f1f 	cmp.w	r8, #31
 800fbd8:	dd1e      	ble.n	800fc18 <_strtod_l+0x5b8>
 800fbda:	2500      	movs	r5, #0
 800fbdc:	462e      	mov	r6, r5
 800fbde:	9509      	str	r5, [sp, #36]	; 0x24
 800fbe0:	9507      	str	r5, [sp, #28]
 800fbe2:	2322      	movs	r3, #34	; 0x22
 800fbe4:	f04f 0a00 	mov.w	sl, #0
 800fbe8:	f04f 0b00 	mov.w	fp, #0
 800fbec:	6023      	str	r3, [r4, #0]
 800fbee:	e789      	b.n	800fb04 <_strtod_l+0x4a4>
 800fbf0:	08013985 	.word	0x08013985
 800fbf4:	080139c4 	.word	0x080139c4
 800fbf8:	0801397d 	.word	0x0801397d
 800fbfc:	08013a03 	.word	0x08013a03
 800fc00:	08013cdb 	.word	0x08013cdb
 800fc04:	08013ba0 	.word	0x08013ba0
 800fc08:	08013b78 	.word	0x08013b78
 800fc0c:	7ff00000 	.word	0x7ff00000
 800fc10:	7ca00000 	.word	0x7ca00000
 800fc14:	7fefffff 	.word	0x7fefffff
 800fc18:	f018 0310 	ands.w	r3, r8, #16
 800fc1c:	bf18      	it	ne
 800fc1e:	236a      	movne	r3, #106	; 0x6a
 800fc20:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ffd8 <_strtod_l+0x978>
 800fc24:	9304      	str	r3, [sp, #16]
 800fc26:	4650      	mov	r0, sl
 800fc28:	4659      	mov	r1, fp
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	f018 0f01 	tst.w	r8, #1
 800fc30:	d004      	beq.n	800fc3c <_strtod_l+0x5dc>
 800fc32:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fc36:	f7f0 fcef 	bl	8000618 <__aeabi_dmul>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fc40:	f109 0908 	add.w	r9, r9, #8
 800fc44:	d1f2      	bne.n	800fc2c <_strtod_l+0x5cc>
 800fc46:	b10b      	cbz	r3, 800fc4c <_strtod_l+0x5ec>
 800fc48:	4682      	mov	sl, r0
 800fc4a:	468b      	mov	fp, r1
 800fc4c:	9b04      	ldr	r3, [sp, #16]
 800fc4e:	b1bb      	cbz	r3, 800fc80 <_strtod_l+0x620>
 800fc50:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800fc54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	4659      	mov	r1, fp
 800fc5c:	dd10      	ble.n	800fc80 <_strtod_l+0x620>
 800fc5e:	2b1f      	cmp	r3, #31
 800fc60:	f340 8128 	ble.w	800feb4 <_strtod_l+0x854>
 800fc64:	2b34      	cmp	r3, #52	; 0x34
 800fc66:	bfde      	ittt	le
 800fc68:	3b20      	suble	r3, #32
 800fc6a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800fc6e:	fa02 f303 	lslle.w	r3, r2, r3
 800fc72:	f04f 0a00 	mov.w	sl, #0
 800fc76:	bfcc      	ite	gt
 800fc78:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fc7c:	ea03 0b01 	andle.w	fp, r3, r1
 800fc80:	2200      	movs	r2, #0
 800fc82:	2300      	movs	r3, #0
 800fc84:	4650      	mov	r0, sl
 800fc86:	4659      	mov	r1, fp
 800fc88:	f7f0 ff2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	d1a4      	bne.n	800fbda <_strtod_l+0x57a>
 800fc90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc92:	9300      	str	r3, [sp, #0]
 800fc94:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fc96:	462b      	mov	r3, r5
 800fc98:	463a      	mov	r2, r7
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	f001 ff66 	bl	8011b6c <__s2b>
 800fca0:	9009      	str	r0, [sp, #36]	; 0x24
 800fca2:	2800      	cmp	r0, #0
 800fca4:	f43f af24 	beq.w	800faf0 <_strtod_l+0x490>
 800fca8:	9b07      	ldr	r3, [sp, #28]
 800fcaa:	1b9e      	subs	r6, r3, r6
 800fcac:	9b08      	ldr	r3, [sp, #32]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	bfb4      	ite	lt
 800fcb2:	4633      	movlt	r3, r6
 800fcb4:	2300      	movge	r3, #0
 800fcb6:	9310      	str	r3, [sp, #64]	; 0x40
 800fcb8:	9b08      	ldr	r3, [sp, #32]
 800fcba:	2500      	movs	r5, #0
 800fcbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fcc0:	9318      	str	r3, [sp, #96]	; 0x60
 800fcc2:	462e      	mov	r6, r5
 800fcc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcc6:	4620      	mov	r0, r4
 800fcc8:	6859      	ldr	r1, [r3, #4]
 800fcca:	f001 fea3 	bl	8011a14 <_Balloc>
 800fcce:	9007      	str	r0, [sp, #28]
 800fcd0:	2800      	cmp	r0, #0
 800fcd2:	f43f af11 	beq.w	800faf8 <_strtod_l+0x498>
 800fcd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcd8:	691a      	ldr	r2, [r3, #16]
 800fcda:	3202      	adds	r2, #2
 800fcdc:	f103 010c 	add.w	r1, r3, #12
 800fce0:	0092      	lsls	r2, r2, #2
 800fce2:	300c      	adds	r0, #12
 800fce4:	f7fe fc8f 	bl	800e606 <memcpy>
 800fce8:	ec4b ab10 	vmov	d0, sl, fp
 800fcec:	aa20      	add	r2, sp, #128	; 0x80
 800fcee:	a91f      	add	r1, sp, #124	; 0x7c
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800fcf6:	f002 fa75 	bl	80121e4 <__d2b>
 800fcfa:	901e      	str	r0, [sp, #120]	; 0x78
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	f43f aefb 	beq.w	800faf8 <_strtod_l+0x498>
 800fd02:	2101      	movs	r1, #1
 800fd04:	4620      	mov	r0, r4
 800fd06:	f001 ffcb 	bl	8011ca0 <__i2b>
 800fd0a:	4606      	mov	r6, r0
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	f43f aef3 	beq.w	800faf8 <_strtod_l+0x498>
 800fd12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fd14:	9904      	ldr	r1, [sp, #16]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	bfab      	itete	ge
 800fd1a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800fd1c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800fd1e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800fd20:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800fd24:	bfac      	ite	ge
 800fd26:	eb03 0902 	addge.w	r9, r3, r2
 800fd2a:	1ad7      	sublt	r7, r2, r3
 800fd2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fd2e:	eba3 0801 	sub.w	r8, r3, r1
 800fd32:	4490      	add	r8, r2
 800fd34:	4ba3      	ldr	r3, [pc, #652]	; (800ffc4 <_strtod_l+0x964>)
 800fd36:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800fd3a:	4598      	cmp	r8, r3
 800fd3c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fd40:	f280 80cc 	bge.w	800fedc <_strtod_l+0x87c>
 800fd44:	eba3 0308 	sub.w	r3, r3, r8
 800fd48:	2b1f      	cmp	r3, #31
 800fd4a:	eba2 0203 	sub.w	r2, r2, r3
 800fd4e:	f04f 0101 	mov.w	r1, #1
 800fd52:	f300 80b6 	bgt.w	800fec2 <_strtod_l+0x862>
 800fd56:	fa01 f303 	lsl.w	r3, r1, r3
 800fd5a:	9311      	str	r3, [sp, #68]	; 0x44
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	930c      	str	r3, [sp, #48]	; 0x30
 800fd60:	eb09 0802 	add.w	r8, r9, r2
 800fd64:	9b04      	ldr	r3, [sp, #16]
 800fd66:	45c1      	cmp	r9, r8
 800fd68:	4417      	add	r7, r2
 800fd6a:	441f      	add	r7, r3
 800fd6c:	464b      	mov	r3, r9
 800fd6e:	bfa8      	it	ge
 800fd70:	4643      	movge	r3, r8
 800fd72:	42bb      	cmp	r3, r7
 800fd74:	bfa8      	it	ge
 800fd76:	463b      	movge	r3, r7
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	bfc2      	ittt	gt
 800fd7c:	eba8 0803 	subgt.w	r8, r8, r3
 800fd80:	1aff      	subgt	r7, r7, r3
 800fd82:	eba9 0903 	subgt.w	r9, r9, r3
 800fd86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	dd17      	ble.n	800fdbc <_strtod_l+0x75c>
 800fd8c:	4631      	mov	r1, r6
 800fd8e:	461a      	mov	r2, r3
 800fd90:	4620      	mov	r0, r4
 800fd92:	f002 f841 	bl	8011e18 <__pow5mult>
 800fd96:	4606      	mov	r6, r0
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	f43f aead 	beq.w	800faf8 <_strtod_l+0x498>
 800fd9e:	4601      	mov	r1, r0
 800fda0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fda2:	4620      	mov	r0, r4
 800fda4:	f001 ff92 	bl	8011ccc <__multiply>
 800fda8:	900f      	str	r0, [sp, #60]	; 0x3c
 800fdaa:	2800      	cmp	r0, #0
 800fdac:	f43f aea4 	beq.w	800faf8 <_strtod_l+0x498>
 800fdb0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f001 fe6e 	bl	8011a94 <_Bfree>
 800fdb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fdba:	931e      	str	r3, [sp, #120]	; 0x78
 800fdbc:	f1b8 0f00 	cmp.w	r8, #0
 800fdc0:	f300 8091 	bgt.w	800fee6 <_strtod_l+0x886>
 800fdc4:	9b08      	ldr	r3, [sp, #32]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	dd08      	ble.n	800fddc <_strtod_l+0x77c>
 800fdca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fdcc:	9907      	ldr	r1, [sp, #28]
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f002 f822 	bl	8011e18 <__pow5mult>
 800fdd4:	9007      	str	r0, [sp, #28]
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	f43f ae8e 	beq.w	800faf8 <_strtod_l+0x498>
 800fddc:	2f00      	cmp	r7, #0
 800fdde:	dd08      	ble.n	800fdf2 <_strtod_l+0x792>
 800fde0:	9907      	ldr	r1, [sp, #28]
 800fde2:	463a      	mov	r2, r7
 800fde4:	4620      	mov	r0, r4
 800fde6:	f002 f871 	bl	8011ecc <__lshift>
 800fdea:	9007      	str	r0, [sp, #28]
 800fdec:	2800      	cmp	r0, #0
 800fdee:	f43f ae83 	beq.w	800faf8 <_strtod_l+0x498>
 800fdf2:	f1b9 0f00 	cmp.w	r9, #0
 800fdf6:	dd08      	ble.n	800fe0a <_strtod_l+0x7aa>
 800fdf8:	4631      	mov	r1, r6
 800fdfa:	464a      	mov	r2, r9
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f002 f865 	bl	8011ecc <__lshift>
 800fe02:	4606      	mov	r6, r0
 800fe04:	2800      	cmp	r0, #0
 800fe06:	f43f ae77 	beq.w	800faf8 <_strtod_l+0x498>
 800fe0a:	9a07      	ldr	r2, [sp, #28]
 800fe0c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f002 f8e4 	bl	8011fdc <__mdiff>
 800fe14:	4605      	mov	r5, r0
 800fe16:	2800      	cmp	r0, #0
 800fe18:	f43f ae6e 	beq.w	800faf8 <_strtod_l+0x498>
 800fe1c:	68c3      	ldr	r3, [r0, #12]
 800fe1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe20:	2300      	movs	r3, #0
 800fe22:	60c3      	str	r3, [r0, #12]
 800fe24:	4631      	mov	r1, r6
 800fe26:	f002 f8bd 	bl	8011fa4 <__mcmp>
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	da65      	bge.n	800fefa <_strtod_l+0x89a>
 800fe2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe30:	ea53 030a 	orrs.w	r3, r3, sl
 800fe34:	f040 8087 	bne.w	800ff46 <_strtod_l+0x8e6>
 800fe38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	f040 8082 	bne.w	800ff46 <_strtod_l+0x8e6>
 800fe42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fe46:	0d1b      	lsrs	r3, r3, #20
 800fe48:	051b      	lsls	r3, r3, #20
 800fe4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fe4e:	d97a      	bls.n	800ff46 <_strtod_l+0x8e6>
 800fe50:	696b      	ldr	r3, [r5, #20]
 800fe52:	b913      	cbnz	r3, 800fe5a <_strtod_l+0x7fa>
 800fe54:	692b      	ldr	r3, [r5, #16]
 800fe56:	2b01      	cmp	r3, #1
 800fe58:	dd75      	ble.n	800ff46 <_strtod_l+0x8e6>
 800fe5a:	4629      	mov	r1, r5
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	4620      	mov	r0, r4
 800fe60:	f002 f834 	bl	8011ecc <__lshift>
 800fe64:	4631      	mov	r1, r6
 800fe66:	4605      	mov	r5, r0
 800fe68:	f002 f89c 	bl	8011fa4 <__mcmp>
 800fe6c:	2800      	cmp	r0, #0
 800fe6e:	dd6a      	ble.n	800ff46 <_strtod_l+0x8e6>
 800fe70:	9904      	ldr	r1, [sp, #16]
 800fe72:	4a55      	ldr	r2, [pc, #340]	; (800ffc8 <_strtod_l+0x968>)
 800fe74:	465b      	mov	r3, fp
 800fe76:	2900      	cmp	r1, #0
 800fe78:	f000 8085 	beq.w	800ff86 <_strtod_l+0x926>
 800fe7c:	ea02 010b 	and.w	r1, r2, fp
 800fe80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fe84:	dc7f      	bgt.n	800ff86 <_strtod_l+0x926>
 800fe86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fe8a:	f77f aeaa 	ble.w	800fbe2 <_strtod_l+0x582>
 800fe8e:	4a4f      	ldr	r2, [pc, #316]	; (800ffcc <_strtod_l+0x96c>)
 800fe90:	2300      	movs	r3, #0
 800fe92:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800fe96:	4650      	mov	r0, sl
 800fe98:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800fe9c:	4659      	mov	r1, fp
 800fe9e:	f7f0 fbbb 	bl	8000618 <__aeabi_dmul>
 800fea2:	460b      	mov	r3, r1
 800fea4:	4303      	orrs	r3, r0
 800fea6:	bf08      	it	eq
 800fea8:	2322      	moveq	r3, #34	; 0x22
 800feaa:	4682      	mov	sl, r0
 800feac:	468b      	mov	fp, r1
 800feae:	bf08      	it	eq
 800feb0:	6023      	streq	r3, [r4, #0]
 800feb2:	e62b      	b.n	800fb0c <_strtod_l+0x4ac>
 800feb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800feb8:	fa02 f303 	lsl.w	r3, r2, r3
 800febc:	ea03 0a0a 	and.w	sl, r3, sl
 800fec0:	e6de      	b.n	800fc80 <_strtod_l+0x620>
 800fec2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fec6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800feca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fece:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fed2:	fa01 f308 	lsl.w	r3, r1, r8
 800fed6:	930c      	str	r3, [sp, #48]	; 0x30
 800fed8:	9111      	str	r1, [sp, #68]	; 0x44
 800feda:	e741      	b.n	800fd60 <_strtod_l+0x700>
 800fedc:	2300      	movs	r3, #0
 800fede:	930c      	str	r3, [sp, #48]	; 0x30
 800fee0:	2301      	movs	r3, #1
 800fee2:	9311      	str	r3, [sp, #68]	; 0x44
 800fee4:	e73c      	b.n	800fd60 <_strtod_l+0x700>
 800fee6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fee8:	4642      	mov	r2, r8
 800feea:	4620      	mov	r0, r4
 800feec:	f001 ffee 	bl	8011ecc <__lshift>
 800fef0:	901e      	str	r0, [sp, #120]	; 0x78
 800fef2:	2800      	cmp	r0, #0
 800fef4:	f47f af66 	bne.w	800fdc4 <_strtod_l+0x764>
 800fef8:	e5fe      	b.n	800faf8 <_strtod_l+0x498>
 800fefa:	465f      	mov	r7, fp
 800fefc:	d16e      	bne.n	800ffdc <_strtod_l+0x97c>
 800fefe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ff00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff04:	b342      	cbz	r2, 800ff58 <_strtod_l+0x8f8>
 800ff06:	4a32      	ldr	r2, [pc, #200]	; (800ffd0 <_strtod_l+0x970>)
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	d128      	bne.n	800ff5e <_strtod_l+0x8fe>
 800ff0c:	9b04      	ldr	r3, [sp, #16]
 800ff0e:	4650      	mov	r0, sl
 800ff10:	b1eb      	cbz	r3, 800ff4e <_strtod_l+0x8ee>
 800ff12:	4a2d      	ldr	r2, [pc, #180]	; (800ffc8 <_strtod_l+0x968>)
 800ff14:	403a      	ands	r2, r7
 800ff16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ff1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ff1e:	d819      	bhi.n	800ff54 <_strtod_l+0x8f4>
 800ff20:	0d12      	lsrs	r2, r2, #20
 800ff22:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ff26:	fa01 f303 	lsl.w	r3, r1, r3
 800ff2a:	4298      	cmp	r0, r3
 800ff2c:	d117      	bne.n	800ff5e <_strtod_l+0x8fe>
 800ff2e:	4b29      	ldr	r3, [pc, #164]	; (800ffd4 <_strtod_l+0x974>)
 800ff30:	429f      	cmp	r7, r3
 800ff32:	d102      	bne.n	800ff3a <_strtod_l+0x8da>
 800ff34:	3001      	adds	r0, #1
 800ff36:	f43f addf 	beq.w	800faf8 <_strtod_l+0x498>
 800ff3a:	4b23      	ldr	r3, [pc, #140]	; (800ffc8 <_strtod_l+0x968>)
 800ff3c:	403b      	ands	r3, r7
 800ff3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ff42:	f04f 0a00 	mov.w	sl, #0
 800ff46:	9b04      	ldr	r3, [sp, #16]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d1a0      	bne.n	800fe8e <_strtod_l+0x82e>
 800ff4c:	e5de      	b.n	800fb0c <_strtod_l+0x4ac>
 800ff4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff52:	e7ea      	b.n	800ff2a <_strtod_l+0x8ca>
 800ff54:	460b      	mov	r3, r1
 800ff56:	e7e8      	b.n	800ff2a <_strtod_l+0x8ca>
 800ff58:	ea53 030a 	orrs.w	r3, r3, sl
 800ff5c:	d088      	beq.n	800fe70 <_strtod_l+0x810>
 800ff5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff60:	b1db      	cbz	r3, 800ff9a <_strtod_l+0x93a>
 800ff62:	423b      	tst	r3, r7
 800ff64:	d0ef      	beq.n	800ff46 <_strtod_l+0x8e6>
 800ff66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff68:	9a04      	ldr	r2, [sp, #16]
 800ff6a:	4650      	mov	r0, sl
 800ff6c:	4659      	mov	r1, fp
 800ff6e:	b1c3      	cbz	r3, 800ffa2 <_strtod_l+0x942>
 800ff70:	f7ff fb57 	bl	800f622 <sulp>
 800ff74:	4602      	mov	r2, r0
 800ff76:	460b      	mov	r3, r1
 800ff78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ff7c:	f7f0 f996 	bl	80002ac <__adddf3>
 800ff80:	4682      	mov	sl, r0
 800ff82:	468b      	mov	fp, r1
 800ff84:	e7df      	b.n	800ff46 <_strtod_l+0x8e6>
 800ff86:	4013      	ands	r3, r2
 800ff88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ff8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ff90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ff94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ff98:	e7d5      	b.n	800ff46 <_strtod_l+0x8e6>
 800ff9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff9c:	ea13 0f0a 	tst.w	r3, sl
 800ffa0:	e7e0      	b.n	800ff64 <_strtod_l+0x904>
 800ffa2:	f7ff fb3e 	bl	800f622 <sulp>
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	460b      	mov	r3, r1
 800ffaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ffae:	f7f0 f97b 	bl	80002a8 <__aeabi_dsub>
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	4682      	mov	sl, r0
 800ffb8:	468b      	mov	fp, r1
 800ffba:	f7f0 fd95 	bl	8000ae8 <__aeabi_dcmpeq>
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	d0c1      	beq.n	800ff46 <_strtod_l+0x8e6>
 800ffc2:	e60e      	b.n	800fbe2 <_strtod_l+0x582>
 800ffc4:	fffffc02 	.word	0xfffffc02
 800ffc8:	7ff00000 	.word	0x7ff00000
 800ffcc:	39500000 	.word	0x39500000
 800ffd0:	000fffff 	.word	0x000fffff
 800ffd4:	7fefffff 	.word	0x7fefffff
 800ffd8:	080139d8 	.word	0x080139d8
 800ffdc:	4631      	mov	r1, r6
 800ffde:	4628      	mov	r0, r5
 800ffe0:	f002 f95c 	bl	801229c <__ratio>
 800ffe4:	ec59 8b10 	vmov	r8, r9, d0
 800ffe8:	ee10 0a10 	vmov	r0, s0
 800ffec:	2200      	movs	r2, #0
 800ffee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fff2:	4649      	mov	r1, r9
 800fff4:	f7f0 fd8c 	bl	8000b10 <__aeabi_dcmple>
 800fff8:	2800      	cmp	r0, #0
 800fffa:	d07c      	beq.n	80100f6 <_strtod_l+0xa96>
 800fffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d04c      	beq.n	801009c <_strtod_l+0xa3c>
 8010002:	4b95      	ldr	r3, [pc, #596]	; (8010258 <_strtod_l+0xbf8>)
 8010004:	2200      	movs	r2, #0
 8010006:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801000a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010258 <_strtod_l+0xbf8>
 801000e:	f04f 0800 	mov.w	r8, #0
 8010012:	4b92      	ldr	r3, [pc, #584]	; (801025c <_strtod_l+0xbfc>)
 8010014:	403b      	ands	r3, r7
 8010016:	9311      	str	r3, [sp, #68]	; 0x44
 8010018:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801001a:	4b91      	ldr	r3, [pc, #580]	; (8010260 <_strtod_l+0xc00>)
 801001c:	429a      	cmp	r2, r3
 801001e:	f040 80b2 	bne.w	8010186 <_strtod_l+0xb26>
 8010022:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010026:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801002a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801002e:	ec4b ab10 	vmov	d0, sl, fp
 8010032:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8010036:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801003a:	f002 f857 	bl	80120ec <__ulp>
 801003e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010042:	ec53 2b10 	vmov	r2, r3, d0
 8010046:	f7f0 fae7 	bl	8000618 <__aeabi_dmul>
 801004a:	4652      	mov	r2, sl
 801004c:	465b      	mov	r3, fp
 801004e:	f7f0 f92d 	bl	80002ac <__adddf3>
 8010052:	460b      	mov	r3, r1
 8010054:	4981      	ldr	r1, [pc, #516]	; (801025c <_strtod_l+0xbfc>)
 8010056:	4a83      	ldr	r2, [pc, #524]	; (8010264 <_strtod_l+0xc04>)
 8010058:	4019      	ands	r1, r3
 801005a:	4291      	cmp	r1, r2
 801005c:	4682      	mov	sl, r0
 801005e:	d95e      	bls.n	801011e <_strtod_l+0xabe>
 8010060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010062:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010066:	4293      	cmp	r3, r2
 8010068:	d103      	bne.n	8010072 <_strtod_l+0xa12>
 801006a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801006c:	3301      	adds	r3, #1
 801006e:	f43f ad43 	beq.w	800faf8 <_strtod_l+0x498>
 8010072:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8010270 <_strtod_l+0xc10>
 8010076:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801007a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801007c:	4620      	mov	r0, r4
 801007e:	f001 fd09 	bl	8011a94 <_Bfree>
 8010082:	9907      	ldr	r1, [sp, #28]
 8010084:	4620      	mov	r0, r4
 8010086:	f001 fd05 	bl	8011a94 <_Bfree>
 801008a:	4631      	mov	r1, r6
 801008c:	4620      	mov	r0, r4
 801008e:	f001 fd01 	bl	8011a94 <_Bfree>
 8010092:	4629      	mov	r1, r5
 8010094:	4620      	mov	r0, r4
 8010096:	f001 fcfd 	bl	8011a94 <_Bfree>
 801009a:	e613      	b.n	800fcc4 <_strtod_l+0x664>
 801009c:	f1ba 0f00 	cmp.w	sl, #0
 80100a0:	d11b      	bne.n	80100da <_strtod_l+0xa7a>
 80100a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80100a6:	b9f3      	cbnz	r3, 80100e6 <_strtod_l+0xa86>
 80100a8:	4b6b      	ldr	r3, [pc, #428]	; (8010258 <_strtod_l+0xbf8>)
 80100aa:	2200      	movs	r2, #0
 80100ac:	4640      	mov	r0, r8
 80100ae:	4649      	mov	r1, r9
 80100b0:	f7f0 fd24 	bl	8000afc <__aeabi_dcmplt>
 80100b4:	b9d0      	cbnz	r0, 80100ec <_strtod_l+0xa8c>
 80100b6:	4640      	mov	r0, r8
 80100b8:	4649      	mov	r1, r9
 80100ba:	4b6b      	ldr	r3, [pc, #428]	; (8010268 <_strtod_l+0xc08>)
 80100bc:	2200      	movs	r2, #0
 80100be:	f7f0 faab 	bl	8000618 <__aeabi_dmul>
 80100c2:	4680      	mov	r8, r0
 80100c4:	4689      	mov	r9, r1
 80100c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80100ca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80100ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80100d0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80100d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80100d8:	e79b      	b.n	8010012 <_strtod_l+0x9b2>
 80100da:	f1ba 0f01 	cmp.w	sl, #1
 80100de:	d102      	bne.n	80100e6 <_strtod_l+0xa86>
 80100e0:	2f00      	cmp	r7, #0
 80100e2:	f43f ad7e 	beq.w	800fbe2 <_strtod_l+0x582>
 80100e6:	4b61      	ldr	r3, [pc, #388]	; (801026c <_strtod_l+0xc0c>)
 80100e8:	2200      	movs	r2, #0
 80100ea:	e78c      	b.n	8010006 <_strtod_l+0x9a6>
 80100ec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010268 <_strtod_l+0xc08>
 80100f0:	f04f 0800 	mov.w	r8, #0
 80100f4:	e7e7      	b.n	80100c6 <_strtod_l+0xa66>
 80100f6:	4b5c      	ldr	r3, [pc, #368]	; (8010268 <_strtod_l+0xc08>)
 80100f8:	4640      	mov	r0, r8
 80100fa:	4649      	mov	r1, r9
 80100fc:	2200      	movs	r2, #0
 80100fe:	f7f0 fa8b 	bl	8000618 <__aeabi_dmul>
 8010102:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010104:	4680      	mov	r8, r0
 8010106:	4689      	mov	r9, r1
 8010108:	b933      	cbnz	r3, 8010118 <_strtod_l+0xab8>
 801010a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801010e:	9012      	str	r0, [sp, #72]	; 0x48
 8010110:	9313      	str	r3, [sp, #76]	; 0x4c
 8010112:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8010116:	e7dd      	b.n	80100d4 <_strtod_l+0xa74>
 8010118:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801011c:	e7f9      	b.n	8010112 <_strtod_l+0xab2>
 801011e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010122:	9b04      	ldr	r3, [sp, #16]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d1a8      	bne.n	801007a <_strtod_l+0xa1a>
 8010128:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801012c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801012e:	0d1b      	lsrs	r3, r3, #20
 8010130:	051b      	lsls	r3, r3, #20
 8010132:	429a      	cmp	r2, r3
 8010134:	d1a1      	bne.n	801007a <_strtod_l+0xa1a>
 8010136:	4640      	mov	r0, r8
 8010138:	4649      	mov	r1, r9
 801013a:	f7f0 fdcd 	bl	8000cd8 <__aeabi_d2lz>
 801013e:	f7f0 fa3d 	bl	80005bc <__aeabi_l2d>
 8010142:	4602      	mov	r2, r0
 8010144:	460b      	mov	r3, r1
 8010146:	4640      	mov	r0, r8
 8010148:	4649      	mov	r1, r9
 801014a:	f7f0 f8ad 	bl	80002a8 <__aeabi_dsub>
 801014e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010150:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010154:	ea43 030a 	orr.w	r3, r3, sl
 8010158:	4313      	orrs	r3, r2
 801015a:	4680      	mov	r8, r0
 801015c:	4689      	mov	r9, r1
 801015e:	d053      	beq.n	8010208 <_strtod_l+0xba8>
 8010160:	a335      	add	r3, pc, #212	; (adr r3, 8010238 <_strtod_l+0xbd8>)
 8010162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010166:	f7f0 fcc9 	bl	8000afc <__aeabi_dcmplt>
 801016a:	2800      	cmp	r0, #0
 801016c:	f47f acce 	bne.w	800fb0c <_strtod_l+0x4ac>
 8010170:	a333      	add	r3, pc, #204	; (adr r3, 8010240 <_strtod_l+0xbe0>)
 8010172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010176:	4640      	mov	r0, r8
 8010178:	4649      	mov	r1, r9
 801017a:	f7f0 fcdd 	bl	8000b38 <__aeabi_dcmpgt>
 801017e:	2800      	cmp	r0, #0
 8010180:	f43f af7b 	beq.w	801007a <_strtod_l+0xa1a>
 8010184:	e4c2      	b.n	800fb0c <_strtod_l+0x4ac>
 8010186:	9b04      	ldr	r3, [sp, #16]
 8010188:	b333      	cbz	r3, 80101d8 <_strtod_l+0xb78>
 801018a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801018c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010190:	d822      	bhi.n	80101d8 <_strtod_l+0xb78>
 8010192:	a32d      	add	r3, pc, #180	; (adr r3, 8010248 <_strtod_l+0xbe8>)
 8010194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010198:	4640      	mov	r0, r8
 801019a:	4649      	mov	r1, r9
 801019c:	f7f0 fcb8 	bl	8000b10 <__aeabi_dcmple>
 80101a0:	b1a0      	cbz	r0, 80101cc <_strtod_l+0xb6c>
 80101a2:	4649      	mov	r1, r9
 80101a4:	4640      	mov	r0, r8
 80101a6:	f7f0 fd0f 	bl	8000bc8 <__aeabi_d2uiz>
 80101aa:	2801      	cmp	r0, #1
 80101ac:	bf38      	it	cc
 80101ae:	2001      	movcc	r0, #1
 80101b0:	f7f0 f9b8 	bl	8000524 <__aeabi_ui2d>
 80101b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80101b6:	4680      	mov	r8, r0
 80101b8:	4689      	mov	r9, r1
 80101ba:	bb13      	cbnz	r3, 8010202 <_strtod_l+0xba2>
 80101bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101c0:	9014      	str	r0, [sp, #80]	; 0x50
 80101c2:	9315      	str	r3, [sp, #84]	; 0x54
 80101c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80101c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80101cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80101d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80101d4:	1a9b      	subs	r3, r3, r2
 80101d6:	930d      	str	r3, [sp, #52]	; 0x34
 80101d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80101dc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80101e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80101e4:	f001 ff82 	bl	80120ec <__ulp>
 80101e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80101ec:	ec53 2b10 	vmov	r2, r3, d0
 80101f0:	f7f0 fa12 	bl	8000618 <__aeabi_dmul>
 80101f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80101f8:	f7f0 f858 	bl	80002ac <__adddf3>
 80101fc:	4682      	mov	sl, r0
 80101fe:	468b      	mov	fp, r1
 8010200:	e78f      	b.n	8010122 <_strtod_l+0xac2>
 8010202:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8010206:	e7dd      	b.n	80101c4 <_strtod_l+0xb64>
 8010208:	a311      	add	r3, pc, #68	; (adr r3, 8010250 <_strtod_l+0xbf0>)
 801020a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020e:	f7f0 fc75 	bl	8000afc <__aeabi_dcmplt>
 8010212:	e7b4      	b.n	801017e <_strtod_l+0xb1e>
 8010214:	2300      	movs	r3, #0
 8010216:	930e      	str	r3, [sp, #56]	; 0x38
 8010218:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801021a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801021c:	6013      	str	r3, [r2, #0]
 801021e:	f7ff ba65 	b.w	800f6ec <_strtod_l+0x8c>
 8010222:	2b65      	cmp	r3, #101	; 0x65
 8010224:	f43f ab5d 	beq.w	800f8e2 <_strtod_l+0x282>
 8010228:	2b45      	cmp	r3, #69	; 0x45
 801022a:	f43f ab5a 	beq.w	800f8e2 <_strtod_l+0x282>
 801022e:	2201      	movs	r2, #1
 8010230:	f7ff bb92 	b.w	800f958 <_strtod_l+0x2f8>
 8010234:	f3af 8000 	nop.w
 8010238:	94a03595 	.word	0x94a03595
 801023c:	3fdfffff 	.word	0x3fdfffff
 8010240:	35afe535 	.word	0x35afe535
 8010244:	3fe00000 	.word	0x3fe00000
 8010248:	ffc00000 	.word	0xffc00000
 801024c:	41dfffff 	.word	0x41dfffff
 8010250:	94a03595 	.word	0x94a03595
 8010254:	3fcfffff 	.word	0x3fcfffff
 8010258:	3ff00000 	.word	0x3ff00000
 801025c:	7ff00000 	.word	0x7ff00000
 8010260:	7fe00000 	.word	0x7fe00000
 8010264:	7c9fffff 	.word	0x7c9fffff
 8010268:	3fe00000 	.word	0x3fe00000
 801026c:	bff00000 	.word	0xbff00000
 8010270:	7fefffff 	.word	0x7fefffff

08010274 <_strtod_r>:
 8010274:	4b01      	ldr	r3, [pc, #4]	; (801027c <_strtod_r+0x8>)
 8010276:	f7ff b9f3 	b.w	800f660 <_strtod_l>
 801027a:	bf00      	nop
 801027c:	20000200 	.word	0x20000200

08010280 <_strtol_l.isra.0>:
 8010280:	2b01      	cmp	r3, #1
 8010282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010286:	d001      	beq.n	801028c <_strtol_l.isra.0+0xc>
 8010288:	2b24      	cmp	r3, #36	; 0x24
 801028a:	d906      	bls.n	801029a <_strtol_l.isra.0+0x1a>
 801028c:	f7fe f898 	bl	800e3c0 <__errno>
 8010290:	2316      	movs	r3, #22
 8010292:	6003      	str	r3, [r0, #0]
 8010294:	2000      	movs	r0, #0
 8010296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801029a:	4f3a      	ldr	r7, [pc, #232]	; (8010384 <_strtol_l.isra.0+0x104>)
 801029c:	468e      	mov	lr, r1
 801029e:	4676      	mov	r6, lr
 80102a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80102a4:	5de5      	ldrb	r5, [r4, r7]
 80102a6:	f015 0508 	ands.w	r5, r5, #8
 80102aa:	d1f8      	bne.n	801029e <_strtol_l.isra.0+0x1e>
 80102ac:	2c2d      	cmp	r4, #45	; 0x2d
 80102ae:	d134      	bne.n	801031a <_strtol_l.isra.0+0x9a>
 80102b0:	f89e 4000 	ldrb.w	r4, [lr]
 80102b4:	f04f 0801 	mov.w	r8, #1
 80102b8:	f106 0e02 	add.w	lr, r6, #2
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d05c      	beq.n	801037a <_strtol_l.isra.0+0xfa>
 80102c0:	2b10      	cmp	r3, #16
 80102c2:	d10c      	bne.n	80102de <_strtol_l.isra.0+0x5e>
 80102c4:	2c30      	cmp	r4, #48	; 0x30
 80102c6:	d10a      	bne.n	80102de <_strtol_l.isra.0+0x5e>
 80102c8:	f89e 4000 	ldrb.w	r4, [lr]
 80102cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80102d0:	2c58      	cmp	r4, #88	; 0x58
 80102d2:	d14d      	bne.n	8010370 <_strtol_l.isra.0+0xf0>
 80102d4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80102d8:	2310      	movs	r3, #16
 80102da:	f10e 0e02 	add.w	lr, lr, #2
 80102de:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80102e2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80102e6:	2600      	movs	r6, #0
 80102e8:	fbbc f9f3 	udiv	r9, ip, r3
 80102ec:	4635      	mov	r5, r6
 80102ee:	fb03 ca19 	mls	sl, r3, r9, ip
 80102f2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80102f6:	2f09      	cmp	r7, #9
 80102f8:	d818      	bhi.n	801032c <_strtol_l.isra.0+0xac>
 80102fa:	463c      	mov	r4, r7
 80102fc:	42a3      	cmp	r3, r4
 80102fe:	dd24      	ble.n	801034a <_strtol_l.isra.0+0xca>
 8010300:	2e00      	cmp	r6, #0
 8010302:	db1f      	blt.n	8010344 <_strtol_l.isra.0+0xc4>
 8010304:	45a9      	cmp	r9, r5
 8010306:	d31d      	bcc.n	8010344 <_strtol_l.isra.0+0xc4>
 8010308:	d101      	bne.n	801030e <_strtol_l.isra.0+0x8e>
 801030a:	45a2      	cmp	sl, r4
 801030c:	db1a      	blt.n	8010344 <_strtol_l.isra.0+0xc4>
 801030e:	fb05 4503 	mla	r5, r5, r3, r4
 8010312:	2601      	movs	r6, #1
 8010314:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010318:	e7eb      	b.n	80102f2 <_strtol_l.isra.0+0x72>
 801031a:	2c2b      	cmp	r4, #43	; 0x2b
 801031c:	bf08      	it	eq
 801031e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8010322:	46a8      	mov	r8, r5
 8010324:	bf08      	it	eq
 8010326:	f106 0e02 	addeq.w	lr, r6, #2
 801032a:	e7c7      	b.n	80102bc <_strtol_l.isra.0+0x3c>
 801032c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8010330:	2f19      	cmp	r7, #25
 8010332:	d801      	bhi.n	8010338 <_strtol_l.isra.0+0xb8>
 8010334:	3c37      	subs	r4, #55	; 0x37
 8010336:	e7e1      	b.n	80102fc <_strtol_l.isra.0+0x7c>
 8010338:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801033c:	2f19      	cmp	r7, #25
 801033e:	d804      	bhi.n	801034a <_strtol_l.isra.0+0xca>
 8010340:	3c57      	subs	r4, #87	; 0x57
 8010342:	e7db      	b.n	80102fc <_strtol_l.isra.0+0x7c>
 8010344:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8010348:	e7e4      	b.n	8010314 <_strtol_l.isra.0+0x94>
 801034a:	2e00      	cmp	r6, #0
 801034c:	da05      	bge.n	801035a <_strtol_l.isra.0+0xda>
 801034e:	2322      	movs	r3, #34	; 0x22
 8010350:	6003      	str	r3, [r0, #0]
 8010352:	4665      	mov	r5, ip
 8010354:	b942      	cbnz	r2, 8010368 <_strtol_l.isra.0+0xe8>
 8010356:	4628      	mov	r0, r5
 8010358:	e79d      	b.n	8010296 <_strtol_l.isra.0+0x16>
 801035a:	f1b8 0f00 	cmp.w	r8, #0
 801035e:	d000      	beq.n	8010362 <_strtol_l.isra.0+0xe2>
 8010360:	426d      	negs	r5, r5
 8010362:	2a00      	cmp	r2, #0
 8010364:	d0f7      	beq.n	8010356 <_strtol_l.isra.0+0xd6>
 8010366:	b10e      	cbz	r6, 801036c <_strtol_l.isra.0+0xec>
 8010368:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801036c:	6011      	str	r1, [r2, #0]
 801036e:	e7f2      	b.n	8010356 <_strtol_l.isra.0+0xd6>
 8010370:	2430      	movs	r4, #48	; 0x30
 8010372:	2b00      	cmp	r3, #0
 8010374:	d1b3      	bne.n	80102de <_strtol_l.isra.0+0x5e>
 8010376:	2308      	movs	r3, #8
 8010378:	e7b1      	b.n	80102de <_strtol_l.isra.0+0x5e>
 801037a:	2c30      	cmp	r4, #48	; 0x30
 801037c:	d0a4      	beq.n	80102c8 <_strtol_l.isra.0+0x48>
 801037e:	230a      	movs	r3, #10
 8010380:	e7ad      	b.n	80102de <_strtol_l.isra.0+0x5e>
 8010382:	bf00      	nop
 8010384:	08013811 	.word	0x08013811

08010388 <_strtol_r>:
 8010388:	f7ff bf7a 	b.w	8010280 <_strtol_l.isra.0>

0801038c <_vsniprintf_r>:
 801038c:	b530      	push	{r4, r5, lr}
 801038e:	1e14      	subs	r4, r2, #0
 8010390:	4605      	mov	r5, r0
 8010392:	b09b      	sub	sp, #108	; 0x6c
 8010394:	4618      	mov	r0, r3
 8010396:	da05      	bge.n	80103a4 <_vsniprintf_r+0x18>
 8010398:	238b      	movs	r3, #139	; 0x8b
 801039a:	602b      	str	r3, [r5, #0]
 801039c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103a0:	b01b      	add	sp, #108	; 0x6c
 80103a2:	bd30      	pop	{r4, r5, pc}
 80103a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80103a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80103ac:	bf14      	ite	ne
 80103ae:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80103b2:	4623      	moveq	r3, r4
 80103b4:	9302      	str	r3, [sp, #8]
 80103b6:	9305      	str	r3, [sp, #20]
 80103b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80103bc:	9100      	str	r1, [sp, #0]
 80103be:	9104      	str	r1, [sp, #16]
 80103c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80103c4:	4602      	mov	r2, r0
 80103c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80103c8:	4669      	mov	r1, sp
 80103ca:	4628      	mov	r0, r5
 80103cc:	f002 f898 	bl	8012500 <_svfiprintf_r>
 80103d0:	1c43      	adds	r3, r0, #1
 80103d2:	bfbc      	itt	lt
 80103d4:	238b      	movlt	r3, #139	; 0x8b
 80103d6:	602b      	strlt	r3, [r5, #0]
 80103d8:	2c00      	cmp	r4, #0
 80103da:	d0e1      	beq.n	80103a0 <_vsniprintf_r+0x14>
 80103dc:	9b00      	ldr	r3, [sp, #0]
 80103de:	2200      	movs	r2, #0
 80103e0:	701a      	strb	r2, [r3, #0]
 80103e2:	e7dd      	b.n	80103a0 <_vsniprintf_r+0x14>

080103e4 <vsniprintf>:
 80103e4:	b507      	push	{r0, r1, r2, lr}
 80103e6:	9300      	str	r3, [sp, #0]
 80103e8:	4613      	mov	r3, r2
 80103ea:	460a      	mov	r2, r1
 80103ec:	4601      	mov	r1, r0
 80103ee:	4803      	ldr	r0, [pc, #12]	; (80103fc <vsniprintf+0x18>)
 80103f0:	6800      	ldr	r0, [r0, #0]
 80103f2:	f7ff ffcb 	bl	801038c <_vsniprintf_r>
 80103f6:	b003      	add	sp, #12
 80103f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80103fc:	20000198 	.word	0x20000198

08010400 <_write_r>:
 8010400:	b538      	push	{r3, r4, r5, lr}
 8010402:	4d07      	ldr	r5, [pc, #28]	; (8010420 <_write_r+0x20>)
 8010404:	4604      	mov	r4, r0
 8010406:	4608      	mov	r0, r1
 8010408:	4611      	mov	r1, r2
 801040a:	2200      	movs	r2, #0
 801040c:	602a      	str	r2, [r5, #0]
 801040e:	461a      	mov	r2, r3
 8010410:	f7f2 fc1d 	bl	8002c4e <_write>
 8010414:	1c43      	adds	r3, r0, #1
 8010416:	d102      	bne.n	801041e <_write_r+0x1e>
 8010418:	682b      	ldr	r3, [r5, #0]
 801041a:	b103      	cbz	r3, 801041e <_write_r+0x1e>
 801041c:	6023      	str	r3, [r4, #0]
 801041e:	bd38      	pop	{r3, r4, r5, pc}
 8010420:	200071a4 	.word	0x200071a4

08010424 <_close_r>:
 8010424:	b538      	push	{r3, r4, r5, lr}
 8010426:	4d06      	ldr	r5, [pc, #24]	; (8010440 <_close_r+0x1c>)
 8010428:	2300      	movs	r3, #0
 801042a:	4604      	mov	r4, r0
 801042c:	4608      	mov	r0, r1
 801042e:	602b      	str	r3, [r5, #0]
 8010430:	f7f2 fc29 	bl	8002c86 <_close>
 8010434:	1c43      	adds	r3, r0, #1
 8010436:	d102      	bne.n	801043e <_close_r+0x1a>
 8010438:	682b      	ldr	r3, [r5, #0]
 801043a:	b103      	cbz	r3, 801043e <_close_r+0x1a>
 801043c:	6023      	str	r3, [r4, #0]
 801043e:	bd38      	pop	{r3, r4, r5, pc}
 8010440:	200071a4 	.word	0x200071a4

08010444 <quorem>:
 8010444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010448:	6903      	ldr	r3, [r0, #16]
 801044a:	690c      	ldr	r4, [r1, #16]
 801044c:	42a3      	cmp	r3, r4
 801044e:	4607      	mov	r7, r0
 8010450:	f2c0 8081 	blt.w	8010556 <quorem+0x112>
 8010454:	3c01      	subs	r4, #1
 8010456:	f101 0814 	add.w	r8, r1, #20
 801045a:	f100 0514 	add.w	r5, r0, #20
 801045e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010462:	9301      	str	r3, [sp, #4]
 8010464:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010468:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801046c:	3301      	adds	r3, #1
 801046e:	429a      	cmp	r2, r3
 8010470:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010474:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010478:	fbb2 f6f3 	udiv	r6, r2, r3
 801047c:	d331      	bcc.n	80104e2 <quorem+0x9e>
 801047e:	f04f 0e00 	mov.w	lr, #0
 8010482:	4640      	mov	r0, r8
 8010484:	46ac      	mov	ip, r5
 8010486:	46f2      	mov	sl, lr
 8010488:	f850 2b04 	ldr.w	r2, [r0], #4
 801048c:	b293      	uxth	r3, r2
 801048e:	fb06 e303 	mla	r3, r6, r3, lr
 8010492:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010496:	b29b      	uxth	r3, r3
 8010498:	ebaa 0303 	sub.w	r3, sl, r3
 801049c:	0c12      	lsrs	r2, r2, #16
 801049e:	f8dc a000 	ldr.w	sl, [ip]
 80104a2:	fb06 e202 	mla	r2, r6, r2, lr
 80104a6:	fa13 f38a 	uxtah	r3, r3, sl
 80104aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80104ae:	fa1f fa82 	uxth.w	sl, r2
 80104b2:	f8dc 2000 	ldr.w	r2, [ip]
 80104b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80104ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80104be:	b29b      	uxth	r3, r3
 80104c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104c4:	4581      	cmp	r9, r0
 80104c6:	f84c 3b04 	str.w	r3, [ip], #4
 80104ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80104ce:	d2db      	bcs.n	8010488 <quorem+0x44>
 80104d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80104d4:	b92b      	cbnz	r3, 80104e2 <quorem+0x9e>
 80104d6:	9b01      	ldr	r3, [sp, #4]
 80104d8:	3b04      	subs	r3, #4
 80104da:	429d      	cmp	r5, r3
 80104dc:	461a      	mov	r2, r3
 80104de:	d32e      	bcc.n	801053e <quorem+0xfa>
 80104e0:	613c      	str	r4, [r7, #16]
 80104e2:	4638      	mov	r0, r7
 80104e4:	f001 fd5e 	bl	8011fa4 <__mcmp>
 80104e8:	2800      	cmp	r0, #0
 80104ea:	db24      	blt.n	8010536 <quorem+0xf2>
 80104ec:	3601      	adds	r6, #1
 80104ee:	4628      	mov	r0, r5
 80104f0:	f04f 0c00 	mov.w	ip, #0
 80104f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80104f8:	f8d0 e000 	ldr.w	lr, [r0]
 80104fc:	b293      	uxth	r3, r2
 80104fe:	ebac 0303 	sub.w	r3, ip, r3
 8010502:	0c12      	lsrs	r2, r2, #16
 8010504:	fa13 f38e 	uxtah	r3, r3, lr
 8010508:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801050c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010510:	b29b      	uxth	r3, r3
 8010512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010516:	45c1      	cmp	r9, r8
 8010518:	f840 3b04 	str.w	r3, [r0], #4
 801051c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010520:	d2e8      	bcs.n	80104f4 <quorem+0xb0>
 8010522:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010526:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801052a:	b922      	cbnz	r2, 8010536 <quorem+0xf2>
 801052c:	3b04      	subs	r3, #4
 801052e:	429d      	cmp	r5, r3
 8010530:	461a      	mov	r2, r3
 8010532:	d30a      	bcc.n	801054a <quorem+0x106>
 8010534:	613c      	str	r4, [r7, #16]
 8010536:	4630      	mov	r0, r6
 8010538:	b003      	add	sp, #12
 801053a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801053e:	6812      	ldr	r2, [r2, #0]
 8010540:	3b04      	subs	r3, #4
 8010542:	2a00      	cmp	r2, #0
 8010544:	d1cc      	bne.n	80104e0 <quorem+0x9c>
 8010546:	3c01      	subs	r4, #1
 8010548:	e7c7      	b.n	80104da <quorem+0x96>
 801054a:	6812      	ldr	r2, [r2, #0]
 801054c:	3b04      	subs	r3, #4
 801054e:	2a00      	cmp	r2, #0
 8010550:	d1f0      	bne.n	8010534 <quorem+0xf0>
 8010552:	3c01      	subs	r4, #1
 8010554:	e7eb      	b.n	801052e <quorem+0xea>
 8010556:	2000      	movs	r0, #0
 8010558:	e7ee      	b.n	8010538 <quorem+0xf4>
 801055a:	0000      	movs	r0, r0
 801055c:	0000      	movs	r0, r0
	...

08010560 <_dtoa_r>:
 8010560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010564:	ed2d 8b02 	vpush	{d8}
 8010568:	ec57 6b10 	vmov	r6, r7, d0
 801056c:	b095      	sub	sp, #84	; 0x54
 801056e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010570:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010574:	9105      	str	r1, [sp, #20]
 8010576:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801057a:	4604      	mov	r4, r0
 801057c:	9209      	str	r2, [sp, #36]	; 0x24
 801057e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010580:	b975      	cbnz	r5, 80105a0 <_dtoa_r+0x40>
 8010582:	2010      	movs	r0, #16
 8010584:	f001 fa20 	bl	80119c8 <malloc>
 8010588:	4602      	mov	r2, r0
 801058a:	6260      	str	r0, [r4, #36]	; 0x24
 801058c:	b920      	cbnz	r0, 8010598 <_dtoa_r+0x38>
 801058e:	4bb2      	ldr	r3, [pc, #712]	; (8010858 <_dtoa_r+0x2f8>)
 8010590:	21ea      	movs	r1, #234	; 0xea
 8010592:	48b2      	ldr	r0, [pc, #712]	; (801085c <_dtoa_r+0x2fc>)
 8010594:	f002 fcec 	bl	8012f70 <__assert_func>
 8010598:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801059c:	6005      	str	r5, [r0, #0]
 801059e:	60c5      	str	r5, [r0, #12]
 80105a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105a2:	6819      	ldr	r1, [r3, #0]
 80105a4:	b151      	cbz	r1, 80105bc <_dtoa_r+0x5c>
 80105a6:	685a      	ldr	r2, [r3, #4]
 80105a8:	604a      	str	r2, [r1, #4]
 80105aa:	2301      	movs	r3, #1
 80105ac:	4093      	lsls	r3, r2
 80105ae:	608b      	str	r3, [r1, #8]
 80105b0:	4620      	mov	r0, r4
 80105b2:	f001 fa6f 	bl	8011a94 <_Bfree>
 80105b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105b8:	2200      	movs	r2, #0
 80105ba:	601a      	str	r2, [r3, #0]
 80105bc:	1e3b      	subs	r3, r7, #0
 80105be:	bfb9      	ittee	lt
 80105c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80105c4:	9303      	strlt	r3, [sp, #12]
 80105c6:	2300      	movge	r3, #0
 80105c8:	f8c8 3000 	strge.w	r3, [r8]
 80105cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80105d0:	4ba3      	ldr	r3, [pc, #652]	; (8010860 <_dtoa_r+0x300>)
 80105d2:	bfbc      	itt	lt
 80105d4:	2201      	movlt	r2, #1
 80105d6:	f8c8 2000 	strlt.w	r2, [r8]
 80105da:	ea33 0309 	bics.w	r3, r3, r9
 80105de:	d11b      	bne.n	8010618 <_dtoa_r+0xb8>
 80105e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80105e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80105e6:	6013      	str	r3, [r2, #0]
 80105e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105ec:	4333      	orrs	r3, r6
 80105ee:	f000 857a 	beq.w	80110e6 <_dtoa_r+0xb86>
 80105f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105f4:	b963      	cbnz	r3, 8010610 <_dtoa_r+0xb0>
 80105f6:	4b9b      	ldr	r3, [pc, #620]	; (8010864 <_dtoa_r+0x304>)
 80105f8:	e024      	b.n	8010644 <_dtoa_r+0xe4>
 80105fa:	4b9b      	ldr	r3, [pc, #620]	; (8010868 <_dtoa_r+0x308>)
 80105fc:	9300      	str	r3, [sp, #0]
 80105fe:	3308      	adds	r3, #8
 8010600:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010602:	6013      	str	r3, [r2, #0]
 8010604:	9800      	ldr	r0, [sp, #0]
 8010606:	b015      	add	sp, #84	; 0x54
 8010608:	ecbd 8b02 	vpop	{d8}
 801060c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010610:	4b94      	ldr	r3, [pc, #592]	; (8010864 <_dtoa_r+0x304>)
 8010612:	9300      	str	r3, [sp, #0]
 8010614:	3303      	adds	r3, #3
 8010616:	e7f3      	b.n	8010600 <_dtoa_r+0xa0>
 8010618:	ed9d 7b02 	vldr	d7, [sp, #8]
 801061c:	2200      	movs	r2, #0
 801061e:	ec51 0b17 	vmov	r0, r1, d7
 8010622:	2300      	movs	r3, #0
 8010624:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010628:	f7f0 fa5e 	bl	8000ae8 <__aeabi_dcmpeq>
 801062c:	4680      	mov	r8, r0
 801062e:	b158      	cbz	r0, 8010648 <_dtoa_r+0xe8>
 8010630:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010632:	2301      	movs	r3, #1
 8010634:	6013      	str	r3, [r2, #0]
 8010636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010638:	2b00      	cmp	r3, #0
 801063a:	f000 8551 	beq.w	80110e0 <_dtoa_r+0xb80>
 801063e:	488b      	ldr	r0, [pc, #556]	; (801086c <_dtoa_r+0x30c>)
 8010640:	6018      	str	r0, [r3, #0]
 8010642:	1e43      	subs	r3, r0, #1
 8010644:	9300      	str	r3, [sp, #0]
 8010646:	e7dd      	b.n	8010604 <_dtoa_r+0xa4>
 8010648:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801064c:	aa12      	add	r2, sp, #72	; 0x48
 801064e:	a913      	add	r1, sp, #76	; 0x4c
 8010650:	4620      	mov	r0, r4
 8010652:	f001 fdc7 	bl	80121e4 <__d2b>
 8010656:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801065a:	4683      	mov	fp, r0
 801065c:	2d00      	cmp	r5, #0
 801065e:	d07c      	beq.n	801075a <_dtoa_r+0x1fa>
 8010660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010662:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801066a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801066e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010672:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010676:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801067a:	4b7d      	ldr	r3, [pc, #500]	; (8010870 <_dtoa_r+0x310>)
 801067c:	2200      	movs	r2, #0
 801067e:	4630      	mov	r0, r6
 8010680:	4639      	mov	r1, r7
 8010682:	f7ef fe11 	bl	80002a8 <__aeabi_dsub>
 8010686:	a36e      	add	r3, pc, #440	; (adr r3, 8010840 <_dtoa_r+0x2e0>)
 8010688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068c:	f7ef ffc4 	bl	8000618 <__aeabi_dmul>
 8010690:	a36d      	add	r3, pc, #436	; (adr r3, 8010848 <_dtoa_r+0x2e8>)
 8010692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010696:	f7ef fe09 	bl	80002ac <__adddf3>
 801069a:	4606      	mov	r6, r0
 801069c:	4628      	mov	r0, r5
 801069e:	460f      	mov	r7, r1
 80106a0:	f7ef ff50 	bl	8000544 <__aeabi_i2d>
 80106a4:	a36a      	add	r3, pc, #424	; (adr r3, 8010850 <_dtoa_r+0x2f0>)
 80106a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106aa:	f7ef ffb5 	bl	8000618 <__aeabi_dmul>
 80106ae:	4602      	mov	r2, r0
 80106b0:	460b      	mov	r3, r1
 80106b2:	4630      	mov	r0, r6
 80106b4:	4639      	mov	r1, r7
 80106b6:	f7ef fdf9 	bl	80002ac <__adddf3>
 80106ba:	4606      	mov	r6, r0
 80106bc:	460f      	mov	r7, r1
 80106be:	f7f0 fa5b 	bl	8000b78 <__aeabi_d2iz>
 80106c2:	2200      	movs	r2, #0
 80106c4:	4682      	mov	sl, r0
 80106c6:	2300      	movs	r3, #0
 80106c8:	4630      	mov	r0, r6
 80106ca:	4639      	mov	r1, r7
 80106cc:	f7f0 fa16 	bl	8000afc <__aeabi_dcmplt>
 80106d0:	b148      	cbz	r0, 80106e6 <_dtoa_r+0x186>
 80106d2:	4650      	mov	r0, sl
 80106d4:	f7ef ff36 	bl	8000544 <__aeabi_i2d>
 80106d8:	4632      	mov	r2, r6
 80106da:	463b      	mov	r3, r7
 80106dc:	f7f0 fa04 	bl	8000ae8 <__aeabi_dcmpeq>
 80106e0:	b908      	cbnz	r0, 80106e6 <_dtoa_r+0x186>
 80106e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80106e6:	f1ba 0f16 	cmp.w	sl, #22
 80106ea:	d854      	bhi.n	8010796 <_dtoa_r+0x236>
 80106ec:	4b61      	ldr	r3, [pc, #388]	; (8010874 <_dtoa_r+0x314>)
 80106ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80106f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80106fa:	f7f0 f9ff 	bl	8000afc <__aeabi_dcmplt>
 80106fe:	2800      	cmp	r0, #0
 8010700:	d04b      	beq.n	801079a <_dtoa_r+0x23a>
 8010702:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010706:	2300      	movs	r3, #0
 8010708:	930e      	str	r3, [sp, #56]	; 0x38
 801070a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801070c:	1b5d      	subs	r5, r3, r5
 801070e:	1e6b      	subs	r3, r5, #1
 8010710:	9304      	str	r3, [sp, #16]
 8010712:	bf43      	ittte	mi
 8010714:	2300      	movmi	r3, #0
 8010716:	f1c5 0801 	rsbmi	r8, r5, #1
 801071a:	9304      	strmi	r3, [sp, #16]
 801071c:	f04f 0800 	movpl.w	r8, #0
 8010720:	f1ba 0f00 	cmp.w	sl, #0
 8010724:	db3b      	blt.n	801079e <_dtoa_r+0x23e>
 8010726:	9b04      	ldr	r3, [sp, #16]
 8010728:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801072c:	4453      	add	r3, sl
 801072e:	9304      	str	r3, [sp, #16]
 8010730:	2300      	movs	r3, #0
 8010732:	9306      	str	r3, [sp, #24]
 8010734:	9b05      	ldr	r3, [sp, #20]
 8010736:	2b09      	cmp	r3, #9
 8010738:	d869      	bhi.n	801080e <_dtoa_r+0x2ae>
 801073a:	2b05      	cmp	r3, #5
 801073c:	bfc4      	itt	gt
 801073e:	3b04      	subgt	r3, #4
 8010740:	9305      	strgt	r3, [sp, #20]
 8010742:	9b05      	ldr	r3, [sp, #20]
 8010744:	f1a3 0302 	sub.w	r3, r3, #2
 8010748:	bfcc      	ite	gt
 801074a:	2500      	movgt	r5, #0
 801074c:	2501      	movle	r5, #1
 801074e:	2b03      	cmp	r3, #3
 8010750:	d869      	bhi.n	8010826 <_dtoa_r+0x2c6>
 8010752:	e8df f003 	tbb	[pc, r3]
 8010756:	4e2c      	.short	0x4e2c
 8010758:	5a4c      	.short	0x5a4c
 801075a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801075e:	441d      	add	r5, r3
 8010760:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010764:	2b20      	cmp	r3, #32
 8010766:	bfc1      	itttt	gt
 8010768:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801076c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010770:	fa09 f303 	lslgt.w	r3, r9, r3
 8010774:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010778:	bfda      	itte	le
 801077a:	f1c3 0320 	rsble	r3, r3, #32
 801077e:	fa06 f003 	lslle.w	r0, r6, r3
 8010782:	4318      	orrgt	r0, r3
 8010784:	f7ef fece 	bl	8000524 <__aeabi_ui2d>
 8010788:	2301      	movs	r3, #1
 801078a:	4606      	mov	r6, r0
 801078c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010790:	3d01      	subs	r5, #1
 8010792:	9310      	str	r3, [sp, #64]	; 0x40
 8010794:	e771      	b.n	801067a <_dtoa_r+0x11a>
 8010796:	2301      	movs	r3, #1
 8010798:	e7b6      	b.n	8010708 <_dtoa_r+0x1a8>
 801079a:	900e      	str	r0, [sp, #56]	; 0x38
 801079c:	e7b5      	b.n	801070a <_dtoa_r+0x1aa>
 801079e:	f1ca 0300 	rsb	r3, sl, #0
 80107a2:	9306      	str	r3, [sp, #24]
 80107a4:	2300      	movs	r3, #0
 80107a6:	eba8 080a 	sub.w	r8, r8, sl
 80107aa:	930d      	str	r3, [sp, #52]	; 0x34
 80107ac:	e7c2      	b.n	8010734 <_dtoa_r+0x1d4>
 80107ae:	2300      	movs	r3, #0
 80107b0:	9308      	str	r3, [sp, #32]
 80107b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	dc39      	bgt.n	801082c <_dtoa_r+0x2cc>
 80107b8:	f04f 0901 	mov.w	r9, #1
 80107bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80107c0:	464b      	mov	r3, r9
 80107c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80107c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80107c8:	2200      	movs	r2, #0
 80107ca:	6042      	str	r2, [r0, #4]
 80107cc:	2204      	movs	r2, #4
 80107ce:	f102 0614 	add.w	r6, r2, #20
 80107d2:	429e      	cmp	r6, r3
 80107d4:	6841      	ldr	r1, [r0, #4]
 80107d6:	d92f      	bls.n	8010838 <_dtoa_r+0x2d8>
 80107d8:	4620      	mov	r0, r4
 80107da:	f001 f91b 	bl	8011a14 <_Balloc>
 80107de:	9000      	str	r0, [sp, #0]
 80107e0:	2800      	cmp	r0, #0
 80107e2:	d14b      	bne.n	801087c <_dtoa_r+0x31c>
 80107e4:	4b24      	ldr	r3, [pc, #144]	; (8010878 <_dtoa_r+0x318>)
 80107e6:	4602      	mov	r2, r0
 80107e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80107ec:	e6d1      	b.n	8010592 <_dtoa_r+0x32>
 80107ee:	2301      	movs	r3, #1
 80107f0:	e7de      	b.n	80107b0 <_dtoa_r+0x250>
 80107f2:	2300      	movs	r3, #0
 80107f4:	9308      	str	r3, [sp, #32]
 80107f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107f8:	eb0a 0903 	add.w	r9, sl, r3
 80107fc:	f109 0301 	add.w	r3, r9, #1
 8010800:	2b01      	cmp	r3, #1
 8010802:	9301      	str	r3, [sp, #4]
 8010804:	bfb8      	it	lt
 8010806:	2301      	movlt	r3, #1
 8010808:	e7dd      	b.n	80107c6 <_dtoa_r+0x266>
 801080a:	2301      	movs	r3, #1
 801080c:	e7f2      	b.n	80107f4 <_dtoa_r+0x294>
 801080e:	2501      	movs	r5, #1
 8010810:	2300      	movs	r3, #0
 8010812:	9305      	str	r3, [sp, #20]
 8010814:	9508      	str	r5, [sp, #32]
 8010816:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801081a:	2200      	movs	r2, #0
 801081c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010820:	2312      	movs	r3, #18
 8010822:	9209      	str	r2, [sp, #36]	; 0x24
 8010824:	e7cf      	b.n	80107c6 <_dtoa_r+0x266>
 8010826:	2301      	movs	r3, #1
 8010828:	9308      	str	r3, [sp, #32]
 801082a:	e7f4      	b.n	8010816 <_dtoa_r+0x2b6>
 801082c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010830:	f8cd 9004 	str.w	r9, [sp, #4]
 8010834:	464b      	mov	r3, r9
 8010836:	e7c6      	b.n	80107c6 <_dtoa_r+0x266>
 8010838:	3101      	adds	r1, #1
 801083a:	6041      	str	r1, [r0, #4]
 801083c:	0052      	lsls	r2, r2, #1
 801083e:	e7c6      	b.n	80107ce <_dtoa_r+0x26e>
 8010840:	636f4361 	.word	0x636f4361
 8010844:	3fd287a7 	.word	0x3fd287a7
 8010848:	8b60c8b3 	.word	0x8b60c8b3
 801084c:	3fc68a28 	.word	0x3fc68a28
 8010850:	509f79fb 	.word	0x509f79fb
 8010854:	3fd34413 	.word	0x3fd34413
 8010858:	08013a0d 	.word	0x08013a0d
 801085c:	08013a24 	.word	0x08013a24
 8010860:	7ff00000 	.word	0x7ff00000
 8010864:	08013a09 	.word	0x08013a09
 8010868:	08013a00 	.word	0x08013a00
 801086c:	08013c8a 	.word	0x08013c8a
 8010870:	3ff80000 	.word	0x3ff80000
 8010874:	08013ba0 	.word	0x08013ba0
 8010878:	08013a83 	.word	0x08013a83
 801087c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801087e:	9a00      	ldr	r2, [sp, #0]
 8010880:	601a      	str	r2, [r3, #0]
 8010882:	9b01      	ldr	r3, [sp, #4]
 8010884:	2b0e      	cmp	r3, #14
 8010886:	f200 80ad 	bhi.w	80109e4 <_dtoa_r+0x484>
 801088a:	2d00      	cmp	r5, #0
 801088c:	f000 80aa 	beq.w	80109e4 <_dtoa_r+0x484>
 8010890:	f1ba 0f00 	cmp.w	sl, #0
 8010894:	dd36      	ble.n	8010904 <_dtoa_r+0x3a4>
 8010896:	4ac3      	ldr	r2, [pc, #780]	; (8010ba4 <_dtoa_r+0x644>)
 8010898:	f00a 030f 	and.w	r3, sl, #15
 801089c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80108a0:	ed93 7b00 	vldr	d7, [r3]
 80108a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80108a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80108ac:	eeb0 8a47 	vmov.f32	s16, s14
 80108b0:	eef0 8a67 	vmov.f32	s17, s15
 80108b4:	d016      	beq.n	80108e4 <_dtoa_r+0x384>
 80108b6:	4bbc      	ldr	r3, [pc, #752]	; (8010ba8 <_dtoa_r+0x648>)
 80108b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80108bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80108c0:	f7ef ffd4 	bl	800086c <__aeabi_ddiv>
 80108c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108c8:	f007 070f 	and.w	r7, r7, #15
 80108cc:	2503      	movs	r5, #3
 80108ce:	4eb6      	ldr	r6, [pc, #728]	; (8010ba8 <_dtoa_r+0x648>)
 80108d0:	b957      	cbnz	r7, 80108e8 <_dtoa_r+0x388>
 80108d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108d6:	ec53 2b18 	vmov	r2, r3, d8
 80108da:	f7ef ffc7 	bl	800086c <__aeabi_ddiv>
 80108de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108e2:	e029      	b.n	8010938 <_dtoa_r+0x3d8>
 80108e4:	2502      	movs	r5, #2
 80108e6:	e7f2      	b.n	80108ce <_dtoa_r+0x36e>
 80108e8:	07f9      	lsls	r1, r7, #31
 80108ea:	d508      	bpl.n	80108fe <_dtoa_r+0x39e>
 80108ec:	ec51 0b18 	vmov	r0, r1, d8
 80108f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80108f4:	f7ef fe90 	bl	8000618 <__aeabi_dmul>
 80108f8:	ec41 0b18 	vmov	d8, r0, r1
 80108fc:	3501      	adds	r5, #1
 80108fe:	107f      	asrs	r7, r7, #1
 8010900:	3608      	adds	r6, #8
 8010902:	e7e5      	b.n	80108d0 <_dtoa_r+0x370>
 8010904:	f000 80a6 	beq.w	8010a54 <_dtoa_r+0x4f4>
 8010908:	f1ca 0600 	rsb	r6, sl, #0
 801090c:	4ba5      	ldr	r3, [pc, #660]	; (8010ba4 <_dtoa_r+0x644>)
 801090e:	4fa6      	ldr	r7, [pc, #664]	; (8010ba8 <_dtoa_r+0x648>)
 8010910:	f006 020f 	and.w	r2, r6, #15
 8010914:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010920:	f7ef fe7a 	bl	8000618 <__aeabi_dmul>
 8010924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010928:	1136      	asrs	r6, r6, #4
 801092a:	2300      	movs	r3, #0
 801092c:	2502      	movs	r5, #2
 801092e:	2e00      	cmp	r6, #0
 8010930:	f040 8085 	bne.w	8010a3e <_dtoa_r+0x4de>
 8010934:	2b00      	cmp	r3, #0
 8010936:	d1d2      	bne.n	80108de <_dtoa_r+0x37e>
 8010938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801093a:	2b00      	cmp	r3, #0
 801093c:	f000 808c 	beq.w	8010a58 <_dtoa_r+0x4f8>
 8010940:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010944:	4b99      	ldr	r3, [pc, #612]	; (8010bac <_dtoa_r+0x64c>)
 8010946:	2200      	movs	r2, #0
 8010948:	4630      	mov	r0, r6
 801094a:	4639      	mov	r1, r7
 801094c:	f7f0 f8d6 	bl	8000afc <__aeabi_dcmplt>
 8010950:	2800      	cmp	r0, #0
 8010952:	f000 8081 	beq.w	8010a58 <_dtoa_r+0x4f8>
 8010956:	9b01      	ldr	r3, [sp, #4]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d07d      	beq.n	8010a58 <_dtoa_r+0x4f8>
 801095c:	f1b9 0f00 	cmp.w	r9, #0
 8010960:	dd3c      	ble.n	80109dc <_dtoa_r+0x47c>
 8010962:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8010966:	9307      	str	r3, [sp, #28]
 8010968:	2200      	movs	r2, #0
 801096a:	4b91      	ldr	r3, [pc, #580]	; (8010bb0 <_dtoa_r+0x650>)
 801096c:	4630      	mov	r0, r6
 801096e:	4639      	mov	r1, r7
 8010970:	f7ef fe52 	bl	8000618 <__aeabi_dmul>
 8010974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010978:	3501      	adds	r5, #1
 801097a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801097e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010982:	4628      	mov	r0, r5
 8010984:	f7ef fdde 	bl	8000544 <__aeabi_i2d>
 8010988:	4632      	mov	r2, r6
 801098a:	463b      	mov	r3, r7
 801098c:	f7ef fe44 	bl	8000618 <__aeabi_dmul>
 8010990:	4b88      	ldr	r3, [pc, #544]	; (8010bb4 <_dtoa_r+0x654>)
 8010992:	2200      	movs	r2, #0
 8010994:	f7ef fc8a 	bl	80002ac <__adddf3>
 8010998:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801099c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109a0:	9303      	str	r3, [sp, #12]
 80109a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d15c      	bne.n	8010a62 <_dtoa_r+0x502>
 80109a8:	4b83      	ldr	r3, [pc, #524]	; (8010bb8 <_dtoa_r+0x658>)
 80109aa:	2200      	movs	r2, #0
 80109ac:	4630      	mov	r0, r6
 80109ae:	4639      	mov	r1, r7
 80109b0:	f7ef fc7a 	bl	80002a8 <__aeabi_dsub>
 80109b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109b8:	4606      	mov	r6, r0
 80109ba:	460f      	mov	r7, r1
 80109bc:	f7f0 f8bc 	bl	8000b38 <__aeabi_dcmpgt>
 80109c0:	2800      	cmp	r0, #0
 80109c2:	f040 8296 	bne.w	8010ef2 <_dtoa_r+0x992>
 80109c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80109ca:	4630      	mov	r0, r6
 80109cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80109d0:	4639      	mov	r1, r7
 80109d2:	f7f0 f893 	bl	8000afc <__aeabi_dcmplt>
 80109d6:	2800      	cmp	r0, #0
 80109d8:	f040 8288 	bne.w	8010eec <_dtoa_r+0x98c>
 80109dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80109e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80109e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	f2c0 8158 	blt.w	8010c9c <_dtoa_r+0x73c>
 80109ec:	f1ba 0f0e 	cmp.w	sl, #14
 80109f0:	f300 8154 	bgt.w	8010c9c <_dtoa_r+0x73c>
 80109f4:	4b6b      	ldr	r3, [pc, #428]	; (8010ba4 <_dtoa_r+0x644>)
 80109f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80109fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80109fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f280 80e3 	bge.w	8010bcc <_dtoa_r+0x66c>
 8010a06:	9b01      	ldr	r3, [sp, #4]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	f300 80df 	bgt.w	8010bcc <_dtoa_r+0x66c>
 8010a0e:	f040 826d 	bne.w	8010eec <_dtoa_r+0x98c>
 8010a12:	4b69      	ldr	r3, [pc, #420]	; (8010bb8 <_dtoa_r+0x658>)
 8010a14:	2200      	movs	r2, #0
 8010a16:	4640      	mov	r0, r8
 8010a18:	4649      	mov	r1, r9
 8010a1a:	f7ef fdfd 	bl	8000618 <__aeabi_dmul>
 8010a1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a22:	f7f0 f87f 	bl	8000b24 <__aeabi_dcmpge>
 8010a26:	9e01      	ldr	r6, [sp, #4]
 8010a28:	4637      	mov	r7, r6
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	f040 8243 	bne.w	8010eb6 <_dtoa_r+0x956>
 8010a30:	9d00      	ldr	r5, [sp, #0]
 8010a32:	2331      	movs	r3, #49	; 0x31
 8010a34:	f805 3b01 	strb.w	r3, [r5], #1
 8010a38:	f10a 0a01 	add.w	sl, sl, #1
 8010a3c:	e23f      	b.n	8010ebe <_dtoa_r+0x95e>
 8010a3e:	07f2      	lsls	r2, r6, #31
 8010a40:	d505      	bpl.n	8010a4e <_dtoa_r+0x4ee>
 8010a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a46:	f7ef fde7 	bl	8000618 <__aeabi_dmul>
 8010a4a:	3501      	adds	r5, #1
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	1076      	asrs	r6, r6, #1
 8010a50:	3708      	adds	r7, #8
 8010a52:	e76c      	b.n	801092e <_dtoa_r+0x3ce>
 8010a54:	2502      	movs	r5, #2
 8010a56:	e76f      	b.n	8010938 <_dtoa_r+0x3d8>
 8010a58:	9b01      	ldr	r3, [sp, #4]
 8010a5a:	f8cd a01c 	str.w	sl, [sp, #28]
 8010a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8010a60:	e78d      	b.n	801097e <_dtoa_r+0x41e>
 8010a62:	9900      	ldr	r1, [sp, #0]
 8010a64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010a66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a68:	4b4e      	ldr	r3, [pc, #312]	; (8010ba4 <_dtoa_r+0x644>)
 8010a6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a6e:	4401      	add	r1, r0
 8010a70:	9102      	str	r1, [sp, #8]
 8010a72:	9908      	ldr	r1, [sp, #32]
 8010a74:	eeb0 8a47 	vmov.f32	s16, s14
 8010a78:	eef0 8a67 	vmov.f32	s17, s15
 8010a7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010a84:	2900      	cmp	r1, #0
 8010a86:	d045      	beq.n	8010b14 <_dtoa_r+0x5b4>
 8010a88:	494c      	ldr	r1, [pc, #304]	; (8010bbc <_dtoa_r+0x65c>)
 8010a8a:	2000      	movs	r0, #0
 8010a8c:	f7ef feee 	bl	800086c <__aeabi_ddiv>
 8010a90:	ec53 2b18 	vmov	r2, r3, d8
 8010a94:	f7ef fc08 	bl	80002a8 <__aeabi_dsub>
 8010a98:	9d00      	ldr	r5, [sp, #0]
 8010a9a:	ec41 0b18 	vmov	d8, r0, r1
 8010a9e:	4639      	mov	r1, r7
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	f7f0 f869 	bl	8000b78 <__aeabi_d2iz>
 8010aa6:	900c      	str	r0, [sp, #48]	; 0x30
 8010aa8:	f7ef fd4c 	bl	8000544 <__aeabi_i2d>
 8010aac:	4602      	mov	r2, r0
 8010aae:	460b      	mov	r3, r1
 8010ab0:	4630      	mov	r0, r6
 8010ab2:	4639      	mov	r1, r7
 8010ab4:	f7ef fbf8 	bl	80002a8 <__aeabi_dsub>
 8010ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010aba:	3330      	adds	r3, #48	; 0x30
 8010abc:	f805 3b01 	strb.w	r3, [r5], #1
 8010ac0:	ec53 2b18 	vmov	r2, r3, d8
 8010ac4:	4606      	mov	r6, r0
 8010ac6:	460f      	mov	r7, r1
 8010ac8:	f7f0 f818 	bl	8000afc <__aeabi_dcmplt>
 8010acc:	2800      	cmp	r0, #0
 8010ace:	d165      	bne.n	8010b9c <_dtoa_r+0x63c>
 8010ad0:	4632      	mov	r2, r6
 8010ad2:	463b      	mov	r3, r7
 8010ad4:	4935      	ldr	r1, [pc, #212]	; (8010bac <_dtoa_r+0x64c>)
 8010ad6:	2000      	movs	r0, #0
 8010ad8:	f7ef fbe6 	bl	80002a8 <__aeabi_dsub>
 8010adc:	ec53 2b18 	vmov	r2, r3, d8
 8010ae0:	f7f0 f80c 	bl	8000afc <__aeabi_dcmplt>
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	f040 80b9 	bne.w	8010c5c <_dtoa_r+0x6fc>
 8010aea:	9b02      	ldr	r3, [sp, #8]
 8010aec:	429d      	cmp	r5, r3
 8010aee:	f43f af75 	beq.w	80109dc <_dtoa_r+0x47c>
 8010af2:	4b2f      	ldr	r3, [pc, #188]	; (8010bb0 <_dtoa_r+0x650>)
 8010af4:	ec51 0b18 	vmov	r0, r1, d8
 8010af8:	2200      	movs	r2, #0
 8010afa:	f7ef fd8d 	bl	8000618 <__aeabi_dmul>
 8010afe:	4b2c      	ldr	r3, [pc, #176]	; (8010bb0 <_dtoa_r+0x650>)
 8010b00:	ec41 0b18 	vmov	d8, r0, r1
 8010b04:	2200      	movs	r2, #0
 8010b06:	4630      	mov	r0, r6
 8010b08:	4639      	mov	r1, r7
 8010b0a:	f7ef fd85 	bl	8000618 <__aeabi_dmul>
 8010b0e:	4606      	mov	r6, r0
 8010b10:	460f      	mov	r7, r1
 8010b12:	e7c4      	b.n	8010a9e <_dtoa_r+0x53e>
 8010b14:	ec51 0b17 	vmov	r0, r1, d7
 8010b18:	f7ef fd7e 	bl	8000618 <__aeabi_dmul>
 8010b1c:	9b02      	ldr	r3, [sp, #8]
 8010b1e:	9d00      	ldr	r5, [sp, #0]
 8010b20:	930c      	str	r3, [sp, #48]	; 0x30
 8010b22:	ec41 0b18 	vmov	d8, r0, r1
 8010b26:	4639      	mov	r1, r7
 8010b28:	4630      	mov	r0, r6
 8010b2a:	f7f0 f825 	bl	8000b78 <__aeabi_d2iz>
 8010b2e:	9011      	str	r0, [sp, #68]	; 0x44
 8010b30:	f7ef fd08 	bl	8000544 <__aeabi_i2d>
 8010b34:	4602      	mov	r2, r0
 8010b36:	460b      	mov	r3, r1
 8010b38:	4630      	mov	r0, r6
 8010b3a:	4639      	mov	r1, r7
 8010b3c:	f7ef fbb4 	bl	80002a8 <__aeabi_dsub>
 8010b40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b42:	3330      	adds	r3, #48	; 0x30
 8010b44:	f805 3b01 	strb.w	r3, [r5], #1
 8010b48:	9b02      	ldr	r3, [sp, #8]
 8010b4a:	429d      	cmp	r5, r3
 8010b4c:	4606      	mov	r6, r0
 8010b4e:	460f      	mov	r7, r1
 8010b50:	f04f 0200 	mov.w	r2, #0
 8010b54:	d134      	bne.n	8010bc0 <_dtoa_r+0x660>
 8010b56:	4b19      	ldr	r3, [pc, #100]	; (8010bbc <_dtoa_r+0x65c>)
 8010b58:	ec51 0b18 	vmov	r0, r1, d8
 8010b5c:	f7ef fba6 	bl	80002ac <__adddf3>
 8010b60:	4602      	mov	r2, r0
 8010b62:	460b      	mov	r3, r1
 8010b64:	4630      	mov	r0, r6
 8010b66:	4639      	mov	r1, r7
 8010b68:	f7ef ffe6 	bl	8000b38 <__aeabi_dcmpgt>
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	d175      	bne.n	8010c5c <_dtoa_r+0x6fc>
 8010b70:	ec53 2b18 	vmov	r2, r3, d8
 8010b74:	4911      	ldr	r1, [pc, #68]	; (8010bbc <_dtoa_r+0x65c>)
 8010b76:	2000      	movs	r0, #0
 8010b78:	f7ef fb96 	bl	80002a8 <__aeabi_dsub>
 8010b7c:	4602      	mov	r2, r0
 8010b7e:	460b      	mov	r3, r1
 8010b80:	4630      	mov	r0, r6
 8010b82:	4639      	mov	r1, r7
 8010b84:	f7ef ffba 	bl	8000afc <__aeabi_dcmplt>
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	f43f af27 	beq.w	80109dc <_dtoa_r+0x47c>
 8010b8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010b90:	1e6b      	subs	r3, r5, #1
 8010b92:	930c      	str	r3, [sp, #48]	; 0x30
 8010b94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010b98:	2b30      	cmp	r3, #48	; 0x30
 8010b9a:	d0f8      	beq.n	8010b8e <_dtoa_r+0x62e>
 8010b9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010ba0:	e04a      	b.n	8010c38 <_dtoa_r+0x6d8>
 8010ba2:	bf00      	nop
 8010ba4:	08013ba0 	.word	0x08013ba0
 8010ba8:	08013b78 	.word	0x08013b78
 8010bac:	3ff00000 	.word	0x3ff00000
 8010bb0:	40240000 	.word	0x40240000
 8010bb4:	401c0000 	.word	0x401c0000
 8010bb8:	40140000 	.word	0x40140000
 8010bbc:	3fe00000 	.word	0x3fe00000
 8010bc0:	4baf      	ldr	r3, [pc, #700]	; (8010e80 <_dtoa_r+0x920>)
 8010bc2:	f7ef fd29 	bl	8000618 <__aeabi_dmul>
 8010bc6:	4606      	mov	r6, r0
 8010bc8:	460f      	mov	r7, r1
 8010bca:	e7ac      	b.n	8010b26 <_dtoa_r+0x5c6>
 8010bcc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010bd0:	9d00      	ldr	r5, [sp, #0]
 8010bd2:	4642      	mov	r2, r8
 8010bd4:	464b      	mov	r3, r9
 8010bd6:	4630      	mov	r0, r6
 8010bd8:	4639      	mov	r1, r7
 8010bda:	f7ef fe47 	bl	800086c <__aeabi_ddiv>
 8010bde:	f7ef ffcb 	bl	8000b78 <__aeabi_d2iz>
 8010be2:	9002      	str	r0, [sp, #8]
 8010be4:	f7ef fcae 	bl	8000544 <__aeabi_i2d>
 8010be8:	4642      	mov	r2, r8
 8010bea:	464b      	mov	r3, r9
 8010bec:	f7ef fd14 	bl	8000618 <__aeabi_dmul>
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	4630      	mov	r0, r6
 8010bf6:	4639      	mov	r1, r7
 8010bf8:	f7ef fb56 	bl	80002a8 <__aeabi_dsub>
 8010bfc:	9e02      	ldr	r6, [sp, #8]
 8010bfe:	9f01      	ldr	r7, [sp, #4]
 8010c00:	3630      	adds	r6, #48	; 0x30
 8010c02:	f805 6b01 	strb.w	r6, [r5], #1
 8010c06:	9e00      	ldr	r6, [sp, #0]
 8010c08:	1bae      	subs	r6, r5, r6
 8010c0a:	42b7      	cmp	r7, r6
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	460b      	mov	r3, r1
 8010c10:	d137      	bne.n	8010c82 <_dtoa_r+0x722>
 8010c12:	f7ef fb4b 	bl	80002ac <__adddf3>
 8010c16:	4642      	mov	r2, r8
 8010c18:	464b      	mov	r3, r9
 8010c1a:	4606      	mov	r6, r0
 8010c1c:	460f      	mov	r7, r1
 8010c1e:	f7ef ff8b 	bl	8000b38 <__aeabi_dcmpgt>
 8010c22:	b9c8      	cbnz	r0, 8010c58 <_dtoa_r+0x6f8>
 8010c24:	4642      	mov	r2, r8
 8010c26:	464b      	mov	r3, r9
 8010c28:	4630      	mov	r0, r6
 8010c2a:	4639      	mov	r1, r7
 8010c2c:	f7ef ff5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c30:	b110      	cbz	r0, 8010c38 <_dtoa_r+0x6d8>
 8010c32:	9b02      	ldr	r3, [sp, #8]
 8010c34:	07d9      	lsls	r1, r3, #31
 8010c36:	d40f      	bmi.n	8010c58 <_dtoa_r+0x6f8>
 8010c38:	4620      	mov	r0, r4
 8010c3a:	4659      	mov	r1, fp
 8010c3c:	f000 ff2a 	bl	8011a94 <_Bfree>
 8010c40:	2300      	movs	r3, #0
 8010c42:	702b      	strb	r3, [r5, #0]
 8010c44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c46:	f10a 0001 	add.w	r0, sl, #1
 8010c4a:	6018      	str	r0, [r3, #0]
 8010c4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f43f acd8 	beq.w	8010604 <_dtoa_r+0xa4>
 8010c54:	601d      	str	r5, [r3, #0]
 8010c56:	e4d5      	b.n	8010604 <_dtoa_r+0xa4>
 8010c58:	f8cd a01c 	str.w	sl, [sp, #28]
 8010c5c:	462b      	mov	r3, r5
 8010c5e:	461d      	mov	r5, r3
 8010c60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c64:	2a39      	cmp	r2, #57	; 0x39
 8010c66:	d108      	bne.n	8010c7a <_dtoa_r+0x71a>
 8010c68:	9a00      	ldr	r2, [sp, #0]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d1f7      	bne.n	8010c5e <_dtoa_r+0x6fe>
 8010c6e:	9a07      	ldr	r2, [sp, #28]
 8010c70:	9900      	ldr	r1, [sp, #0]
 8010c72:	3201      	adds	r2, #1
 8010c74:	9207      	str	r2, [sp, #28]
 8010c76:	2230      	movs	r2, #48	; 0x30
 8010c78:	700a      	strb	r2, [r1, #0]
 8010c7a:	781a      	ldrb	r2, [r3, #0]
 8010c7c:	3201      	adds	r2, #1
 8010c7e:	701a      	strb	r2, [r3, #0]
 8010c80:	e78c      	b.n	8010b9c <_dtoa_r+0x63c>
 8010c82:	4b7f      	ldr	r3, [pc, #508]	; (8010e80 <_dtoa_r+0x920>)
 8010c84:	2200      	movs	r2, #0
 8010c86:	f7ef fcc7 	bl	8000618 <__aeabi_dmul>
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	4606      	mov	r6, r0
 8010c90:	460f      	mov	r7, r1
 8010c92:	f7ef ff29 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c96:	2800      	cmp	r0, #0
 8010c98:	d09b      	beq.n	8010bd2 <_dtoa_r+0x672>
 8010c9a:	e7cd      	b.n	8010c38 <_dtoa_r+0x6d8>
 8010c9c:	9a08      	ldr	r2, [sp, #32]
 8010c9e:	2a00      	cmp	r2, #0
 8010ca0:	f000 80c4 	beq.w	8010e2c <_dtoa_r+0x8cc>
 8010ca4:	9a05      	ldr	r2, [sp, #20]
 8010ca6:	2a01      	cmp	r2, #1
 8010ca8:	f300 80a8 	bgt.w	8010dfc <_dtoa_r+0x89c>
 8010cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010cae:	2a00      	cmp	r2, #0
 8010cb0:	f000 80a0 	beq.w	8010df4 <_dtoa_r+0x894>
 8010cb4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010cb8:	9e06      	ldr	r6, [sp, #24]
 8010cba:	4645      	mov	r5, r8
 8010cbc:	9a04      	ldr	r2, [sp, #16]
 8010cbe:	2101      	movs	r1, #1
 8010cc0:	441a      	add	r2, r3
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	4498      	add	r8, r3
 8010cc6:	9204      	str	r2, [sp, #16]
 8010cc8:	f000 ffea 	bl	8011ca0 <__i2b>
 8010ccc:	4607      	mov	r7, r0
 8010cce:	2d00      	cmp	r5, #0
 8010cd0:	dd0b      	ble.n	8010cea <_dtoa_r+0x78a>
 8010cd2:	9b04      	ldr	r3, [sp, #16]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	dd08      	ble.n	8010cea <_dtoa_r+0x78a>
 8010cd8:	42ab      	cmp	r3, r5
 8010cda:	9a04      	ldr	r2, [sp, #16]
 8010cdc:	bfa8      	it	ge
 8010cde:	462b      	movge	r3, r5
 8010ce0:	eba8 0803 	sub.w	r8, r8, r3
 8010ce4:	1aed      	subs	r5, r5, r3
 8010ce6:	1ad3      	subs	r3, r2, r3
 8010ce8:	9304      	str	r3, [sp, #16]
 8010cea:	9b06      	ldr	r3, [sp, #24]
 8010cec:	b1fb      	cbz	r3, 8010d2e <_dtoa_r+0x7ce>
 8010cee:	9b08      	ldr	r3, [sp, #32]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	f000 809f 	beq.w	8010e34 <_dtoa_r+0x8d4>
 8010cf6:	2e00      	cmp	r6, #0
 8010cf8:	dd11      	ble.n	8010d1e <_dtoa_r+0x7be>
 8010cfa:	4639      	mov	r1, r7
 8010cfc:	4632      	mov	r2, r6
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f001 f88a 	bl	8011e18 <__pow5mult>
 8010d04:	465a      	mov	r2, fp
 8010d06:	4601      	mov	r1, r0
 8010d08:	4607      	mov	r7, r0
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	f000 ffde 	bl	8011ccc <__multiply>
 8010d10:	4659      	mov	r1, fp
 8010d12:	9007      	str	r0, [sp, #28]
 8010d14:	4620      	mov	r0, r4
 8010d16:	f000 febd 	bl	8011a94 <_Bfree>
 8010d1a:	9b07      	ldr	r3, [sp, #28]
 8010d1c:	469b      	mov	fp, r3
 8010d1e:	9b06      	ldr	r3, [sp, #24]
 8010d20:	1b9a      	subs	r2, r3, r6
 8010d22:	d004      	beq.n	8010d2e <_dtoa_r+0x7ce>
 8010d24:	4659      	mov	r1, fp
 8010d26:	4620      	mov	r0, r4
 8010d28:	f001 f876 	bl	8011e18 <__pow5mult>
 8010d2c:	4683      	mov	fp, r0
 8010d2e:	2101      	movs	r1, #1
 8010d30:	4620      	mov	r0, r4
 8010d32:	f000 ffb5 	bl	8011ca0 <__i2b>
 8010d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	4606      	mov	r6, r0
 8010d3c:	dd7c      	ble.n	8010e38 <_dtoa_r+0x8d8>
 8010d3e:	461a      	mov	r2, r3
 8010d40:	4601      	mov	r1, r0
 8010d42:	4620      	mov	r0, r4
 8010d44:	f001 f868 	bl	8011e18 <__pow5mult>
 8010d48:	9b05      	ldr	r3, [sp, #20]
 8010d4a:	2b01      	cmp	r3, #1
 8010d4c:	4606      	mov	r6, r0
 8010d4e:	dd76      	ble.n	8010e3e <_dtoa_r+0x8de>
 8010d50:	2300      	movs	r3, #0
 8010d52:	9306      	str	r3, [sp, #24]
 8010d54:	6933      	ldr	r3, [r6, #16]
 8010d56:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010d5a:	6918      	ldr	r0, [r3, #16]
 8010d5c:	f000 ff50 	bl	8011c00 <__hi0bits>
 8010d60:	f1c0 0020 	rsb	r0, r0, #32
 8010d64:	9b04      	ldr	r3, [sp, #16]
 8010d66:	4418      	add	r0, r3
 8010d68:	f010 001f 	ands.w	r0, r0, #31
 8010d6c:	f000 8086 	beq.w	8010e7c <_dtoa_r+0x91c>
 8010d70:	f1c0 0320 	rsb	r3, r0, #32
 8010d74:	2b04      	cmp	r3, #4
 8010d76:	dd7f      	ble.n	8010e78 <_dtoa_r+0x918>
 8010d78:	f1c0 001c 	rsb	r0, r0, #28
 8010d7c:	9b04      	ldr	r3, [sp, #16]
 8010d7e:	4403      	add	r3, r0
 8010d80:	4480      	add	r8, r0
 8010d82:	4405      	add	r5, r0
 8010d84:	9304      	str	r3, [sp, #16]
 8010d86:	f1b8 0f00 	cmp.w	r8, #0
 8010d8a:	dd05      	ble.n	8010d98 <_dtoa_r+0x838>
 8010d8c:	4659      	mov	r1, fp
 8010d8e:	4642      	mov	r2, r8
 8010d90:	4620      	mov	r0, r4
 8010d92:	f001 f89b 	bl	8011ecc <__lshift>
 8010d96:	4683      	mov	fp, r0
 8010d98:	9b04      	ldr	r3, [sp, #16]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	dd05      	ble.n	8010daa <_dtoa_r+0x84a>
 8010d9e:	4631      	mov	r1, r6
 8010da0:	461a      	mov	r2, r3
 8010da2:	4620      	mov	r0, r4
 8010da4:	f001 f892 	bl	8011ecc <__lshift>
 8010da8:	4606      	mov	r6, r0
 8010daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d069      	beq.n	8010e84 <_dtoa_r+0x924>
 8010db0:	4631      	mov	r1, r6
 8010db2:	4658      	mov	r0, fp
 8010db4:	f001 f8f6 	bl	8011fa4 <__mcmp>
 8010db8:	2800      	cmp	r0, #0
 8010dba:	da63      	bge.n	8010e84 <_dtoa_r+0x924>
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	4659      	mov	r1, fp
 8010dc0:	220a      	movs	r2, #10
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	f000 fe88 	bl	8011ad8 <__multadd>
 8010dc8:	9b08      	ldr	r3, [sp, #32]
 8010dca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010dce:	4683      	mov	fp, r0
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	f000 818f 	beq.w	80110f4 <_dtoa_r+0xb94>
 8010dd6:	4639      	mov	r1, r7
 8010dd8:	2300      	movs	r3, #0
 8010dda:	220a      	movs	r2, #10
 8010ddc:	4620      	mov	r0, r4
 8010dde:	f000 fe7b 	bl	8011ad8 <__multadd>
 8010de2:	f1b9 0f00 	cmp.w	r9, #0
 8010de6:	4607      	mov	r7, r0
 8010de8:	f300 808e 	bgt.w	8010f08 <_dtoa_r+0x9a8>
 8010dec:	9b05      	ldr	r3, [sp, #20]
 8010dee:	2b02      	cmp	r3, #2
 8010df0:	dc50      	bgt.n	8010e94 <_dtoa_r+0x934>
 8010df2:	e089      	b.n	8010f08 <_dtoa_r+0x9a8>
 8010df4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010df6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010dfa:	e75d      	b.n	8010cb8 <_dtoa_r+0x758>
 8010dfc:	9b01      	ldr	r3, [sp, #4]
 8010dfe:	1e5e      	subs	r6, r3, #1
 8010e00:	9b06      	ldr	r3, [sp, #24]
 8010e02:	42b3      	cmp	r3, r6
 8010e04:	bfbf      	itttt	lt
 8010e06:	9b06      	ldrlt	r3, [sp, #24]
 8010e08:	9606      	strlt	r6, [sp, #24]
 8010e0a:	1af2      	sublt	r2, r6, r3
 8010e0c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8010e0e:	bfb6      	itet	lt
 8010e10:	189b      	addlt	r3, r3, r2
 8010e12:	1b9e      	subge	r6, r3, r6
 8010e14:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010e16:	9b01      	ldr	r3, [sp, #4]
 8010e18:	bfb8      	it	lt
 8010e1a:	2600      	movlt	r6, #0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	bfb5      	itete	lt
 8010e20:	eba8 0503 	sublt.w	r5, r8, r3
 8010e24:	9b01      	ldrge	r3, [sp, #4]
 8010e26:	2300      	movlt	r3, #0
 8010e28:	4645      	movge	r5, r8
 8010e2a:	e747      	b.n	8010cbc <_dtoa_r+0x75c>
 8010e2c:	9e06      	ldr	r6, [sp, #24]
 8010e2e:	9f08      	ldr	r7, [sp, #32]
 8010e30:	4645      	mov	r5, r8
 8010e32:	e74c      	b.n	8010cce <_dtoa_r+0x76e>
 8010e34:	9a06      	ldr	r2, [sp, #24]
 8010e36:	e775      	b.n	8010d24 <_dtoa_r+0x7c4>
 8010e38:	9b05      	ldr	r3, [sp, #20]
 8010e3a:	2b01      	cmp	r3, #1
 8010e3c:	dc18      	bgt.n	8010e70 <_dtoa_r+0x910>
 8010e3e:	9b02      	ldr	r3, [sp, #8]
 8010e40:	b9b3      	cbnz	r3, 8010e70 <_dtoa_r+0x910>
 8010e42:	9b03      	ldr	r3, [sp, #12]
 8010e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e48:	b9a3      	cbnz	r3, 8010e74 <_dtoa_r+0x914>
 8010e4a:	9b03      	ldr	r3, [sp, #12]
 8010e4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e50:	0d1b      	lsrs	r3, r3, #20
 8010e52:	051b      	lsls	r3, r3, #20
 8010e54:	b12b      	cbz	r3, 8010e62 <_dtoa_r+0x902>
 8010e56:	9b04      	ldr	r3, [sp, #16]
 8010e58:	3301      	adds	r3, #1
 8010e5a:	9304      	str	r3, [sp, #16]
 8010e5c:	f108 0801 	add.w	r8, r8, #1
 8010e60:	2301      	movs	r3, #1
 8010e62:	9306      	str	r3, [sp, #24]
 8010e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f47f af74 	bne.w	8010d54 <_dtoa_r+0x7f4>
 8010e6c:	2001      	movs	r0, #1
 8010e6e:	e779      	b.n	8010d64 <_dtoa_r+0x804>
 8010e70:	2300      	movs	r3, #0
 8010e72:	e7f6      	b.n	8010e62 <_dtoa_r+0x902>
 8010e74:	9b02      	ldr	r3, [sp, #8]
 8010e76:	e7f4      	b.n	8010e62 <_dtoa_r+0x902>
 8010e78:	d085      	beq.n	8010d86 <_dtoa_r+0x826>
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	301c      	adds	r0, #28
 8010e7e:	e77d      	b.n	8010d7c <_dtoa_r+0x81c>
 8010e80:	40240000 	.word	0x40240000
 8010e84:	9b01      	ldr	r3, [sp, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	dc38      	bgt.n	8010efc <_dtoa_r+0x99c>
 8010e8a:	9b05      	ldr	r3, [sp, #20]
 8010e8c:	2b02      	cmp	r3, #2
 8010e8e:	dd35      	ble.n	8010efc <_dtoa_r+0x99c>
 8010e90:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010e94:	f1b9 0f00 	cmp.w	r9, #0
 8010e98:	d10d      	bne.n	8010eb6 <_dtoa_r+0x956>
 8010e9a:	4631      	mov	r1, r6
 8010e9c:	464b      	mov	r3, r9
 8010e9e:	2205      	movs	r2, #5
 8010ea0:	4620      	mov	r0, r4
 8010ea2:	f000 fe19 	bl	8011ad8 <__multadd>
 8010ea6:	4601      	mov	r1, r0
 8010ea8:	4606      	mov	r6, r0
 8010eaa:	4658      	mov	r0, fp
 8010eac:	f001 f87a 	bl	8011fa4 <__mcmp>
 8010eb0:	2800      	cmp	r0, #0
 8010eb2:	f73f adbd 	bgt.w	8010a30 <_dtoa_r+0x4d0>
 8010eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eb8:	9d00      	ldr	r5, [sp, #0]
 8010eba:	ea6f 0a03 	mvn.w	sl, r3
 8010ebe:	f04f 0800 	mov.w	r8, #0
 8010ec2:	4631      	mov	r1, r6
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f000 fde5 	bl	8011a94 <_Bfree>
 8010eca:	2f00      	cmp	r7, #0
 8010ecc:	f43f aeb4 	beq.w	8010c38 <_dtoa_r+0x6d8>
 8010ed0:	f1b8 0f00 	cmp.w	r8, #0
 8010ed4:	d005      	beq.n	8010ee2 <_dtoa_r+0x982>
 8010ed6:	45b8      	cmp	r8, r7
 8010ed8:	d003      	beq.n	8010ee2 <_dtoa_r+0x982>
 8010eda:	4641      	mov	r1, r8
 8010edc:	4620      	mov	r0, r4
 8010ede:	f000 fdd9 	bl	8011a94 <_Bfree>
 8010ee2:	4639      	mov	r1, r7
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	f000 fdd5 	bl	8011a94 <_Bfree>
 8010eea:	e6a5      	b.n	8010c38 <_dtoa_r+0x6d8>
 8010eec:	2600      	movs	r6, #0
 8010eee:	4637      	mov	r7, r6
 8010ef0:	e7e1      	b.n	8010eb6 <_dtoa_r+0x956>
 8010ef2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010ef4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010ef8:	4637      	mov	r7, r6
 8010efa:	e599      	b.n	8010a30 <_dtoa_r+0x4d0>
 8010efc:	9b08      	ldr	r3, [sp, #32]
 8010efe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	f000 80fd 	beq.w	8011102 <_dtoa_r+0xba2>
 8010f08:	2d00      	cmp	r5, #0
 8010f0a:	dd05      	ble.n	8010f18 <_dtoa_r+0x9b8>
 8010f0c:	4639      	mov	r1, r7
 8010f0e:	462a      	mov	r2, r5
 8010f10:	4620      	mov	r0, r4
 8010f12:	f000 ffdb 	bl	8011ecc <__lshift>
 8010f16:	4607      	mov	r7, r0
 8010f18:	9b06      	ldr	r3, [sp, #24]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d05c      	beq.n	8010fd8 <_dtoa_r+0xa78>
 8010f1e:	6879      	ldr	r1, [r7, #4]
 8010f20:	4620      	mov	r0, r4
 8010f22:	f000 fd77 	bl	8011a14 <_Balloc>
 8010f26:	4605      	mov	r5, r0
 8010f28:	b928      	cbnz	r0, 8010f36 <_dtoa_r+0x9d6>
 8010f2a:	4b80      	ldr	r3, [pc, #512]	; (801112c <_dtoa_r+0xbcc>)
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010f32:	f7ff bb2e 	b.w	8010592 <_dtoa_r+0x32>
 8010f36:	693a      	ldr	r2, [r7, #16]
 8010f38:	3202      	adds	r2, #2
 8010f3a:	0092      	lsls	r2, r2, #2
 8010f3c:	f107 010c 	add.w	r1, r7, #12
 8010f40:	300c      	adds	r0, #12
 8010f42:	f7fd fb60 	bl	800e606 <memcpy>
 8010f46:	2201      	movs	r2, #1
 8010f48:	4629      	mov	r1, r5
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f000 ffbe 	bl	8011ecc <__lshift>
 8010f50:	9b00      	ldr	r3, [sp, #0]
 8010f52:	3301      	adds	r3, #1
 8010f54:	9301      	str	r3, [sp, #4]
 8010f56:	9b00      	ldr	r3, [sp, #0]
 8010f58:	444b      	add	r3, r9
 8010f5a:	9307      	str	r3, [sp, #28]
 8010f5c:	9b02      	ldr	r3, [sp, #8]
 8010f5e:	f003 0301 	and.w	r3, r3, #1
 8010f62:	46b8      	mov	r8, r7
 8010f64:	9306      	str	r3, [sp, #24]
 8010f66:	4607      	mov	r7, r0
 8010f68:	9b01      	ldr	r3, [sp, #4]
 8010f6a:	4631      	mov	r1, r6
 8010f6c:	3b01      	subs	r3, #1
 8010f6e:	4658      	mov	r0, fp
 8010f70:	9302      	str	r3, [sp, #8]
 8010f72:	f7ff fa67 	bl	8010444 <quorem>
 8010f76:	4603      	mov	r3, r0
 8010f78:	3330      	adds	r3, #48	; 0x30
 8010f7a:	9004      	str	r0, [sp, #16]
 8010f7c:	4641      	mov	r1, r8
 8010f7e:	4658      	mov	r0, fp
 8010f80:	9308      	str	r3, [sp, #32]
 8010f82:	f001 f80f 	bl	8011fa4 <__mcmp>
 8010f86:	463a      	mov	r2, r7
 8010f88:	4681      	mov	r9, r0
 8010f8a:	4631      	mov	r1, r6
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	f001 f825 	bl	8011fdc <__mdiff>
 8010f92:	68c2      	ldr	r2, [r0, #12]
 8010f94:	9b08      	ldr	r3, [sp, #32]
 8010f96:	4605      	mov	r5, r0
 8010f98:	bb02      	cbnz	r2, 8010fdc <_dtoa_r+0xa7c>
 8010f9a:	4601      	mov	r1, r0
 8010f9c:	4658      	mov	r0, fp
 8010f9e:	f001 f801 	bl	8011fa4 <__mcmp>
 8010fa2:	9b08      	ldr	r3, [sp, #32]
 8010fa4:	4602      	mov	r2, r0
 8010fa6:	4629      	mov	r1, r5
 8010fa8:	4620      	mov	r0, r4
 8010faa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8010fae:	f000 fd71 	bl	8011a94 <_Bfree>
 8010fb2:	9b05      	ldr	r3, [sp, #20]
 8010fb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fb6:	9d01      	ldr	r5, [sp, #4]
 8010fb8:	ea43 0102 	orr.w	r1, r3, r2
 8010fbc:	9b06      	ldr	r3, [sp, #24]
 8010fbe:	430b      	orrs	r3, r1
 8010fc0:	9b08      	ldr	r3, [sp, #32]
 8010fc2:	d10d      	bne.n	8010fe0 <_dtoa_r+0xa80>
 8010fc4:	2b39      	cmp	r3, #57	; 0x39
 8010fc6:	d029      	beq.n	801101c <_dtoa_r+0xabc>
 8010fc8:	f1b9 0f00 	cmp.w	r9, #0
 8010fcc:	dd01      	ble.n	8010fd2 <_dtoa_r+0xa72>
 8010fce:	9b04      	ldr	r3, [sp, #16]
 8010fd0:	3331      	adds	r3, #49	; 0x31
 8010fd2:	9a02      	ldr	r2, [sp, #8]
 8010fd4:	7013      	strb	r3, [r2, #0]
 8010fd6:	e774      	b.n	8010ec2 <_dtoa_r+0x962>
 8010fd8:	4638      	mov	r0, r7
 8010fda:	e7b9      	b.n	8010f50 <_dtoa_r+0x9f0>
 8010fdc:	2201      	movs	r2, #1
 8010fde:	e7e2      	b.n	8010fa6 <_dtoa_r+0xa46>
 8010fe0:	f1b9 0f00 	cmp.w	r9, #0
 8010fe4:	db06      	blt.n	8010ff4 <_dtoa_r+0xa94>
 8010fe6:	9905      	ldr	r1, [sp, #20]
 8010fe8:	ea41 0909 	orr.w	r9, r1, r9
 8010fec:	9906      	ldr	r1, [sp, #24]
 8010fee:	ea59 0101 	orrs.w	r1, r9, r1
 8010ff2:	d120      	bne.n	8011036 <_dtoa_r+0xad6>
 8010ff4:	2a00      	cmp	r2, #0
 8010ff6:	ddec      	ble.n	8010fd2 <_dtoa_r+0xa72>
 8010ff8:	4659      	mov	r1, fp
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	9301      	str	r3, [sp, #4]
 8011000:	f000 ff64 	bl	8011ecc <__lshift>
 8011004:	4631      	mov	r1, r6
 8011006:	4683      	mov	fp, r0
 8011008:	f000 ffcc 	bl	8011fa4 <__mcmp>
 801100c:	2800      	cmp	r0, #0
 801100e:	9b01      	ldr	r3, [sp, #4]
 8011010:	dc02      	bgt.n	8011018 <_dtoa_r+0xab8>
 8011012:	d1de      	bne.n	8010fd2 <_dtoa_r+0xa72>
 8011014:	07da      	lsls	r2, r3, #31
 8011016:	d5dc      	bpl.n	8010fd2 <_dtoa_r+0xa72>
 8011018:	2b39      	cmp	r3, #57	; 0x39
 801101a:	d1d8      	bne.n	8010fce <_dtoa_r+0xa6e>
 801101c:	9a02      	ldr	r2, [sp, #8]
 801101e:	2339      	movs	r3, #57	; 0x39
 8011020:	7013      	strb	r3, [r2, #0]
 8011022:	462b      	mov	r3, r5
 8011024:	461d      	mov	r5, r3
 8011026:	3b01      	subs	r3, #1
 8011028:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801102c:	2a39      	cmp	r2, #57	; 0x39
 801102e:	d050      	beq.n	80110d2 <_dtoa_r+0xb72>
 8011030:	3201      	adds	r2, #1
 8011032:	701a      	strb	r2, [r3, #0]
 8011034:	e745      	b.n	8010ec2 <_dtoa_r+0x962>
 8011036:	2a00      	cmp	r2, #0
 8011038:	dd03      	ble.n	8011042 <_dtoa_r+0xae2>
 801103a:	2b39      	cmp	r3, #57	; 0x39
 801103c:	d0ee      	beq.n	801101c <_dtoa_r+0xabc>
 801103e:	3301      	adds	r3, #1
 8011040:	e7c7      	b.n	8010fd2 <_dtoa_r+0xa72>
 8011042:	9a01      	ldr	r2, [sp, #4]
 8011044:	9907      	ldr	r1, [sp, #28]
 8011046:	f802 3c01 	strb.w	r3, [r2, #-1]
 801104a:	428a      	cmp	r2, r1
 801104c:	d02a      	beq.n	80110a4 <_dtoa_r+0xb44>
 801104e:	4659      	mov	r1, fp
 8011050:	2300      	movs	r3, #0
 8011052:	220a      	movs	r2, #10
 8011054:	4620      	mov	r0, r4
 8011056:	f000 fd3f 	bl	8011ad8 <__multadd>
 801105a:	45b8      	cmp	r8, r7
 801105c:	4683      	mov	fp, r0
 801105e:	f04f 0300 	mov.w	r3, #0
 8011062:	f04f 020a 	mov.w	r2, #10
 8011066:	4641      	mov	r1, r8
 8011068:	4620      	mov	r0, r4
 801106a:	d107      	bne.n	801107c <_dtoa_r+0xb1c>
 801106c:	f000 fd34 	bl	8011ad8 <__multadd>
 8011070:	4680      	mov	r8, r0
 8011072:	4607      	mov	r7, r0
 8011074:	9b01      	ldr	r3, [sp, #4]
 8011076:	3301      	adds	r3, #1
 8011078:	9301      	str	r3, [sp, #4]
 801107a:	e775      	b.n	8010f68 <_dtoa_r+0xa08>
 801107c:	f000 fd2c 	bl	8011ad8 <__multadd>
 8011080:	4639      	mov	r1, r7
 8011082:	4680      	mov	r8, r0
 8011084:	2300      	movs	r3, #0
 8011086:	220a      	movs	r2, #10
 8011088:	4620      	mov	r0, r4
 801108a:	f000 fd25 	bl	8011ad8 <__multadd>
 801108e:	4607      	mov	r7, r0
 8011090:	e7f0      	b.n	8011074 <_dtoa_r+0xb14>
 8011092:	f1b9 0f00 	cmp.w	r9, #0
 8011096:	9a00      	ldr	r2, [sp, #0]
 8011098:	bfcc      	ite	gt
 801109a:	464d      	movgt	r5, r9
 801109c:	2501      	movle	r5, #1
 801109e:	4415      	add	r5, r2
 80110a0:	f04f 0800 	mov.w	r8, #0
 80110a4:	4659      	mov	r1, fp
 80110a6:	2201      	movs	r2, #1
 80110a8:	4620      	mov	r0, r4
 80110aa:	9301      	str	r3, [sp, #4]
 80110ac:	f000 ff0e 	bl	8011ecc <__lshift>
 80110b0:	4631      	mov	r1, r6
 80110b2:	4683      	mov	fp, r0
 80110b4:	f000 ff76 	bl	8011fa4 <__mcmp>
 80110b8:	2800      	cmp	r0, #0
 80110ba:	dcb2      	bgt.n	8011022 <_dtoa_r+0xac2>
 80110bc:	d102      	bne.n	80110c4 <_dtoa_r+0xb64>
 80110be:	9b01      	ldr	r3, [sp, #4]
 80110c0:	07db      	lsls	r3, r3, #31
 80110c2:	d4ae      	bmi.n	8011022 <_dtoa_r+0xac2>
 80110c4:	462b      	mov	r3, r5
 80110c6:	461d      	mov	r5, r3
 80110c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110cc:	2a30      	cmp	r2, #48	; 0x30
 80110ce:	d0fa      	beq.n	80110c6 <_dtoa_r+0xb66>
 80110d0:	e6f7      	b.n	8010ec2 <_dtoa_r+0x962>
 80110d2:	9a00      	ldr	r2, [sp, #0]
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d1a5      	bne.n	8011024 <_dtoa_r+0xac4>
 80110d8:	f10a 0a01 	add.w	sl, sl, #1
 80110dc:	2331      	movs	r3, #49	; 0x31
 80110de:	e779      	b.n	8010fd4 <_dtoa_r+0xa74>
 80110e0:	4b13      	ldr	r3, [pc, #76]	; (8011130 <_dtoa_r+0xbd0>)
 80110e2:	f7ff baaf 	b.w	8010644 <_dtoa_r+0xe4>
 80110e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	f47f aa86 	bne.w	80105fa <_dtoa_r+0x9a>
 80110ee:	4b11      	ldr	r3, [pc, #68]	; (8011134 <_dtoa_r+0xbd4>)
 80110f0:	f7ff baa8 	b.w	8010644 <_dtoa_r+0xe4>
 80110f4:	f1b9 0f00 	cmp.w	r9, #0
 80110f8:	dc03      	bgt.n	8011102 <_dtoa_r+0xba2>
 80110fa:	9b05      	ldr	r3, [sp, #20]
 80110fc:	2b02      	cmp	r3, #2
 80110fe:	f73f aec9 	bgt.w	8010e94 <_dtoa_r+0x934>
 8011102:	9d00      	ldr	r5, [sp, #0]
 8011104:	4631      	mov	r1, r6
 8011106:	4658      	mov	r0, fp
 8011108:	f7ff f99c 	bl	8010444 <quorem>
 801110c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011110:	f805 3b01 	strb.w	r3, [r5], #1
 8011114:	9a00      	ldr	r2, [sp, #0]
 8011116:	1aaa      	subs	r2, r5, r2
 8011118:	4591      	cmp	r9, r2
 801111a:	ddba      	ble.n	8011092 <_dtoa_r+0xb32>
 801111c:	4659      	mov	r1, fp
 801111e:	2300      	movs	r3, #0
 8011120:	220a      	movs	r2, #10
 8011122:	4620      	mov	r0, r4
 8011124:	f000 fcd8 	bl	8011ad8 <__multadd>
 8011128:	4683      	mov	fp, r0
 801112a:	e7eb      	b.n	8011104 <_dtoa_r+0xba4>
 801112c:	08013a83 	.word	0x08013a83
 8011130:	08013c89 	.word	0x08013c89
 8011134:	08013a00 	.word	0x08013a00

08011138 <__sflush_r>:
 8011138:	898a      	ldrh	r2, [r1, #12]
 801113a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801113e:	4605      	mov	r5, r0
 8011140:	0710      	lsls	r0, r2, #28
 8011142:	460c      	mov	r4, r1
 8011144:	d458      	bmi.n	80111f8 <__sflush_r+0xc0>
 8011146:	684b      	ldr	r3, [r1, #4]
 8011148:	2b00      	cmp	r3, #0
 801114a:	dc05      	bgt.n	8011158 <__sflush_r+0x20>
 801114c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801114e:	2b00      	cmp	r3, #0
 8011150:	dc02      	bgt.n	8011158 <__sflush_r+0x20>
 8011152:	2000      	movs	r0, #0
 8011154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801115a:	2e00      	cmp	r6, #0
 801115c:	d0f9      	beq.n	8011152 <__sflush_r+0x1a>
 801115e:	2300      	movs	r3, #0
 8011160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011164:	682f      	ldr	r7, [r5, #0]
 8011166:	602b      	str	r3, [r5, #0]
 8011168:	d032      	beq.n	80111d0 <__sflush_r+0x98>
 801116a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801116c:	89a3      	ldrh	r3, [r4, #12]
 801116e:	075a      	lsls	r2, r3, #29
 8011170:	d505      	bpl.n	801117e <__sflush_r+0x46>
 8011172:	6863      	ldr	r3, [r4, #4]
 8011174:	1ac0      	subs	r0, r0, r3
 8011176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011178:	b10b      	cbz	r3, 801117e <__sflush_r+0x46>
 801117a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801117c:	1ac0      	subs	r0, r0, r3
 801117e:	2300      	movs	r3, #0
 8011180:	4602      	mov	r2, r0
 8011182:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011184:	6a21      	ldr	r1, [r4, #32]
 8011186:	4628      	mov	r0, r5
 8011188:	47b0      	blx	r6
 801118a:	1c43      	adds	r3, r0, #1
 801118c:	89a3      	ldrh	r3, [r4, #12]
 801118e:	d106      	bne.n	801119e <__sflush_r+0x66>
 8011190:	6829      	ldr	r1, [r5, #0]
 8011192:	291d      	cmp	r1, #29
 8011194:	d82c      	bhi.n	80111f0 <__sflush_r+0xb8>
 8011196:	4a2a      	ldr	r2, [pc, #168]	; (8011240 <__sflush_r+0x108>)
 8011198:	40ca      	lsrs	r2, r1
 801119a:	07d6      	lsls	r6, r2, #31
 801119c:	d528      	bpl.n	80111f0 <__sflush_r+0xb8>
 801119e:	2200      	movs	r2, #0
 80111a0:	6062      	str	r2, [r4, #4]
 80111a2:	04d9      	lsls	r1, r3, #19
 80111a4:	6922      	ldr	r2, [r4, #16]
 80111a6:	6022      	str	r2, [r4, #0]
 80111a8:	d504      	bpl.n	80111b4 <__sflush_r+0x7c>
 80111aa:	1c42      	adds	r2, r0, #1
 80111ac:	d101      	bne.n	80111b2 <__sflush_r+0x7a>
 80111ae:	682b      	ldr	r3, [r5, #0]
 80111b0:	b903      	cbnz	r3, 80111b4 <__sflush_r+0x7c>
 80111b2:	6560      	str	r0, [r4, #84]	; 0x54
 80111b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111b6:	602f      	str	r7, [r5, #0]
 80111b8:	2900      	cmp	r1, #0
 80111ba:	d0ca      	beq.n	8011152 <__sflush_r+0x1a>
 80111bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111c0:	4299      	cmp	r1, r3
 80111c2:	d002      	beq.n	80111ca <__sflush_r+0x92>
 80111c4:	4628      	mov	r0, r5
 80111c6:	f001 f8ef 	bl	80123a8 <_free_r>
 80111ca:	2000      	movs	r0, #0
 80111cc:	6360      	str	r0, [r4, #52]	; 0x34
 80111ce:	e7c1      	b.n	8011154 <__sflush_r+0x1c>
 80111d0:	6a21      	ldr	r1, [r4, #32]
 80111d2:	2301      	movs	r3, #1
 80111d4:	4628      	mov	r0, r5
 80111d6:	47b0      	blx	r6
 80111d8:	1c41      	adds	r1, r0, #1
 80111da:	d1c7      	bne.n	801116c <__sflush_r+0x34>
 80111dc:	682b      	ldr	r3, [r5, #0]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d0c4      	beq.n	801116c <__sflush_r+0x34>
 80111e2:	2b1d      	cmp	r3, #29
 80111e4:	d001      	beq.n	80111ea <__sflush_r+0xb2>
 80111e6:	2b16      	cmp	r3, #22
 80111e8:	d101      	bne.n	80111ee <__sflush_r+0xb6>
 80111ea:	602f      	str	r7, [r5, #0]
 80111ec:	e7b1      	b.n	8011152 <__sflush_r+0x1a>
 80111ee:	89a3      	ldrh	r3, [r4, #12]
 80111f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111f4:	81a3      	strh	r3, [r4, #12]
 80111f6:	e7ad      	b.n	8011154 <__sflush_r+0x1c>
 80111f8:	690f      	ldr	r7, [r1, #16]
 80111fa:	2f00      	cmp	r7, #0
 80111fc:	d0a9      	beq.n	8011152 <__sflush_r+0x1a>
 80111fe:	0793      	lsls	r3, r2, #30
 8011200:	680e      	ldr	r6, [r1, #0]
 8011202:	bf08      	it	eq
 8011204:	694b      	ldreq	r3, [r1, #20]
 8011206:	600f      	str	r7, [r1, #0]
 8011208:	bf18      	it	ne
 801120a:	2300      	movne	r3, #0
 801120c:	eba6 0807 	sub.w	r8, r6, r7
 8011210:	608b      	str	r3, [r1, #8]
 8011212:	f1b8 0f00 	cmp.w	r8, #0
 8011216:	dd9c      	ble.n	8011152 <__sflush_r+0x1a>
 8011218:	6a21      	ldr	r1, [r4, #32]
 801121a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801121c:	4643      	mov	r3, r8
 801121e:	463a      	mov	r2, r7
 8011220:	4628      	mov	r0, r5
 8011222:	47b0      	blx	r6
 8011224:	2800      	cmp	r0, #0
 8011226:	dc06      	bgt.n	8011236 <__sflush_r+0xfe>
 8011228:	89a3      	ldrh	r3, [r4, #12]
 801122a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801122e:	81a3      	strh	r3, [r4, #12]
 8011230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011234:	e78e      	b.n	8011154 <__sflush_r+0x1c>
 8011236:	4407      	add	r7, r0
 8011238:	eba8 0800 	sub.w	r8, r8, r0
 801123c:	e7e9      	b.n	8011212 <__sflush_r+0xda>
 801123e:	bf00      	nop
 8011240:	20400001 	.word	0x20400001

08011244 <_fflush_r>:
 8011244:	b538      	push	{r3, r4, r5, lr}
 8011246:	690b      	ldr	r3, [r1, #16]
 8011248:	4605      	mov	r5, r0
 801124a:	460c      	mov	r4, r1
 801124c:	b913      	cbnz	r3, 8011254 <_fflush_r+0x10>
 801124e:	2500      	movs	r5, #0
 8011250:	4628      	mov	r0, r5
 8011252:	bd38      	pop	{r3, r4, r5, pc}
 8011254:	b118      	cbz	r0, 801125e <_fflush_r+0x1a>
 8011256:	6983      	ldr	r3, [r0, #24]
 8011258:	b90b      	cbnz	r3, 801125e <_fflush_r+0x1a>
 801125a:	f7fd f90f 	bl	800e47c <__sinit>
 801125e:	4b14      	ldr	r3, [pc, #80]	; (80112b0 <_fflush_r+0x6c>)
 8011260:	429c      	cmp	r4, r3
 8011262:	d11b      	bne.n	801129c <_fflush_r+0x58>
 8011264:	686c      	ldr	r4, [r5, #4]
 8011266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d0ef      	beq.n	801124e <_fflush_r+0xa>
 801126e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011270:	07d0      	lsls	r0, r2, #31
 8011272:	d404      	bmi.n	801127e <_fflush_r+0x3a>
 8011274:	0599      	lsls	r1, r3, #22
 8011276:	d402      	bmi.n	801127e <_fflush_r+0x3a>
 8011278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801127a:	f7fd f9c2 	bl	800e602 <__retarget_lock_acquire_recursive>
 801127e:	4628      	mov	r0, r5
 8011280:	4621      	mov	r1, r4
 8011282:	f7ff ff59 	bl	8011138 <__sflush_r>
 8011286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011288:	07da      	lsls	r2, r3, #31
 801128a:	4605      	mov	r5, r0
 801128c:	d4e0      	bmi.n	8011250 <_fflush_r+0xc>
 801128e:	89a3      	ldrh	r3, [r4, #12]
 8011290:	059b      	lsls	r3, r3, #22
 8011292:	d4dd      	bmi.n	8011250 <_fflush_r+0xc>
 8011294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011296:	f7fd f9b5 	bl	800e604 <__retarget_lock_release_recursive>
 801129a:	e7d9      	b.n	8011250 <_fflush_r+0xc>
 801129c:	4b05      	ldr	r3, [pc, #20]	; (80112b4 <_fflush_r+0x70>)
 801129e:	429c      	cmp	r4, r3
 80112a0:	d101      	bne.n	80112a6 <_fflush_r+0x62>
 80112a2:	68ac      	ldr	r4, [r5, #8]
 80112a4:	e7df      	b.n	8011266 <_fflush_r+0x22>
 80112a6:	4b04      	ldr	r3, [pc, #16]	; (80112b8 <_fflush_r+0x74>)
 80112a8:	429c      	cmp	r4, r3
 80112aa:	bf08      	it	eq
 80112ac:	68ec      	ldreq	r4, [r5, #12]
 80112ae:	e7da      	b.n	8011266 <_fflush_r+0x22>
 80112b0:	08013934 	.word	0x08013934
 80112b4:	08013954 	.word	0x08013954
 80112b8:	08013914 	.word	0x08013914

080112bc <rshift>:
 80112bc:	6903      	ldr	r3, [r0, #16]
 80112be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80112c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80112ca:	f100 0414 	add.w	r4, r0, #20
 80112ce:	dd45      	ble.n	801135c <rshift+0xa0>
 80112d0:	f011 011f 	ands.w	r1, r1, #31
 80112d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80112d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80112dc:	d10c      	bne.n	80112f8 <rshift+0x3c>
 80112de:	f100 0710 	add.w	r7, r0, #16
 80112e2:	4629      	mov	r1, r5
 80112e4:	42b1      	cmp	r1, r6
 80112e6:	d334      	bcc.n	8011352 <rshift+0x96>
 80112e8:	1a9b      	subs	r3, r3, r2
 80112ea:	009b      	lsls	r3, r3, #2
 80112ec:	1eea      	subs	r2, r5, #3
 80112ee:	4296      	cmp	r6, r2
 80112f0:	bf38      	it	cc
 80112f2:	2300      	movcc	r3, #0
 80112f4:	4423      	add	r3, r4
 80112f6:	e015      	b.n	8011324 <rshift+0x68>
 80112f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80112fc:	f1c1 0820 	rsb	r8, r1, #32
 8011300:	40cf      	lsrs	r7, r1
 8011302:	f105 0e04 	add.w	lr, r5, #4
 8011306:	46a1      	mov	r9, r4
 8011308:	4576      	cmp	r6, lr
 801130a:	46f4      	mov	ip, lr
 801130c:	d815      	bhi.n	801133a <rshift+0x7e>
 801130e:	1a9b      	subs	r3, r3, r2
 8011310:	009a      	lsls	r2, r3, #2
 8011312:	3a04      	subs	r2, #4
 8011314:	3501      	adds	r5, #1
 8011316:	42ae      	cmp	r6, r5
 8011318:	bf38      	it	cc
 801131a:	2200      	movcc	r2, #0
 801131c:	18a3      	adds	r3, r4, r2
 801131e:	50a7      	str	r7, [r4, r2]
 8011320:	b107      	cbz	r7, 8011324 <rshift+0x68>
 8011322:	3304      	adds	r3, #4
 8011324:	1b1a      	subs	r2, r3, r4
 8011326:	42a3      	cmp	r3, r4
 8011328:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801132c:	bf08      	it	eq
 801132e:	2300      	moveq	r3, #0
 8011330:	6102      	str	r2, [r0, #16]
 8011332:	bf08      	it	eq
 8011334:	6143      	streq	r3, [r0, #20]
 8011336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801133a:	f8dc c000 	ldr.w	ip, [ip]
 801133e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011342:	ea4c 0707 	orr.w	r7, ip, r7
 8011346:	f849 7b04 	str.w	r7, [r9], #4
 801134a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801134e:	40cf      	lsrs	r7, r1
 8011350:	e7da      	b.n	8011308 <rshift+0x4c>
 8011352:	f851 cb04 	ldr.w	ip, [r1], #4
 8011356:	f847 cf04 	str.w	ip, [r7, #4]!
 801135a:	e7c3      	b.n	80112e4 <rshift+0x28>
 801135c:	4623      	mov	r3, r4
 801135e:	e7e1      	b.n	8011324 <rshift+0x68>

08011360 <__hexdig_fun>:
 8011360:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011364:	2b09      	cmp	r3, #9
 8011366:	d802      	bhi.n	801136e <__hexdig_fun+0xe>
 8011368:	3820      	subs	r0, #32
 801136a:	b2c0      	uxtb	r0, r0
 801136c:	4770      	bx	lr
 801136e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011372:	2b05      	cmp	r3, #5
 8011374:	d801      	bhi.n	801137a <__hexdig_fun+0x1a>
 8011376:	3847      	subs	r0, #71	; 0x47
 8011378:	e7f7      	b.n	801136a <__hexdig_fun+0xa>
 801137a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801137e:	2b05      	cmp	r3, #5
 8011380:	d801      	bhi.n	8011386 <__hexdig_fun+0x26>
 8011382:	3827      	subs	r0, #39	; 0x27
 8011384:	e7f1      	b.n	801136a <__hexdig_fun+0xa>
 8011386:	2000      	movs	r0, #0
 8011388:	4770      	bx	lr
	...

0801138c <__gethex>:
 801138c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011390:	ed2d 8b02 	vpush	{d8}
 8011394:	b089      	sub	sp, #36	; 0x24
 8011396:	ee08 0a10 	vmov	s16, r0
 801139a:	9304      	str	r3, [sp, #16]
 801139c:	4bbc      	ldr	r3, [pc, #752]	; (8011690 <__gethex+0x304>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	9301      	str	r3, [sp, #4]
 80113a2:	4618      	mov	r0, r3
 80113a4:	468b      	mov	fp, r1
 80113a6:	4690      	mov	r8, r2
 80113a8:	f7ee ff22 	bl	80001f0 <strlen>
 80113ac:	9b01      	ldr	r3, [sp, #4]
 80113ae:	f8db 2000 	ldr.w	r2, [fp]
 80113b2:	4403      	add	r3, r0
 80113b4:	4682      	mov	sl, r0
 80113b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80113ba:	9305      	str	r3, [sp, #20]
 80113bc:	1c93      	adds	r3, r2, #2
 80113be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80113c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80113c6:	32fe      	adds	r2, #254	; 0xfe
 80113c8:	18d1      	adds	r1, r2, r3
 80113ca:	461f      	mov	r7, r3
 80113cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80113d0:	9100      	str	r1, [sp, #0]
 80113d2:	2830      	cmp	r0, #48	; 0x30
 80113d4:	d0f8      	beq.n	80113c8 <__gethex+0x3c>
 80113d6:	f7ff ffc3 	bl	8011360 <__hexdig_fun>
 80113da:	4604      	mov	r4, r0
 80113dc:	2800      	cmp	r0, #0
 80113de:	d13a      	bne.n	8011456 <__gethex+0xca>
 80113e0:	9901      	ldr	r1, [sp, #4]
 80113e2:	4652      	mov	r2, sl
 80113e4:	4638      	mov	r0, r7
 80113e6:	f7fe f90a 	bl	800f5fe <strncmp>
 80113ea:	4605      	mov	r5, r0
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d168      	bne.n	80114c2 <__gethex+0x136>
 80113f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80113f4:	eb07 060a 	add.w	r6, r7, sl
 80113f8:	f7ff ffb2 	bl	8011360 <__hexdig_fun>
 80113fc:	2800      	cmp	r0, #0
 80113fe:	d062      	beq.n	80114c6 <__gethex+0x13a>
 8011400:	4633      	mov	r3, r6
 8011402:	7818      	ldrb	r0, [r3, #0]
 8011404:	2830      	cmp	r0, #48	; 0x30
 8011406:	461f      	mov	r7, r3
 8011408:	f103 0301 	add.w	r3, r3, #1
 801140c:	d0f9      	beq.n	8011402 <__gethex+0x76>
 801140e:	f7ff ffa7 	bl	8011360 <__hexdig_fun>
 8011412:	2301      	movs	r3, #1
 8011414:	fab0 f480 	clz	r4, r0
 8011418:	0964      	lsrs	r4, r4, #5
 801141a:	4635      	mov	r5, r6
 801141c:	9300      	str	r3, [sp, #0]
 801141e:	463a      	mov	r2, r7
 8011420:	4616      	mov	r6, r2
 8011422:	3201      	adds	r2, #1
 8011424:	7830      	ldrb	r0, [r6, #0]
 8011426:	f7ff ff9b 	bl	8011360 <__hexdig_fun>
 801142a:	2800      	cmp	r0, #0
 801142c:	d1f8      	bne.n	8011420 <__gethex+0x94>
 801142e:	9901      	ldr	r1, [sp, #4]
 8011430:	4652      	mov	r2, sl
 8011432:	4630      	mov	r0, r6
 8011434:	f7fe f8e3 	bl	800f5fe <strncmp>
 8011438:	b980      	cbnz	r0, 801145c <__gethex+0xd0>
 801143a:	b94d      	cbnz	r5, 8011450 <__gethex+0xc4>
 801143c:	eb06 050a 	add.w	r5, r6, sl
 8011440:	462a      	mov	r2, r5
 8011442:	4616      	mov	r6, r2
 8011444:	3201      	adds	r2, #1
 8011446:	7830      	ldrb	r0, [r6, #0]
 8011448:	f7ff ff8a 	bl	8011360 <__hexdig_fun>
 801144c:	2800      	cmp	r0, #0
 801144e:	d1f8      	bne.n	8011442 <__gethex+0xb6>
 8011450:	1bad      	subs	r5, r5, r6
 8011452:	00ad      	lsls	r5, r5, #2
 8011454:	e004      	b.n	8011460 <__gethex+0xd4>
 8011456:	2400      	movs	r4, #0
 8011458:	4625      	mov	r5, r4
 801145a:	e7e0      	b.n	801141e <__gethex+0x92>
 801145c:	2d00      	cmp	r5, #0
 801145e:	d1f7      	bne.n	8011450 <__gethex+0xc4>
 8011460:	7833      	ldrb	r3, [r6, #0]
 8011462:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011466:	2b50      	cmp	r3, #80	; 0x50
 8011468:	d13b      	bne.n	80114e2 <__gethex+0x156>
 801146a:	7873      	ldrb	r3, [r6, #1]
 801146c:	2b2b      	cmp	r3, #43	; 0x2b
 801146e:	d02c      	beq.n	80114ca <__gethex+0x13e>
 8011470:	2b2d      	cmp	r3, #45	; 0x2d
 8011472:	d02e      	beq.n	80114d2 <__gethex+0x146>
 8011474:	1c71      	adds	r1, r6, #1
 8011476:	f04f 0900 	mov.w	r9, #0
 801147a:	7808      	ldrb	r0, [r1, #0]
 801147c:	f7ff ff70 	bl	8011360 <__hexdig_fun>
 8011480:	1e43      	subs	r3, r0, #1
 8011482:	b2db      	uxtb	r3, r3
 8011484:	2b18      	cmp	r3, #24
 8011486:	d82c      	bhi.n	80114e2 <__gethex+0x156>
 8011488:	f1a0 0210 	sub.w	r2, r0, #16
 801148c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011490:	f7ff ff66 	bl	8011360 <__hexdig_fun>
 8011494:	1e43      	subs	r3, r0, #1
 8011496:	b2db      	uxtb	r3, r3
 8011498:	2b18      	cmp	r3, #24
 801149a:	d91d      	bls.n	80114d8 <__gethex+0x14c>
 801149c:	f1b9 0f00 	cmp.w	r9, #0
 80114a0:	d000      	beq.n	80114a4 <__gethex+0x118>
 80114a2:	4252      	negs	r2, r2
 80114a4:	4415      	add	r5, r2
 80114a6:	f8cb 1000 	str.w	r1, [fp]
 80114aa:	b1e4      	cbz	r4, 80114e6 <__gethex+0x15a>
 80114ac:	9b00      	ldr	r3, [sp, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	bf14      	ite	ne
 80114b2:	2700      	movne	r7, #0
 80114b4:	2706      	moveq	r7, #6
 80114b6:	4638      	mov	r0, r7
 80114b8:	b009      	add	sp, #36	; 0x24
 80114ba:	ecbd 8b02 	vpop	{d8}
 80114be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114c2:	463e      	mov	r6, r7
 80114c4:	4625      	mov	r5, r4
 80114c6:	2401      	movs	r4, #1
 80114c8:	e7ca      	b.n	8011460 <__gethex+0xd4>
 80114ca:	f04f 0900 	mov.w	r9, #0
 80114ce:	1cb1      	adds	r1, r6, #2
 80114d0:	e7d3      	b.n	801147a <__gethex+0xee>
 80114d2:	f04f 0901 	mov.w	r9, #1
 80114d6:	e7fa      	b.n	80114ce <__gethex+0x142>
 80114d8:	230a      	movs	r3, #10
 80114da:	fb03 0202 	mla	r2, r3, r2, r0
 80114de:	3a10      	subs	r2, #16
 80114e0:	e7d4      	b.n	801148c <__gethex+0x100>
 80114e2:	4631      	mov	r1, r6
 80114e4:	e7df      	b.n	80114a6 <__gethex+0x11a>
 80114e6:	1bf3      	subs	r3, r6, r7
 80114e8:	3b01      	subs	r3, #1
 80114ea:	4621      	mov	r1, r4
 80114ec:	2b07      	cmp	r3, #7
 80114ee:	dc0b      	bgt.n	8011508 <__gethex+0x17c>
 80114f0:	ee18 0a10 	vmov	r0, s16
 80114f4:	f000 fa8e 	bl	8011a14 <_Balloc>
 80114f8:	4604      	mov	r4, r0
 80114fa:	b940      	cbnz	r0, 801150e <__gethex+0x182>
 80114fc:	4b65      	ldr	r3, [pc, #404]	; (8011694 <__gethex+0x308>)
 80114fe:	4602      	mov	r2, r0
 8011500:	21de      	movs	r1, #222	; 0xde
 8011502:	4865      	ldr	r0, [pc, #404]	; (8011698 <__gethex+0x30c>)
 8011504:	f001 fd34 	bl	8012f70 <__assert_func>
 8011508:	3101      	adds	r1, #1
 801150a:	105b      	asrs	r3, r3, #1
 801150c:	e7ee      	b.n	80114ec <__gethex+0x160>
 801150e:	f100 0914 	add.w	r9, r0, #20
 8011512:	f04f 0b00 	mov.w	fp, #0
 8011516:	f1ca 0301 	rsb	r3, sl, #1
 801151a:	f8cd 9008 	str.w	r9, [sp, #8]
 801151e:	f8cd b000 	str.w	fp, [sp]
 8011522:	9306      	str	r3, [sp, #24]
 8011524:	42b7      	cmp	r7, r6
 8011526:	d340      	bcc.n	80115aa <__gethex+0x21e>
 8011528:	9802      	ldr	r0, [sp, #8]
 801152a:	9b00      	ldr	r3, [sp, #0]
 801152c:	f840 3b04 	str.w	r3, [r0], #4
 8011530:	eba0 0009 	sub.w	r0, r0, r9
 8011534:	1080      	asrs	r0, r0, #2
 8011536:	0146      	lsls	r6, r0, #5
 8011538:	6120      	str	r0, [r4, #16]
 801153a:	4618      	mov	r0, r3
 801153c:	f000 fb60 	bl	8011c00 <__hi0bits>
 8011540:	1a30      	subs	r0, r6, r0
 8011542:	f8d8 6000 	ldr.w	r6, [r8]
 8011546:	42b0      	cmp	r0, r6
 8011548:	dd63      	ble.n	8011612 <__gethex+0x286>
 801154a:	1b87      	subs	r7, r0, r6
 801154c:	4639      	mov	r1, r7
 801154e:	4620      	mov	r0, r4
 8011550:	f000 fefa 	bl	8012348 <__any_on>
 8011554:	4682      	mov	sl, r0
 8011556:	b1a8      	cbz	r0, 8011584 <__gethex+0x1f8>
 8011558:	1e7b      	subs	r3, r7, #1
 801155a:	1159      	asrs	r1, r3, #5
 801155c:	f003 021f 	and.w	r2, r3, #31
 8011560:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011564:	f04f 0a01 	mov.w	sl, #1
 8011568:	fa0a f202 	lsl.w	r2, sl, r2
 801156c:	420a      	tst	r2, r1
 801156e:	d009      	beq.n	8011584 <__gethex+0x1f8>
 8011570:	4553      	cmp	r3, sl
 8011572:	dd05      	ble.n	8011580 <__gethex+0x1f4>
 8011574:	1eb9      	subs	r1, r7, #2
 8011576:	4620      	mov	r0, r4
 8011578:	f000 fee6 	bl	8012348 <__any_on>
 801157c:	2800      	cmp	r0, #0
 801157e:	d145      	bne.n	801160c <__gethex+0x280>
 8011580:	f04f 0a02 	mov.w	sl, #2
 8011584:	4639      	mov	r1, r7
 8011586:	4620      	mov	r0, r4
 8011588:	f7ff fe98 	bl	80112bc <rshift>
 801158c:	443d      	add	r5, r7
 801158e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011592:	42ab      	cmp	r3, r5
 8011594:	da4c      	bge.n	8011630 <__gethex+0x2a4>
 8011596:	ee18 0a10 	vmov	r0, s16
 801159a:	4621      	mov	r1, r4
 801159c:	f000 fa7a 	bl	8011a94 <_Bfree>
 80115a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80115a2:	2300      	movs	r3, #0
 80115a4:	6013      	str	r3, [r2, #0]
 80115a6:	27a3      	movs	r7, #163	; 0xa3
 80115a8:	e785      	b.n	80114b6 <__gethex+0x12a>
 80115aa:	1e73      	subs	r3, r6, #1
 80115ac:	9a05      	ldr	r2, [sp, #20]
 80115ae:	9303      	str	r3, [sp, #12]
 80115b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80115b4:	4293      	cmp	r3, r2
 80115b6:	d019      	beq.n	80115ec <__gethex+0x260>
 80115b8:	f1bb 0f20 	cmp.w	fp, #32
 80115bc:	d107      	bne.n	80115ce <__gethex+0x242>
 80115be:	9b02      	ldr	r3, [sp, #8]
 80115c0:	9a00      	ldr	r2, [sp, #0]
 80115c2:	f843 2b04 	str.w	r2, [r3], #4
 80115c6:	9302      	str	r3, [sp, #8]
 80115c8:	2300      	movs	r3, #0
 80115ca:	9300      	str	r3, [sp, #0]
 80115cc:	469b      	mov	fp, r3
 80115ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80115d2:	f7ff fec5 	bl	8011360 <__hexdig_fun>
 80115d6:	9b00      	ldr	r3, [sp, #0]
 80115d8:	f000 000f 	and.w	r0, r0, #15
 80115dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80115e0:	4303      	orrs	r3, r0
 80115e2:	9300      	str	r3, [sp, #0]
 80115e4:	f10b 0b04 	add.w	fp, fp, #4
 80115e8:	9b03      	ldr	r3, [sp, #12]
 80115ea:	e00d      	b.n	8011608 <__gethex+0x27c>
 80115ec:	9b03      	ldr	r3, [sp, #12]
 80115ee:	9a06      	ldr	r2, [sp, #24]
 80115f0:	4413      	add	r3, r2
 80115f2:	42bb      	cmp	r3, r7
 80115f4:	d3e0      	bcc.n	80115b8 <__gethex+0x22c>
 80115f6:	4618      	mov	r0, r3
 80115f8:	9901      	ldr	r1, [sp, #4]
 80115fa:	9307      	str	r3, [sp, #28]
 80115fc:	4652      	mov	r2, sl
 80115fe:	f7fd fffe 	bl	800f5fe <strncmp>
 8011602:	9b07      	ldr	r3, [sp, #28]
 8011604:	2800      	cmp	r0, #0
 8011606:	d1d7      	bne.n	80115b8 <__gethex+0x22c>
 8011608:	461e      	mov	r6, r3
 801160a:	e78b      	b.n	8011524 <__gethex+0x198>
 801160c:	f04f 0a03 	mov.w	sl, #3
 8011610:	e7b8      	b.n	8011584 <__gethex+0x1f8>
 8011612:	da0a      	bge.n	801162a <__gethex+0x29e>
 8011614:	1a37      	subs	r7, r6, r0
 8011616:	4621      	mov	r1, r4
 8011618:	ee18 0a10 	vmov	r0, s16
 801161c:	463a      	mov	r2, r7
 801161e:	f000 fc55 	bl	8011ecc <__lshift>
 8011622:	1bed      	subs	r5, r5, r7
 8011624:	4604      	mov	r4, r0
 8011626:	f100 0914 	add.w	r9, r0, #20
 801162a:	f04f 0a00 	mov.w	sl, #0
 801162e:	e7ae      	b.n	801158e <__gethex+0x202>
 8011630:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011634:	42a8      	cmp	r0, r5
 8011636:	dd72      	ble.n	801171e <__gethex+0x392>
 8011638:	1b45      	subs	r5, r0, r5
 801163a:	42ae      	cmp	r6, r5
 801163c:	dc36      	bgt.n	80116ac <__gethex+0x320>
 801163e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011642:	2b02      	cmp	r3, #2
 8011644:	d02a      	beq.n	801169c <__gethex+0x310>
 8011646:	2b03      	cmp	r3, #3
 8011648:	d02c      	beq.n	80116a4 <__gethex+0x318>
 801164a:	2b01      	cmp	r3, #1
 801164c:	d115      	bne.n	801167a <__gethex+0x2ee>
 801164e:	42ae      	cmp	r6, r5
 8011650:	d113      	bne.n	801167a <__gethex+0x2ee>
 8011652:	2e01      	cmp	r6, #1
 8011654:	d10b      	bne.n	801166e <__gethex+0x2e2>
 8011656:	9a04      	ldr	r2, [sp, #16]
 8011658:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801165c:	6013      	str	r3, [r2, #0]
 801165e:	2301      	movs	r3, #1
 8011660:	6123      	str	r3, [r4, #16]
 8011662:	f8c9 3000 	str.w	r3, [r9]
 8011666:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011668:	2762      	movs	r7, #98	; 0x62
 801166a:	601c      	str	r4, [r3, #0]
 801166c:	e723      	b.n	80114b6 <__gethex+0x12a>
 801166e:	1e71      	subs	r1, r6, #1
 8011670:	4620      	mov	r0, r4
 8011672:	f000 fe69 	bl	8012348 <__any_on>
 8011676:	2800      	cmp	r0, #0
 8011678:	d1ed      	bne.n	8011656 <__gethex+0x2ca>
 801167a:	ee18 0a10 	vmov	r0, s16
 801167e:	4621      	mov	r1, r4
 8011680:	f000 fa08 	bl	8011a94 <_Bfree>
 8011684:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011686:	2300      	movs	r3, #0
 8011688:	6013      	str	r3, [r2, #0]
 801168a:	2750      	movs	r7, #80	; 0x50
 801168c:	e713      	b.n	80114b6 <__gethex+0x12a>
 801168e:	bf00      	nop
 8011690:	08013b00 	.word	0x08013b00
 8011694:	08013a83 	.word	0x08013a83
 8011698:	08013a94 	.word	0x08013a94
 801169c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d1eb      	bne.n	801167a <__gethex+0x2ee>
 80116a2:	e7d8      	b.n	8011656 <__gethex+0x2ca>
 80116a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d1d5      	bne.n	8011656 <__gethex+0x2ca>
 80116aa:	e7e6      	b.n	801167a <__gethex+0x2ee>
 80116ac:	1e6f      	subs	r7, r5, #1
 80116ae:	f1ba 0f00 	cmp.w	sl, #0
 80116b2:	d131      	bne.n	8011718 <__gethex+0x38c>
 80116b4:	b127      	cbz	r7, 80116c0 <__gethex+0x334>
 80116b6:	4639      	mov	r1, r7
 80116b8:	4620      	mov	r0, r4
 80116ba:	f000 fe45 	bl	8012348 <__any_on>
 80116be:	4682      	mov	sl, r0
 80116c0:	117b      	asrs	r3, r7, #5
 80116c2:	2101      	movs	r1, #1
 80116c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80116c8:	f007 071f 	and.w	r7, r7, #31
 80116cc:	fa01 f707 	lsl.w	r7, r1, r7
 80116d0:	421f      	tst	r7, r3
 80116d2:	4629      	mov	r1, r5
 80116d4:	4620      	mov	r0, r4
 80116d6:	bf18      	it	ne
 80116d8:	f04a 0a02 	orrne.w	sl, sl, #2
 80116dc:	1b76      	subs	r6, r6, r5
 80116de:	f7ff fded 	bl	80112bc <rshift>
 80116e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80116e6:	2702      	movs	r7, #2
 80116e8:	f1ba 0f00 	cmp.w	sl, #0
 80116ec:	d048      	beq.n	8011780 <__gethex+0x3f4>
 80116ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80116f2:	2b02      	cmp	r3, #2
 80116f4:	d015      	beq.n	8011722 <__gethex+0x396>
 80116f6:	2b03      	cmp	r3, #3
 80116f8:	d017      	beq.n	801172a <__gethex+0x39e>
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	d109      	bne.n	8011712 <__gethex+0x386>
 80116fe:	f01a 0f02 	tst.w	sl, #2
 8011702:	d006      	beq.n	8011712 <__gethex+0x386>
 8011704:	f8d9 0000 	ldr.w	r0, [r9]
 8011708:	ea4a 0a00 	orr.w	sl, sl, r0
 801170c:	f01a 0f01 	tst.w	sl, #1
 8011710:	d10e      	bne.n	8011730 <__gethex+0x3a4>
 8011712:	f047 0710 	orr.w	r7, r7, #16
 8011716:	e033      	b.n	8011780 <__gethex+0x3f4>
 8011718:	f04f 0a01 	mov.w	sl, #1
 801171c:	e7d0      	b.n	80116c0 <__gethex+0x334>
 801171e:	2701      	movs	r7, #1
 8011720:	e7e2      	b.n	80116e8 <__gethex+0x35c>
 8011722:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011724:	f1c3 0301 	rsb	r3, r3, #1
 8011728:	9315      	str	r3, [sp, #84]	; 0x54
 801172a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801172c:	2b00      	cmp	r3, #0
 801172e:	d0f0      	beq.n	8011712 <__gethex+0x386>
 8011730:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011734:	f104 0314 	add.w	r3, r4, #20
 8011738:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801173c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011740:	f04f 0c00 	mov.w	ip, #0
 8011744:	4618      	mov	r0, r3
 8011746:	f853 2b04 	ldr.w	r2, [r3], #4
 801174a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801174e:	d01c      	beq.n	801178a <__gethex+0x3fe>
 8011750:	3201      	adds	r2, #1
 8011752:	6002      	str	r2, [r0, #0]
 8011754:	2f02      	cmp	r7, #2
 8011756:	f104 0314 	add.w	r3, r4, #20
 801175a:	d13f      	bne.n	80117dc <__gethex+0x450>
 801175c:	f8d8 2000 	ldr.w	r2, [r8]
 8011760:	3a01      	subs	r2, #1
 8011762:	42b2      	cmp	r2, r6
 8011764:	d10a      	bne.n	801177c <__gethex+0x3f0>
 8011766:	1171      	asrs	r1, r6, #5
 8011768:	2201      	movs	r2, #1
 801176a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801176e:	f006 061f 	and.w	r6, r6, #31
 8011772:	fa02 f606 	lsl.w	r6, r2, r6
 8011776:	421e      	tst	r6, r3
 8011778:	bf18      	it	ne
 801177a:	4617      	movne	r7, r2
 801177c:	f047 0720 	orr.w	r7, r7, #32
 8011780:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011782:	601c      	str	r4, [r3, #0]
 8011784:	9b04      	ldr	r3, [sp, #16]
 8011786:	601d      	str	r5, [r3, #0]
 8011788:	e695      	b.n	80114b6 <__gethex+0x12a>
 801178a:	4299      	cmp	r1, r3
 801178c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011790:	d8d8      	bhi.n	8011744 <__gethex+0x3b8>
 8011792:	68a3      	ldr	r3, [r4, #8]
 8011794:	459b      	cmp	fp, r3
 8011796:	db19      	blt.n	80117cc <__gethex+0x440>
 8011798:	6861      	ldr	r1, [r4, #4]
 801179a:	ee18 0a10 	vmov	r0, s16
 801179e:	3101      	adds	r1, #1
 80117a0:	f000 f938 	bl	8011a14 <_Balloc>
 80117a4:	4681      	mov	r9, r0
 80117a6:	b918      	cbnz	r0, 80117b0 <__gethex+0x424>
 80117a8:	4b1a      	ldr	r3, [pc, #104]	; (8011814 <__gethex+0x488>)
 80117aa:	4602      	mov	r2, r0
 80117ac:	2184      	movs	r1, #132	; 0x84
 80117ae:	e6a8      	b.n	8011502 <__gethex+0x176>
 80117b0:	6922      	ldr	r2, [r4, #16]
 80117b2:	3202      	adds	r2, #2
 80117b4:	f104 010c 	add.w	r1, r4, #12
 80117b8:	0092      	lsls	r2, r2, #2
 80117ba:	300c      	adds	r0, #12
 80117bc:	f7fc ff23 	bl	800e606 <memcpy>
 80117c0:	4621      	mov	r1, r4
 80117c2:	ee18 0a10 	vmov	r0, s16
 80117c6:	f000 f965 	bl	8011a94 <_Bfree>
 80117ca:	464c      	mov	r4, r9
 80117cc:	6923      	ldr	r3, [r4, #16]
 80117ce:	1c5a      	adds	r2, r3, #1
 80117d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80117d4:	6122      	str	r2, [r4, #16]
 80117d6:	2201      	movs	r2, #1
 80117d8:	615a      	str	r2, [r3, #20]
 80117da:	e7bb      	b.n	8011754 <__gethex+0x3c8>
 80117dc:	6922      	ldr	r2, [r4, #16]
 80117de:	455a      	cmp	r2, fp
 80117e0:	dd0b      	ble.n	80117fa <__gethex+0x46e>
 80117e2:	2101      	movs	r1, #1
 80117e4:	4620      	mov	r0, r4
 80117e6:	f7ff fd69 	bl	80112bc <rshift>
 80117ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80117ee:	3501      	adds	r5, #1
 80117f0:	42ab      	cmp	r3, r5
 80117f2:	f6ff aed0 	blt.w	8011596 <__gethex+0x20a>
 80117f6:	2701      	movs	r7, #1
 80117f8:	e7c0      	b.n	801177c <__gethex+0x3f0>
 80117fa:	f016 061f 	ands.w	r6, r6, #31
 80117fe:	d0fa      	beq.n	80117f6 <__gethex+0x46a>
 8011800:	449a      	add	sl, r3
 8011802:	f1c6 0620 	rsb	r6, r6, #32
 8011806:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801180a:	f000 f9f9 	bl	8011c00 <__hi0bits>
 801180e:	42b0      	cmp	r0, r6
 8011810:	dbe7      	blt.n	80117e2 <__gethex+0x456>
 8011812:	e7f0      	b.n	80117f6 <__gethex+0x46a>
 8011814:	08013a83 	.word	0x08013a83

08011818 <L_shift>:
 8011818:	f1c2 0208 	rsb	r2, r2, #8
 801181c:	0092      	lsls	r2, r2, #2
 801181e:	b570      	push	{r4, r5, r6, lr}
 8011820:	f1c2 0620 	rsb	r6, r2, #32
 8011824:	6843      	ldr	r3, [r0, #4]
 8011826:	6804      	ldr	r4, [r0, #0]
 8011828:	fa03 f506 	lsl.w	r5, r3, r6
 801182c:	432c      	orrs	r4, r5
 801182e:	40d3      	lsrs	r3, r2
 8011830:	6004      	str	r4, [r0, #0]
 8011832:	f840 3f04 	str.w	r3, [r0, #4]!
 8011836:	4288      	cmp	r0, r1
 8011838:	d3f4      	bcc.n	8011824 <L_shift+0xc>
 801183a:	bd70      	pop	{r4, r5, r6, pc}

0801183c <__match>:
 801183c:	b530      	push	{r4, r5, lr}
 801183e:	6803      	ldr	r3, [r0, #0]
 8011840:	3301      	adds	r3, #1
 8011842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011846:	b914      	cbnz	r4, 801184e <__match+0x12>
 8011848:	6003      	str	r3, [r0, #0]
 801184a:	2001      	movs	r0, #1
 801184c:	bd30      	pop	{r4, r5, pc}
 801184e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011852:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011856:	2d19      	cmp	r5, #25
 8011858:	bf98      	it	ls
 801185a:	3220      	addls	r2, #32
 801185c:	42a2      	cmp	r2, r4
 801185e:	d0f0      	beq.n	8011842 <__match+0x6>
 8011860:	2000      	movs	r0, #0
 8011862:	e7f3      	b.n	801184c <__match+0x10>

08011864 <__hexnan>:
 8011864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011868:	680b      	ldr	r3, [r1, #0]
 801186a:	6801      	ldr	r1, [r0, #0]
 801186c:	115e      	asrs	r6, r3, #5
 801186e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011872:	f013 031f 	ands.w	r3, r3, #31
 8011876:	b087      	sub	sp, #28
 8011878:	bf18      	it	ne
 801187a:	3604      	addne	r6, #4
 801187c:	2500      	movs	r5, #0
 801187e:	1f37      	subs	r7, r6, #4
 8011880:	4682      	mov	sl, r0
 8011882:	4690      	mov	r8, r2
 8011884:	9301      	str	r3, [sp, #4]
 8011886:	f846 5c04 	str.w	r5, [r6, #-4]
 801188a:	46b9      	mov	r9, r7
 801188c:	463c      	mov	r4, r7
 801188e:	9502      	str	r5, [sp, #8]
 8011890:	46ab      	mov	fp, r5
 8011892:	784a      	ldrb	r2, [r1, #1]
 8011894:	1c4b      	adds	r3, r1, #1
 8011896:	9303      	str	r3, [sp, #12]
 8011898:	b342      	cbz	r2, 80118ec <__hexnan+0x88>
 801189a:	4610      	mov	r0, r2
 801189c:	9105      	str	r1, [sp, #20]
 801189e:	9204      	str	r2, [sp, #16]
 80118a0:	f7ff fd5e 	bl	8011360 <__hexdig_fun>
 80118a4:	2800      	cmp	r0, #0
 80118a6:	d14f      	bne.n	8011948 <__hexnan+0xe4>
 80118a8:	9a04      	ldr	r2, [sp, #16]
 80118aa:	9905      	ldr	r1, [sp, #20]
 80118ac:	2a20      	cmp	r2, #32
 80118ae:	d818      	bhi.n	80118e2 <__hexnan+0x7e>
 80118b0:	9b02      	ldr	r3, [sp, #8]
 80118b2:	459b      	cmp	fp, r3
 80118b4:	dd13      	ble.n	80118de <__hexnan+0x7a>
 80118b6:	454c      	cmp	r4, r9
 80118b8:	d206      	bcs.n	80118c8 <__hexnan+0x64>
 80118ba:	2d07      	cmp	r5, #7
 80118bc:	dc04      	bgt.n	80118c8 <__hexnan+0x64>
 80118be:	462a      	mov	r2, r5
 80118c0:	4649      	mov	r1, r9
 80118c2:	4620      	mov	r0, r4
 80118c4:	f7ff ffa8 	bl	8011818 <L_shift>
 80118c8:	4544      	cmp	r4, r8
 80118ca:	d950      	bls.n	801196e <__hexnan+0x10a>
 80118cc:	2300      	movs	r3, #0
 80118ce:	f1a4 0904 	sub.w	r9, r4, #4
 80118d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80118d6:	f8cd b008 	str.w	fp, [sp, #8]
 80118da:	464c      	mov	r4, r9
 80118dc:	461d      	mov	r5, r3
 80118de:	9903      	ldr	r1, [sp, #12]
 80118e0:	e7d7      	b.n	8011892 <__hexnan+0x2e>
 80118e2:	2a29      	cmp	r2, #41	; 0x29
 80118e4:	d156      	bne.n	8011994 <__hexnan+0x130>
 80118e6:	3102      	adds	r1, #2
 80118e8:	f8ca 1000 	str.w	r1, [sl]
 80118ec:	f1bb 0f00 	cmp.w	fp, #0
 80118f0:	d050      	beq.n	8011994 <__hexnan+0x130>
 80118f2:	454c      	cmp	r4, r9
 80118f4:	d206      	bcs.n	8011904 <__hexnan+0xa0>
 80118f6:	2d07      	cmp	r5, #7
 80118f8:	dc04      	bgt.n	8011904 <__hexnan+0xa0>
 80118fa:	462a      	mov	r2, r5
 80118fc:	4649      	mov	r1, r9
 80118fe:	4620      	mov	r0, r4
 8011900:	f7ff ff8a 	bl	8011818 <L_shift>
 8011904:	4544      	cmp	r4, r8
 8011906:	d934      	bls.n	8011972 <__hexnan+0x10e>
 8011908:	f1a8 0204 	sub.w	r2, r8, #4
 801190c:	4623      	mov	r3, r4
 801190e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011912:	f842 1f04 	str.w	r1, [r2, #4]!
 8011916:	429f      	cmp	r7, r3
 8011918:	d2f9      	bcs.n	801190e <__hexnan+0xaa>
 801191a:	1b3b      	subs	r3, r7, r4
 801191c:	f023 0303 	bic.w	r3, r3, #3
 8011920:	3304      	adds	r3, #4
 8011922:	3401      	adds	r4, #1
 8011924:	3e03      	subs	r6, #3
 8011926:	42b4      	cmp	r4, r6
 8011928:	bf88      	it	hi
 801192a:	2304      	movhi	r3, #4
 801192c:	4443      	add	r3, r8
 801192e:	2200      	movs	r2, #0
 8011930:	f843 2b04 	str.w	r2, [r3], #4
 8011934:	429f      	cmp	r7, r3
 8011936:	d2fb      	bcs.n	8011930 <__hexnan+0xcc>
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	b91b      	cbnz	r3, 8011944 <__hexnan+0xe0>
 801193c:	4547      	cmp	r7, r8
 801193e:	d127      	bne.n	8011990 <__hexnan+0x12c>
 8011940:	2301      	movs	r3, #1
 8011942:	603b      	str	r3, [r7, #0]
 8011944:	2005      	movs	r0, #5
 8011946:	e026      	b.n	8011996 <__hexnan+0x132>
 8011948:	3501      	adds	r5, #1
 801194a:	2d08      	cmp	r5, #8
 801194c:	f10b 0b01 	add.w	fp, fp, #1
 8011950:	dd06      	ble.n	8011960 <__hexnan+0xfc>
 8011952:	4544      	cmp	r4, r8
 8011954:	d9c3      	bls.n	80118de <__hexnan+0x7a>
 8011956:	2300      	movs	r3, #0
 8011958:	f844 3c04 	str.w	r3, [r4, #-4]
 801195c:	2501      	movs	r5, #1
 801195e:	3c04      	subs	r4, #4
 8011960:	6822      	ldr	r2, [r4, #0]
 8011962:	f000 000f 	and.w	r0, r0, #15
 8011966:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801196a:	6022      	str	r2, [r4, #0]
 801196c:	e7b7      	b.n	80118de <__hexnan+0x7a>
 801196e:	2508      	movs	r5, #8
 8011970:	e7b5      	b.n	80118de <__hexnan+0x7a>
 8011972:	9b01      	ldr	r3, [sp, #4]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d0df      	beq.n	8011938 <__hexnan+0xd4>
 8011978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801197c:	f1c3 0320 	rsb	r3, r3, #32
 8011980:	fa22 f303 	lsr.w	r3, r2, r3
 8011984:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011988:	401a      	ands	r2, r3
 801198a:	f846 2c04 	str.w	r2, [r6, #-4]
 801198e:	e7d3      	b.n	8011938 <__hexnan+0xd4>
 8011990:	3f04      	subs	r7, #4
 8011992:	e7d1      	b.n	8011938 <__hexnan+0xd4>
 8011994:	2004      	movs	r0, #4
 8011996:	b007      	add	sp, #28
 8011998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801199c <_localeconv_r>:
 801199c:	4800      	ldr	r0, [pc, #0]	; (80119a0 <_localeconv_r+0x4>)
 801199e:	4770      	bx	lr
 80119a0:	200002f0 	.word	0x200002f0

080119a4 <_lseek_r>:
 80119a4:	b538      	push	{r3, r4, r5, lr}
 80119a6:	4d07      	ldr	r5, [pc, #28]	; (80119c4 <_lseek_r+0x20>)
 80119a8:	4604      	mov	r4, r0
 80119aa:	4608      	mov	r0, r1
 80119ac:	4611      	mov	r1, r2
 80119ae:	2200      	movs	r2, #0
 80119b0:	602a      	str	r2, [r5, #0]
 80119b2:	461a      	mov	r2, r3
 80119b4:	f7f1 f98e 	bl	8002cd4 <_lseek>
 80119b8:	1c43      	adds	r3, r0, #1
 80119ba:	d102      	bne.n	80119c2 <_lseek_r+0x1e>
 80119bc:	682b      	ldr	r3, [r5, #0]
 80119be:	b103      	cbz	r3, 80119c2 <_lseek_r+0x1e>
 80119c0:	6023      	str	r3, [r4, #0]
 80119c2:	bd38      	pop	{r3, r4, r5, pc}
 80119c4:	200071a4 	.word	0x200071a4

080119c8 <malloc>:
 80119c8:	4b02      	ldr	r3, [pc, #8]	; (80119d4 <malloc+0xc>)
 80119ca:	4601      	mov	r1, r0
 80119cc:	6818      	ldr	r0, [r3, #0]
 80119ce:	f7fc be31 	b.w	800e634 <_malloc_r>
 80119d2:	bf00      	nop
 80119d4:	20000198 	.word	0x20000198

080119d8 <__ascii_mbtowc>:
 80119d8:	b082      	sub	sp, #8
 80119da:	b901      	cbnz	r1, 80119de <__ascii_mbtowc+0x6>
 80119dc:	a901      	add	r1, sp, #4
 80119de:	b142      	cbz	r2, 80119f2 <__ascii_mbtowc+0x1a>
 80119e0:	b14b      	cbz	r3, 80119f6 <__ascii_mbtowc+0x1e>
 80119e2:	7813      	ldrb	r3, [r2, #0]
 80119e4:	600b      	str	r3, [r1, #0]
 80119e6:	7812      	ldrb	r2, [r2, #0]
 80119e8:	1e10      	subs	r0, r2, #0
 80119ea:	bf18      	it	ne
 80119ec:	2001      	movne	r0, #1
 80119ee:	b002      	add	sp, #8
 80119f0:	4770      	bx	lr
 80119f2:	4610      	mov	r0, r2
 80119f4:	e7fb      	b.n	80119ee <__ascii_mbtowc+0x16>
 80119f6:	f06f 0001 	mvn.w	r0, #1
 80119fa:	e7f8      	b.n	80119ee <__ascii_mbtowc+0x16>

080119fc <__malloc_lock>:
 80119fc:	4801      	ldr	r0, [pc, #4]	; (8011a04 <__malloc_lock+0x8>)
 80119fe:	f7fc be00 	b.w	800e602 <__retarget_lock_acquire_recursive>
 8011a02:	bf00      	nop
 8011a04:	2000719c 	.word	0x2000719c

08011a08 <__malloc_unlock>:
 8011a08:	4801      	ldr	r0, [pc, #4]	; (8011a10 <__malloc_unlock+0x8>)
 8011a0a:	f7fc bdfb 	b.w	800e604 <__retarget_lock_release_recursive>
 8011a0e:	bf00      	nop
 8011a10:	2000719c 	.word	0x2000719c

08011a14 <_Balloc>:
 8011a14:	b570      	push	{r4, r5, r6, lr}
 8011a16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a18:	4604      	mov	r4, r0
 8011a1a:	460d      	mov	r5, r1
 8011a1c:	b976      	cbnz	r6, 8011a3c <_Balloc+0x28>
 8011a1e:	2010      	movs	r0, #16
 8011a20:	f7ff ffd2 	bl	80119c8 <malloc>
 8011a24:	4602      	mov	r2, r0
 8011a26:	6260      	str	r0, [r4, #36]	; 0x24
 8011a28:	b920      	cbnz	r0, 8011a34 <_Balloc+0x20>
 8011a2a:	4b18      	ldr	r3, [pc, #96]	; (8011a8c <_Balloc+0x78>)
 8011a2c:	4818      	ldr	r0, [pc, #96]	; (8011a90 <_Balloc+0x7c>)
 8011a2e:	2166      	movs	r1, #102	; 0x66
 8011a30:	f001 fa9e 	bl	8012f70 <__assert_func>
 8011a34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a38:	6006      	str	r6, [r0, #0]
 8011a3a:	60c6      	str	r6, [r0, #12]
 8011a3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011a3e:	68f3      	ldr	r3, [r6, #12]
 8011a40:	b183      	cbz	r3, 8011a64 <_Balloc+0x50>
 8011a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a44:	68db      	ldr	r3, [r3, #12]
 8011a46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011a4a:	b9b8      	cbnz	r0, 8011a7c <_Balloc+0x68>
 8011a4c:	2101      	movs	r1, #1
 8011a4e:	fa01 f605 	lsl.w	r6, r1, r5
 8011a52:	1d72      	adds	r2, r6, #5
 8011a54:	0092      	lsls	r2, r2, #2
 8011a56:	4620      	mov	r0, r4
 8011a58:	f000 fc97 	bl	801238a <_calloc_r>
 8011a5c:	b160      	cbz	r0, 8011a78 <_Balloc+0x64>
 8011a5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011a62:	e00e      	b.n	8011a82 <_Balloc+0x6e>
 8011a64:	2221      	movs	r2, #33	; 0x21
 8011a66:	2104      	movs	r1, #4
 8011a68:	4620      	mov	r0, r4
 8011a6a:	f000 fc8e 	bl	801238a <_calloc_r>
 8011a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a70:	60f0      	str	r0, [r6, #12]
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d1e4      	bne.n	8011a42 <_Balloc+0x2e>
 8011a78:	2000      	movs	r0, #0
 8011a7a:	bd70      	pop	{r4, r5, r6, pc}
 8011a7c:	6802      	ldr	r2, [r0, #0]
 8011a7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a82:	2300      	movs	r3, #0
 8011a84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011a88:	e7f7      	b.n	8011a7a <_Balloc+0x66>
 8011a8a:	bf00      	nop
 8011a8c:	08013a0d 	.word	0x08013a0d
 8011a90:	08013b14 	.word	0x08013b14

08011a94 <_Bfree>:
 8011a94:	b570      	push	{r4, r5, r6, lr}
 8011a96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a98:	4605      	mov	r5, r0
 8011a9a:	460c      	mov	r4, r1
 8011a9c:	b976      	cbnz	r6, 8011abc <_Bfree+0x28>
 8011a9e:	2010      	movs	r0, #16
 8011aa0:	f7ff ff92 	bl	80119c8 <malloc>
 8011aa4:	4602      	mov	r2, r0
 8011aa6:	6268      	str	r0, [r5, #36]	; 0x24
 8011aa8:	b920      	cbnz	r0, 8011ab4 <_Bfree+0x20>
 8011aaa:	4b09      	ldr	r3, [pc, #36]	; (8011ad0 <_Bfree+0x3c>)
 8011aac:	4809      	ldr	r0, [pc, #36]	; (8011ad4 <_Bfree+0x40>)
 8011aae:	218a      	movs	r1, #138	; 0x8a
 8011ab0:	f001 fa5e 	bl	8012f70 <__assert_func>
 8011ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ab8:	6006      	str	r6, [r0, #0]
 8011aba:	60c6      	str	r6, [r0, #12]
 8011abc:	b13c      	cbz	r4, 8011ace <_Bfree+0x3a>
 8011abe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011ac0:	6862      	ldr	r2, [r4, #4]
 8011ac2:	68db      	ldr	r3, [r3, #12]
 8011ac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011ac8:	6021      	str	r1, [r4, #0]
 8011aca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011ace:	bd70      	pop	{r4, r5, r6, pc}
 8011ad0:	08013a0d 	.word	0x08013a0d
 8011ad4:	08013b14 	.word	0x08013b14

08011ad8 <__multadd>:
 8011ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011adc:	690e      	ldr	r6, [r1, #16]
 8011ade:	4607      	mov	r7, r0
 8011ae0:	4698      	mov	r8, r3
 8011ae2:	460c      	mov	r4, r1
 8011ae4:	f101 0014 	add.w	r0, r1, #20
 8011ae8:	2300      	movs	r3, #0
 8011aea:	6805      	ldr	r5, [r0, #0]
 8011aec:	b2a9      	uxth	r1, r5
 8011aee:	fb02 8101 	mla	r1, r2, r1, r8
 8011af2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011af6:	0c2d      	lsrs	r5, r5, #16
 8011af8:	fb02 c505 	mla	r5, r2, r5, ip
 8011afc:	b289      	uxth	r1, r1
 8011afe:	3301      	adds	r3, #1
 8011b00:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011b04:	429e      	cmp	r6, r3
 8011b06:	f840 1b04 	str.w	r1, [r0], #4
 8011b0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011b0e:	dcec      	bgt.n	8011aea <__multadd+0x12>
 8011b10:	f1b8 0f00 	cmp.w	r8, #0
 8011b14:	d022      	beq.n	8011b5c <__multadd+0x84>
 8011b16:	68a3      	ldr	r3, [r4, #8]
 8011b18:	42b3      	cmp	r3, r6
 8011b1a:	dc19      	bgt.n	8011b50 <__multadd+0x78>
 8011b1c:	6861      	ldr	r1, [r4, #4]
 8011b1e:	4638      	mov	r0, r7
 8011b20:	3101      	adds	r1, #1
 8011b22:	f7ff ff77 	bl	8011a14 <_Balloc>
 8011b26:	4605      	mov	r5, r0
 8011b28:	b928      	cbnz	r0, 8011b36 <__multadd+0x5e>
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	4b0d      	ldr	r3, [pc, #52]	; (8011b64 <__multadd+0x8c>)
 8011b2e:	480e      	ldr	r0, [pc, #56]	; (8011b68 <__multadd+0x90>)
 8011b30:	21b5      	movs	r1, #181	; 0xb5
 8011b32:	f001 fa1d 	bl	8012f70 <__assert_func>
 8011b36:	6922      	ldr	r2, [r4, #16]
 8011b38:	3202      	adds	r2, #2
 8011b3a:	f104 010c 	add.w	r1, r4, #12
 8011b3e:	0092      	lsls	r2, r2, #2
 8011b40:	300c      	adds	r0, #12
 8011b42:	f7fc fd60 	bl	800e606 <memcpy>
 8011b46:	4621      	mov	r1, r4
 8011b48:	4638      	mov	r0, r7
 8011b4a:	f7ff ffa3 	bl	8011a94 <_Bfree>
 8011b4e:	462c      	mov	r4, r5
 8011b50:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011b54:	3601      	adds	r6, #1
 8011b56:	f8c3 8014 	str.w	r8, [r3, #20]
 8011b5a:	6126      	str	r6, [r4, #16]
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b62:	bf00      	nop
 8011b64:	08013a83 	.word	0x08013a83
 8011b68:	08013b14 	.word	0x08013b14

08011b6c <__s2b>:
 8011b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b70:	460c      	mov	r4, r1
 8011b72:	4615      	mov	r5, r2
 8011b74:	461f      	mov	r7, r3
 8011b76:	2209      	movs	r2, #9
 8011b78:	3308      	adds	r3, #8
 8011b7a:	4606      	mov	r6, r0
 8011b7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b80:	2100      	movs	r1, #0
 8011b82:	2201      	movs	r2, #1
 8011b84:	429a      	cmp	r2, r3
 8011b86:	db09      	blt.n	8011b9c <__s2b+0x30>
 8011b88:	4630      	mov	r0, r6
 8011b8a:	f7ff ff43 	bl	8011a14 <_Balloc>
 8011b8e:	b940      	cbnz	r0, 8011ba2 <__s2b+0x36>
 8011b90:	4602      	mov	r2, r0
 8011b92:	4b19      	ldr	r3, [pc, #100]	; (8011bf8 <__s2b+0x8c>)
 8011b94:	4819      	ldr	r0, [pc, #100]	; (8011bfc <__s2b+0x90>)
 8011b96:	21ce      	movs	r1, #206	; 0xce
 8011b98:	f001 f9ea 	bl	8012f70 <__assert_func>
 8011b9c:	0052      	lsls	r2, r2, #1
 8011b9e:	3101      	adds	r1, #1
 8011ba0:	e7f0      	b.n	8011b84 <__s2b+0x18>
 8011ba2:	9b08      	ldr	r3, [sp, #32]
 8011ba4:	6143      	str	r3, [r0, #20]
 8011ba6:	2d09      	cmp	r5, #9
 8011ba8:	f04f 0301 	mov.w	r3, #1
 8011bac:	6103      	str	r3, [r0, #16]
 8011bae:	dd16      	ble.n	8011bde <__s2b+0x72>
 8011bb0:	f104 0909 	add.w	r9, r4, #9
 8011bb4:	46c8      	mov	r8, r9
 8011bb6:	442c      	add	r4, r5
 8011bb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011bbc:	4601      	mov	r1, r0
 8011bbe:	3b30      	subs	r3, #48	; 0x30
 8011bc0:	220a      	movs	r2, #10
 8011bc2:	4630      	mov	r0, r6
 8011bc4:	f7ff ff88 	bl	8011ad8 <__multadd>
 8011bc8:	45a0      	cmp	r8, r4
 8011bca:	d1f5      	bne.n	8011bb8 <__s2b+0x4c>
 8011bcc:	f1a5 0408 	sub.w	r4, r5, #8
 8011bd0:	444c      	add	r4, r9
 8011bd2:	1b2d      	subs	r5, r5, r4
 8011bd4:	1963      	adds	r3, r4, r5
 8011bd6:	42bb      	cmp	r3, r7
 8011bd8:	db04      	blt.n	8011be4 <__s2b+0x78>
 8011bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bde:	340a      	adds	r4, #10
 8011be0:	2509      	movs	r5, #9
 8011be2:	e7f6      	b.n	8011bd2 <__s2b+0x66>
 8011be4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011be8:	4601      	mov	r1, r0
 8011bea:	3b30      	subs	r3, #48	; 0x30
 8011bec:	220a      	movs	r2, #10
 8011bee:	4630      	mov	r0, r6
 8011bf0:	f7ff ff72 	bl	8011ad8 <__multadd>
 8011bf4:	e7ee      	b.n	8011bd4 <__s2b+0x68>
 8011bf6:	bf00      	nop
 8011bf8:	08013a83 	.word	0x08013a83
 8011bfc:	08013b14 	.word	0x08013b14

08011c00 <__hi0bits>:
 8011c00:	0c03      	lsrs	r3, r0, #16
 8011c02:	041b      	lsls	r3, r3, #16
 8011c04:	b9d3      	cbnz	r3, 8011c3c <__hi0bits+0x3c>
 8011c06:	0400      	lsls	r0, r0, #16
 8011c08:	2310      	movs	r3, #16
 8011c0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011c0e:	bf04      	itt	eq
 8011c10:	0200      	lsleq	r0, r0, #8
 8011c12:	3308      	addeq	r3, #8
 8011c14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011c18:	bf04      	itt	eq
 8011c1a:	0100      	lsleq	r0, r0, #4
 8011c1c:	3304      	addeq	r3, #4
 8011c1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011c22:	bf04      	itt	eq
 8011c24:	0080      	lsleq	r0, r0, #2
 8011c26:	3302      	addeq	r3, #2
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	db05      	blt.n	8011c38 <__hi0bits+0x38>
 8011c2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011c30:	f103 0301 	add.w	r3, r3, #1
 8011c34:	bf08      	it	eq
 8011c36:	2320      	moveq	r3, #32
 8011c38:	4618      	mov	r0, r3
 8011c3a:	4770      	bx	lr
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	e7e4      	b.n	8011c0a <__hi0bits+0xa>

08011c40 <__lo0bits>:
 8011c40:	6803      	ldr	r3, [r0, #0]
 8011c42:	f013 0207 	ands.w	r2, r3, #7
 8011c46:	4601      	mov	r1, r0
 8011c48:	d00b      	beq.n	8011c62 <__lo0bits+0x22>
 8011c4a:	07da      	lsls	r2, r3, #31
 8011c4c:	d424      	bmi.n	8011c98 <__lo0bits+0x58>
 8011c4e:	0798      	lsls	r0, r3, #30
 8011c50:	bf49      	itett	mi
 8011c52:	085b      	lsrmi	r3, r3, #1
 8011c54:	089b      	lsrpl	r3, r3, #2
 8011c56:	2001      	movmi	r0, #1
 8011c58:	600b      	strmi	r3, [r1, #0]
 8011c5a:	bf5c      	itt	pl
 8011c5c:	600b      	strpl	r3, [r1, #0]
 8011c5e:	2002      	movpl	r0, #2
 8011c60:	4770      	bx	lr
 8011c62:	b298      	uxth	r0, r3
 8011c64:	b9b0      	cbnz	r0, 8011c94 <__lo0bits+0x54>
 8011c66:	0c1b      	lsrs	r3, r3, #16
 8011c68:	2010      	movs	r0, #16
 8011c6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011c6e:	bf04      	itt	eq
 8011c70:	0a1b      	lsreq	r3, r3, #8
 8011c72:	3008      	addeq	r0, #8
 8011c74:	071a      	lsls	r2, r3, #28
 8011c76:	bf04      	itt	eq
 8011c78:	091b      	lsreq	r3, r3, #4
 8011c7a:	3004      	addeq	r0, #4
 8011c7c:	079a      	lsls	r2, r3, #30
 8011c7e:	bf04      	itt	eq
 8011c80:	089b      	lsreq	r3, r3, #2
 8011c82:	3002      	addeq	r0, #2
 8011c84:	07da      	lsls	r2, r3, #31
 8011c86:	d403      	bmi.n	8011c90 <__lo0bits+0x50>
 8011c88:	085b      	lsrs	r3, r3, #1
 8011c8a:	f100 0001 	add.w	r0, r0, #1
 8011c8e:	d005      	beq.n	8011c9c <__lo0bits+0x5c>
 8011c90:	600b      	str	r3, [r1, #0]
 8011c92:	4770      	bx	lr
 8011c94:	4610      	mov	r0, r2
 8011c96:	e7e8      	b.n	8011c6a <__lo0bits+0x2a>
 8011c98:	2000      	movs	r0, #0
 8011c9a:	4770      	bx	lr
 8011c9c:	2020      	movs	r0, #32
 8011c9e:	4770      	bx	lr

08011ca0 <__i2b>:
 8011ca0:	b510      	push	{r4, lr}
 8011ca2:	460c      	mov	r4, r1
 8011ca4:	2101      	movs	r1, #1
 8011ca6:	f7ff feb5 	bl	8011a14 <_Balloc>
 8011caa:	4602      	mov	r2, r0
 8011cac:	b928      	cbnz	r0, 8011cba <__i2b+0x1a>
 8011cae:	4b05      	ldr	r3, [pc, #20]	; (8011cc4 <__i2b+0x24>)
 8011cb0:	4805      	ldr	r0, [pc, #20]	; (8011cc8 <__i2b+0x28>)
 8011cb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011cb6:	f001 f95b 	bl	8012f70 <__assert_func>
 8011cba:	2301      	movs	r3, #1
 8011cbc:	6144      	str	r4, [r0, #20]
 8011cbe:	6103      	str	r3, [r0, #16]
 8011cc0:	bd10      	pop	{r4, pc}
 8011cc2:	bf00      	nop
 8011cc4:	08013a83 	.word	0x08013a83
 8011cc8:	08013b14 	.word	0x08013b14

08011ccc <__multiply>:
 8011ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd0:	4614      	mov	r4, r2
 8011cd2:	690a      	ldr	r2, [r1, #16]
 8011cd4:	6923      	ldr	r3, [r4, #16]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	bfb8      	it	lt
 8011cda:	460b      	movlt	r3, r1
 8011cdc:	460d      	mov	r5, r1
 8011cde:	bfbc      	itt	lt
 8011ce0:	4625      	movlt	r5, r4
 8011ce2:	461c      	movlt	r4, r3
 8011ce4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011ce8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011cec:	68ab      	ldr	r3, [r5, #8]
 8011cee:	6869      	ldr	r1, [r5, #4]
 8011cf0:	eb0a 0709 	add.w	r7, sl, r9
 8011cf4:	42bb      	cmp	r3, r7
 8011cf6:	b085      	sub	sp, #20
 8011cf8:	bfb8      	it	lt
 8011cfa:	3101      	addlt	r1, #1
 8011cfc:	f7ff fe8a 	bl	8011a14 <_Balloc>
 8011d00:	b930      	cbnz	r0, 8011d10 <__multiply+0x44>
 8011d02:	4602      	mov	r2, r0
 8011d04:	4b42      	ldr	r3, [pc, #264]	; (8011e10 <__multiply+0x144>)
 8011d06:	4843      	ldr	r0, [pc, #268]	; (8011e14 <__multiply+0x148>)
 8011d08:	f240 115d 	movw	r1, #349	; 0x15d
 8011d0c:	f001 f930 	bl	8012f70 <__assert_func>
 8011d10:	f100 0614 	add.w	r6, r0, #20
 8011d14:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011d18:	4633      	mov	r3, r6
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	4543      	cmp	r3, r8
 8011d1e:	d31e      	bcc.n	8011d5e <__multiply+0x92>
 8011d20:	f105 0c14 	add.w	ip, r5, #20
 8011d24:	f104 0314 	add.w	r3, r4, #20
 8011d28:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011d2c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011d30:	9202      	str	r2, [sp, #8]
 8011d32:	ebac 0205 	sub.w	r2, ip, r5
 8011d36:	3a15      	subs	r2, #21
 8011d38:	f022 0203 	bic.w	r2, r2, #3
 8011d3c:	3204      	adds	r2, #4
 8011d3e:	f105 0115 	add.w	r1, r5, #21
 8011d42:	458c      	cmp	ip, r1
 8011d44:	bf38      	it	cc
 8011d46:	2204      	movcc	r2, #4
 8011d48:	9201      	str	r2, [sp, #4]
 8011d4a:	9a02      	ldr	r2, [sp, #8]
 8011d4c:	9303      	str	r3, [sp, #12]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d808      	bhi.n	8011d64 <__multiply+0x98>
 8011d52:	2f00      	cmp	r7, #0
 8011d54:	dc55      	bgt.n	8011e02 <__multiply+0x136>
 8011d56:	6107      	str	r7, [r0, #16]
 8011d58:	b005      	add	sp, #20
 8011d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d5e:	f843 2b04 	str.w	r2, [r3], #4
 8011d62:	e7db      	b.n	8011d1c <__multiply+0x50>
 8011d64:	f8b3 a000 	ldrh.w	sl, [r3]
 8011d68:	f1ba 0f00 	cmp.w	sl, #0
 8011d6c:	d020      	beq.n	8011db0 <__multiply+0xe4>
 8011d6e:	f105 0e14 	add.w	lr, r5, #20
 8011d72:	46b1      	mov	r9, r6
 8011d74:	2200      	movs	r2, #0
 8011d76:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011d7a:	f8d9 b000 	ldr.w	fp, [r9]
 8011d7e:	b2a1      	uxth	r1, r4
 8011d80:	fa1f fb8b 	uxth.w	fp, fp
 8011d84:	fb0a b101 	mla	r1, sl, r1, fp
 8011d88:	4411      	add	r1, r2
 8011d8a:	f8d9 2000 	ldr.w	r2, [r9]
 8011d8e:	0c24      	lsrs	r4, r4, #16
 8011d90:	0c12      	lsrs	r2, r2, #16
 8011d92:	fb0a 2404 	mla	r4, sl, r4, r2
 8011d96:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011d9a:	b289      	uxth	r1, r1
 8011d9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011da0:	45f4      	cmp	ip, lr
 8011da2:	f849 1b04 	str.w	r1, [r9], #4
 8011da6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011daa:	d8e4      	bhi.n	8011d76 <__multiply+0xaa>
 8011dac:	9901      	ldr	r1, [sp, #4]
 8011dae:	5072      	str	r2, [r6, r1]
 8011db0:	9a03      	ldr	r2, [sp, #12]
 8011db2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011db6:	3304      	adds	r3, #4
 8011db8:	f1b9 0f00 	cmp.w	r9, #0
 8011dbc:	d01f      	beq.n	8011dfe <__multiply+0x132>
 8011dbe:	6834      	ldr	r4, [r6, #0]
 8011dc0:	f105 0114 	add.w	r1, r5, #20
 8011dc4:	46b6      	mov	lr, r6
 8011dc6:	f04f 0a00 	mov.w	sl, #0
 8011dca:	880a      	ldrh	r2, [r1, #0]
 8011dcc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011dd0:	fb09 b202 	mla	r2, r9, r2, fp
 8011dd4:	4492      	add	sl, r2
 8011dd6:	b2a4      	uxth	r4, r4
 8011dd8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011ddc:	f84e 4b04 	str.w	r4, [lr], #4
 8011de0:	f851 4b04 	ldr.w	r4, [r1], #4
 8011de4:	f8be 2000 	ldrh.w	r2, [lr]
 8011de8:	0c24      	lsrs	r4, r4, #16
 8011dea:	fb09 2404 	mla	r4, r9, r4, r2
 8011dee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011df2:	458c      	cmp	ip, r1
 8011df4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011df8:	d8e7      	bhi.n	8011dca <__multiply+0xfe>
 8011dfa:	9a01      	ldr	r2, [sp, #4]
 8011dfc:	50b4      	str	r4, [r6, r2]
 8011dfe:	3604      	adds	r6, #4
 8011e00:	e7a3      	b.n	8011d4a <__multiply+0x7e>
 8011e02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d1a5      	bne.n	8011d56 <__multiply+0x8a>
 8011e0a:	3f01      	subs	r7, #1
 8011e0c:	e7a1      	b.n	8011d52 <__multiply+0x86>
 8011e0e:	bf00      	nop
 8011e10:	08013a83 	.word	0x08013a83
 8011e14:	08013b14 	.word	0x08013b14

08011e18 <__pow5mult>:
 8011e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e1c:	4615      	mov	r5, r2
 8011e1e:	f012 0203 	ands.w	r2, r2, #3
 8011e22:	4606      	mov	r6, r0
 8011e24:	460f      	mov	r7, r1
 8011e26:	d007      	beq.n	8011e38 <__pow5mult+0x20>
 8011e28:	4c25      	ldr	r4, [pc, #148]	; (8011ec0 <__pow5mult+0xa8>)
 8011e2a:	3a01      	subs	r2, #1
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011e32:	f7ff fe51 	bl	8011ad8 <__multadd>
 8011e36:	4607      	mov	r7, r0
 8011e38:	10ad      	asrs	r5, r5, #2
 8011e3a:	d03d      	beq.n	8011eb8 <__pow5mult+0xa0>
 8011e3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011e3e:	b97c      	cbnz	r4, 8011e60 <__pow5mult+0x48>
 8011e40:	2010      	movs	r0, #16
 8011e42:	f7ff fdc1 	bl	80119c8 <malloc>
 8011e46:	4602      	mov	r2, r0
 8011e48:	6270      	str	r0, [r6, #36]	; 0x24
 8011e4a:	b928      	cbnz	r0, 8011e58 <__pow5mult+0x40>
 8011e4c:	4b1d      	ldr	r3, [pc, #116]	; (8011ec4 <__pow5mult+0xac>)
 8011e4e:	481e      	ldr	r0, [pc, #120]	; (8011ec8 <__pow5mult+0xb0>)
 8011e50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011e54:	f001 f88c 	bl	8012f70 <__assert_func>
 8011e58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011e5c:	6004      	str	r4, [r0, #0]
 8011e5e:	60c4      	str	r4, [r0, #12]
 8011e60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011e64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011e68:	b94c      	cbnz	r4, 8011e7e <__pow5mult+0x66>
 8011e6a:	f240 2171 	movw	r1, #625	; 0x271
 8011e6e:	4630      	mov	r0, r6
 8011e70:	f7ff ff16 	bl	8011ca0 <__i2b>
 8011e74:	2300      	movs	r3, #0
 8011e76:	f8c8 0008 	str.w	r0, [r8, #8]
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	6003      	str	r3, [r0, #0]
 8011e7e:	f04f 0900 	mov.w	r9, #0
 8011e82:	07eb      	lsls	r3, r5, #31
 8011e84:	d50a      	bpl.n	8011e9c <__pow5mult+0x84>
 8011e86:	4639      	mov	r1, r7
 8011e88:	4622      	mov	r2, r4
 8011e8a:	4630      	mov	r0, r6
 8011e8c:	f7ff ff1e 	bl	8011ccc <__multiply>
 8011e90:	4639      	mov	r1, r7
 8011e92:	4680      	mov	r8, r0
 8011e94:	4630      	mov	r0, r6
 8011e96:	f7ff fdfd 	bl	8011a94 <_Bfree>
 8011e9a:	4647      	mov	r7, r8
 8011e9c:	106d      	asrs	r5, r5, #1
 8011e9e:	d00b      	beq.n	8011eb8 <__pow5mult+0xa0>
 8011ea0:	6820      	ldr	r0, [r4, #0]
 8011ea2:	b938      	cbnz	r0, 8011eb4 <__pow5mult+0x9c>
 8011ea4:	4622      	mov	r2, r4
 8011ea6:	4621      	mov	r1, r4
 8011ea8:	4630      	mov	r0, r6
 8011eaa:	f7ff ff0f 	bl	8011ccc <__multiply>
 8011eae:	6020      	str	r0, [r4, #0]
 8011eb0:	f8c0 9000 	str.w	r9, [r0]
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	e7e4      	b.n	8011e82 <__pow5mult+0x6a>
 8011eb8:	4638      	mov	r0, r7
 8011eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ebe:	bf00      	nop
 8011ec0:	08013c68 	.word	0x08013c68
 8011ec4:	08013a0d 	.word	0x08013a0d
 8011ec8:	08013b14 	.word	0x08013b14

08011ecc <__lshift>:
 8011ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ed0:	460c      	mov	r4, r1
 8011ed2:	6849      	ldr	r1, [r1, #4]
 8011ed4:	6923      	ldr	r3, [r4, #16]
 8011ed6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011eda:	68a3      	ldr	r3, [r4, #8]
 8011edc:	4607      	mov	r7, r0
 8011ede:	4691      	mov	r9, r2
 8011ee0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011ee4:	f108 0601 	add.w	r6, r8, #1
 8011ee8:	42b3      	cmp	r3, r6
 8011eea:	db0b      	blt.n	8011f04 <__lshift+0x38>
 8011eec:	4638      	mov	r0, r7
 8011eee:	f7ff fd91 	bl	8011a14 <_Balloc>
 8011ef2:	4605      	mov	r5, r0
 8011ef4:	b948      	cbnz	r0, 8011f0a <__lshift+0x3e>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	4b28      	ldr	r3, [pc, #160]	; (8011f9c <__lshift+0xd0>)
 8011efa:	4829      	ldr	r0, [pc, #164]	; (8011fa0 <__lshift+0xd4>)
 8011efc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011f00:	f001 f836 	bl	8012f70 <__assert_func>
 8011f04:	3101      	adds	r1, #1
 8011f06:	005b      	lsls	r3, r3, #1
 8011f08:	e7ee      	b.n	8011ee8 <__lshift+0x1c>
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	f100 0114 	add.w	r1, r0, #20
 8011f10:	f100 0210 	add.w	r2, r0, #16
 8011f14:	4618      	mov	r0, r3
 8011f16:	4553      	cmp	r3, sl
 8011f18:	db33      	blt.n	8011f82 <__lshift+0xb6>
 8011f1a:	6920      	ldr	r0, [r4, #16]
 8011f1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011f20:	f104 0314 	add.w	r3, r4, #20
 8011f24:	f019 091f 	ands.w	r9, r9, #31
 8011f28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011f2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011f30:	d02b      	beq.n	8011f8a <__lshift+0xbe>
 8011f32:	f1c9 0e20 	rsb	lr, r9, #32
 8011f36:	468a      	mov	sl, r1
 8011f38:	2200      	movs	r2, #0
 8011f3a:	6818      	ldr	r0, [r3, #0]
 8011f3c:	fa00 f009 	lsl.w	r0, r0, r9
 8011f40:	4302      	orrs	r2, r0
 8011f42:	f84a 2b04 	str.w	r2, [sl], #4
 8011f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f4a:	459c      	cmp	ip, r3
 8011f4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011f50:	d8f3      	bhi.n	8011f3a <__lshift+0x6e>
 8011f52:	ebac 0304 	sub.w	r3, ip, r4
 8011f56:	3b15      	subs	r3, #21
 8011f58:	f023 0303 	bic.w	r3, r3, #3
 8011f5c:	3304      	adds	r3, #4
 8011f5e:	f104 0015 	add.w	r0, r4, #21
 8011f62:	4584      	cmp	ip, r0
 8011f64:	bf38      	it	cc
 8011f66:	2304      	movcc	r3, #4
 8011f68:	50ca      	str	r2, [r1, r3]
 8011f6a:	b10a      	cbz	r2, 8011f70 <__lshift+0xa4>
 8011f6c:	f108 0602 	add.w	r6, r8, #2
 8011f70:	3e01      	subs	r6, #1
 8011f72:	4638      	mov	r0, r7
 8011f74:	612e      	str	r6, [r5, #16]
 8011f76:	4621      	mov	r1, r4
 8011f78:	f7ff fd8c 	bl	8011a94 <_Bfree>
 8011f7c:	4628      	mov	r0, r5
 8011f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f82:	f842 0f04 	str.w	r0, [r2, #4]!
 8011f86:	3301      	adds	r3, #1
 8011f88:	e7c5      	b.n	8011f16 <__lshift+0x4a>
 8011f8a:	3904      	subs	r1, #4
 8011f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f90:	f841 2f04 	str.w	r2, [r1, #4]!
 8011f94:	459c      	cmp	ip, r3
 8011f96:	d8f9      	bhi.n	8011f8c <__lshift+0xc0>
 8011f98:	e7ea      	b.n	8011f70 <__lshift+0xa4>
 8011f9a:	bf00      	nop
 8011f9c:	08013a83 	.word	0x08013a83
 8011fa0:	08013b14 	.word	0x08013b14

08011fa4 <__mcmp>:
 8011fa4:	b530      	push	{r4, r5, lr}
 8011fa6:	6902      	ldr	r2, [r0, #16]
 8011fa8:	690c      	ldr	r4, [r1, #16]
 8011faa:	1b12      	subs	r2, r2, r4
 8011fac:	d10e      	bne.n	8011fcc <__mcmp+0x28>
 8011fae:	f100 0314 	add.w	r3, r0, #20
 8011fb2:	3114      	adds	r1, #20
 8011fb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011fb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011fbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011fc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011fc4:	42a5      	cmp	r5, r4
 8011fc6:	d003      	beq.n	8011fd0 <__mcmp+0x2c>
 8011fc8:	d305      	bcc.n	8011fd6 <__mcmp+0x32>
 8011fca:	2201      	movs	r2, #1
 8011fcc:	4610      	mov	r0, r2
 8011fce:	bd30      	pop	{r4, r5, pc}
 8011fd0:	4283      	cmp	r3, r0
 8011fd2:	d3f3      	bcc.n	8011fbc <__mcmp+0x18>
 8011fd4:	e7fa      	b.n	8011fcc <__mcmp+0x28>
 8011fd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011fda:	e7f7      	b.n	8011fcc <__mcmp+0x28>

08011fdc <__mdiff>:
 8011fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe0:	460c      	mov	r4, r1
 8011fe2:	4606      	mov	r6, r0
 8011fe4:	4611      	mov	r1, r2
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	4617      	mov	r7, r2
 8011fea:	f7ff ffdb 	bl	8011fa4 <__mcmp>
 8011fee:	1e05      	subs	r5, r0, #0
 8011ff0:	d110      	bne.n	8012014 <__mdiff+0x38>
 8011ff2:	4629      	mov	r1, r5
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	f7ff fd0d 	bl	8011a14 <_Balloc>
 8011ffa:	b930      	cbnz	r0, 801200a <__mdiff+0x2e>
 8011ffc:	4b39      	ldr	r3, [pc, #228]	; (80120e4 <__mdiff+0x108>)
 8011ffe:	4602      	mov	r2, r0
 8012000:	f240 2132 	movw	r1, #562	; 0x232
 8012004:	4838      	ldr	r0, [pc, #224]	; (80120e8 <__mdiff+0x10c>)
 8012006:	f000 ffb3 	bl	8012f70 <__assert_func>
 801200a:	2301      	movs	r3, #1
 801200c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012014:	bfa4      	itt	ge
 8012016:	463b      	movge	r3, r7
 8012018:	4627      	movge	r7, r4
 801201a:	4630      	mov	r0, r6
 801201c:	6879      	ldr	r1, [r7, #4]
 801201e:	bfa6      	itte	ge
 8012020:	461c      	movge	r4, r3
 8012022:	2500      	movge	r5, #0
 8012024:	2501      	movlt	r5, #1
 8012026:	f7ff fcf5 	bl	8011a14 <_Balloc>
 801202a:	b920      	cbnz	r0, 8012036 <__mdiff+0x5a>
 801202c:	4b2d      	ldr	r3, [pc, #180]	; (80120e4 <__mdiff+0x108>)
 801202e:	4602      	mov	r2, r0
 8012030:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012034:	e7e6      	b.n	8012004 <__mdiff+0x28>
 8012036:	693e      	ldr	r6, [r7, #16]
 8012038:	60c5      	str	r5, [r0, #12]
 801203a:	6925      	ldr	r5, [r4, #16]
 801203c:	f107 0114 	add.w	r1, r7, #20
 8012040:	f104 0914 	add.w	r9, r4, #20
 8012044:	f100 0e14 	add.w	lr, r0, #20
 8012048:	f107 0210 	add.w	r2, r7, #16
 801204c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012050:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012054:	46f2      	mov	sl, lr
 8012056:	2700      	movs	r7, #0
 8012058:	f859 3b04 	ldr.w	r3, [r9], #4
 801205c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012060:	fa1f f883 	uxth.w	r8, r3
 8012064:	fa17 f78b 	uxtah	r7, r7, fp
 8012068:	0c1b      	lsrs	r3, r3, #16
 801206a:	eba7 0808 	sub.w	r8, r7, r8
 801206e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012072:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012076:	fa1f f888 	uxth.w	r8, r8
 801207a:	141f      	asrs	r7, r3, #16
 801207c:	454d      	cmp	r5, r9
 801207e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012082:	f84a 3b04 	str.w	r3, [sl], #4
 8012086:	d8e7      	bhi.n	8012058 <__mdiff+0x7c>
 8012088:	1b2b      	subs	r3, r5, r4
 801208a:	3b15      	subs	r3, #21
 801208c:	f023 0303 	bic.w	r3, r3, #3
 8012090:	3304      	adds	r3, #4
 8012092:	3415      	adds	r4, #21
 8012094:	42a5      	cmp	r5, r4
 8012096:	bf38      	it	cc
 8012098:	2304      	movcc	r3, #4
 801209a:	4419      	add	r1, r3
 801209c:	4473      	add	r3, lr
 801209e:	469e      	mov	lr, r3
 80120a0:	460d      	mov	r5, r1
 80120a2:	4565      	cmp	r5, ip
 80120a4:	d30e      	bcc.n	80120c4 <__mdiff+0xe8>
 80120a6:	f10c 0203 	add.w	r2, ip, #3
 80120aa:	1a52      	subs	r2, r2, r1
 80120ac:	f022 0203 	bic.w	r2, r2, #3
 80120b0:	3903      	subs	r1, #3
 80120b2:	458c      	cmp	ip, r1
 80120b4:	bf38      	it	cc
 80120b6:	2200      	movcc	r2, #0
 80120b8:	441a      	add	r2, r3
 80120ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80120be:	b17b      	cbz	r3, 80120e0 <__mdiff+0x104>
 80120c0:	6106      	str	r6, [r0, #16]
 80120c2:	e7a5      	b.n	8012010 <__mdiff+0x34>
 80120c4:	f855 8b04 	ldr.w	r8, [r5], #4
 80120c8:	fa17 f488 	uxtah	r4, r7, r8
 80120cc:	1422      	asrs	r2, r4, #16
 80120ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80120d2:	b2a4      	uxth	r4, r4
 80120d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80120d8:	f84e 4b04 	str.w	r4, [lr], #4
 80120dc:	1417      	asrs	r7, r2, #16
 80120de:	e7e0      	b.n	80120a2 <__mdiff+0xc6>
 80120e0:	3e01      	subs	r6, #1
 80120e2:	e7ea      	b.n	80120ba <__mdiff+0xde>
 80120e4:	08013a83 	.word	0x08013a83
 80120e8:	08013b14 	.word	0x08013b14

080120ec <__ulp>:
 80120ec:	b082      	sub	sp, #8
 80120ee:	ed8d 0b00 	vstr	d0, [sp]
 80120f2:	9b01      	ldr	r3, [sp, #4]
 80120f4:	4912      	ldr	r1, [pc, #72]	; (8012140 <__ulp+0x54>)
 80120f6:	4019      	ands	r1, r3
 80120f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80120fc:	2900      	cmp	r1, #0
 80120fe:	dd05      	ble.n	801210c <__ulp+0x20>
 8012100:	2200      	movs	r2, #0
 8012102:	460b      	mov	r3, r1
 8012104:	ec43 2b10 	vmov	d0, r2, r3
 8012108:	b002      	add	sp, #8
 801210a:	4770      	bx	lr
 801210c:	4249      	negs	r1, r1
 801210e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012112:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012116:	f04f 0200 	mov.w	r2, #0
 801211a:	f04f 0300 	mov.w	r3, #0
 801211e:	da04      	bge.n	801212a <__ulp+0x3e>
 8012120:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012124:	fa41 f300 	asr.w	r3, r1, r0
 8012128:	e7ec      	b.n	8012104 <__ulp+0x18>
 801212a:	f1a0 0114 	sub.w	r1, r0, #20
 801212e:	291e      	cmp	r1, #30
 8012130:	bfda      	itte	le
 8012132:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012136:	fa20 f101 	lsrle.w	r1, r0, r1
 801213a:	2101      	movgt	r1, #1
 801213c:	460a      	mov	r2, r1
 801213e:	e7e1      	b.n	8012104 <__ulp+0x18>
 8012140:	7ff00000 	.word	0x7ff00000

08012144 <__b2d>:
 8012144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012146:	6905      	ldr	r5, [r0, #16]
 8012148:	f100 0714 	add.w	r7, r0, #20
 801214c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012150:	1f2e      	subs	r6, r5, #4
 8012152:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012156:	4620      	mov	r0, r4
 8012158:	f7ff fd52 	bl	8011c00 <__hi0bits>
 801215c:	f1c0 0320 	rsb	r3, r0, #32
 8012160:	280a      	cmp	r0, #10
 8012162:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80121e0 <__b2d+0x9c>
 8012166:	600b      	str	r3, [r1, #0]
 8012168:	dc14      	bgt.n	8012194 <__b2d+0x50>
 801216a:	f1c0 0e0b 	rsb	lr, r0, #11
 801216e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012172:	42b7      	cmp	r7, r6
 8012174:	ea41 030c 	orr.w	r3, r1, ip
 8012178:	bf34      	ite	cc
 801217a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801217e:	2100      	movcs	r1, #0
 8012180:	3015      	adds	r0, #21
 8012182:	fa04 f000 	lsl.w	r0, r4, r0
 8012186:	fa21 f10e 	lsr.w	r1, r1, lr
 801218a:	ea40 0201 	orr.w	r2, r0, r1
 801218e:	ec43 2b10 	vmov	d0, r2, r3
 8012192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012194:	42b7      	cmp	r7, r6
 8012196:	bf3a      	itte	cc
 8012198:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801219c:	f1a5 0608 	subcc.w	r6, r5, #8
 80121a0:	2100      	movcs	r1, #0
 80121a2:	380b      	subs	r0, #11
 80121a4:	d017      	beq.n	80121d6 <__b2d+0x92>
 80121a6:	f1c0 0c20 	rsb	ip, r0, #32
 80121aa:	fa04 f500 	lsl.w	r5, r4, r0
 80121ae:	42be      	cmp	r6, r7
 80121b0:	fa21 f40c 	lsr.w	r4, r1, ip
 80121b4:	ea45 0504 	orr.w	r5, r5, r4
 80121b8:	bf8c      	ite	hi
 80121ba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80121be:	2400      	movls	r4, #0
 80121c0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80121c4:	fa01 f000 	lsl.w	r0, r1, r0
 80121c8:	fa24 f40c 	lsr.w	r4, r4, ip
 80121cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80121d0:	ea40 0204 	orr.w	r2, r0, r4
 80121d4:	e7db      	b.n	801218e <__b2d+0x4a>
 80121d6:	ea44 030c 	orr.w	r3, r4, ip
 80121da:	460a      	mov	r2, r1
 80121dc:	e7d7      	b.n	801218e <__b2d+0x4a>
 80121de:	bf00      	nop
 80121e0:	3ff00000 	.word	0x3ff00000

080121e4 <__d2b>:
 80121e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80121e8:	4689      	mov	r9, r1
 80121ea:	2101      	movs	r1, #1
 80121ec:	ec57 6b10 	vmov	r6, r7, d0
 80121f0:	4690      	mov	r8, r2
 80121f2:	f7ff fc0f 	bl	8011a14 <_Balloc>
 80121f6:	4604      	mov	r4, r0
 80121f8:	b930      	cbnz	r0, 8012208 <__d2b+0x24>
 80121fa:	4602      	mov	r2, r0
 80121fc:	4b25      	ldr	r3, [pc, #148]	; (8012294 <__d2b+0xb0>)
 80121fe:	4826      	ldr	r0, [pc, #152]	; (8012298 <__d2b+0xb4>)
 8012200:	f240 310a 	movw	r1, #778	; 0x30a
 8012204:	f000 feb4 	bl	8012f70 <__assert_func>
 8012208:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801220c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012210:	bb35      	cbnz	r5, 8012260 <__d2b+0x7c>
 8012212:	2e00      	cmp	r6, #0
 8012214:	9301      	str	r3, [sp, #4]
 8012216:	d028      	beq.n	801226a <__d2b+0x86>
 8012218:	4668      	mov	r0, sp
 801221a:	9600      	str	r6, [sp, #0]
 801221c:	f7ff fd10 	bl	8011c40 <__lo0bits>
 8012220:	9900      	ldr	r1, [sp, #0]
 8012222:	b300      	cbz	r0, 8012266 <__d2b+0x82>
 8012224:	9a01      	ldr	r2, [sp, #4]
 8012226:	f1c0 0320 	rsb	r3, r0, #32
 801222a:	fa02 f303 	lsl.w	r3, r2, r3
 801222e:	430b      	orrs	r3, r1
 8012230:	40c2      	lsrs	r2, r0
 8012232:	6163      	str	r3, [r4, #20]
 8012234:	9201      	str	r2, [sp, #4]
 8012236:	9b01      	ldr	r3, [sp, #4]
 8012238:	61a3      	str	r3, [r4, #24]
 801223a:	2b00      	cmp	r3, #0
 801223c:	bf14      	ite	ne
 801223e:	2202      	movne	r2, #2
 8012240:	2201      	moveq	r2, #1
 8012242:	6122      	str	r2, [r4, #16]
 8012244:	b1d5      	cbz	r5, 801227c <__d2b+0x98>
 8012246:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801224a:	4405      	add	r5, r0
 801224c:	f8c9 5000 	str.w	r5, [r9]
 8012250:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012254:	f8c8 0000 	str.w	r0, [r8]
 8012258:	4620      	mov	r0, r4
 801225a:	b003      	add	sp, #12
 801225c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012264:	e7d5      	b.n	8012212 <__d2b+0x2e>
 8012266:	6161      	str	r1, [r4, #20]
 8012268:	e7e5      	b.n	8012236 <__d2b+0x52>
 801226a:	a801      	add	r0, sp, #4
 801226c:	f7ff fce8 	bl	8011c40 <__lo0bits>
 8012270:	9b01      	ldr	r3, [sp, #4]
 8012272:	6163      	str	r3, [r4, #20]
 8012274:	2201      	movs	r2, #1
 8012276:	6122      	str	r2, [r4, #16]
 8012278:	3020      	adds	r0, #32
 801227a:	e7e3      	b.n	8012244 <__d2b+0x60>
 801227c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012280:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012284:	f8c9 0000 	str.w	r0, [r9]
 8012288:	6918      	ldr	r0, [r3, #16]
 801228a:	f7ff fcb9 	bl	8011c00 <__hi0bits>
 801228e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012292:	e7df      	b.n	8012254 <__d2b+0x70>
 8012294:	08013a83 	.word	0x08013a83
 8012298:	08013b14 	.word	0x08013b14

0801229c <__ratio>:
 801229c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a0:	4688      	mov	r8, r1
 80122a2:	4669      	mov	r1, sp
 80122a4:	4681      	mov	r9, r0
 80122a6:	f7ff ff4d 	bl	8012144 <__b2d>
 80122aa:	a901      	add	r1, sp, #4
 80122ac:	4640      	mov	r0, r8
 80122ae:	ec55 4b10 	vmov	r4, r5, d0
 80122b2:	f7ff ff47 	bl	8012144 <__b2d>
 80122b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80122ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80122be:	eba3 0c02 	sub.w	ip, r3, r2
 80122c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80122c6:	1a9b      	subs	r3, r3, r2
 80122c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80122cc:	ec51 0b10 	vmov	r0, r1, d0
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	bfd6      	itet	le
 80122d4:	460a      	movle	r2, r1
 80122d6:	462a      	movgt	r2, r5
 80122d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80122dc:	468b      	mov	fp, r1
 80122de:	462f      	mov	r7, r5
 80122e0:	bfd4      	ite	le
 80122e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80122e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80122ea:	4620      	mov	r0, r4
 80122ec:	ee10 2a10 	vmov	r2, s0
 80122f0:	465b      	mov	r3, fp
 80122f2:	4639      	mov	r1, r7
 80122f4:	f7ee faba 	bl	800086c <__aeabi_ddiv>
 80122f8:	ec41 0b10 	vmov	d0, r0, r1
 80122fc:	b003      	add	sp, #12
 80122fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012302 <__copybits>:
 8012302:	3901      	subs	r1, #1
 8012304:	b570      	push	{r4, r5, r6, lr}
 8012306:	1149      	asrs	r1, r1, #5
 8012308:	6914      	ldr	r4, [r2, #16]
 801230a:	3101      	adds	r1, #1
 801230c:	f102 0314 	add.w	r3, r2, #20
 8012310:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012314:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012318:	1f05      	subs	r5, r0, #4
 801231a:	42a3      	cmp	r3, r4
 801231c:	d30c      	bcc.n	8012338 <__copybits+0x36>
 801231e:	1aa3      	subs	r3, r4, r2
 8012320:	3b11      	subs	r3, #17
 8012322:	f023 0303 	bic.w	r3, r3, #3
 8012326:	3211      	adds	r2, #17
 8012328:	42a2      	cmp	r2, r4
 801232a:	bf88      	it	hi
 801232c:	2300      	movhi	r3, #0
 801232e:	4418      	add	r0, r3
 8012330:	2300      	movs	r3, #0
 8012332:	4288      	cmp	r0, r1
 8012334:	d305      	bcc.n	8012342 <__copybits+0x40>
 8012336:	bd70      	pop	{r4, r5, r6, pc}
 8012338:	f853 6b04 	ldr.w	r6, [r3], #4
 801233c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012340:	e7eb      	b.n	801231a <__copybits+0x18>
 8012342:	f840 3b04 	str.w	r3, [r0], #4
 8012346:	e7f4      	b.n	8012332 <__copybits+0x30>

08012348 <__any_on>:
 8012348:	f100 0214 	add.w	r2, r0, #20
 801234c:	6900      	ldr	r0, [r0, #16]
 801234e:	114b      	asrs	r3, r1, #5
 8012350:	4298      	cmp	r0, r3
 8012352:	b510      	push	{r4, lr}
 8012354:	db11      	blt.n	801237a <__any_on+0x32>
 8012356:	dd0a      	ble.n	801236e <__any_on+0x26>
 8012358:	f011 011f 	ands.w	r1, r1, #31
 801235c:	d007      	beq.n	801236e <__any_on+0x26>
 801235e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012362:	fa24 f001 	lsr.w	r0, r4, r1
 8012366:	fa00 f101 	lsl.w	r1, r0, r1
 801236a:	428c      	cmp	r4, r1
 801236c:	d10b      	bne.n	8012386 <__any_on+0x3e>
 801236e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012372:	4293      	cmp	r3, r2
 8012374:	d803      	bhi.n	801237e <__any_on+0x36>
 8012376:	2000      	movs	r0, #0
 8012378:	bd10      	pop	{r4, pc}
 801237a:	4603      	mov	r3, r0
 801237c:	e7f7      	b.n	801236e <__any_on+0x26>
 801237e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012382:	2900      	cmp	r1, #0
 8012384:	d0f5      	beq.n	8012372 <__any_on+0x2a>
 8012386:	2001      	movs	r0, #1
 8012388:	e7f6      	b.n	8012378 <__any_on+0x30>

0801238a <_calloc_r>:
 801238a:	b513      	push	{r0, r1, r4, lr}
 801238c:	434a      	muls	r2, r1
 801238e:	4611      	mov	r1, r2
 8012390:	9201      	str	r2, [sp, #4]
 8012392:	f7fc f94f 	bl	800e634 <_malloc_r>
 8012396:	4604      	mov	r4, r0
 8012398:	b118      	cbz	r0, 80123a2 <_calloc_r+0x18>
 801239a:	9a01      	ldr	r2, [sp, #4]
 801239c:	2100      	movs	r1, #0
 801239e:	f7fc f940 	bl	800e622 <memset>
 80123a2:	4620      	mov	r0, r4
 80123a4:	b002      	add	sp, #8
 80123a6:	bd10      	pop	{r4, pc}

080123a8 <_free_r>:
 80123a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123aa:	2900      	cmp	r1, #0
 80123ac:	d048      	beq.n	8012440 <_free_r+0x98>
 80123ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123b2:	9001      	str	r0, [sp, #4]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	f1a1 0404 	sub.w	r4, r1, #4
 80123ba:	bfb8      	it	lt
 80123bc:	18e4      	addlt	r4, r4, r3
 80123be:	f7ff fb1d 	bl	80119fc <__malloc_lock>
 80123c2:	4a20      	ldr	r2, [pc, #128]	; (8012444 <_free_r+0x9c>)
 80123c4:	9801      	ldr	r0, [sp, #4]
 80123c6:	6813      	ldr	r3, [r2, #0]
 80123c8:	4615      	mov	r5, r2
 80123ca:	b933      	cbnz	r3, 80123da <_free_r+0x32>
 80123cc:	6063      	str	r3, [r4, #4]
 80123ce:	6014      	str	r4, [r2, #0]
 80123d0:	b003      	add	sp, #12
 80123d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123d6:	f7ff bb17 	b.w	8011a08 <__malloc_unlock>
 80123da:	42a3      	cmp	r3, r4
 80123dc:	d90b      	bls.n	80123f6 <_free_r+0x4e>
 80123de:	6821      	ldr	r1, [r4, #0]
 80123e0:	1862      	adds	r2, r4, r1
 80123e2:	4293      	cmp	r3, r2
 80123e4:	bf04      	itt	eq
 80123e6:	681a      	ldreq	r2, [r3, #0]
 80123e8:	685b      	ldreq	r3, [r3, #4]
 80123ea:	6063      	str	r3, [r4, #4]
 80123ec:	bf04      	itt	eq
 80123ee:	1852      	addeq	r2, r2, r1
 80123f0:	6022      	streq	r2, [r4, #0]
 80123f2:	602c      	str	r4, [r5, #0]
 80123f4:	e7ec      	b.n	80123d0 <_free_r+0x28>
 80123f6:	461a      	mov	r2, r3
 80123f8:	685b      	ldr	r3, [r3, #4]
 80123fa:	b10b      	cbz	r3, 8012400 <_free_r+0x58>
 80123fc:	42a3      	cmp	r3, r4
 80123fe:	d9fa      	bls.n	80123f6 <_free_r+0x4e>
 8012400:	6811      	ldr	r1, [r2, #0]
 8012402:	1855      	adds	r5, r2, r1
 8012404:	42a5      	cmp	r5, r4
 8012406:	d10b      	bne.n	8012420 <_free_r+0x78>
 8012408:	6824      	ldr	r4, [r4, #0]
 801240a:	4421      	add	r1, r4
 801240c:	1854      	adds	r4, r2, r1
 801240e:	42a3      	cmp	r3, r4
 8012410:	6011      	str	r1, [r2, #0]
 8012412:	d1dd      	bne.n	80123d0 <_free_r+0x28>
 8012414:	681c      	ldr	r4, [r3, #0]
 8012416:	685b      	ldr	r3, [r3, #4]
 8012418:	6053      	str	r3, [r2, #4]
 801241a:	4421      	add	r1, r4
 801241c:	6011      	str	r1, [r2, #0]
 801241e:	e7d7      	b.n	80123d0 <_free_r+0x28>
 8012420:	d902      	bls.n	8012428 <_free_r+0x80>
 8012422:	230c      	movs	r3, #12
 8012424:	6003      	str	r3, [r0, #0]
 8012426:	e7d3      	b.n	80123d0 <_free_r+0x28>
 8012428:	6825      	ldr	r5, [r4, #0]
 801242a:	1961      	adds	r1, r4, r5
 801242c:	428b      	cmp	r3, r1
 801242e:	bf04      	itt	eq
 8012430:	6819      	ldreq	r1, [r3, #0]
 8012432:	685b      	ldreq	r3, [r3, #4]
 8012434:	6063      	str	r3, [r4, #4]
 8012436:	bf04      	itt	eq
 8012438:	1949      	addeq	r1, r1, r5
 801243a:	6021      	streq	r1, [r4, #0]
 801243c:	6054      	str	r4, [r2, #4]
 801243e:	e7c7      	b.n	80123d0 <_free_r+0x28>
 8012440:	b003      	add	sp, #12
 8012442:	bd30      	pop	{r4, r5, pc}
 8012444:	200050b8 	.word	0x200050b8

08012448 <__ssputs_r>:
 8012448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801244c:	688e      	ldr	r6, [r1, #8]
 801244e:	429e      	cmp	r6, r3
 8012450:	4682      	mov	sl, r0
 8012452:	460c      	mov	r4, r1
 8012454:	4690      	mov	r8, r2
 8012456:	461f      	mov	r7, r3
 8012458:	d838      	bhi.n	80124cc <__ssputs_r+0x84>
 801245a:	898a      	ldrh	r2, [r1, #12]
 801245c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012460:	d032      	beq.n	80124c8 <__ssputs_r+0x80>
 8012462:	6825      	ldr	r5, [r4, #0]
 8012464:	6909      	ldr	r1, [r1, #16]
 8012466:	eba5 0901 	sub.w	r9, r5, r1
 801246a:	6965      	ldr	r5, [r4, #20]
 801246c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012470:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012474:	3301      	adds	r3, #1
 8012476:	444b      	add	r3, r9
 8012478:	106d      	asrs	r5, r5, #1
 801247a:	429d      	cmp	r5, r3
 801247c:	bf38      	it	cc
 801247e:	461d      	movcc	r5, r3
 8012480:	0553      	lsls	r3, r2, #21
 8012482:	d531      	bpl.n	80124e8 <__ssputs_r+0xa0>
 8012484:	4629      	mov	r1, r5
 8012486:	f7fc f8d5 	bl	800e634 <_malloc_r>
 801248a:	4606      	mov	r6, r0
 801248c:	b950      	cbnz	r0, 80124a4 <__ssputs_r+0x5c>
 801248e:	230c      	movs	r3, #12
 8012490:	f8ca 3000 	str.w	r3, [sl]
 8012494:	89a3      	ldrh	r3, [r4, #12]
 8012496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801249a:	81a3      	strh	r3, [r4, #12]
 801249c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124a4:	6921      	ldr	r1, [r4, #16]
 80124a6:	464a      	mov	r2, r9
 80124a8:	f7fc f8ad 	bl	800e606 <memcpy>
 80124ac:	89a3      	ldrh	r3, [r4, #12]
 80124ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80124b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124b6:	81a3      	strh	r3, [r4, #12]
 80124b8:	6126      	str	r6, [r4, #16]
 80124ba:	6165      	str	r5, [r4, #20]
 80124bc:	444e      	add	r6, r9
 80124be:	eba5 0509 	sub.w	r5, r5, r9
 80124c2:	6026      	str	r6, [r4, #0]
 80124c4:	60a5      	str	r5, [r4, #8]
 80124c6:	463e      	mov	r6, r7
 80124c8:	42be      	cmp	r6, r7
 80124ca:	d900      	bls.n	80124ce <__ssputs_r+0x86>
 80124cc:	463e      	mov	r6, r7
 80124ce:	4632      	mov	r2, r6
 80124d0:	6820      	ldr	r0, [r4, #0]
 80124d2:	4641      	mov	r1, r8
 80124d4:	f000 fd7c 	bl	8012fd0 <memmove>
 80124d8:	68a3      	ldr	r3, [r4, #8]
 80124da:	6822      	ldr	r2, [r4, #0]
 80124dc:	1b9b      	subs	r3, r3, r6
 80124de:	4432      	add	r2, r6
 80124e0:	60a3      	str	r3, [r4, #8]
 80124e2:	6022      	str	r2, [r4, #0]
 80124e4:	2000      	movs	r0, #0
 80124e6:	e7db      	b.n	80124a0 <__ssputs_r+0x58>
 80124e8:	462a      	mov	r2, r5
 80124ea:	f000 fd8b 	bl	8013004 <_realloc_r>
 80124ee:	4606      	mov	r6, r0
 80124f0:	2800      	cmp	r0, #0
 80124f2:	d1e1      	bne.n	80124b8 <__ssputs_r+0x70>
 80124f4:	6921      	ldr	r1, [r4, #16]
 80124f6:	4650      	mov	r0, sl
 80124f8:	f7ff ff56 	bl	80123a8 <_free_r>
 80124fc:	e7c7      	b.n	801248e <__ssputs_r+0x46>
	...

08012500 <_svfiprintf_r>:
 8012500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012504:	4698      	mov	r8, r3
 8012506:	898b      	ldrh	r3, [r1, #12]
 8012508:	061b      	lsls	r3, r3, #24
 801250a:	b09d      	sub	sp, #116	; 0x74
 801250c:	4607      	mov	r7, r0
 801250e:	460d      	mov	r5, r1
 8012510:	4614      	mov	r4, r2
 8012512:	d50e      	bpl.n	8012532 <_svfiprintf_r+0x32>
 8012514:	690b      	ldr	r3, [r1, #16]
 8012516:	b963      	cbnz	r3, 8012532 <_svfiprintf_r+0x32>
 8012518:	2140      	movs	r1, #64	; 0x40
 801251a:	f7fc f88b 	bl	800e634 <_malloc_r>
 801251e:	6028      	str	r0, [r5, #0]
 8012520:	6128      	str	r0, [r5, #16]
 8012522:	b920      	cbnz	r0, 801252e <_svfiprintf_r+0x2e>
 8012524:	230c      	movs	r3, #12
 8012526:	603b      	str	r3, [r7, #0]
 8012528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801252c:	e0d1      	b.n	80126d2 <_svfiprintf_r+0x1d2>
 801252e:	2340      	movs	r3, #64	; 0x40
 8012530:	616b      	str	r3, [r5, #20]
 8012532:	2300      	movs	r3, #0
 8012534:	9309      	str	r3, [sp, #36]	; 0x24
 8012536:	2320      	movs	r3, #32
 8012538:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801253c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012540:	2330      	movs	r3, #48	; 0x30
 8012542:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80126ec <_svfiprintf_r+0x1ec>
 8012546:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801254a:	f04f 0901 	mov.w	r9, #1
 801254e:	4623      	mov	r3, r4
 8012550:	469a      	mov	sl, r3
 8012552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012556:	b10a      	cbz	r2, 801255c <_svfiprintf_r+0x5c>
 8012558:	2a25      	cmp	r2, #37	; 0x25
 801255a:	d1f9      	bne.n	8012550 <_svfiprintf_r+0x50>
 801255c:	ebba 0b04 	subs.w	fp, sl, r4
 8012560:	d00b      	beq.n	801257a <_svfiprintf_r+0x7a>
 8012562:	465b      	mov	r3, fp
 8012564:	4622      	mov	r2, r4
 8012566:	4629      	mov	r1, r5
 8012568:	4638      	mov	r0, r7
 801256a:	f7ff ff6d 	bl	8012448 <__ssputs_r>
 801256e:	3001      	adds	r0, #1
 8012570:	f000 80aa 	beq.w	80126c8 <_svfiprintf_r+0x1c8>
 8012574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012576:	445a      	add	r2, fp
 8012578:	9209      	str	r2, [sp, #36]	; 0x24
 801257a:	f89a 3000 	ldrb.w	r3, [sl]
 801257e:	2b00      	cmp	r3, #0
 8012580:	f000 80a2 	beq.w	80126c8 <_svfiprintf_r+0x1c8>
 8012584:	2300      	movs	r3, #0
 8012586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801258a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801258e:	f10a 0a01 	add.w	sl, sl, #1
 8012592:	9304      	str	r3, [sp, #16]
 8012594:	9307      	str	r3, [sp, #28]
 8012596:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801259a:	931a      	str	r3, [sp, #104]	; 0x68
 801259c:	4654      	mov	r4, sl
 801259e:	2205      	movs	r2, #5
 80125a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125a4:	4851      	ldr	r0, [pc, #324]	; (80126ec <_svfiprintf_r+0x1ec>)
 80125a6:	f7ed fe2b 	bl	8000200 <memchr>
 80125aa:	9a04      	ldr	r2, [sp, #16]
 80125ac:	b9d8      	cbnz	r0, 80125e6 <_svfiprintf_r+0xe6>
 80125ae:	06d0      	lsls	r0, r2, #27
 80125b0:	bf44      	itt	mi
 80125b2:	2320      	movmi	r3, #32
 80125b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125b8:	0711      	lsls	r1, r2, #28
 80125ba:	bf44      	itt	mi
 80125bc:	232b      	movmi	r3, #43	; 0x2b
 80125be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125c2:	f89a 3000 	ldrb.w	r3, [sl]
 80125c6:	2b2a      	cmp	r3, #42	; 0x2a
 80125c8:	d015      	beq.n	80125f6 <_svfiprintf_r+0xf6>
 80125ca:	9a07      	ldr	r2, [sp, #28]
 80125cc:	4654      	mov	r4, sl
 80125ce:	2000      	movs	r0, #0
 80125d0:	f04f 0c0a 	mov.w	ip, #10
 80125d4:	4621      	mov	r1, r4
 80125d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125da:	3b30      	subs	r3, #48	; 0x30
 80125dc:	2b09      	cmp	r3, #9
 80125de:	d94e      	bls.n	801267e <_svfiprintf_r+0x17e>
 80125e0:	b1b0      	cbz	r0, 8012610 <_svfiprintf_r+0x110>
 80125e2:	9207      	str	r2, [sp, #28]
 80125e4:	e014      	b.n	8012610 <_svfiprintf_r+0x110>
 80125e6:	eba0 0308 	sub.w	r3, r0, r8
 80125ea:	fa09 f303 	lsl.w	r3, r9, r3
 80125ee:	4313      	orrs	r3, r2
 80125f0:	9304      	str	r3, [sp, #16]
 80125f2:	46a2      	mov	sl, r4
 80125f4:	e7d2      	b.n	801259c <_svfiprintf_r+0x9c>
 80125f6:	9b03      	ldr	r3, [sp, #12]
 80125f8:	1d19      	adds	r1, r3, #4
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	9103      	str	r1, [sp, #12]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	bfbb      	ittet	lt
 8012602:	425b      	neglt	r3, r3
 8012604:	f042 0202 	orrlt.w	r2, r2, #2
 8012608:	9307      	strge	r3, [sp, #28]
 801260a:	9307      	strlt	r3, [sp, #28]
 801260c:	bfb8      	it	lt
 801260e:	9204      	strlt	r2, [sp, #16]
 8012610:	7823      	ldrb	r3, [r4, #0]
 8012612:	2b2e      	cmp	r3, #46	; 0x2e
 8012614:	d10c      	bne.n	8012630 <_svfiprintf_r+0x130>
 8012616:	7863      	ldrb	r3, [r4, #1]
 8012618:	2b2a      	cmp	r3, #42	; 0x2a
 801261a:	d135      	bne.n	8012688 <_svfiprintf_r+0x188>
 801261c:	9b03      	ldr	r3, [sp, #12]
 801261e:	1d1a      	adds	r2, r3, #4
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	9203      	str	r2, [sp, #12]
 8012624:	2b00      	cmp	r3, #0
 8012626:	bfb8      	it	lt
 8012628:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801262c:	3402      	adds	r4, #2
 801262e:	9305      	str	r3, [sp, #20]
 8012630:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80126fc <_svfiprintf_r+0x1fc>
 8012634:	7821      	ldrb	r1, [r4, #0]
 8012636:	2203      	movs	r2, #3
 8012638:	4650      	mov	r0, sl
 801263a:	f7ed fde1 	bl	8000200 <memchr>
 801263e:	b140      	cbz	r0, 8012652 <_svfiprintf_r+0x152>
 8012640:	2340      	movs	r3, #64	; 0x40
 8012642:	eba0 000a 	sub.w	r0, r0, sl
 8012646:	fa03 f000 	lsl.w	r0, r3, r0
 801264a:	9b04      	ldr	r3, [sp, #16]
 801264c:	4303      	orrs	r3, r0
 801264e:	3401      	adds	r4, #1
 8012650:	9304      	str	r3, [sp, #16]
 8012652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012656:	4826      	ldr	r0, [pc, #152]	; (80126f0 <_svfiprintf_r+0x1f0>)
 8012658:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801265c:	2206      	movs	r2, #6
 801265e:	f7ed fdcf 	bl	8000200 <memchr>
 8012662:	2800      	cmp	r0, #0
 8012664:	d038      	beq.n	80126d8 <_svfiprintf_r+0x1d8>
 8012666:	4b23      	ldr	r3, [pc, #140]	; (80126f4 <_svfiprintf_r+0x1f4>)
 8012668:	bb1b      	cbnz	r3, 80126b2 <_svfiprintf_r+0x1b2>
 801266a:	9b03      	ldr	r3, [sp, #12]
 801266c:	3307      	adds	r3, #7
 801266e:	f023 0307 	bic.w	r3, r3, #7
 8012672:	3308      	adds	r3, #8
 8012674:	9303      	str	r3, [sp, #12]
 8012676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012678:	4433      	add	r3, r6
 801267a:	9309      	str	r3, [sp, #36]	; 0x24
 801267c:	e767      	b.n	801254e <_svfiprintf_r+0x4e>
 801267e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012682:	460c      	mov	r4, r1
 8012684:	2001      	movs	r0, #1
 8012686:	e7a5      	b.n	80125d4 <_svfiprintf_r+0xd4>
 8012688:	2300      	movs	r3, #0
 801268a:	3401      	adds	r4, #1
 801268c:	9305      	str	r3, [sp, #20]
 801268e:	4619      	mov	r1, r3
 8012690:	f04f 0c0a 	mov.w	ip, #10
 8012694:	4620      	mov	r0, r4
 8012696:	f810 2b01 	ldrb.w	r2, [r0], #1
 801269a:	3a30      	subs	r2, #48	; 0x30
 801269c:	2a09      	cmp	r2, #9
 801269e:	d903      	bls.n	80126a8 <_svfiprintf_r+0x1a8>
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d0c5      	beq.n	8012630 <_svfiprintf_r+0x130>
 80126a4:	9105      	str	r1, [sp, #20]
 80126a6:	e7c3      	b.n	8012630 <_svfiprintf_r+0x130>
 80126a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80126ac:	4604      	mov	r4, r0
 80126ae:	2301      	movs	r3, #1
 80126b0:	e7f0      	b.n	8012694 <_svfiprintf_r+0x194>
 80126b2:	ab03      	add	r3, sp, #12
 80126b4:	9300      	str	r3, [sp, #0]
 80126b6:	462a      	mov	r2, r5
 80126b8:	4b0f      	ldr	r3, [pc, #60]	; (80126f8 <_svfiprintf_r+0x1f8>)
 80126ba:	a904      	add	r1, sp, #16
 80126bc:	4638      	mov	r0, r7
 80126be:	f7fc f8b3 	bl	800e828 <_printf_float>
 80126c2:	1c42      	adds	r2, r0, #1
 80126c4:	4606      	mov	r6, r0
 80126c6:	d1d6      	bne.n	8012676 <_svfiprintf_r+0x176>
 80126c8:	89ab      	ldrh	r3, [r5, #12]
 80126ca:	065b      	lsls	r3, r3, #25
 80126cc:	f53f af2c 	bmi.w	8012528 <_svfiprintf_r+0x28>
 80126d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80126d2:	b01d      	add	sp, #116	; 0x74
 80126d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126d8:	ab03      	add	r3, sp, #12
 80126da:	9300      	str	r3, [sp, #0]
 80126dc:	462a      	mov	r2, r5
 80126de:	4b06      	ldr	r3, [pc, #24]	; (80126f8 <_svfiprintf_r+0x1f8>)
 80126e0:	a904      	add	r1, sp, #16
 80126e2:	4638      	mov	r0, r7
 80126e4:	f7fc fb44 	bl	800ed70 <_printf_i>
 80126e8:	e7eb      	b.n	80126c2 <_svfiprintf_r+0x1c2>
 80126ea:	bf00      	nop
 80126ec:	08013c74 	.word	0x08013c74
 80126f0:	08013c7e 	.word	0x08013c7e
 80126f4:	0800e829 	.word	0x0800e829
 80126f8:	08012449 	.word	0x08012449
 80126fc:	08013c7a 	.word	0x08013c7a

08012700 <_sungetc_r>:
 8012700:	b538      	push	{r3, r4, r5, lr}
 8012702:	1c4b      	adds	r3, r1, #1
 8012704:	4614      	mov	r4, r2
 8012706:	d103      	bne.n	8012710 <_sungetc_r+0x10>
 8012708:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801270c:	4628      	mov	r0, r5
 801270e:	bd38      	pop	{r3, r4, r5, pc}
 8012710:	8993      	ldrh	r3, [r2, #12]
 8012712:	f023 0320 	bic.w	r3, r3, #32
 8012716:	8193      	strh	r3, [r2, #12]
 8012718:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801271a:	6852      	ldr	r2, [r2, #4]
 801271c:	b2cd      	uxtb	r5, r1
 801271e:	b18b      	cbz	r3, 8012744 <_sungetc_r+0x44>
 8012720:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012722:	4293      	cmp	r3, r2
 8012724:	dd08      	ble.n	8012738 <_sungetc_r+0x38>
 8012726:	6823      	ldr	r3, [r4, #0]
 8012728:	1e5a      	subs	r2, r3, #1
 801272a:	6022      	str	r2, [r4, #0]
 801272c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012730:	6863      	ldr	r3, [r4, #4]
 8012732:	3301      	adds	r3, #1
 8012734:	6063      	str	r3, [r4, #4]
 8012736:	e7e9      	b.n	801270c <_sungetc_r+0xc>
 8012738:	4621      	mov	r1, r4
 801273a:	f000 fbd1 	bl	8012ee0 <__submore>
 801273e:	2800      	cmp	r0, #0
 8012740:	d0f1      	beq.n	8012726 <_sungetc_r+0x26>
 8012742:	e7e1      	b.n	8012708 <_sungetc_r+0x8>
 8012744:	6921      	ldr	r1, [r4, #16]
 8012746:	6823      	ldr	r3, [r4, #0]
 8012748:	b151      	cbz	r1, 8012760 <_sungetc_r+0x60>
 801274a:	4299      	cmp	r1, r3
 801274c:	d208      	bcs.n	8012760 <_sungetc_r+0x60>
 801274e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012752:	42a9      	cmp	r1, r5
 8012754:	d104      	bne.n	8012760 <_sungetc_r+0x60>
 8012756:	3b01      	subs	r3, #1
 8012758:	3201      	adds	r2, #1
 801275a:	6023      	str	r3, [r4, #0]
 801275c:	6062      	str	r2, [r4, #4]
 801275e:	e7d5      	b.n	801270c <_sungetc_r+0xc>
 8012760:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012768:	6363      	str	r3, [r4, #52]	; 0x34
 801276a:	2303      	movs	r3, #3
 801276c:	63a3      	str	r3, [r4, #56]	; 0x38
 801276e:	4623      	mov	r3, r4
 8012770:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012774:	6023      	str	r3, [r4, #0]
 8012776:	2301      	movs	r3, #1
 8012778:	e7dc      	b.n	8012734 <_sungetc_r+0x34>

0801277a <__ssrefill_r>:
 801277a:	b510      	push	{r4, lr}
 801277c:	460c      	mov	r4, r1
 801277e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012780:	b169      	cbz	r1, 801279e <__ssrefill_r+0x24>
 8012782:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012786:	4299      	cmp	r1, r3
 8012788:	d001      	beq.n	801278e <__ssrefill_r+0x14>
 801278a:	f7ff fe0d 	bl	80123a8 <_free_r>
 801278e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012790:	6063      	str	r3, [r4, #4]
 8012792:	2000      	movs	r0, #0
 8012794:	6360      	str	r0, [r4, #52]	; 0x34
 8012796:	b113      	cbz	r3, 801279e <__ssrefill_r+0x24>
 8012798:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801279a:	6023      	str	r3, [r4, #0]
 801279c:	bd10      	pop	{r4, pc}
 801279e:	6923      	ldr	r3, [r4, #16]
 80127a0:	6023      	str	r3, [r4, #0]
 80127a2:	2300      	movs	r3, #0
 80127a4:	6063      	str	r3, [r4, #4]
 80127a6:	89a3      	ldrh	r3, [r4, #12]
 80127a8:	f043 0320 	orr.w	r3, r3, #32
 80127ac:	81a3      	strh	r3, [r4, #12]
 80127ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127b2:	e7f3      	b.n	801279c <__ssrefill_r+0x22>

080127b4 <__ssvfiscanf_r>:
 80127b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b8:	460c      	mov	r4, r1
 80127ba:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80127be:	2100      	movs	r1, #0
 80127c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80127c4:	49b2      	ldr	r1, [pc, #712]	; (8012a90 <__ssvfiscanf_r+0x2dc>)
 80127c6:	91a0      	str	r1, [sp, #640]	; 0x280
 80127c8:	f10d 0804 	add.w	r8, sp, #4
 80127cc:	49b1      	ldr	r1, [pc, #708]	; (8012a94 <__ssvfiscanf_r+0x2e0>)
 80127ce:	4fb2      	ldr	r7, [pc, #712]	; (8012a98 <__ssvfiscanf_r+0x2e4>)
 80127d0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8012a9c <__ssvfiscanf_r+0x2e8>
 80127d4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80127d8:	4606      	mov	r6, r0
 80127da:	91a1      	str	r1, [sp, #644]	; 0x284
 80127dc:	9300      	str	r3, [sp, #0]
 80127de:	f892 a000 	ldrb.w	sl, [r2]
 80127e2:	f1ba 0f00 	cmp.w	sl, #0
 80127e6:	f000 8151 	beq.w	8012a8c <__ssvfiscanf_r+0x2d8>
 80127ea:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80127ee:	f013 0308 	ands.w	r3, r3, #8
 80127f2:	f102 0501 	add.w	r5, r2, #1
 80127f6:	d019      	beq.n	801282c <__ssvfiscanf_r+0x78>
 80127f8:	6863      	ldr	r3, [r4, #4]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	dd0f      	ble.n	801281e <__ssvfiscanf_r+0x6a>
 80127fe:	6823      	ldr	r3, [r4, #0]
 8012800:	781a      	ldrb	r2, [r3, #0]
 8012802:	5cba      	ldrb	r2, [r7, r2]
 8012804:	0712      	lsls	r2, r2, #28
 8012806:	d401      	bmi.n	801280c <__ssvfiscanf_r+0x58>
 8012808:	462a      	mov	r2, r5
 801280a:	e7e8      	b.n	80127de <__ssvfiscanf_r+0x2a>
 801280c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801280e:	3201      	adds	r2, #1
 8012810:	9245      	str	r2, [sp, #276]	; 0x114
 8012812:	6862      	ldr	r2, [r4, #4]
 8012814:	3301      	adds	r3, #1
 8012816:	3a01      	subs	r2, #1
 8012818:	6062      	str	r2, [r4, #4]
 801281a:	6023      	str	r3, [r4, #0]
 801281c:	e7ec      	b.n	80127f8 <__ssvfiscanf_r+0x44>
 801281e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012820:	4621      	mov	r1, r4
 8012822:	4630      	mov	r0, r6
 8012824:	4798      	blx	r3
 8012826:	2800      	cmp	r0, #0
 8012828:	d0e9      	beq.n	80127fe <__ssvfiscanf_r+0x4a>
 801282a:	e7ed      	b.n	8012808 <__ssvfiscanf_r+0x54>
 801282c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8012830:	f040 8083 	bne.w	801293a <__ssvfiscanf_r+0x186>
 8012834:	9341      	str	r3, [sp, #260]	; 0x104
 8012836:	9343      	str	r3, [sp, #268]	; 0x10c
 8012838:	7853      	ldrb	r3, [r2, #1]
 801283a:	2b2a      	cmp	r3, #42	; 0x2a
 801283c:	bf02      	ittt	eq
 801283e:	2310      	moveq	r3, #16
 8012840:	1c95      	addeq	r5, r2, #2
 8012842:	9341      	streq	r3, [sp, #260]	; 0x104
 8012844:	220a      	movs	r2, #10
 8012846:	46ab      	mov	fp, r5
 8012848:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801284c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012850:	2b09      	cmp	r3, #9
 8012852:	d91d      	bls.n	8012890 <__ssvfiscanf_r+0xdc>
 8012854:	4891      	ldr	r0, [pc, #580]	; (8012a9c <__ssvfiscanf_r+0x2e8>)
 8012856:	2203      	movs	r2, #3
 8012858:	f7ed fcd2 	bl	8000200 <memchr>
 801285c:	b140      	cbz	r0, 8012870 <__ssvfiscanf_r+0xbc>
 801285e:	2301      	movs	r3, #1
 8012860:	eba0 0009 	sub.w	r0, r0, r9
 8012864:	fa03 f000 	lsl.w	r0, r3, r0
 8012868:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801286a:	4318      	orrs	r0, r3
 801286c:	9041      	str	r0, [sp, #260]	; 0x104
 801286e:	465d      	mov	r5, fp
 8012870:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012874:	2b78      	cmp	r3, #120	; 0x78
 8012876:	d806      	bhi.n	8012886 <__ssvfiscanf_r+0xd2>
 8012878:	2b57      	cmp	r3, #87	; 0x57
 801287a:	d810      	bhi.n	801289e <__ssvfiscanf_r+0xea>
 801287c:	2b25      	cmp	r3, #37	; 0x25
 801287e:	d05c      	beq.n	801293a <__ssvfiscanf_r+0x186>
 8012880:	d856      	bhi.n	8012930 <__ssvfiscanf_r+0x17c>
 8012882:	2b00      	cmp	r3, #0
 8012884:	d074      	beq.n	8012970 <__ssvfiscanf_r+0x1bc>
 8012886:	2303      	movs	r3, #3
 8012888:	9347      	str	r3, [sp, #284]	; 0x11c
 801288a:	230a      	movs	r3, #10
 801288c:	9342      	str	r3, [sp, #264]	; 0x108
 801288e:	e081      	b.n	8012994 <__ssvfiscanf_r+0x1e0>
 8012890:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012892:	fb02 1303 	mla	r3, r2, r3, r1
 8012896:	3b30      	subs	r3, #48	; 0x30
 8012898:	9343      	str	r3, [sp, #268]	; 0x10c
 801289a:	465d      	mov	r5, fp
 801289c:	e7d3      	b.n	8012846 <__ssvfiscanf_r+0x92>
 801289e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80128a2:	2a20      	cmp	r2, #32
 80128a4:	d8ef      	bhi.n	8012886 <__ssvfiscanf_r+0xd2>
 80128a6:	a101      	add	r1, pc, #4	; (adr r1, 80128ac <__ssvfiscanf_r+0xf8>)
 80128a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80128ac:	0801297f 	.word	0x0801297f
 80128b0:	08012887 	.word	0x08012887
 80128b4:	08012887 	.word	0x08012887
 80128b8:	080129dd 	.word	0x080129dd
 80128bc:	08012887 	.word	0x08012887
 80128c0:	08012887 	.word	0x08012887
 80128c4:	08012887 	.word	0x08012887
 80128c8:	08012887 	.word	0x08012887
 80128cc:	08012887 	.word	0x08012887
 80128d0:	08012887 	.word	0x08012887
 80128d4:	08012887 	.word	0x08012887
 80128d8:	080129f3 	.word	0x080129f3
 80128dc:	080129c9 	.word	0x080129c9
 80128e0:	08012937 	.word	0x08012937
 80128e4:	08012937 	.word	0x08012937
 80128e8:	08012937 	.word	0x08012937
 80128ec:	08012887 	.word	0x08012887
 80128f0:	080129cd 	.word	0x080129cd
 80128f4:	08012887 	.word	0x08012887
 80128f8:	08012887 	.word	0x08012887
 80128fc:	08012887 	.word	0x08012887
 8012900:	08012887 	.word	0x08012887
 8012904:	08012a03 	.word	0x08012a03
 8012908:	080129d5 	.word	0x080129d5
 801290c:	08012977 	.word	0x08012977
 8012910:	08012887 	.word	0x08012887
 8012914:	08012887 	.word	0x08012887
 8012918:	080129ff 	.word	0x080129ff
 801291c:	08012887 	.word	0x08012887
 8012920:	080129c9 	.word	0x080129c9
 8012924:	08012887 	.word	0x08012887
 8012928:	08012887 	.word	0x08012887
 801292c:	0801297f 	.word	0x0801297f
 8012930:	3b45      	subs	r3, #69	; 0x45
 8012932:	2b02      	cmp	r3, #2
 8012934:	d8a7      	bhi.n	8012886 <__ssvfiscanf_r+0xd2>
 8012936:	2305      	movs	r3, #5
 8012938:	e02b      	b.n	8012992 <__ssvfiscanf_r+0x1de>
 801293a:	6863      	ldr	r3, [r4, #4]
 801293c:	2b00      	cmp	r3, #0
 801293e:	dd0d      	ble.n	801295c <__ssvfiscanf_r+0x1a8>
 8012940:	6823      	ldr	r3, [r4, #0]
 8012942:	781a      	ldrb	r2, [r3, #0]
 8012944:	4552      	cmp	r2, sl
 8012946:	f040 80a1 	bne.w	8012a8c <__ssvfiscanf_r+0x2d8>
 801294a:	3301      	adds	r3, #1
 801294c:	6862      	ldr	r2, [r4, #4]
 801294e:	6023      	str	r3, [r4, #0]
 8012950:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012952:	3a01      	subs	r2, #1
 8012954:	3301      	adds	r3, #1
 8012956:	6062      	str	r2, [r4, #4]
 8012958:	9345      	str	r3, [sp, #276]	; 0x114
 801295a:	e755      	b.n	8012808 <__ssvfiscanf_r+0x54>
 801295c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801295e:	4621      	mov	r1, r4
 8012960:	4630      	mov	r0, r6
 8012962:	4798      	blx	r3
 8012964:	2800      	cmp	r0, #0
 8012966:	d0eb      	beq.n	8012940 <__ssvfiscanf_r+0x18c>
 8012968:	9844      	ldr	r0, [sp, #272]	; 0x110
 801296a:	2800      	cmp	r0, #0
 801296c:	f040 8084 	bne.w	8012a78 <__ssvfiscanf_r+0x2c4>
 8012970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012974:	e086      	b.n	8012a84 <__ssvfiscanf_r+0x2d0>
 8012976:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012978:	f042 0220 	orr.w	r2, r2, #32
 801297c:	9241      	str	r2, [sp, #260]	; 0x104
 801297e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012984:	9241      	str	r2, [sp, #260]	; 0x104
 8012986:	2210      	movs	r2, #16
 8012988:	2b6f      	cmp	r3, #111	; 0x6f
 801298a:	9242      	str	r2, [sp, #264]	; 0x108
 801298c:	bf34      	ite	cc
 801298e:	2303      	movcc	r3, #3
 8012990:	2304      	movcs	r3, #4
 8012992:	9347      	str	r3, [sp, #284]	; 0x11c
 8012994:	6863      	ldr	r3, [r4, #4]
 8012996:	2b00      	cmp	r3, #0
 8012998:	dd41      	ble.n	8012a1e <__ssvfiscanf_r+0x26a>
 801299a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801299c:	0659      	lsls	r1, r3, #25
 801299e:	d404      	bmi.n	80129aa <__ssvfiscanf_r+0x1f6>
 80129a0:	6823      	ldr	r3, [r4, #0]
 80129a2:	781a      	ldrb	r2, [r3, #0]
 80129a4:	5cba      	ldrb	r2, [r7, r2]
 80129a6:	0712      	lsls	r2, r2, #28
 80129a8:	d440      	bmi.n	8012a2c <__ssvfiscanf_r+0x278>
 80129aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80129ac:	2b02      	cmp	r3, #2
 80129ae:	dc4f      	bgt.n	8012a50 <__ssvfiscanf_r+0x29c>
 80129b0:	466b      	mov	r3, sp
 80129b2:	4622      	mov	r2, r4
 80129b4:	a941      	add	r1, sp, #260	; 0x104
 80129b6:	4630      	mov	r0, r6
 80129b8:	f000 f874 	bl	8012aa4 <_scanf_chars>
 80129bc:	2801      	cmp	r0, #1
 80129be:	d065      	beq.n	8012a8c <__ssvfiscanf_r+0x2d8>
 80129c0:	2802      	cmp	r0, #2
 80129c2:	f47f af21 	bne.w	8012808 <__ssvfiscanf_r+0x54>
 80129c6:	e7cf      	b.n	8012968 <__ssvfiscanf_r+0x1b4>
 80129c8:	220a      	movs	r2, #10
 80129ca:	e7dd      	b.n	8012988 <__ssvfiscanf_r+0x1d4>
 80129cc:	2300      	movs	r3, #0
 80129ce:	9342      	str	r3, [sp, #264]	; 0x108
 80129d0:	2303      	movs	r3, #3
 80129d2:	e7de      	b.n	8012992 <__ssvfiscanf_r+0x1de>
 80129d4:	2308      	movs	r3, #8
 80129d6:	9342      	str	r3, [sp, #264]	; 0x108
 80129d8:	2304      	movs	r3, #4
 80129da:	e7da      	b.n	8012992 <__ssvfiscanf_r+0x1de>
 80129dc:	4629      	mov	r1, r5
 80129de:	4640      	mov	r0, r8
 80129e0:	f000 f9c6 	bl	8012d70 <__sccl>
 80129e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80129e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129ea:	9341      	str	r3, [sp, #260]	; 0x104
 80129ec:	4605      	mov	r5, r0
 80129ee:	2301      	movs	r3, #1
 80129f0:	e7cf      	b.n	8012992 <__ssvfiscanf_r+0x1de>
 80129f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80129f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129f8:	9341      	str	r3, [sp, #260]	; 0x104
 80129fa:	2300      	movs	r3, #0
 80129fc:	e7c9      	b.n	8012992 <__ssvfiscanf_r+0x1de>
 80129fe:	2302      	movs	r3, #2
 8012a00:	e7c7      	b.n	8012992 <__ssvfiscanf_r+0x1de>
 8012a02:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012a04:	06c3      	lsls	r3, r0, #27
 8012a06:	f53f aeff 	bmi.w	8012808 <__ssvfiscanf_r+0x54>
 8012a0a:	9b00      	ldr	r3, [sp, #0]
 8012a0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012a0e:	1d19      	adds	r1, r3, #4
 8012a10:	9100      	str	r1, [sp, #0]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	07c0      	lsls	r0, r0, #31
 8012a16:	bf4c      	ite	mi
 8012a18:	801a      	strhmi	r2, [r3, #0]
 8012a1a:	601a      	strpl	r2, [r3, #0]
 8012a1c:	e6f4      	b.n	8012808 <__ssvfiscanf_r+0x54>
 8012a1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012a20:	4621      	mov	r1, r4
 8012a22:	4630      	mov	r0, r6
 8012a24:	4798      	blx	r3
 8012a26:	2800      	cmp	r0, #0
 8012a28:	d0b7      	beq.n	801299a <__ssvfiscanf_r+0x1e6>
 8012a2a:	e79d      	b.n	8012968 <__ssvfiscanf_r+0x1b4>
 8012a2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012a2e:	3201      	adds	r2, #1
 8012a30:	9245      	str	r2, [sp, #276]	; 0x114
 8012a32:	6862      	ldr	r2, [r4, #4]
 8012a34:	3a01      	subs	r2, #1
 8012a36:	2a00      	cmp	r2, #0
 8012a38:	6062      	str	r2, [r4, #4]
 8012a3a:	dd02      	ble.n	8012a42 <__ssvfiscanf_r+0x28e>
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	6023      	str	r3, [r4, #0]
 8012a40:	e7ae      	b.n	80129a0 <__ssvfiscanf_r+0x1ec>
 8012a42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012a44:	4621      	mov	r1, r4
 8012a46:	4630      	mov	r0, r6
 8012a48:	4798      	blx	r3
 8012a4a:	2800      	cmp	r0, #0
 8012a4c:	d0a8      	beq.n	80129a0 <__ssvfiscanf_r+0x1ec>
 8012a4e:	e78b      	b.n	8012968 <__ssvfiscanf_r+0x1b4>
 8012a50:	2b04      	cmp	r3, #4
 8012a52:	dc06      	bgt.n	8012a62 <__ssvfiscanf_r+0x2ae>
 8012a54:	466b      	mov	r3, sp
 8012a56:	4622      	mov	r2, r4
 8012a58:	a941      	add	r1, sp, #260	; 0x104
 8012a5a:	4630      	mov	r0, r6
 8012a5c:	f000 f87a 	bl	8012b54 <_scanf_i>
 8012a60:	e7ac      	b.n	80129bc <__ssvfiscanf_r+0x208>
 8012a62:	4b0f      	ldr	r3, [pc, #60]	; (8012aa0 <__ssvfiscanf_r+0x2ec>)
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	f43f aecf 	beq.w	8012808 <__ssvfiscanf_r+0x54>
 8012a6a:	466b      	mov	r3, sp
 8012a6c:	4622      	mov	r2, r4
 8012a6e:	a941      	add	r1, sp, #260	; 0x104
 8012a70:	4630      	mov	r0, r6
 8012a72:	f7fc faa3 	bl	800efbc <_scanf_float>
 8012a76:	e7a1      	b.n	80129bc <__ssvfiscanf_r+0x208>
 8012a78:	89a3      	ldrh	r3, [r4, #12]
 8012a7a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012a7e:	bf18      	it	ne
 8012a80:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8012a84:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8012a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a8c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012a8e:	e7f9      	b.n	8012a84 <__ssvfiscanf_r+0x2d0>
 8012a90:	08012701 	.word	0x08012701
 8012a94:	0801277b 	.word	0x0801277b
 8012a98:	08013811 	.word	0x08013811
 8012a9c:	08013c7a 	.word	0x08013c7a
 8012aa0:	0800efbd 	.word	0x0800efbd

08012aa4 <_scanf_chars>:
 8012aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012aa8:	4615      	mov	r5, r2
 8012aaa:	688a      	ldr	r2, [r1, #8]
 8012aac:	4680      	mov	r8, r0
 8012aae:	460c      	mov	r4, r1
 8012ab0:	b932      	cbnz	r2, 8012ac0 <_scanf_chars+0x1c>
 8012ab2:	698a      	ldr	r2, [r1, #24]
 8012ab4:	2a00      	cmp	r2, #0
 8012ab6:	bf0c      	ite	eq
 8012ab8:	2201      	moveq	r2, #1
 8012aba:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8012abe:	608a      	str	r2, [r1, #8]
 8012ac0:	6822      	ldr	r2, [r4, #0]
 8012ac2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8012b50 <_scanf_chars+0xac>
 8012ac6:	06d1      	lsls	r1, r2, #27
 8012ac8:	bf5f      	itttt	pl
 8012aca:	681a      	ldrpl	r2, [r3, #0]
 8012acc:	1d11      	addpl	r1, r2, #4
 8012ace:	6019      	strpl	r1, [r3, #0]
 8012ad0:	6816      	ldrpl	r6, [r2, #0]
 8012ad2:	2700      	movs	r7, #0
 8012ad4:	69a0      	ldr	r0, [r4, #24]
 8012ad6:	b188      	cbz	r0, 8012afc <_scanf_chars+0x58>
 8012ad8:	2801      	cmp	r0, #1
 8012ada:	d107      	bne.n	8012aec <_scanf_chars+0x48>
 8012adc:	682b      	ldr	r3, [r5, #0]
 8012ade:	781a      	ldrb	r2, [r3, #0]
 8012ae0:	6963      	ldr	r3, [r4, #20]
 8012ae2:	5c9b      	ldrb	r3, [r3, r2]
 8012ae4:	b953      	cbnz	r3, 8012afc <_scanf_chars+0x58>
 8012ae6:	bb27      	cbnz	r7, 8012b32 <_scanf_chars+0x8e>
 8012ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aec:	2802      	cmp	r0, #2
 8012aee:	d120      	bne.n	8012b32 <_scanf_chars+0x8e>
 8012af0:	682b      	ldr	r3, [r5, #0]
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8012af8:	071b      	lsls	r3, r3, #28
 8012afa:	d41a      	bmi.n	8012b32 <_scanf_chars+0x8e>
 8012afc:	6823      	ldr	r3, [r4, #0]
 8012afe:	06da      	lsls	r2, r3, #27
 8012b00:	bf5e      	ittt	pl
 8012b02:	682b      	ldrpl	r3, [r5, #0]
 8012b04:	781b      	ldrbpl	r3, [r3, #0]
 8012b06:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012b0a:	682a      	ldr	r2, [r5, #0]
 8012b0c:	686b      	ldr	r3, [r5, #4]
 8012b0e:	3201      	adds	r2, #1
 8012b10:	602a      	str	r2, [r5, #0]
 8012b12:	68a2      	ldr	r2, [r4, #8]
 8012b14:	3b01      	subs	r3, #1
 8012b16:	3a01      	subs	r2, #1
 8012b18:	606b      	str	r3, [r5, #4]
 8012b1a:	3701      	adds	r7, #1
 8012b1c:	60a2      	str	r2, [r4, #8]
 8012b1e:	b142      	cbz	r2, 8012b32 <_scanf_chars+0x8e>
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	dcd7      	bgt.n	8012ad4 <_scanf_chars+0x30>
 8012b24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012b28:	4629      	mov	r1, r5
 8012b2a:	4640      	mov	r0, r8
 8012b2c:	4798      	blx	r3
 8012b2e:	2800      	cmp	r0, #0
 8012b30:	d0d0      	beq.n	8012ad4 <_scanf_chars+0x30>
 8012b32:	6823      	ldr	r3, [r4, #0]
 8012b34:	f013 0310 	ands.w	r3, r3, #16
 8012b38:	d105      	bne.n	8012b46 <_scanf_chars+0xa2>
 8012b3a:	68e2      	ldr	r2, [r4, #12]
 8012b3c:	3201      	adds	r2, #1
 8012b3e:	60e2      	str	r2, [r4, #12]
 8012b40:	69a2      	ldr	r2, [r4, #24]
 8012b42:	b102      	cbz	r2, 8012b46 <_scanf_chars+0xa2>
 8012b44:	7033      	strb	r3, [r6, #0]
 8012b46:	6923      	ldr	r3, [r4, #16]
 8012b48:	441f      	add	r7, r3
 8012b4a:	6127      	str	r7, [r4, #16]
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	e7cb      	b.n	8012ae8 <_scanf_chars+0x44>
 8012b50:	08013811 	.word	0x08013811

08012b54 <_scanf_i>:
 8012b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b58:	4698      	mov	r8, r3
 8012b5a:	4b74      	ldr	r3, [pc, #464]	; (8012d2c <_scanf_i+0x1d8>)
 8012b5c:	460c      	mov	r4, r1
 8012b5e:	4682      	mov	sl, r0
 8012b60:	4616      	mov	r6, r2
 8012b62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b66:	b087      	sub	sp, #28
 8012b68:	ab03      	add	r3, sp, #12
 8012b6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012b6e:	4b70      	ldr	r3, [pc, #448]	; (8012d30 <_scanf_i+0x1dc>)
 8012b70:	69a1      	ldr	r1, [r4, #24]
 8012b72:	4a70      	ldr	r2, [pc, #448]	; (8012d34 <_scanf_i+0x1e0>)
 8012b74:	2903      	cmp	r1, #3
 8012b76:	bf18      	it	ne
 8012b78:	461a      	movne	r2, r3
 8012b7a:	68a3      	ldr	r3, [r4, #8]
 8012b7c:	9201      	str	r2, [sp, #4]
 8012b7e:	1e5a      	subs	r2, r3, #1
 8012b80:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012b84:	bf88      	it	hi
 8012b86:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012b8a:	4627      	mov	r7, r4
 8012b8c:	bf82      	ittt	hi
 8012b8e:	eb03 0905 	addhi.w	r9, r3, r5
 8012b92:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012b96:	60a3      	strhi	r3, [r4, #8]
 8012b98:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012b9c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012ba0:	bf98      	it	ls
 8012ba2:	f04f 0900 	movls.w	r9, #0
 8012ba6:	6023      	str	r3, [r4, #0]
 8012ba8:	463d      	mov	r5, r7
 8012baa:	f04f 0b00 	mov.w	fp, #0
 8012bae:	6831      	ldr	r1, [r6, #0]
 8012bb0:	ab03      	add	r3, sp, #12
 8012bb2:	7809      	ldrb	r1, [r1, #0]
 8012bb4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012bb8:	2202      	movs	r2, #2
 8012bba:	f7ed fb21 	bl	8000200 <memchr>
 8012bbe:	b328      	cbz	r0, 8012c0c <_scanf_i+0xb8>
 8012bc0:	f1bb 0f01 	cmp.w	fp, #1
 8012bc4:	d159      	bne.n	8012c7a <_scanf_i+0x126>
 8012bc6:	6862      	ldr	r2, [r4, #4]
 8012bc8:	b92a      	cbnz	r2, 8012bd6 <_scanf_i+0x82>
 8012bca:	6822      	ldr	r2, [r4, #0]
 8012bcc:	2308      	movs	r3, #8
 8012bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012bd2:	6063      	str	r3, [r4, #4]
 8012bd4:	6022      	str	r2, [r4, #0]
 8012bd6:	6822      	ldr	r2, [r4, #0]
 8012bd8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012bdc:	6022      	str	r2, [r4, #0]
 8012bde:	68a2      	ldr	r2, [r4, #8]
 8012be0:	1e51      	subs	r1, r2, #1
 8012be2:	60a1      	str	r1, [r4, #8]
 8012be4:	b192      	cbz	r2, 8012c0c <_scanf_i+0xb8>
 8012be6:	6832      	ldr	r2, [r6, #0]
 8012be8:	1c51      	adds	r1, r2, #1
 8012bea:	6031      	str	r1, [r6, #0]
 8012bec:	7812      	ldrb	r2, [r2, #0]
 8012bee:	f805 2b01 	strb.w	r2, [r5], #1
 8012bf2:	6872      	ldr	r2, [r6, #4]
 8012bf4:	3a01      	subs	r2, #1
 8012bf6:	2a00      	cmp	r2, #0
 8012bf8:	6072      	str	r2, [r6, #4]
 8012bfa:	dc07      	bgt.n	8012c0c <_scanf_i+0xb8>
 8012bfc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012c00:	4631      	mov	r1, r6
 8012c02:	4650      	mov	r0, sl
 8012c04:	4790      	blx	r2
 8012c06:	2800      	cmp	r0, #0
 8012c08:	f040 8085 	bne.w	8012d16 <_scanf_i+0x1c2>
 8012c0c:	f10b 0b01 	add.w	fp, fp, #1
 8012c10:	f1bb 0f03 	cmp.w	fp, #3
 8012c14:	d1cb      	bne.n	8012bae <_scanf_i+0x5a>
 8012c16:	6863      	ldr	r3, [r4, #4]
 8012c18:	b90b      	cbnz	r3, 8012c1e <_scanf_i+0xca>
 8012c1a:	230a      	movs	r3, #10
 8012c1c:	6063      	str	r3, [r4, #4]
 8012c1e:	6863      	ldr	r3, [r4, #4]
 8012c20:	4945      	ldr	r1, [pc, #276]	; (8012d38 <_scanf_i+0x1e4>)
 8012c22:	6960      	ldr	r0, [r4, #20]
 8012c24:	1ac9      	subs	r1, r1, r3
 8012c26:	f000 f8a3 	bl	8012d70 <__sccl>
 8012c2a:	f04f 0b00 	mov.w	fp, #0
 8012c2e:	68a3      	ldr	r3, [r4, #8]
 8012c30:	6822      	ldr	r2, [r4, #0]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d03d      	beq.n	8012cb2 <_scanf_i+0x15e>
 8012c36:	6831      	ldr	r1, [r6, #0]
 8012c38:	6960      	ldr	r0, [r4, #20]
 8012c3a:	f891 c000 	ldrb.w	ip, [r1]
 8012c3e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012c42:	2800      	cmp	r0, #0
 8012c44:	d035      	beq.n	8012cb2 <_scanf_i+0x15e>
 8012c46:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8012c4a:	d124      	bne.n	8012c96 <_scanf_i+0x142>
 8012c4c:	0510      	lsls	r0, r2, #20
 8012c4e:	d522      	bpl.n	8012c96 <_scanf_i+0x142>
 8012c50:	f10b 0b01 	add.w	fp, fp, #1
 8012c54:	f1b9 0f00 	cmp.w	r9, #0
 8012c58:	d003      	beq.n	8012c62 <_scanf_i+0x10e>
 8012c5a:	3301      	adds	r3, #1
 8012c5c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8012c60:	60a3      	str	r3, [r4, #8]
 8012c62:	6873      	ldr	r3, [r6, #4]
 8012c64:	3b01      	subs	r3, #1
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	6073      	str	r3, [r6, #4]
 8012c6a:	dd1b      	ble.n	8012ca4 <_scanf_i+0x150>
 8012c6c:	6833      	ldr	r3, [r6, #0]
 8012c6e:	3301      	adds	r3, #1
 8012c70:	6033      	str	r3, [r6, #0]
 8012c72:	68a3      	ldr	r3, [r4, #8]
 8012c74:	3b01      	subs	r3, #1
 8012c76:	60a3      	str	r3, [r4, #8]
 8012c78:	e7d9      	b.n	8012c2e <_scanf_i+0xda>
 8012c7a:	f1bb 0f02 	cmp.w	fp, #2
 8012c7e:	d1ae      	bne.n	8012bde <_scanf_i+0x8a>
 8012c80:	6822      	ldr	r2, [r4, #0]
 8012c82:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012c86:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012c8a:	d1bf      	bne.n	8012c0c <_scanf_i+0xb8>
 8012c8c:	2310      	movs	r3, #16
 8012c8e:	6063      	str	r3, [r4, #4]
 8012c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012c94:	e7a2      	b.n	8012bdc <_scanf_i+0x88>
 8012c96:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012c9a:	6022      	str	r2, [r4, #0]
 8012c9c:	780b      	ldrb	r3, [r1, #0]
 8012c9e:	f805 3b01 	strb.w	r3, [r5], #1
 8012ca2:	e7de      	b.n	8012c62 <_scanf_i+0x10e>
 8012ca4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012ca8:	4631      	mov	r1, r6
 8012caa:	4650      	mov	r0, sl
 8012cac:	4798      	blx	r3
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	d0df      	beq.n	8012c72 <_scanf_i+0x11e>
 8012cb2:	6823      	ldr	r3, [r4, #0]
 8012cb4:	05d9      	lsls	r1, r3, #23
 8012cb6:	d50d      	bpl.n	8012cd4 <_scanf_i+0x180>
 8012cb8:	42bd      	cmp	r5, r7
 8012cba:	d909      	bls.n	8012cd0 <_scanf_i+0x17c>
 8012cbc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012cc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012cc4:	4632      	mov	r2, r6
 8012cc6:	4650      	mov	r0, sl
 8012cc8:	4798      	blx	r3
 8012cca:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8012cce:	464d      	mov	r5, r9
 8012cd0:	42bd      	cmp	r5, r7
 8012cd2:	d028      	beq.n	8012d26 <_scanf_i+0x1d2>
 8012cd4:	6822      	ldr	r2, [r4, #0]
 8012cd6:	f012 0210 	ands.w	r2, r2, #16
 8012cda:	d113      	bne.n	8012d04 <_scanf_i+0x1b0>
 8012cdc:	702a      	strb	r2, [r5, #0]
 8012cde:	6863      	ldr	r3, [r4, #4]
 8012ce0:	9e01      	ldr	r6, [sp, #4]
 8012ce2:	4639      	mov	r1, r7
 8012ce4:	4650      	mov	r0, sl
 8012ce6:	47b0      	blx	r6
 8012ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8012cec:	6821      	ldr	r1, [r4, #0]
 8012cee:	1d1a      	adds	r2, r3, #4
 8012cf0:	f8c8 2000 	str.w	r2, [r8]
 8012cf4:	f011 0f20 	tst.w	r1, #32
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	d00f      	beq.n	8012d1c <_scanf_i+0x1c8>
 8012cfc:	6018      	str	r0, [r3, #0]
 8012cfe:	68e3      	ldr	r3, [r4, #12]
 8012d00:	3301      	adds	r3, #1
 8012d02:	60e3      	str	r3, [r4, #12]
 8012d04:	1bed      	subs	r5, r5, r7
 8012d06:	44ab      	add	fp, r5
 8012d08:	6925      	ldr	r5, [r4, #16]
 8012d0a:	445d      	add	r5, fp
 8012d0c:	6125      	str	r5, [r4, #16]
 8012d0e:	2000      	movs	r0, #0
 8012d10:	b007      	add	sp, #28
 8012d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d16:	f04f 0b00 	mov.w	fp, #0
 8012d1a:	e7ca      	b.n	8012cb2 <_scanf_i+0x15e>
 8012d1c:	07ca      	lsls	r2, r1, #31
 8012d1e:	bf4c      	ite	mi
 8012d20:	8018      	strhmi	r0, [r3, #0]
 8012d22:	6018      	strpl	r0, [r3, #0]
 8012d24:	e7eb      	b.n	8012cfe <_scanf_i+0x1aa>
 8012d26:	2001      	movs	r0, #1
 8012d28:	e7f2      	b.n	8012d10 <_scanf_i+0x1bc>
 8012d2a:	bf00      	nop
 8012d2c:	080137a4 	.word	0x080137a4
 8012d30:	08012edd 	.word	0x08012edd
 8012d34:	08010389 	.word	0x08010389
 8012d38:	08013c9e 	.word	0x08013c9e

08012d3c <_read_r>:
 8012d3c:	b538      	push	{r3, r4, r5, lr}
 8012d3e:	4d07      	ldr	r5, [pc, #28]	; (8012d5c <_read_r+0x20>)
 8012d40:	4604      	mov	r4, r0
 8012d42:	4608      	mov	r0, r1
 8012d44:	4611      	mov	r1, r2
 8012d46:	2200      	movs	r2, #0
 8012d48:	602a      	str	r2, [r5, #0]
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	f7ef ff62 	bl	8002c14 <_read>
 8012d50:	1c43      	adds	r3, r0, #1
 8012d52:	d102      	bne.n	8012d5a <_read_r+0x1e>
 8012d54:	682b      	ldr	r3, [r5, #0]
 8012d56:	b103      	cbz	r3, 8012d5a <_read_r+0x1e>
 8012d58:	6023      	str	r3, [r4, #0]
 8012d5a:	bd38      	pop	{r3, r4, r5, pc}
 8012d5c:	200071a4 	.word	0x200071a4

08012d60 <nan>:
 8012d60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012d68 <nan+0x8>
 8012d64:	4770      	bx	lr
 8012d66:	bf00      	nop
 8012d68:	00000000 	.word	0x00000000
 8012d6c:	7ff80000 	.word	0x7ff80000

08012d70 <__sccl>:
 8012d70:	b570      	push	{r4, r5, r6, lr}
 8012d72:	780b      	ldrb	r3, [r1, #0]
 8012d74:	4604      	mov	r4, r0
 8012d76:	2b5e      	cmp	r3, #94	; 0x5e
 8012d78:	bf0b      	itete	eq
 8012d7a:	784b      	ldrbeq	r3, [r1, #1]
 8012d7c:	1c48      	addne	r0, r1, #1
 8012d7e:	1c88      	addeq	r0, r1, #2
 8012d80:	2200      	movne	r2, #0
 8012d82:	bf08      	it	eq
 8012d84:	2201      	moveq	r2, #1
 8012d86:	1e61      	subs	r1, r4, #1
 8012d88:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8012d8c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012d90:	42a9      	cmp	r1, r5
 8012d92:	d1fb      	bne.n	8012d8c <__sccl+0x1c>
 8012d94:	b90b      	cbnz	r3, 8012d9a <__sccl+0x2a>
 8012d96:	3801      	subs	r0, #1
 8012d98:	bd70      	pop	{r4, r5, r6, pc}
 8012d9a:	f082 0101 	eor.w	r1, r2, #1
 8012d9e:	54e1      	strb	r1, [r4, r3]
 8012da0:	1c42      	adds	r2, r0, #1
 8012da2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8012da6:	2d2d      	cmp	r5, #45	; 0x2d
 8012da8:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8012dac:	4610      	mov	r0, r2
 8012dae:	d006      	beq.n	8012dbe <__sccl+0x4e>
 8012db0:	2d5d      	cmp	r5, #93	; 0x5d
 8012db2:	d0f1      	beq.n	8012d98 <__sccl+0x28>
 8012db4:	b90d      	cbnz	r5, 8012dba <__sccl+0x4a>
 8012db6:	4630      	mov	r0, r6
 8012db8:	e7ee      	b.n	8012d98 <__sccl+0x28>
 8012dba:	462b      	mov	r3, r5
 8012dbc:	e7ef      	b.n	8012d9e <__sccl+0x2e>
 8012dbe:	7816      	ldrb	r6, [r2, #0]
 8012dc0:	2e5d      	cmp	r6, #93	; 0x5d
 8012dc2:	d0fa      	beq.n	8012dba <__sccl+0x4a>
 8012dc4:	42b3      	cmp	r3, r6
 8012dc6:	dcf8      	bgt.n	8012dba <__sccl+0x4a>
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3001      	adds	r0, #1
 8012dcc:	4286      	cmp	r6, r0
 8012dce:	5421      	strb	r1, [r4, r0]
 8012dd0:	dcfb      	bgt.n	8012dca <__sccl+0x5a>
 8012dd2:	43d8      	mvns	r0, r3
 8012dd4:	4430      	add	r0, r6
 8012dd6:	1c5d      	adds	r5, r3, #1
 8012dd8:	42b3      	cmp	r3, r6
 8012dda:	bfa8      	it	ge
 8012ddc:	2000      	movge	r0, #0
 8012dde:	182b      	adds	r3, r5, r0
 8012de0:	3202      	adds	r2, #2
 8012de2:	e7de      	b.n	8012da2 <__sccl+0x32>

08012de4 <_strtoul_l.isra.0>:
 8012de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012de8:	4e3b      	ldr	r6, [pc, #236]	; (8012ed8 <_strtoul_l.isra.0+0xf4>)
 8012dea:	4686      	mov	lr, r0
 8012dec:	468c      	mov	ip, r1
 8012dee:	4660      	mov	r0, ip
 8012df0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012df4:	5da5      	ldrb	r5, [r4, r6]
 8012df6:	f015 0508 	ands.w	r5, r5, #8
 8012dfa:	d1f8      	bne.n	8012dee <_strtoul_l.isra.0+0xa>
 8012dfc:	2c2d      	cmp	r4, #45	; 0x2d
 8012dfe:	d134      	bne.n	8012e6a <_strtoul_l.isra.0+0x86>
 8012e00:	f89c 4000 	ldrb.w	r4, [ip]
 8012e04:	f04f 0801 	mov.w	r8, #1
 8012e08:	f100 0c02 	add.w	ip, r0, #2
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d05e      	beq.n	8012ece <_strtoul_l.isra.0+0xea>
 8012e10:	2b10      	cmp	r3, #16
 8012e12:	d10c      	bne.n	8012e2e <_strtoul_l.isra.0+0x4a>
 8012e14:	2c30      	cmp	r4, #48	; 0x30
 8012e16:	d10a      	bne.n	8012e2e <_strtoul_l.isra.0+0x4a>
 8012e18:	f89c 0000 	ldrb.w	r0, [ip]
 8012e1c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012e20:	2858      	cmp	r0, #88	; 0x58
 8012e22:	d14f      	bne.n	8012ec4 <_strtoul_l.isra.0+0xe0>
 8012e24:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8012e28:	2310      	movs	r3, #16
 8012e2a:	f10c 0c02 	add.w	ip, ip, #2
 8012e2e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012e32:	2500      	movs	r5, #0
 8012e34:	fbb7 f7f3 	udiv	r7, r7, r3
 8012e38:	fb03 f907 	mul.w	r9, r3, r7
 8012e3c:	ea6f 0909 	mvn.w	r9, r9
 8012e40:	4628      	mov	r0, r5
 8012e42:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8012e46:	2e09      	cmp	r6, #9
 8012e48:	d818      	bhi.n	8012e7c <_strtoul_l.isra.0+0x98>
 8012e4a:	4634      	mov	r4, r6
 8012e4c:	42a3      	cmp	r3, r4
 8012e4e:	dd24      	ble.n	8012e9a <_strtoul_l.isra.0+0xb6>
 8012e50:	2d00      	cmp	r5, #0
 8012e52:	db1f      	blt.n	8012e94 <_strtoul_l.isra.0+0xb0>
 8012e54:	4287      	cmp	r7, r0
 8012e56:	d31d      	bcc.n	8012e94 <_strtoul_l.isra.0+0xb0>
 8012e58:	d101      	bne.n	8012e5e <_strtoul_l.isra.0+0x7a>
 8012e5a:	45a1      	cmp	r9, r4
 8012e5c:	db1a      	blt.n	8012e94 <_strtoul_l.isra.0+0xb0>
 8012e5e:	fb00 4003 	mla	r0, r0, r3, r4
 8012e62:	2501      	movs	r5, #1
 8012e64:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012e68:	e7eb      	b.n	8012e42 <_strtoul_l.isra.0+0x5e>
 8012e6a:	2c2b      	cmp	r4, #43	; 0x2b
 8012e6c:	bf08      	it	eq
 8012e6e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8012e72:	46a8      	mov	r8, r5
 8012e74:	bf08      	it	eq
 8012e76:	f100 0c02 	addeq.w	ip, r0, #2
 8012e7a:	e7c7      	b.n	8012e0c <_strtoul_l.isra.0+0x28>
 8012e7c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8012e80:	2e19      	cmp	r6, #25
 8012e82:	d801      	bhi.n	8012e88 <_strtoul_l.isra.0+0xa4>
 8012e84:	3c37      	subs	r4, #55	; 0x37
 8012e86:	e7e1      	b.n	8012e4c <_strtoul_l.isra.0+0x68>
 8012e88:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8012e8c:	2e19      	cmp	r6, #25
 8012e8e:	d804      	bhi.n	8012e9a <_strtoul_l.isra.0+0xb6>
 8012e90:	3c57      	subs	r4, #87	; 0x57
 8012e92:	e7db      	b.n	8012e4c <_strtoul_l.isra.0+0x68>
 8012e94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8012e98:	e7e4      	b.n	8012e64 <_strtoul_l.isra.0+0x80>
 8012e9a:	2d00      	cmp	r5, #0
 8012e9c:	da07      	bge.n	8012eae <_strtoul_l.isra.0+0xca>
 8012e9e:	2322      	movs	r3, #34	; 0x22
 8012ea0:	f8ce 3000 	str.w	r3, [lr]
 8012ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ea8:	b942      	cbnz	r2, 8012ebc <_strtoul_l.isra.0+0xd8>
 8012eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012eae:	f1b8 0f00 	cmp.w	r8, #0
 8012eb2:	d000      	beq.n	8012eb6 <_strtoul_l.isra.0+0xd2>
 8012eb4:	4240      	negs	r0, r0
 8012eb6:	2a00      	cmp	r2, #0
 8012eb8:	d0f7      	beq.n	8012eaa <_strtoul_l.isra.0+0xc6>
 8012eba:	b10d      	cbz	r5, 8012ec0 <_strtoul_l.isra.0+0xdc>
 8012ebc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8012ec0:	6011      	str	r1, [r2, #0]
 8012ec2:	e7f2      	b.n	8012eaa <_strtoul_l.isra.0+0xc6>
 8012ec4:	2430      	movs	r4, #48	; 0x30
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d1b1      	bne.n	8012e2e <_strtoul_l.isra.0+0x4a>
 8012eca:	2308      	movs	r3, #8
 8012ecc:	e7af      	b.n	8012e2e <_strtoul_l.isra.0+0x4a>
 8012ece:	2c30      	cmp	r4, #48	; 0x30
 8012ed0:	d0a2      	beq.n	8012e18 <_strtoul_l.isra.0+0x34>
 8012ed2:	230a      	movs	r3, #10
 8012ed4:	e7ab      	b.n	8012e2e <_strtoul_l.isra.0+0x4a>
 8012ed6:	bf00      	nop
 8012ed8:	08013811 	.word	0x08013811

08012edc <_strtoul_r>:
 8012edc:	f7ff bf82 	b.w	8012de4 <_strtoul_l.isra.0>

08012ee0 <__submore>:
 8012ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee4:	460c      	mov	r4, r1
 8012ee6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012eec:	4299      	cmp	r1, r3
 8012eee:	d11d      	bne.n	8012f2c <__submore+0x4c>
 8012ef0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012ef4:	f7fb fb9e 	bl	800e634 <_malloc_r>
 8012ef8:	b918      	cbnz	r0, 8012f02 <__submore+0x22>
 8012efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f06:	63a3      	str	r3, [r4, #56]	; 0x38
 8012f08:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8012f0c:	6360      	str	r0, [r4, #52]	; 0x34
 8012f0e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8012f12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8012f16:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8012f1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012f1e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8012f22:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8012f26:	6020      	str	r0, [r4, #0]
 8012f28:	2000      	movs	r0, #0
 8012f2a:	e7e8      	b.n	8012efe <__submore+0x1e>
 8012f2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8012f2e:	0077      	lsls	r7, r6, #1
 8012f30:	463a      	mov	r2, r7
 8012f32:	f000 f867 	bl	8013004 <_realloc_r>
 8012f36:	4605      	mov	r5, r0
 8012f38:	2800      	cmp	r0, #0
 8012f3a:	d0de      	beq.n	8012efa <__submore+0x1a>
 8012f3c:	eb00 0806 	add.w	r8, r0, r6
 8012f40:	4601      	mov	r1, r0
 8012f42:	4632      	mov	r2, r6
 8012f44:	4640      	mov	r0, r8
 8012f46:	f7fb fb5e 	bl	800e606 <memcpy>
 8012f4a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8012f4e:	f8c4 8000 	str.w	r8, [r4]
 8012f52:	e7e9      	b.n	8012f28 <__submore+0x48>

08012f54 <__ascii_wctomb>:
 8012f54:	b149      	cbz	r1, 8012f6a <__ascii_wctomb+0x16>
 8012f56:	2aff      	cmp	r2, #255	; 0xff
 8012f58:	bf85      	ittet	hi
 8012f5a:	238a      	movhi	r3, #138	; 0x8a
 8012f5c:	6003      	strhi	r3, [r0, #0]
 8012f5e:	700a      	strbls	r2, [r1, #0]
 8012f60:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012f64:	bf98      	it	ls
 8012f66:	2001      	movls	r0, #1
 8012f68:	4770      	bx	lr
 8012f6a:	4608      	mov	r0, r1
 8012f6c:	4770      	bx	lr
	...

08012f70 <__assert_func>:
 8012f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f72:	4614      	mov	r4, r2
 8012f74:	461a      	mov	r2, r3
 8012f76:	4b09      	ldr	r3, [pc, #36]	; (8012f9c <__assert_func+0x2c>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	4605      	mov	r5, r0
 8012f7c:	68d8      	ldr	r0, [r3, #12]
 8012f7e:	b14c      	cbz	r4, 8012f94 <__assert_func+0x24>
 8012f80:	4b07      	ldr	r3, [pc, #28]	; (8012fa0 <__assert_func+0x30>)
 8012f82:	9100      	str	r1, [sp, #0]
 8012f84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f88:	4906      	ldr	r1, [pc, #24]	; (8012fa4 <__assert_func+0x34>)
 8012f8a:	462b      	mov	r3, r5
 8012f8c:	f000 f80e 	bl	8012fac <fiprintf>
 8012f90:	f000 fa78 	bl	8013484 <abort>
 8012f94:	4b04      	ldr	r3, [pc, #16]	; (8012fa8 <__assert_func+0x38>)
 8012f96:	461c      	mov	r4, r3
 8012f98:	e7f3      	b.n	8012f82 <__assert_func+0x12>
 8012f9a:	bf00      	nop
 8012f9c:	20000198 	.word	0x20000198
 8012fa0:	08013ca0 	.word	0x08013ca0
 8012fa4:	08013cad 	.word	0x08013cad
 8012fa8:	08013cdb 	.word	0x08013cdb

08012fac <fiprintf>:
 8012fac:	b40e      	push	{r1, r2, r3}
 8012fae:	b503      	push	{r0, r1, lr}
 8012fb0:	4601      	mov	r1, r0
 8012fb2:	ab03      	add	r3, sp, #12
 8012fb4:	4805      	ldr	r0, [pc, #20]	; (8012fcc <fiprintf+0x20>)
 8012fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fba:	6800      	ldr	r0, [r0, #0]
 8012fbc:	9301      	str	r3, [sp, #4]
 8012fbe:	f000 f871 	bl	80130a4 <_vfiprintf_r>
 8012fc2:	b002      	add	sp, #8
 8012fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fc8:	b003      	add	sp, #12
 8012fca:	4770      	bx	lr
 8012fcc:	20000198 	.word	0x20000198

08012fd0 <memmove>:
 8012fd0:	4288      	cmp	r0, r1
 8012fd2:	b510      	push	{r4, lr}
 8012fd4:	eb01 0402 	add.w	r4, r1, r2
 8012fd8:	d902      	bls.n	8012fe0 <memmove+0x10>
 8012fda:	4284      	cmp	r4, r0
 8012fdc:	4623      	mov	r3, r4
 8012fde:	d807      	bhi.n	8012ff0 <memmove+0x20>
 8012fe0:	1e43      	subs	r3, r0, #1
 8012fe2:	42a1      	cmp	r1, r4
 8012fe4:	d008      	beq.n	8012ff8 <memmove+0x28>
 8012fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012fea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012fee:	e7f8      	b.n	8012fe2 <memmove+0x12>
 8012ff0:	4402      	add	r2, r0
 8012ff2:	4601      	mov	r1, r0
 8012ff4:	428a      	cmp	r2, r1
 8012ff6:	d100      	bne.n	8012ffa <memmove+0x2a>
 8012ff8:	bd10      	pop	{r4, pc}
 8012ffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013002:	e7f7      	b.n	8012ff4 <memmove+0x24>

08013004 <_realloc_r>:
 8013004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013006:	4607      	mov	r7, r0
 8013008:	4614      	mov	r4, r2
 801300a:	460e      	mov	r6, r1
 801300c:	b921      	cbnz	r1, 8013018 <_realloc_r+0x14>
 801300e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013012:	4611      	mov	r1, r2
 8013014:	f7fb bb0e 	b.w	800e634 <_malloc_r>
 8013018:	b922      	cbnz	r2, 8013024 <_realloc_r+0x20>
 801301a:	f7ff f9c5 	bl	80123a8 <_free_r>
 801301e:	4625      	mov	r5, r4
 8013020:	4628      	mov	r0, r5
 8013022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013024:	f000 fa9a 	bl	801355c <_malloc_usable_size_r>
 8013028:	42a0      	cmp	r0, r4
 801302a:	d20f      	bcs.n	801304c <_realloc_r+0x48>
 801302c:	4621      	mov	r1, r4
 801302e:	4638      	mov	r0, r7
 8013030:	f7fb fb00 	bl	800e634 <_malloc_r>
 8013034:	4605      	mov	r5, r0
 8013036:	2800      	cmp	r0, #0
 8013038:	d0f2      	beq.n	8013020 <_realloc_r+0x1c>
 801303a:	4631      	mov	r1, r6
 801303c:	4622      	mov	r2, r4
 801303e:	f7fb fae2 	bl	800e606 <memcpy>
 8013042:	4631      	mov	r1, r6
 8013044:	4638      	mov	r0, r7
 8013046:	f7ff f9af 	bl	80123a8 <_free_r>
 801304a:	e7e9      	b.n	8013020 <_realloc_r+0x1c>
 801304c:	4635      	mov	r5, r6
 801304e:	e7e7      	b.n	8013020 <_realloc_r+0x1c>

08013050 <__sfputc_r>:
 8013050:	6893      	ldr	r3, [r2, #8]
 8013052:	3b01      	subs	r3, #1
 8013054:	2b00      	cmp	r3, #0
 8013056:	b410      	push	{r4}
 8013058:	6093      	str	r3, [r2, #8]
 801305a:	da08      	bge.n	801306e <__sfputc_r+0x1e>
 801305c:	6994      	ldr	r4, [r2, #24]
 801305e:	42a3      	cmp	r3, r4
 8013060:	db01      	blt.n	8013066 <__sfputc_r+0x16>
 8013062:	290a      	cmp	r1, #10
 8013064:	d103      	bne.n	801306e <__sfputc_r+0x1e>
 8013066:	f85d 4b04 	ldr.w	r4, [sp], #4
 801306a:	f000 b94b 	b.w	8013304 <__swbuf_r>
 801306e:	6813      	ldr	r3, [r2, #0]
 8013070:	1c58      	adds	r0, r3, #1
 8013072:	6010      	str	r0, [r2, #0]
 8013074:	7019      	strb	r1, [r3, #0]
 8013076:	4608      	mov	r0, r1
 8013078:	f85d 4b04 	ldr.w	r4, [sp], #4
 801307c:	4770      	bx	lr

0801307e <__sfputs_r>:
 801307e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013080:	4606      	mov	r6, r0
 8013082:	460f      	mov	r7, r1
 8013084:	4614      	mov	r4, r2
 8013086:	18d5      	adds	r5, r2, r3
 8013088:	42ac      	cmp	r4, r5
 801308a:	d101      	bne.n	8013090 <__sfputs_r+0x12>
 801308c:	2000      	movs	r0, #0
 801308e:	e007      	b.n	80130a0 <__sfputs_r+0x22>
 8013090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013094:	463a      	mov	r2, r7
 8013096:	4630      	mov	r0, r6
 8013098:	f7ff ffda 	bl	8013050 <__sfputc_r>
 801309c:	1c43      	adds	r3, r0, #1
 801309e:	d1f3      	bne.n	8013088 <__sfputs_r+0xa>
 80130a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080130a4 <_vfiprintf_r>:
 80130a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130a8:	460d      	mov	r5, r1
 80130aa:	b09d      	sub	sp, #116	; 0x74
 80130ac:	4614      	mov	r4, r2
 80130ae:	4698      	mov	r8, r3
 80130b0:	4606      	mov	r6, r0
 80130b2:	b118      	cbz	r0, 80130bc <_vfiprintf_r+0x18>
 80130b4:	6983      	ldr	r3, [r0, #24]
 80130b6:	b90b      	cbnz	r3, 80130bc <_vfiprintf_r+0x18>
 80130b8:	f7fb f9e0 	bl	800e47c <__sinit>
 80130bc:	4b89      	ldr	r3, [pc, #548]	; (80132e4 <_vfiprintf_r+0x240>)
 80130be:	429d      	cmp	r5, r3
 80130c0:	d11b      	bne.n	80130fa <_vfiprintf_r+0x56>
 80130c2:	6875      	ldr	r5, [r6, #4]
 80130c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80130c6:	07d9      	lsls	r1, r3, #31
 80130c8:	d405      	bmi.n	80130d6 <_vfiprintf_r+0x32>
 80130ca:	89ab      	ldrh	r3, [r5, #12]
 80130cc:	059a      	lsls	r2, r3, #22
 80130ce:	d402      	bmi.n	80130d6 <_vfiprintf_r+0x32>
 80130d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80130d2:	f7fb fa96 	bl	800e602 <__retarget_lock_acquire_recursive>
 80130d6:	89ab      	ldrh	r3, [r5, #12]
 80130d8:	071b      	lsls	r3, r3, #28
 80130da:	d501      	bpl.n	80130e0 <_vfiprintf_r+0x3c>
 80130dc:	692b      	ldr	r3, [r5, #16]
 80130de:	b9eb      	cbnz	r3, 801311c <_vfiprintf_r+0x78>
 80130e0:	4629      	mov	r1, r5
 80130e2:	4630      	mov	r0, r6
 80130e4:	f000 f960 	bl	80133a8 <__swsetup_r>
 80130e8:	b1c0      	cbz	r0, 801311c <_vfiprintf_r+0x78>
 80130ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80130ec:	07dc      	lsls	r4, r3, #31
 80130ee:	d50e      	bpl.n	801310e <_vfiprintf_r+0x6a>
 80130f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80130f4:	b01d      	add	sp, #116	; 0x74
 80130f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fa:	4b7b      	ldr	r3, [pc, #492]	; (80132e8 <_vfiprintf_r+0x244>)
 80130fc:	429d      	cmp	r5, r3
 80130fe:	d101      	bne.n	8013104 <_vfiprintf_r+0x60>
 8013100:	68b5      	ldr	r5, [r6, #8]
 8013102:	e7df      	b.n	80130c4 <_vfiprintf_r+0x20>
 8013104:	4b79      	ldr	r3, [pc, #484]	; (80132ec <_vfiprintf_r+0x248>)
 8013106:	429d      	cmp	r5, r3
 8013108:	bf08      	it	eq
 801310a:	68f5      	ldreq	r5, [r6, #12]
 801310c:	e7da      	b.n	80130c4 <_vfiprintf_r+0x20>
 801310e:	89ab      	ldrh	r3, [r5, #12]
 8013110:	0598      	lsls	r0, r3, #22
 8013112:	d4ed      	bmi.n	80130f0 <_vfiprintf_r+0x4c>
 8013114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013116:	f7fb fa75 	bl	800e604 <__retarget_lock_release_recursive>
 801311a:	e7e9      	b.n	80130f0 <_vfiprintf_r+0x4c>
 801311c:	2300      	movs	r3, #0
 801311e:	9309      	str	r3, [sp, #36]	; 0x24
 8013120:	2320      	movs	r3, #32
 8013122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013126:	f8cd 800c 	str.w	r8, [sp, #12]
 801312a:	2330      	movs	r3, #48	; 0x30
 801312c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80132f0 <_vfiprintf_r+0x24c>
 8013130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013134:	f04f 0901 	mov.w	r9, #1
 8013138:	4623      	mov	r3, r4
 801313a:	469a      	mov	sl, r3
 801313c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013140:	b10a      	cbz	r2, 8013146 <_vfiprintf_r+0xa2>
 8013142:	2a25      	cmp	r2, #37	; 0x25
 8013144:	d1f9      	bne.n	801313a <_vfiprintf_r+0x96>
 8013146:	ebba 0b04 	subs.w	fp, sl, r4
 801314a:	d00b      	beq.n	8013164 <_vfiprintf_r+0xc0>
 801314c:	465b      	mov	r3, fp
 801314e:	4622      	mov	r2, r4
 8013150:	4629      	mov	r1, r5
 8013152:	4630      	mov	r0, r6
 8013154:	f7ff ff93 	bl	801307e <__sfputs_r>
 8013158:	3001      	adds	r0, #1
 801315a:	f000 80aa 	beq.w	80132b2 <_vfiprintf_r+0x20e>
 801315e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013160:	445a      	add	r2, fp
 8013162:	9209      	str	r2, [sp, #36]	; 0x24
 8013164:	f89a 3000 	ldrb.w	r3, [sl]
 8013168:	2b00      	cmp	r3, #0
 801316a:	f000 80a2 	beq.w	80132b2 <_vfiprintf_r+0x20e>
 801316e:	2300      	movs	r3, #0
 8013170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013178:	f10a 0a01 	add.w	sl, sl, #1
 801317c:	9304      	str	r3, [sp, #16]
 801317e:	9307      	str	r3, [sp, #28]
 8013180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013184:	931a      	str	r3, [sp, #104]	; 0x68
 8013186:	4654      	mov	r4, sl
 8013188:	2205      	movs	r2, #5
 801318a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801318e:	4858      	ldr	r0, [pc, #352]	; (80132f0 <_vfiprintf_r+0x24c>)
 8013190:	f7ed f836 	bl	8000200 <memchr>
 8013194:	9a04      	ldr	r2, [sp, #16]
 8013196:	b9d8      	cbnz	r0, 80131d0 <_vfiprintf_r+0x12c>
 8013198:	06d1      	lsls	r1, r2, #27
 801319a:	bf44      	itt	mi
 801319c:	2320      	movmi	r3, #32
 801319e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131a2:	0713      	lsls	r3, r2, #28
 80131a4:	bf44      	itt	mi
 80131a6:	232b      	movmi	r3, #43	; 0x2b
 80131a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131ac:	f89a 3000 	ldrb.w	r3, [sl]
 80131b0:	2b2a      	cmp	r3, #42	; 0x2a
 80131b2:	d015      	beq.n	80131e0 <_vfiprintf_r+0x13c>
 80131b4:	9a07      	ldr	r2, [sp, #28]
 80131b6:	4654      	mov	r4, sl
 80131b8:	2000      	movs	r0, #0
 80131ba:	f04f 0c0a 	mov.w	ip, #10
 80131be:	4621      	mov	r1, r4
 80131c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131c4:	3b30      	subs	r3, #48	; 0x30
 80131c6:	2b09      	cmp	r3, #9
 80131c8:	d94e      	bls.n	8013268 <_vfiprintf_r+0x1c4>
 80131ca:	b1b0      	cbz	r0, 80131fa <_vfiprintf_r+0x156>
 80131cc:	9207      	str	r2, [sp, #28]
 80131ce:	e014      	b.n	80131fa <_vfiprintf_r+0x156>
 80131d0:	eba0 0308 	sub.w	r3, r0, r8
 80131d4:	fa09 f303 	lsl.w	r3, r9, r3
 80131d8:	4313      	orrs	r3, r2
 80131da:	9304      	str	r3, [sp, #16]
 80131dc:	46a2      	mov	sl, r4
 80131de:	e7d2      	b.n	8013186 <_vfiprintf_r+0xe2>
 80131e0:	9b03      	ldr	r3, [sp, #12]
 80131e2:	1d19      	adds	r1, r3, #4
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	9103      	str	r1, [sp, #12]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	bfbb      	ittet	lt
 80131ec:	425b      	neglt	r3, r3
 80131ee:	f042 0202 	orrlt.w	r2, r2, #2
 80131f2:	9307      	strge	r3, [sp, #28]
 80131f4:	9307      	strlt	r3, [sp, #28]
 80131f6:	bfb8      	it	lt
 80131f8:	9204      	strlt	r2, [sp, #16]
 80131fa:	7823      	ldrb	r3, [r4, #0]
 80131fc:	2b2e      	cmp	r3, #46	; 0x2e
 80131fe:	d10c      	bne.n	801321a <_vfiprintf_r+0x176>
 8013200:	7863      	ldrb	r3, [r4, #1]
 8013202:	2b2a      	cmp	r3, #42	; 0x2a
 8013204:	d135      	bne.n	8013272 <_vfiprintf_r+0x1ce>
 8013206:	9b03      	ldr	r3, [sp, #12]
 8013208:	1d1a      	adds	r2, r3, #4
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	9203      	str	r2, [sp, #12]
 801320e:	2b00      	cmp	r3, #0
 8013210:	bfb8      	it	lt
 8013212:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013216:	3402      	adds	r4, #2
 8013218:	9305      	str	r3, [sp, #20]
 801321a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013300 <_vfiprintf_r+0x25c>
 801321e:	7821      	ldrb	r1, [r4, #0]
 8013220:	2203      	movs	r2, #3
 8013222:	4650      	mov	r0, sl
 8013224:	f7ec ffec 	bl	8000200 <memchr>
 8013228:	b140      	cbz	r0, 801323c <_vfiprintf_r+0x198>
 801322a:	2340      	movs	r3, #64	; 0x40
 801322c:	eba0 000a 	sub.w	r0, r0, sl
 8013230:	fa03 f000 	lsl.w	r0, r3, r0
 8013234:	9b04      	ldr	r3, [sp, #16]
 8013236:	4303      	orrs	r3, r0
 8013238:	3401      	adds	r4, #1
 801323a:	9304      	str	r3, [sp, #16]
 801323c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013240:	482c      	ldr	r0, [pc, #176]	; (80132f4 <_vfiprintf_r+0x250>)
 8013242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013246:	2206      	movs	r2, #6
 8013248:	f7ec ffda 	bl	8000200 <memchr>
 801324c:	2800      	cmp	r0, #0
 801324e:	d03f      	beq.n	80132d0 <_vfiprintf_r+0x22c>
 8013250:	4b29      	ldr	r3, [pc, #164]	; (80132f8 <_vfiprintf_r+0x254>)
 8013252:	bb1b      	cbnz	r3, 801329c <_vfiprintf_r+0x1f8>
 8013254:	9b03      	ldr	r3, [sp, #12]
 8013256:	3307      	adds	r3, #7
 8013258:	f023 0307 	bic.w	r3, r3, #7
 801325c:	3308      	adds	r3, #8
 801325e:	9303      	str	r3, [sp, #12]
 8013260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013262:	443b      	add	r3, r7
 8013264:	9309      	str	r3, [sp, #36]	; 0x24
 8013266:	e767      	b.n	8013138 <_vfiprintf_r+0x94>
 8013268:	fb0c 3202 	mla	r2, ip, r2, r3
 801326c:	460c      	mov	r4, r1
 801326e:	2001      	movs	r0, #1
 8013270:	e7a5      	b.n	80131be <_vfiprintf_r+0x11a>
 8013272:	2300      	movs	r3, #0
 8013274:	3401      	adds	r4, #1
 8013276:	9305      	str	r3, [sp, #20]
 8013278:	4619      	mov	r1, r3
 801327a:	f04f 0c0a 	mov.w	ip, #10
 801327e:	4620      	mov	r0, r4
 8013280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013284:	3a30      	subs	r2, #48	; 0x30
 8013286:	2a09      	cmp	r2, #9
 8013288:	d903      	bls.n	8013292 <_vfiprintf_r+0x1ee>
 801328a:	2b00      	cmp	r3, #0
 801328c:	d0c5      	beq.n	801321a <_vfiprintf_r+0x176>
 801328e:	9105      	str	r1, [sp, #20]
 8013290:	e7c3      	b.n	801321a <_vfiprintf_r+0x176>
 8013292:	fb0c 2101 	mla	r1, ip, r1, r2
 8013296:	4604      	mov	r4, r0
 8013298:	2301      	movs	r3, #1
 801329a:	e7f0      	b.n	801327e <_vfiprintf_r+0x1da>
 801329c:	ab03      	add	r3, sp, #12
 801329e:	9300      	str	r3, [sp, #0]
 80132a0:	462a      	mov	r2, r5
 80132a2:	4b16      	ldr	r3, [pc, #88]	; (80132fc <_vfiprintf_r+0x258>)
 80132a4:	a904      	add	r1, sp, #16
 80132a6:	4630      	mov	r0, r6
 80132a8:	f7fb fabe 	bl	800e828 <_printf_float>
 80132ac:	4607      	mov	r7, r0
 80132ae:	1c78      	adds	r0, r7, #1
 80132b0:	d1d6      	bne.n	8013260 <_vfiprintf_r+0x1bc>
 80132b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132b4:	07d9      	lsls	r1, r3, #31
 80132b6:	d405      	bmi.n	80132c4 <_vfiprintf_r+0x220>
 80132b8:	89ab      	ldrh	r3, [r5, #12]
 80132ba:	059a      	lsls	r2, r3, #22
 80132bc:	d402      	bmi.n	80132c4 <_vfiprintf_r+0x220>
 80132be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132c0:	f7fb f9a0 	bl	800e604 <__retarget_lock_release_recursive>
 80132c4:	89ab      	ldrh	r3, [r5, #12]
 80132c6:	065b      	lsls	r3, r3, #25
 80132c8:	f53f af12 	bmi.w	80130f0 <_vfiprintf_r+0x4c>
 80132cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80132ce:	e711      	b.n	80130f4 <_vfiprintf_r+0x50>
 80132d0:	ab03      	add	r3, sp, #12
 80132d2:	9300      	str	r3, [sp, #0]
 80132d4:	462a      	mov	r2, r5
 80132d6:	4b09      	ldr	r3, [pc, #36]	; (80132fc <_vfiprintf_r+0x258>)
 80132d8:	a904      	add	r1, sp, #16
 80132da:	4630      	mov	r0, r6
 80132dc:	f7fb fd48 	bl	800ed70 <_printf_i>
 80132e0:	e7e4      	b.n	80132ac <_vfiprintf_r+0x208>
 80132e2:	bf00      	nop
 80132e4:	08013934 	.word	0x08013934
 80132e8:	08013954 	.word	0x08013954
 80132ec:	08013914 	.word	0x08013914
 80132f0:	08013c74 	.word	0x08013c74
 80132f4:	08013c7e 	.word	0x08013c7e
 80132f8:	0800e829 	.word	0x0800e829
 80132fc:	0801307f 	.word	0x0801307f
 8013300:	08013c7a 	.word	0x08013c7a

08013304 <__swbuf_r>:
 8013304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013306:	460e      	mov	r6, r1
 8013308:	4614      	mov	r4, r2
 801330a:	4605      	mov	r5, r0
 801330c:	b118      	cbz	r0, 8013316 <__swbuf_r+0x12>
 801330e:	6983      	ldr	r3, [r0, #24]
 8013310:	b90b      	cbnz	r3, 8013316 <__swbuf_r+0x12>
 8013312:	f7fb f8b3 	bl	800e47c <__sinit>
 8013316:	4b21      	ldr	r3, [pc, #132]	; (801339c <__swbuf_r+0x98>)
 8013318:	429c      	cmp	r4, r3
 801331a:	d12b      	bne.n	8013374 <__swbuf_r+0x70>
 801331c:	686c      	ldr	r4, [r5, #4]
 801331e:	69a3      	ldr	r3, [r4, #24]
 8013320:	60a3      	str	r3, [r4, #8]
 8013322:	89a3      	ldrh	r3, [r4, #12]
 8013324:	071a      	lsls	r2, r3, #28
 8013326:	d52f      	bpl.n	8013388 <__swbuf_r+0x84>
 8013328:	6923      	ldr	r3, [r4, #16]
 801332a:	b36b      	cbz	r3, 8013388 <__swbuf_r+0x84>
 801332c:	6923      	ldr	r3, [r4, #16]
 801332e:	6820      	ldr	r0, [r4, #0]
 8013330:	1ac0      	subs	r0, r0, r3
 8013332:	6963      	ldr	r3, [r4, #20]
 8013334:	b2f6      	uxtb	r6, r6
 8013336:	4283      	cmp	r3, r0
 8013338:	4637      	mov	r7, r6
 801333a:	dc04      	bgt.n	8013346 <__swbuf_r+0x42>
 801333c:	4621      	mov	r1, r4
 801333e:	4628      	mov	r0, r5
 8013340:	f7fd ff80 	bl	8011244 <_fflush_r>
 8013344:	bb30      	cbnz	r0, 8013394 <__swbuf_r+0x90>
 8013346:	68a3      	ldr	r3, [r4, #8]
 8013348:	3b01      	subs	r3, #1
 801334a:	60a3      	str	r3, [r4, #8]
 801334c:	6823      	ldr	r3, [r4, #0]
 801334e:	1c5a      	adds	r2, r3, #1
 8013350:	6022      	str	r2, [r4, #0]
 8013352:	701e      	strb	r6, [r3, #0]
 8013354:	6963      	ldr	r3, [r4, #20]
 8013356:	3001      	adds	r0, #1
 8013358:	4283      	cmp	r3, r0
 801335a:	d004      	beq.n	8013366 <__swbuf_r+0x62>
 801335c:	89a3      	ldrh	r3, [r4, #12]
 801335e:	07db      	lsls	r3, r3, #31
 8013360:	d506      	bpl.n	8013370 <__swbuf_r+0x6c>
 8013362:	2e0a      	cmp	r6, #10
 8013364:	d104      	bne.n	8013370 <__swbuf_r+0x6c>
 8013366:	4621      	mov	r1, r4
 8013368:	4628      	mov	r0, r5
 801336a:	f7fd ff6b 	bl	8011244 <_fflush_r>
 801336e:	b988      	cbnz	r0, 8013394 <__swbuf_r+0x90>
 8013370:	4638      	mov	r0, r7
 8013372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013374:	4b0a      	ldr	r3, [pc, #40]	; (80133a0 <__swbuf_r+0x9c>)
 8013376:	429c      	cmp	r4, r3
 8013378:	d101      	bne.n	801337e <__swbuf_r+0x7a>
 801337a:	68ac      	ldr	r4, [r5, #8]
 801337c:	e7cf      	b.n	801331e <__swbuf_r+0x1a>
 801337e:	4b09      	ldr	r3, [pc, #36]	; (80133a4 <__swbuf_r+0xa0>)
 8013380:	429c      	cmp	r4, r3
 8013382:	bf08      	it	eq
 8013384:	68ec      	ldreq	r4, [r5, #12]
 8013386:	e7ca      	b.n	801331e <__swbuf_r+0x1a>
 8013388:	4621      	mov	r1, r4
 801338a:	4628      	mov	r0, r5
 801338c:	f000 f80c 	bl	80133a8 <__swsetup_r>
 8013390:	2800      	cmp	r0, #0
 8013392:	d0cb      	beq.n	801332c <__swbuf_r+0x28>
 8013394:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013398:	e7ea      	b.n	8013370 <__swbuf_r+0x6c>
 801339a:	bf00      	nop
 801339c:	08013934 	.word	0x08013934
 80133a0:	08013954 	.word	0x08013954
 80133a4:	08013914 	.word	0x08013914

080133a8 <__swsetup_r>:
 80133a8:	4b32      	ldr	r3, [pc, #200]	; (8013474 <__swsetup_r+0xcc>)
 80133aa:	b570      	push	{r4, r5, r6, lr}
 80133ac:	681d      	ldr	r5, [r3, #0]
 80133ae:	4606      	mov	r6, r0
 80133b0:	460c      	mov	r4, r1
 80133b2:	b125      	cbz	r5, 80133be <__swsetup_r+0x16>
 80133b4:	69ab      	ldr	r3, [r5, #24]
 80133b6:	b913      	cbnz	r3, 80133be <__swsetup_r+0x16>
 80133b8:	4628      	mov	r0, r5
 80133ba:	f7fb f85f 	bl	800e47c <__sinit>
 80133be:	4b2e      	ldr	r3, [pc, #184]	; (8013478 <__swsetup_r+0xd0>)
 80133c0:	429c      	cmp	r4, r3
 80133c2:	d10f      	bne.n	80133e4 <__swsetup_r+0x3c>
 80133c4:	686c      	ldr	r4, [r5, #4]
 80133c6:	89a3      	ldrh	r3, [r4, #12]
 80133c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80133cc:	0719      	lsls	r1, r3, #28
 80133ce:	d42c      	bmi.n	801342a <__swsetup_r+0x82>
 80133d0:	06dd      	lsls	r5, r3, #27
 80133d2:	d411      	bmi.n	80133f8 <__swsetup_r+0x50>
 80133d4:	2309      	movs	r3, #9
 80133d6:	6033      	str	r3, [r6, #0]
 80133d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80133dc:	81a3      	strh	r3, [r4, #12]
 80133de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133e2:	e03e      	b.n	8013462 <__swsetup_r+0xba>
 80133e4:	4b25      	ldr	r3, [pc, #148]	; (801347c <__swsetup_r+0xd4>)
 80133e6:	429c      	cmp	r4, r3
 80133e8:	d101      	bne.n	80133ee <__swsetup_r+0x46>
 80133ea:	68ac      	ldr	r4, [r5, #8]
 80133ec:	e7eb      	b.n	80133c6 <__swsetup_r+0x1e>
 80133ee:	4b24      	ldr	r3, [pc, #144]	; (8013480 <__swsetup_r+0xd8>)
 80133f0:	429c      	cmp	r4, r3
 80133f2:	bf08      	it	eq
 80133f4:	68ec      	ldreq	r4, [r5, #12]
 80133f6:	e7e6      	b.n	80133c6 <__swsetup_r+0x1e>
 80133f8:	0758      	lsls	r0, r3, #29
 80133fa:	d512      	bpl.n	8013422 <__swsetup_r+0x7a>
 80133fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133fe:	b141      	cbz	r1, 8013412 <__swsetup_r+0x6a>
 8013400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013404:	4299      	cmp	r1, r3
 8013406:	d002      	beq.n	801340e <__swsetup_r+0x66>
 8013408:	4630      	mov	r0, r6
 801340a:	f7fe ffcd 	bl	80123a8 <_free_r>
 801340e:	2300      	movs	r3, #0
 8013410:	6363      	str	r3, [r4, #52]	; 0x34
 8013412:	89a3      	ldrh	r3, [r4, #12]
 8013414:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013418:	81a3      	strh	r3, [r4, #12]
 801341a:	2300      	movs	r3, #0
 801341c:	6063      	str	r3, [r4, #4]
 801341e:	6923      	ldr	r3, [r4, #16]
 8013420:	6023      	str	r3, [r4, #0]
 8013422:	89a3      	ldrh	r3, [r4, #12]
 8013424:	f043 0308 	orr.w	r3, r3, #8
 8013428:	81a3      	strh	r3, [r4, #12]
 801342a:	6923      	ldr	r3, [r4, #16]
 801342c:	b94b      	cbnz	r3, 8013442 <__swsetup_r+0x9a>
 801342e:	89a3      	ldrh	r3, [r4, #12]
 8013430:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013438:	d003      	beq.n	8013442 <__swsetup_r+0x9a>
 801343a:	4621      	mov	r1, r4
 801343c:	4630      	mov	r0, r6
 801343e:	f000 f84d 	bl	80134dc <__smakebuf_r>
 8013442:	89a0      	ldrh	r0, [r4, #12]
 8013444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013448:	f010 0301 	ands.w	r3, r0, #1
 801344c:	d00a      	beq.n	8013464 <__swsetup_r+0xbc>
 801344e:	2300      	movs	r3, #0
 8013450:	60a3      	str	r3, [r4, #8]
 8013452:	6963      	ldr	r3, [r4, #20]
 8013454:	425b      	negs	r3, r3
 8013456:	61a3      	str	r3, [r4, #24]
 8013458:	6923      	ldr	r3, [r4, #16]
 801345a:	b943      	cbnz	r3, 801346e <__swsetup_r+0xc6>
 801345c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013460:	d1ba      	bne.n	80133d8 <__swsetup_r+0x30>
 8013462:	bd70      	pop	{r4, r5, r6, pc}
 8013464:	0781      	lsls	r1, r0, #30
 8013466:	bf58      	it	pl
 8013468:	6963      	ldrpl	r3, [r4, #20]
 801346a:	60a3      	str	r3, [r4, #8]
 801346c:	e7f4      	b.n	8013458 <__swsetup_r+0xb0>
 801346e:	2000      	movs	r0, #0
 8013470:	e7f7      	b.n	8013462 <__swsetup_r+0xba>
 8013472:	bf00      	nop
 8013474:	20000198 	.word	0x20000198
 8013478:	08013934 	.word	0x08013934
 801347c:	08013954 	.word	0x08013954
 8013480:	08013914 	.word	0x08013914

08013484 <abort>:
 8013484:	b508      	push	{r3, lr}
 8013486:	2006      	movs	r0, #6
 8013488:	f000 f898 	bl	80135bc <raise>
 801348c:	2001      	movs	r0, #1
 801348e:	f7ef fbb7 	bl	8002c00 <_exit>

08013492 <__swhatbuf_r>:
 8013492:	b570      	push	{r4, r5, r6, lr}
 8013494:	460e      	mov	r6, r1
 8013496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801349a:	2900      	cmp	r1, #0
 801349c:	b096      	sub	sp, #88	; 0x58
 801349e:	4614      	mov	r4, r2
 80134a0:	461d      	mov	r5, r3
 80134a2:	da07      	bge.n	80134b4 <__swhatbuf_r+0x22>
 80134a4:	2300      	movs	r3, #0
 80134a6:	602b      	str	r3, [r5, #0]
 80134a8:	89b3      	ldrh	r3, [r6, #12]
 80134aa:	061a      	lsls	r2, r3, #24
 80134ac:	d410      	bmi.n	80134d0 <__swhatbuf_r+0x3e>
 80134ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80134b2:	e00e      	b.n	80134d2 <__swhatbuf_r+0x40>
 80134b4:	466a      	mov	r2, sp
 80134b6:	f000 f89d 	bl	80135f4 <_fstat_r>
 80134ba:	2800      	cmp	r0, #0
 80134bc:	dbf2      	blt.n	80134a4 <__swhatbuf_r+0x12>
 80134be:	9a01      	ldr	r2, [sp, #4]
 80134c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80134c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80134c8:	425a      	negs	r2, r3
 80134ca:	415a      	adcs	r2, r3
 80134cc:	602a      	str	r2, [r5, #0]
 80134ce:	e7ee      	b.n	80134ae <__swhatbuf_r+0x1c>
 80134d0:	2340      	movs	r3, #64	; 0x40
 80134d2:	2000      	movs	r0, #0
 80134d4:	6023      	str	r3, [r4, #0]
 80134d6:	b016      	add	sp, #88	; 0x58
 80134d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080134dc <__smakebuf_r>:
 80134dc:	898b      	ldrh	r3, [r1, #12]
 80134de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80134e0:	079d      	lsls	r5, r3, #30
 80134e2:	4606      	mov	r6, r0
 80134e4:	460c      	mov	r4, r1
 80134e6:	d507      	bpl.n	80134f8 <__smakebuf_r+0x1c>
 80134e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80134ec:	6023      	str	r3, [r4, #0]
 80134ee:	6123      	str	r3, [r4, #16]
 80134f0:	2301      	movs	r3, #1
 80134f2:	6163      	str	r3, [r4, #20]
 80134f4:	b002      	add	sp, #8
 80134f6:	bd70      	pop	{r4, r5, r6, pc}
 80134f8:	ab01      	add	r3, sp, #4
 80134fa:	466a      	mov	r2, sp
 80134fc:	f7ff ffc9 	bl	8013492 <__swhatbuf_r>
 8013500:	9900      	ldr	r1, [sp, #0]
 8013502:	4605      	mov	r5, r0
 8013504:	4630      	mov	r0, r6
 8013506:	f7fb f895 	bl	800e634 <_malloc_r>
 801350a:	b948      	cbnz	r0, 8013520 <__smakebuf_r+0x44>
 801350c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013510:	059a      	lsls	r2, r3, #22
 8013512:	d4ef      	bmi.n	80134f4 <__smakebuf_r+0x18>
 8013514:	f023 0303 	bic.w	r3, r3, #3
 8013518:	f043 0302 	orr.w	r3, r3, #2
 801351c:	81a3      	strh	r3, [r4, #12]
 801351e:	e7e3      	b.n	80134e8 <__smakebuf_r+0xc>
 8013520:	4b0d      	ldr	r3, [pc, #52]	; (8013558 <__smakebuf_r+0x7c>)
 8013522:	62b3      	str	r3, [r6, #40]	; 0x28
 8013524:	89a3      	ldrh	r3, [r4, #12]
 8013526:	6020      	str	r0, [r4, #0]
 8013528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801352c:	81a3      	strh	r3, [r4, #12]
 801352e:	9b00      	ldr	r3, [sp, #0]
 8013530:	6163      	str	r3, [r4, #20]
 8013532:	9b01      	ldr	r3, [sp, #4]
 8013534:	6120      	str	r0, [r4, #16]
 8013536:	b15b      	cbz	r3, 8013550 <__smakebuf_r+0x74>
 8013538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801353c:	4630      	mov	r0, r6
 801353e:	f000 f86b 	bl	8013618 <_isatty_r>
 8013542:	b128      	cbz	r0, 8013550 <__smakebuf_r+0x74>
 8013544:	89a3      	ldrh	r3, [r4, #12]
 8013546:	f023 0303 	bic.w	r3, r3, #3
 801354a:	f043 0301 	orr.w	r3, r3, #1
 801354e:	81a3      	strh	r3, [r4, #12]
 8013550:	89a0      	ldrh	r0, [r4, #12]
 8013552:	4305      	orrs	r5, r0
 8013554:	81a5      	strh	r5, [r4, #12]
 8013556:	e7cd      	b.n	80134f4 <__smakebuf_r+0x18>
 8013558:	0800e415 	.word	0x0800e415

0801355c <_malloc_usable_size_r>:
 801355c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013560:	1f18      	subs	r0, r3, #4
 8013562:	2b00      	cmp	r3, #0
 8013564:	bfbc      	itt	lt
 8013566:	580b      	ldrlt	r3, [r1, r0]
 8013568:	18c0      	addlt	r0, r0, r3
 801356a:	4770      	bx	lr

0801356c <_raise_r>:
 801356c:	291f      	cmp	r1, #31
 801356e:	b538      	push	{r3, r4, r5, lr}
 8013570:	4604      	mov	r4, r0
 8013572:	460d      	mov	r5, r1
 8013574:	d904      	bls.n	8013580 <_raise_r+0x14>
 8013576:	2316      	movs	r3, #22
 8013578:	6003      	str	r3, [r0, #0]
 801357a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801357e:	bd38      	pop	{r3, r4, r5, pc}
 8013580:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013582:	b112      	cbz	r2, 801358a <_raise_r+0x1e>
 8013584:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013588:	b94b      	cbnz	r3, 801359e <_raise_r+0x32>
 801358a:	4620      	mov	r0, r4
 801358c:	f000 f830 	bl	80135f0 <_getpid_r>
 8013590:	462a      	mov	r2, r5
 8013592:	4601      	mov	r1, r0
 8013594:	4620      	mov	r0, r4
 8013596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801359a:	f000 b817 	b.w	80135cc <_kill_r>
 801359e:	2b01      	cmp	r3, #1
 80135a0:	d00a      	beq.n	80135b8 <_raise_r+0x4c>
 80135a2:	1c59      	adds	r1, r3, #1
 80135a4:	d103      	bne.n	80135ae <_raise_r+0x42>
 80135a6:	2316      	movs	r3, #22
 80135a8:	6003      	str	r3, [r0, #0]
 80135aa:	2001      	movs	r0, #1
 80135ac:	e7e7      	b.n	801357e <_raise_r+0x12>
 80135ae:	2400      	movs	r4, #0
 80135b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80135b4:	4628      	mov	r0, r5
 80135b6:	4798      	blx	r3
 80135b8:	2000      	movs	r0, #0
 80135ba:	e7e0      	b.n	801357e <_raise_r+0x12>

080135bc <raise>:
 80135bc:	4b02      	ldr	r3, [pc, #8]	; (80135c8 <raise+0xc>)
 80135be:	4601      	mov	r1, r0
 80135c0:	6818      	ldr	r0, [r3, #0]
 80135c2:	f7ff bfd3 	b.w	801356c <_raise_r>
 80135c6:	bf00      	nop
 80135c8:	20000198 	.word	0x20000198

080135cc <_kill_r>:
 80135cc:	b538      	push	{r3, r4, r5, lr}
 80135ce:	4d07      	ldr	r5, [pc, #28]	; (80135ec <_kill_r+0x20>)
 80135d0:	2300      	movs	r3, #0
 80135d2:	4604      	mov	r4, r0
 80135d4:	4608      	mov	r0, r1
 80135d6:	4611      	mov	r1, r2
 80135d8:	602b      	str	r3, [r5, #0]
 80135da:	f7ef fb01 	bl	8002be0 <_kill>
 80135de:	1c43      	adds	r3, r0, #1
 80135e0:	d102      	bne.n	80135e8 <_kill_r+0x1c>
 80135e2:	682b      	ldr	r3, [r5, #0]
 80135e4:	b103      	cbz	r3, 80135e8 <_kill_r+0x1c>
 80135e6:	6023      	str	r3, [r4, #0]
 80135e8:	bd38      	pop	{r3, r4, r5, pc}
 80135ea:	bf00      	nop
 80135ec:	200071a4 	.word	0x200071a4

080135f0 <_getpid_r>:
 80135f0:	f7ef baee 	b.w	8002bd0 <_getpid>

080135f4 <_fstat_r>:
 80135f4:	b538      	push	{r3, r4, r5, lr}
 80135f6:	4d07      	ldr	r5, [pc, #28]	; (8013614 <_fstat_r+0x20>)
 80135f8:	2300      	movs	r3, #0
 80135fa:	4604      	mov	r4, r0
 80135fc:	4608      	mov	r0, r1
 80135fe:	4611      	mov	r1, r2
 8013600:	602b      	str	r3, [r5, #0]
 8013602:	f7ef fb4c 	bl	8002c9e <_fstat>
 8013606:	1c43      	adds	r3, r0, #1
 8013608:	d102      	bne.n	8013610 <_fstat_r+0x1c>
 801360a:	682b      	ldr	r3, [r5, #0]
 801360c:	b103      	cbz	r3, 8013610 <_fstat_r+0x1c>
 801360e:	6023      	str	r3, [r4, #0]
 8013610:	bd38      	pop	{r3, r4, r5, pc}
 8013612:	bf00      	nop
 8013614:	200071a4 	.word	0x200071a4

08013618 <_isatty_r>:
 8013618:	b538      	push	{r3, r4, r5, lr}
 801361a:	4d06      	ldr	r5, [pc, #24]	; (8013634 <_isatty_r+0x1c>)
 801361c:	2300      	movs	r3, #0
 801361e:	4604      	mov	r4, r0
 8013620:	4608      	mov	r0, r1
 8013622:	602b      	str	r3, [r5, #0]
 8013624:	f7ef fb4b 	bl	8002cbe <_isatty>
 8013628:	1c43      	adds	r3, r0, #1
 801362a:	d102      	bne.n	8013632 <_isatty_r+0x1a>
 801362c:	682b      	ldr	r3, [r5, #0]
 801362e:	b103      	cbz	r3, 8013632 <_isatty_r+0x1a>
 8013630:	6023      	str	r3, [r4, #0]
 8013632:	bd38      	pop	{r3, r4, r5, pc}
 8013634:	200071a4 	.word	0x200071a4

08013638 <_init>:
 8013638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801363a:	bf00      	nop
 801363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801363e:	bc08      	pop	{r3}
 8013640:	469e      	mov	lr, r3
 8013642:	4770      	bx	lr

08013644 <_fini>:
 8013644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013646:	bf00      	nop
 8013648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801364a:	bc08      	pop	{r3}
 801364c:	469e      	mov	lr, r3
 801364e:	4770      	bx	lr
